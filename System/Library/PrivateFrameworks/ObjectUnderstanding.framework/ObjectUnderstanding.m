void sub_237C192C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_237C19CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL float4x4FromNSArray(NSArray *a1, simd_float4x4 *a2)
{
  v3 = a1;
  uint64_t v4 = [(NSArray *)v3 count];
  if (v4 == 4)
  {
    v5 = [(NSArray *)v3 objectAtIndexedSubscript:0];
    v6 = [(NSArray *)v3 objectAtIndexedSubscript:1];
    v7 = [(NSArray *)v3 objectAtIndexedSubscript:2];
    v21 = v3;
    v8 = [(NSArray *)v3 objectAtIndexedSubscript:3];
    for (uint64_t i = 0; i != 4; ++i)
    {
      v10 = [v5 objectAtIndexedSubscript:i];
      [v10 floatValue];
      unsigned int v24 = v11;
      v12 = [v6 objectAtIndexedSubscript:i];
      [v12 floatValue];
      unsigned int v23 = v13;
      v14 = [v7 objectAtIndexedSubscript:i];
      [v14 floatValue];
      unsigned int v22 = v15;
      v16 = [v8 objectAtIndexedSubscript:i];
      [v16 floatValue];
      v17.i64[0] = __PAIR64__(v23, v24);
      v17.i64[1] = __PAIR64__(v18, v22);
      a2->columns[i] = v17;
    }
    uint64_t v4 = 4;
    v3 = v21;
  }
  BOOL v19 = v4 == 4;

  return v19;
}

{
  NSArray *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t i;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  simd_float4 v17;
  unsigned int v18;
  BOOL v19;
  NSArray *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v3 = a1;
  uint64_t v4 = [(NSArray *)v3 count];
  if (v4 == 4)
  {
    v5 = [(NSArray *)v3 objectAtIndexedSubscript:0];
    v6 = [(NSArray *)v3 objectAtIndexedSubscript:1];
    v7 = [(NSArray *)v3 objectAtIndexedSubscript:2];
    v21 = v3;
    v8 = [(NSArray *)v3 objectAtIndexedSubscript:3];
    for (uint64_t i = 0; i != 4; ++i)
    {
      v10 = [v5 objectAtIndexedSubscript:i];
      [v10 floatValue];
      unsigned int v24 = v11;
      v12 = [v6 objectAtIndexedSubscript:i];
      [v12 floatValue];
      unsigned int v23 = v13;
      v14 = [v7 objectAtIndexedSubscript:i];
      [v14 floatValue];
      unsigned int v22 = v15;
      v16 = [v8 objectAtIndexedSubscript:i];
      [v16 floatValue];
      v17.i64[0] = __PAIR64__(v23, v24);
      v17.i64[1] = __PAIR64__(v18, v22);
      a2->columns[i] = v17;
    }
    uint64_t v4 = 4;
    v3 = v21;
  }
  BOOL v19 = v4 == 4;

  return v19;
}

void sub_237C1A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_237C1A1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_OUFrame;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_237C1A6D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id OUFrameToDictionary(void *a1)
{
  id v1 = a1;
  v2 = [MEMORY[0x263EFF9A0] dictionary];
  v3 = NSNumber;
  [v1 timestamp];
  uint64_t v4 = objc_msgSend(v3, "numberWithDouble:");
  [v2 setObject:v4 forKeyedSubscript:@"timestamp"];

  [v1 referenceOriginTransform];
  v58.columns[0] = v5;
  v58.columns[1] = v6;
  v58.columns[2] = v7;
  v58.columns[3] = v8;
  v9 = float4x4ToNSArray(&v58, *(double *)v5.i64);
  [v2 setObject:v9 forKeyedSubscript:@"reference_origin_transform"];

  v10 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "deviceOrientation"));
  [v2 setObject:v10 forKeyedSubscript:@"device_orientation"];

  unsigned int v11 = [v1 camera];
  v12 = OUCameraToDictionary(v11);
  [v2 setObject:v12 forKeyedSubscript:@"camera"];

  unsigned int v13 = [v1 sceneCamera];
  v14 = OUCameraToDictionary(v13);
  [v2 setObject:v14 forKeyedSubscript:@"scene_camera"];

  unsigned int v15 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "colorBuffer")));
  [v2 setObject:v15 forKeyedSubscript:@"color_width"];

  v16 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "colorBuffer")));
  [v2 setObject:v16 forKeyedSubscript:@"color_height"];

  simd_float4 v17 = (__CVBuffer *)[v1 colorBuffer];
  CVPixelBufferLockBaseAddress(v17, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(v17);
  size_t DataSize = CVPixelBufferGetDataSize(v17);
  if (BaseAddress && DataSize)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", BaseAddress);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v20 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v21 = v20;
  CVPixelBufferUnlockBaseAddress(v17, 1uLL);
  [v2 setObject:v21 forKeyedSubscript:@"color_buffer"];

  unsigned int v22 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneColorBuffer")));
  [v2 setObject:v22 forKeyedSubscript:@"scene_color_width"];

  unsigned int v23 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneColorBuffer")));
  [v2 setObject:v23 forKeyedSubscript:@"scene_color_height"];

  unsigned int v24 = (__CVBuffer *)[v1 sceneColorBuffer];
  CVPixelBufferLockBaseAddress(v24, 1uLL);
  v25 = CVPixelBufferGetBaseAddress(v24);
  size_t v26 = CVPixelBufferGetDataSize(v24);
  if (v25 && v26)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v25);
    id v27 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v27 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v28 = v27;
  CVPixelBufferUnlockBaseAddress(v24, 1uLL);
  [v2 setObject:v28 forKeyedSubscript:@"scene_color_buffer"];

  v29 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "semanticLabelBuffer")));
  [v2 setObject:v29 forKeyedSubscript:@"semantic_label_width"];

  v30 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "semanticLabelBuffer")));
  [v2 setObject:v30 forKeyedSubscript:@"semantic_label_height"];

  v31 = (__CVBuffer *)[v1 semanticLabelBuffer];
  CVPixelBufferLockBaseAddress(v31, 1uLL);
  v32 = CVPixelBufferGetBaseAddress(v31);
  size_t v33 = CVPixelBufferGetDataSize(v31);
  if (v32 && v33)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v32);
    id v34 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v34 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v35 = v34;
  CVPixelBufferUnlockBaseAddress(v31, 1uLL);
  [v2 setObject:v35 forKeyedSubscript:@"semantic_label_buffer"];

  v36 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "semanticConfidenceBuffer")));
  [v2 setObject:v36 forKeyedSubscript:@"semantic_confidence_width"];

  v37 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "semanticConfidenceBuffer")));
  [v2 setObject:v37 forKeyedSubscript:@"semantic_confidence_height"];

  v38 = (__CVBuffer *)[v1 semanticConfidenceBuffer];
  CVPixelBufferLockBaseAddress(v38, 1uLL);
  v39 = CVPixelBufferGetBaseAddress(v38);
  size_t v40 = CVPixelBufferGetDataSize(v38);
  if (v39 && v40)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v39);
    id v41 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v41 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v42 = v41;
  CVPixelBufferUnlockBaseAddress(v38, 1uLL);
  [v2 setObject:v42 forKeyedSubscript:@"semantic_confidence_buffer"];

  v43 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthBuffer")));
  [v2 setObject:v43 forKeyedSubscript:@"scene_depth_width"];

  v44 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthBuffer")));
  [v2 setObject:v44 forKeyedSubscript:@"scene_depth_height"];

  v45 = (__CVBuffer *)[v1 sceneDepthBuffer];
  CVPixelBufferLockBaseAddress(v45, 1uLL);
  v46 = CVPixelBufferGetBaseAddress(v45);
  size_t v47 = CVPixelBufferGetDataSize(v45);
  if (v46 && v47)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v46);
    id v48 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v48 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v49 = v48;
  CVPixelBufferUnlockBaseAddress(v45, 1uLL);
  [v2 setObject:v49 forKeyedSubscript:@"scene_depth_buffer"];

  v50 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthConfidenceBuffer")));
  [v2 setObject:v50 forKeyedSubscript:@"scene_depth_confidence_width"];

  v51 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthConfidenceBuffer")));
  [v2 setObject:v51 forKeyedSubscript:@"scene_depth_confidence_height"];

  v52 = (__CVBuffer *)[v1 sceneDepthConfidenceBuffer];
  CVPixelBufferLockBaseAddress(v52, 1uLL);
  v53 = CVPixelBufferGetBaseAddress(v52);
  size_t v54 = CVPixelBufferGetDataSize(v52);
  if (v53 && v54)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v53);
    id v55 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v55 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  v56 = v55;
  CVPixelBufferUnlockBaseAddress(v52, 1uLL);
  [v2 setObject:v56 forKeyedSubscript:@"scene_depth_confidence_buffer"];

  return v2;
}

void sub_237C1AF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id float4x4ToNSArray(const simd_float4x4 *a1, double a2)
{
  v47[4] = *MEMORY[0x263EF8340];
  LODWORD(a2) = a1->columns[0].i32[0];
  uint64_t v43 = [NSNumber numberWithFloat:a2];
  LODWORD(v3) = a1->columns[1].i32[0];
  v39 = (void *)v43;
  uint64_t v44 = [NSNumber numberWithFloat:v3];
  LODWORD(v4) = a1->columns[2].i32[0];
  v38 = (void *)v44;
  v37 = [NSNumber numberWithFloat:v4];
  v45 = v37;
  LODWORD(v5) = a1->columns[3].i32[0];
  v36 = [NSNumber numberWithFloat:v5];
  v46 = v36;
  v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v43 count:4];
  v47[0] = v35;
  LODWORD(v6) = a1->columns[0].i32[1];
  id v34 = [NSNumber numberWithFloat:v6];
  v42[0] = v34;
  LODWORD(v7) = a1->columns[1].i32[1];
  size_t v33 = [NSNumber numberWithFloat:v7];
  v42[1] = v33;
  LODWORD(v8) = a1->columns[2].i32[1];
  v32 = [NSNumber numberWithFloat:v8];
  v42[2] = v32;
  LODWORD(v9) = a1->columns[3].i32[1];
  v31 = [NSNumber numberWithFloat:v9];
  v42[3] = v31;
  v30 = [MEMORY[0x263EFF8C0] arrayWithObjects:v42 count:4];
  v47[1] = v30;
  LODWORD(v10) = a1->columns[0].i32[2];
  v29 = [NSNumber numberWithFloat:v10];
  v41[0] = v29;
  LODWORD(v11) = a1->columns[1].i32[2];
  v28 = [NSNumber numberWithFloat:v11];
  v41[1] = v28;
  LODWORD(v12) = a1->columns[2].i32[2];
  unsigned int v13 = [NSNumber numberWithFloat:v12];
  v41[2] = v13;
  LODWORD(v14) = a1->columns[3].i32[2];
  unsigned int v15 = [NSNumber numberWithFloat:v14];
  v41[3] = v15;
  v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v41 count:4];
  v47[2] = v16;
  LODWORD(v17) = a1->columns[0].i32[3];
  unsigned int v18 = [NSNumber numberWithFloat:v17];
  v40[0] = v18;
  LODWORD(v19) = a1->columns[1].i32[3];
  id v20 = [NSNumber numberWithFloat:v19];
  v40[1] = v20;
  LODWORD(v21) = a1->columns[2].i32[3];
  unsigned int v22 = [NSNumber numberWithFloat:v21];
  v40[2] = v22;
  LODWORD(v23) = a1->columns[3].i32[3];
  unsigned int v24 = [NSNumber numberWithFloat:v23];
  v40[3] = v24;
  v25 = [MEMORY[0x263EFF8C0] arrayWithObjects:v40 count:4];
  v47[3] = v25;
  size_t v26 = [MEMORY[0x263EFF8C0] arrayWithObjects:v47 count:4];

  return v26;
}

{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void v40[4];
  void v41[4];
  void v42[4];
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void v47[6];
  uint64_t vars8;

  v47[4] = *MEMORY[0x263EF8340];
  LODWORD(a2) = a1->columns[0].i32[0];
  uint64_t v43 = [NSNumber numberWithFloat:a2];
  LODWORD(v3) = a1->columns[1].i32[0];
  v39 = (void *)v43;
  uint64_t v44 = [NSNumber numberWithFloat:v3];
  LODWORD(v4) = a1->columns[2].i32[0];
  v38 = (void *)v44;
  v37 = [NSNumber numberWithFloat:v4];
  v45 = v37;
  LODWORD(v5) = a1->columns[3].i32[0];
  v36 = [NSNumber numberWithFloat:v5];
  v46 = v36;
  v35 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v43 count:4];
  v47[0] = v35;
  LODWORD(v6) = a1->columns[0].i32[1];
  id v34 = [NSNumber numberWithFloat:v6];
  v42[0] = v34;
  LODWORD(v7) = a1->columns[1].i32[1];
  size_t v33 = [NSNumber numberWithFloat:v7];
  v42[1] = v33;
  LODWORD(v8) = a1->columns[2].i32[1];
  v32 = [NSNumber numberWithFloat:v8];
  v42[2] = v32;
  LODWORD(v9) = a1->columns[3].i32[1];
  v31 = [NSNumber numberWithFloat:v9];
  v42[3] = v31;
  v30 = [MEMORY[0x263EFF8C0] arrayWithObjects:v42 count:4];
  v47[1] = v30;
  LODWORD(v10) = a1->columns[0].i32[2];
  v29 = [NSNumber numberWithFloat:v10];
  v41[0] = v29;
  LODWORD(v11) = a1->columns[1].i32[2];
  v28 = [NSNumber numberWithFloat:v11];
  v41[1] = v28;
  LODWORD(v12) = a1->columns[2].i32[2];
  unsigned int v13 = [NSNumber numberWithFloat:v12];
  v41[2] = v13;
  LODWORD(v14) = a1->columns[3].i32[2];
  unsigned int v15 = [NSNumber numberWithFloat:v14];
  v41[3] = v15;
  v16 = [MEMORY[0x263EFF8C0] arrayWithObjects:v41 count:4];
  v47[2] = v16;
  LODWORD(v17) = a1->columns[0].i32[3];
  unsigned int v18 = [NSNumber numberWithFloat:v17];
  v40[0] = v18;
  LODWORD(v19) = a1->columns[1].i32[3];
  id v20 = [NSNumber numberWithFloat:v19];
  v40[1] = v20;
  LODWORD(v21) = a1->columns[2].i32[3];
  unsigned int v22 = [NSNumber numberWithFloat:v21];
  v40[2] = v22;
  LODWORD(v23) = a1->columns[3].i32[3];
  unsigned int v24 = [NSNumber numberWithFloat:v23];
  v40[3] = v24;
  v25 = [MEMORY[0x263EFF8C0] arrayWithObjects:v40 count:4];
  v47[3] = v25;
  size_t v26 = [MEMORY[0x263EFF8C0] arrayWithObjects:v47 count:4];

  return v26;
}

void sub_237C1B2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

_OUFrame *OUFrameFromDictionary(void *a1)
{
  id v1 = a1;
  v2 = [[_OUFrame alloc] initWithDictionary:v1];

  return v2;
}

void sub_237C1B45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetDeviceOrientation(__n128 a1, __n128 a2)
{
  if (a1.n128_f32[2] < -0.6) {
    return 1;
  }
  if (a1.n128_f32[2] > 0.6) {
    return 2;
  }
  if (a2.n128_f32[2] > 0.25) {
    return 4;
  }
  if (a2.n128_f32[2] < -0.25) {
    return 3;
  }
  double v3 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    GetDeviceOrientation_cold_1();
  }

  return 0;
}

CVPixelBufferRef LoadImageToCVPixelBuffer(NSString *a1, OSType a2)
{
  double v3 = a1;
  if (a2 != 1111970369 && a2 != 1278226742)
  {
    v28 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      LoadImageToCVPixelBuffer();
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)&unk_237CC3E0E);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  CFURLRef v4 = [NSURL fileURLWithPath:v3];
  double v5 = CGImageSourceCreateWithURL(v4, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, (CFDictionaryRef)&unk_26EADC8B0);
  CFRelease(v5);
  size_t Width = CGImageGetWidth(ImageAtIndex);
  size_t Height = CGImageGetHeight(ImageAtIndex);
  double v9 = NSDictionary;
  double v10 = [NSNumber numberWithBool:1];
  double v11 = [NSNumber numberWithBool:1];
  objc_msgSend(v9, "dictionaryWithObjectsAndKeys:", v10, *MEMORY[0x263F040A0], v11, *MEMORY[0x263F04090], 0);
  CFDictionaryRef pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  CVPixelBufferRef pixelBuffer = 0;
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  CFDataRef v14 = CGDataProviderCopyData(DataProvider);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v14);
  size_t BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
  if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], (unint64_t)(double)Width, (unint64_t)(double)Height, a2, BytePtr, BytesPerRow, 0, 0, pixelBufferAttributes, &pixelBuffer))
  {
    CVPixelBufferRef v17 = 0;
  }
  else
  {
    if (a2 == 1111970369)
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      size_t v19 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v20 = CVPixelBufferGetHeight(pixelBuffer);
      size_t v21 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      if (v20)
      {
        uint64_t v22 = 0;
        double v23 = BaseAddress + 2;
        do
        {
          size_t v24 = v19;
          for (uint64_t i = v23; v24; --v24)
          {
            char v26 = *(i - 2);
            *(i - 2) = *i;
            *uint64_t i = v26;
            i += 4;
          }
          ++v22;
          v23 += v21;
        }
        while (v22 != v20);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    }
    CVPixelBufferRef v17 = pixelBuffer;
  }

  return v17;
}

void sub_237C1B7D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LoadRGBToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  double v3 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(a1, 0x42475241u);
  double v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    CVPixelBufferRef pixelBuffer = 0;
    utils::ConvertColor32BGRATo420f(ImageToCVPixelBuffer, &pixelBuffer, v5);
    BOOL v7 = pixelBuffer != 0;
    if (pixelBuffer)
    {
      size_t Width = CVPixelBufferGetWidth(pixelBuffer);
      size_t Height = CVPixelBufferGetHeight(pixelBuffer);
      double v10 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        LoadRGBToDictionary();
      }

      double v11 = pixelBuffer;
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      BaseAddress = CVPixelBufferGetBaseAddress(v11);
      size_t DataSize = CVPixelBufferGetDataSize(v11);
      if (BaseAddress && DataSize)
      {
        objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", BaseAddress);
        id v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v14 = objc_alloc_init(MEMORY[0x263EFF8F8]);
      }
      unsigned int v15 = v14;
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
      [(NSMutableDictionary *)v3 setObject:v15 forKeyedSubscript:@"color_buffer"];

      v16 = [NSNumber numberWithInt:Width];
      [(NSMutableDictionary *)v3 setObject:v16 forKeyedSubscript:@"color_width"];

      CVPixelBufferRef v17 = [NSNumber numberWithInt:Height];
      [(NSMutableDictionary *)v3 setObject:v17 forKeyedSubscript:@"color_height"];

      unsigned int v18 = [(NSMutableDictionary *)v3 objectForKeyedSubscript:@"color_buffer"];
      size_t v19 = (void *)[v18 copy];
      [(NSMutableDictionary *)v3 setObject:v19 forKeyedSubscript:@"scene_color_buffer"];

      size_t v20 = [NSNumber numberWithInt:Width];
      [(NSMutableDictionary *)v3 setObject:v20 forKeyedSubscript:@"scene_color_width"];

      size_t v21 = [NSNumber numberWithInt:Height];
      [(NSMutableDictionary *)v3 setObject:v21 forKeyedSubscript:@"scene_color_height"];

      CVPixelBufferLockBaseAddress(v6, 1uLL);
      uint64_t v22 = CVPixelBufferGetBaseAddress(v6);
      size_t v23 = CVPixelBufferGetDataSize(v6);
      if (v22 && v23)
      {
        objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v22);
        id v24 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v24 = objc_alloc_init(MEMORY[0x263EFF8F8]);
      }
      v25 = v24;
      CVPixelBufferUnlockBaseAddress(v6, 1uLL);
      [(NSMutableDictionary *)v3 setObject:v25 forKeyedSubscript:@"scene_color_buffer_bgra"];

      CVPixelBufferRelease(v6);
      CVPixelBufferRelease(pixelBuffer);
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_237C1BB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LoadSemanticToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  v28[1] = *MEMORY[0x263EF8340];
  double v3 = a1;
  CFURLRef v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x42475241u);
  double v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    size_t Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
    size_t Height = CVPixelBufferGetHeight(v6);
    double v9 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      LoadSemanticToDictionary();
    }

    CVPixelBufferRef pixelBuffer = 0;
    uint64_t v27 = *MEMORY[0x263F04130];
    v28[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v10 = [NSDictionary dictionaryWithObjects:v28 forKeys:&v27 count:1];
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (int)Width, (int)Height, 0x4C303038u, v10, &pixelBuffer);
    CVPixelBufferLockBaseAddress(v6, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v6);
    double v12 = CVPixelBufferGetBaseAddress(pixelBuffer);
    if ((int)Height >= 1)
    {
      int v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = Width;
        v16 = v12;
        int v17 = v13;
        if ((int)Width >= 1)
        {
          do
          {
            *v16++ = BaseAddress[v17 + 2];
            v17 += 4;
            --v15;
          }
          while (v15);
        }
        ++v14;
        v13 += 4 * Width;
        v12 += (int)Width;
      }
      while (v14 != Height);
    }
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);

    unsigned int v18 = pixelBuffer;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    size_t v19 = CVPixelBufferGetBaseAddress(v18);
    size_t DataSize = CVPixelBufferGetDataSize(v18);
    if (v19 && DataSize)
    {
      objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v19);
      id v21 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v21 = objc_alloc_init(MEMORY[0x263EFF8F8]);
    }
    uint64_t v22 = v21;
    CVPixelBufferUnlockBaseAddress(v18, 1uLL);
    [(NSMutableDictionary *)v4 setObject:v22 forKeyedSubscript:@"semantic_label_buffer"];

    size_t v23 = [NSNumber numberWithInt:Width];
    [(NSMutableDictionary *)v4 setObject:v23 forKeyedSubscript:@"semantic_label_width"];

    id v24 = [NSNumber numberWithInt:Height];
    [(NSMutableDictionary *)v4 setObject:v24 forKeyedSubscript:@"semantic_label_height"];

    CVPixelBufferRelease(v6);
    CVPixelBufferRelease(pixelBuffer);
  }

  return v6 != 0;
}

void sub_237C1BE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LoadSemanticConfToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  v32[1] = *MEMORY[0x263EF8340];
  double v3 = a1;
  CFURLRef v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x42475241u);
  double v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    size_t Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
    size_t Height = CVPixelBufferGetHeight(v6);
    double v9 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      LoadSemanticConfToDictionary();
    }

    CVPixelBufferRef pixelBuffer = 0;
    uint64_t v31 = *MEMORY[0x263F04130];
    v32[0] = MEMORY[0x263EFFA78];
    CFDictionaryRef v10 = [NSDictionary dictionaryWithObjects:v32 forKeys:&v31 count:1];
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (int)Width, (int)Height, 0x4C303066u, v10, &pixelBuffer);
    CVPixelBufferLockBaseAddress(v6, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(v6);
    double v12 = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
    if ((int)Height >= 1)
    {
      int v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = Width;
        v16 = v12;
        int v17 = v13;
        if ((int)Width >= 1)
        {
          do
          {
            unsigned int v18 = &BaseAddress[v17];
            int v19 = v18[2];
            int v20 = v18[1] + *v18 + v19 + v18[3];
            if (v20) {
              float v21 = (float)(char)v19 / (float)v20;
            }
            else {
              float v21 = 0.0;
            }
            *v16++ = v21;
            v17 += 4;
            --v15;
          }
          while (v15);
        }
        ++v14;
        v13 += 4 * Width;
        v12 += (int)Width;
      }
      while (v14 != Height);
    }
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);

    uint64_t v22 = pixelBuffer;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    size_t v23 = CVPixelBufferGetBaseAddress(v22);
    size_t DataSize = CVPixelBufferGetDataSize(v22);
    if (v23 && DataSize)
    {
      objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v23);
      id v25 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v25 = objc_alloc_init(MEMORY[0x263EFF8F8]);
    }
    char v26 = v25;
    CVPixelBufferUnlockBaseAddress(v22, 1uLL);
    [(NSMutableDictionary *)v4 setObject:v26 forKeyedSubscript:@"semantic_confidence_buffer"];

    uint64_t v27 = [NSNumber numberWithInt:Width];
    [(NSMutableDictionary *)v4 setObject:v27 forKeyedSubscript:@"semantic_confidence_width"];

    v28 = [NSNumber numberWithInt:Height];
    [(NSMutableDictionary *)v4 setObject:v28 forKeyedSubscript:@"semantic_confidence_height"];

    CVPixelBufferRelease(v6);
    CVPixelBufferRelease(pixelBuffer);
  }

  return v6 != 0;
}

void sub_237C1C1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LoadDepthToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  v27[1] = *MEMORY[0x263EF8340];
  double v3 = a1;
  CFURLRef v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x4C303136u);
  size_t Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
  size_t Height = CVPixelBufferGetHeight(ImageToCVPixelBuffer);
  double v8 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    LoadDepthToDictionary(Width, Height, v8);
  }

  CVPixelBufferRef pixelBuffer = 0;
  uint64_t v26 = *MEMORY[0x263F04130];
  v27[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v9 = [NSDictionary dictionaryWithObjects:v27 forKeys:&v26 count:1];
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], Width, Height, 0x66646570u, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  CVPixelBufferLockBaseAddress(ImageToCVPixelBuffer, 1uLL);
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
  double v11 = (unsigned __int16 *)CVPixelBufferGetBaseAddress(ImageToCVPixelBuffer);
  if (Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      size_t v13 = Width;
      uint64_t v14 = BaseAddress;
      for (j = v11; v13; --v13)
      {
        unsigned int v16 = *j++;
        *v14++ = (float)v16 / 1000.0;
      }
      v11 += Width;
      BaseAddress += Width;
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(ImageToCVPixelBuffer, 1uLL);
  CVPixelBufferRelease(ImageToCVPixelBuffer);

  int v17 = pixelBuffer;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  unsigned int v18 = CVPixelBufferGetBaseAddress(v17);
  size_t DataSize = CVPixelBufferGetDataSize(v17);
  if (v18 && DataSize)
  {
    objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v18);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v20 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  float v21 = v20;
  CVPixelBufferUnlockBaseAddress(v17, 1uLL);
  [(NSMutableDictionary *)v4 setObject:v21 forKeyedSubscript:@"scene_depth_buffer"];

  uint64_t v22 = [NSNumber numberWithInt:Width];
  [(NSMutableDictionary *)v4 setObject:v22 forKeyedSubscript:@"scene_depth_width"];

  size_t v23 = [NSNumber numberWithInt:Height];
  [(NSMutableDictionary *)v4 setObject:v23 forKeyedSubscript:@"scene_depth_height"];

  CVPixelBufferRelease(pixelBuffer);
  return 1;
}

void sub_237C1C510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void FindImageFilePath(NSString *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, unsigned char *a4@<X8>)
{
  double v6 = a1;
  BOOL v7 = a2;
  v39 = v6;
  size_t v40 = a3;
  v38 = v7;
  id v37 = [(NSString *)v6 stringByAppendingPathComponent:v7];
  v41.__r_.__value_.__r.__words[0] = [v37 UTF8String];
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p.__pn_, &v41.__r_.__value_.__l.__data_);
  MEMORY[0x237E2C3F0](&v44, &__p, 0, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  double v8 = v44;
  CFDictionaryRef v9 = v45;
  if (v45)
  {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    CFDictionaryRef v10 = v45;
    v42.__imp_.__ptr_ = v8;
    v42.__imp_.__cntrl_ = v9;
    if (v45)
    {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    v42.__imp_.__ptr_ = v44;
    v42.__imp_.__cntrl_ = 0;
  }
LABEL_7:
  if (v42.__imp_.__ptr_)
  {
    double v11 = std::__fs::filesystem::directory_iterator::__dereference(&v42);
    if (SHIBYTE(v11->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p.__pn_, v11->__p_.__pn_.__r_.__value_.__l.__data_, v11->__p_.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      __p.__pn_ = (std::__fs::filesystem::path::string_type)v11->__p_;
    }
    uint64_t v12 = 0;
    while (1)
    {
      size_t v13 = (&off_264CFAC80)[v12];
      std::string::basic_string[abi:ne180100]<0>(&v41, "_");
      uint64_t v14 = [(NSString *)v40 UTF8String];
      std::string::size_type v15 = strlen(v14);
      std::string::append(&v41, v14, v15);
      std::string::size_type v16 = strlen(v13);
      std::string::append(&v41, v13, v16);
      int64_t size = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
      unsigned int v18 = (__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string *)&__p
          : (std::string *)__p.__pn_.__r_.__value_.__r.__words[0];
      int v19 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
      id v20 = (void *)v41.__r_.__value_.__r.__words[0];
      float v21 = (v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v41
          : (std::string *)v41.__r_.__value_.__r.__words[0];
      int64_t v22 = (v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v41.__r_.__value_.__r.__words[2])
          : v41.__r_.__value_.__l.__size_;
      if (!v22) {
        break;
      }
      if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = __p.__pn_.__r_.__value_.__l.__size_;
      }
      if (size >= v22)
      {
        size_t v23 = (char *)v18 + size;
        int v24 = v21->__r_.__value_.__s.__data_[0];
        id v25 = v18;
        do
        {
          int64_t v26 = size - v22;
          if (v26 == -1) {
            break;
          }
          uint64_t v27 = (char *)memchr(v25, v24, v26 + 1);
          if (!v27) {
            break;
          }
          v28 = v27;
          if (!memcmp(v27, v21, v22))
          {
            if (v28 == v23 || v28 - (char *)v18 == -1) {
              break;
            }
            goto LABEL_41;
          }
          id v25 = (std::string *)(v28 + 1);
          int64_t size = v23 - (v28 + 1);
        }
        while (size >= v22);
      }
      if (v19 < 0) {
        operator delete(v20);
      }
      if (++v12 == 2)
      {
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::directory_iterator::__increment(&v42, 0);
        goto LABEL_7;
      }
    }
LABEL_41:
    v29 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
      FindImageFilePath((uint64_t)v18, v29);
    }

    v30 = NSString;
    int v31 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    std::string::size_type v32 = __p.__pn_.__r_.__value_.__r.__words[0];
    uint64_t v33 = [NSString defaultCStringEncoding];
    if (v31 >= 0) {
      p_p = (std::string *)&__p;
    }
    else {
      p_p = (std::string *)v32;
    }
    *(void *)uint64_t v36 = objc_msgSend(v30, "stringWithCString:encoding:", p_p, v33, a4);
    *(unsigned char *)(v36 + 8) = 1;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    }
    if (v42.__imp_.__cntrl_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42.__imp_.__cntrl_);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  else
  {
    if (v42.__imp_.__cntrl_) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42.__imp_.__cntrl_);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    *a4 = 0;
    a4[8] = 0;
  }
}

void sub_237C1C8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  v29 = *(std::__shared_weak_count **)(v27 - 88);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }

  _Unwind_Resume(a1);
}

id GenerateOUFramesFromCvplayer(void *a1)
{
  v129[19] = *MEMORY[0x263EF8340];
  v119 = 0;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  v120 = 0;
  v94 = a1;
  id v1 = [(NSString *)v94 stringByAppendingPathComponent:@"camera.txt"];
  if (!v1) {
    goto LABEL_78;
  }
  id v2 = v1;
  std::string::basic_string[abi:ne180100]<0>(&v121, (char *)[v2 UTF8String]);
  if (v121.columns[1].i8[7] >= 0) {
    double v3 = &v121;
  }
  else {
    double v3 = (simd_float4x4 *)v121.columns[0].i64[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)v3);
  std::ifstream::basic_ifstream((uint64_t *)buf);
  if (v128)
  {
    v100.columns[0].i32[0] = 0;
    while (1)
    {
      CFURLRef v4 = (void *)MEMORY[0x237E2C320](buf, &v100);
      if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
        break;
      }
      double v5 = v119;
      if (v119 >= v120)
      {
        BOOL v7 = (char *)__p;
        uint64_t v8 = (v119 - (unsigned char *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v120 - (unsigned char *)__p;
        if ((v120 - (unsigned char *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v120, v11);
          double v5 = v119;
          BOOL v7 = (char *)__p;
        }
        else
        {
          uint64_t v12 = 0;
        }
        size_t v13 = &v12[4 * v8];
        *(_DWORD *)size_t v13 = v100.columns[0].i32[0];
        double v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        std::__fs::filesystem::directory_entry::_Path __p = v13;
        v119 = v6;
        v120 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)v119 = v100.columns[0].i32[0];
        double v6 = v5 + 4;
      }
      v119 = v6;
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(__int32 *)((char *)v126.i32 + *(void *)(*(void *)buf - 24)) | 4);
    }
  }
  *(void *)buf = *MEMORY[0x263F8C2A8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x237E2C2E0](&v125);
  std::istream::~istream();
  MEMORY[0x237E2C480](v129);
  if (v101.columns[1].i8[7] < 0) {
    operator delete((void *)v101.columns[0].i64[0]);
  }
  int64_t v15 = v119 - (unsigned char *)__p;
  if (v121.columns[1].i8[7] < 0) {
    operator delete((void *)v121.columns[0].i64[0]);
  }

  if (v15 == 24)
  {
    id v16 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    int v17 = [(NSString *)v94 stringByAppendingPathComponent:@"image_meta.json"];
    if (v17)
    {
      unsigned int v18 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v17];
      int v19 = [MEMORY[0x263F08900] JSONObjectWithData:v18 options:0 error:0];
      v80 = (void *)[v19 mutableCopy];

      id v75 = objc_alloc_init(MEMORY[0x263EFF9A0]);
      uint64_t v20 = [(NSString *)v94 stringByAppendingPathComponent:@"pose.json"];
      if (v20)
      {
        obj = v20;
        float v21 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithContentsOfFile:");
        int64_t v22 = [MEMORY[0x263F08900] JSONObjectWithData:v21 options:0 error:0];
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        id v23 = v22;
        uint64_t v24 = [v23 countByEnumeratingWithState:&v114 objects:v123 count:16];
        if (v24)
        {
          uint64_t v25 = *(void *)v115;
          while (2)
          {
            for (uint64_t i = 0; i != v24; ++i)
            {
              if (*(void *)v115 != v25) {
                objc_enumerationMutation(v23);
              }
              uint64_t v27 = *(void *)(*((void *)&v114 + 1) + 8 * i);
              v28 = [v80 objectForKey:v27];
              BOOL v29 = v28 == 0;

              if (v29)
              {
                v73 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
                  GenerateOUFramesFromCvplayer_cold_2();
                }

LABEL_84:
                goto LABEL_85;
              }
              id v30 = [v23 objectForKeyedSubscript:v27];
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                id v31 = v30;
              }
              else {
                id v31 = 0;
              }

              if (!v31) {
                goto LABEL_84;
              }
              [v75 setObject:v31 forKeyedSubscript:v27];
            }
            uint64_t v24 = [v23 countByEnumeratingWithState:&v114 objects:v123 count:16];
            if (v24) {
              continue;
            }
            break;
          }
        }

        uint64_t v32 = [v80 count];
        if (v32 == [v75 count])
        {
          float v34 = *(float *)__p;
          float v35 = *((float *)__p + 1);
          uint64_t v36 = (const float *)((char *)__p + 16);
          v33.i32[0] = *((_DWORD *)__p + 5);
          int32x4_t v98 = v33;
          float32x4_t v37 = vld1q_dup_f32(v36);
          int32x4_t v96 = (int32x4_t)v37;
          v37.i32[0] = *((_DWORD *)__p + 2);
          double v78 = *(double *)v37.i64;
          v37.i32[0] = 0;
          v37.i32[1] = *((_DWORD *)__p + 3);
          double v77 = *(double *)v37.i64;
          id v79 = objc_alloc_init(MEMORY[0x263EFF9A0]);
          long long v112 = 0u;
          long long v113 = 0u;
          long long v110 = 0u;
          long long v111 = 0u;
          id obja = v75;
          uint64_t v38 = [obja countByEnumeratingWithState:&v110 objects:v122 count:16];
          if (v38)
          {
            __asm { FMOV            V0.4S, #1.0 }
            *(void *)&double v76 = vzip1q_s32(vzip2q_s32(v96, _Q0), v98).u64[0];
            uint64_t v90 = *(void *)v111;
            double v44 = v34;
            double v45 = v35;
            do
            {
              uint64_t v46 = 0;
              uint64_t v91 = v38;
              do
              {
                if (*(void *)v111 != v90) {
                  objc_enumerationMutation(obja);
                }
                size_t v47 = *(NSString **)(*((void *)&v110 + 1) + 8 * v46);
                FindImageFilePath(v94, &cfstr_Color.isa, v47, &v108);
                FindImageFilePath(v94, &cfstr_Depth.isa, v47, &v106);
                FindImageFilePath(v94, &cfstr_Label.isa, v47, &v104);
                FindImageFilePath(v94, &cfstr_Vote.isa, v47, &v102);
                int v48 = v107;
                int v99 = v105;
                int v97 = v103;
                int v95 = v109;
                if (v109)
                {
                  if (v107)
                  {
                    if (v105)
                    {
                      if (v103)
                      {
                        v49 = [obja objectForKeyedSubscript:v47];
                        BOOL v50 = float4x4FromNSArray(v49, &v101);

                        if (v50)
                        {
                          v100.columns[0] = (simd_float4)xmmword_237CB4490;
                          v100.columns[1] = (simd_float4)xmmword_237CB44A0;
                          v100.columns[2] = (simd_float4)xmmword_237CB44B0;
                          v100.columns[3] = (simd_float4)xmmword_237CB4480;
                          __n128 v88 = (__n128)v101.columns[1];
                          __n128 v89 = (__n128)v101.columns[0];
                          simd_float4 v86 = v101.columns[3];
                          simd_float4 v87 = v101.columns[2];
                          simd_float4x4 v131 = __invert_f4(*(simd_float4x4 *)ARKit_VW_RW);
                          uint64_t v51 = 0;
                          simd_float4x4 v121 = v131;
                          do
                          {
                            *(float32x4_t *)&buf[v51 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_237CB4490, COERCE_FLOAT(*(_OWORD *)&v121.columns[v51])), (float32x4_t)xmmword_237CB44A0, *(float32x2_t *)v121.columns[v51].f32, 1), (float32x4_t)xmmword_237CB44B0, (float32x4_t)v121.columns[v51], 2), (float32x4_t)xmmword_237CB4480, (float32x4_t)v121.columns[v51], 3);
                            ++v51;
                          }
                          while (v51 != 4);
                          uint64_t v52 = 0;
                          float32x4_t v53 = *(float32x4_t *)buf;
                          float32x4_t v54 = v125;
                          float32x4_t v55 = v126;
                          float32x4_t v56 = v127;
                          v121.columns[0] = (simd_float4)v89;
                          v121.columns[1] = (simd_float4)v88;
                          v121.columns[2] = v87;
                          v121.columns[3] = v86;
                          do
                          {
                            *(float32x4_t *)&buf[v52 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(_OWORD *)&v121.columns[v52])), v54, *(float32x2_t *)v121.columns[v52].f32, 1), v55, (float32x4_t)v121.columns[v52], 2), v56, (float32x4_t)v121.columns[v52], 3);
                            ++v52;
                          }
                          while (v52 != 4);
                          uint64_t v57 = 0;
                          float32x4_t v58 = *(float32x4_t *)buf;
                          float32x4_t v59 = v125;
                          float32x4_t v60 = v126;
                          float32x4_t v61 = v127;
                          simd_float4x4 v121 = *(simd_float4x4 *)VC_RC;
                          do
                          {
                            *(float32x4_t *)&buf[v57 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)&v121.columns[v57])), v59, *(float32x2_t *)v121.columns[v57].f32, 1), v60, (float32x4_t)v121.columns[v57], 2), v61, (float32x4_t)v121.columns[v57], 3);
                            ++v57;
                          }
                          while (v57 != 4);
                          double v83 = *(double *)v125.i64;
                          double v84 = *(double *)buf;
                          double v81 = *(double *)v127.i64;
                          double v82 = *(double *)v126.i64;
                          uint64_t DeviceOrientation = GetDeviceOrientation(v89, v88);
                          v85 = objc_alloc_init(_OUCamera);
                          -[_OUCamera setImageResolution:](v85, "setImageResolution:", v44, v45);
                          -[_OUCamera setIntrinsics:](v85, "setIntrinsics:", v78, v77, v76);
                          -[_OUCamera setPose:](v85, "setPose:", v89.n128_f64[0], v88.n128_f64[0], *(double *)v87.i64, *(double *)v86.i64);
                          -[_OUCamera setTransform:](v85, "setTransform:", v84, v83, v82, v81);
                          v63 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x263EFF9A0]);
                          v64 = [v80 objectForKeyedSubscript:v47];
                          v65 = [v64 objectForKeyedSubscript:@"timestamp"];
                          [(NSMutableDictionary *)v63 setObject:v65 forKeyedSubscript:@"timestamp"];

                          v66 = [NSNumber numberWithInteger:DeviceOrientation];
                          [(NSMutableDictionary *)v63 setObject:v66 forKeyedSubscript:@"device_orientation"];

                          v67 = OUCameraToDictionary(v85);
                          [(NSMutableDictionary *)v63 setObject:v67 forKeyedSubscript:@"camera"];

                          v68 = OUCameraToDictionary(v85);
                          [(NSMutableDictionary *)v63 setObject:v68 forKeyedSubscript:@"scene_camera"];

                          v70 = float4x4ToNSArray(&v100, v69);
                          [(NSMutableDictionary *)v63 setObject:v70 forKeyedSubscript:@"reference_origin_transform"];

                          LODWORD(v70) = LoadRGBToDictionary(v108, v63);
                          LoadDepthToDictionary(v106, v63);
                          LODWORD(v64) = LoadSemanticToDictionary(v104, v63);
                          if (v70 & v64 & LoadSemanticConfToDictionary(v102, v63))
                          {
                            v71 = OUFrameFromDictionary(v63);
                            [v79 setObject:v71 forKey:v47];
                          }
                        }
                      }
                    }
                  }
                }
                if (v97) {

                }
                if (v99) {
                if (v48)
                }

                if (v95) {
                ++v46;
                }
              }
              while (v46 != v91);
              uint64_t v38 = [obja countByEnumeratingWithState:&v110 objects:v122 count:16];
            }
            while (v38);
          }

          obj = _OULoggingGetOSLogForCategoryObjectUnderstanding();
          if (os_log_type_enabled(obj, OS_LOG_TYPE_INFO))
          {
            uint64_t v72 = [v79 count];
            *(_DWORD *)buf = 134217984;
            *(void *)&buf[4] = v72;
            _os_log_impl(&dword_237C17000, obj, OS_LOG_TYPE_INFO, "Load cvplayer dumped data to ouframes: %zu", buf, 0xCu);
          }
        }
        else
        {
          obj = _OULoggingGetOSLogForCategoryObjectUnderstanding();
          if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR)) {
            GenerateOUFramesFromCvplayer_cold_1(buf, [v80 count], objc_msgSend(v75, "count"), obj);
          }
LABEL_85:
          id v79 = 0;
        }
      }
      else
      {
        id v79 = 0;
      }

      id v16 = v80;
    }
    else
    {
      id v79 = 0;
    }
  }
  else
  {
LABEL_78:
    id v79 = 0;
  }
  if (__p)
  {
    v119 = (char *)__p;
    operator delete(__p);
  }

  return v79;
}

void sub_237C1D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,void *a49)
{
  BOOL v50 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v50;
    operator delete(v50);
  }

  _Unwind_Resume(a1);
}

void sub_237C1D818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C1D888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C1D904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C1D980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C1D9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  double v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    double v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264CFAB08, MEMORY[0x263F8C060]);
}

void sub_237C1DB98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  id v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  double v3 = *a2;
  size_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_237C1DD0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  size_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    int v14 = this;
    if ((v6 & 0x80) != 0) {
      int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_237C1DE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  size_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    size_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)size_t v4 = v10;
    size_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)size_t v4 = 0;
  return result;
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  double v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x237E2C2D0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  double v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x237E2C2D0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_237C1E0E0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x237E2C480](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x237E2C2E0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x237E2C480](a1 + 53);
  return a1;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xEu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void _GLOBAL__sub_I_OUFrame_mm()
{
  v0 = (void *)MEMORY[0x237E2CC70]();
  RW_VW = xmmword_237CB4490;
  *(_OWORD *)algn_26AF27770 = xmmword_237CB44C0;
  xmmword_26AF27780 = xmmword_237CB44A0;
  unk_26AF27790 = xmmword_237CB4480;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst);
  *(_OWORD *)RC_VC = xmmword_237CB4490;
  *(_OWORD *)&RC_VC[16] = xmmword_237CB44D0;
  *(_OWORD *)&RC_VC[32] = xmmword_237CB44C0;
  *(_OWORD *)&RC_VC[48] = xmmword_237CB4480;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_238);
  *(_OWORD *)ARKit_VW_RW = xmmword_237CB44D0;
  *(_OWORD *)&ARKit_VW_RW[16] = xmmword_237CB44B0;
  *(_OWORD *)&ARKit_VW_RW[32] = xmmword_237CB44E0;
  *(_OWORD *)&ARKit_VW_RW[48] = xmmword_237CB4480;
  ObjectUnderstandingTest::Bundle = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.ObjectUnderstandingTests"];
}

void **std::vector<NSString * {__strong}>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void OU3DKitchenObjectMerger::Reset(OU3DKitchenObjectMerger *this)
{
  begin = this->old_cabinets_.__begin_;
  for (uint64_t i = this->old_cabinets_.__end_; i != begin; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)i))
    uint64_t i = (OU3DKitchenObject *)((char *)i - 272);
  this->old_cabinets_.__end_ = begin;
  uint64_t v5 = this->new_cabinets_.__begin_;
  for (j = this->new_cabinets_.__end_; j != v5; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)j))
    j = (OU3DKitchenObject *)((char *)j - 272);
  this->new_cabinets_.__end_ = v5;
  uint64_t v7 = this->other_objects_.__begin_;
  for (k = this->other_objects_.__end_; k != v7; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)k))
    k = (OU3DKitchenObject *)((char *)k - 272);
  this->other_objects_.__end_ = v7;
  uint64_t v9 = this->fused_cabinets_.__begin_;
  for (m = this->fused_cabinets_.__end_; m != v9; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)m))
    m = (OU3DKitchenObject *)((char *)m - 272);
  this->fused_cabinets_.__end_ = v9;
}

float OU3DKitchenObjectMerger::ComputePlaneHeight(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1] - *a2;
  std::vector<float>::vector(__p, (int)(v3 >> 4));
  if ((int)((unint64_t)v3 >> 4) >= 1)
  {
    uint64_t v4 = __p[0];
    uint64_t v5 = ((unint64_t)v3 >> 4);
    unint64_t v6 = (int *)(*a2 + 8);
    do
    {
      int v7 = *v6;
      v6 += 4;
      *v4++ = v7;
      --v5;
    }
    while (v5);
  }
  percentile((uint64_t *)__p);
  float v9 = v8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_237C1E54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void percentile(uint64_t *a1)
{
  if (!a1 || (v2 = *a1, uint64_t v3 = a1[1], v2 == v3))
  {
    uint64_t v5 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      percentile(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    uint64_t v4 = v3 - v2;
    if (v4 != 4) {
      std::__sort<std::__less<float,float> &,float *>();
    }
  }
}

BOOL OU3DKitchenObjectMerger::IsGroundSupportedObject(OU3DKitchenObjectMerger *this, const OUBox3d *a2)
{
  return vabds_f32(a2->var2, this->ground_plane_height_) < 0.3;
}

BOOL OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(OU3DKitchenObjectMerger *this, float a2, float32x4_t *a3, float32x4_t *a4)
{
  if (!a3 || !a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Invalid input in kitchen objects merger.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  box3dIou(a3, a4, 0, (uint64_t)&v19);
  BOOL result = 0;
  if (v20.f32[0] >= 0.05)
  {
    {
LABEL_7:
      float HeadingAngle = GetHeadingAngle(a3);
      float v10 = GetHeadingAngle(a4);
      float v12 = fabsf(OU::AngleDifference(v11, HeadingAngle, v10));
      if (fabs(v12 + -3.14159265) >= a2)
      {
        return v12 <= a2;
      }
      else
      {
        box3dToCentroidSizeAngle(a3, (uint64_t *)v27);
        float v13 = *((float *)v27[0] + 6) + 3.14159265;
        *((float *)v27[0] + 6) = v13;
        centroidSizeAngleToBox3d((uint64_t *)v27, 1, &v19);
        float32x4_t v14 = v24;
        a3[4] = v23;
        a3[5] = v14;
        float32x4_t v15 = v26;
        a3[6] = v25;
        a3[7] = v15;
        float32x4_t v16 = v20;
        *a3 = v19;
        a3[1] = v16;
        float32x4_t v17 = v22;
        a3[2] = v21;
        a3[3] = v17;
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
        return 1;
      }
    }
    else
    {
      while ((float *)a3[8].i64[0] != *v8)
      {
        if (++v8 == (float **)qword_26AF272E8) {
          goto LABEL_7;
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_237C1E820(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

BOOL OU3DKitchenObjectMerger::IsSimilarDepth(OU3DKitchenObjectMerger *this, const OUBox3d *a2, const OUBox3d *a3, float a4)
{
  float32x4_t v4 = vsubq_f32(*(float32x4_t *)&a2->var1, *(float32x4_t *)&a2->var3);
  float32x4_t v5 = vmulq_f32(v4, v4);
  float32x4_t v6 = vsubq_f32(*(float32x4_t *)&a3->var1, *(float32x4_t *)&a3->var3);
  float32x4_t v7 = vmulq_f32(v6, v6);
  return (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])) < a4;
}

BOOL OU3DKitchenObjectMerger::IsSimilarHeight(OU3DKitchenObjectMerger *this, const OU3DKitchenObject *a2, const OU3DKitchenObject *a3, float a4)
{
  float v4 = *((float *)a3 + 18);
  float v5 = *((float *)a3 + 2);
  float v6 = v4 - v5;
  if ((float)(v4 - v5) <= 0.0)
  {
    uint64_t v8 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      OU3DKitchenObjectMerger::IsSimilarHeight(v8, v9, v10, v11, v12, v13, v14, v15);
    }

    return 0;
  }
  else
  {
    if (v4 >= *((float *)a2 + 18)) {
      float v4 = *((float *)a2 + 18);
    }
    if (*((float *)a2 + 2) >= v5) {
      float v5 = *((float *)a2 + 2);
    }
    return (float)(fmaxf(v4 - v5, 0.0) / v6) > a4;
  }
}

void OU3DKitchenObjectMerger::AlignInsideObject(OU3DKitchenObjectMerger *this, float32x4_t *a2, OUBox3d *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)&a3->var7;
  long long v32 = *(_OWORD *)&a3->var6.var1;
  long long v33 = v5;
  long long v6 = *(_OWORD *)&a3[1].var3;
  long long v34 = *(_OWORD *)&a3[1].var1;
  long long v35 = v6;
  float32x4_t v7 = *(float32x4_t *)&a3->var3;
  float32x4_t v28 = *(float32x4_t *)&a3->var1;
  float32x4_t v29 = v7;
  long long v8 = *(_OWORD *)&a3->var5.var2.var0;
  long long v30 = *(_OWORD *)&a3->var5.var0;
  long long v31 = v8;
  box3dToCentroidSizeAngle(a2, (uint64_t *)v27);
  box3dToCentroidSizeAngle(&v28, (uint64_t *)__p);
  if (vabds_f32(*((float *)v27[0] + 6), *((float *)__p[0] + 6)) <= 0.0001)
  {
    FindSegmentInteractWithLine(&v38, v28, v29, *a2, (int32x4_t)a2[3]);
    if (v39)
    {
      float32x4_t v17 = (void *)v38.i64[0];
      a3->var6.var1 = v38.i64[0];
      a3->var1 = v17;
      float32x4_t v18 = *(float32x4_t *)&a3->var5.var0;
      float32x4_t v19 = *(float32x4_t *)&a3->var5.var2.var0;
      unint64_t v20 = vsubq_f32(v18, *(float32x4_t *)&a3->var1).u64[0];
      float32x2_t v21 = (float32x2_t)vsubq_f32(v19, v18).u64[0];
      *(float *)&unint64_t v20 = (float)-(float)(vmuls_lane_f32(*((float *)&v20 + 1), v21, 1)
                                     + (float)(*(float *)&v20 * v21.f32[0]))
                     / (v21.f32[0] * v21.f32[0] + v21.f32[1] * v21.f32[1]);
      LODWORD(a3->var6.var0) = v19.i32[2];
      a3->var5.var2.var0 = (float *)vmla_n_f32(*(float32x2_t *)v18.f32, v21, *(float *)&v20);
    }
    FindSegmentInteractWithLine(&v36, v28, v29, a2[1], (int32x4_t)a2[2]);
    if (v37)
    {
      float32x4_t v22 = (void *)v36.i64[0];
      a3->var7 = (id)v36.i64[0];
      a3->var3 = v22;
      float32x4_t v23 = *(float32x4_t *)&a3->var5.var0;
      unint64_t v24 = vsubq_f32(v23, *(float32x4_t *)&a3->var3).u64[0];
      float32x2_t v25 = (float32x2_t)vsubq_f32(*(float32x4_t *)&a3->var5.var2.var0, v23).u64[0];
      *(float *)&unint64_t v24 = (float)-(float)(vmuls_lane_f32(*((float *)&v24 + 1), v25, 1)
                                     + (float)(*(float *)&v24 * v25.f32[0]))
                     / (v25.f32[0] * v25.f32[0] + v25.f32[1] * v25.f32[1]);
      LODWORD(a3->var5.var1) = v23.i32[2];
      a3->var5.var0 = (float *)vmla_n_f32(*(float32x2_t *)v23.f32, v25, *(float *)&v24);
    }
  }
  else
  {
    uint64_t v9 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      OU3DKitchenObjectMerger::AlignInsideObject(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
}

void sub_237C1EB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void OU3DKitchenObjectMerger::AlignObjectDepth(OU3DKitchenObjectMerger *this@<X0>, const OUBox3d *a2@<X1>, const OUBox3d *a3@<X2>, OUBox3d *a4@<X8>)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(__p, 4uLL);
  long long v7 = *(_OWORD *)&a2->var1;
  *((void *)&v7 + 1) = a2->var3;
  long long v20 = v7;
  long long v8 = *(_OWORD *)&a3->var1;
  *((void *)&v8 + 1) = a3->var5.var2.var0;
  long long v19 = v8;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0]);
  long long v9 = *(_OWORD *)&a2->var1;
  *((void *)&v9 + 1) = a2->var3;
  long long v20 = v9;
  long long v10 = *(_OWORD *)&a3->var3;
  *((void *)&v10 + 1) = a3->var5.var0;
  long long v19 = v10;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 1);
  long long v11 = *(_OWORD *)&a2->var5.var0;
  *((void *)&v11 + 1) = a2->var5.var2.var0;
  long long v20 = v11;
  long long v12 = *(_OWORD *)&a3->var3;
  *((void *)&v12 + 1) = a3->var5.var0;
  long long v19 = v12;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 2);
  long long v13 = *(_OWORD *)&a2->var5.var0;
  *((void *)&v13 + 1) = a2->var5.var2.var0;
  long long v20 = v13;
  long long v14 = *(_OWORD *)&a3->var1;
  *((void *)&v14 + 1) = a3->var5.var2.var0;
  long long v19 = v14;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 3);
  OUBox3d::OUBox3d(a4, a2);
  uint64_t v15 = 0;
  uint64_t v16 = (char *)__p[0];
  p_var1 = &a4->var6.var1;
  do
  {
    *(p_var1 - 8) = *(void *)&v16[v15];
    unint64_t *p_var1 = *(void *)&v16[v15];
    p_var1 += 2;
    v15 += 8;
  }
  while (v15 != 32);
  for (uint64_t i = 0; i != 128; i += 16)
    *(float *)((char *)&a4->var2 + i) = *(float *)((char *)&a2->var2 + i);
  if (v16)
  {
    __p[1] = v16;
    operator delete(v16);
  }
}

void sub_237C1ECEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OUBox3d::~OUBox3d(OUBox3d *this)
{
  uint64_t v2 = *(void **)&this[1].var8;
  if (v2) {
    operator delete(v2);
  }
  var1 = (void *)this[1].var6.var1;
  if (var1)
  {
    this[1].var6.var2.var0 = (unint64_t)var1;
    operator delete(var1);
  }
}

void OU3DKitchenObjectMerger::AlignHeadingAngle(OU3DKitchenObjectMerger *this, float a2, float32x4_t *a3)
{
  box3dToCentroidSizeAngle(a3, (uint64_t *)v10);
  *((float *)v10[0] + 6) = a2;
  centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
  float32x4_t v5 = (float32x4_t)v9[5];
  a3[4] = (float32x4_t)v9[4];
  a3[5] = v5;
  float32x4_t v6 = (float32x4_t)v9[7];
  a3[6] = (float32x4_t)v9[6];
  a3[7] = v6;
  float32x4_t v7 = (float32x4_t)v9[1];
  *a3 = (float32x4_t)v9[0];
  a3[1] = v7;
  float32x4_t v8 = (float32x4_t)v9[3];
  a3[2] = (float32x4_t)v9[2];
  a3[3] = v8;
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
}

void sub_237C1EE00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float OU3DKitchenObjectMerger::AlignObjectTopSurface(OU3DKitchenObjectMerger *this, const OUBox3d *a2, OUBox3d *a3)
{
  if (a3)
  {
    for (uint64_t i = 0; i != 64; i += 16)
    {
      float result = *(float *)((char *)&a2->var6.var2.var0 + i);
      *(float *)((char *)&a3->var6.var2.var0 + i) = result;
    }
  }
  return result;
}

void OU3DKitchenObjectMerger::AlignApplianceWithNewCabinets(OU3DKitchenObjectMerger *this)
{
  v74[4] = *MEMORY[0x263EF8340];
  begin = this->new_cabinets_.__begin_;
  for (uint64_t i = this->new_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if (*((unsigned char *)begin + 224))
    {
      float HeadingAngle = GetHeadingAngle((float32x4_t *)begin);
      float v4 = this->other_objects_.__begin_;
      end = this->other_objects_.__end_;
      if (v4 != end)
      {
        float v5 = HeadingAngle;
        do
        {
          LODWORD(v2) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(v2, 0.34907, (float32x4_t *)v4, (float32x4_t *)begin);
          if (v2)
          {
            uint64_t v2 = (OU3DKitchenObjectMerger *)[*((id *)v4 + 16) isEqualToString:@"Sink"];
            if ((v2 & 1) != 0
              || (float32x4_t v6 = vsubq_f32(*(float32x4_t *)v4, *((float32x4_t *)v4 + 1)),
                  float32x4_t v7 = vmulq_f32(v6, v6),
                  float32x4_t v8 = vsubq_f32(*(float32x4_t *)begin, *((float32x4_t *)begin + 1)),
                  float32x4_t v9 = vmulq_f32(v8, v8),
                  (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])) < 0.3))
            {
              OU3DKitchenObjectMerger::AlignHeadingAngle(v2, v5, (float32x4_t *)v4);
              v74[0] = @"Oven";
              long long v10 = @"Stove";
              v74[1] = v10;
              long long v11 = @"Dishwasher";
              v74[2] = v11;
              long long v12 = @"Washer";
              v74[3] = v12;
              memset(&v57, 0, 24);
              v71 = &v57;
              char v72 = 0;
              long long v13 = (char *)operator new(0x20uLL);
              uint64_t v14 = 0;
              v57.var1 = v13;
              *(void *)&v57.var2 = v13;
              v57.var3 = v13 + 32;
              do
              {
                *(void *)&v13[v14 * 8] = (id)v74[v14];
                ++v14;
              }
              while (v14 != 4);
              uint64_t v15 = v13 + 32;
              *(void *)&v57.var2 = v13 + 32;
              if (v57.var1 == v13 + 32)
              {
                BOOL v19 = 0;
              }
              else
              {
                uint64_t v16 = *((void *)v4 + 16);
                float32x4_t v17 = (char *)v57.var1 + 8;
                do
                {
                  uint64_t v18 = *((void *)v17 - 1);
                  BOOL v19 = v16 == v18;
                  BOOL v20 = v16 == v18 || v17 == v15;
                  v17 += 8;
                }
                while (!v20);
              }
              v71 = &v57;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              for (uint64_t j = 3; j != -1; --j)

              if (v19)
              {
                OU3DKitchenObjectMerger::AlignObjectDepth(v22, (const OUBox3d *)v4, (const OUBox3d *)begin, &v57);
                long long v23 = *(_OWORD *)&v57.var1;
                long long v24 = *(_OWORD *)&v57.var3;
                long long v25 = *(_OWORD *)&v57.var5.var2.var0;
                *((_OWORD *)v4 + 2) = *(_OWORD *)&v57.var5.var0;
                *((_OWORD *)v4 + 3) = v25;
                *(_OWORD *)float v4 = v23;
                *((_OWORD *)v4 + 1) = v24;
                long long v26 = *(_OWORD *)&v57.var6.var1;
                long long v27 = *(_OWORD *)&v57.var7;
                long long v28 = v59;
                *((_OWORD *)v4 + 6) = v58;
                *((_OWORD *)v4 + 7) = v28;
                *((_OWORD *)v4 + 4) = v26;
                *((_OWORD *)v4 + 5) = v27;
                id v29 = v60;
                id v60 = 0;
                long long v30 = (void *)*((void *)v4 + 16);
                *((void *)v4 + 16) = v29;

                *((_DWORD *)v4 + 34) = v61;
                id v31 = v62;
                id v62 = 0;
                long long v32 = (void *)*((void *)v4 + 18);
                *((void *)v4 + 18) = v31;

                id v33 = v63;
                id v63 = 0;
                long long v34 = (void *)*((void *)v4 + 19);
                *((void *)v4 + 19) = v33;

                long long v35 = (void *)*((void *)v4 + 20);
                if (v35)
                {
                  *((void *)v4 + 21) = v35;
                  operator delete(v35);
                  *((void *)v4 + 20) = 0;
                  *((void *)v4 + 21) = 0;
                  *((void *)v4 + 22) = 0;
                }
                int8x16_t v36 = (void *)*((void *)v4 + 23);
                *((_OWORD *)v4 + 10) = *(_OWORD *)__p;
                *((void *)v4 + 22) = v65;
                __p[0] = 0;
                __p[1] = 0;
                uint64_t v65 = 0;
                if (v36)
                {
                  operator delete(v36);
                  *((void *)v4 + 23) = 0;
                  *((void *)v4 + 24) = 0;
                  *((void *)v4 + 25) = 0;
                }
                *((void *)v4 + 23) = v66;
                *((void *)v4 + 24) = v67;
                *((void *)v4 + 25) = v68;
                v66 = 0;
                uint64_t v67 = 0;
                uint64_t v68 = 0;
                id v37 = v69;
                id v69 = 0;
                int8x16_t v38 = (void *)*((void *)v4 + 26);
                *((void *)v4 + 26) = v37;

                *((_WORD *)v4 + 108) = v70;
                if (v66) {
                  operator delete(v66);
                }
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              char v39 = @"Sink";
              memset(&v57, 0, 24);
              v71 = &v57;
              char v72 = 0;
              uint64_t v40 = (char *)operator new(8uLL);
              v57.var1 = v40;
              *(void *)&v57.var2 = v40;
              v57.var3 = v40 + 8;
              std::string v41 = v39;
              *(void *)uint64_t v40 = v41;
              *(void *)&v57.var2 = v40 + 8;
              if (v57.var1 == v40 + 8)
              {
LABEL_35:
                v71 = &v57;
                std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              }
              else
              {
                std::__fs::filesystem::directory_iterator v42 = (char *)v57.var1 - 8;
                while (*((void *)v4 + 16) != *((void *)v42 + 1))
                {
                  v42 += 8;
                  if (v42 == v40) {
                    goto LABEL_35;
                  }
                }
                v71 = &v57;
                std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);

                OU3DKitchenObjectMerger::AlignInsideObject(v43, (float32x4_t *)begin, (OUBox3d *)v4);
              }
              v73[0] = v41;
              v73[1] = v10;
              v73[2] = v11;
              v73[3] = v12;
              memset(&v57, 0, 24);
              v71 = &v57;
              char v72 = 0;
              double v44 = (char *)operator new(0x20uLL);
              uint64_t v45 = 0;
              v57.var1 = v44;
              *(void *)&v57.var2 = v44;
              v57.var3 = v44 + 32;
              do
              {
                *(void *)&v44[v45 * 8] = (id)v73[v45];
                ++v45;
              }
              while (v45 != 4);
              uint64_t v46 = v44 + 32;
              *(void *)&v57.var2 = v44 + 32;
              if (v57.var1 == v44 + 32)
              {
                BOOL v50 = 0;
              }
              else
              {
                uint64_t v47 = *((void *)v4 + 16);
                int v48 = (char *)v57.var1 + 8;
                do
                {
                  uint64_t v49 = *((void *)v48 - 1);
                  BOOL v50 = v47 == v49;
                  BOOL v51 = v47 == v49 || v48 == v46;
                  v48 += 8;
                }
                while (!v51);
              }
              v71 = &v57;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              for (uint64_t k = 3; k != -1; --k)

              if (v50)
              {
                for (uint64_t m = 64; m != 128; m += 16)
                  *(_DWORD *)((char *)v4 + m + 8) = *(_DWORD *)((char *)begin + m + 8);
              }
            }
          }
          float v4 = (OU3DKitchenObject *)((char *)v4 + 272);
        }
        while (v4 != end);
      }
    }
  }
}

void sub_237C1F410(_Unwind_Exception *a1)
{
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  for (uint64_t i = 24; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::AlignStoveWithOven(OU3DKitchenObjectMerger *this)
{
  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    do
    {
      begin = this->other_objects_.__begin_;
      float32x4_t v6 = @"Stove";
      long long v23 = 0;
      long long v24 = 0;
      float32x4_t v22 = 0;
      long long v26 = (void **)&v22;
      char v27 = 0;
      float32x4_t v7 = operator new(8uLL);
      float32x4_t v22 = v7;
      long long v23 = v7;
      long long v24 = v7 + 1;
      float32x4_t v8 = v6;
      void *v7 = v8;
      long long v23 = v7 + 1;
      if (v22 == v7 + 1)
      {
LABEL_7:
        long long v26 = (void **)&v22;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);
      }
      else
      {
        float32x4_t v9 = v22 - 1;
        while (*((void *)begin + 34 * v3 + 16) != v9[1])
        {
          if (++v9 == v7) {
            goto LABEL_7;
          }
        }
        long long v26 = (void **)&v22;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

        uint64_t v10 = 0;
        uint64_t v11 = 0;
        do
        {
          if (v3 != v11)
          {
            long long v12 = this->other_objects_.__begin_;
            long long v13 = @"Oven";
            long long v23 = 0;
            long long v24 = 0;
            float32x4_t v22 = 0;
            long long v26 = (void **)&v22;
            char v27 = 0;
            uint64_t v14 = operator new(8uLL);
            float32x4_t v22 = v14;
            long long v23 = v14;
            long long v24 = v14 + 1;
            uint64_t v15 = v13;
            void *v14 = v15;
            long long v23 = v14 + 1;
            if (v22 == v14 + 1)
            {
LABEL_16:
              long long v26 = (void **)&v22;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);
            }
            else
            {
              uint64_t v16 = v22 - 1;
              while (*((void *)v12 + 34 * v11 + 16) != v16[1])
              {
                if (++v16 == v14) {
                  goto LABEL_16;
                }
              }
              long long v26 = (void **)&v22;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

              float32x4_t v17 = this->other_objects_.__begin_;
              uint64_t v18 = (float32x4_t *)((char *)v17 + 272 * v3);
              box3dIou(v18, (float32x4_t *)v17 + 17 * v11, 0, (uint64_t)&v22);
              if (v25 > 0.35 && vabds_f32(v18->f32[2], *((float *)v17 + 68 * v11 + 18)) < 0.4)
              {
                unint64_t v19 = 0;
                BOOL v20 = (void *)((char *)v17 + v2);
                float32x2_t v21 = (char *)v17 + v10;
                do
                {
                  *BOOL v20 = *(void *)v21;
                  if (v19 >= 4) {
                    *((_DWORD *)v21 + 2) = v18[(v19 - 4)].i32[2];
                  }
                  ++v19;
                  v20 += 2;
                  v21 += 16;
                }
                while (v19 != 8);
              }
            }
          }
          ++v11;
          v10 += 272;
        }
        while (v11 != v4);
      }
      ++v3;
      v2 += 272;
    }
    while (v3 != v4);
  }
}

void sub_237C1F73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::AlignSinkWithDishwasher(OU3DKitchenObjectMerger *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    while (1)
    {
      begin = this->other_objects_.__begin_;
      float v5 = @"Sink";
      int8x16_t v36 = 0;
      int8x16_t v35 = 0uLL;
      id v33 = &v35;
      LOBYTE(v34) = 0;
      float32x4_t v6 = operator new(8uLL);
      v35.i64[0] = (uint64_t)v6;
      v35.i64[1] = (uint64_t)v6;
      int8x16_t v36 = v6 + 1;
      float32x4_t v7 = v5;
      void *v6 = v7;
      v35.i64[1] = (uint64_t)(v6 + 1);
      if ((void *)v35.i64[0] != v6 + 1) {
        break;
      }
LABEL_7:
      id v33 = &v35;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

LABEL_8:
      if (++v2 == v3) {
        return;
      }
    }
    uint64_t v8 = v35.i64[0] - 8;
    while (*((void *)begin + 34 * v2 + 16) != *(void *)(v8 + 8))
    {
      v8 += 8;
      if ((void *)v8 == v6) {
        goto LABEL_7;
      }
    }
    id v33 = &v35;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

    uint64_t v9 = 0;
    while (1)
    {
      if (v2 == v9) {
        goto LABEL_17;
      }
      uint64_t v10 = this->other_objects_.__begin_;
      uint64_t v11 = @"Dishwasher";
      int8x16_t v36 = 0;
      int8x16_t v35 = 0uLL;
      id v33 = &v35;
      LOBYTE(v34) = 0;
      long long v12 = operator new(8uLL);
      v35.i64[0] = (uint64_t)v12;
      v35.i64[1] = (uint64_t)v12;
      int8x16_t v36 = v12 + 1;
      long long v13 = v11;
      void *v12 = v13;
      v35.i64[1] = (uint64_t)(v12 + 1);
      if ((void *)v35.i64[0] == v12 + 1)
      {
LABEL_16:
        id v33 = &v35;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

        goto LABEL_17;
      }
      uint64_t v14 = v35.i64[0] - 8;
      while (*((void *)v10 + 34 * v9 + 16) != *(void *)(v14 + 8))
      {
        v14 += 8;
        if ((void *)v14 == v12) {
          goto LABEL_16;
        }
      }
      id v33 = &v35;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

      uint64_t v15 = this->other_objects_.__begin_;
      uint64_t v16 = (float32x4_t *)((char *)v15 + 272 * v2);
      float32x4_t v17 = (float32x4_t *)((char *)v15 + 272 * v9);
      box3dIou(v16, v17, 0, (uint64_t)&v35);
      if (v37 <= 0.0) {
        goto LABEL_17;
      }
      box3dToCentroidSizeAngle(v16, (uint64_t *)&v33);
      box3dToCentroidSizeAngle(v17, (uint64_t *)__p);
      if (vabds_f32(*((float *)v33 + 6), *((float *)__p[0] + 6)) <= 0.0001)
      {
        float32x4_t v20 = vsubq_f32(*v16, v17[3]);
        float32x4_t v21 = vsubq_f32(v16[3], *v17);
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v20, v20))) >= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21))))
        {
          FindLinesIntersect(1, &v35, *v17, v17[1], v16[1], v16[2]);
          if ((_BYTE)v36)
          {
            int v19 = 0;
            v16[2].i64[0] = v35.i64[0];
            float32x4_t v26 = v16[2];
            float32x4_t v27 = v16[3];
            v16[3].i32[2] = v27.i32[2];
            unint64_t v28 = vsubq_f32(*v16, v26).u64[0];
            v27.i64[0] = vsubq_f32(v27, *v16).u64[0];
            *(float *)&unint64_t v28 = (float)-(float)(vmuls_lane_f32(*((float *)&v28 + 1), *(float32x2_t *)v27.f32, 1)
                                           + (float)(*(float *)&v28 * v27.f32[0]))
                           / (v27.f32[0] * v27.f32[0] + v27.f32[1] * v27.f32[1]);
            float32x2_t v29 = vmla_n_f32(*(float32x2_t *)v16->f32, *(float32x2_t *)v27.f32, *(float *)&v28);
            *(float32x2_t *)v16[3].f32 = v29;
            v16[6].i64[0] = v26.i64[0];
            *(float32x2_t *)v16[7].f32 = v29;
            goto LABEL_30;
          }
        }
        else
        {
          FindLinesIntersect(1, &v35, v17[3], v17[2], *v16, v16[3]);
          if ((_BYTE)v36)
          {
            int v19 = 0;
            v16->i64[0] = v35.i64[0];
            float32x4_t v22 = *v16;
            float32x4_t v23 = v16[1];
            v16[1].i32[2] = v23.i32[2];
            unint64_t v24 = vsubq_f32(v23, v22).u64[0];
            float32x2_t v25 = (float32x2_t)vsubq_f32(v16[2], v23).u64[0];
            *(float *)&unint64_t v24 = (float)-(float)(vmuls_lane_f32(*((float *)&v24 + 1), v25, 1)
                                           + (float)(*(float *)&v24 * v25.f32[0]))
                           / (v25.f32[0] * v25.f32[0] + v25.f32[1] * v25.f32[1]);
            *(float32x2_t *)v23.f32 = vmla_n_f32(*(float32x2_t *)v23.f32, v25, *(float *)&v24);
            v16[1].i64[0] = v23.i64[0];
            v16[4].i64[0] = v22.i64[0];
            v16[5].i64[0] = v23.i64[0];
            goto LABEL_30;
          }
        }
        int v19 = 7;
      }
      else
      {
        uint64_t v18 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          OU3DKitchenObjectMerger::AlignSinkWithDishwasher(&buf, v31, v18);
        }

        int v19 = 1;
      }
LABEL_30:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v33)
      {
        long long v34 = v33;
        operator delete(v33);
      }
      if (v19 && v19 != 7) {
        return;
      }
LABEL_17:
      if (++v9 == v3) {
        goto LABEL_8;
      }
    }
  }
}

void sub_237C1FBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t OU3DKitchenObjectMerger::UpdateZ(float a1, float a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v9 = a5[5];
  if ((int)v9 < 1)
  {
    float v14 = *(float *)(a4 + 72);
    float v13 = *(float *)(a4 + 8);
    if (a6) {
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    }
    goto LABEL_56;
  }
  unint64_t v10 = a5[4];
  unint64_t v11 = v9 + v10 - 1;
  uint64_t v12 = a5[1];
  uint64_t v41 = *(void *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v11 & 0xF);
  unsigned int v42 = v11 & 0xF;
  uint64_t v43 = *(void *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8));
  if (!*(unsigned char *)(a4 + 224))
  {
    float v13 = *(float *)(*(void *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v11 & 0xF) + 8);
    if (a5[2] != v12)
    {
      float32x4_t v27 = (void *)(v12 + 8 * (v10 >> 4));
      uint64_t v28 = *v27 + 272 * (a5[4] & 0xFLL);
      uint64_t v29 = *(void *)(v12 + (((v10 + v9) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * ((v10 + v9) & 0xF);
      while (v28 != v29)
      {
        long long v30 = @"Cabinet";
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v45 = 0;
        int v48 = (void **)&v45;
        char v49 = 0;
        id v31 = operator new(8uLL);
        uint64_t v45 = v31;
        uint64_t v46 = v31;
        uint64_t v47 = v31 + 1;
        long long v32 = v30;
        void *v31 = v32;
        uint64_t v46 = v31 + 1;
        if (v45 == v31 + 1)
        {
LABEL_33:
          int v48 = (void **)&v45;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

          if (v13 < *(float *)(v28 + 72)) {
            float v13 = *(float *)(v28 + 72);
          }
        }
        else
        {
          id v33 = v45 - 1;
          while (*(void *)(v28 + 128) != v33[1])
          {
            if (++v33 == v31) {
              goto LABEL_33;
            }
          }
          int v48 = (void **)&v45;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);
        }
        v28 += 272;
        if (v28 - *v27 == 4352)
        {
          uint64_t v34 = v27[1];
          ++v27;
          uint64_t v28 = v34;
        }
      }
    }
    if ([*(id *)(v41 + 152) isEqualToString:@"online"]) {
      BOOL v35 = *(unsigned char *)(v43 + 272 * v42 + 224) == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (!v35)
    {
      int8x16_t v36 = @"Cabinet";
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      int v48 = (void **)&v45;
      char v49 = 0;
      float v37 = operator new(8uLL);
      uint64_t v45 = v37;
      uint64_t v46 = v37;
      uint64_t v47 = v37 + 1;
      uint64_t v38 = v36;
      void *v37 = v38;
      uint64_t v46 = v37 + 1;
      if (v45 != v37 + 1)
      {
        char v39 = v45 - 1;
        while (*(void *)(v41 + 128) != v39[1])
        {
          if (++v39 == v37) {
            goto LABEL_48;
          }
        }
        int v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

        float v14 = *(float *)(v41 + 72);
        if ((a6 & 1) == 0) {
          goto LABEL_56;
        }
        return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
      }
LABEL_48:
      int v48 = (void **)&v45;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);
    }
    float v14 = *(float *)(a4 + 72);
    if (a6) {
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    }
    goto LABEL_56;
  }
  float v13 = *(float *)(a4 + 8);
  float v14 = *(float *)(a4 + 72);
  if (a5[2] != v12)
  {
    uint64_t v15 = (void *)(v12 + 8 * (v10 >> 4));
    uint64_t v16 = *v15 + 272 * (a5[4] & 0xFLL);
    uint64_t v17 = *(void *)(v12 + (((v10 + v9) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * ((v10 + v9) & 0xF);
    while (v16 != v17)
    {
      uint64_t v18 = @"Cabinet";
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v45 = 0;
      int v48 = (void **)&v45;
      char v49 = 0;
      int v19 = operator new(8uLL);
      uint64_t v45 = v19;
      uint64_t v46 = v19;
      uint64_t v47 = v19 + 1;
      float32x4_t v20 = v18;
      *int v19 = v20;
      uint64_t v46 = v19 + 1;
      if (v45 == v19 + 1)
      {
LABEL_9:
        int v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

        if (v13 < *(float *)(v16 + 72)) {
          float v13 = *(float *)(v16 + 72);
        }
        if (*(float *)(v16 + 8) < v14) {
          float v14 = *(float *)(v16 + 8);
        }
      }
      else
      {
        float32x4_t v21 = v45 - 1;
        while (*(void *)(v16 + 128) != v21[1])
        {
          if (++v21 == v19) {
            goto LABEL_9;
          }
        }
        int v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);
      }
      v16 += 272;
      if (v16 - *v15 == 4352)
      {
        uint64_t v22 = v15[1];
        ++v15;
        uint64_t v16 = v22;
      }
    }
  }
  if (!*(unsigned char *)(v43 + 272 * v42 + 224))
  {
    float v13 = *(float *)(a4 + 8);
    if (a6) {
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    }
    goto LABEL_56;
  }
  float v14 = *(float *)(a4 + 72);
  float32x4_t v23 = @"Cabinet";
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  int v48 = (void **)&v45;
  char v49 = 0;
  unint64_t v24 = operator new(8uLL);
  uint64_t v45 = v24;
  uint64_t v46 = v24;
  uint64_t v47 = v24 + 1;
  float32x2_t v25 = v23;
  *unint64_t v24 = v25;
  uint64_t v46 = v24 + 1;
  if (v45 == v24 + 1)
  {
LABEL_23:
    int v48 = (void **)&v45;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

    if (a6) {
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    }
    goto LABEL_56;
  }
  float32x4_t v26 = v45 - 1;
  while (*(void *)(v41 + 128) != v26[1])
  {
    if (++v26 == v24) {
      goto LABEL_23;
    }
  }
  int v48 = (void **)&v45;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

  if ((float)(*(float *)(v41 + 72) - *(float *)(a4 + 72)) > 0.5) {
    float v14 = *(float *)(v41 + 72);
  }
  if ((a6 & 1) == 0)
  {
LABEL_56:
    if (vabds_f32(v13, a2) <= 0.1) {
      float v13 = a2;
    }
    if (vabds_f32(v14, a1) <= 0.1) {
      float v14 = a1;
    }
  }
  return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
}

void sub_237C20138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::FuseAndCarve(OU3DKitchenObjectMerger *this)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  if ((int)(-252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4)) >= 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    p_fused_cabinets = (uint64_t *)&this->fused_cabinets_;
    uint64_t v186 = -252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4);
    do
    {
      uint64_t v192 = v2;
      begin = v1->new_cabinets_.__begin_;
      uint64_t v3 = (uint64_t)begin + 272 * v2;
      v217 = 0;
      v218 = 0;
      unint64_t v219 = 0;
      std::__fs::filesystem::directory_entry::_Path __p = 0;
      v215 = 0;
      v216 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      float32x2_t v4 = *(float32x2_t *)(v3 + 48);
      long long v193 = *(_OWORD *)(v3 + 16);
      float32x4_t v200 = *(float32x4_t *)(v3 + 32);
      float32x2_t v5 = vsub_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)&v193);
      if ((int)(-252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4)) >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = -252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4);
        do
        {
          uint64_t v8 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * v6;
          this = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v8, (float32x4_t *)v3);
          if (this)
          {
            float32x4_t v194 = *(float32x4_t *)(v8 + 16);
            float32x4_t v197 = *(float32x4_t *)(v8 + 32);
            uint64_t v9 = v218;
            if ((unint64_t)v218 >= v219)
            {
              unint64_t v10 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v8);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v8);
              unint64_t v10 = (OUBox3d *)((char *)v9 + 272);
            }
            v218 = v10;
            unint64_t v11 = v215;
            if (v215 >= v216)
            {
              float v13 = (char *)__p;
              uint64_t v14 = (v215 - (unsigned char *)__p) >> 2;
              unint64_t v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v16 = v216 - (unsigned char *)__p;
              if ((v216 - (unsigned char *)__p) >> 1 > v15) {
                unint64_t v15 = v16 >> 1;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v15;
              }
              if (v17)
              {
                uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v17);
                float v13 = (char *)__p;
                unint64_t v11 = v215;
              }
              else
              {
                uint64_t v18 = 0;
              }
              int v19 = &v18[4 * v14];
              *(_DWORD *)int v19 = 2;
              uint64_t v12 = v19 + 4;
              while (v11 != v13)
              {
                int v20 = *((_DWORD *)v11 - 1);
                v11 -= 4;
                *((_DWORD *)v19 - 1) = v20;
                v19 -= 4;
              }
              std::__fs::filesystem::directory_entry::_Path __p = v19;
              v215 = v12;
              v216 = &v18[4 * v17];
              if (v13) {
                operator delete(v13);
              }
            }
            else
            {
              *(_DWORD *)v215 = 2;
              uint64_t v12 = v11 + 4;
            }
            v215 = v12;
            float32x4_t v21 = vsubq_f32(v200, v197);
            float v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v21.f32)) >= 0.0) {
              float v23 = v22;
            }
            else {
              float v23 = -v22;
            }
            unint64_t v24 = v212;
            if (v212 >= (float *)v213)
            {
              float32x4_t v26 = (float *)v211;
              uint64_t v27 = ((char *)v212 - (unsigned char *)v211) >> 2;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v29 = v213 - (unsigned char *)v211;
              if ((v213 - (unsigned char *)v211) >> 1 > v28) {
                unint64_t v28 = v29 >> 1;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30)
              {
                id v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v30);
                float32x4_t v26 = (float *)v211;
                unint64_t v24 = v212;
              }
              else
              {
                id v31 = 0;
              }
              long long v32 = (float *)&v31[4 * v27];
              float *v32 = v23;
              float32x2_t v25 = v32 + 1;
              while (v24 != v26)
              {
                int v33 = *((_DWORD *)v24-- - 1);
                *((_DWORD *)v32-- - 1) = v33;
              }
              v211 = v32;
              v212 = v25;
              v213 = &v31[4 * v30];
              if (v26) {
                operator delete(v26);
              }
            }
            else
            {
              float *v212 = v23;
              float32x2_t v25 = v24 + 1;
            }
            v212 = v25;
            uint64_t v34 = v218;
            if ((unint64_t)v218 >= v219)
            {
              this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v8);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v8);
              this = (OU3DKitchenObjectMerger *)&v34[2].var7;
            }
            v218 = (OUBox3d *)this;
            BOOL v35 = (OU3DKitchenObjectMerger *)v215;
            if (v215 >= v216)
            {
              this = (OU3DKitchenObjectMerger *)__p;
              uint64_t v37 = (v215 - (unsigned char *)__p) >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = v216 - (unsigned char *)__p;
              if ((v216 - (unsigned char *)__p) >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v40);
                this = (OU3DKitchenObjectMerger *)__p;
                BOOL v35 = (OU3DKitchenObjectMerger *)v215;
              }
              else
              {
                uint64_t v41 = 0;
              }
              unsigned int v42 = (float *)&v41[4 * v37];
              *(_DWORD *)unsigned int v42 = 1;
              int8x16_t v36 = (char *)(v42 + 1);
              while (v35 != this)
              {
                float ceil_plane_height = v35[-1].ceil_plane_height_;
                BOOL v35 = (OU3DKitchenObjectMerger *)((char *)v35 - 4);
                *--unsigned int v42 = ceil_plane_height;
              }
              std::__fs::filesystem::directory_entry::_Path __p = v42;
              v215 = v36;
              v216 = &v41[4 * v40];
              if (this) {
                operator delete(this);
              }
            }
            else
            {
              *(_DWORD *)v215 = 1;
              int8x16_t v36 = (char *)&v35->old_cabinets_.__begin_ + 4;
            }
            v215 = v36;
            float32x4_t v44 = vsubq_f32(v200, v194);
            float v45 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v44, v44)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v44.f32)) >= 0.0) {
              float v46 = v45;
            }
            else {
              float v46 = -v45;
            }
            uint64_t v47 = (OU3DKitchenObjectMerger *)v212;
            if (v212 >= (float *)v213)
            {
              this = (OU3DKitchenObjectMerger *)v211;
              uint64_t v49 = ((char *)v212 - (unsigned char *)v211) >> 2;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v51 = v213 - (unsigned char *)v211;
              if ((v213 - (unsigned char *)v211) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float32x4_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v52);
                this = (OU3DKitchenObjectMerger *)v211;
                uint64_t v47 = (OU3DKitchenObjectMerger *)v212;
              }
              else
              {
                float32x4_t v53 = 0;
              }
              float32x4_t v54 = (float *)&v53[4 * v49];
              *float32x4_t v54 = v46;
              int v48 = v54 + 1;
              while (v47 != this)
              {
                float v55 = v47[-1].ceil_plane_height_;
                uint64_t v47 = (OU3DKitchenObjectMerger *)((char *)v47 - 4);
                *--float32x4_t v54 = v55;
              }
              v211 = v54;
              v212 = v48;
              v213 = &v53[4 * v52];
              if (this) {
                operator delete(this);
              }
            }
            else
            {
              float *v212 = v46;
              int v48 = (float *)&v47->old_cabinets_.__begin_ + 1;
            }
            v212 = v48;
          }
          ++v6;
        }
        while (v6 != v7);
      }
      if ((int)(-252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4)) >= 1)
      {
        uint64_t v56 = 0;
        uint64_t v57 = -252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4);
        do
        {
          long long v58 = v1->other_objects_.__begin_;
          uint64_t v59 = (uint64_t)v58 + 272 * v56;
          LOBYTE(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v59, (float32x4_t *)v3);
          if (this)
          {
            float32x4_t v60 = vsubq_f32(*(float32x4_t *)v59, *(float32x4_t *)(v59 + 16));
            float32x4_t v61 = vmulq_f32(v60, v60);
            float32x4_t v62 = vsubq_f32(*(float32x4_t *)v3, *(float32x4_t *)(v3 + 16));
            float32x4_t v63 = vmulq_f32(v62, v62);
            if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0])) < 0.3)
            {
              this = (OU3DKitchenObjectMerger *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)v58 + 34 * v56 + 30, (int *)begin + 68 * v192 + 58, (_DWORD *)begin + 68 * v192 + 58);
              {
LABEL_91:
                float32x4_t v195 = *(float32x4_t *)(v59 + 16);
                float32x4_t v198 = *(float32x4_t *)(v59 + 32);
                uint64_t v65 = v218;
                if ((unint64_t)v218 >= v219)
                {
                  v66 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v59);
                }
                else
                {
                  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v59);
                  v66 = (OUBox3d *)((char *)v65 + 272);
                }
                v218 = v66;
                uint64_t v67 = v215;
                if (v215 >= v216)
                {
                  id v69 = (char *)__p;
                  uint64_t v70 = (v215 - (unsigned char *)__p) >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v72 = v216 - (unsigned char *)__p;
                  if ((v216 - (unsigned char *)__p) >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v73);
                    id v69 = (char *)__p;
                    uint64_t v67 = v215;
                  }
                  else
                  {
                    v74 = 0;
                  }
                  id v75 = &v74[4 * v70];
                  *(_DWORD *)id v75 = 2;
                  uint64_t v68 = v75 + 4;
                  while (v67 != v69)
                  {
                    int v76 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v75 - 1) = v76;
                    v75 -= 4;
                  }
                  std::__fs::filesystem::directory_entry::_Path __p = v75;
                  v215 = v68;
                  v216 = &v74[4 * v73];
                  if (v69) {
                    operator delete(v69);
                  }
                }
                else
                {
                  *(_DWORD *)v215 = 2;
                  uint64_t v68 = v67 + 4;
                }
                v215 = v68;
                float32x4_t v77 = vsubq_f32(v200, v198);
                float v78 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v77, v77)));
                if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v77.f32)) >= 0.0) {
                  float v79 = v78;
                }
                else {
                  float v79 = -v78;
                }
                v80 = v212;
                if (v212 >= (float *)v213)
                {
                  double v82 = (float *)v211;
                  uint64_t v83 = ((char *)v212 - (unsigned char *)v211) >> 2;
                  unint64_t v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v85 = v213 - (unsigned char *)v211;
                  if ((v213 - (unsigned char *)v211) >> 1 > v84) {
                    unint64_t v84 = v85 >> 1;
                  }
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v86 = v84;
                  }
                  if (v86)
                  {
                    simd_float4 v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v86);
                    double v82 = (float *)v211;
                    v80 = v212;
                  }
                  else
                  {
                    simd_float4 v87 = 0;
                  }
                  __n128 v88 = (float *)&v87[4 * v83];
                  *__n128 v88 = v79;
                  double v81 = v88 + 1;
                  while (v80 != v82)
                  {
                    int v89 = *((_DWORD *)v80-- - 1);
                    *((_DWORD *)v88-- - 1) = v89;
                  }
                  v211 = v88;
                  v212 = v81;
                  v213 = &v87[4 * v86];
                  if (v82) {
                    operator delete(v82);
                  }
                }
                else
                {
                  float *v212 = v79;
                  double v81 = v80 + 1;
                }
                v212 = v81;
                uint64_t v90 = v218;
                if ((unint64_t)v218 >= v219)
                {
                  this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v59);
                }
                else
                {
                  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v59);
                  this = (OU3DKitchenObjectMerger *)&v90[2].var7;
                }
                v218 = (OUBox3d *)this;
                uint64_t v91 = (OU3DKitchenObjectMerger *)v215;
                if (v215 >= v216)
                {
                  this = (OU3DKitchenObjectMerger *)__p;
                  uint64_t v93 = (v215 - (unsigned char *)__p) >> 2;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v95 = v216 - (unsigned char *)__p;
                  if ((v216 - (unsigned char *)__p) >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v96);
                    this = (OU3DKitchenObjectMerger *)__p;
                    uint64_t v91 = (OU3DKitchenObjectMerger *)v215;
                  }
                  else
                  {
                    int v97 = 0;
                  }
                  int32x4_t v98 = (float *)&v97[4 * v93];
                  *(_DWORD *)int32x4_t v98 = 1;
                  v92 = (char *)(v98 + 1);
                  while (v91 != this)
                  {
                    float v99 = v91[-1].ceil_plane_height_;
                    uint64_t v91 = (OU3DKitchenObjectMerger *)((char *)v91 - 4);
                    *--int32x4_t v98 = v99;
                  }
                  std::__fs::filesystem::directory_entry::_Path __p = v98;
                  v215 = v92;
                  v216 = &v97[4 * v96];
                  if (this) {
                    operator delete(this);
                  }
                }
                else
                {
                  *(_DWORD *)v215 = 1;
                  v92 = (char *)&v91->old_cabinets_.__begin_ + 4;
                }
                v215 = v92;
                float32x4_t v100 = vsubq_f32(v200, v195);
                float v101 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v100, v100)));
                if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v100.f32)) >= 0.0) {
                  float v102 = v101;
                }
                else {
                  float v102 = -v101;
                }
                unsigned __int8 v103 = (OU3DKitchenObjectMerger *)v212;
                if (v212 >= (float *)v213)
                {
                  this = (OU3DKitchenObjectMerger *)v211;
                  uint64_t v105 = ((char *)v212 - (unsigned char *)v211) >> 2;
                  unint64_t v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v107 = v213 - (unsigned char *)v211;
                  if ((v213 - (unsigned char *)v211) >> 1 > v106) {
                    unint64_t v106 = v107 >> 1;
                  }
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v108 = v106;
                  }
                  if (v108)
                  {
                    unsigned __int8 v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v108);
                    this = (OU3DKitchenObjectMerger *)v211;
                    unsigned __int8 v103 = (OU3DKitchenObjectMerger *)v212;
                  }
                  else
                  {
                    unsigned __int8 v109 = 0;
                  }
                  long long v110 = (float *)&v109[4 * v105];
                  *long long v110 = v102;
                  v104 = v110 + 1;
                  while (v103 != this)
                  {
                    float v111 = v103[-1].ceil_plane_height_;
                    unsigned __int8 v103 = (OU3DKitchenObjectMerger *)((char *)v103 - 4);
                    *--long long v110 = v111;
                  }
                  v211 = v110;
                  v212 = v104;
                  v213 = &v109[4 * v108];
                  if (this) {
                    operator delete(this);
                  }
                }
                else
                {
                  float *v212 = v102;
                  v104 = (float *)&v103->old_cabinets_.__begin_ + 1;
                }
                v212 = v104;
              }
              else
              {
                while (*(void *)(v59 + 128) != *v64)
                {
                  if (++v64 == (void *)qword_26AF27318) {
                    goto LABEL_91;
                  }
                }
              }
            }
          }
          ++v56;
        }
        while (v56 != v57);
      }
      if (v217 == v218)
      {
        end = v1->fused_cabinets_.__end_;
        uint64_t v112 = v192;
        if (end >= v1->fused_cabinets_.__end_cap_.__value_)
        {
          uint64_t v168 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, v3);
        }
        else
        {
          std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, v3);
          uint64_t v168 = (uint64_t)end + 272;
          v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)end + 272);
        }
        v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v168;
      }
      else
      {
        long long v209 = 0uLL;
        id var3 = 0;
        OU3DKitchenObjectMerger::SortBasedOnDistance(&v211, (uint64_t *)&v217, &__p, (uint64_t)&v220);
        uint64_t v112 = v192;
        std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v209);
        long long v209 = *(_OWORD *)&v220.var1;
        var4 = v220.var4;
        id var3 = v220.var3;
        memset(&v220, 0, 48);
        *(void *)&long long v205 = &v220;
        std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
        float32x2_t v208 = *(float32x2_t *)v200.f32;
        float v199 = *(float *)(v3 + 72);
        float v196 = *(float *)(v3 + 8);
        long long v206 = 0u;
        long long v207 = 0u;
        long long v205 = 0u;
        unint64_t v114 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)&v209 + 1) - v209) >> 4);
        float32x2_t v115 = vsub_f32(v4, *(float32x2_t *)v200.f32);
        if ((int)v114 >= 1)
        {
          uint64_t v116 = 0;
          uint64_t v190 = (v114 - 1);
          long long v117 = (char *)begin + 272 * v192;
          uint64_t v188 = (uint64_t)(v117 + 240);
          v189 = v117 + 224;
          uint64_t v118 = -252645135 * ((uint64_t)(*((void *)&v209 + 1) - v209) >> 4);
          BOOL v119 = 1;
          while (1)
          {
            v120 = (uint64_t *)(v209 + 272 * v116);
            if (var4[v116] == 2)
            {
              IsSimilarsize_t Height = (uint64_t)std::deque<OU3DKitchenObject>::push_back(&v205, v209 + 272 * v116);
              float32x2_t v122 = (float32x2_t)v120[4];
              v123 = v120 + 6;
            }
            else
            {
              if ((void)v206 == *((void *)&v205 + 1)) {
                goto LABEL_237;
              }
              float32x4_t v125 = (void *)(*((void *)&v205 + 1) + 8 * ((unint64_t)v207 >> 4));
              uint64_t v126 = *v125 + 272 * (v207 & 0xF);
              uint64_t v127 = *(void *)(*((void *)&v205 + 1)
                               + (((*((void *)&v207 + 1) + (void)v207) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 272 * ((DWORD2(v207) + v207) & 0xF);
              if (v126 == v127) {
                goto LABEL_237;
              }
              uint64_t v128 = (OUBox3d *)*(unsigned int *)(v209 + 272 * v116 + 232);
              while (v128 != *(_DWORD *)(v126 + 232))
              {
                v126 += 272;
                if (v126 - *v125 == 4352)
                {
                  uint64_t v129 = v125[1];
                  ++v125;
                  uint64_t v126 = v129;
                }
                if (v126 == v127) {
                  goto LABEL_237;
                }
              }
              if (v128 != *(_DWORD *)(*(void *)(*((void *)&v205 + 1)
                                                         + (((unint64_t)(v207 + *((void *)&v207 + 1) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                             + 272 * ((v207 + DWORD2(v207) - 1) & 0xF)
                                             + 232))
              {
                {
LABEL_194:
                  std::deque<OU3DKitchenObject>::__move_assign((uint64_t)&v205, (uint64_t)&v220);
                  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v220);
                  goto LABEL_237;
                }
                while (v120[16] != *v132)
                {
                  if (++v132 == (void *)qword_26AF27868) {
                    goto LABEL_194;
                  }
                }
              }
              std::deque<OU3DKitchenObject>::__move_assign((uint64_t)&v205, (uint64_t)&v220);
              IsSimilarsize_t Height = std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v220);
              float32x2_t v122 = (float32x2_t)v120[2];
              v123 = v120;
            }
            float32x2_t v124 = vsub_f32(v208, v122);
            if (vaddv_f32(vmul_f32(vsub_f32(v208, *(float32x2_t *)&v193), v124)) >= 0.000001)
            {
              uint64_t v130 = *v123;
              if (sqrtf(vaddv_f32(vmul_f32(v124, v124))) >= 0.1) {
                goto LABEL_281;
              }
              {
                while (v120[16] != *v131)
                {
                  if (++v131 == (void *)qword_26AF27868) {
                    goto LABEL_202;
                  }
                }
                if (var4[v116] == 1)
                {
LABEL_281:
                  if (v116)
                  {
                    {
                      uint64_t v134 = (v116 - 1);
                      uint64_t v135 = v209 + 272 * v134;
                      while (*(void *)(v135 + 128) != *v133)
                      {
                        if (++v133 == (void *)qword_26AF27868) {
                          goto LABEL_206;
                        }
                      }
                      if (var4[v134] == 1)
                      {
                        IsSimilarsize_t Height = OU3DKitchenObjectMerger::IsSimilarHeight((OU3DKitchenObjectMerger *)IsSimilarHeight, (const OU3DKitchenObject *)(v209 + 272 * v134), (const OU3DKitchenObject *)v3, 0.8);
                        if ((IsSimilarHeight & v119) == 1)
                        {
                          v220.var1 = 0;
                          *(void *)&v220.var2 = 0;
                          v220.var1 = *(id *)(v135 + 16);
                          *(void *)&v220.var2 = *(void *)v135;
                          int32x2_t v203 = *(int32x2_t *)v200.f32;
                          uint64_t v204 = v193;
                          IsSimilarsize_t Height = OU::intersect((int32x2_t *)&v220, &v203, &v208);
                        }
                      }
                    }
                  }
LABEL_206:
                  {
                    char v140 = 0;
                  }
                  else
                  {
                    uint64_t v137 = v120[16];
                    do
                    {
                      uint64_t v139 = *(void *)(v138 - 8);
                      char v140 = v137 == v139;
                      BOOL v141 = v137 == v139 || v138 == qword_26AF27868;
                      v138 += 8;
                    }
                    while (!v141);
                  }
                  OU3DKitchenObjectMerger::UpdateZ(v199, v196, IsSimilarHeight, v3, &v205, v140);
                  if ((v142 & 1) == 0 && v116 != v190)
                  {
                    int v143 = 0;
LABEL_236:
                    BOOL v119 = v143 != 0;
                    goto LABEL_237;
                  }
                  int32x2_t v203 = (int32x2_t)v122;
                  uint64_t v204 = v130;
                  v202[0] = *(int32x2_t *)v200.f32;
                  v202[1] = (int32x2_t)v193;
                  float32x2_t v201 = 0;
                  OU::intersect(&v203, v202, &v201);
                  float32x2_t v144 = v208;
                  float32x2_t v145 = v201;
                  OUBox3d::OUBox3d(&v220, (const OUBox3d *)v3);
                  uint64_t v146 = *(void *)v189;
                  int v231 = *((_DWORD *)v189 + 2);
                  uint64_t v230 = v146;
                  v147 = std::set<int>::set[abi:ne180100](&v232, v188);
                  *(float32x2_t *)&long long v148 = vadd_f32(v115, v145);
                  *(float32x2_t *)&long long v149 = vadd_f32(v115, v144);
                  long long v150 = v148;
                  *((float *)&v150 + 2) = v196;
                  *(float32x2_t *)&long long v151 = v201;
                  long long v152 = v151;
                  *((float *)&v152 + 2) = v196;
                  *(_OWORD *)&v220.var1 = v150;
                  *(_OWORD *)&v220.id var3 = v152;
                  *(float32x2_t *)&long long v153 = v208;
                  long long v154 = v153;
                  *((float *)&v154 + 2) = v196;
                  long long v155 = v149;
                  *((float *)&v155 + 2) = v196;
                  *(_OWORD *)&v220.var5.var0 = v154;
                  *(_OWORD *)&v220.var5.var2.var0 = v155;
                  uint64_t v187 = v148;
                  long long v156 = v148;
                  *((float *)&v156 + 2) = v199;
                  *((float *)&v151 + 2) = v199;
                  *(_OWORD *)&v220.var6.var1 = v156;
                  *(_OWORD *)&v220.var7 = v151;
                  *((float *)&v153 + 2) = v199;
                  *((float *)&v149 + 2) = v199;
                  long long v221 = v153;
                  long long v222 = v149;
                  v157 = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::UpdateZ(v199, v196, (uint64_t)v147, v3, &v205, v140);
                  char v159 = v158;
                  if (OU3DKitchenObjectMerger::IsValidCabinet(v157, (float32x4_t *)&v220, 0.15))
                  {
                    v160 = v1->fused_cabinets_.__end_;
                    if (v160 >= v1->fused_cabinets_.__end_cap_.__value_)
                    {
                      uint64_t v161 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, (uint64_t)&v220);
                    }
                    else
                    {
                      std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, (uint64_t)&v220);
                      uint64_t v161 = (uint64_t)v160 + 272;
                      v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)v160 + 272);
                    }
                    v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v161;
                    goto LABEL_230;
                  }
                  if (!*((void *)&v207 + 1)) {
                    goto LABEL_230;
                  }
                  if (boxVolume((const box3d *)&v220) > 0.1
                    && vabds_f32(*(float *)&v157, *((float *)&v157 + 1)) >= vabds_f32(v199, v196))
                  {
                    float32x2_t v164 = v201;
                    float32x2_t v208 = v201;
                    v165 = v1->fused_cabinets_.__end_;
                    if (v1->fused_cabinets_.__begin_ != v165 && *((_DWORD *)v165 - 10) == v231)
                    {
                      *((void *)v165 - 34) = v187;
                      *((float32x2_t *)v165 - 32) = v164;
                      *((void *)v165 - 26) = v187;
                      *((float32x2_t *)v165 - 24) = v164;
                    }
                  }
                  else
                  {
                    float v162 = boxVolume((const box3d *)&v220);
                    char v163 = v140 ^ 1;
                    if (v162 >= 0.05) {
                      char v163 = 1;
                    }
                    if ((v163 & 1) == 0) {
LABEL_230:
                    }
                      float32x2_t v208 = v201;
                  }
                  std::__tree<int>::destroy((uint64_t)&v232, v233);

                  if (v228) {
                    operator delete(v228);
                  }
                  if (v226)
                  {
                    v227 = v226;
                    operator delete(v226);
                  }

                  int v143 = v159 & 1;
                  float v196 = *((float *)&v157 + 1);
                  float v199 = *(float *)&v157;
                  goto LABEL_236;
                }
              }
            }
LABEL_202:
            unint64_t v136 = OU3DKitchenObjectMerger::UpdateZ(v199, v196, IsSimilarHeight, v3, &v205, 0);
            float v196 = *((float *)&v136 + 1);
            float v199 = *(float *)&v136;
LABEL_237:
            if (++v116 == v118)
            {
              float32x2_t v166 = v208;
              uint64_t v112 = v192;
              goto LABEL_245;
            }
          }
        }
        LOBYTE(v119) = 1;
        float32x2_t v166 = *(float32x2_t *)v200.f32;
LABEL_245:
        if (vaddv_f32(vmul_f32(v5, vsub_f32(v166, *(float32x2_t *)&v193))) >= 0.000001)
        {
          OUBox3d::OUBox3d(&v220, (const OUBox3d *)v3);
          v169 = (char *)begin + 272 * v112;
          uint64_t v170 = *((void *)v169 + 28);
          int v231 = *((_DWORD *)v169 + 58);
          uint64_t v230 = v170;
          v171 = std::set<int>::set[abi:ne180100](&v232, (uint64_t)(v169 + 240));
          *(float32x2_t *)&long long v173 = v208;
          *((void *)&v174 + 1) = *((void *)&v193 + 1);
          *(float32x2_t *)&long long v174 = vadd_f32(*(float32x2_t *)&v193, v115);
          if (v119
            || (v175 = v1->fused_cabinets_.__end_, v175 == v1->fused_cabinets_.__begin_)
            || *((_DWORD *)v175 - 10) != v231)
          {
            *(float32x2_t *)&long long v172 = vadd_f32(v115, v208);
            int v176 = *(_DWORD *)(v3 + 72);
            int v177 = *(_DWORD *)(v3 + 8);
            long long v178 = v174;
            DWORD2(v178) = v177;
            long long v179 = v193;
            long long v180 = v193;
            DWORD2(v180) = v177;
            long long v181 = v173;
            DWORD2(v181) = v177;
            *(_OWORD *)&v220.var1 = v178;
            *(_OWORD *)&v220.id var3 = v180;
            long long v182 = v172;
            DWORD2(v182) = v177;
            *(_OWORD *)&v220.var5.var0 = v181;
            *(_OWORD *)&v220.var5.var2.var0 = v182;
            DWORD2(v174) = v176;
            DWORD2(v179) = v176;
            *(_OWORD *)&v220.var6.var1 = v174;
            *(_OWORD *)&v220.var7 = v179;
            DWORD2(v173) = v176;
            DWORD2(v172) = v176;
            long long v221 = v173;
            long long v222 = v172;
            if (OU3DKitchenObjectMerger::IsValidCabinet((OU3DKitchenObjectMerger *)v171, (float32x4_t *)&v220, 0.25))
            {
              v183 = v1->fused_cabinets_.__end_;
              if (v183 >= v1->fused_cabinets_.__end_cap_.__value_)
              {
                uint64_t v184 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, (uint64_t)&v220);
              }
              else
              {
                std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, (uint64_t)&v220);
                uint64_t v184 = (uint64_t)v183 + 272;
                v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)v183 + 272);
              }
              v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v184;
            }
          }
          else
          {
            *((void *)v175 - 34) = v174;
            *((void *)v175 - 32) = v193;
            *((void *)v175 - 26) = v174;
            *((void *)v175 - 24) = v193;
          }
          std::__tree<int>::destroy((uint64_t)&v232, v233);

          if (v228) {
            operator delete(v228);
          }
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }

          uint64_t v112 = v192;
        }
        std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v205);
        if (var4) {
          operator delete(var4);
        }
        v220.var1 = &v209;
        std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      }
      if (v211)
      {
        v212 = (float *)v211;
        operator delete(v211);
      }
      if (__p)
      {
        v215 = (char *)__p;
        operator delete(__p);
      }
      v220.var1 = &v217;
      std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      uint64_t v2 = v112 + 1;
    }
    while (v2 != v186);
  }
}

void sub_237C2136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  *(void *)(v59 + 80) = v60;
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)&a59);
  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&a39);
  if (v61) {
    operator delete(v61);
  }
  a59 = (uint64_t)&a47;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  a59 = (uint64_t)&a56;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  _Unwind_Resume(a1);
}

void **OU3DKitchenObjectMerger::SortBasedOnDistance@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1] - *a1;
  if (v4 >> 2 != 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4) || (float32x2_t v5 = a3, v4 >> 2 != (uint64_t)(a3[1] - *a3) >> 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input data size doesn't match.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  unint64_t v6 = (unint64_t)v4 >> 2;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v7 = ((unint64_t)v4 >> 2);
  if ((int)((unint64_t)v4 >> 2) >= 1)
  {
    uint64_t v8 = a1;
    uint64_t v45 = v4;
    unint64_t v46 = (unint64_t)v4 >> 2;
    uint64_t v9 = 0;
    while (1)
    {
      LODWORD(v54) = *(_DWORD *)(*v8 + 4 * v9);
      uint64_t v10 = *a2;
      OUBox3d::OUBox3d(&v55, (const OUBox3d *)(*a2 + 272 * v9));
      uint64_t v11 = v10 + 272 * v9;
      uint64_t v12 = *(void *)(v11 + 224);
      int v64 = *(_DWORD *)(v11 + 232);
      uint64_t v63 = v12;
      std::set<int>::set[abi:ne180100](v65, v11 + 240);
      int v66 = *(_DWORD *)(*v5 + 4 * v9);
      if ((unint64_t)v52 >= v53) {
        break;
      }
      std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v52, (uint64_t)&v54);
      float v13 = v52 + 76;
LABEL_29:
      unint64_t v52 = v13;
      std::__tree<int>::destroy((uint64_t)v65, (void *)v65[1]);

      if (__p) {
        operator delete(__p);
      }
      if (v59)
      {
        uint64_t v60 = v59;
        operator delete(v59);
      }

      if (++v9 == v7)
      {
        float v23 = v51;
        unint64_t v24 = v52;
        uint64_t v4 = v45;
        LODWORD(v6) = v46;
        goto LABEL_36;
      }
    }
    unint64_t v14 = 0x86BCA1AF286BCA1BLL * (((char *)v52 - (char *)v51) >> 4) + 1;
    if (v14 > 0xD79435E50D7943) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0xD79435E50D79436 * ((uint64_t)(v53 - (void)v51) >> 4) > v14) {
      unint64_t v14 = 0xD79435E50D79436 * ((uint64_t)(v53 - (void)v51) >> 4);
    }
    if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v53 - (void)v51) >> 4) >= 0x6BCA1AF286BCA1) {
      unint64_t v15 = 0xD79435E50D7943;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 > 0xD79435E50D7943) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = (char *)operator new(304 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (uint64_t)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
    std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(v17, (uint64_t)&v54);
    uint64_t v18 = (long long *)v52;
    if (v52 == (int *)v51)
    {
      float v13 = (int *)(v17 + 304);
      uint64_t v51 = (long long *)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
      unint64_t v52 = (int *)(v17 + 304);
      unint64_t v53 = (unint64_t)&v16[304 * v15];
    }
    else
    {
      int v19 = v5;
      uint64_t v20 = v7;
      float32x4_t v21 = (long long *)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
      do
      {
        v21 -= 19;
        v18 -= 19;
        std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v21, (uint64_t)v18);
      }
      while (v18 != v51);
      uint64_t v18 = v51;
      float v22 = (long long *)v52;
      float v13 = (int *)(v17 + 304);
      uint64_t v51 = v21;
      unint64_t v52 = (int *)(v17 + 304);
      unint64_t v53 = (unint64_t)&v16[304 * v15];
      uint64_t v7 = v20;
      if (v22 != v18)
      {
        do
        {
          v22 -= 19;
          std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v22);
        }
        while (v22 != v18);
        float32x2_t v5 = v19;
        if (!v18) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      float32x2_t v5 = v19;
    }
    if (!v18)
    {
LABEL_28:
      uint64_t v8 = a1;
      goto LABEL_29;
    }
LABEL_27:
    operator delete(v18);
    goto LABEL_28;
  }
  unint64_t v24 = 0;
  float v23 = 0;
LABEL_36:
  unint64_t v25 = 126 - 2 * __clz(0x86BCA1AF286BCA1BLL * (((char *)v24 - (char *)v23) >> 4));
  if (v24 == (int *)v23) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>((unint64_t)v23, v24, v26, 1);
  long long v54 = 0uLL;
  unint64_t v27 = (int)(v4 >> 2);
  v55.id var1 = 0;
  std::vector<OU3DKitchenObject>::reserve((uint64_t *)&v54, v27);
  memset(&v50, 0, sizeof(v50));
  std::vector<int>::reserve(&v50, v27);
  if ((int)v6 <= 0)
  {
    end = v50.__end_;
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v54, &v51[19 * v28 + 1]);
      uint64_t v29 = (int *)&v51[19 * v28 + 18];
      std::vector<int>::pointer v30 = v50.__end_;
      if (v50.__end_ >= v50.__end_cap_.__value_)
      {
        std::vector<int>::pointer begin = v50.__begin_;
        int64_t v33 = v50.__end_ - v50.__begin_;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        int64_t v35 = (char *)v50.__end_cap_.__value_ - (char *)v50.__begin_;
        if (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50.__end_cap_, v36);
          std::vector<int>::pointer begin = v50.__begin_;
          std::vector<int>::pointer v30 = v50.__end_;
        }
        else
        {
          uint64_t v37 = 0;
        }
        unint64_t v38 = (int *)&v37[4 * v33];
        int *v38 = *v29;
        end = v38 + 1;
        while (v30 != begin)
        {
          int v39 = *--v30;
          *--unint64_t v38 = v39;
        }
        v50.__begin_ = v38;
        v50.__end_ = end;
        v50.__end_cap_.__value_ = (int *)&v37[4 * v36];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *v50.__end_ = *v29;
        end = v30 + 1;
      }
      v50.__end_ = end;
      ++v28;
    }
    while (v28 != v7);
  }
  *(_OWORD *)a4 = v54;
  id var1 = v55.var1;
  v55.id var1 = 0;
  long long v54 = 0uLL;
  std::vector<int>::pointer v41 = v50.__begin_;
  value = v50.__end_cap_.__value_;
  *(void *)(a4 + 16) = var1;
  *(void *)(a4 + 24) = v41;
  *(void *)(a4 + 32) = end;
  *(void *)(a4 + 40) = value;
  v50.__begin_ = (std::vector<int>::pointer)&v54;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  return std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100]((void **)&v51);
}

void sub_237C21A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, char *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p)
  {
    a18 = __p;
    operator delete(__p);
  }
  std::__fs::filesystem::directory_entry::_Path __p = &a23;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

OUBox3d *std::deque<OU3DKitchenObject>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<OU3DKitchenObject>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (OUBox3d *)(*(void *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v7 & 0xF));
  }
  float result = std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v8, a2);
  ++a1[5];
  return result;
}

OUBox3d *anonymous namespace'::DequeEraseTarget@<X0>(OUBox3d *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v4 = a2[1];
  if (a2[2] != v4)
  {
    unint64_t v5 = a2[4];
    uint64_t v6 = (void *)(v4 + 8 * (v5 >> 4));
    uint64_t v7 = *v6 + 272 * (v5 & 0xF);
    uint64_t v8 = *(void *)(v4 + (((a2[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*((_DWORD *)a2 + 10) + v5) & 0xF);
    if (v7 != v8)
    {
      int v9 = (int)result;
      do
      {
        if (*(_DWORD *)(v7 + 232) != v9) {
          float result = std::deque<OU3DKitchenObject>::push_back((void *)a3, v7);
        }
        v7 += 272;
        if (v7 - *v6 == 4352)
        {
          uint64_t v10 = v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_237C21C94(_Unwind_Exception *a1)
{
  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL OU3DKitchenObjectMerger::IsValidCabinet(OU3DKitchenObjectMerger *this, float32x4_t *a2, float a3)
{
  if (a2[4].f32[2] < a2->f32[2]) {
    return 0;
  }
  float32x4_t v4 = vsubq_f32(*a2, a2[3]);
  float32x4_t v5 = vmulq_f32(v4, v4);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]) < a3)return 0; {
  box3dToCentroidSizeAngle(a2, (uint64_t *)__p);
  }
  float v7 = *((float *)__p[0] + 5);
  if (v7 >= *((float *)__p[0] + 4)) {
    float v7 = *((float *)__p[0] + 4);
  }
  if (v7 >= *((float *)__p[0] + 3)) {
    float v7 = *((float *)__p[0] + 3);
  }
  BOOL v6 = v7 >= a3;
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v6;
}

void OU3DKitchenObject::~OU3DKitchenObject(OU3DKitchenObject *this)
{
  std::__tree<int>::destroy((uint64_t)this + 240, *((void **)this + 31));

  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
}

uint64_t OU3DKitchenObjectMerger::AddNonIntersectingOldDetections(OU3DKitchenObjectMerger *this)
{
  uint64_t v1 = this;
  v31[4] = *MEMORY[0x263EF8340];
  int v2 = -252645135 * ((unint64_t)(this->old_cabinets_.__end_ - this->old_cabinets_.__begin_) >> 4);
  p_new_cabinets = (uint64_t *)&this->new_cabinets_;
  std::vector<int>::pointer begin = this->new_cabinets_.__begin_;
  end = this->new_cabinets_.__end_;
  memset(v18, 0, sizeof(v18));
  int v19 = 1065353216;
  LODWORD(v20) = 0;
  if (v2 <= 0)
  {
    memset(&v21, 0, 24);
  }
  else
  {
    int v6 = 0;
    int v7 = -252645135 * ((end - begin) >> 4);
    do
    {
      if (v7 < 1)
      {
LABEL_8:
        int v9 = v1->old_cabinets_.__begin_;
        OUBox3d::OUBox3d(&v21, (const OUBox3d *)((char *)v1->old_cabinets_.__begin_ + 272 * v6));
        uint64_t v10 = (char *)v9 + 272 * v6;
        uint64_t v11 = *((void *)v10 + 28);
        int v30 = *((_DWORD *)v10 + 58);
        uint64_t v29 = v11;
        std::set<int>::set[abi:ne180100](v31, (uint64_t)(v10 + 240));
        uint64_t v12 = (void *)[@"offline" copy];
        id v13 = v24;
        id v24 = v12;

        std::vector<OU3DKitchenObject>::push_back[abi:ne180100](p_new_cabinets, (long long *)&v21);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v18, (int *)&v20, &v20);
        std::__tree<int>::destroy((uint64_t)v31, (void *)v31[1]);

        if (__p) {
          operator delete(__p);
        }
        if (v25)
        {
          uint64_t v26 = v25;
          operator delete(v25);
        }
      }
      else
      {
        uint64_t v8 = 0;
        while (1)
        {
          LOBYTE(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v1->old_cabinets_.__begin_ + 17 * (int)v20, (float32x4_t *)((char *)v1->new_cabinets_.__begin_ + v8));
          if (this) {
            break;
          }
          v8 += 272;
          if (272 * v7 == v8)
          {
            int v6 = (int)v20;
            goto LABEL_8;
          }
        }
      }
      int v6 = v20 + 1;
      LODWORD(v20) = v6;
    }
    while (v6 < v2);
    memset(&v21, 0, 24);
    LODWORD(v20) = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v18, (int *)&v20))
      {
        uint64_t v14 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * (int)v20;
        uint64_t v15 = *(void *)&v21.var2;
        if ((id)*(void *)&v21.var2 >= v21.var3)
        {
          uint64_t v16 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v21, v14);
        }
        else
        {
          std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(*(OUBox3d **)&v21.var2, v14);
          uint64_t v16 = v15 + 272;
        }
        *(void *)&v21.var2 = v16;
      }
      LODWORD(v20) = v20 + 1;
    }
    while ((int)v20 < v2);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v1->old_cabinets_.__begin_);
  *(_OWORD *)&v1->old_cabinets_.__begin_ = *(_OWORD *)&v21.var1;
  v1->old_cabinets_.__end_cap_.__value_ = (OU3DKitchenObject *)v21.var3;
  uint64_t v20 = &v21;
  memset(&v21, 0, 24);
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v18);
}

void sub_237C22074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43)
{
  a16 = &a17;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OU3DKitchenObject>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0xF0F0F0F0F0F0F0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x78787878787878) {
      unint64_t v13 = 0xF0F0F0F0F0F0F0;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[272 * v10];
    uint64_t v18 = &v14[272 * v13];
    std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>((uint64_t)v16, a2);
    uint64_t v17 = v16 + 272;
    std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v9;
  return result;
}

void sub_237C2221C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateFusedCabinets(OU3DKitchenObjectMerger *this)
{
  long long v10 = 0u;
  long long v11 = 0u;
  int v12 = 1065353216;
  p_fused_cabinets = &this->fused_cabinets_;
  int v3 = -252645135 * ((this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4);
  LODWORD(v13) = 0;
  if (v3 < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    do
    {
      int v4 = 0;
      int v9 = 0;
      do
      {
        if (v13 != v4
          && !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v10, &v9))
        {
          box3dIou((float32x4_t *)p_fused_cabinets->__begin_ + 17 * (int)v13, (float32x4_t *)p_fused_cabinets->__begin_ + 17 * v9, 0, (uint64_t)&v7);
          if (*(float *)&v8 > 0.5) {
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v10, (int *)&v13, &v13);
          }
        }
        int v4 = v9 + 1;
        int v9 = v4;
      }
      while (v4 < v3);
      LODWORD(v13) = v13 + 1;
    }
    while ((int)v13 < v3);
    uint64_t v5 = *((void *)&v11 + 1);
  }
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  std::vector<OU3DKitchenObject>::reserve((uint64_t *)&v7, v3 - v5);
  LODWORD(v13) = 0;
  if (v3 >= 1)
  {
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v10, (int *)&v13)) {
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v7, (long long *)p_fused_cabinets->__begin_ + 17 * (int)v13);
      }
      LODWORD(v13) = v13 + 1;
    }
    while ((int)v13 < v3);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_fused_cabinets->__begin_);
  *(_OWORD *)&this->fused_cabinets_.__begin_ = v7;
  this->fused_cabinets_.__end_cap_.__value_ = v8;
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  unint64_t v13 = (void **)&v7;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v13);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v10);
}

void sub_237C223D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 56) = &a9;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OU3DKitchenObject>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 272 * v6;
    std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_237C224A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateTableCabinet(OU3DKitchenObjectMerger *this)
{
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  p_other_objects = &this->other_objects_;
  int v3 = -252645135 * ((unint64_t)(this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
  std::vector<int>::pointer begin = this->fused_cabinets_.__begin_;
  end = this->fused_cabinets_.__end_;
  int v18 = 0;
  if (v3 <= 0)
  {
    long long v16 = 0uLL;
    uint64_t v17 = 0;
  }
  else
  {
    int v6 = 0;
    unint64_t v15 = 0xF0F0F0F0F0F0F0F1 * ((end - begin) >> 4);
    unint64_t v7 = 0xFFFFFFF000000010 * ((end - begin) >> 4);
    do
    {
      uint64_t v8 = (float32x4_t *)p_other_objects->__begin_;
      int v9 = @"Table";
      uint64_t v17 = 0;
      long long v16 = 0uLL;
      OUBox3d v21 = (void **)&v16;
      char v22 = 0;
      long long v10 = operator new(8uLL);
      *(void *)&long long v16 = v10;
      *((void *)&v16 + 1) = v10;
      uint64_t v17 = (OU3DKitchenObject *)(v10 + 1);
      long long v11 = v9;
      void *v10 = v11;
      *((void *)&v16 + 1) = v10 + 1;
      if ((void *)v16 == v10 + 1)
      {
LABEL_7:
        OUBox3d v21 = (void **)&v16;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v21);
      }
      else
      {
        int v12 = (void *)(v16 - 8);
        while (v8[17 * v6 + 8].i64[0] != v12[1])
        {
          if (++v12 == v10) {
            goto LABEL_7;
          }
        }
        OUBox3d v21 = (void **)&v16;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v21);

        if ((int)v15 >= 1)
        {
          uint64_t v13 = 0;
          do
          {
            box3dIou((float32x4_t *)((char *)this->fused_cabinets_.__begin_ + v13), &v8[17 * v6], 0, (uint64_t)&v16);
            if (*((float *)&v16 + 3) > 0.5) {
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v19, &v18, &v18);
            }
            v13 += 272;
          }
          while (v7 != v13);
        }
      }
      int v6 = v18 + 1;
      int v18 = v6;
    }
    while (v6 < v3);
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    LODWORD(v21) = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v19, (int *)&v21)) {
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v16, (long long *)p_other_objects->__begin_ + 17 * (int)v21);
      }
      LODWORD(v21) = v21 + 1;
    }
    while ((int)v21 < v3);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_other_objects->__begin_);
  *(_OWORD *)&this->other_objects_.__begin_ = v16;
  this->other_objects_.__end_cap_.__value_ = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  OUBox3d v21 = (void **)&v16;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v21);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v19);
}

void sub_237C22720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a11;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateWasherCabinet(OU3DKitchenObjectMerger *this)
{
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  p_fused_cabinets = &this->fused_cabinets_;
  int v2 = -252645135 * ((unint64_t)(this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4);
  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v11 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    do
    {
      std::vector<int>::pointer begin = this->other_objects_.__begin_;
      uint64_t v5 = @"Washer";
      uint64_t v14 = 0;
      long long v13 = 0uLL;
      uint64_t v17 = (void **)&v13;
      char v18 = 0;
      int v6 = operator new(8uLL);
      *(void *)&long long v13 = v6;
      *((void *)&v13 + 1) = v6;
      uint64_t v14 = (OU3DKitchenObject *)(v6 + 1);
      unint64_t v7 = v5;
      void *v6 = v7;
      *((void *)&v13 + 1) = v6 + 1;
      if ((void *)v13 == v6 + 1)
      {
LABEL_7:
        uint64_t v17 = (void **)&v13;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v17);
      }
      else
      {
        uint64_t v8 = (void *)(v13 - 8);
        while (*((void *)begin + 34 * v3 + 16) != v8[1])
        {
          if (++v8 == v6) {
            goto LABEL_7;
          }
        }
        uint64_t v17 = (void **)&v13;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v17);

        LODWORD(v17) = 0;
        if (v2 >= 1)
        {
          for (int i = 0; i < v2; LODWORD(v17) = i)
          {
            box3dIou((float32x4_t *)begin + 17 * v3, (float32x4_t *)p_fused_cabinets->__begin_ + 17 * i, 0, (uint64_t)&v13);
            if (*(float *)&v14 > 0.5) {
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v15, (int *)&v17, &v17);
            }
            int i = v17 + 1;
          }
        }
      }
      ++v3;
    }
    while (v3 != v11);
  }
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  LODWORD(v17) = 0;
  if (v2 >= 1)
  {
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v15, (int *)&v17)) {
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v13, (long long *)p_fused_cabinets->__begin_ + 17 * (int)v17);
      }
      LODWORD(v17) = v17 + 1;
    }
    while ((int)v17 < v2);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_fused_cabinets->__begin_);
  *(_OWORD *)&this->fused_cabinets_.__begin_ = v13;
  this->fused_cabinets_.__end_cap_.__value_ = v14;
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  uint64_t v17 = (void **)&v13;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v17);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v15);
}

void sub_237C229BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a13;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::RemoveLargePotentialFPNewCabinets(OU3DKitchenObjectMerger *this)
{
  long long v11 = 0uLL;
  int v12 = 0;
  std::vector<int>::pointer begin = this->new_cabinets_.__begin_;
  end = this->new_cabinets_.__end_;
  for (int i = &this->new_cabinets_; begin != end; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if ((float)(*((float *)begin + 18) - *((float *)begin + 2)) <= 1.2)
    {
      uint64_t v8 = *((void *)&v11 + 1);
      if (*((void *)&v11 + 1) >= (unint64_t)v12) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v5 = this->old_cabinets_.__begin_;
      int v6 = this->old_cabinets_.__end_;
      float v7 = 0.0;
      while (v5 != v6)
      {
        box3dIou((float32x4_t *)v5, (float32x4_t *)begin, 0, (uint64_t)v10);
        float v7 = v7 + *((float *)v10 + 1);
        uint64_t v5 = (OU3DKitchenObject *)((char *)v5 + 272);
      }
      if ((float)(v7 / boxVolume((const box3d *)begin)) < 0.6) {
        continue;
      }
      uint64_t v8 = *((void *)&v11 + 1);
      if (*((void *)&v11 + 1) >= (unint64_t)v12)
      {
LABEL_11:
        uint64_t v9 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v11, (uint64_t)begin);
        goto LABEL_12;
      }
    }
    std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(*((OUBox3d **)&v11 + 1), (uint64_t)begin);
    uint64_t v9 = v8 + 272;
LABEL_12:
    *((void *)&v11 + 1) = v9;
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&i->__begin_);
  *(_OWORD *)&this->new_cabinets_.__begin_ = v11;
  this->new_cabinets_.__end_cap_.__value_ = v12;
  int v12 = 0;
  long long v11 = 0uLL;
  v10[0] = (void **)&v11;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_237C22B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a9 = (void **)&a15;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::Merge(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObjectMerger::RemoveLargePotentialFPNewCabinets(this);
  OU3DKitchenObjectMerger::AlignNewCabinetsExtentsWithOldDetections(this);
  OU3DKitchenObjectMerger::AlignApplianceWithNewCabinets(this);
  OU3DKitchenObjectMerger::AlignStoveWithOven(this);
  OU3DKitchenObjectMerger::AlignSinkWithDishwasher(this);
  OU3DKitchenObjectMerger::AddNonIntersectingOldDetections(this);
  OU3DKitchenObjectMerger::FuseAndCarve(this);
  OU3DKitchenObjectMerger::RemoveDuplicateFusedCabinets(this);
  OU3DKitchenObjectMerger::RemoveDuplicateTableCabinet(this);
  OU3DKitchenObjectMerger::RemoveDuplicateWasherCabinet(this);
  OU3DKitchenObjectMerger::UnifyHeightsAlignObjects(this);
  OU3DKitchenObjectMerger::ComputeGroupIds(this);
  OU3DKitchenObjectMerger::AssignUUIDForFusedObjects(this);
}

void OU3DKitchenObjectMerger::AlignNewCabinetsExtentsWithOldDetections(OU3DKitchenObjectMerger *this)
{
  v209[5] = *(uint64_t **)MEMORY[0x263EF8340];
  if ((int)(-252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4)) < 1) {
    return;
  }
  uint64_t v1 = this;
  uint64_t v2 = 0;
  uint64_t v160 = -252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4);
  char v159 = this;
  do
  {
    std::vector<int>::pointer begin = v1->new_cabinets_.__begin_;
    uint64_t v4 = (char *)begin + 272 * v2;
    v183 = 0;
    uint64_t v184 = 0;
    unint64_t v185 = 0;
    std::__fs::filesystem::directory_entry::_Path __p = 0;
    long long v181 = 0;
    long long v182 = 0;
    int v177 = 0;
    long long v178 = 0;
    long long v179 = 0;
    long long v163 = *((_OWORD *)v4 + 3);
    float32x4_t v164 = *((float32x4_t *)v4 + 1);
    float32x4_t v170 = *((float32x4_t *)v4 + 2);
    float32x2_t v5 = vsub_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v164.f32);
    if ((int)(-252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4)) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = -252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4);
      do
      {
        uint64_t v8 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * v6;
        this = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v8, (float32x4_t *)begin + 17 * v2);
        if (this)
        {
          float32x4_t v165 = *(float32x4_t *)(v8 + 16);
          *(_OWORD *)v167 = *(_OWORD *)(v8 + 32);
          uint64_t v9 = v184;
          if ((unint64_t)v184 >= v185)
          {
            long long v10 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v8);
          }
          else
          {
            std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v8);
            long long v10 = (OUBox3d *)((char *)v9 + 272);
          }
          uint64_t v184 = v10;
          long long v11 = v181;
          if (v181 >= v182)
          {
            long long v13 = (char *)__p;
            uint64_t v14 = (v181 - (unsigned char *)__p) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v182 - (unsigned char *)__p;
            if ((v182 - (unsigned char *)__p) >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v17);
              long long v13 = (char *)__p;
              long long v11 = v181;
            }
            else
            {
              char v18 = 0;
            }
            uint64_t v19 = &v18[4 * v14];
            *(_DWORD *)uint64_t v19 = 2;
            int v12 = v19 + 4;
            while (v11 != v13)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            std::__fs::filesystem::directory_entry::_Path __p = v19;
            long long v181 = v12;
            long long v182 = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)long long v181 = 2;
            int v12 = v11 + 4;
          }
          long long v181 = v12;
          float32x4_t v21 = vsubq_f32(v170, *(float32x4_t *)v167);
          float v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
          if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v21.f32)) >= 0.0) {
            float v23 = v22;
          }
          else {
            float v23 = -v22;
          }
          id v24 = v178;
          if (v178 >= (float *)v179)
          {
            uint64_t v26 = (float *)v177;
            uint64_t v27 = ((char *)v178 - (unsigned char *)v177) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v179 - (unsigned char *)v177;
            if ((v179 - (unsigned char *)v177) >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              id v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v30);
              uint64_t v26 = (float *)v177;
              id v24 = v178;
            }
            else
            {
              id v31 = 0;
            }
            long long v32 = (float *)&v31[4 * v27];
            float *v32 = v23;
            unint64_t v25 = v32 + 1;
            while (v24 != v26)
            {
              int v33 = *((_DWORD *)v24-- - 1);
              *((_DWORD *)v32-- - 1) = v33;
            }
            int v177 = v32;
            long long v178 = v25;
            long long v179 = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *long long v178 = v23;
            unint64_t v25 = v24 + 1;
          }
          long long v178 = v25;
          unint64_t v34 = v184;
          if ((unint64_t)v184 >= v185)
          {
            this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v8);
          }
          else
          {
            std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v8);
            this = (OU3DKitchenObjectMerger *)&v34[2].var7;
          }
          uint64_t v184 = (OUBox3d *)this;
          int64_t v35 = (OU3DKitchenObjectMerger *)v181;
          if (v181 >= v182)
          {
            this = (OU3DKitchenObjectMerger *)__p;
            uint64_t v37 = (v181 - (unsigned char *)__p) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v182 - (unsigned char *)__p;
            if ((v182 - (unsigned char *)__p) >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              std::vector<int>::pointer v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v40);
              this = (OU3DKitchenObjectMerger *)__p;
              int64_t v35 = (OU3DKitchenObjectMerger *)v181;
            }
            else
            {
              std::vector<int>::pointer v41 = 0;
            }
            unsigned int v42 = (float *)&v41[4 * v37];
            *(_DWORD *)unsigned int v42 = 1;
            unint64_t v36 = (char *)(v42 + 1);
            while (v35 != this)
            {
              float ceil_plane_height = v35[-1].ceil_plane_height_;
              int64_t v35 = (OU3DKitchenObjectMerger *)((char *)v35 - 4);
              *--unsigned int v42 = ceil_plane_height;
            }
            std::__fs::filesystem::directory_entry::_Path __p = v42;
            long long v181 = v36;
            long long v182 = &v41[4 * v40];
            if (this) {
              operator delete(this);
            }
          }
          else
          {
            *(_DWORD *)long long v181 = 1;
            unint64_t v36 = (char *)&v35->old_cabinets_.__begin_ + 4;
          }
          long long v181 = v36;
          float32x4_t v44 = vsubq_f32(v170, v165);
          float v45 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v44, v44)));
          if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v44.f32)) >= 0.0) {
            float v46 = v45;
          }
          else {
            float v46 = -v45;
          }
          uint64_t v47 = (OU3DKitchenObjectMerger *)v178;
          if (v178 >= (float *)v179)
          {
            this = (OU3DKitchenObjectMerger *)v177;
            uint64_t v49 = ((char *)v178 - (unsigned char *)v177) >> 2;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = v179 - (unsigned char *)v177;
            if ((v179 - (unsigned char *)v177) >> 1 > v50) {
              unint64_t v50 = v51 >> 1;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v52);
              this = (OU3DKitchenObjectMerger *)v177;
              uint64_t v47 = (OU3DKitchenObjectMerger *)v178;
            }
            else
            {
              unint64_t v53 = 0;
            }
            long long v54 = (float *)&v53[4 * v49];
            *long long v54 = v46;
            int v48 = v54 + 1;
            while (v47 != this)
            {
              float v55 = v47[-1].ceil_plane_height_;
              uint64_t v47 = (OU3DKitchenObjectMerger *)((char *)v47 - 4);
              *--long long v54 = v55;
            }
            int v177 = v54;
            long long v178 = v48;
            long long v179 = &v53[4 * v52];
            if (this) {
              operator delete(this);
            }
          }
          else
          {
            *long long v178 = v46;
            int v48 = (float *)&v47->old_cabinets_.__begin_ + 1;
          }
          long long v178 = v48;
        }
        ++v6;
      }
      while (v6 != v7);
    }
    if ((int)(-252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4)) >= 1)
    {
      uint64_t v56 = 0;
      uint64_t v57 = -252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4);
      do
      {
        uint64_t v58 = (uint64_t)v1->other_objects_.__begin_ + 272 * v56;
        LODWORD(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v58, (float32x4_t *)begin + 17 * v2);
        if (this)
        {
          *(_OWORD *)uint64_t v168 = *(_OWORD *)(v58 + 16);
          float32x4_t v59 = vsubq_f32(*(float32x4_t *)v58, *(float32x4_t *)v168);
          float32x4_t v60 = vmulq_f32(v59, v59);
          float32x4_t v61 = vsubq_f32(*(float32x4_t *)v4, *((float32x4_t *)v4 + 1));
          float32x4_t v62 = vmulq_f32(v61, v61);
          if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0])) < 0.3)
          {
            float32x4_t v166 = *(float32x4_t *)(v58 + 32);
            uint64_t v63 = v184;
            if ((unint64_t)v184 >= v185)
            {
              int v64 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v58);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v58);
              int v64 = (OUBox3d *)((char *)v63 + 272);
            }
            uint64_t v184 = v64;
            uint64_t v65 = v181;
            if (v181 >= v182)
            {
              uint64_t v67 = (char *)__p;
              uint64_t v68 = (v181 - (unsigned char *)__p) >> 2;
              unint64_t v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v70 = v182 - (unsigned char *)__p;
              if ((v182 - (unsigned char *)__p) >> 1 > v69) {
                unint64_t v69 = v70 >> 1;
              }
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v71);
                uint64_t v67 = (char *)__p;
                uint64_t v65 = v181;
              }
              else
              {
                uint64_t v72 = 0;
              }
              unint64_t v73 = &v72[4 * v68];
              *(_DWORD *)unint64_t v73 = 2;
              int v66 = v73 + 4;
              while (v65 != v67)
              {
                int v74 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v73 - 1) = v74;
                v73 -= 4;
              }
              std::__fs::filesystem::directory_entry::_Path __p = v73;
              long long v181 = v66;
              long long v182 = &v72[4 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *(_DWORD *)long long v181 = 2;
              int v66 = v65 + 4;
            }
            long long v181 = v66;
            float32x4_t v75 = vsubq_f32(v170, v166);
            float v76 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v75, v75)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v75.f32)) >= 0.0) {
              float v77 = v76;
            }
            else {
              float v77 = -v76;
            }
            float v78 = v178;
            if (v178 >= (float *)v179)
            {
              v80 = (float *)v177;
              uint64_t v81 = ((char *)v178 - (unsigned char *)v177) >> 2;
              unint64_t v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v83 = v179 - (unsigned char *)v177;
              if ((v179 - (unsigned char *)v177) >> 1 > v82) {
                unint64_t v82 = v83 >> 1;
              }
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v82;
              }
              if (v84)
              {
                uint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v84);
                v80 = (float *)v177;
                float v78 = v178;
              }
              else
              {
                uint64_t v85 = 0;
              }
              unint64_t v86 = (float *)&v85[4 * v81];
              *unint64_t v86 = v77;
              float v79 = v86 + 1;
              while (v78 != v80)
              {
                int v87 = *((_DWORD *)v78-- - 1);
                *((_DWORD *)v86-- - 1) = v87;
              }
              int v177 = v86;
              long long v178 = v79;
              long long v179 = &v85[4 * v84];
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *long long v178 = v77;
              float v79 = v78 + 1;
            }
            long long v178 = v79;
            __n128 v88 = v184;
            if ((unint64_t)v184 >= v185)
            {
              this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v58);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v58);
              this = (OU3DKitchenObjectMerger *)&v88[2].var7;
            }
            uint64_t v184 = (OUBox3d *)this;
            int v89 = (OU3DKitchenObjectMerger *)v181;
            if (v181 >= v182)
            {
              this = (OU3DKitchenObjectMerger *)__p;
              uint64_t v91 = (v181 - (unsigned char *)__p) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v93 = v182 - (unsigned char *)__p;
              if ((v182 - (unsigned char *)__p) >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v94);
                this = (OU3DKitchenObjectMerger *)__p;
                int v89 = (OU3DKitchenObjectMerger *)v181;
              }
              else
              {
                uint64_t v95 = 0;
              }
              unint64_t v96 = (float *)&v95[4 * v91];
              *(_DWORD *)unint64_t v96 = 1;
              uint64_t v90 = (char *)(v96 + 1);
              while (v89 != this)
              {
                float v97 = v89[-1].ceil_plane_height_;
                int v89 = (OU3DKitchenObjectMerger *)((char *)v89 - 4);
                *--unint64_t v96 = v97;
              }
              std::__fs::filesystem::directory_entry::_Path __p = v96;
              long long v181 = v90;
              long long v182 = &v95[4 * v94];
              if (this) {
                operator delete(this);
              }
            }
            else
            {
              *(_DWORD *)long long v181 = 1;
              uint64_t v90 = (char *)&v89->old_cabinets_.__begin_ + 4;
            }
            long long v181 = v90;
            float32x4_t v98 = vsubq_f32(v170, *(float32x4_t *)v168);
            float v99 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v98, v98)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v98.f32)) >= 0.0) {
              float v100 = v99;
            }
            else {
              float v100 = -v99;
            }
            float v101 = (OU3DKitchenObjectMerger *)v178;
            if (v178 >= (float *)v179)
            {
              this = (OU3DKitchenObjectMerger *)v177;
              uint64_t v103 = ((char *)v178 - (unsigned char *)v177) >> 2;
              unint64_t v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v105 = v179 - (unsigned char *)v177;
              if ((v179 - (unsigned char *)v177) >> 1 > v104) {
                unint64_t v104 = v105 >> 1;
              }
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v104;
              }
              if (v106)
              {
                uint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v106);
                this = (OU3DKitchenObjectMerger *)v177;
                float v101 = (OU3DKitchenObjectMerger *)v178;
              }
              else
              {
                uint64_t v107 = 0;
              }
              unint64_t v108 = (float *)&v107[4 * v103];
              float *v108 = v100;
              float v102 = v108 + 1;
              while (v101 != this)
              {
                float v109 = v101[-1].ceil_plane_height_;
                float v101 = (OU3DKitchenObjectMerger *)((char *)v101 - 4);
                *--unint64_t v108 = v109;
              }
              int v177 = v108;
              long long v178 = v102;
              long long v179 = &v107[4 * v106];
              if (this) {
                operator delete(this);
              }
            }
            else
            {
              *long long v178 = v100;
              float v102 = (float *)&v101->old_cabinets_.__begin_ + 1;
            }
            long long v178 = v102;
          }
        }
        ++v56;
      }
      while (v56 != v57);
    }
    if (v183 == v184) {
      goto LABEL_221;
    }
    long long v175 = 0uLL;
    id var3 = 0;
    OU3DKitchenObjectMerger::SortBasedOnDistance(&v177, (uint64_t *)&v183, &__p, (uint64_t)&v199);
    std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v175);
    long long v175 = *(_OWORD *)&v199.var1;
    var4 = v199.var4;
    id var3 = v199.var3;
    memset(&v199, 0, 48);
    v188.id var1 = &v199;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
    std::__sort<std::__less<float,float> &,float *>();
    OUBox3d::OUBox3d(&v199, (const OUBox3d *)((char *)begin + 272 * v2));
    float v111 = (char *)begin + 272 * v2;
    uint64_t v112 = *((void *)v111 + 28);
    v111 += 224;
    int v208 = *((_DWORD *)v111 + 2);
    uint64_t v207 = v112;
    std::set<int>::set[abi:ne180100]((uint64_t *)v209, (uint64_t)(v111 + 16));
    v169 = var4;
    OUBox3d::OUBox3d(&v188, (const OUBox3d *)((char *)begin + 272 * v2));
    uint64_t v113 = *(void *)v111;
    int v197 = *((_DWORD *)v111 + 2);
    uint64_t v196 = v113;
    std::set<int>::set[abi:ne180100]((uint64_t *)v198, (uint64_t)(v111 + 16));
    if ((int)(-252645135 * ((uint64_t)(*((void *)&v175 + 1) - v175) >> 4)) < 1) {
      goto LABEL_210;
    }
    uint64_t v114 = 0;
    uint64_t v115 = -252645135 * ((uint64_t)(*((void *)&v175 + 1) - v175) >> 4);
    float v116 = sqrtf(vaddv_f32(vmul_f32(v5, v5)));
    do
    {
      uint64_t v117 = v175;
      uint64_t v118 = @"Cabinet";
      long long v174 = 0;
      long long v173 = 0uLL;
      uint64_t v186 = &v173;
      LOBYTE(v187) = 0;
      BOOL v119 = operator new(8uLL);
      uint64_t v120 = v117 + 272 * v114;
      *(void *)&long long v173 = v119;
      *((void *)&v173 + 1) = v119;
      long long v174 = v119 + 1;
      simd_float4x4 v121 = v118;
      void *v119 = v121;
      *((void *)&v173 + 1) = v119 + 1;
      if ((void *)v173 == v119 + 1) {
        goto LABEL_177;
      }
      float32x2_t v122 = (void *)(v173 - 8);
      while (*(void *)(v120 + 128) != v122[1])
      {
        if (++v122 == v119) {
          goto LABEL_177;
        }
      }
      if (v169[v114] != 2)
      {
LABEL_177:
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      }
      else
      {
        BOOL v123 = *((float *)v177 + v114) < 0.0;
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (v123) {
          goto LABEL_189;
        }
      }
      if (*((float *)v177 + v114) > 0.0 && v169[v114] == 2)
      {
        float32x2_t v124 = v121;
        long long v174 = 0;
        long long v173 = 0uLL;
        uint64_t v186 = &v173;
        LOBYTE(v187) = 0;
        float32x4_t v125 = operator new(8uLL);
        *(void *)&long long v173 = v125;
        *((void *)&v173 + 1) = v125;
        long long v174 = v125 + 1;
        uint64_t v126 = v124;
        *float32x4_t v125 = v126;
        *((void *)&v173 + 1) = v125 + 1;
        if ((void *)v173 == v125 + 1)
        {
LABEL_184:
          float32x4_t v128 = vsubq_f32(*(float32x4_t *)(v120 + 16), v170);
          BOOL v129 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v128, v128))) < v116;
          uint64_t v186 = &v173;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

          if (!v129) {
            goto LABEL_188;
          }
        }
        else
        {
          uint64_t v127 = (void *)(v173 - 8);
          while (*(void *)(v120 + 128) != v127[1])
          {
            if (++v127 == v125) {
              goto LABEL_184;
            }
          }
          uint64_t v186 = &v173;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
        }
        float32x4_t v130 = vsubq_f32(*(float32x4_t *)(v120 + 32), v170);
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v130, v130))) < 1.0)
        {
          OUBox3d::operator=((uint64_t)&v199, (long long *)(v117 + 272 * v114));
          uint64_t v155 = v117 + 272 * v114;
          uint64_t v156 = *(void *)(v155 + 224);
          int v208 = *(_DWORD *)(v155 + 232);
          uint64_t v207 = v156;
          if (&v199 != (OUBox3d *)v120) {
            std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v209, *(int **)(v117 + 272 * v114 + 240), (int *)(v117 + 272 * v114 + 248));
          }
          goto LABEL_189;
        }
      }
LABEL_188:
      ++v114;
    }
    while (v114 != v115);
    while (1)
    {
LABEL_189:
      uint64_t v131 = v175;
      v132 = v121;
      long long v174 = 0;
      long long v173 = 0uLL;
      uint64_t v186 = &v173;
      LOBYTE(v187) = 0;
      v133 = operator new(8uLL);
      uint64_t v134 = (v115 - 1);
      uint64_t v135 = v131 + 272 * v134;
      *(void *)&long long v173 = v133;
      *((void *)&v173 + 1) = v133;
      long long v174 = v133 + 1;
      unint64_t v136 = v132;
      void *v133 = v136;
      *((void *)&v173 + 1) = v133 + 1;
      if ((void *)v173 == v133 + 1) {
        goto LABEL_197;
      }
      uint64_t v137 = (void *)(v173 - 8);
      while (*(void *)(v135 + 128) != v137[1])
      {
        if (++v137 == v133) {
          goto LABEL_197;
        }
      }
      if (v169[v134] != 1)
      {
LABEL_197:
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      }
      else
      {
        BOOL v138 = *((float *)v177 + v134) > v116;
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (v138) {
          goto LABEL_210;
        }
      }
      if (*((float *)v177 + v134) >= v116 || v169[v134] != 1) {
        goto LABEL_208;
      }
      uint64_t v139 = v136;
      long long v174 = 0;
      long long v173 = 0uLL;
      uint64_t v186 = &v173;
      LOBYTE(v187) = 0;
      char v140 = operator new(8uLL);
      *(void *)&long long v173 = v140;
      *((void *)&v173 + 1) = v140;
      long long v174 = v140 + 1;
      BOOL v141 = v139;
      *char v140 = v141;
      *((void *)&v173 + 1) = v140 + 1;
      if ((void *)v173 == v140 + 1)
      {
LABEL_204:
        float32x4_t v143 = vsubq_f32(*(float32x4_t *)(v135 + 32), v164);
        BOOL v144 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v143, v143))) < v116;
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (!v144) {
          goto LABEL_208;
        }
      }
      else
      {
        char v142 = (void *)(v173 - 8);
        while (*(void *)(v135 + 128) != v142[1])
        {
          if (++v142 == v140) {
            goto LABEL_204;
          }
        }
        uint64_t v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      }
      float32x4_t v145 = vsubq_f32(*(float32x4_t *)(v135 + 16), v164);
      if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v145, v145))) < 1.0) {
        break;
      }
LABEL_208:
      if (v115-- <= 1) {
        goto LABEL_210;
      }
    }
    OUBox3d::operator=((uint64_t)&v188, (long long *)(v131 + 272 * v134));
    uint64_t v157 = v131 + 272 * v134;
    uint64_t v158 = *(void *)(v157 + 224);
    int v197 = *(_DWORD *)(v157 + 232);
    uint64_t v196 = v158;
    if (&v188 != (OUBox3d *)v135) {
      std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v198, *(int **)(v131 + 272 * v134 + 240), (int *)(v131 + 272 * v134 + 248));
    }
LABEL_210:
    *(void *)&long long v147 = v199.var5.var0;
    id var1 = v188.var1;
    id v162 = v188.var3;
    float32x2_t v172 = 0;
    *((void *)&v147 + 1) = v199.var5.var2.var0;
    long long v173 = v147;
    uint64_t v186 = (long long *)v170.i64[0];
    uint64_t v187 = v164.i64[0];
    OU::intersect((int32x2_t *)&v173, (int32x2_t *)&v186, &v172);
    float32x2_t v148 = v172;
    float32x2_t v171 = 0;
    *(void *)&long long v149 = v162;
    *((void *)&v149 + 1) = var1;
    long long v173 = v149;
    uint64_t v186 = (long long *)v170.i64[0];
    uint64_t v187 = v164.i64[0];
    OU::intersect((int32x2_t *)&v173, (int32x2_t *)&v186, &v171);
    float32x2_t v150 = vsub_f32(*(float32x2_t *)&v163, *(float32x2_t *)v170.f32);
    float32x2_t v151 = vadd_f32(v150, v148);
    float32x2_t v152 = v171;
    float32x2_t v153 = v172;
    float32x2_t v154 = vadd_f32(v150, v171);
    *((float32x2_t *)v4 + 4) = v172;
    *((float32x2_t *)v4 + 6) = v151;
    *((float32x2_t *)v4 + 2) = v152;
    *(float32x2_t *)uint64_t v4 = v154;
    *((float32x2_t *)v4 + 12) = v153;
    *((float32x2_t *)v4 + 14) = v151;
    *((float32x2_t *)v4 + 10) = v152;
    *((float32x2_t *)v4 + 8) = v154;
    std::__tree<int>::destroy((uint64_t)v198, v198[1]);

    if (v194) {
      operator delete(v194);
    }
    if (v192)
    {
      long long v193 = v192;
      operator delete(v192);
    }

    std::__tree<int>::destroy((uint64_t)v209, v209[1]);
    if (v205) {
      operator delete(v205);
    }
    if (v203)
    {
      uint64_t v204 = v203;
      operator delete(v203);
    }

    if (v169) {
      operator delete(v169);
    }
    v199.id var1 = &v175;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    uint64_t v1 = v159;
LABEL_221:
    if (v177)
    {
      long long v178 = (float *)v177;
      operator delete(v177);
    }
    if (__p)
    {
      long long v181 = (char *)__p;
      operator delete(__p);
    }
    v199.id var1 = &v183;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    ++v2;
  }
  while (v2 != v160);
}

void sub_237C23C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (__p) {
    operator delete(__p);
  }
  STACK[0x280] = (unint64_t)&a41;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  STACK[0x280] = (unint64_t)&a50;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::UnifyHeightsAlignObjects(OU3DKitchenObjectMerger *this)
{
  std::vector<int>::pointer begin = this->fused_cabinets_.__begin_;
  for (int i = this->fused_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if (vabds_f32(*((float *)begin + 2), this->ground_plane_height_) < 0.3)
    {
      for (uint64_t j = 8; j != 72; j += 16)
        *(float *)((char *)begin + j) = this->ground_plane_height_;
    }
    if (*((float *)begin + 18) > this->ceil_plane_height_)
    {
      for (uint64_t k = 72; k != 136; k += 16)
        *(float *)((char *)begin + k) = this->ceil_plane_height_;
    }
  }
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v22 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    uint64_t v9 = 272 * v6;
    uint64_t v10 = 8;
    uint64_t v11 = 72;
    do
    {
      float v23 = this->other_objects_.__begin_;
      int v12 = (float32x4_t *)((char *)v23 + 272 * v8);
      float v13 = v12->f32[2];
      float v14 = v12[4].f32[2];
      unint64_t v15 = this->fused_cabinets_.__begin_;
      end = this->fused_cabinets_.__end_;
      while (1)
      {
        if (v15 == end)
        {
          int v17 = 1;
          goto LABEL_18;
        }
        box3dIou(v12, (float32x4_t *)v15, 0, (uint64_t)v24);
        if (v25 > 0.1 && *((float *)v15 + 18) <= v13) {
          break;
        }
        unint64_t v15 = (OU3DKitchenObject *)((char *)v15 + 272);
      }
      int v17 = 0;
LABEL_18:
      uint64_t v18 = 0;
      while (1)
      {
        if (v7 != v18)
        {
          uint64_t v19 = (float32x4_t *)((char *)this->other_objects_.__begin_ + v18);
          box3dIou(v12, v19, 0, (uint64_t)v24);
          if (v25 > 0.1 && v19[4].f32[2] <= v13) {
            break;
          }
        }
        v18 += 272;
        if (v9 == v18)
        {
          if (v17 && vabds_f32(v13, this->ground_plane_height_) < 0.3)
          {
            for (uint64_t m = 0; m != 64; m += 16)
              *(float *)((char *)v23 + v10 + m) = this->ground_plane_height_;
          }
          break;
        }
      }
      if (v14 > this->ceil_plane_height_)
      {
        for (uint64_t n = 0; n != 64; n += 16)
          *(float *)((char *)v23 + v11 + n) = this->ceil_plane_height_;
      }
      ++v8;
      v7 += 272;
      v10 += 272;
      v11 += 272;
    }
    while (v8 != v22);
  }
}

void OU3DKitchenObjectMerger::ComputeGroupIds(OU3DKitchenObjectMerger *this)
{
  v55[0] = 0;
  v55[1] = 0;
  v53[1] = 0;
  long long v54 = (uint64_t *)v55;
  unint64_t v52 = (uint64_t *)v53;
  v53[0] = 0;
  std::vector<int>::pointer begin = this->other_objects_.__begin_;
  end = this->other_objects_.__end_;
  if (begin != end)
  {
    uint64_t v4 = (int **)((char *)begin + 240);
    float32x2_t v5 = (int *)((char *)begin + 248);
    do
    {
      *(void *)&v50[0] = v4 - 1;
      unint64_t v6 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v4 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)v50)+ 5;
      if (v4 != (int **)v6) {
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, *v4, v5);
      }
      uint64_t v7 = (OU3DKitchenObject *)(v4 + 4);
      v4 += 34;
      v5 += 68;
    }
    while (v7 != end);
  }
  uint64_t v8 = this->fused_cabinets_.__begin_;
  for (int i = this->fused_cabinets_.__end_; v8 != i; v8 = (OU3DKitchenObject *)((char *)v8 + 272))
  {
    *(void *)&v50[0] = (char *)v8 + 232;
    uint64_t v10 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v8 + 58, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
    std::__tree<int>::__assign_unique<int const*>(v10 + 5, 0, 0);
  }
  uint64_t v11 = v54;
  if (v54 != (uint64_t *)v55)
  {
    do
    {
      int v12 = (uint64_t *)v11[5];
      if (v12 != v11 + 6)
      {
        do
        {
          *(void *)&v50[0] = (char *)v12 + 28;
          float v13 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v52, (int *)v12 + 7, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(v13 + 5, (int *)v11 + 8, (_DWORD *)v11 + 8);
          float v14 = (uint64_t *)v12[1];
          if (v14)
          {
            do
            {
              unint64_t v15 = v14;
              float v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              unint64_t v15 = (uint64_t *)v12[2];
              BOOL v16 = *v15 == (void)v12;
              int v12 = v15;
            }
            while (!v16);
          }
          int v12 = v15;
        }
        while (v15 != v11 + 6);
      }
      int v17 = (uint64_t *)v11[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          int v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (uint64_t *)v11[2];
          BOOL v16 = *v18 == (void)v11;
          uint64_t v11 = v18;
        }
        while (!v16);
      }
      uint64_t v11 = v18;
    }
    while (v18 != (uint64_t *)v55);
  }
  uint64_t v19 = v52;
  if (v52 != (uint64_t *)v53)
  {
    do
    {
      *(void *)&v50[0] = v19 + 4;
      int v20 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v19 + 8, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
      if (v19 != (uint64_t *)v20) {
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v20 + 5, (int *)v19[5], (int *)v19 + 12);
      }
      float32x4_t v21 = (uint64_t *)v19[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          float32x4_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (uint64_t *)v19[2];
          BOOL v16 = *v22 == (void)v19;
          uint64_t v19 = v22;
        }
        while (!v16);
      }
      uint64_t v19 = v22;
    }
    while (v22 != (uint64_t *)v53);
  }
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  float v23 = v54;
  if (v54 != (uint64_t *)v55)
  {
    int v24 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v50, (int *)v23 + 8))
      {
        v49[0] = 0;
        v49[1] = 0;
        int v48 = (uint64_t *)v49;
        float v25 = v48;
        if (v48 != (uint64_t *)v49)
        {
          do
          {
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v50, (int *)v25 + 7, (_DWORD *)v25 + 7);
            uint64_t v26 = (uint64_t *)v25[1];
            if (v26)
            {
              do
              {
                uint64_t v27 = v26;
                uint64_t v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                uint64_t v27 = (uint64_t *)v25[2];
                BOOL v16 = *v27 == (void)v25;
                float v25 = v27;
              }
              while (!v16);
            }
            float v25 = v27;
          }
          while (v27 != (uint64_t *)v49);
        }
        unint64_t v28 = this->fused_cabinets_.__begin_;
        uint64_t v29 = this->fused_cabinets_.__end_;
        while (v28 != v29)
        {
          unint64_t v30 = v49[0];
          if (v49[0])
          {
            int v31 = *((_DWORD *)v28 + 58);
            long long v32 = v49;
            do
            {
              int v33 = v30;
              unint64_t v34 = v32;
              int v35 = *((_DWORD *)v30 + 7);
              unint64_t v36 = v30 + 1;
              if (v35 >= v31)
              {
                unint64_t v36 = v33;
                long long v32 = (void **)v33;
              }
              unint64_t v30 = (void *)*v36;
            }
            while (v30);
            if (v32 != v49)
            {
              if (v35 < v31) {
                int v33 = v34;
              }
              if (v31 >= *((_DWORD *)v33 + 7))
              {
                *((_DWORD *)v28 + 57) = v24;
                if ((uint64_t **)((char *)v28 + 240) != &v48) {
                  std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v28 + 30, (int *)v48, (int *)v49);
                }
                std::__tree<int>::__erase_unique<int>((uint64_t)v28 + 240, (int *)v28 + 58);
              }
            }
          }
          unint64_t v28 = (OU3DKitchenObject *)((char *)v28 + 272);
        }
        uint64_t v37 = this->other_objects_.__begin_;
        unint64_t v38 = this->other_objects_.__end_;
        while (v37 != v38)
        {
          uint64_t v39 = v49[0];
          if (v49[0])
          {
            int v40 = *((_DWORD *)v37 + 58);
            std::vector<int>::pointer v41 = v49;
            do
            {
              unsigned int v42 = v39;
              uint64_t v43 = v41;
              int v44 = *((_DWORD *)v39 + 7);
              float v45 = v39 + 1;
              if (v44 >= v40)
              {
                float v45 = v42;
                std::vector<int>::pointer v41 = (void **)v42;
              }
              uint64_t v39 = (void *)*v45;
            }
            while (v39);
            if (v41 != v49)
            {
              if (v44 < v40) {
                unsigned int v42 = v43;
              }
              if (v40 >= *((_DWORD *)v42 + 7))
              {
                *((_DWORD *)v37 + 57) = v24;
                if ((uint64_t **)((char *)v37 + 240) != &v48) {
                  std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v37 + 30, (int *)v48, (int *)v49);
                }
                std::__tree<int>::__erase_unique<int>((uint64_t)v37 + 240, (int *)v37 + 58);
              }
            }
          }
          uint64_t v37 = (OU3DKitchenObject *)((char *)v37 + 272);
        }
        ++v24;
        std::__tree<int>::destroy((uint64_t)&v48, v49[0]);
      }
      float v46 = (uint64_t *)v23[1];
      if (v46)
      {
        do
        {
          uint64_t v47 = v46;
          float v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          uint64_t v47 = (uint64_t *)v23[2];
          BOOL v16 = *v47 == (void)v23;
          float v23 = v47;
        }
        while (!v16);
      }
      float v23 = v47;
    }
    while (v47 != (uint64_t *)v55);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&v52, v53[0]);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&v54, v55[0]);
}

void sub_237C24538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23)
{
}

void OU3DKitchenObjectMerger::AssignUUIDForFusedObjects(OU3DKitchenObjectMerger *this)
{
  std::vector<int>::pointer begin = this->fused_cabinets_.__begin_;
  for (int i = this->fused_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    uint64_t v3 = [MEMORY[0x263F08C38] UUID];
    uint64_t v4 = (void *)*((void *)begin + 18);
    *((void *)begin + 18) = v3;
  }
}

void OU3DKitchenObjectMerger::SetDetectionAndPointCloud(uint64_t a1, const OUBox3d **a2, const OUBox3d **a3, void *a4)
{
  float v25 = a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  OU3DKitchenObjectMerger::Reset((OU3DKitchenObjectMerger *)a1);
  *(float *)(a1 + 96) = OU3DKitchenObjectMerger::ComputePlaneHeight(v7, a4);
  *(float *)(a1 + 100) = OU3DKitchenObjectMerger::ComputePlaneHeight(v8, a4);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
    int v11 = 0;
  }
  else
  {
    int v11 = 0;
    do
    {
      if (objc_msgSend(v9[1].var6.var0, "isEqualToString:", @"online", v25))
      {
        char v12 = vabds_f32(v9->var2, *(float *)(a1 + 96)) < 0.3;
        v33[0] = 0;
        v33[1] = 0;
        long long v32 = v33;
        OU3DKitchenObject::OU3DKitchenObject((uint64_t)v36, v9, v12, -1, v11, (uint64_t)&v32);
        std::__tree<int>::destroy((uint64_t)&v32, v33[0]);
        float v13 = @"Cabinet";
        unint64_t v30 = 0;
        int v31 = 0;
        uint64_t v29 = 0;
        unint64_t v34 = (void **)&v29;
        char v35 = 0;
        float v14 = operator new(8uLL);
        uint64_t v29 = v14;
        unint64_t v30 = v14;
        int v31 = v14 + 1;
        unint64_t v15 = v13;
        void *v14 = v15;
        unint64_t v30 = v14 + 1;
        if (v29 == v14 + 1)
        {
LABEL_8:
          unint64_t v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)(a1 + 48), v36);
        }
        else
        {
          BOOL v16 = v29 - 1;
          while (v9[1].var5.var0 != (float *)v16[1])
          {
            if (++v16 == v14) {
              goto LABEL_8;
            }
          }
          unint64_t v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)a1, v36);
        }
        std::__tree<int>::destroy((uint64_t)&v44, v45);

        if (__p) {
          operator delete(__p);
        }
        if (v40)
        {
          std::vector<int>::pointer v41 = v40;
          operator delete(v40);
        }

        ++v11;
      }
      uint64_t v9 = (const OUBox3d *)((char *)v9 + 224);
    }
    while (v9 != v10);
  }
  int v17 = *v25;
  uint64_t v18 = v25[1];
  if (*v25 != v18)
  {
    uint64_t v26 = (uint64_t *)(a1 + 24);
    do
    {
      if (objc_msgSend(v17[1].var6.var0, "isEqualToString:", @"offline", v26))
      {
        char v19 = vabds_f32(v17->var2, *(float *)(a1 + 96)) < 0.3;
        v28[0] = 0;
        v28[1] = 0;
        uint64_t v27 = v28;
        OU3DKitchenObject::OU3DKitchenObject((uint64_t)v36, v17, v19, -1, v11, (uint64_t)&v27);
        std::__tree<int>::destroy((uint64_t)&v27, v28[0]);
        int v20 = @"Cabinet";
        unint64_t v30 = 0;
        int v31 = 0;
        uint64_t v29 = 0;
        unint64_t v34 = (void **)&v29;
        char v35 = 0;
        float32x4_t v21 = operator new(8uLL);
        uint64_t v29 = v21;
        unint64_t v30 = v21;
        int v31 = v21 + 1;
        uint64_t v22 = v20;
        void *v21 = v22;
        unint64_t v30 = v21 + 1;
        if (v29 == v21 + 1)
        {
LABEL_25:
          unint64_t v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          int v24 = (uint64_t *)(a1 + 48);
        }
        else
        {
          float v23 = v29 - 1;
          while (v17[1].var5.var0 != (float *)v23[1])
          {
            if (++v23 == v21) {
              goto LABEL_25;
            }
          }
          unint64_t v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          int v24 = v26;
        }
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100](v24, v36);
        std::__tree<int>::destroy((uint64_t)&v44, v45);

        if (__p) {
          operator delete(__p);
        }
        if (v40)
        {
          std::vector<int>::pointer v41 = v40;
          operator delete(v40);
        }

        ++v11;
      }
      int v17 = (const OUBox3d *)((char *)v17 + 224);
    }
    while (v17 != v18);
  }
}

void sub_237C249F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo::~SortInfo(uint64_t a1)
{
  std::__tree<int>::destroy(a1 + 256, *(void **)(a1 + 264));

  uint64_t v2 = *(void **)(a1 + 200);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }

  return a1;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    end = this->__end_;
    char v12 = v7;
    if (end != this->__begin_)
    {
      char v12 = v7;
      do
      {
        int v13 = *--end;
        *--char v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void **std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 304;
        std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OU3DKitchenObjectMerger::GetOutput(OU3DKitchenObjectMerger *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<OUBox3d>::reserve(a2, 0xF0F0F0F0F0F0F0F1 * ((this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4)- 0xF0F0F0F0F0F0F0FLL * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4));
  std::vector<int>::pointer begin = this->other_objects_.__begin_;
  end = this->other_objects_.__end_;
  if (begin != end)
  {
    unint64_t v6 = (OUBox3d *)a2[1];
    do
    {
      if ((unint64_t)v6 >= a2[2])
      {
        unint64_t v6 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a2, (const OUBox3d *)begin);
      }
      else
      {
        OUBox3d::OUBox3d(v6, (const OUBox3d *)begin);
        unint64_t v6 = (OUBox3d *)((char *)v6 + 224);
        a2[1] = (uint64_t)v6;
      }
      a2[1] = (uint64_t)v6;
      std::vector<int>::pointer begin = (OU3DKitchenObject *)((char *)begin + 272);
    }
    while (begin != end);
  }
  uint64_t v7 = this->fused_cabinets_.__begin_;
  uint64_t v8 = this->fused_cabinets_.__end_;
  if (v7 != v8)
  {
    uint64_t v9 = (OUBox3d *)a2[1];
    do
    {
      if ((unint64_t)v9 >= a2[2])
      {
        uint64_t v9 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a2, (const OUBox3d *)v7);
      }
      else
      {
        OUBox3d::OUBox3d(v9, (const OUBox3d *)v7);
        uint64_t v9 = (OUBox3d *)((char *)v9 + 224);
        a2[1] = (uint64_t)v9;
      }
      a2[1] = (uint64_t)v9;
      uint64_t v7 = (OU3DKitchenObject *)((char *)v7 + 272);
    }
    while (v7 != v8);
  }
}

void sub_237C24CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OUBox3d>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 224 * v6;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_237C24DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *anonymous namespace'::Dfs(uint64_t *result, int a2, uint64_t **a3)
{
  int v17 = a2;
  if (a3)
  {
    uint64_t v4 = (uint64_t)result;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>(a3, &v17, &v17);
    uint64_t result = std::map<int,std::set<int>>::at(v4, &v17);
    uint64_t v5 = result + 1;
    uint64_t v6 = (void *)*result;
    if ((uint64_t *)*result != result + 1)
    {
      uint64_t v7 = a3 + 1;
      do
      {
        uint64_t v8 = *v7;
        uint64_t v9 = *((unsigned int *)v6 + 7);
        if (!*v7) {
          goto LABEL_14;
        }
        uint64_t v10 = a3 + 1;
        do
        {
          int v11 = *((_DWORD *)v8 + 7);
          BOOL v12 = v11 < (int)v9;
          if (v11 >= (int)v9) {
            int v13 = v8;
          }
          else {
            int v13 = v8 + 1;
          }
          if (!v12) {
            uint64_t v10 = (uint64_t **)v8;
          }
          uint64_t v8 = (uint64_t *)*v13;
        }
        while (*v13);
        if (v10 == v7 || (int)v9 < *((_DWORD *)v10 + 7)) {
LABEL_14:
        }
        float v14 = (uint64_t *)v6[1];
        if (v14)
        {
          do
          {
            unint64_t v15 = v14;
            float v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unint64_t v15 = (uint64_t *)v6[2];
            BOOL v16 = *v15 == (void)v6;
            uint64_t v6 = v15;
          }
          while (!v16);
        }
        uint64_t v6 = v15;
      }
      while (v15 != v5);
    }
  }
  return result;
}

void std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(uint64_t a1)
{
  std::__tree<int>::destroy(a1 + 240, *(void **)(a1 + 248));

  uint64_t v2 = *(void **)(a1 + 184);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }

  uint64_t v4 = *(void **)(a1 + 128);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_237C25030(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_237C250EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void OUBox3d::OUBox3d(OUBox3d *this, const OUBox3d *a2)
{
  long long v4 = *(_OWORD *)&a2->var1;
  long long v5 = *(_OWORD *)&a2->var3;
  long long v6 = *(_OWORD *)&a2->var5.var2.var0;
  *(_OWORD *)&this->var5.var0 = *(_OWORD *)&a2->var5.var0;
  *(_OWORD *)&this->var5.var2.var0 = v6;
  *(_OWORD *)&this->id var1 = v4;
  *(_OWORD *)&this->id var3 = v5;
  long long v7 = *(_OWORD *)&a2->var6.var1;
  long long v8 = *(_OWORD *)&a2->var7;
  long long v9 = *(_OWORD *)&a2[1].var3;
  *(_OWORD *)&this[1].id var1 = *(_OWORD *)&a2[1].var1;
  *(_OWORD *)&this[1].id var3 = v9;
  *(_OWORD *)&this->var6.id var1 = v7;
  *(_OWORD *)&this->var7 = v8;
  this[1].var5.var0 = a2[1].var5.var0;
  LODWORD(this[1].var5.var1) = a2[1].var5.var1;
  this[1].var5.var2.var0 = a2[1].var5.var2.var0;
  uint64_t v10 = a2[1].var6.var0;
  this[1].var6.id var1 = 0;
  this[1].var6.var0 = v10;
  this[1].var6.var2.var0 = 0;
  this[1].var7 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[1].var6.var1, (const void *)a2[1].var6.var1, a2[1].var6.var2.var0, (uint64_t)(a2[1].var6.var2.var0 - a2[1].var6.var1) >> 2);
  std::vector<BOOL>::vector(&this[1].var8, (uint64_t)&a2[1].var8);
  this[2].id var3 = a2[2].var3;
  LOWORD(this[2].var4) = a2[2].var4;
}

void sub_237C25240(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 168) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C252DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(void **)a2, 0, (void *)(*(void *)a2 + 8 * (*(void *)(a2 + 8) >> 6)), *(void *)(a2 + 8) & 0x3F, *(void *)(a2 + 8));
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = _ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *a1, void *a2, unint64_t a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  unint64_t v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41) {
      unint64_t v8 = (v7 - 1) >> 6;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
  }
  uint64_t v9 = *a1 + 8 * (v6 >> 6);
  int v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  LODWORD(v6) = a2;
  unint64_t v7 = *(uint64_t **)a5;
  int v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || a2 != a4)
  {
    do
    {
      uint64_t v9 = 1 << v8;
      if ((*a1 >> a2)) {
        uint64_t v10 = *v7 | v9;
      }
      else {
        uint64_t v10 = *v7 & ~v9;
      }
      uint64_t *v7 = v10;
      BOOL v11 = v6 == 63;
      BOOL v12 = v6 == 63;
      uint64_t v6 = (a2 + 1);
      if (v11) {
        uint64_t v6 = 0;
      }
      if (v8 == 63)
      {
        int v8 = 0;
        *(void *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || v6 != a4);
    a1 = a3;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<BOOL>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x78787878787878) {
    unint64_t v9 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  float v14 = (OUBox3d *)&v10[272 * v4];
  BOOL v16 = &v10[272 * v9];
  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v14, a2);
  p_var7 = &v14[2].var7;
  std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_237C2565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

OUBox3d *std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(OUBox3d *a1, uint64_t a2)
{
  OUBox3d::OUBox3d(a1, (const OUBox3d *)a2);
  uint64_t v4 = *(void *)(a2 + 224);
  *(_DWORD *)(v5 + 232) = *(_DWORD *)(a2 + 232);
  *(void *)(v5 + 224) = v4;
  std::set<int>::set[abi:ne180100]((uint64_t *)(v5 + 240), a2 + 240);
  return a1;
}

void sub_237C256B8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 184);
  if (v3) {
    operator delete(v3);
  }
  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v1);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (long long *)*result;
  uint64_t v4 = (long long *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 272;
    v4 -= 17;
    __n128 result = (uint64_t *)std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(272 * a2);
}

uint64_t std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(result + 32) = a2[2];
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)__n128 result = v2;
  *(_OWORD *)(result + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(result + 96) = a2[6];
  *(_OWORD *)(result + 112) = v7;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 80) = v6;
  uint64_t v8 = *((void *)a2 + 16);
  *((void *)a2 + 16) = 0;
  *(void *)(result + 128) = v8;
  *(_DWORD *)(result + 136) = *((_DWORD *)a2 + 34);
  long long v9 = a2[9];
  a2[9] = 0u;
  *(_OWORD *)(result + 144) = v9;
  *(void *)(result + 160) = 0;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 160) = a2[10];
  *(void *)(result + 176) = *((void *)a2 + 22);
  *((void *)a2 + 22) = 0;
  a2[10] = 0u;
  uint64_t v10 = *((void *)a2 + 24);
  *(void *)(result + 184) = *((void *)a2 + 23);
  *(void *)(result + 192) = v10;
  *(void *)(result + 200) = *((void *)a2 + 25);
  *(long long *)((char *)a2 + 184) = 0u;
  uint64_t v11 = *((void *)a2 + 26);
  *(long long *)((char *)a2 + 200) = 0u;
  *(void *)(result + 208) = v11;
  *(_WORD *)(result + 216) = *((_WORD *)a2 + 108);
  uint64_t v12 = *((void *)a2 + 28);
  *(_DWORD *)(result + 232) = *((_DWORD *)a2 + 58);
  *(void *)(result + 224) = v12;
  *(void *)(result + 240) = *((void *)a2 + 30);
  int v13 = (void *)a2 + 31;
  uint64_t v14 = *((void *)a2 + 31);
  *(void *)(result + 248) = v14;
  uint64_t v15 = result + 248;
  uint64_t v16 = *((void *)a2 + 32);
  *(void *)(result + 256) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *((void *)a2 + 30) = v13;
    *int v13 = 0;
    *((void *)a2 + 32) = 0;
  }
  else
  {
    *(void *)(result + 240) = v15;
  }
  return result;
}

uint64_t std::__split_buffer<OU3DKitchenObject>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(i - 272);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_237C2593C(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      long long v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  long long v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    long long v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float32x4_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      float32x4_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      long long v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            long long v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), long long v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        long long v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<int>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 272;
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<OU3DKitchenObject>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t OU3DKitchenObject::OU3DKitchenObject(uint64_t a1, const OUBox3d *a2, char a3, int a4, int a5, uint64_t a6)
{
  OUBox3d::OUBox3d((OUBox3d *)a1, a2);
  *(unsigned char *)(v11 + 224) = a3;
  *(_DWORD *)(a1 + 228) = a4;
  *(_DWORD *)(a1 + 232) = a5;
  std::set<int>::set[abi:ne180100]((uint64_t *)(v11 + 240), a6);
  return a1;
}

void sub_237C25F9C(_Unwind_Exception *a1)
{
  OUBox3d::~OUBox3d(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)__n128 result = *(_DWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 64) = v4;
  *(_OWORD *)(result + 16) = v2;
  *(_OWORD *)(result + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(result + 128) = v7;
  *(_OWORD *)(result + 80) = v5;
  *(_OWORD *)(result + 96) = v6;
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(result + 144) = v8;
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
  long long v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(result + 160) = v9;
  *(void *)(result + 176) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(result + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  uint64_t v10 = *(void *)(a2 + 208);
  *(void *)(result + 200) = *(void *)(a2 + 200);
  *(void *)(result + 208) = v10;
  *(void *)(result + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a2 + 200) = 0u;
  uint64_t v11 = *(void *)(a2 + 224);
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(result + 224) = v11;
  *(_WORD *)(result + 232) = *(_WORD *)(a2 + 232);
  uint64_t v12 = *(void *)(a2 + 240);
  *(_DWORD *)(result + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(result + 240) = v12;
  *(void *)(result + 256) = *(void *)(a2 + 256);
  uint64_t v13 = result + 264;
  uint64_t v14 = *(void *)(a2 + 264);
  *(void *)(result + 264) = v14;
  uint64_t v15 = *(void *)(a2 + 272);
  *(void *)(result + 272) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v13;
    *(void *)(a2 + 256) = a2 + 264;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
  }
  else
  {
    *(void *)(result + 256) = v13;
  }
  *(_DWORD *)(result + 288) = *(_DWORD *)(a2 + 288);
  return result;
}

void std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(uint64_t a1)
{
  std::__tree<int>::destroy(a1 + 256, *(void **)(a1 + 264));

  long long v2 = *(void **)(a1 + 200);
  if (v2) {
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }

  long long v4 = *(void **)(a1 + 144);
}

void std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>(unint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v480 = *MEMORY[0x263EF8340];
  while (2)
  {
    uint64_t v8 = (float *)a2;
    v426 = a2 - 76;
    unint64_t v9 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)v8 - v9;
          uint64_t v11 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)v8 - v9) >> 4);
          if (!(!v5 & v4))
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(float *)v426 >= *(float *)a1) {
                  return;
                }
                float32x4_t v130 = (int *)a1;
                uint64_t v131 = a2 - 76;
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), v426);
                return;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), (int *)(a1 + 608), v426);
                return;
              case 5:
                v132 = (float *)(a1 + 608);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), (int *)(a1 + 608), (int *)(a1 + 912));
                if (*(float *)v426 >= *(float *)(a1 + 912)) {
                  return;
                }
                std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 912), v426);
                if (*(float *)(a1 + 912) >= *v132) {
                  return;
                }
                std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 608), (int *)(a1 + 912));
                if (*v132 >= *(float *)(a1 + 304)) {
                  return;
                }
                std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304), (int *)(a1 + 608));
                if (*(float *)(a1 + 304) >= *(float *)a1) {
                  return;
                }
                float32x4_t v130 = (int *)a1;
                uint64_t v131 = (int *)(a1 + 304);
                break;
              default:
                JUMPOUT(0);
            }
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(v130, v131);
            return;
          }
          if (v10 <= 7295)
          {
            if (a4)
            {
              if ((float *)a1 != v8)
              {
                unint64_t v133 = a1 + 304;
                if ((int *)(a1 + 304) != a2)
                {
                  uint64_t v134 = 0;
                  unint64_t v135 = a1;
                  do
                  {
                    unint64_t v136 = v133;
                    if (*(float *)(v135 + 304) < *(float *)v135)
                    {
                      float v456 = *(float *)(v135 + 304);
                      long long v137 = *(_OWORD *)(v135 + 400);
                      long long v461 = *(_OWORD *)(v135 + 384);
                      long long v462 = v137;
                      long long v138 = *(_OWORD *)(v135 + 432);
                      long long v463 = *(_OWORD *)(v135 + 416);
                      long long v464 = v138;
                      long long v139 = *(_OWORD *)(v135 + 336);
                      long long v457 = *(_OWORD *)(v135 + 320);
                      long long v458 = v139;
                      long long v140 = *(_OWORD *)(v135 + 368);
                      long long v459 = *(_OWORD *)(v135 + 352);
                      long long v460 = v140;
                      BOOL v141 = *(void **)(v135 + 448);
                      *(void *)(v135 + 448) = 0;
                      id v465 = v141;
                      int v466 = *(_DWORD *)(v135 + 456);
                      long long v142 = *(_OWORD *)(v135 + 480);
                      long long v467 = *(_OWORD *)(v135 + 464);
                      *(_OWORD *)v468 = v142;
                      *(_OWORD *)(v135 + 464) = 0u;
                      *(_OWORD *)(v135 + 480) = 0u;
                      float32x4_t v143 = *(void **)(v135 + 504);
                      uint64_t v469 = *(void *)(v135 + 496);
                      std::__fs::filesystem::directory_entry::_Path __p = v143;
                      long long v471 = *(_OWORD *)(v135 + 512);
                      *(_OWORD *)(v135 + 496) = 0u;
                      *(_OWORD *)(v135 + 512) = 0u;
                      BOOL v144 = *(void **)(v135 + 528);
                      *(void *)(v135 + 528) = 0;
                      id v472 = v144;
                      __int16 v473 = *(_WORD *)(v135 + 536);
                      uint64_t v145 = *(void *)(v135 + 544);
                      int v475 = *(_DWORD *)(v135 + 552);
                      uint64_t v474 = v145;
                      uint64_t v146 = *(void **)(v135 + 568);
                      v476 = *(void **)(v135 + 560);
                      v477 = v146;
                      uint64_t v478 = *(void *)(v135 + 576);
                      if (v478)
                      {
                        v146[2] = &v477;
                        *(void *)(v135 + 560) = v135 + 568;
                        *(void *)(v135 + 568) = 0;
                        *(void *)(v135 + 576) = 0;
                      }
                      else
                      {
                        v476 = &v477;
                      }
                      int v479 = *(_DWORD *)(v135 + 592);
                      float v147 = *(float *)v135;
                      uint64_t v148 = v134;
                      while (1)
                      {
                        uint64_t v149 = v148;
                        uint64_t v150 = a1 + v148;
                        *(float *)(v150 + 304) = v147;
                        long long v151 = *(_OWORD *)(a1 + v148 + 96);
                        *(_OWORD *)(v150 + 384) = *(_OWORD *)(a1 + v148 + 80);
                        *(_OWORD *)(v150 + 400) = v151;
                        long long v152 = *(_OWORD *)(a1 + v148 + 128);
                        *(_OWORD *)(v150 + 416) = *(_OWORD *)(a1 + v148 + 112);
                        *(_OWORD *)(v150 + 432) = v152;
                        long long v153 = *(_OWORD *)(a1 + v148 + 32);
                        *(_OWORD *)(v150 + 320) = *(_OWORD *)(a1 + v148 + 16);
                        *(_OWORD *)(v150 + 336) = v153;
                        long long v154 = *(_OWORD *)(a1 + v148 + 64);
                        *(_OWORD *)(v150 + 352) = *(_OWORD *)(a1 + v148 + 48);
                        *(_OWORD *)(v150 + 368) = v154;
                        uint64_t v155 = *(void *)(a1 + v148 + 144);
                        *(void *)(v150 + 144) = 0;
                        uint64_t v156 = *(void **)(v150 + 448);
                        *(void *)(v150 + 448) = v155;

                        *(_DWORD *)(v150 + 456) = *(_DWORD *)(v150 + 152);
                        uint64_t v157 = *(void *)(v150 + 160);
                        *(void *)(v150 + 160) = 0;
                        uint64_t v158 = *(void **)(v150 + 464);
                        *(void *)(v150 + 464) = v157;

                        char v159 = (__n128 *)(a1 + v149);
                        unint64_t v160 = *(void *)(a1 + v149 + 168);
                        v159[10].n128_u64[1] = 0;
                        uint64_t v161 = *(void **)(a1 + v149 + 472);
                        v159[29].n128_u64[1] = v160;

                        std::vector<float>::__move_assign((uint64_t)&v159[30], v159 + 11);
                        std::vector<BOOL>::__move_assign((uint64_t)&v159[31].n128_i64[1], &v159[12].n128_u64[1]);
                        unint64_t v162 = *(void *)(a1 + v149 + 224);
                        v159[14].n128_u64[0] = 0;
                        long long v163 = *(void **)(a1 + v149 + 528);
                        v159[33].n128_u64[0] = v162;

                        uint64_t v164 = a1 + v149;
                        *(_WORD *)(v164 + 536) = *(_WORD *)(a1 + v149 + 232);
                        *(void *)(v164 + 544) = *(void *)(a1 + v149 + 240);
                        *(_DWORD *)(v164 + 552) = *(_DWORD *)(a1 + v149 + 248);
                        std::__tree<int>::__move_assign(a1 + v149 + 560, (void *)(a1 + v149 + 256));
                        *(_DWORD *)(v164 + 592) = *(_DWORD *)(v164 + 288);
                        if (!v149) {
                          break;
                        }
                        uint64_t v148 = v149 - 304;
                        float v147 = *(float *)(v149 - 304 + a1);
                        if (v456 >= v147)
                        {
                          unint64_t v165 = a1 + v149;
                          goto LABEL_104;
                        }
                      }
                      unint64_t v165 = a1;
LABEL_104:
                      *(float *)unint64_t v165 = v456;
                      long long v166 = v457;
                      long long v167 = v458;
                      long long v168 = v460;
                      *(_OWORD *)(v164 + 48) = v459;
                      *(_OWORD *)(v164 + 64) = v168;
                      *(_OWORD *)(v164 + 16) = v166;
                      *(_OWORD *)(v164 + 32) = v167;
                      long long v169 = v461;
                      long long v170 = v462;
                      long long v171 = v464;
                      *(_OWORD *)(v164 + 112) = v463;
                      *(_OWORD *)(v164 + 128) = v171;
                      *(_OWORD *)(v164 + 80) = v169;
                      *(_OWORD *)(v164 + 96) = v170;
                      id v172 = v465;
                      id v465 = 0;
                      long long v173 = *(void **)(v165 + 144);
                      *(void *)(v165 + 144) = v172;

                      *(_DWORD *)(v165 + 152) = v466;
                      uint64_t v174 = v467;
                      *(void *)&long long v467 = 0;
                      long long v175 = *(void **)(v165 + 160);
                      *(void *)(v165 + 160) = v174;

                      uint64_t v176 = *((void *)&v467 + 1);
                      *((void *)&v467 + 1) = 0;
                      int v177 = *(void **)(v165 + 168);
                      *(void *)(v165 + 168) = v176;

                      uint64_t v178 = a1 + v149;
                      long long v181 = *(void **)(v178 + 176);
                      long long v180 = (void *)(v178 + 176);
                      long long v179 = v181;
                      if (v181)
                      {
                        *(void *)(v165 + 184) = v179;
                        operator delete(v179);
                        *long long v180 = 0;
                        v180[1] = 0;
                        v180[2] = 0;
                      }
                      long long v182 = (void **)(v180 + 3);
                      *long long v180 = v468[0];
                      *(void **)(v165 + 184) = v468[1];
                      *(void *)(v165 + 192) = v469;
                      v468[0] = 0;
                      v468[1] = 0;
                      uint64_t v469 = 0;
                      v183 = (void *)v180[3];
                      if (v183)
                      {
                        operator delete(v183);
                        *long long v182 = 0;
                        v180[4] = 0;
                        v180[5] = 0;
                      }
                      *long long v182 = __p;
                      *(_OWORD *)(v165 + 208) = v471;
                      std::__fs::filesystem::directory_entry::_Path __p = 0;
                      long long v471 = 0uLL;
                      id v184 = v472;
                      id v472 = 0;
                      unint64_t v185 = *(void **)(v165 + 224);
                      *(void *)(v165 + 224) = v184;

                      uint64_t v186 = v180 + 8;
                      uint64_t v187 = v180 + 10;
                      *(_WORD *)(v165 + 232) = v473;
                      uint64_t v188 = v474;
                      *((_DWORD *)v186 + 2) = v475;
                      *uint64_t v186 = v188;
                      unint64_t v189 = v165 + 264;
                      std::__tree<int>::destroy((uint64_t)v187, *(void **)(v165 + 264));
                      *uint64_t v187 = (unint64_t)v476;
                      id v190 = v477;
                      *(void *)(v165 + 264) = v477;
                      uint64_t v191 = v478;
                      *(void *)(v165 + 272) = v478;
                      if (v191)
                      {
                        uint64_t v192 = 0;
                        v190[2] = v189;
                        v476 = &v477;
                        v477 = 0;
                        uint64_t v478 = 0;
                      }
                      else
                      {
                        *uint64_t v187 = v189;
                        uint64_t v192 = v477;
                      }
                      *(_DWORD *)(v165 + 288) = v479;
                      std::__tree<int>::destroy((uint64_t)&v476, v192);

                      if (__p) {
                        operator delete(__p);
                      }
                      if (v468[0])
                      {
                        v468[1] = v468[0];
                        operator delete(v468[0]);
                      }
                    }
                    unint64_t v133 = v136 + 304;
                    v134 += 304;
                    unint64_t v135 = v136;
                  }
                  while ((int *)(v136 + 304) != a2);
                }
              }
            }
            else if ((float *)a1 != v8)
            {
              unint64_t v370 = a1 + 304;
              if ((int *)(a1 + 304) != a2)
              {
                unint64_t v371 = a1 - 304;
                do
                {
                  unint64_t v372 = v370;
                  if (*(float *)(a1 + 304) < *(float *)a1)
                  {
                    float v456 = *(float *)(a1 + 304);
                    long long v373 = *(_OWORD *)(a1 + 400);
                    long long v461 = *(_OWORD *)(a1 + 384);
                    long long v462 = v373;
                    long long v374 = *(_OWORD *)(a1 + 432);
                    long long v463 = *(_OWORD *)(a1 + 416);
                    long long v464 = v374;
                    long long v375 = *(_OWORD *)(a1 + 336);
                    long long v457 = *(_OWORD *)(a1 + 320);
                    long long v458 = v375;
                    long long v376 = *(_OWORD *)(a1 + 368);
                    long long v459 = *(_OWORD *)(a1 + 352);
                    long long v460 = v376;
                    v377 = *(void **)(a1 + 448);
                    *(void *)(a1 + 448) = 0;
                    id v465 = v377;
                    int v466 = *(_DWORD *)(a1 + 456);
                    long long v378 = *(_OWORD *)(a1 + 480);
                    long long v467 = *(_OWORD *)(a1 + 464);
                    *(_OWORD *)v468 = v378;
                    *(_OWORD *)(a1 + 464) = 0u;
                    *(_OWORD *)(a1 + 480) = 0u;
                    v379 = *(void **)(a1 + 504);
                    uint64_t v469 = *(void *)(a1 + 496);
                    std::__fs::filesystem::directory_entry::_Path __p = v379;
                    long long v471 = *(_OWORD *)(a1 + 512);
                    *(_OWORD *)(a1 + 496) = 0u;
                    *(_OWORD *)(a1 + 512) = 0u;
                    v380 = *(void **)(a1 + 528);
                    *(void *)(a1 + 528) = 0;
                    id v472 = v380;
                    __int16 v473 = *(_WORD *)(a1 + 536);
                    uint64_t v381 = *(void *)(a1 + 544);
                    int v475 = *(_DWORD *)(a1 + 552);
                    uint64_t v474 = v381;
                    v382 = *(void **)(a1 + 568);
                    v476 = *(void **)(a1 + 560);
                    v477 = v382;
                    uint64_t v478 = *(void *)(a1 + 576);
                    if (v478)
                    {
                      v382[2] = &v477;
                      *(void *)(a1 + 560) = a1 + 568;
                      *(void *)(a1 + 568) = 0;
                      *(void *)(a1 + 576) = 0;
                    }
                    else
                    {
                      v476 = &v477;
                    }
                    int v479 = *(_DWORD *)(a1 + 592);
                    float v383 = *(float *)a1;
                    unint64_t v384 = v371;
                    do
                    {
                      *(float *)(v384 + 608) = v383;
                      long long v385 = *(_OWORD *)(v384 + 400);
                      *(_OWORD *)(v384 + 688) = *(_OWORD *)(v384 + 384);
                      *(_OWORD *)(v384 + 704) = v385;
                      long long v386 = *(_OWORD *)(v384 + 432);
                      *(_OWORD *)(v384 + 720) = *(_OWORD *)(v384 + 416);
                      *(_OWORD *)(v384 + 736) = v386;
                      long long v387 = *(_OWORD *)(v384 + 336);
                      *(_OWORD *)(v384 + 624) = *(_OWORD *)(v384 + 320);
                      *(_OWORD *)(v384 + 640) = v387;
                      long long v388 = *(_OWORD *)(v384 + 368);
                      *(_OWORD *)(v384 + 656) = *(_OWORD *)(v384 + 352);
                      *(_OWORD *)(v384 + 672) = v388;
                      uint64_t v389 = *(void *)(v384 + 448);
                      *(void *)(v384 + 448) = 0;
                      v390 = *(void **)(v384 + 752);
                      *(void *)(v384 + 752) = v389;

                      *(_DWORD *)(v384 + 760) = *(_DWORD *)(v384 + 456);
                      uint64_t v391 = *(void *)(v384 + 464);
                      *(void *)(v384 + 464) = 0;
                      v392 = *(void **)(v384 + 768);
                      *(void *)(v384 + 768) = v391;

                      uint64_t v393 = *(void *)(v384 + 472);
                      *(void *)(v384 + 472) = 0;
                      v394 = *(void **)(v384 + 776);
                      *(void *)(v384 + 776) = v393;

                      std::vector<float>::__move_assign(v384 + 784, (__n128 *)(v384 + 480));
                      std::vector<BOOL>::__move_assign(v384 + 808, (void *)(v384 + 504));
                      uint64_t v395 = *(void *)(v384 + 528);
                      *(void *)(v384 + 528) = 0;
                      v396 = *(void **)(v384 + 832);
                      *(void *)(v384 + 832) = v395;

                      *(_WORD *)(v384 + 840) = *(_WORD *)(v384 + 536);
                      *(void *)(v384 + 848) = *(void *)(v384 + 544);
                      *(_DWORD *)(v384 + 856) = *(_DWORD *)(v384 + 552);
                      std::__tree<int>::__move_assign(v384 + 864, (void *)(v384 + 560));
                      *(_DWORD *)(v384 + 896) = *(_DWORD *)(v384 + 592);
                      float v383 = *(float *)v384;
                      v384 -= 304;
                    }
                    while (v456 < v383);
                    *(float *)(v384 + 608) = v456;
                    long long v397 = v457;
                    long long v398 = v458;
                    long long v399 = v460;
                    *(_OWORD *)(v384 + 656) = v459;
                    *(_OWORD *)(v384 + 672) = v399;
                    *(_OWORD *)(v384 + 624) = v397;
                    *(_OWORD *)(v384 + 640) = v398;
                    long long v400 = v461;
                    long long v401 = v462;
                    long long v402 = v464;
                    *(_OWORD *)(v384 + 720) = v463;
                    *(_OWORD *)(v384 + 736) = v402;
                    *(_OWORD *)(v384 + 688) = v400;
                    *(_OWORD *)(v384 + 704) = v401;
                    id v403 = v465;
                    id v465 = 0;
                    v404 = *(void **)(v384 + 752);
                    *(void *)(v384 + 752) = v403;

                    *(_DWORD *)(v384 + 760) = v466;
                    uint64_t v405 = v467;
                    *(void *)&long long v467 = 0;
                    v406 = *(void **)(v384 + 768);
                    *(void *)(v384 + 768) = v405;

                    uint64_t v407 = *((void *)&v467 + 1);
                    *((void *)&v467 + 1) = 0;
                    v408 = *(void **)(v384 + 776);
                    *(void *)(v384 + 776) = v407;

                    v409 = *(void **)(v384 + 784);
                    if (v409)
                    {
                      *(void *)(v384 + 792) = v409;
                      operator delete(v409);
                      *(void *)(v384 + 784) = 0;
                      *(void *)(v384 + 792) = 0;
                      *(void *)(v384 + 800) = 0;
                    }
                    *(_OWORD *)(v384 + 784) = *(_OWORD *)v468;
                    *(void *)(v384 + 800) = v469;
                    v468[0] = 0;
                    v468[1] = 0;
                    uint64_t v469 = 0;
                    v410 = *(void **)(v384 + 808);
                    if (v410)
                    {
                      operator delete(v410);
                      *(void *)(v384 + 808) = 0;
                      *(void *)(v384 + 816) = 0;
                      *(void *)(v384 + 824) = 0;
                    }
                    *(void *)(v384 + 808) = __p;
                    *(_OWORD *)(v384 + 816) = v471;
                    std::__fs::filesystem::directory_entry::_Path __p = 0;
                    long long v471 = 0uLL;
                    id v411 = v472;
                    id v472 = 0;
                    v412 = *(void **)(v384 + 832);
                    *(void *)(v384 + 832) = v411;

                    *(_WORD *)(v384 + 840) = v473;
                    uint64_t v413 = v474;
                    *(_DWORD *)(v384 + 856) = v475;
                    *(void *)(v384 + 848) = v413;
                    unint64_t v414 = v384 + 872;
                    std::__tree<int>::destroy(v384 + 864, *(void **)(v384 + 872));
                    *(void *)(v384 + 864) = v476;
                    v415 = v477;
                    *(void *)(v384 + 872) = v477;
                    uint64_t v416 = v478;
                    *(void *)(v384 + 880) = v478;
                    if (v416)
                    {
                      v417 = 0;
                      v415[2] = v414;
                      v476 = &v477;
                      v477 = 0;
                      uint64_t v478 = 0;
                    }
                    else
                    {
                      *(void *)(v384 + 864) = v414;
                      v417 = v477;
                    }
                    *(_DWORD *)(v384 + 896) = v479;
                    std::__tree<int>::destroy((uint64_t)&v476, v417);

                    if (__p) {
                      operator delete(__p);
                    }
                    if (v468[0])
                    {
                      v468[1] = v468[0];
                      operator delete(v468[0]);
                    }
                  }
                  unint64_t v370 = v372 + 304;
                  v371 += 304;
                  a1 = v372;
                }
                while ((int *)(v372 + 304) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((float *)a1 != v8)
            {
              int64_t v430 = (unint64_t)(v11 - 2) >> 1;
              int64_t v193 = v430;
              do
              {
                int64_t v194 = v193;
                if (v430 >= v193)
                {
                  uint64_t v195 = (2 * v193) | 1;
                  unint64_t v196 = a1 + 304 * v195;
                  if (2 * v194 + 2 < v11 && *(float *)v196 < *(float *)(v196 + 304))
                  {
                    v196 += 304;
                    uint64_t v195 = 2 * v194 + 2;
                  }
                  unint64_t v197 = a1 + 304 * v194;
                  if (*(float *)v196 >= *(float *)v197)
                  {
                    float v456 = *(float *)v197;
                    unint64_t v198 = a1 + 304 * v194;
                    long long v199 = *(_OWORD *)(v198 + 16);
                    long long v200 = *(_OWORD *)(v198 + 32);
                    long long v201 = *(_OWORD *)(v198 + 64);
                    long long v459 = *(_OWORD *)(v198 + 48);
                    long long v460 = v201;
                    long long v457 = v199;
                    long long v458 = v200;
                    long long v202 = *(_OWORD *)(v198 + 80);
                    long long v203 = *(_OWORD *)(v198 + 96);
                    long long v204 = *(_OWORD *)(v198 + 128);
                    long long v463 = *(_OWORD *)(v198 + 112);
                    long long v464 = v204;
                    long long v461 = v202;
                    long long v462 = v203;
                    long long v205 = *(void **)(v198 + 144);
                    *(void *)(v198 + 144) = 0;
                    id v465 = v205;
                    int v466 = *(_DWORD *)(v198 + 152);
                    long long v206 = *(_OWORD *)(v198 + 160);
                    *(_OWORD *)(v198 + 160) = 0u;
                    long long v467 = v206;
                    *(_OWORD *)v468 = *(_OWORD *)(v198 + 176);
                    uint64_t v469 = *(void *)(v198 + 192);
                    *(void *)(v198 + 192) = 0;
                    *(_OWORD *)(v198 + 176) = 0u;
                    std::__fs::filesystem::directory_entry::_Path __p = *(void **)(v198 + 200);
                    long long v471 = *(_OWORD *)(v198 + 208);
                    *(_OWORD *)(v198 + 200) = 0u;
                    uint64_t v207 = *(void **)(v198 + 224);
                    *(_OWORD *)(v198 + 216) = 0u;
                    id v472 = v207;
                    __int16 v473 = *(_WORD *)(v198 + 232);
                    uint64_t v208 = *(void *)(v198 + 240);
                    int v475 = *(_DWORD *)(v198 + 248);
                    uint64_t v474 = v208;
                    v476 = *(void **)(v198 + 256);
                    long long v209 = *(void **)(v198 + 264);
                    v477 = v209;
                    uint64_t v478 = *(void *)(v198 + 272);
                    if (v478)
                    {
                      v210 = (void *)(v198 + 256);
                      v209[2] = &v477;
                      v211 = (void *)(v198 + 264);
                      void *v210 = v211;
                      void *v211 = 0;
                      v211[1] = 0;
                    }
                    else
                    {
                      v476 = &v477;
                    }
                    int64_t v427 = v194;
                    int v479 = *(_DWORD *)(a1 + 304 * v194 + 288);
                    float v212 = *(float *)v196;
                    while (1)
                    {
                      unint64_t v213 = v196;
                      *(float *)unint64_t v197 = v212;
                      long long v214 = *(_OWORD *)(v196 + 16);
                      long long v215 = *(_OWORD *)(v196 + 32);
                      long long v216 = *(_OWORD *)(v196 + 64);
                      *(_OWORD *)(v197 + 48) = *(_OWORD *)(v196 + 48);
                      *(_OWORD *)(v197 + 64) = v216;
                      *(_OWORD *)(v197 + 16) = v214;
                      *(_OWORD *)(v197 + 32) = v215;
                      long long v217 = *(_OWORD *)(v196 + 80);
                      long long v218 = *(_OWORD *)(v196 + 96);
                      long long v219 = *(_OWORD *)(v196 + 128);
                      *(_OWORD *)(v197 + 112) = *(_OWORD *)(v196 + 112);
                      *(_OWORD *)(v197 + 128) = v219;
                      *(_OWORD *)(v197 + 80) = v217;
                      *(_OWORD *)(v197 + 96) = v218;
                      uint64_t v220 = *(void *)(v196 + 144);
                      *(void *)(v213 + 144) = 0;
                      long long v221 = *(void **)(v197 + 144);
                      *(void *)(v197 + 144) = v220;

                      *(_DWORD *)(v197 + 152) = *(_DWORD *)(v213 + 152);
                      uint64_t v222 = *(void *)(v213 + 160);
                      *(void *)(v213 + 160) = 0;
                      id v223 = *(void **)(v197 + 160);
                      *(void *)(v197 + 160) = v222;

                      uint64_t v224 = *(void *)(v213 + 168);
                      *(void *)(v213 + 168) = 0;
                      id v225 = *(void **)(v197 + 168);
                      *(void *)(v197 + 168) = v224;

                      std::vector<float>::__move_assign(v197 + 176, (__n128 *)(v213 + 176));
                      std::vector<BOOL>::__move_assign(v197 + 200, (void *)(v213 + 200));
                      uint64_t v226 = *(void *)(v213 + 224);
                      *(void *)(v213 + 224) = 0;
                      v227 = *(void **)(v197 + 224);
                      *(void *)(v197 + 224) = v226;

                      *(_WORD *)(v197 + 232) = *(_WORD *)(v213 + 232);
                      uint64_t v228 = *(void *)(v213 + 240);
                      *(_DWORD *)(v197 + 248) = *(_DWORD *)(v213 + 248);
                      *(void *)(v197 + 240) = v228;
                      std::__tree<int>::__move_assign(v197 + 256, (void *)(v213 + 256));
                      *(_DWORD *)(v197 + 288) = *(_DWORD *)(v213 + 288);
                      if (v430 < v195) {
                        break;
                      }
                      uint64_t v229 = 2 * v195;
                      uint64_t v195 = (2 * v195) | 1;
                      unint64_t v196 = a1 + 304 * v195;
                      uint64_t v230 = v229 + 2;
                      if (v230 < v11 && *(float *)v196 < *(float *)(v196 + 304))
                      {
                        v196 += 304;
                        uint64_t v195 = v230;
                      }
                      float v212 = *(float *)v196;
                      float v231 = v456;
                      unint64_t v197 = v213;
                      if (*(float *)v196 < v456) {
                        goto LABEL_135;
                      }
                    }
                    float v231 = v456;
LABEL_135:
                    *(float *)unint64_t v213 = v231;
                    long long v232 = v457;
                    long long v233 = v458;
                    long long v234 = v460;
                    *(_OWORD *)(v213 + 48) = v459;
                    *(_OWORD *)(v213 + 64) = v234;
                    *(_OWORD *)(v213 + 16) = v232;
                    *(_OWORD *)(v213 + 32) = v233;
                    long long v235 = v461;
                    long long v236 = v462;
                    long long v237 = v464;
                    *(_OWORD *)(v213 + 112) = v463;
                    *(_OWORD *)(v213 + 128) = v237;
                    *(_OWORD *)(v213 + 80) = v235;
                    *(_OWORD *)(v213 + 96) = v236;
                    id v238 = v465;
                    id v465 = 0;
                    v239 = *(void **)(v213 + 144);
                    *(void *)(v213 + 144) = v238;

                    *(_DWORD *)(v213 + 152) = v466;
                    uint64_t v240 = v467;
                    *(void *)&long long v467 = 0;
                    v241 = *(void **)(v213 + 160);
                    *(void *)(v213 + 160) = v240;

                    uint64_t v242 = *((void *)&v467 + 1);
                    *((void *)&v467 + 1) = 0;
                    v243 = *(void **)(v213 + 168);
                    *(void *)(v213 + 168) = v242;

                    v244 = *(void **)(v213 + 176);
                    if (v244)
                    {
                      *(void *)(v213 + 184) = v244;
                      operator delete(v244);
                      *(void *)(v213 + 176) = 0;
                      *(void *)(v213 + 184) = 0;
                      *(void *)(v213 + 192) = 0;
                    }
                    *(_OWORD *)(v213 + 176) = *(_OWORD *)v468;
                    *(void *)(v213 + 192) = v469;
                    v468[0] = 0;
                    v468[1] = 0;
                    uint64_t v469 = 0;
                    v245 = *(void **)(v213 + 200);
                    if (v245)
                    {
                      operator delete(v245);
                      *(void *)(v213 + 200) = 0;
                      *(void *)(v213 + 208) = 0;
                      *(void *)(v213 + 216) = 0;
                    }
                    *(void *)(v213 + 200) = __p;
                    *(_OWORD *)(v213 + 208) = v471;
                    std::__fs::filesystem::directory_entry::_Path __p = 0;
                    long long v471 = 0uLL;
                    id v246 = v472;
                    id v472 = 0;
                    v247 = *(void **)(v213 + 224);
                    *(void *)(v213 + 224) = v246;

                    *(_WORD *)(v213 + 232) = v473;
                    uint64_t v248 = v474;
                    *(_DWORD *)(v213 + 248) = v475;
                    *(void *)(v213 + 240) = v248;
                    unint64_t v249 = v213 + 264;
                    std::__tree<int>::destroy(v213 + 256, *(void **)(v213 + 264));
                    *(void *)(v213 + 256) = v476;
                    v250 = v477;
                    *(void *)(v213 + 264) = v477;
                    uint64_t v251 = v478;
                    *(void *)(v213 + 272) = v478;
                    if (v251)
                    {
                      v252 = 0;
                      v250[2] = v249;
                      v476 = &v477;
                      v477 = 0;
                      uint64_t v478 = 0;
                    }
                    else
                    {
                      *(void *)(v213 + 256) = v249;
                      v252 = v477;
                    }
                    *(_DWORD *)(v213 + 288) = v479;
                    std::__tree<int>::destroy((uint64_t)&v476, v252);

                    if (__p) {
                      operator delete(__p);
                    }
                    if (v468[0])
                    {
                      v468[1] = v468[0];
                      operator delete(v468[0]);
                    }

                    int64_t v194 = v427;
                  }
                }
                int64_t v193 = v194 - 1;
              }
              while (v194);
              int64_t v431 = v10 / 0x130uLL;
              unint64_t v422 = a1 + 176;
              v423 = (long long *)(a1 + 16);
              unint64_t v421 = a1 + 200;
              v420 = (uint64_t *)(a1 + 240);
              unint64_t v418 = a1;
              v419 = (void *)(a1 + 264);
              do
              {
                int v432 = *(_DWORD *)a1;
                long long v435 = v423[2];
                long long v436 = v423[3];
                long long v433 = *v423;
                long long v434 = v423[1];
                long long v439 = v423[6];
                long long v440 = v423[7];
                long long v437 = v423[4];
                long long v438 = v423[5];
                uint64_t v253 = *(void *)(a1 + 144);
                *(void *)(a1 + 144) = 0;
                uint64_t v441 = v253;
                int v442 = *(_DWORD *)(a1 + 152);
                long long v254 = *(_OWORD *)(a1 + 160);
                long long v255 = *(_OWORD *)(a1 + 176);
                *(_OWORD *)(a1 + 160) = 0u;
                long long v443 = v254;
                *(_OWORD *)v444 = v255;
                v256 = *(void **)(a1 + 200);
                uint64_t v445 = *(void *)(a1 + 192);
                *(void *)(v422 + 16) = 0;
                *(_OWORD *)unint64_t v422 = 0u;
                v446 = v256;
                long long v447 = *(_OWORD *)(a1 + 208);
                *(void *)(v421 + 16) = 0;
                *(_OWORD *)unint64_t v421 = 0u;
                uint64_t v257 = *(void *)(a1 + 224);
                *(void *)(a1 + 224) = 0;
                uint64_t v448 = v257;
                __int16 v449 = *(_WORD *)(a1 + 232);
                int v451 = *((_DWORD *)v420 + 2);
                uint64_t v450 = *v420;
                v258 = *(void **)(a1 + 264);
                v452 = *(void ***)(a1 + 256);
                v453 = v258;
                uint64_t v454 = *(void *)(a1 + 272);
                if (v454)
                {
                  v258[2] = &v453;
                  *(void *)(a1 + 256) = v419;
                  void *v419 = 0;
                  v419[1] = 0;
                }
                else
                {
                  v452 = &v453;
                }
                uint64_t v259 = 0;
                int v455 = *(_DWORD *)(a1 + 288);
                uint64_t v260 = a1;
                do
                {
                  uint64_t v261 = v260 + 304 * v259 + 304;
                  uint64_t v262 = 2 * v259;
                  uint64_t v259 = (2 * v259) | 1;
                  if (v262 + 2 < v431 && *(float *)v261 < *(float *)(v261 + 304))
                  {
                    v261 += 304;
                    uint64_t v259 = v262 + 2;
                  }
                  *(_DWORD *)uint64_t v260 = *(_DWORD *)v261;
                  long long v263 = *(_OWORD *)(v261 + 16);
                  long long v264 = *(_OWORD *)(v261 + 32);
                  long long v265 = *(_OWORD *)(v261 + 64);
                  *(_OWORD *)(v260 + 48) = *(_OWORD *)(v261 + 48);
                  *(_OWORD *)(v260 + 64) = v265;
                  *(_OWORD *)(v260 + 16) = v263;
                  *(_OWORD *)(v260 + 32) = v264;
                  long long v266 = *(_OWORD *)(v261 + 80);
                  long long v267 = *(_OWORD *)(v261 + 96);
                  long long v268 = *(_OWORD *)(v261 + 128);
                  *(_OWORD *)(v260 + 112) = *(_OWORD *)(v261 + 112);
                  *(_OWORD *)(v260 + 128) = v268;
                  *(_OWORD *)(v260 + 80) = v266;
                  *(_OWORD *)(v260 + 96) = v267;
                  uint64_t v269 = *(void *)(v261 + 144);
                  *(void *)(v261 + 144) = 0;
                  v270 = *(void **)(v260 + 144);
                  *(void *)(v260 + 144) = v269;

                  *(_DWORD *)(v260 + 152) = *(_DWORD *)(v261 + 152);
                  uint64_t v271 = *(void *)(v261 + 160);
                  *(void *)(v261 + 160) = 0;
                  v272 = *(void **)(v260 + 160);
                  *(void *)(v260 + 160) = v271;

                  uint64_t v273 = *(void *)(v261 + 168);
                  *(void *)(v261 + 168) = 0;
                  v274 = *(void **)(v260 + 168);
                  *(void *)(v260 + 168) = v273;

                  v275 = (void *)(v261 + 176);
                  std::vector<float>::__move_assign(v260 + 176, (__n128 *)(v261 + 176));
                  v276 = (void *)(v261 + 200);
                  std::vector<BOOL>::__move_assign(v260 + 200, (void *)(v261 + 200));
                  uint64_t v277 = *(void *)(v261 + 224);
                  *(void *)(v261 + 224) = 0;
                  v278 = *(void **)(v260 + 224);
                  *(void *)(v260 + 224) = v277;

                  *(_WORD *)(v260 + 232) = *(_WORD *)(v261 + 232);
                  v280 = (uint64_t *)(v261 + 240);
                  uint64_t v279 = *(void *)(v261 + 240);
                  *(_DWORD *)(v260 + 248) = *(_DWORD *)(v261 + 248);
                  *(void *)(v260 + 240) = v279;
                  v281 = (uint64_t *)(v261 + 256);
                  std::__tree<int>::__move_assign(v260 + 256, (void *)(v261 + 256));
                  *(_DWORD *)(v260 + 288) = *(_DWORD *)(v261 + 288);
                  uint64_t v260 = v261;
                }
                while (v259 <= (uint64_t)((unint64_t)(v431 - 2) >> 1));
                v282 = (_OWORD *)(v261 + 16);
                if ((int *)v261 == a2 - 76)
                {
                  *(_DWORD *)uint64_t v261 = v432;
                  *(_OWORD *)(v261 + 48) = v435;
                  *(_OWORD *)(v261 + 64) = v436;
                  _OWORD *v282 = v433;
                  *(_OWORD *)(v261 + 32) = v434;
                  *(_OWORD *)(v261 + 112) = v439;
                  *(_OWORD *)(v261 + 128) = v440;
                  *(_OWORD *)(v261 + 80) = v437;
                  *(_OWORD *)(v261 + 96) = v438;
                  v309 = *(void **)(v261 + 144);
                  *(void *)(v261 + 144) = v441;

                  *(_DWORD *)(v261 + 152) = v442;
                  v310 = *(void **)(v261 + 160);
                  *(void *)(v261 + 160) = v443;

                  v311 = *(void **)(v261 + 168);
                  *(void *)(v261 + 168) = *((void *)&v443 + 1);

                  v312 = *(void **)(v261 + 176);
                  if (v312)
                  {
                    *(void *)(v261 + 184) = v312;
                    operator delete(v312);
                    void *v275 = 0;
                    *(void *)(v261 + 184) = 0;
                    *(void *)(v261 + 192) = 0;
                  }
                  *(_OWORD *)(v261 + 176) = *(_OWORD *)v444;
                  *(void *)(v261 + 192) = v445;
                  v313 = *(void **)(v261 + 200);
                  if (v313)
                  {
                    operator delete(v313);
                    void *v276 = 0;
                    *(void *)(v261 + 208) = 0;
                    *(void *)(v261 + 216) = 0;
                  }
                  *(void *)(v261 + 200) = v446;
                  *(_OWORD *)(v261 + 208) = v447;
                  v314 = *(void **)(v261 + 224);
                  *(void *)(v261 + 224) = v448;

                  *(_WORD *)(v261 + 232) = v449;
                  *(_DWORD *)(v261 + 248) = v451;
                  uint64_t *v280 = v450;
                  uint64_t v315 = v261 + 264;
                  std::__tree<int>::destroy(v261 + 256, *(void **)(v261 + 264));
                  *(void *)(v261 + 256) = v452;
                  v316 = v453;
                  *(void *)(v261 + 264) = v453;
                  uint64_t v317 = v454;
                  *(void *)(v261 + 272) = v454;
                  if (v317)
                  {
                    v316[2] = v315;
                    v452 = &v453;
                    v453 = 0;
                    uint64_t v454 = 0;
                  }
                  else
                  {
                    uint64_t *v281 = v315;
                  }
                  *(_DWORD *)(v261 + 288) = v455;
                }
                else
                {
                  *(_DWORD *)uint64_t v261 = *(a2 - 76);
                  long long v283 = *((_OWORD *)a2 - 18);
                  long long v284 = *((_OWORD *)a2 - 17);
                  long long v285 = *((_OWORD *)a2 - 15);
                  *(_OWORD *)(v261 + 48) = *((_OWORD *)a2 - 16);
                  *(_OWORD *)(v261 + 64) = v285;
                  _OWORD *v282 = v283;
                  *(_OWORD *)(v261 + 32) = v284;
                  long long v286 = *((_OWORD *)a2 - 14);
                  long long v287 = *((_OWORD *)a2 - 13);
                  long long v288 = *((_OWORD *)a2 - 11);
                  *(_OWORD *)(v261 + 112) = *((_OWORD *)a2 - 12);
                  *(_OWORD *)(v261 + 128) = v288;
                  *(_OWORD *)(v261 + 80) = v286;
                  *(_OWORD *)(v261 + 96) = v287;
                  uint64_t v290 = *((void *)a2 - 20);
                  v289 = a2 - 40;
                  *(void *)v289 = 0;
                  v291 = *(void **)(v261 + 144);
                  *(void *)(v261 + 144) = v290;

                  uint64_t v292 = *((void *)a2 - 18);
                  *(_DWORD *)(v261 + 152) = *(a2 - 38);
                  *((void *)a2 - 18) = 0;
                  v293 = *(void **)(v261 + 160);
                  *(void *)(v261 + 160) = v292;

                  uint64_t v294 = *((void *)a2 - 17);
                  *((void *)a2 - 17) = 0;
                  v295 = *(void **)(v261 + 168);
                  *(void *)(v261 + 168) = v294;

                  std::vector<float>::__move_assign(v261 + 176, (__n128 *)a2 - 8);
                  std::vector<BOOL>::__move_assign(v261 + 200, (void *)a2 - 13);
                  uint64_t v296 = *((void *)a2 - 10);
                  *((void *)a2 - 10) = 0;
                  v297 = *(void **)(v261 + 224);
                  *(void *)(v261 + 224) = v296;

                  *(_WORD *)(v261 + 232) = *((_WORD *)a2 - 36);
                  uint64_t v298 = *((void *)a2 - 8);
                  *(_DWORD *)(v261 + 248) = *(a2 - 14);
                  uint64_t *v280 = v298;
                  v424 = a2 - 12;
                  std::__tree<int>::__move_assign(v261 + 256, (void *)a2 - 6);
                  *(_DWORD *)(v261 + 288) = *(a2 - 4);
                  *(a2 - 76) = v432;
                  *((_OWORD *)a2 - 16) = v435;
                  *((_OWORD *)a2 - 15) = v436;
                  *((_OWORD *)a2 - 18) = v433;
                  *((_OWORD *)a2 - 17) = v434;
                  *((_OWORD *)a2 - 12) = v439;
                  *((_OWORD *)a2 - 11) = v440;
                  *((_OWORD *)a2 - 14) = v437;
                  *((_OWORD *)a2 - 13) = v438;
                  a1 = v418;
                  v299 = (void *)*((void *)a2 - 20);
                  *(void *)v289 = v441;

                  *(a2 - 38) = v442;
                  v300 = (void *)*((void *)a2 - 18);
                  *((void *)a2 - 18) = v443;

                  v301 = (void *)*((void *)a2 - 17);
                  *((void *)a2 - 17) = *((void *)&v443 + 1);

                  v302 = (void *)*((void *)a2 - 16);
                  if (v302)
                  {
                    *((void *)a2 - 15) = v302;
                    operator delete(v302);
                  }
                  *((_OWORD *)a2 - 8) = *(_OWORD *)v444;
                  *((void *)a2 - 14) = v445;
                  v303 = (void *)*((void *)a2 - 13);
                  if (v303) {
                    operator delete(v303);
                  }
                  *((void *)a2 - 13) = v446;
                  *((_OWORD *)a2 - 6) = v447;
                  v304 = (void *)*((void *)a2 - 10);
                  *((void *)a2 - 10) = v448;

                  v306 = a2 - 10;
                  v305 = (void *)*((void *)a2 - 5);
                  *((_WORD *)a2 - 36) = v449;
                  *(a2 - 14) = v451;
                  *((void *)a2 - 8) = v450;
                  std::__tree<int>::destroy((uint64_t)v424, v305);
                  *((void *)a2 - 6) = v452;
                  v307 = v453;
                  *(void *)v306 = v453;
                  uint64_t v308 = v454;
                  *((void *)v306 + 1) = v454;
                  if (v308)
                  {
                    v307[2] = v306;
                    v452 = &v453;
                    v453 = 0;
                    uint64_t v454 = 0;
                  }
                  else
                  {
                    *(void *)v424 = v306;
                  }
                  *(a2 - 4) = v455;
                  uint64_t v318 = v261 + 304 - v418;
                  if (v318 >= 305)
                  {
                    unint64_t v319 = (v318 / 0x130uLL - 2) >> 1;
                    uint64_t v320 = v418 + 304 * v319;
                    if (*(float *)v320 < *(float *)v261)
                    {
                      float v456 = *(float *)v261;
                      long long v321 = *(_OWORD *)(v261 + 16);
                      long long v322 = *(_OWORD *)(v261 + 32);
                      long long v323 = *(_OWORD *)(v261 + 64);
                      long long v459 = *(_OWORD *)(v261 + 48);
                      long long v460 = v323;
                      long long v457 = v321;
                      long long v458 = v322;
                      long long v324 = *(_OWORD *)(v261 + 80);
                      long long v325 = *(_OWORD *)(v261 + 96);
                      long long v326 = *(_OWORD *)(v261 + 128);
                      long long v463 = *(_OWORD *)(v261 + 112);
                      long long v464 = v326;
                      long long v461 = v324;
                      long long v462 = v325;
                      v327 = *(void **)(v261 + 144);
                      *(void *)(v261 + 144) = 0;
                      id v465 = v327;
                      int v466 = *(_DWORD *)(v261 + 152);
                      long long v328 = *(_OWORD *)(v261 + 160);
                      *(_OWORD *)(v261 + 160) = 0u;
                      long long v467 = v328;
                      *(_OWORD *)v468 = *(_OWORD *)(v261 + 176);
                      uint64_t v469 = *(void *)(v261 + 192);
                      *(void *)(v261 + 192) = 0;
                      *(_OWORD *)v275 = 0u;
                      std::__fs::filesystem::directory_entry::_Path __p = *(void **)(v261 + 200);
                      long long v471 = *(_OWORD *)(v261 + 208);
                      *(void *)(v261 + 216) = 0;
                      *(_OWORD *)v276 = 0u;
                      v329 = *(void **)(v261 + 224);
                      *(void *)(v261 + 224) = 0;
                      id v472 = v329;
                      __int16 v473 = *(_WORD *)(v261 + 232);
                      uint64_t v330 = *v280;
                      int v475 = *(_DWORD *)(v261 + 248);
                      uint64_t v474 = v330;
                      v476 = *(void **)(v261 + 256);
                      v331 = *(void **)(v261 + 264);
                      v477 = v331;
                      uint64_t v478 = *(void *)(v261 + 272);
                      if (v478)
                      {
                        v331[2] = &v477;
                        uint64_t *v281 = v261 + 264;
                        *(void *)(v261 + 264) = 0;
                        *(void *)(v261 + 272) = 0;
                      }
                      else
                      {
                        v476 = &v477;
                      }
                      int v479 = *(_DWORD *)(v261 + 288);
                      float v332 = *(float *)v320;
                      do
                      {
                        uint64_t v333 = v320;
                        *(float *)uint64_t v261 = v332;
                        long long v334 = *(_OWORD *)(v320 + 16);
                        long long v335 = *(_OWORD *)(v320 + 32);
                        long long v336 = *(_OWORD *)(v320 + 64);
                        *(_OWORD *)(v261 + 48) = *(_OWORD *)(v320 + 48);
                        *(_OWORD *)(v261 + 64) = v336;
                        *(_OWORD *)(v261 + 16) = v334;
                        *(_OWORD *)(v261 + 32) = v335;
                        long long v337 = *(_OWORD *)(v320 + 80);
                        long long v338 = *(_OWORD *)(v320 + 96);
                        long long v339 = *(_OWORD *)(v320 + 128);
                        *(_OWORD *)(v261 + 112) = *(_OWORD *)(v320 + 112);
                        *(_OWORD *)(v261 + 128) = v339;
                        *(_OWORD *)(v261 + 80) = v337;
                        *(_OWORD *)(v261 + 96) = v338;
                        uint64_t v340 = *(void *)(v320 + 144);
                        *(void *)(v333 + 144) = 0;
                        v341 = *(void **)(v261 + 144);
                        *(void *)(v261 + 144) = v340;

                        *(_DWORD *)(v261 + 152) = *(_DWORD *)(v333 + 152);
                        uint64_t v342 = *(void *)(v333 + 160);
                        *(void *)(v333 + 160) = 0;
                        v343 = *(void **)(v261 + 160);
                        *(void *)(v261 + 160) = v342;

                        uint64_t v344 = *(void *)(v333 + 168);
                        *(void *)(v333 + 168) = 0;
                        v345 = *(void **)(v261 + 168);
                        *(void *)(v261 + 168) = v344;

                        std::vector<float>::__move_assign(v261 + 176, (__n128 *)(v333 + 176));
                        std::vector<BOOL>::__move_assign(v261 + 200, (void *)(v333 + 200));
                        uint64_t v346 = *(void *)(v333 + 224);
                        *(void *)(v333 + 224) = 0;
                        v347 = *(void **)(v261 + 224);
                        *(void *)(v261 + 224) = v346;

                        *(_WORD *)(v261 + 232) = *(_WORD *)(v333 + 232);
                        uint64_t v348 = *(void *)(v333 + 240);
                        *(_DWORD *)(v261 + 248) = *(_DWORD *)(v333 + 248);
                        *(void *)(v261 + 240) = v348;
                        std::__tree<int>::__move_assign(v261 + 256, (void *)(v333 + 256));
                        *(_DWORD *)(v261 + 288) = *(_DWORD *)(v333 + 288);
                        if (!v319) {
                          break;
                        }
                        unint64_t v319 = (v319 - 1) >> 1;
                        uint64_t v320 = v418 + 304 * v319;
                        float v332 = *(float *)v320;
                        uint64_t v261 = v333;
                      }
                      while (*(float *)v320 < v456);
                      *(float *)uint64_t v333 = v456;
                      long long v349 = v457;
                      long long v350 = v458;
                      long long v351 = v460;
                      *(_OWORD *)(v333 + 48) = v459;
                      *(_OWORD *)(v333 + 64) = v351;
                      *(_OWORD *)(v333 + 16) = v349;
                      *(_OWORD *)(v333 + 32) = v350;
                      long long v352 = v461;
                      long long v353 = v462;
                      long long v354 = v464;
                      *(_OWORD *)(v333 + 112) = v463;
                      *(_OWORD *)(v333 + 128) = v354;
                      *(_OWORD *)(v333 + 80) = v352;
                      *(_OWORD *)(v333 + 96) = v353;
                      id v355 = v465;
                      id v465 = 0;
                      v356 = *(void **)(v333 + 144);
                      *(void *)(v333 + 144) = v355;

                      *(_DWORD *)(v333 + 152) = v466;
                      uint64_t v357 = v467;
                      *(void *)&long long v467 = 0;
                      v358 = *(void **)(v333 + 160);
                      *(void *)(v333 + 160) = v357;

                      uint64_t v359 = *((void *)&v467 + 1);
                      *((void *)&v467 + 1) = 0;
                      v360 = *(void **)(v333 + 168);
                      *(void *)(v333 + 168) = v359;

                      v361 = *(void **)(v333 + 176);
                      if (v361)
                      {
                        *(void *)(v333 + 184) = v361;
                        operator delete(v361);
                      }
                      *(_OWORD *)(v333 + 176) = *(_OWORD *)v468;
                      *(void *)(v333 + 192) = v469;
                      v468[0] = 0;
                      v468[1] = 0;
                      uint64_t v469 = 0;
                      v362 = *(void **)(v333 + 200);
                      if (v362) {
                        operator delete(v362);
                      }
                      *(void *)(v333 + 200) = __p;
                      *(_OWORD *)(v333 + 208) = v471;
                      std::__fs::filesystem::directory_entry::_Path __p = 0;
                      long long v471 = 0uLL;
                      id v363 = v472;
                      id v472 = 0;
                      v364 = *(void **)(v333 + 224);
                      *(void *)(v333 + 224) = v363;

                      *(_WORD *)(v333 + 232) = v473;
                      uint64_t v365 = v474;
                      *(_DWORD *)(v333 + 248) = v475;
                      *(void *)(v333 + 240) = v365;
                      uint64_t v366 = v333 + 264;
                      std::__tree<int>::destroy(v333 + 256, *(void **)(v333 + 264));
                      *(void *)(v333 + 256) = v476;
                      v367 = v477;
                      *(void *)(v333 + 264) = v477;
                      uint64_t v368 = v478;
                      *(void *)(v333 + 272) = v478;
                      if (v368)
                      {
                        v367[2] = v366;
                        v367 = 0;
                        v476 = &v477;
                        v477 = 0;
                        uint64_t v478 = 0;
                      }
                      else
                      {
                        *(void *)(v333 + 256) = v366;
                      }
                      *(_DWORD *)(v333 + 288) = v479;
                      std::__tree<int>::destroy((uint64_t)&v476, v367);

                      if (__p) {
                        operator delete(__p);
                      }
                      if (v468[0])
                      {
                        v468[1] = v468[0];
                        operator delete(v468[0]);
                      }
                    }
                  }
                }
                std::__tree<int>::destroy((uint64_t)&v452, v453);

                uint64_t v369 = v431;
                a2 -= 76;
                --v431;
              }
              while (v369 > 2);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          uint64_t v13 = (int *)(a1 + 304 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x9801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304 * v12), (int *)a1, v426);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304 * v12), v426);
            uint64_t v14 = 304 * v12;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304), (int *)(v14 + a1 - 304), a2 - 152);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 608), (int *)(a1 + 304 + v14), a2 - 228);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(v14 + a1 - 304), v13, (int *)(a1 + 304 + v14));
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, v13);
          }
          float v15 = *(float *)a1;
          uint64_t v428 = a3 - 1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 304) < v15) {
            break;
          }
          float v456 = *(float *)a1;
          long long v74 = *(_OWORD *)(a1 + 64);
          long long v76 = *(_OWORD *)(a1 + 16);
          long long v75 = *(_OWORD *)(a1 + 32);
          long long v459 = *(_OWORD *)(a1 + 48);
          long long v460 = v74;
          long long v457 = v76;
          long long v458 = v75;
          long long v77 = *(_OWORD *)(a1 + 128);
          long long v79 = *(_OWORD *)(a1 + 80);
          long long v78 = *(_OWORD *)(a1 + 96);
          long long v463 = *(_OWORD *)(a1 + 112);
          long long v464 = v77;
          long long v461 = v79;
          long long v462 = v78;
          v80 = *(void **)(a1 + 144);
          *(void *)(a1 + 144) = 0;
          id v465 = v80;
          int v466 = *(_DWORD *)(a1 + 152);
          long long v81 = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 160) = 0u;
          long long v82 = *(_OWORD *)(a1 + 176);
          long long v467 = v81;
          *(_OWORD *)v468 = v82;
          uint64_t v469 = *(void *)(a1 + 192);
          *(void *)(a1 + 192) = 0;
          uint64_t v83 = *(void **)(a1 + 200);
          *(_OWORD *)(a1 + 176) = 0u;
          std::__fs::filesystem::directory_entry::_Path __p = v83;
          long long v471 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 200) = 0u;
          unint64_t v84 = *(void **)(a1 + 224);
          *(void *)(a1 + 216) = 0;
          *(void *)(a1 + 224) = 0;
          id v472 = v84;
          __int16 v473 = *(_WORD *)(a1 + 232);
          uint64_t v85 = *(void *)(a1 + 240);
          int v475 = *(_DWORD *)(a1 + 248);
          uint64_t v474 = v85;
          unint64_t v86 = *(void **)(a1 + 264);
          v476 = *(void **)(a1 + 256);
          v477 = v86;
          uint64_t v478 = *(void *)(a1 + 272);
          if (v478)
          {
            v86[2] = &v477;
            *(void *)(a1 + 256) = a1 + 264;
            *(void *)(a1 + 264) = 0;
            *(void *)(a1 + 272) = 0;
          }
          else
          {
            v476 = &v477;
          }
          int v479 = *(_DWORD *)(a1 + 288);
          if (v15 >= *(float *)v426)
          {
            unint64_t v89 = a1 + 304;
            do
            {
              unint64_t v9 = v89;
              if (v89 >= (unint64_t)v8) {
                break;
              }
              v89 += 304;
            }
            while (v15 >= *(float *)v9);
          }
          else
          {
            unint64_t v87 = a1;
            do
            {
              unint64_t v9 = v87 + 304;
              float v88 = *(float *)(v87 + 304);
              v87 += 304;
            }
            while (v15 >= v88);
          }
          uint64_t v90 = (int *)v8;
          if (v9 < (unint64_t)v8)
          {
            uint64_t v90 = (int *)v8;
            do
              v90 -= 76;
            while (v15 < *(float *)v90);
          }
          while (v9 < (unint64_t)v90)
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v9, v90);
            float v15 = v456;
            do
            {
              float v91 = *(float *)(v9 + 304);
              v9 += 304;
            }
            while (v456 >= v91);
            do
              v90 -= 76;
            while (v456 < *(float *)v90);
          }
          unint64_t v92 = (_DWORD *)(v9 - 304);
          if (v9 - 304 != a1)
          {
            *(_DWORD *)a1 = *v92;
            long long v93 = *(_OWORD *)(v9 - 288);
            long long v94 = *(_OWORD *)(v9 - 272);
            long long v95 = *(_OWORD *)(v9 - 240);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v9 - 256);
            *(_OWORD *)(a1 + 64) = v95;
            *(_OWORD *)(a1 + 16) = v93;
            *(_OWORD *)(a1 + 32) = v94;
            long long v96 = *(_OWORD *)(v9 - 224);
            long long v97 = *(_OWORD *)(v9 - 208);
            long long v98 = *(_OWORD *)(v9 - 176);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v9 - 192);
            *(_OWORD *)(a1 + 128) = v98;
            *(_OWORD *)(a1 + 80) = v96;
            *(_OWORD *)(a1 + 96) = v97;
            uint64_t v99 = *(void *)(v9 - 160);
            *(void *)(v9 - 160) = 0;
            float v100 = *(void **)(a1 + 144);
            *(void *)(a1 + 144) = v99;

            *(_DWORD *)(a1 + 152) = *(_DWORD *)(v9 - 152);
            uint64_t v101 = *(void *)(v9 - 144);
            *(void *)(v9 - 144) = 0;
            float v102 = *(void **)(a1 + 160);
            *(void *)(a1 + 160) = v101;

            uint64_t v103 = *(void *)(v9 - 136);
            *(void *)(v9 - 136) = 0;
            unint64_t v104 = *(void **)(a1 + 168);
            *(void *)(a1 + 168) = v103;

            std::vector<float>::__move_assign(a1 + 176, (__n128 *)(v9 - 128));
            std::vector<BOOL>::__move_assign(a1 + 200, (void *)(v9 - 104));
            uint64_t v105 = *(void *)(v9 - 80);
            *(void *)(v9 - 80) = 0;
            unint64_t v106 = *(void **)(a1 + 224);
            *(void *)(a1 + 224) = v105;

            *(_WORD *)(a1 + 232) = *(_WORD *)(v9 - 72);
            uint64_t v107 = *(void *)(v9 - 64);
            *(_DWORD *)(a1 + 248) = *(_DWORD *)(v9 - 56);
            *(void *)(a1 + 240) = v107;
            std::__tree<int>::__move_assign(a1 + 256, (void *)(v9 - 48));
            *(_DWORD *)(a1 + 288) = *(_DWORD *)(v9 - 16);
            float v15 = v456;
          }
          *(float *)unint64_t v92 = v15;
          long long v108 = v457;
          long long v109 = v458;
          long long v110 = v460;
          *(_OWORD *)(v9 - 256) = v459;
          *(_OWORD *)(v9 - 240) = v110;
          *(_OWORD *)(v9 - 288) = v108;
          *(_OWORD *)(v9 - 272) = v109;
          long long v111 = v461;
          long long v112 = v462;
          long long v113 = v464;
          *(_OWORD *)(v9 - 192) = v463;
          *(_OWORD *)(v9 - 176) = v113;
          *(_OWORD *)(v9 - 224) = v111;
          *(_OWORD *)(v9 - 208) = v112;
          id v114 = v465;
          id v465 = 0;
          uint64_t v115 = *(void **)(v9 - 160);
          *(void *)(v9 - 160) = v114;

          *(_DWORD *)(v9 - 152) = v466;
          uint64_t v116 = v467;
          *(void *)&long long v467 = 0;
          uint64_t v117 = *(void **)(v9 - 144);
          *(void *)(v9 - 144) = v116;

          uint64_t v118 = *((void *)&v467 + 1);
          *((void *)&v467 + 1) = 0;
          BOOL v119 = *(void **)(v9 - 136);
          *(void *)(v9 - 136) = v118;

          uint64_t v120 = *(void **)(v9 - 128);
          if (v120)
          {
            *(void *)(v9 - 120) = v120;
            operator delete(v120);
            *(void *)(v9 - 128) = 0;
            *(void *)(v9 - 120) = 0;
            *(void *)(v9 - 112) = 0;
          }
          *(_OWORD *)(v9 - 128) = *(_OWORD *)v468;
          *(void *)(v9 - 112) = v469;
          v468[0] = 0;
          v468[1] = 0;
          uint64_t v469 = 0;
          simd_float4x4 v121 = *(void **)(v9 - 104);
          if (v121)
          {
            operator delete(v121);
            *(void *)(v9 - 104) = 0;
            *(void *)(v9 - 96) = 0;
            *(void *)(v9 - 88) = 0;
          }
          *(void *)(v9 - 104) = __p;
          *(_OWORD *)(v9 - 96) = v471;
          std::__fs::filesystem::directory_entry::_Path __p = 0;
          long long v471 = 0uLL;
          id v122 = v472;
          id v472 = 0;
          BOOL v123 = *(void **)(v9 - 80);
          *(void *)(v9 - 80) = v122;

          unint64_t v125 = v9 - 40;
          float32x2_t v124 = *(void **)(v9 - 40);
          *(_WORD *)(v9 - 72) = v473;
          uint64_t v126 = v474;
          *(_DWORD *)(v9 - 56) = v475;
          *(void *)(v9 - 64) = v126;
          std::__tree<int>::destroy(v9 - 48, v124);
          *(void *)(v9 - 48) = v476;
          uint64_t v127 = v477;
          *(void *)(v9 - 40) = v477;
          uint64_t v128 = v478;
          *(void *)(v9 - 32) = v478;
          if (v128)
          {
            BOOL v129 = 0;
            v127[2] = v125;
            v476 = &v477;
            v477 = 0;
            uint64_t v478 = 0;
          }
          else
          {
            *(void *)(v9 - 48) = v125;
            BOOL v129 = v477;
          }
          *(_DWORD *)(v9 - 16) = v479;
          std::__tree<int>::destroy((uint64_t)&v476, v129);

          if (__p) {
            operator delete(__p);
          }
          if (v468[0])
          {
            v468[1] = v468[0];
            operator delete(v468[0]);
          }

          a4 = 0;
          a3 = v428;
          uint64_t v8 = (float *)a2;
        }
        float v456 = *(float *)a1;
        long long v16 = *(_OWORD *)(a1 + 64);
        long long v18 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 32);
        long long v459 = *(_OWORD *)(a1 + 48);
        long long v460 = v16;
        long long v457 = v18;
        long long v458 = v17;
        long long v19 = *(_OWORD *)(a1 + 128);
        long long v21 = *(_OWORD *)(a1 + 80);
        long long v20 = *(_OWORD *)(a1 + 96);
        long long v463 = *(_OWORD *)(a1 + 112);
        long long v464 = v19;
        long long v461 = v21;
        long long v462 = v20;
        int v22 = *(void **)(a1 + 144);
        *(void *)(a1 + 144) = 0;
        id v465 = v22;
        int v466 = *(_DWORD *)(a1 + 152);
        long long v23 = *(_OWORD *)(a1 + 160);
        *(_OWORD *)(a1 + 160) = 0u;
        long long v24 = *(_OWORD *)(a1 + 176);
        long long v467 = v23;
        *(_OWORD *)v468 = v24;
        uint64_t v469 = *(void *)(a1 + 192);
        *(void *)(a1 + 192) = 0;
        float v25 = *(void **)(a1 + 200);
        *(_OWORD *)(a1 + 176) = 0u;
        std::__fs::filesystem::directory_entry::_Path __p = v25;
        long long v471 = *(_OWORD *)(a1 + 208);
        *(_OWORD *)(a1 + 200) = 0u;
        uint64_t v26 = *(void **)(a1 + 224);
        *(void *)(a1 + 216) = 0;
        *(void *)(a1 + 224) = 0;
        id v472 = v26;
        __int16 v473 = *(_WORD *)(a1 + 232);
        uint64_t v27 = *(void *)(a1 + 240);
        int v475 = *(_DWORD *)(a1 + 248);
        uint64_t v474 = v27;
        unint64_t v28 = *(void **)(a1 + 264);
        v476 = *(void **)(a1 + 256);
        v477 = v28;
        uint64_t v478 = *(void *)(a1 + 272);
        if (v478)
        {
          void v28[2] = &v477;
          *(void *)(a1 + 256) = a1 + 264;
          *(void *)(a1 + 264) = 0;
          *(void *)(a1 + 272) = 0;
        }
        else
        {
          v476 = &v477;
        }
        uint64_t v29 = 0;
        int v479 = *(_DWORD *)(a1 + 288);
        do
        {
          float v30 = *(float *)(a1 + v29 + 304);
          v29 += 304;
        }
        while (v30 < v15);
        unint64_t v31 = a1 + v29;
        if (v29 == 304)
        {
          uint64_t v8 = (float *)a2;
          do
          {
            if (v31 >= (unint64_t)v8) {
              break;
            }
            v8 -= 76;
          }
          while (*v8 >= v15);
        }
        else
        {
          do
            v8 -= 76;
          while (*v8 >= v15);
        }
        unint64_t v9 = a1 + v29;
        if (v31 < (unint64_t)v8)
        {
          long long v32 = (int *)v8;
          do
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v9, v32);
            float v15 = v456;
            do
            {
              float v33 = *(float *)(v9 + 304);
              v9 += 304;
            }
            while (v33 < v456);
            do
              v32 -= 76;
            while (*(float *)v32 >= v456);
          }
          while (v9 < (unint64_t)v32);
        }
        unint64_t v34 = (_DWORD *)(v9 - 304);
        if (v9 - 304 != a1)
        {
          *(_DWORD *)a1 = *v34;
          long long v35 = *(_OWORD *)(v9 - 288);
          long long v36 = *(_OWORD *)(v9 - 272);
          long long v37 = *(_OWORD *)(v9 - 240);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v9 - 256);
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 16) = v35;
          *(_OWORD *)(a1 + 32) = v36;
          long long v38 = *(_OWORD *)(v9 - 224);
          long long v39 = *(_OWORD *)(v9 - 208);
          long long v40 = *(_OWORD *)(v9 - 176);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v9 - 192);
          *(_OWORD *)(a1 + 128) = v40;
          *(_OWORD *)(a1 + 80) = v38;
          *(_OWORD *)(a1 + 96) = v39;
          uint64_t v41 = *(void *)(v9 - 160);
          *(void *)(v9 - 160) = 0;
          unsigned int v42 = *(void **)(a1 + 144);
          *(void *)(a1 + 144) = v41;

          *(_DWORD *)(a1 + 152) = *(_DWORD *)(v9 - 152);
          uint64_t v43 = *(void *)(v9 - 144);
          *(void *)(v9 - 144) = 0;
          uint64_t v44 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v43;

          uint64_t v45 = *(void *)(v9 - 136);
          *(void *)(v9 - 136) = 0;
          uint64_t v46 = *(void **)(a1 + 168);
          *(void *)(a1 + 168) = v45;

          std::vector<float>::__move_assign(a1 + 176, (__n128 *)(v9 - 128));
          std::vector<BOOL>::__move_assign(a1 + 200, (void *)(v9 - 104));
          uint64_t v47 = *(void *)(v9 - 80);
          *(void *)(v9 - 80) = 0;
          int v48 = *(void **)(a1 + 224);
          *(void *)(a1 + 224) = v47;

          *(_WORD *)(a1 + 232) = *(_WORD *)(v9 - 72);
          uint64_t v49 = *(void *)(v9 - 64);
          *(_DWORD *)(a1 + 248) = *(_DWORD *)(v9 - 56);
          *(void *)(a1 + 240) = v49;
          std::__tree<int>::__move_assign(a1 + 256, (void *)(v9 - 48));
          *(_DWORD *)(a1 + 288) = *(_DWORD *)(v9 - 16);
          float v15 = v456;
        }
        *(float *)unint64_t v34 = v15;
        long long v50 = v457;
        long long v51 = v458;
        long long v52 = v460;
        *(_OWORD *)(v9 - 256) = v459;
        *(_OWORD *)(v9 - 240) = v52;
        *(_OWORD *)(v9 - 288) = v50;
        *(_OWORD *)(v9 - 272) = v51;
        long long v53 = v461;
        long long v54 = v462;
        long long v55 = v464;
        *(_OWORD *)(v9 - 192) = v463;
        *(_OWORD *)(v9 - 176) = v55;
        *(_OWORD *)(v9 - 224) = v53;
        *(_OWORD *)(v9 - 208) = v54;
        id v56 = v465;
        id v465 = 0;
        uint64_t v57 = *(void **)(v9 - 160);
        *(void *)(v9 - 160) = v56;

        *(_DWORD *)(v9 - 152) = v466;
        uint64_t v58 = v467;
        *(void *)&long long v467 = 0;
        float32x4_t v59 = *(void **)(v9 - 144);
        *(void *)(v9 - 144) = v58;

        uint64_t v60 = *((void *)&v467 + 1);
        *((void *)&v467 + 1) = 0;
        float32x4_t v61 = *(void **)(v9 - 136);
        *(void *)(v9 - 136) = v60;

        float32x4_t v62 = *(void **)(v9 - 128);
        if (v62)
        {
          *(void *)(v9 - 120) = v62;
          operator delete(v62);
          *(void *)(v9 - 128) = 0;
          *(void *)(v9 - 120) = 0;
          *(void *)(v9 - 112) = 0;
        }
        *(_OWORD *)(v9 - 128) = *(_OWORD *)v468;
        *(void *)(v9 - 112) = v469;
        v468[0] = 0;
        v468[1] = 0;
        uint64_t v469 = 0;
        uint64_t v63 = *(void **)(v9 - 104);
        if (v63)
        {
          operator delete(v63);
          *(void *)(v9 - 104) = 0;
          *(void *)(v9 - 96) = 0;
          *(void *)(v9 - 88) = 0;
        }
        *(void *)(v9 - 104) = __p;
        *(_OWORD *)(v9 - 96) = v471;
        std::__fs::filesystem::directory_entry::_Path __p = 0;
        long long v471 = 0uLL;
        id v64 = v472;
        id v472 = 0;
        uint64_t v65 = *(void **)(v9 - 80);
        *(void *)(v9 - 80) = v64;

        unint64_t v67 = v9 - 40;
        int v66 = *(void **)(v9 - 40);
        *(_WORD *)(v9 - 72) = v473;
        uint64_t v68 = v474;
        *(_DWORD *)(v9 - 56) = v475;
        *(void *)(v9 - 64) = v68;
        std::__tree<int>::destroy(v9 - 48, v66);
        *(void *)(v9 - 48) = v476;
        unint64_t v69 = v477;
        *(void *)(v9 - 40) = v477;
        uint64_t v70 = v478;
        *(void *)(v9 - 32) = v478;
        if (v70)
        {
          unint64_t v71 = 0;
          v69[2] = v67;
          v476 = &v477;
          v477 = 0;
          uint64_t v478 = 0;
        }
        else
        {
          *(void *)(v9 - 48) = v67;
          unint64_t v71 = v477;
        }
        *(_DWORD *)(v9 - 16) = v479;
        std::__tree<int>::destroy((uint64_t)&v476, v71);

        if (__p) {
          operator delete(__p);
        }
        if (v468[0])
        {
          v468[1] = v468[0];
          operator delete(v468[0]);
        }
        BOOL v72 = v31 < (unint64_t)v8;

        a3 = v428;
        uint64_t v8 = (float *)a2;
        if (!v72) {
          break;
        }
LABEL_45:
        std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>(a1, v9 - 304, v428, a4 & 1);
        a4 = 0;
      }
      BOOL v73 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(v9 - 304));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v9, a2))
      {
        break;
      }
      if (!v73) {
        goto LABEL_45;
      }
    }
    a2 = (int *)(v9 - 304);
    if (!v73) {
      continue;
    }
    break;
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2, int *a3)
{
  char v5 = (float *)a1;
  float v6 = *(float *)a2;
  float v7 = *(float *)a3;
  if (*(float *)a2 >= *(float *)a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a2, a3);
    if (*(float *)a2 >= *v5) {
      return;
    }
    a1 = (int *)v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2);
      if (*(float *)a3 >= *(float *)a2) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }
  std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, v8);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(0x86BCA1AF286BCA1BLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = a2 - 76;
      if (*((float *)a2 - 76) < *(float *)a1)
      {
        float v7 = a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a2 - 76);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152, a2 - 76);
      return 1;
    case 5uLL:
      uint64_t v47 = (float *)(a1 + 152);
      int v48 = a2 - 76;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152, a1 + 228);
      if (*(float *)v48 < *((float *)a1 + 228))
      {
        std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 228, v48);
        if (*((float *)a1 + 228) < *v47)
        {
          std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 152, a1 + 228);
          if (*v47 < *((float *)a1 + 76))
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 76, a1 + 152);
            if (*((float *)a1 + 76) < *(float *)a1)
            {
              float v7 = a1;
              float v6 = a1 + 76;
LABEL_4:
              std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = (float *)(a1 + 152);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152);
      unint64_t v9 = a1 + 228;
      if (a1 + 228 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)v9 < *v8)
    {
      float v49 = *(float *)v9;
      long long v54 = *((_OWORD *)v9 + 5);
      long long v55 = *((_OWORD *)v9 + 6);
      long long v56 = *((_OWORD *)v9 + 7);
      long long v57 = *((_OWORD *)v9 + 8);
      long long v50 = *((_OWORD *)v9 + 1);
      long long v51 = *((_OWORD *)v9 + 2);
      long long v52 = *((_OWORD *)v9 + 3);
      long long v53 = *((_OWORD *)v9 + 4);
      uint64_t v12 = *((void *)v9 + 18);
      *((void *)v9 + 18) = 0;
      uint64_t v58 = v12;
      int v59 = v9[38];
      long long v60 = *((_OWORD *)v9 + 10);
      *(_OWORD *)float32x4_t v61 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 11) = 0u;
      uint64_t v62 = *((void *)v9 + 24);
      std::__fs::filesystem::directory_entry::_Path __p = (void *)*((void *)v9 + 25);
      long long v64 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      uint64_t v13 = *((void *)v9 + 28);
      *((void *)v9 + 28) = 0;
      uint64_t v65 = v13;
      __int16 v66 = *((_WORD *)v9 + 116);
      int v68 = v9[62];
      uint64_t v67 = *((void *)v9 + 30);
      uint64_t v14 = (void *)*((void *)v9 + 33);
      unint64_t v69 = (void *)*((void *)v9 + 32);
      uint64_t v70 = v14;
      uint64_t v71 = *((void *)v9 + 34);
      if (v71)
      {
        v14[2] = &v70;
        *((void *)v9 + 32) = v9 + 66;
        *((void *)v9 + 33) = 0;
        *((void *)v9 + 34) = 0;
      }
      else
      {
        unint64_t v69 = &v70;
      }
      int v72 = v9[72];
      float v15 = *v8;
      uint64_t v16 = v10;
      while (1)
      {
        uint64_t v17 = v16;
        long long v18 = (float *)((char *)a1 + v16);
        v18[228] = v15;
        long long v19 = *(_OWORD *)((char *)a1 + v16 + 704);
        *((_OWORD *)v18 + 62) = *(_OWORD *)((char *)a1 + v16 + 688);
        *((_OWORD *)v18 + 63) = v19;
        long long v20 = *(_OWORD *)((char *)a1 + v16 + 736);
        *((_OWORD *)v18 + 64) = *(_OWORD *)((char *)a1 + v16 + 720);
        *((_OWORD *)v18 + 65) = v20;
        long long v21 = *(_OWORD *)((char *)a1 + v16 + 640);
        *((_OWORD *)v18 + 58) = *(_OWORD *)((char *)a1 + v16 + 624);
        *((_OWORD *)v18 + 59) = v21;
        long long v22 = *(_OWORD *)((char *)a1 + v16 + 672);
        *((_OWORD *)v18 + 60) = *(_OWORD *)((char *)a1 + v16 + 656);
        *((_OWORD *)v18 + 61) = v22;
        uint64_t v23 = *(void *)((char *)a1 + v16 + 752);
        *((void *)v18 + 94) = 0;
        long long v24 = (void *)*((void *)v18 + 132);
        *((void *)v18 + 132) = v23;

        v18[266] = v18[190];
        uint64_t v25 = *((void *)v18 + 96);
        *((void *)v18 + 96) = 0;
        uint64_t v26 = (void *)*((void *)v18 + 134);
        *((void *)v18 + 134) = v25;

        uint64_t v27 = *((void *)v18 + 97);
        *((void *)v18 + 97) = 0;
        unint64_t v28 = (__n128 *)((char *)a1 + v17);
        uint64_t v29 = *(void **)((char *)a1 + v17 + 1080);
        *(void *)((char *)a1 + v17 + 1080) = v27;

        std::vector<float>::__move_assign((uint64_t)&v28[68], v28 + 49);
        std::vector<BOOL>::__move_assign((uint64_t)&v28[69].n128_i64[1], &v28[50].n128_u64[1]);
        unint64_t v30 = *(void *)((char *)a1 + v17 + 832);
        v28[52].n128_u64[0] = 0;
        unint64_t v31 = *(void **)((char *)a1 + v17 + 1136);
        v28[71].n128_u64[0] = v30;

        long long v32 = (char *)a1 + v17;
        *((_WORD *)v32 + 572) = *(_WORD *)((char *)a1 + v17 + 840);
        *((void *)v32 + 144) = *(void *)((char *)a1 + v17 + 848);
        *((_DWORD *)v32 + 290) = *(int *)((char *)a1 + v17 + 856);
        std::__tree<int>::__move_assign((uint64_t)a1 + v17 + 1168, (int *)((char *)a1 + v17 + 864));
        *((_DWORD *)v32 + 300) = *((_DWORD *)v32 + 224);
        if (v17 == -608) {
          break;
        }
        float v15 = *((float *)v32 + 76);
        uint64_t v16 = v17 - 304;
        if (v49 >= v15)
        {
          uint64_t v33 = (uint64_t)a1 + v16 + 912;
          goto LABEL_16;
        }
      }
      uint64_t v33 = (uint64_t)a1;
LABEL_16:
      *(float *)uint64_t v33 = v49;
      *((_OWORD *)v32 + 45) = v56;
      *((_OWORD *)v32 + 46) = v57;
      *((_OWORD *)v32 + 43) = v54;
      *((_OWORD *)v32 + 44) = v55;
      *((_OWORD *)v32 + 39) = v50;
      *((_OWORD *)v32 + 40) = v51;
      *((_OWORD *)v32 + 41) = v52;
      *((_OWORD *)v32 + 42) = v53;
      unint64_t v34 = *(void **)(v33 + 144);
      *(void *)(v33 + 144) = v58;

      *(_DWORD *)(v33 + 152) = v59;
      long long v35 = *(void **)(v33 + 160);
      *(void *)(v33 + 160) = v60;

      long long v36 = *(void **)(v33 + 168);
      *(void *)(v33 + 168) = *((void *)&v60 + 1);

      long long v37 = (char *)a1 + v17;
      long long v38 = (void **)((char *)a1 + v17 + 784);
      long long v39 = *v38;
      if (*v38)
      {
        *(void *)(v33 + 184) = v39;
        operator delete(v39);
        OU3DKitchenObject *v38 = 0;
        *(void *)((char *)a1 + v17 + 792) = 0;
        *(void *)((char *)a1 + v17 + 800) = 0;
      }
      long long v40 = v37 + 808;
      OU3DKitchenObject *v38 = v61[0];
      *(void **)(v33 + 184) = v61[1];
      *(void *)(v33 + 192) = v62;
      uint64_t v41 = (void *)*((void *)v37 + 101);
      if (v41)
      {
        operator delete(v41);
        *long long v40 = 0;
        *((void *)v37 + 102) = 0;
        *((void *)v37 + 103) = 0;
      }
      *long long v40 = __p;
      *(_OWORD *)(v33 + 208) = v64;
      unsigned int v42 = *(void **)(v33 + 224);
      *(void *)(v33 + 224) = v65;

      *(_WORD *)(v33 + 232) = v66;
      *((_DWORD *)v37 + 214) = v68;
      *((void *)v37 + 106) = v67;
      uint64_t v43 = v33 + 264;
      std::__tree<int>::destroy((uint64_t)(v37 + 864), *(void **)(v33 + 264));
      uint64_t v44 = v70;
      *((void *)v37 + 108) = v69;
      uint64_t v45 = v71;
      *(void *)(v33 + 264) = v44;
      *(void *)(v33 + 272) = v45;
      if (v45)
      {
        uint64_t v46 = 0;
        v44[2] = v43;
        unint64_t v69 = &v70;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
      }
      else
      {
        *((void *)v37 + 108) = v43;
        uint64_t v46 = v70;
      }
      *(_DWORD *)(v33 + 288) = v72;
      std::__tree<int>::destroy((uint64_t)&v69, v46);

      ++v11;
      if (v11 == 8) {
        return v9 + 76 == a2;
      }
    }
    uint64_t v8 = (float *)v9;
    v10 += 304;
    v9 += 76;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v38 = *a1;
  long long v43 = *((_OWORD *)a1 + 5);
  long long v44 = *((_OWORD *)a1 + 6);
  long long v45 = *((_OWORD *)a1 + 7);
  long long v46 = *((_OWORD *)a1 + 8);
  long long v39 = *((_OWORD *)a1 + 1);
  long long v40 = *((_OWORD *)a1 + 2);
  long long v41 = *((_OWORD *)a1 + 3);
  long long v42 = *((_OWORD *)a1 + 4);
  uint64_t v4 = (void *)*((void *)a1 + 18);
  *((void *)a1 + 18) = 0;
  uint64_t v47 = v4;
  int v48 = a1[38];
  long long v5 = *((_OWORD *)a1 + 10);
  *((_OWORD *)a1 + 10) = 0u;
  uint64_t v6 = (uint64_t)(a1 + 44);
  long long v49 = v5;
  *(_OWORD *)long long v50 = *((_OWORD *)a1 + 11);
  uint64_t v7 = *((void *)a1 + 24);
  *((_OWORD *)a1 + 11) = 0u;
  uint64_t v8 = (uint64_t)(a1 + 50);
  uint64_t v51 = v7;
  std::__fs::filesystem::directory_entry::_Path __p = (void *)*((void *)a1 + 25);
  long long v53 = *((_OWORD *)a1 + 13);
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  uint64_t v9 = *((void *)a1 + 28);
  *((void *)a1 + 28) = 0;
  uint64_t v54 = v9;
  uint64_t v10 = a1 + 60;
  __int16 v55 = *((_WORD *)a1 + 116);
  int v57 = a1[62];
  uint64_t v56 = *((void *)a1 + 30);
  int v11 = (void *)*((void *)a1 + 33);
  uint64_t v58 = (void *)*((void *)a1 + 32);
  int v59 = v11;
  uint64_t v60 = *((void *)a1 + 34);
  uint64_t v37 = (uint64_t)(a1 + 64);
  if (v60)
  {
    v11[2] = &v59;
    *((void *)a1 + 32) = a1 + 66;
    *((void *)a1 + 33) = 0;
    *((void *)a1 + 34) = 0;
  }
  else
  {
    uint64_t v58 = &v59;
  }
  int v61 = a1[72];
  *a1 = *a2;
  long long v12 = *((_OWORD *)a2 + 5);
  long long v13 = *((_OWORD *)a2 + 6);
  long long v14 = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 8) = v14;
  *((_OWORD *)a1 + 5) = v12;
  *((_OWORD *)a1 + 6) = v13;
  long long v15 = *((_OWORD *)a2 + 1);
  long long v16 = *((_OWORD *)a2 + 2);
  long long v17 = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 4) = v17;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  long long v19 = (void **)(a2 + 36);
  uint64_t v18 = *((void *)a2 + 18);
  *((void *)a2 + 18) = 0;
  long long v20 = (void *)*((void *)a1 + 18);
  *((void *)a1 + 18) = v18;

  uint64_t v21 = *((void *)a2 + 20);
  a1[38] = a2[38];
  *((void *)a2 + 20) = 0;
  long long v22 = (void *)*((void *)a1 + 20);
  *((void *)a1 + 20) = v21;

  uint64_t v23 = *((void *)a2 + 21);
  *((void *)a2 + 21) = 0;
  long long v24 = (void *)*((void *)a1 + 21);
  *((void *)a1 + 21) = v23;

  std::vector<float>::__move_assign(v6, (__n128 *)a2 + 11);
  std::vector<BOOL>::__move_assign(v8, (void *)a2 + 25);
  uint64_t v25 = *((void *)a2 + 28);
  *((void *)a2 + 28) = 0;
  uint64_t v26 = (void *)*((void *)a1 + 28);
  *((void *)a1 + 28) = v25;

  *((_WORD *)a1 + 116) = *((_WORD *)a2 + 116);
  uint64_t v27 = *((void *)a2 + 30);
  v10[2] = a2[62];
  *(void *)uint64_t v10 = v27;
  std::__tree<int>::__move_assign(v37, (void *)a2 + 32);
  a1[72] = a2[72];
  *a2 = v38;
  *((_OWORD *)a2 + 5) = v43;
  *((_OWORD *)a2 + 6) = v44;
  *((_OWORD *)a2 + 7) = v45;
  *((_OWORD *)a2 + 8) = v46;
  *((_OWORD *)a2 + 1) = v39;
  *((_OWORD *)a2 + 2) = v40;
  *((_OWORD *)a2 + 3) = v41;
  *((_OWORD *)a2 + 4) = v42;
  unint64_t v28 = *v19;
  *long long v19 = v47;

  a2[38] = v48;
  uint64_t v29 = (void *)*((void *)a2 + 20);
  *((void *)a2 + 20) = v49;

  unint64_t v30 = (void *)*((void *)a2 + 21);
  *((void *)a2 + 21) = *((void *)&v49 + 1);

  unint64_t v31 = (void *)*((void *)a2 + 22);
  if (v31)
  {
    *((void *)a2 + 23) = v31;
    operator delete(v31);
  }
  *((_OWORD *)a2 + 11) = *(_OWORD *)v50;
  *((void *)a2 + 24) = v51;
  long long v32 = (void *)*((void *)a2 + 25);
  if (v32) {
    operator delete(v32);
  }
  *((void *)a2 + 25) = __p;
  *((_OWORD *)a2 + 13) = v53;
  uint64_t v33 = (void *)*((void *)a2 + 28);
  *((void *)a2 + 28) = v54;

  *((_WORD *)a2 + 116) = v55;
  *((void *)a2 + 30) = v56;
  a2[62] = v57;
  unint64_t v34 = a2 + 66;
  std::__tree<int>::destroy((uint64_t)(a2 + 64), *((void **)a2 + 33));
  long long v35 = v59;
  *((void *)a2 + 32) = v58;
  *((void *)a2 + 33) = v35;
  uint64_t v36 = v60;
  *((void *)a2 + 34) = v60;
  if (v36)
  {
    v35[2] = v34;
    long long v35 = 0;
    uint64_t v58 = &v59;
    int v59 = 0;
    uint64_t v60 = 0;
  }
  else
  {
    *((void *)a2 + 32) = v34;
  }
  a2[72] = v61;
  std::__tree<int>::destroy((uint64_t)&v58, v35);
}

void std::__tree<int>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<int>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2, int *a3, int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2, a3);
  if (*(float *)a4 < *(float *)a3)
  {
    std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a3, a4);
    if (*(float *)a3 < *(float *)a2)
    {
      std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a2, a3);
      if (*(float *)a2 < *(float *)a1)
      {
        std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2);
      }
    }
  }
}

uint64_t OUBox3d::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  objc_storeStrong((id *)(a1 + 128), *((id *)a2 + 16));
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  objc_storeStrong((id *)(a1 + 144), *((id *)a2 + 18));
  objc_storeStrong((id *)(a1 + 152), *((id *)a2 + 19));
  if ((long long *)a1 != a2) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 160), *((char **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 2);
  }
  std::vector<BOOL>::operator=((void **)(a1 + 184), (uint64_t)a2 + 184);
  objc_storeStrong((id *)(a1 + 208), *((id *)a2 + 26));
  *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  if (a1 != (void **)a2)
  {
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      if (v4 > (void)a1[2] << 6)
      {
        long long v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          unint64_t v4 = *(void *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        unint64_t v4 = *(void *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      long long v6 = *(void **)(a2 + 8);
    }
    else
    {
      long long v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

void std::vector<OUBox3d>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  long long v5 = (long long *)*a1;
  unint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 224;
    v4 -= 14;
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a2);
}

__n128 std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v8 = *((void *)a2 + 16);
  *((void *)a2 + 16) = 0;
  *(void *)(a1 + 128) = v8;
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  long long v9 = a2[9];
  a2[9] = 0u;
  *(_OWORD *)(a1 + 144) = v9;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  __n128 result = (__n128)a2[10];
  *(__n128 *)(a1 + 160) = result;
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *((void *)a2 + 22) = 0;
  a2[10] = 0u;
  uint64_t v11 = *((void *)a2 + 24);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(void *)(a1 + 192) = v11;
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  *(long long *)((char *)a2 + 184) = 0u;
  uint64_t v12 = *((void *)a2 + 26);
  *(long long *)((char *)a2 + 200) = 0u;
  *(void *)(a1 + 208) = v12;
  *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
  return result;
}

void std::__destroy_at[abi:ne180100]<OUBox3d,0>(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 184);
  if (v2) {
    operator delete(v2);
  }
  long long v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }

  long long v4 = *(void **)(a1 + 128);
}

uint64_t std::__split_buffer<OUBox3d>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    std::__destroy_at[abi:ne180100]<OUBox3d,0>(i - 224);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(uint64_t *a1, const OUBox3d *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (OUBox3d *)&v10[224 * v4];
  long long v16 = &v10[224 * v9];
  OUBox3d::OUBox3d(v14, a2);
  p_var5 = &v14[2].var5;
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_237C29458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<int,std::set<int>>::at(uint64_t a1, int *a2)
{
  long long v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      long long v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    long long v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264CFAB10, MEMORY[0x263F8C068]);
}

void sub_237C29590(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t std::deque<OU3DKitchenObject>::~deque[abi:ne180100](void *a1)
{
  long long v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    long long v6 = &v2[v5 >> 4];
    uint64_t v7 = (uint64_t)*v6 + 272 * (v5 & 0xF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v7);
        v7 += 272;
        if (v7 - (void)*v6 == 4352)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      long long v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      long long v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 8;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    long long v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<OU3DKitchenObject *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<OU3DKitchenObject *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  int v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<OU3DKitchenObject>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1100uLL);
      std::__split_buffer<OU3DKitchenObject *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1100uLL);
    std::__split_buffer<OU3DKitchenObject *>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = _ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1100uLL);
  std::__split_buffer<OU3DKitchenObject *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<OU3DKitchenObject *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_237C29A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<OU3DKitchenObject *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  long long v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      long long v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        long long v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        long long v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        long long v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      long long v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)long long v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    long long v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1[4], v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<OU3DKitchenObject *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::deque<OU3DKitchenObject>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = (void *)(a1 + 40);
    uint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = &v4[v7 >> 4];
    uint64_t v9 = (uint64_t)*v8 + 272 * (v7 & 0xF);
    uint64_t v10 = *(uint64_t *)((char *)v4 + (((*(void *)(a1 + 40) + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 272 * ((*(_DWORD *)(a1 + 40) + (int)v7) & 0xF);
    if (v9 != v10)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v9);
        v9 += 272;
        if (v9 - (void)*v8 == 4352)
        {
          uint64_t v11 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v11;
        }
      }
      while (v9 != v10);
      uint64_t v4 = *(void ***)(a1 + 8);
      uint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  void *v6 = 0;
  unint64_t v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v12 = v13 - (void)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 8;
    goto LABEL_14;
  }
  if (v12 >> 3 == 2)
  {
    uint64_t v14 = 16;
LABEL_14:
    *(void *)(a1 + 32) = v14;
  }
  std::deque<OU3DKitchenObject>::shrink_to_fit((void **)a1);
  uint64_t result = std::__split_buffer<OU3DKitchenObject *>::operator=(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::deque<OU3DKitchenObject>::shrink_to_fit(void **a1)
{
  if (a1[5])
  {
    std::deque<OU3DKitchenObject>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<OU3DKitchenObject>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    BOOL v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      BOOL v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit(a1);
}

uint64_t std::deque<OU3DKitchenObject>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x10) {
    a2 = 1;
  }
  if (v2 < 0x20) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<OU3DKitchenObject>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 2 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x10) {
    a2 = 1;
  }
  if (v5 < 0x20) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    uint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  uint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  int64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t std::__split_buffer<OU3DKitchenObject *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_237C2A5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t **result, int *a2, int *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    uint64_t *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    BOOL v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<int>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint8x8_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          unint64_t v8 = v15;
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<int>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint8x8_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint8x8_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<int>::__emplace_multi<int const&>(v5, a2 + 7);
      unint64_t v12 = (int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          float v13 = v12;
          unint64_t v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_237C2AA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = a1 + 1;
  uint8x8_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint8x8_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint8x8_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<int>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void *std::__tree<int>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint8x8_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint8x8_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          unint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<int>::destroy(*(void *)a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int8x8_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<int>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<int>::__emplace_multi<int const&>(uint64_t **a1, int *a2)
{
  uint8x8_t v4 = (uint64_t *)operator new(0x20uLL);
  int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<int>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 12;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<int>::__assign_unique<int const*>(uint64_t **result, int *a2, int *a3)
{
  int v5 = result;
  if (result[2])
  {
    v12[0] = result;
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = v6[1];
    }
    else {
      uint64_t v8 = (uint64_t)v6;
    }
    if (!v8)
    {
      uint8x8_t v9 = 0;
      goto LABEL_16;
    }
    uint8x8_t v9 = std::__tree<int>::_DetachedTreeCache::__detach_next(v8);
    for (uint64_t i = (uint64_t)v9; a2 != a3; ++a2)
    {
      std::__tree<int>::__node_assign_unique(v5, a2, v8);
      if (v11)
      {
        if (!i)
        {
          uint8x8_t v9 = 0;
          uint64_t v8 = 0;
          ++a2;
          break;
        }
        uint8x8_t v9 = std::__tree<int>::_DetachedTreeCache::__detach_next(i);
        uint64_t v8 = i;
        uint64_t i = (uint64_t)v9;
      }
      else
      {
        uint8x8_t v9 = (void *)i;
      }
    }
LABEL_16:
    v12[1] = v9;
    v12[2] = v8;
    uint64_t result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)v12);
  }
  while (a2 != a3)
  {
    uint64_t result = std::__tree<int>::__emplace_unique_key_args<int,int const&>(v5, a2, a2);
    ++a2;
  }
  return result;
}

uint64_t **std::__tree<int>::__node_assign_unique(uint64_t **a1, int *a2, uint64_t a3)
{
  uint8x8_t v4 = a1 + 1;
  int v5 = a1[1];
  int v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v6 >= v8) {
          break;
        }
        int v5 = *v7;
        uint8x8_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        return v7;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint8x8_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 28) = v6;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v7, v4, (uint64_t *)a3);
  }
  return (uint64_t **)a3;
}

uint64_t std::__tree<int>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  std::__tree<int>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<int>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      float v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *float v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _OWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      size_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    size_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *unint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    uint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void _GLOBAL__sub_I_OU3DKitchenObjectMerger_mm()
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x237E2CC70]();
  uint64_t v9 = @"Refrigerator";
  uint64_t v10 = @"Oven";
  uint64_t v11 = @"Dishwasher";
  uint64_t v12 = @"Stove";
  qword_26AF27868 = 0;
  qword_26AF27870 = 0;
  uint64_t v1 = (char *)operator new(0x20uLL);
  uint64_t v2 = 0;
  qword_26AF27868 = (uint64_t)v1;
  qword_26AF27870 = (uint64_t)(v1 + 32);
  do
  {
    *(void *)&v1[v2] = *(__CFString **)((char *)&v9 + v2);
    v2 += 8;
  }
  while (v2 != 32);
  qword_26AF27868 = (uint64_t)(v1 + 32);
  for (uint64_t i = 24; i != -8; i -= 8)

  uint64_t v9 = @"Stool";
  uint64_t v10 = @"Chair";
  uint64_t v11 = @"Bed";
  uint64_t v12 = @"Washer";
  float v13 = @"Toilet";
  uint64_t v14 = @"Bathtub";
  unint64_t v15 = @"Fireplace";
  unint64_t v16 = @"Table";
  size_t v17 = @"Screen";
  uint64_t v18 = @"Sofa";
  uint64_t v19 = @"Stairs";
  unint64_t v20 = @"Window";
  BOOL v21 = @"Door";
  qword_26AF272E8 = 0;
  qword_26AF272F0 = 0;
  uint64_t v4 = (char *)operator new(0x68uLL);
  uint64_t v5 = 0;
  qword_26AF272E8 = (uint64_t)v4;
  qword_26AF272F0 = (uint64_t)(v4 + 104);
  do
  {
    *(void *)&v4[v5] = *(__CFString **)((char *)&v9 + v5);
    v5 += 8;
  }
  while (v5 != 104);
  qword_26AF272E8 = (uint64_t)(v4 + 104);
  for (uint64_t j = 96; j != -8; j -= 8)

  uint64_t v7 = @"Sink";
  qword_26AF27318 = 0;
  unk_26AF27320 = 0;
  LOBYTE(v10) = 0;
  int v8 = operator new(8uLL);
  void *v8 = v7;
  qword_26AF27318 = (uint64_t)(v8 + 1);
  unk_26AF27320 = v8 + 1;
}

void sub_237C2B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DLShapeSofaOfflineMerger::GetLShapeMergeInfo(ou3dor::OU3DLShapeSofaOfflineMerger *this)
{
  return (uint64_t)ou3dod::HistoryMergeInfo::Get(this) + 40;
}

long long *ou3dod::HistoryMergeInfo::Get(ou3dod::HistoryMergeInfo *this)
{
  {
    ou3dod::HistoryMergeInfo::Get(void)::history_merge_info = 0u;
    *(_OWORD *)algn_268946D90 = 0u;
    dword_268946DA0 = 1065353216;
    unk_268946DA8 = 0u;
    unk_268946DB8 = 0u;
    dword_268946DC8 = 1065353216;
    __cxa_atexit((void (*)(void *))ou3dod::HistoryMergeInfo::~HistoryMergeInfo, &ou3dod::HistoryMergeInfo::Get(void)::history_merge_info, &dword_237C17000);
  }
  return &ou3dod::HistoryMergeInfo::Get(void)::history_merge_info;
}

void ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape(ou3dod::HistoryMergeInfo *a1@<X0>, const OUBox3d **a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = ou3dod::HistoryMergeInfo::Get(a1);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::clear((uint64_t)v7 + 40);
  uint64_t v9 = ou3dod::HistoryMergeInfo::Get(v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v9);
  long long v93 = 0;
  long long v94 = 0;
  unint64_t v95 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v10 = a4;
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (*a2 == v11)
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    do
    {
      if ([v12[1].var5.var0 isEqualToString:@"Sofa"])
      {
        float v13 = v94;
        if ((unint64_t)v94 >= v95)
        {
          uint64_t v14 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>((uint64_t *)&v93, v12);
        }
        else
        {
          OUBox3d::OUBox3d(v94, v12);
          uint64_t v14 = (OUBox3d *)((char *)v13 + 224);
        }
        long long v94 = v14;
      }
      else
      {
        unint64_t v15 = v10[1];
        if (v15 >= v10[2])
        {
          uint64_t v16 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v10, v12);
          size_t v17 = v10;
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v10[1], v12);
          uint64_t v16 = v15 + 224;
          size_t v17 = v10;
          v10[1] = v15 + 224;
        }
        v17[1] = v16;
      }
      uint64_t v12 = (const OUBox3d *)((char *)v12 + 224);
    }
    while (v12 != v11);
    uint64_t v19 = v93;
    uint64_t v18 = v94;
  }
  int v20 = -1227133513 * (((char *)v18 - (char *)v19) >> 5);
  std::vector<OUBox3d>::reserve(v10, v20);
  uint64_t v90 = 0;
  float v91 = 0;
  unint64_t v92 = 0;
  uint64_t v23 = v93;
  uint64_t v22 = v94;
  unint64_t v85 = v20;
  int v86 = v20;
  if (v93 == v94) {
    goto LABEL_39;
  }
  do
  {
    float32x2_t v24 = ou3dod::ComputeHeadingDirection((float32x4_t *)v23, (const box3d *)v21);
    float32x2_t v25 = v24;
    uint64_t v26 = v91;
    if (v91 >= v92)
    {
      uint64_t v28 = ((char *)v91 - (unsigned char *)v90) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = ((char *)v92 - (unsigned char *)v90) >> 2;
      if (v29 <= v28 + 1) {
        unint64_t v29 = v28 + 1;
      }
      if ((unint64_t)((char *)v92 - (unsigned char *)v90) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v29;
      }
      if (v21) {
        long long v30 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v92, v21);
      }
      else {
        long long v30 = 0;
      }
      long long v31 = (float32x2_t *)&v30[8 * v28];
      float32x2_t *v31 = v25;
      uint64_t v27 = v31 + 1;
      unint64_t v33 = (char *)v90;
      long long v32 = (char *)v91;
      if (v91 != v90)
      {
        do
        {
          float32x2_t v34 = *(float32x2_t *)(v32 - 8);
          v32 -= 8;
          v31[-1] = v34;
          --v31;
        }
        while (v32 != v33);
        long long v32 = (char *)v90;
      }
      uint64_t v90 = v31;
      float v91 = v27;
      unint64_t v92 = (float32x2_t *)&v30[8 * v21];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *float v91 = v24;
      uint64_t v27 = v26 + 1;
    }
    float v91 = v27;
    uint64_t v23 = (OUBox3d *)((char *)v23 + 224);
  }
  while (v23 != v22);
  long long v35 = v93;
  uint64_t v23 = v94;
  if (v93 == v94)
  {
LABEL_39:
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v37 = v23;
    uint64_t v112 = 0;
  }
  else
  {
    do
    {
      ou3dod::MaybeReorderObjectCorner(&v35->var1, (OUBox3d *)v21);
      long long v35 = (OUBox3d *)((char *)v35 + 224);
    }
    while (v35 != v23);
    uint64_t v36 = (float32x4_t *)v93;
    uint64_t v23 = v94;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    if (v93 == v94)
    {
      uint64_t v37 = v94;
    }
    else
    {
      do
      {
        box3dToCentroidSizeAngle(v36, (uint64_t *)__p);
        std::vector<std::vector<float>>::push_back[abi:ne180100](&v110, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v36 += 14;
      }
      while (v36 != (float32x4_t *)v23);
      uint64_t v23 = v93;
      uint64_t v37 = v94;
    }
  }
  long long v87 = 0u;
  long long v88 = 0u;
  int v89 = 1065353216;
  int64_t v38 = (unint64_t)(-1227133513 * ((unint64_t)((char *)v37 - (char *)v23) >> 5)) << 32;
  uint64_t v39 = v10;
  if (v38)
  {
    uint64_t v40 = 0;
    unint64_t v41 = v38 >> 32;
    if (v41 <= 1) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v41;
    }
    do
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      for (uint64_t i = 0; i != v42; ++i)
      {
        objc_msgSend(*(id *)((char *)&v93[1].var5.var2.var0 + v44), "UUIDString", v85);
        id v46 = objc_claimAutoreleasedReturnValue();
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v46 UTF8String]);
        uint64_t v47 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)__p);
        if (SBYTE7(v102) < 0) {
          operator delete(__p[0]);
        }

        uint64_t v39 = v10;
        if (v40 != i)
        {
          if (v47)
          {
            v109[0] = i;
            v109[1] = v40;
            if (!std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v87, v109))
            {
              float32x2_t v49 = ou3dod::ComputeHeadingDirection((float32x4_t *)v93 + 14 * v40, v48);
              float32x2_t v51 = ou3dod::ComputeHeadingDirection((float32x4_t *)((char *)v93 + v44), v50);
              uint64_t v52 = (long long *)((char *)v93 + 224 * v40);
              long long v53 = v52[3];
              long long v55 = *v52;
              long long v54 = v52[1];
              long long v103 = v52[2];
              long long v104 = v53;
              *(_OWORD *)std::__fs::filesystem::directory_entry::_Path __p = v55;
              long long v102 = v54;
              long long v56 = v52[7];
              long long v58 = v52[4];
              long long v57 = v52[5];
              long long v107 = v52[6];
              long long v108 = v56;
              long long v105 = v58;
              long long v106 = v57;
              float32x4_t v59 = *(float32x4_t *)((char *)&v93->var1 + v44);
              float32x4_t v60 = *(float32x4_t *)((char *)&v93->var3 + v44);
              float32x4_t v61 = *(float32x4_t *)((char *)&v93->var5.var2.var0 + v44);
              v100[2] = *(float32x4_t *)((char *)&v93->var5.var0 + v44);
              v100[3] = v61;
              v100[0] = v59;
              v100[1] = v60;
              float32x4_t v62 = *(float32x4_t *)((char *)&v93->var6.var1 + v44);
              float32x4_t v63 = *(float32x4_t *)((char *)&v93->var7 + v44);
              float32x4_t v64 = *(float32x4_t *)((char *)&v93[1].var3 + v44);
              v100[6] = *(float32x4_t *)((char *)&v93[1].var1 + v44);
              v100[7] = v64;
              v100[4] = v62;
              v100[5] = v63;
              memset(v99, 0, sizeof(v99));
              box3dEnlarge((float32x4_t *)__p, 0.3, 0.1, 0.0, v99);
              memset(v98, 0, sizeof(v98));
              box3dEnlarge(v100, 0.3, 0.1, 0.0, v98);
              memset(v97, 0, sizeof(v97));
              box3dIou(v99, v98, 0, (uint64_t)v97);
              float v65 = *(float *)(*(void *)(v110 + 24 * v40) + 8);
              float v66 = *(float *)(*(void *)(v110 + v43) + 8);
              float v67 = *(float *)v97;
              BOOL IsBoxSurfaceAttached = ou3dod::IsBoxSurfaceAttached((float32x4_t *)v93 + 14 * v40, (const box3d *)((char *)v93 + v44), v68);
              double v70 = fabsf(vaddv_f32(vmul_f32(v49, v51)));
              BOOL v71 = v70 >= 0.173;
              float v72 = vabds_f32(v65, v66);
              if (v70 > 0.9848) {
                BOOL v71 = 0;
              }
              if (v72 >= 0.7) {
                BOOL v71 = 1;
              }
              if (v67 <= 0.0) {
                BOOL v71 = 1;
              }
              if (!v71 && !IsBoxSurfaceAttached)
              {
                if (v70 > 0.9848)
                {
                  float v73 = boxVolume((const box3d *)((char *)v93 + 224 * v40));
                  if (v73 >= boxVolume((const box3d *)((char *)v93 + v44))) {
                    uint64_t v74 = i;
                  }
                  else {
                    uint64_t v74 = v40;
                  }
                  ou3dod::ShiftBoxCorner((uint64_t)v93 + 224 * v74, (box3d *)1);
                }
                *(void *)&long long v96 = v40;
                *((void *)&v96 + 1) = i;
                std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v87, &v96, &v96);
              }
            }
          }
        }
        v44 += 224;
        v43 += 24;
      }
      ++v40;
    }
    while (v40 != v42);
  }
  __p[0] = &v110;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  long long v75 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)) {
    ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape((uint64_t)&v87, v75);
  }

  v100[0].i8[0] = 0;
  std::vector<BOOL>::vector(__p, v85, (unsigned __int8 *)v100);
  for (uint64_t j = (void *)v88; j; uint64_t j = (void *)*j)
  {
    unint64_t v77 = j[2];
    if (((*(void *)((char *)__p[0] + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v77) & 1) == 0)
    {
      unint64_t v78 = j[3];
      if (((*(void *)((char *)__p[0] + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v78) & 1) == 0
        && ou3dod::MaybeClipExtendLShapeObjects(v39, j[2], j[3], 0, 1, (uint64_t *)&v93, __p, 1) == 6)
      {
        ou3dod::MaybeClipExtendLShapeObjects(v39, v78, v77, 0, 1, (uint64_t *)&v93, __p, 1);
      }
    }
  }
  if (v86 >= 1)
  {
    for (uint64_t k = 0; k != v86; ++k)
      ou3dod::MaybeReorderBackObjectCorner((float32x4_t *)v93 + 14 * k, *(float32x2_t *)((char *)v90 + 8 * k));
    for (unint64_t m = 0; m != v86; ++m)
    {
      if (((*(void *)((char *)__p[0] + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
      {
        long long v81 = (OUBox3d *)((char *)v93 + 224 * m);
        unint64_t v82 = v10[1];
        if (v82 >= v10[2])
        {
          uint64_t v83 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v10, v81);
          unint64_t v84 = v10;
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v10[1], v81);
          uint64_t v83 = v82 + 224;
          unint64_t v84 = v10;
          v10[1] = v82 + 224;
        }
        v84[1] = v83;
      }
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v87);
  if (v90)
  {
    float v91 = (float32x2_t *)v90;
    operator delete(v90);
  }
  __p[0] = &v93;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_237C2BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x240] = v22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&a22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void ou3dod::HistoryMergeInfo::~HistoryMergeInfo(ou3dod::HistoryMergeInfo *this)
{
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      int v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    int v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_237C2C334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void *std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  unint64_t v4 = v3 ^ *a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3 ^ *a2;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  unint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v6 = a2[1];
  unint64_t v7 = v6 ^ *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 ^ *a2;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_42:
    void *v21 = i;
    goto LABEL_43;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_237C2CEE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint8x8_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint8x8_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    unint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint8x8_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::unordered_map<int,NSString * {__strong}>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(a1, a2, (uint64_t)a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_237C2D240(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  unint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v10[3] = *(id *)(a3 + 8);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    *uint64_t v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *v12;
  void *v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_237C2D48C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<int,SemanticLabelv5>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,SemanticLabelv5>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SemanticLabelv5>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SemanticLabelv5>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SemanticLabelv5>>>::__emplace_unique_key_args<int,std::pair<int const,SemanticLabelv5> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_237C2D5E4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,SemanticLabelv5>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SemanticLabelv5>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SemanticLabelv5>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SemanticLabelv5>>>::__emplace_unique_key_args<int,std::pair<int const,SemanticLabelv5> const&>(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_237C2D800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void _GLOBAL__sub_I_OU3DLShapeSofaOfflineMerger_mm()
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = @"Unknown";
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  unint64_t v20 = @"Door";
  *((void *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  uint64_t v19 = @"Window";
  *((void *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  size_t v17 = @"Fireplace";
  *((void *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  uint64_t v18 = @"Stairs";
  *((void *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  float v13 = @"Bed";
  *((void *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  uint64_t v36 = @"Cabinet";
  int v37 = 15;
  unint64_t v16 = @"Chair";
  unint64_t v38 = v16;
  int v39 = 16;
  unint64_t v40 = v36;
  int v41 = 17;
  uint64_t v42 = v40;
  int v43 = 18;
  unint64_t v15 = @"Sofa";
  uint64_t v44 = v15;
  int v45 = 19;
  BOOL v14 = @"Table";
  id v46 = v14;
  int v47 = 20;
  float v12 = @"Toilet";
  int v48 = v12;
  int v49 = 21;
  v0 = @"Sink";
  uint64_t v50 = v0;
  int v51 = 22;
  unint64_t v11 = @"Bathtub";
  uint64_t v52 = v11;
  int v53 = 23;
  id v54 = *((id *)&v32 + 1);
  int v55 = 24;
  uint64_t v1 = @"Refrigerator";
  long long v56 = v1;
  int v57 = 25;
  uint64_t v2 = @"Stove";
  long long v58 = v2;
  int v59 = 26;
  unint64_t v3 = @"Washer";
  float32x4_t v60 = v3;
  int v61 = 27;
  int v4 = @"Oven";
  float32x4_t v62 = v4;
  int v63 = 28;
  uint64_t v5 = @"Dishwasher";
  float32x4_t v64 = v5;
  int v65 = 29;
  id v66 = v54;
  int v67 = 30;
  unint64_t v6 = v42;
  int v68 = v6;
  int v69 = 31;
  id v70 = v66;
  int v71 = 32;
  unint64_t v7 = @"Screen";
  float v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v31 = xmmword_237CB4690;
  long long v32 = unk_237CB46A0;
  long long v33 = xmmword_237CB46B0;
  long long v34 = unk_237CB46C0;
  long long v27 = xmmword_237CB4650;
  long long v28 = unk_237CB4660;
  long long v29 = xmmword_237CB4670;
  long long v30 = unk_237CB4680;
  long long v23 = xmmword_237CB4610;
  long long v24 = unk_237CB4620;
  long long v25 = xmmword_237CB4630;
  long long v26 = unk_237CB4640;
  long long v21 = xmmword_237CB45F0;
  long long v22 = unk_237CB4600;
  uint64_t v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = @"Shelf";
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((void *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((void *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((void *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((void *)&v33 + 1) = @"Stool";
  LODWORD(v34) = 13;
  *((void *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  uint64_t v36 = v14;
  int v37 = 15;
  unint64_t v38 = v7;
  int v39 = 16;
  unint64_t v40 = v15;
  int v41 = 17;
  uint64_t v42 = v18;
  int v43 = 18;
  uint64_t v44 = v19;
  int v45 = 19;
  id v46 = v20;
  int v47 = 20;
  int v48 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
}

void sub_237C2DF58(_Unwind_Exception *a1)
{
  for (uint64_t i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_237C2E178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C2E368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OUCVPixelBufferRotate;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void ou3dod::PreprocessDense<half,true>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, unint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, &v119);
  if ((a14 & 1) == 0) {
    std::vector<float>::resize((uint64_t)a10, ((char *)v120 - (unsigned char *)v119) >> 3);
  }
  unint64_t v20 = (uint64_t *)v119;
  uint64_t v21 = (char *)v120 - (unsigned char *)v119;
  if (v120 != v119)
  {
    uint64_t v22 = v21 >> 3;
    long long v23 = (_DWORD *)*a10;
    if ((unint64_t)(v21 >> 3) <= 1) {
      uint64_t v22 = 1;
    }
    uint64_t v24 = *a4 + 8;
    do
    {
      uint64_t v25 = *v20++;
      *v23++ = *(_DWORD *)(v24 + 16 * v25);
      --v22;
    }
    while (v22);
  }
  percentile(a10);
  *a11 = *(float *)&v26;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v32;
  }
  uint64_t v112 = a5;
  int v33 = *(_DWORD *)a1;
  if (a13) {
    unsigned int v34 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  }
  else {
    unsigned int v34 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v114 = v34;
  bzero(a7, 2 * a8);
  bzero(*(void **)a9, *(void *)(a9 + 8) - *(void *)a9);
  uint64_t v35 = (uint64_t *)v119;
  uint64_t v36 = v120;
  if (v119 != v120)
  {
    uint64_t v37 = *a4;
    float v38 = *a11;
    int v39 = *(_DWORD **)a9;
    int v40 = 2 * a3;
    uint64_t v41 = *a6;
    uint64_t v42 = (uint64_t *)v119;
    uint64_t v43 = *v112;
    do
    {
      uint64_t v44 = *v42;
      if (a14) {
        unsigned int v45 = -1;
      }
      else {
        unsigned int v45 = 0;
      }
      float32x4_t v46 = vsubq_f32(*(float32x4_t *)(v37 + 16 * *v42), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v45), (int8x16_t)0, *a12));
      int32x2_t v47 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)(a1 + 48)), *(float32x2_t *)(a1 + 32))));
      long long v48 = *(_OWORD *)(a1 + 16);
      __int32 v49 = v47.i32[0];
      unsigned __int32 v50 = HIDWORD(*(void *)(a1 + 16));
      __int32 v51 = v47.i32[1];
      if (v48 > v47.i32[0] && v50 > v47.i32[1])
      {
        float v53 = v46.f32[2] - v38;
        unsigned int v54 = vcvtms_s32_f32((float)((float)(v46.f32[2] - v38) - *(float *)(a1 + 56)) / *(float *)(a1 + 40));
        if (DWORD2(v48) > v54)
        {
          int32x2_t v55 = vcltz_s32(v47);
          if ((v55.i8[0] & 1) == 0 && (v55.i8[4] & 1) == 0 && (v54 & 0x80000000) == 0)
          {
            signed int v56 = v54 + (v51 + v50 * v49) * v114;
            ++v39[v56];
            _H6 = *(_WORD *)&a7[2 * v56];
            __asm { FCVT            S6, H6 }
            _S6 = v46.f32[0] + _S6;
            __asm { FCVT            H6, S6 }
            *(_WORD *)&a7[2 * v56] = LOWORD(_S6);
            LOWORD(_S6) = *(_WORD *)&a7[2 * v56 + 2 * a3];
            __asm { FCVT            S6, H6 }
            _S4 = v46.f32[1] + _S6;
            __asm { FCVT            H4, S4 }
            *(_WORD *)&a7[2 * v56 + 2 * a3] = LOWORD(_S4);
            LOWORD(_S4) = *(_WORD *)&a7[2 * v56 + 2 * v40];
            __asm { FCVT            S4, H4 }
            _S4 = v53 + _S4;
            __asm { FCVT            H4, S4 }
            *(_WORD *)&a7[2 * v56 + 2 * v40] = LOWORD(_S4);
            int16x4_t v68 = *(int16x4_t *)(v41 + 8 * v44);
            LOWORD(v53) = vaddv_s16(v68);
            if (v53 != 0.0)
            {
              float v69 = (float)LOWORD(v53);
              float v70 = (float)v68.u16[0] / v69;
              float v71 = (float)v68.u16[1] / v69;
              float v72 = (float)v68.u16[2] / v69;
              float v73 = (float)(1.0 - (float)(v72 + (float)(v70 + v71))) / (float)(v33 - 3);
              if (v33 >= 1)
              {
                uint64_t v74 = &a7[6 * a3 + 2 * v56];
                int v75 = v33;
                do
                {
                  _H16 = *(_WORD *)v74;
                  __asm { FCVT            S16, H16 }
                  _S16 = v73 + _S16;
                  __asm { FCVT            H16, S16 }
                  *(_WORD *)uint64_t v74 = LOWORD(_S16);
                  v74 += 2 * a3;
                  --v75;
                }
                while (v75);
              }
              long long v79 = (unsigned __int8 *)(v43 + 4 * v44);
              int v80 = *v79;
              int v81 = v79[1];
              int v82 = v79[2];
              if (v33 <= v80) {
                int v83 = 3;
              }
              else {
                int v83 = v80 + 3;
              }
              int v84 = v56 + v83 * a3;
              _H16 = *(_WORD *)&a7[2 * v84];
              __asm { FCVT            S16, H16 }
              _S7 = (float)(v70 - v73) + _S16;
              __asm { FCVT            H7, S7 }
              *(_WORD *)&a7[2 * v84] = LOWORD(_S7);
              int v88 = v81 + 3;
              if (v33 <= v81) {
                int v88 = 3;
              }
              int v89 = v56 + v88 * a3;
              _H7 = *(_WORD *)&a7[2 * v89];
              __asm { FCVT            S7, H7 }
              _S6 = (float)(v71 - v73) + _S7;
              __asm { FCVT            H6, S6 }
              *(_WORD *)&a7[2 * v89] = LOWORD(_S6);
              if (v33 <= v82) {
                int v93 = 3;
              }
              else {
                int v93 = v82 + 3;
              }
              int v94 = v56 + v93 * a3;
              _H6 = *(_WORD *)&a7[2 * v94];
              float v96 = v72 - v73;
              __asm { FCVT            S5, H6 }
              _S4 = v96 + _S5;
              __asm { FCVT            H4, S4 }
              *(_WORD *)&a7[2 * v94] = LOWORD(_S4);
            }
          }
        }
      }
      ++v42;
    }
    while (v42 != v36);
  }
  if (a3 >= 1)
  {
    uint64_t v99 = 0;
    float v100 = *(_DWORD **)a9;
    uint64_t v101 = (__int16 *)a7;
    do
    {
      int v102 = v100[v99];
      if (v102 >= 2)
      {
        float v103 = (float)v102;
        int v104 = 36;
        long long v105 = v101;
        do
        {
          _H1 = *v105;
          __asm { FCVT            S1, H1 }
          _S1 = _S1 / v103;
          __asm { FCVT            H1, S1 }
          *long long v105 = LOWORD(_S1);
          v105 += a3;
          --v104;
        }
        while (v104);
      }
      ++v99;
      ++v101;
    }
    while (v99 != a3);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v109 = *(void *)(a1 + 16);
    int v110 = *(_DWORD *)(a1 + 24);
    uint64_t v111 = (char *)operator new(0xCuLL);
    v118[1] = (uint64_t *)(v111 + 12);
    v118[2] = (uint64_t *)(v111 + 12);
    *(void *)uint64_t v111 = v109;
    *((_DWORD *)v111 + 2) = v110;
    uint64_t v117 = 0;
    v118[0] = (uint64_t *)v111;
    std::__fs::filesystem::directory_entry::_Path __p = 0;
    uint64_t v116 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v111, (uint64_t)(v111 + 12), 3uLL);
    *(_DWORD *)std::__fs::filesystem::directory_entry::_Path __p = 64;
    ou3dod::J4InputSpecialHandling(36, v118, (int **)&__p, a7, a8);
    if (__p)
    {
      uint64_t v116 = __p;
      operator delete(__p);
    }
    operator delete(v111);
    uint64_t v35 = (uint64_t *)v119;
  }
  if (v35)
  {
    uint64_t v120 = v35;
    operator delete(v35);
  }
}

void sub_237C2E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v19);
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void ou3dod::anonymous namespace'::ComputeMeanXYExcludeOutlier(uint64_t *a1, char **a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8)
{
  uint8x8_t v8 = *a2;
  unint64_t v9 = a2[1];
  if (*a2 == v9) {
    return;
  }
  unint64_t v10 = (unint64_t)(v9 - v8) >> 3;
  if (!v10) {
    return;
  }
  float v147 = 0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  BOOL v144 = 0;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  long long v142 = 0;
  uint64_t v143 = 0;
  long long v138 = 0;
  long long v139 = 0;
  uint64_t v140 = 0;
  unint64_t v12 = (int)vcvtps_s32_f32((float)((int)v10 - 1) * 0.05);
  unint64_t v13 = (int)vcvtpd_s64_f64((double)((int)v10 - 1) * 0.0500000119);
  a8.n128_u64[0] = 0;
  a7.n128_u64[0] = 0;
  do
  {
    __n128 v135 = a8;
    __n128 v136 = a7;
    uint64_t v14 = *(void *)v8;
    uint64_t v15 = *a1;
    unint64_t v16 = (int *)(*a1 + 16 * *(void *)v8);
    int v137 = *v16;
    std::priority_queue<float,std::vector<float>,std::greater<float>>::push((uint64_t)&v147, &v137);
    int v137 = *v16;
    std::priority_queue<float>::push((uint64_t)&v144, &v137);
    uint64_t v17 = v15 + 16 * v14;
    int v137 = *(_DWORD *)(v17 + 4);
    std::priority_queue<float,std::vector<float>,std::greater<float>>::push((uint64_t)&__p, &v137);
    int v137 = *(_DWORD *)(v17 + 4);
    std::priority_queue<float>::push((uint64_t)&v138, &v137);
    long long v18 = *(_OWORD *)v16;
    unint64_t v20 = v147;
    uint64_t v19 = v148;
    uint64_t v21 = v148 - v147;
    a8 = v135;
    a7 = v136;
    if (v21 <= v12) {
      goto LABEL_18;
    }
    if ((char *)v148 - (char *)v147 >= 5)
    {
      uint64_t v22 = 0;
      float v23 = *v147;
      uint64_t v24 = v147;
      do
      {
        uint64_t v25 = v24;
        v24 += v22 + 1;
        uint64_t v26 = 2 * v22;
        uint64_t v22 = (2 * v22) | 1;
        uint64_t v27 = v26 + 2;
        if (v27 < v21 && *v24 > v24[1])
        {
          ++v24;
          uint64_t v22 = v27;
        }
        float *v25 = *v24;
      }
      while (v22 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
      double v28 = v19 - 1;
      if (v24 != v19 - 1)
      {
        *uint64_t v24 = *v28;
        float *v28 = v23;
        uint64_t v29 = (char *)v24 - (char *)v20 + 4;
        if (v29 < 5) {
          goto LABEL_17;
        }
        unint64_t v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
        __n128 v31 = &v20[v30];
        float v32 = *v31;
        float v23 = *v24;
        if (*v31 <= *v24) {
          goto LABEL_17;
        }
        do
        {
          *uint64_t v24 = v32;
          uint64_t v24 = v31;
          if (!v30) {
            break;
          }
          unint64_t v30 = (v30 - 1) >> 1;
          __n128 v31 = &v20[v30];
          float v32 = *v31;
        }
        while (*v31 > v23);
      }
      *uint64_t v24 = v23;
    }
LABEL_17:
    uint64_t v148 = --v19;
LABEL_18:
    unsigned int v34 = (float *)v144;
    int v33 = v145;
    uint64_t v35 = ((char *)v145 - (unsigned char *)v144) >> 2;
    if (v35 <= v13) {
      goto LABEL_32;
    }
    if ((char *)v145 - (unsigned char *)v144 >= 5)
    {
      uint64_t v36 = 0;
      float v37 = *(float *)v144;
      float v38 = (float *)v144;
      do
      {
        int v39 = v38;
        v38 += v36 + 1;
        uint64_t v40 = 2 * v36;
        uint64_t v36 = (2 * v36) | 1;
        uint64_t v41 = v40 + 2;
        if (v41 < v35 && *v38 < v38[1])
        {
          ++v38;
          uint64_t v36 = v41;
        }
        float *v39 = *v38;
      }
      while (v36 <= (uint64_t)((unint64_t)(v35 - 2) >> 1));
      uint64_t v42 = v33 - 1;
      if (v38 != v33 - 1)
      {
        float *v38 = *v42;
        float *v42 = v37;
        uint64_t v43 = (char *)v38 - (char *)v34 + 4;
        if (v43 < 5) {
          goto LABEL_31;
        }
        unint64_t v44 = (((unint64_t)v43 >> 2) - 2) >> 1;
        unsigned int v45 = &v34[v44];
        float v46 = *v45;
        float v37 = *v38;
        if (*v45 >= *v38) {
          goto LABEL_31;
        }
        do
        {
          float *v38 = v46;
          float v38 = v45;
          if (!v44) {
            break;
          }
          unint64_t v44 = (v44 - 1) >> 1;
          unsigned int v45 = &v34[v44];
          float v46 = *v45;
        }
        while (*v45 < v37);
      }
      float *v38 = v37;
    }
LABEL_31:
    uint64_t v145 = --v33;
LABEL_32:
    int32x2_t v47 = (float *)__p;
    long long v48 = v142;
    uint64_t v49 = ((char *)v142 - (unsigned char *)__p) >> 2;
    if (v49 <= v12) {
      goto LABEL_46;
    }
    if ((char *)v142 - (unsigned char *)__p >= 5)
    {
      uint64_t v50 = 0;
      float v51 = *(float *)__p;
      uint64_t v52 = (float *)__p;
      do
      {
        float v53 = v52;
        v52 += v50 + 1;
        uint64_t v54 = 2 * v50;
        uint64_t v50 = (2 * v50) | 1;
        uint64_t v55 = v54 + 2;
        if (v55 < v49 && *v52 > v52[1])
        {
          ++v52;
          uint64_t v50 = v55;
        }
        float *v53 = *v52;
      }
      while (v50 <= (uint64_t)((unint64_t)(v49 - 2) >> 1));
      signed int v56 = v48 - 1;
      if (v52 != v48 - 1)
      {
        float *v52 = *v56;
        float *v56 = v51;
        uint64_t v57 = (char *)v52 - (char *)v47 + 4;
        if (v57 < 5) {
          goto LABEL_45;
        }
        unint64_t v58 = (((unint64_t)v57 >> 2) - 2) >> 1;
        int v59 = &v47[v58];
        float v60 = *v59;
        float v51 = *v52;
        if (*v59 <= *v52) {
          goto LABEL_45;
        }
        do
        {
          float *v52 = v60;
          uint64_t v52 = v59;
          if (!v58) {
            break;
          }
          unint64_t v58 = (v58 - 1) >> 1;
          int v59 = &v47[v58];
          float v60 = *v59;
        }
        while (*v59 > v51);
      }
      float *v52 = v51;
    }
LABEL_45:
    long long v142 = --v48;
LABEL_46:
    int v61 = v138;
    float32x4_t v62 = v139;
    uint64_t v63 = v139 - v138;
    if (v63 <= v13) {
      goto LABEL_60;
    }
    if ((char *)v139 - (char *)v138 >= 5)
    {
      uint64_t v64 = 0;
      float v65 = *v138;
      id v66 = v138;
      do
      {
        int v67 = v66;
        v66 += v64 + 1;
        uint64_t v68 = 2 * v64;
        uint64_t v64 = (2 * v64) | 1;
        uint64_t v69 = v68 + 2;
        if (v69 < v63 && *v66 < v66[1])
        {
          ++v66;
          uint64_t v64 = v69;
        }
        float *v67 = *v66;
      }
      while (v64 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
      float v70 = v62 - 1;
      if (v66 != v62 - 1)
      {
        float *v66 = *v70;
        float *v70 = v65;
        uint64_t v71 = (char *)v66 - (char *)v61 + 4;
        if (v71 < 5) {
          goto LABEL_59;
        }
        unint64_t v72 = (((unint64_t)v71 >> 2) - 2) >> 1;
        float v73 = &v61[v72];
        float v74 = *v73;
        float v65 = *v66;
        if (*v73 >= *v66) {
          goto LABEL_59;
        }
        do
        {
          float *v66 = v74;
          id v66 = v73;
          if (!v72) {
            break;
          }
          unint64_t v72 = (v72 - 1) >> 1;
          float v73 = &v61[v72];
          float v74 = *v73;
        }
        while (*v73 < v65);
      }
      float *v66 = v65;
    }
LABEL_59:
    long long v139 = --v62;
LABEL_60:
    a7.n128_f32[0] = v136.n128_f32[0] + *(float *)&v18;
    a8.n128_f32[0] = v135.n128_f32[0] + *((float *)&v18 + 1);
    v8 += 8;
  }
  while (v8 != v9);
  if (v20 != v19)
  {
    do
    {
      float v75 = *v20;
      uint64_t v76 = (char *)v19 - (char *)v20;
      if ((char *)v19 - (char *)v20 >= 5)
      {
        uint64_t v77 = 0;
        uint64_t v78 = v76 >> 2;
        int64_t v79 = (unint64_t)((v76 >> 2) - 2) >> 1;
        int v80 = v20;
        do
        {
          int v81 = v80;
          v80 += v77 + 1;
          uint64_t v82 = 2 * v77;
          uint64_t v77 = (2 * v77) | 1;
          uint64_t v83 = v82 + 2;
          if (v83 < v78 && *v80 > v80[1])
          {
            ++v80;
            uint64_t v77 = v83;
          }
          *int v81 = *v80;
        }
        while (v77 <= v79);
        int v84 = v19 - 1;
        if (v80 == v19 - 1)
        {
          float *v80 = v75;
        }
        else
        {
          float *v80 = *v84;
          *int v84 = v75;
          uint64_t v85 = (char *)v80 - (char *)v20 + 4;
          if (v85 >= 5)
          {
            unint64_t v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
            long long v87 = &v20[v86];
            float v88 = *v87;
            float v89 = *v80;
            if (*v87 > *v80)
            {
              do
              {
                float *v80 = v88;
                int v80 = v87;
                if (!v86) {
                  break;
                }
                unint64_t v86 = (v86 - 1) >> 1;
                long long v87 = &v20[v86];
                float v88 = *v87;
              }
              while (*v87 > v89);
              float *v80 = v89;
            }
          }
        }
      }
      a7.n128_f32[0] = a7.n128_f32[0] - v75;
      --v19;
    }
    while (v20 != v19);
    uint64_t v148 = v20;
  }
  if (v34 != v33)
  {
    do
    {
      float v90 = *v34;
      uint64_t v91 = (char *)v33 - (char *)v34;
      if ((char *)v33 - (char *)v34 >= 5)
      {
        uint64_t v92 = 0;
        uint64_t v93 = v91 >> 2;
        int64_t v94 = (unint64_t)((v91 >> 2) - 2) >> 1;
        unint64_t v95 = v34;
        do
        {
          float v96 = v95;
          v95 += v92 + 1;
          uint64_t v97 = 2 * v92;
          uint64_t v92 = (2 * v92) | 1;
          uint64_t v98 = v97 + 2;
          if (v98 < v93 && *v95 < v95[1])
          {
            ++v95;
            uint64_t v92 = v98;
          }
          *float v96 = *v95;
        }
        while (v92 <= v94);
        uint64_t v99 = v33 - 1;
        if (v95 == v33 - 1)
        {
          *unint64_t v95 = v90;
        }
        else
        {
          *unint64_t v95 = *v99;
          *uint64_t v99 = v90;
          uint64_t v100 = (char *)v95 - (char *)v34 + 4;
          if (v100 >= 5)
          {
            unint64_t v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
            int v102 = &v34[v101];
            float v103 = *v102;
            float v104 = *v95;
            if (*v102 < *v95)
            {
              do
              {
                *unint64_t v95 = v103;
                unint64_t v95 = v102;
                if (!v101) {
                  break;
                }
                unint64_t v101 = (v101 - 1) >> 1;
                int v102 = &v34[v101];
                float v103 = *v102;
              }
              while (*v102 < v104);
              *unint64_t v95 = v104;
            }
          }
        }
      }
      a7.n128_f32[0] = a7.n128_f32[0] - v90;
      --v33;
    }
    while (v34 != v33);
    uint64_t v145 = v34;
  }
  if (v47 != v48)
  {
    do
    {
      float v105 = *v47;
      uint64_t v106 = (char *)v48 - (char *)v47;
      if ((char *)v48 - (char *)v47 >= 5)
      {
        uint64_t v107 = 0;
        uint64_t v108 = v106 >> 2;
        int64_t v109 = (unint64_t)((v106 >> 2) - 2) >> 1;
        int v110 = v47;
        do
        {
          uint64_t v111 = v110;
          v110 += v107 + 1;
          uint64_t v112 = 2 * v107;
          uint64_t v107 = (2 * v107) | 1;
          uint64_t v113 = v112 + 2;
          if (v113 < v108 && *v110 > v110[1])
          {
            ++v110;
            uint64_t v107 = v113;
          }
          *uint64_t v111 = *v110;
        }
        while (v107 <= v109);
        unsigned int v114 = v48 - 1;
        if (v110 == v48 - 1)
        {
          *int v110 = v105;
        }
        else
        {
          *int v110 = *v114;
          *unsigned int v114 = v105;
          uint64_t v115 = (char *)v110 - (char *)v47 + 4;
          if (v115 >= 5)
          {
            unint64_t v116 = (((unint64_t)v115 >> 2) - 2) >> 1;
            uint64_t v117 = &v47[v116];
            float v118 = *v117;
            float v119 = *v110;
            if (*v117 > *v110)
            {
              do
              {
                *int v110 = v118;
                int v110 = v117;
                if (!v116) {
                  break;
                }
                unint64_t v116 = (v116 - 1) >> 1;
                uint64_t v117 = &v47[v116];
                float v118 = *v117;
              }
              while (*v117 > v119);
              *int v110 = v119;
            }
          }
        }
      }
      a8.n128_f32[0] = a8.n128_f32[0] - v105;
      --v48;
    }
    while (v47 != v48);
    long long v142 = v47;
  }
  for (; v61 != v62; --v62)
  {
    float v120 = *v61;
    uint64_t v121 = (char *)v62 - (char *)v61;
    if ((char *)v62 - (char *)v61 >= 5)
    {
      uint64_t v122 = 0;
      uint64_t v123 = v121 >> 2;
      int64_t v124 = (unint64_t)((v121 >> 2) - 2) >> 1;
      unint64_t v125 = v61;
      do
      {
        uint64_t v126 = v125;
        v125 += v122 + 1;
        uint64_t v127 = 2 * v122;
        uint64_t v122 = (2 * v122) | 1;
        uint64_t v128 = v127 + 2;
        if (v128 < v123 && *v125 < v125[1])
        {
          ++v125;
          uint64_t v122 = v128;
        }
        *uint64_t v126 = *v125;
      }
      while (v122 <= v124);
      BOOL v129 = v62 - 1;
      if (v125 == v62 - 1)
      {
        *unint64_t v125 = v120;
      }
      else
      {
        *unint64_t v125 = *v129;
        *BOOL v129 = v120;
        uint64_t v130 = (char *)v125 - (char *)v61 + 4;
        if (v130 >= 5)
        {
          unint64_t v131 = (((unint64_t)v130 >> 2) - 2) >> 1;
          v132 = &v61[v131];
          float v133 = *v132;
          float v134 = *v125;
          if (*v132 < *v125)
          {
            do
            {
              *unint64_t v125 = v133;
              unint64_t v125 = v132;
              if (!v131) {
                break;
              }
              unint64_t v131 = (v131 - 1) >> 1;
              v132 = &v61[v131];
              float v133 = *v132;
            }
            while (*v132 < v134);
            *unint64_t v125 = v134;
          }
        }
      }
    }
    a8.n128_f32[0] = a8.n128_f32[0] - v120;
  }
  if (v61)
  {
    long long v139 = v61;
    operator delete(v61);
    int32x2_t v47 = (float *)__p;
  }
  if (v47)
  {
    long long v142 = v47;
    operator delete(v47);
  }
  if (v144)
  {
    uint64_t v145 = (float *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    uint64_t v148 = v147;
    operator delete(v147);
  }
}

void sub_237C2F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a25) {
    operator delete(a25);
  }
  double v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(void *)(v26 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::GetPaddedSize(ou3dod *this, unint64_t a2)
{
  return (((unint64_t)this + a2 - 1) / a2) * a2;
}

void ou3dod::J4InputSpecialHandling(int a1, uint64_t **a2, int **a3, _WORD *a4, unint64_t a5)
{
  int v5 = a5;
  unint64_t v10 = *a3;
  unint64_t v9 = a3[1];
  int v11 = 1;
  if (*a3 != v9)
  {
    unint64_t v12 = *a3;
    do
    {
      int v13 = *v12++;
      v11 *= v13;
    }
    while (v12 != v9);
  }
  if (a5 < v11)
  {
    int v39 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      ou3dod::J4InputSpecialHandling(v11, v39);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_237CC3E0E);
LABEL_31:
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  int v14 = *((_DWORD *)*a2 + 2);
  uint64_t v15 = **a2;
  unint64_t v16 = (char *)operator new(0x10uLL);
  unint64_t v44 = v16 + 16;
  unsigned int v45 = v16 + 16;
  *(_DWORD *)unint64_t v16 = a1;
  *(void *)(v16 + 4) = v15;
  *((_DWORD *)v16 + 3) = v14;
  uint64_t v43 = v16;
  uint64_t v17 = *(void *)v10;
  int v18 = v10[2];
  uint64_t v19 = (char *)operator new(0x10uLL);
  v42[1] = (int *)(v19 + 16);
  v42[2] = (int *)(v19 + 16);
  *(_DWORD *)uint64_t v19 = a1;
  *(void *)(v19 + 4) = v17;
  *((_DWORD *)v19 + 3) = v18;
  v42[0] = (int *)v19;
  ou3dod::PaddingOrTrimming((const void **)&v43, v42, a4);
  operator delete(v19);
  operator delete(v16);
  if ((char *)a3[1] - (char *)*a3 != 12)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_31;
  }
  if (**a3 * a1 * (*a3)[1] * (*a3)[2] != v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_31;
  }
  std::vector<half>::vector(&v43, v5);
  unint64_t v20 = (unsigned int *)*a3;
  if ((char *)a3[1] - (char *)*a3 != 12)
  {
    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v41, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_35;
  }
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  int v23 = v21 * a1 * v22;
  int v24 = v20[2];
  if (v23 * v24 != v5)
  {
    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v41, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_35;
  }
  uint64_t v25 = v43;
  size_t v26 = v44 - v43;
  if ((v44 - v43) >> 1 != v5)
  {
    uint64_t v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v41, "[3DOD] mismatching input and output sizes.");
LABEL_35:
    v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v41, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  uint64_t v27 = v43;
  if (v24 >= 1)
  {
    int v28 = 0;
    for (int i = 0; i != v24; ++i)
    {
      if (a1 >= 1)
      {
        int v30 = 0;
        int v31 = v28;
        int v32 = i;
        do
        {
          if ((int)v22 >= 1)
          {
            uint64_t v33 = 0;
            int v34 = v31;
            int v35 = v32;
            do
            {
              if ((int)v21 >= 1)
              {
                uint64_t v36 = &v25[2 * v34];
                int v37 = v35;
                uint64_t v38 = v21;
                do
                {
                  *(_WORD *)uint64_t v36 = a4[v37];
                  v36 += 2;
                  v37 += v22 * v24;
                  --v38;
                }
                while (v38);
              }
              ++v33;
              v35 += v24;
              v34 += v21;
            }
            while (v33 != v22);
          }
          ++v30;
          v32 += v22 * v24 * v21;
          v31 += v22 * v21;
        }
        while (v30 != a1);
      }
      v28 += v23;
    }
    uint64_t v27 = v43;
  }
  memcpy(a4, v25, v26);
  if (v27)
  {
    unint64_t v44 = v27;
    operator delete(v27);
  }
}

void sub_237C2F6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  __cxa_free_exception(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ou3dod::PreprocessDense<half,false>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, (void **)&v103);
  if ((a14 & 1) == 0) {
    std::vector<float>::resize((uint64_t)a10, v104 - v103);
  }
  uint64_t v21 = v103;
  uint64_t v22 = (char *)v104 - (char *)v103;
  if (v104 != v103)
  {
    uint64_t v23 = v22 >> 3;
    int v24 = (_DWORD *)*a10;
    if ((unint64_t)(v22 >> 3) <= 1) {
      uint64_t v23 = 1;
    }
    uint64_t v25 = *a4 + 8;
    do
    {
      uint64_t v26 = *v21++;
      *v24++ = *(_DWORD *)(v25 + 16 * v26);
      --v23;
    }
    while (v23);
  }
  percentile(a10);
  *a11 = *(float *)&v27;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v33;
  }
  unint64_t v101 = a5;
  int v34 = *(_DWORD *)a1;
  if (a13) {
    unsigned int v35 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  }
  else {
    unsigned int v35 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v102 = v35;
  bzero(a7, 2 * a8);
  bzero(*(void **)a9, *(void *)(a9 + 8) - *(void *)a9);
  uint64_t v36 = v103;
  int v37 = v104;
  if (v103 != v104)
  {
    uint64_t v38 = *a4;
    float v39 = *a11;
    uint64_t v40 = *(_DWORD **)a9;
    int v41 = a3 + a3 * v34;
    uint64_t v42 = *a6;
    uint64_t v43 = v103;
    uint64_t v44 = *v101;
    do
    {
      uint64_t v45 = *v43;
      if (a14) {
        unsigned int v46 = -1;
      }
      else {
        unsigned int v46 = 0;
      }
      _Q6 = vsubq_f32(*(float32x4_t *)(v38 + 16 * *v43), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v46), (int8x16_t)0, *a12));
      unsigned int v47 = vcvtms_s32_f32((float)(_Q6.f32[0] - *(float *)(a1 + 48)) / *(float *)(a1 + 32));
      _Q6.i32[0] = vdup_lane_s32(*(int32x2_t *)_Q6.f32, 1).u32[0];
      _Q6.f32[1] = _Q6.f32[2] - v39;
      *(int32x2_t *)_Q6.f32 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)_Q6.f32, *(float32x2_t *)(a1 + 52)), *(float32x2_t *)(a1 + 36))));
      unsigned int v49 = HIDWORD(*(void *)(a1 + 16));
      __int32 v50 = _Q6.i32[0];
      BOOL v51 = *(_OWORD *)(a1 + 16) > v47 && v49 > _Q6.i32[0];
      __int32 v52 = _Q6.i32[1];
      if (v51 && *(void *)(a1 + 24) > _Q6.i32[1] && (v47 & 0x80000000) == 0)
      {
        int32x2_t v54 = vcltz_s32(*(int32x2_t *)_Q6.f32);
        if ((v54.i8[0] & 1) == 0 && (v54.i8[4] & 1) == 0)
        {
          signed __int32 v55 = v52 + (v50 + v49 * v47) * v102;
          ++v40[v55];
          *(short float *)&a7[2 * v55] = *(short float *)&a7[2 * v55] + COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0));
          _Q6.i16[0] = *(_WORD *)&a7[2 * v55 + 2 * v41];
          __asm { FCVT            S6, H6 }
          _S5 = (float)(_Q6.f32[2] - v39) + _Q6.f32[0];
          __asm { FCVT            H5, S5 }
          *(_WORD *)&a7[2 * v55 + 2 * v41] = LOWORD(_S5);
          int16x4_t v61 = *(int16x4_t *)(v42 + 8 * v45);
          _Q6.i16[0] = vaddv_s16(v61);
          if (_Q6.i32[0])
          {
            float v62 = (float)_Q6.u16[0];
            float v63 = (float)v61.u16[0] / v62;
            float v64 = (float)v61.u16[1] / v62;
            float v65 = (float)v61.u16[2] / v62;
            float v66 = (float)(1.0 - (float)(v65 + (float)(v63 + v64))) / (float)(v34 - 3);
            if (v34 >= 1)
            {
              int v67 = &a7[2 * a3 + 2 * (uint64_t)v55];
              int v68 = v34;
              do
              {
                _H17 = *(_WORD *)v67;
                __asm { FCVT            S17, H17 }
                _S17 = v66 + _S17;
                __asm { FCVT            H17, S17 }
                *(_WORD *)int v67 = LOWORD(_S17);
                v67 += 2 * a3;
                --v68;
              }
              while (v68);
            }
            unint64_t v72 = (unsigned __int8 *)(v44 + 4 * v45);
            int v73 = *v72;
            int v74 = v72[1];
            int v75 = v72[2];
            if (v34 > v73) {
              int v76 = v73 + 1;
            }
            else {
              int v76 = 1;
            }
            signed __int32 v77 = v55 + v76 * a3;
            _H17 = *(_WORD *)&a7[2 * v77];
            __asm { FCVT            S17, H17 }
            _S16 = (float)(v63 - v66) + _S17;
            __asm { FCVT            H16, S16 }
            *(_WORD *)&a7[2 * v77] = LOWORD(_S16);
            if (v34 > v74) {
              int v81 = v74 + 1;
            }
            else {
              int v81 = 1;
            }
            signed __int32 v82 = v55 + v81 * a3;
            _H16 = *(_WORD *)&a7[2 * v82];
            __asm { FCVT            S16, H16 }
            _S7 = (float)(v64 - v66) + _S16;
            __asm { FCVT            H7, S7 }
            *(_WORD *)&a7[2 * v82] = LOWORD(_S7);
            if (v34 > v75) {
              int v86 = v75 + 1;
            }
            else {
              int v86 = 1;
            }
            signed __int32 v87 = v55 + v86 * a3;
            _H7 = *(_WORD *)&a7[2 * v87];
            float v89 = v65 - v66;
            __asm { FCVT            S6, H7 }
            _S5 = v89 + _S6;
            __asm { FCVT            H5, S5 }
            *(_WORD *)&a7[2 * v87] = LOWORD(_S5);
          }
        }
      }
      ++v43;
    }
    while (v43 != v37);
  }
  if (a3 >= 1)
  {
    uint64_t v92 = 0;
    uint64_t v93 = *(_DWORD **)a9;
    do
    {
      int v94 = v93[v92];
      if (v94 >= 2)
      {
        float v95 = (float)v94;
        int v96 = 35;
        uint64_t v97 = (__int16 *)a7;
        do
        {
          _H1 = *v97;
          __asm { FCVT            S1, H1 }
          _S1 = _S1 / v95;
          __asm { FCVT            H1, S1 }
          *uint64_t v97 = LOWORD(_S1);
          v97 += a3;
          --v96;
        }
        while (v96);
      }
      ++v92;
      a7 += 2;
    }
    while (v92 != a3);
  }
  if (v36)
  {
    float v104 = v36;
    operator delete(v36);
  }
}

void sub_237C2FB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ou3dod::PreprocessDense<float,false>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, (void **)&v85);
  if ((a14 & 1) == 0) {
    std::vector<float>::resize((uint64_t)a10, v86 - v85);
  }
  uint64_t v21 = v85;
  uint64_t v22 = (char *)v86 - (char *)v85;
  if (v86 != v85)
  {
    uint64_t v23 = v22 >> 3;
    int v24 = (_DWORD *)*a10;
    if ((unint64_t)(v22 >> 3) <= 1) {
      uint64_t v23 = 1;
    }
    uint64_t v25 = *a4 + 8;
    do
    {
      uint64_t v26 = *v21++;
      *v24++ = *(_DWORD *)(v25 + 16 * v26);
      --v23;
    }
    while (v23);
  }
  percentile(a10);
  *a11 = *(float *)&v27;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v33;
  }
  uint64_t v34 = a8;
  unsigned int v35 = a6;
  int v36 = *(_DWORD *)a1;
  if (a13) {
    unsigned int v37 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  }
  else {
    unsigned int v37 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v84 = v37;
  bzero(a7, 4 * v34);
  bzero(*(void **)a9, *(void *)(a9 + 8) - *(void *)a9);
  uint64_t v38 = v85;
  float v39 = v86;
  if (v85 != v86)
  {
    uint64_t v40 = *a4;
    int v41 = *(_DWORD **)a9;
    int v42 = a3 + a3 * v36;
    uint64_t v43 = *v35;
    uint64_t v44 = v85;
    uint64_t v45 = *a5;
    do
    {
      uint64_t v46 = *v44;
      if (a14) {
        unsigned int v47 = -1;
      }
      else {
        unsigned int v47 = 0;
      }
      float32x4_t v48 = vsubq_f32(*(float32x4_t *)(v40 + 16 * *v44), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v47), (int8x16_t)0, *a12));
      float v49 = v48.f32[2] - *a11;
      unsigned int v50 = vcvtms_s32_f32((float)(v48.f32[0] - *(float *)(a1 + 48)) / *(float *)(a1 + 32));
      v48.i32[0] = vdup_lane_s32(*(int32x2_t *)v48.f32, 1).u32[0];
      v48.f32[1] = v49;
      int32x2_t v51 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)(a1 + 52)), *(float32x2_t *)(a1 + 36))));
      unsigned int v52 = HIDWORD(*(void *)(a1 + 16));
      __int32 v53 = v51.i32[0];
      BOOL v54 = *(_OWORD *)(a1 + 16) > v50 && v52 > v51.i32[0];
      __int32 v55 = v51.i32[1];
      if (v54 && *(void *)(a1 + 24) > v51.i32[1] && (v50 & 0x80000000) == 0)
      {
        int32x2_t v57 = vcltz_s32(v51);
        if ((v57.i8[0] & 1) == 0 && (v57.i8[4] & 1) == 0)
        {
          signed __int32 v58 = v55 + (v53 + v52 * v50) * v84;
          ++v41[v58];
          *(float *)&a7[4 * v58] = *(float *)&a7[4 * v58] + 1.0;
          float v60 = *(float *)&a7[4 * v58 + 4 * v42];
          *(float *)&a7[4 * v58 + 4 * v42] = v49 + v60;
          int16x4_t v59 = *(int16x4_t *)(v43 + 8 * v46);
          LOWORD(v60) = vaddv_s16(v59);
          if (v60 != 0.0)
          {
            float v61 = (float)LOWORD(v60);
            float v62 = (float)v59.u16[0] / v61;
            float v63 = (float)v59.u16[1] / v61;
            float v64 = (float)v59.u16[2] / v61;
            float v65 = (float)(1.0 - (float)(v64 + (float)(v62 + v63))) / (float)(v36 - 3);
            if (v36 >= 1)
            {
              float v66 = (float *)&a7[4 * a3 + 4 * (uint64_t)v58];
              int v67 = v36;
              do
              {
                float *v66 = v65 + *v66;
                v66 += a3;
                --v67;
              }
              while (v67);
            }
            int v68 = (unsigned __int8 *)(v45 + 4 * v46);
            int v69 = *v68;
            int v70 = v68[1];
            int v71 = v68[2];
            float v72 = v62 - v65;
            if (v36 > v69) {
              int v73 = v69 + 1;
            }
            else {
              int v73 = 1;
            }
            *(float *)&a7[4 * v58 + 4 * v73 * a3] = v72 + *(float *)&a7[4 * v58 + 4 * v73 * a3];
            float v74 = v63 - v65;
            if (v36 > v70) {
              int v75 = v70 + 1;
            }
            else {
              int v75 = 1;
            }
            *(float *)&a7[4 * v58 + 4 * v75 * a3] = v74 + *(float *)&a7[4 * v58 + 4 * v75 * a3];
            float v76 = v64 - v65;
            if (v36 > v71) {
              int v77 = v71 + 1;
            }
            else {
              int v77 = 1;
            }
            *(float *)&a7[4 * v58 + 4 * v77 * a3] = v76 + *(float *)&a7[4 * v58 + 4 * v77 * a3];
          }
        }
      }
      ++v44;
    }
    while (v44 != v39);
  }
  if (a3 >= 1)
  {
    uint64_t v78 = 0;
    int64_t v79 = *(_DWORD **)a9;
    do
    {
      int v80 = v79[v78];
      if (v80 >= 2)
      {
        float v81 = (float)v80;
        int v82 = 35;
        uint64_t v83 = (float *)a7;
        do
        {
          *uint64_t v83 = *v83 / v81;
          v83 += a3;
          --v82;
        }
        while (v82);
      }
      ++v78;
      a7 += 4;
    }
    while (v78 != a3);
  }
  if (v38)
  {
    int v86 = v38;
    operator delete(v38);
  }
}

void sub_237C2FEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ou3dod::PaddingOrTrimming(const void **a1, int **a2, _WORD *a3)
{
  if ((unsigned char *)a1[1] - (unsigned char *)*a1 != 16 || (v5 = *a2, int v4 = a2[1], (char *)v4 - (char *)*a2 != 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 4.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  int v8 = 1;
  while (v5 != v4)
  {
    int v9 = *v5++;
    v8 *= v9;
  }
  uint64_t v10 = v8;
  LOWORD(__p) = 0;
  std::vector<half>::vector(v43, v8, &__p);
  std::__fs::filesystem::directory_entry::_Path __p = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a1, (uint64_t)a1[1], ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 2);
  uint64_t v11 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    int v13 = (int *)__p;
    int v14 = *a2;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    do
    {
      int v16 = *v14++;
      int v15 = v16;
      if (v16 >= *v13) {
        int v15 = *v13;
      }
      *v13++ = v15;
      --v12;
    }
    while (v12);
  }
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v39, 4uLL, (const std::vector<int>::value_type *)&__x);
  std::vector<int>::value_type v37 = 1;
  std::vector<int>::vector(&__x, 4uLL, &v37);
  std::vector<int>::pointer begin = v39.__begin_;
  int v18 = (char *)*a1;
  std::vector<int>::pointer v19 = __x.__begin_;
  uint64_t v20 = 3;
  uint64_t v21 = *a2;
  do
  {
    begin[v20 - 1] = *(_DWORD *)&v18[v20 * 4] * begin[v20];
    v19[v20 - 1] = v21[v20] * v19[v20];
    --v20;
  }
  while (v20 * 4);
  uint64_t v22 = (unsigned int *)__p;
  int v23 = *(_DWORD *)__p;
  if (*(int *)__p >= 1)
  {
    int v24 = 0;
    int v25 = *((_DWORD *)__p + 1);
    do
    {
      if (v25 >= 1)
      {
        int v26 = 0;
        int v27 = v22[2];
        do
        {
          if (v27 >= 1)
          {
            int v28 = 0;
            uint64_t v29 = v22[3];
            std::vector<int>::pointer v30 = v39.__begin_;
            std::vector<int>::pointer v31 = __x.__begin_;
            __n128 v32 = v43[0];
            do
            {
              if ((int)v29 >= 1)
              {
                int v33 = v26 * v31[1] + v24 * *v31 + v31[2] * v28;
                int v34 = v26 * v30[1] + v24 * *v30 + v30[2] * v28;
                uint64_t v35 = v29;
                do
                {
                  v32[v33++] = a3[v34++];
                  --v35;
                }
                while (v35);
              }
              ++v28;
            }
            while (v28 != v27);
          }
          ++v26;
        }
        while (v26 != v25);
      }
      ++v24;
    }
    while (v24 != v23);
  }
  memcpy(a3, v43[0], 2 * v10);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v39.__begin_)
  {
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
  }
  if (__p)
  {
    int v41 = __p;
    operator delete(__p);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
}

void sub_237C301C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void ou3dod::J4OutputSpecialHandling(int a1, char **a2, uint64_t **a3, char *a4, unint64_t a5)
{
  int v9 = *a2;
  uint64_t v10 = a2[1];
  int v11 = 1;
  if (*a2 != v10)
  {
    unint64_t v12 = *a2;
    do
    {
      int v13 = *(_DWORD *)v12;
      v12 += 4;
      v11 *= v13;
    }
    while (v12 != v10);
  }
  int v14 = v11 * a1;
  if (a5 < v11 * a1)
  {
    std::vector<int> v39 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      ou3dod::J4OutputSpecialHandling(v14, v39);
    }

    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_237CC3E0E);
LABEL_27:
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  if (v10 - v9 != 12)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_27;
  }
  if (*(_DWORD *)v9 * a1 * *((_DWORD *)v9 + 1) * *((_DWORD *)v9 + 2) != a5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_27;
  }
  std::vector<half>::vector(&__p, (int)a5);
  int v15 = *a2;
  int v16 = *((_DWORD *)*a2 + 2);
  if (v16 >= 1)
  {
    int v17 = 0;
    for (int i = 0; i != v16; ++i)
    {
      if (a1 >= 1)
      {
        int v19 = 0;
        int v20 = 0;
        uint64_t v21 = *((unsigned int *)v15 + 1);
        int v22 = v16 * v21;
        int v23 = v21 * v17;
        do
        {
          if ((int)v21 >= 1)
          {
            uint64_t v24 = 0;
            uint64_t v25 = *(unsigned int *)v15;
            int v26 = __p;
            int v27 = i + v25 * v19;
            int v28 = v25 * v23;
            do
            {
              if ((int)v25 >= 1)
              {
                uint64_t v29 = &a4[2 * v28];
                int v30 = v27;
                uint64_t v31 = v25;
                do
                {
                  __int16 v32 = *(_WORD *)v29;
                  v29 += 2;
                  v26[v30] = v32;
                  v30 += v22;
                  --v31;
                }
                while (v31);
              }
              ++v24;
              v27 += v16;
              v28 += v25;
            }
            while (v24 != v21);
          }
          ++v20;
          v19 += v22;
          v23 += v21;
        }
        while (v20 != a1);
      }
      v17 += a1;
    }
  }
  memcpy(a4, __p, v44 - (unsigned char *)__p);
  uint64_t v33 = *(void *)*a2;
  int v34 = *((_DWORD *)*a2 + 2);
  uint64_t v35 = (char *)operator new(0x10uLL);
  v42[1] = v35 + 16;
  v42[2] = v35 + 16;
  *(_DWORD *)uint64_t v35 = a1;
  *(void *)(v35 + 4) = v33;
  *((_DWORD *)v35 + 3) = v34;
  v42[0] = v35;
  uint64_t v36 = **a3;
  int v37 = *((_DWORD *)*a3 + 2);
  uint64_t v38 = (char *)operator new(0x10uLL);
  v41[1] = (int *)(v38 + 16);
  v41[2] = (int *)(v38 + 16);
  *(_DWORD *)uint64_t v38 = a1;
  *(void *)(v38 + 4) = v36;
  *((_DWORD *)v38 + 3) = v37;
  v41[0] = (int *)v38;
  ou3dod::PaddingOrTrimming(v42, v41, a4);
  operator delete(v38);
  operator delete(v35);
  if (__p)
  {
    uint64_t v44 = __p;
    operator delete(__p);
  }
}

void sub_237C304C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void ou3dod::ParseNetOutputAF(float32x4_t *a1, int a2, int a3, void *a4, uint64_t *a5, char *a6, unint64_t a7, uint64_t a8, char *a9, unint64_t a10, char *a11, unint64_t a12, uint64_t *a13)
{
  id v228 = a4;
  unint64_t v197 = a1;
  if (a1[4].i8[0])
  {
    uint64_t v17 = a1[1].i64[0];
    __int32 v18 = a1[1].i32[2];
    int v19 = operator new(0xCuLL);
    v217[1] = v19 + 3;
    v217[2] = v19 + 3;
    *(void *)int v19 = v17;
    _OWORD v19[2] = v18;
    v217[0] = v19;
    memset(&v227, 0, sizeof(v227));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v227, v19, (uint64_t)(v19 + 3), 3uLL);
    *v227.__begin_ = 64;
    ou3dod::J4OutputSpecialHandling(1, (char **)&v227, (uint64_t **)v217, a6, a7);
    ou3dod::J4OutputSpecialHandling(a3, (char **)&v227, (uint64_t **)v217, a9, a10);
    ou3dod::J4OutputSpecialHandling(30, (char **)&v227, (uint64_t **)v217, a11, a12);
    if (v227.__begin_)
    {
      v227.__end_ = v227.__begin_;
      operator delete(v227.__begin_);
    }
    operator delete(v19);
  }
  unint64_t v196 = a5;
  unint64_t v20 = a3;
  int v198 = a2;
  if (a2 < 1)
  {
    uint64_t v41 = 0;
    std::__fs::filesystem::directory_entry::_Path __p = 0;
  }
  else
  {
    std::__fs::filesystem::directory_entry::_Path __p = 0;
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = &a9[2 * a2];
    do
    {
      _H0 = *(_WORD *)&a6[2 * v23];
      __asm { FCVT            S0, H0 }
      float v31 = expf(-_S0);
      _H1 = *(_WORD *)&a9[2 * v23];
      __asm { FCVT            S1, H1 }
      uint64_t v34 = a3 - 1;
      uint64_t v35 = v24;
      if (a3 >= 2)
      {
        do
        {
          _H2 = *(_WORD *)v35;
          __asm { FCVT            S2, H2 }
          if (_S1 < _S2) {
            _S1 = _S2;
          }
          v35 += 2 * a2;
          --v34;
        }
        while (v34);
      }
      float v38 = 1.0 / (v31 + 1.0);
      float v39 = 1.0 / (expf(-_S1) + 1.0);
      float v40 = v38 * v39;
      if (v22 >= v21)
      {
        uint64_t v42 = ((char *)v22 - (char *)__p) >> 3;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (v21 - __p > v43) {
          unint64_t v43 = v21 - __p;
        }
        if ((unint64_t)((char *)v21 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44)
        {
          if (v44 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v45 = (char *)operator new(8 * v44);
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v46 = &v45[8 * v42];
        *(float *)uint64_t v46 = v40;
        *((_DWORD *)v46 + 1) = v23;
        if (v22 == __p)
        {
          std::__fs::filesystem::directory_entry::_Path __p = (float *)&v45[8 * v42];
        }
        else
        {
          unsigned int v47 = &v45[8 * v42];
          do
          {
            uint64_t v48 = *((void *)v22 - 1);
            v22 -= 2;
            *((void *)v47 - 1) = v48;
            v47 -= 8;
          }
          while (v22 != __p);
          int v22 = __p;
          std::__fs::filesystem::directory_entry::_Path __p = (float *)v47;
        }
        uint64_t v21 = (float *)&v45[8 * v44];
        uint64_t v41 = (uint64_t)(v46 + 8);
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *int v22 = v40;
        *((_DWORD *)v22 + 1) = v23;
        uint64_t v41 = (uint64_t)(v22 + 2);
      }
      uint64_t v49 = (v41 - (uint64_t)__p) >> 3;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, v41, v49);
      if ((unint64_t)(v41 - (void)__p) >= 0x1F41)
      {
        if (v41 - (uint64_t)__p >= 9)
        {
          uint64_t v50 = 0;
          int32x2_t v51 = __p;
          uint64_t v52 = *(void *)__p;
          do
          {
            __int32 v53 = v51;
            v51 += 2 * v50 + 2;
            uint64_t v54 = 2 * v50;
            uint64_t v50 = (2 * v50) | 1;
            uint64_t v55 = v54 + 2;
            if (v55 < v49 && *v51 > v51[2])
            {
              v51 += 2;
              uint64_t v50 = v55;
            }
            *(void *)__int32 v53 = *(void *)v51;
          }
          while (v50 <= (uint64_t)((unint64_t)(v49 - 2) >> 1));
          signed int v56 = (void *)(v41 - 8);
          if (v51 == (float *)(v41 - 8))
          {
            *(void *)int32x2_t v51 = v52;
          }
          else
          {
            *(void *)int32x2_t v51 = *v56;
            void *v56 = v52;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, (uint64_t)(v51 + 2), ((char *)(v51 + 2) - (char *)__p) >> 3);
          }
        }
        v41 -= 8;
      }
      ++v23;
      v24 += 2;
      int v22 = (float *)v41;
    }
    while (v23 != a2);
  }
  memset(&v227, 0, sizeof(v227));
  std::vector<int>::reserve(&v227, 0x3E8uLL);
  int32x2_t v57 = a9;
  if (__p != (float *)v41)
  {
    do
    {
      std::vector<int>::pointer end = v227.__end_;
      if (v227.__end_ >= v227.__end_cap_.__value_)
      {
        std::vector<int>::pointer begin = v227.__begin_;
        int64_t v62 = v227.__end_ - v227.__begin_;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        int64_t v64 = (char *)v227.__end_cap_.__value_ - (char *)v227.__begin_;
        if (((char *)v227.__end_cap_.__value_ - (char *)v227.__begin_) >> 1 > v63) {
          unint64_t v63 = v64 >> 1;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          float v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v227.__end_cap_, v65);
          std::vector<int>::pointer begin = v227.__begin_;
          std::vector<int>::pointer end = v227.__end_;
        }
        else
        {
          float v66 = 0;
        }
        int v67 = (int *)&v66[4 * v62];
        int *v67 = *((_DWORD *)__p + 1);
        float v60 = v67 + 1;
        while (end != begin)
        {
          int v68 = *--end;
          *--int v67 = v68;
        }
        v227.__begin_ = v67;
        v227.__end_ = v60;
        v227.__end_cap_.__value_ = (int *)&v66[4 * v65];
        if (begin) {
          operator delete(begin);
        }
        int16x4_t v59 = __p;
      }
      else
      {
        int16x4_t v59 = __p;
        *v227.__end_ = *((_DWORD *)__p + 1);
        float v60 = end + 1;
      }
      v227.__end_ = v60;
      if (v41 - (uint64_t)v59 >= 9)
      {
        uint64_t v69 = 0;
        uint64_t v70 = (v41 - (uint64_t)v59) >> 3;
        uint64_t v71 = *(void *)v59;
        float v72 = v59;
        do
        {
          int v73 = v72;
          v72 += 2 * v69 + 2;
          uint64_t v74 = 2 * v69;
          uint64_t v69 = (2 * v69) | 1;
          uint64_t v75 = v74 + 2;
          if (v75 < v70 && *v72 > v72[2])
          {
            v72 += 2;
            uint64_t v69 = v75;
          }
          *(void *)int v73 = *(void *)v72;
        }
        while (v69 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
        float v76 = (void *)(v41 - 8);
        if (v72 == (float *)(v41 - 8))
        {
          *(void *)float v72 = v71;
          int16x4_t v59 = __p;
        }
        else
        {
          *(void *)float v72 = *v76;
          *float v76 = v71;
          int16x4_t v59 = __p;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, (uint64_t)(v72 + 2), ((char *)(v72 + 2) - (char *)__p) >> 3);
        }
      }
      v41 -= 8;
    }
    while (v59 != (float *)v41);
  }
  if (v227.__begin_ != v227.__end_)
  {
    std::vector<int>::pointer v77 = v227.__end_ - 1;
    if (v227.__end_ - 1 > v227.__begin_)
    {
      std::vector<int>::pointer v78 = v227.__begin_ + 1;
      do
      {
        int v79 = *(v78 - 1);
        *(v78 - 1) = *v77;
        *v77-- = v79;
        _CF = v78++ >= v77;
      }
      while (!_CF);
    }
  }
  uint64_t v80 = *a13;
  for (uint64_t i = a13[1]; i != v80; std::__destroy_at[abi:ne180100]<OUBox3d,0>(i))
    i -= 224;
  a13[1] = v80;
  if (a3 >= 1)
  {
    uint64_t v206 = 0;
    double v82 = 1.0;
    float v83 = 0.1;
    float v84 = 0.5;
    do
    {
      uint64_t v224 = 0;
      unint64_t v225 = 0;
      unint64_t v226 = 0;
      uint64_t v221 = 0;
      unint64_t v222 = 0;
      unint64_t v223 = 0;
      std::vector<int>::pointer v85 = v227.__begin_;
      for (j = v227.__end_; v85 != j; int32x2_t v57 = a9)
      {
        uint64_t v86 = *v85;
        _H0 = *(_WORD *)&a6[2 * v86];
        __asm { FCVT            S0, H0 }
        float v89 = expf(-_S0);
        _H0 = *(_WORD *)&v57[2 * (int)v86 + 2 * (int)v206 * v198];
        __asm { FCVT            S0, H0 }
        float v92 = expf(-_S0);
        long long v218 = 0;
        long long v219 = 0;
        uint64_t v220 = 0;
        std::vector<float>::reserve(&v218, v20);
        uint64_t v96 = 0;
        float v97 = v82 / (v89 + v82);
        *(double *)_Q0.i64 = v82 / (v92 + v82);
        float v99 = *(double *)_Q0.i64;
        uint64_t v100 = &v57[2 * v86];
        unint64_t v101 = v219;
        do
        {
          _H0 = *(_WORD *)&v100[2 * v96 * v198];
          __asm { FCVT            S10, H0 }
          if (v101 >= v220)
          {
            float v105 = (char *)v218;
            uint64_t v106 = (v101 - (unsigned char *)v218) >> 2;
            unint64_t v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v108 = v220 - (unsigned char *)v218;
            if ((v220 - (unsigned char *)v218) >> 1 > v107) {
              unint64_t v107 = v108 >> 1;
            }
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v109 = v107;
            }
            if (v109)
            {
              int v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v220, v109);
              float v105 = (char *)v218;
              unint64_t v101 = v219;
            }
            else
            {
              int v110 = 0;
            }
            uint64_t v111 = &v110[4 * v106];
            *(_DWORD *)uint64_t v111 = _S10;
            float v104 = v111 + 4;
            while (v101 != v105)
            {
              int v112 = *((_DWORD *)v101 - 1);
              v101 -= 4;
              *((_DWORD *)v111 - 1) = v112;
              v111 -= 4;
            }
            long long v218 = v111;
            long long v219 = v104;
            uint64_t v220 = &v110[4 * v109];
            if (v105) {
              operator delete(v105);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v101 = _S10;
            float v104 = v101 + 4;
          }
          long long v219 = v104;
          ++v96;
          unint64_t v101 = v104;
        }
        while (v96 != v20);
        *(float *)uint64_t v229 = v97 * v99;
        if ((float)(v97 * v99) >= v83)
        {
          __int32 v113 = v197[1].i32[1];
          unsigned __int32 v114 = v197[1].u32[2];
          float32x4_t v116 = v197[2];
          float32x4_t v115 = v197[3];
          uint64_t v117 = &a11[2 * v86];
          _H0 = *(_WORD *)&v117[2 * v198];
          __asm { FCVT            S0, H0; float }
          int v202 = v197[4].u8[0];
          float v203 = *(float *)_Q0.i32;
          if (v197[4].i8[0])
          {
            float32x4_t v207 = v197[2];
            float32x4_t v199 = v197[3];
            __int32 v119 = v197[1].i32[1];
            _S0 = expf(*(float *)_Q0.i32);
            __asm
            {
              FCVT            H0, S0
              FCVT            S8, H0
            }
            __int16 v201 = *(_WORD *)v117;
            __asm { FCVT            S0, H0; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            _Q0.f32[0] = (float)(_S8 - _S0) * v84;
            float32x4_t v210 = _Q0;
            _H9 = *(_WORD *)&v117[6 * v198];
            __asm { FCVT            S0, H9; float }
            _S0 = expf(_Q0.f32[0]);
            __asm
            {
              FCVT            H0, S0
              FCVT            S8, H0
            }
            __int16 v200 = *(_WORD *)&v117[4 * v198];
            __asm { FCVT            S0, H0; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            float32x4_t v132 = v210;
            v132.f32[1] = (float)(_S8 - _S0) * v84;
            float32x4_t v211 = v132;
            _H14 = *(_WORD *)&v117[10 * v198];
            __asm { FCVT            S0, H14; float }
            _S0 = expf(_S0);
            __asm { FCVT            H8, S0 }
            _H15 = *(_WORD *)&v117[8 * v198];
            __asm { FCVT            S0, H15; float }
            _S0 = expf(_S0);
            float32x4_t v116 = v207;
            float32x4_t v95 = v211;
            __int32 v113 = v119;
            float32x4_t v115 = v199;
            __asm { FCVT            H0, S0 }
          }
          else
          {
            v93.i16[0] = *(_WORD *)v117;
            _H9 = *(_WORD *)&v117[6 * v198];
            __asm { FCVT            S3, H9 }
            __int16 v200 = *(_WORD *)&v117[4 * v198];
            __int16 v201 = *(_WORD *)v117;
            v93.i16[1] = v200;
            int8x16_t v140 = _Q0;
            v140.i32[1] = _S3;
            *(float32x2_t *)v95.f32 = vmul_f32(vsub_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v93)), (float32x2_t)0x3F0000003F000000);
            _H8 = *(_WORD *)&v117[10 * v198];
            _H0 = *(_WORD *)&v117[8 * v198];
            _H14 = _H8;
            _H15 = _H0;
          }
          int v143 = 0;
          unsigned int v144 = v86 % (v114 * v113);
          v145.i64[0] = 0x3F0000003F000000;
          v145.i64[1] = 0x3F0000003F000000;
          *(float *)v140.i32 = (float)(int)(v86 / (v114 * v113)) * v116.f32[0];
          v94.i32[0] = v144 / v114;
          v94.i32[1] = v144 % v114;
          *(float32x2_t *)v94.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v116.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL), 4uLL), vcvt_f32_s32(*(int32x2_t *)v94.i8));
          float32x4_t v146 = vaddq_f32(vaddq_f32(v115, vmulq_f32(v116, v145)), (float32x4_t)vextq_s8(vextq_s8(v140, v140, 4uLL), v94, 0xCuLL));
          __asm
          {
            FCVT            S2, H8
            FCVT            S0, H0
          }
          v95.f32[2] = (float)(_S2 - _S0) * v84;
          __n128 v208 = (__n128)vaddq_f32(v146, v95);
          uint64_t v149 = &v117[12 * v198];
          LOWORD(_S0) = *(_WORD *)v149;
          __asm { FCVT            S0, H0 }
          long long v151 = &a11[14 * v198 + 2 * v86];
          uint64_t v152 = -11;
          do
          {
            _H1 = *(_WORD *)v151;
            __asm { FCVT            S1, H1 }
            if (_S0 < _S1)
            {
              int v143 = v152 + 12;
              _S0 = _S1;
            }
            v151 += 2 * v198;
            _CF = __CFADD__(v152++, 1);
          }
          while (!_CF);
          float v155 = v83;
          _H0 = *(_WORD *)&v149[2 * (v143 + 12) * v198];
          __asm { FCVT            S0, H0; float }
          _S8 = expf(_S0);
          _H0 = v201;
          __asm { FCVT            S11, H0 }
          _H0 = v200;
          __asm
          {
            FCVT            S10, H0
            FCVT            S9, H9
          }
          if (v202)
          {
            _S0 = expf(v203);
            __asm
            {
              FCVT            H0, S0
              FCVT            S13, H0
            }
            _S0 = expf(_S11);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            *(float *)v169.i32 = _S13 + _S0;
            int8x16_t v212 = v169;
            _S0 = expf(_S10);
            __asm
            {
              FCVT            H0, S0
              FCVT            S10, H0
            }
            _S0 = expf(_S9);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            int8x16_t v174 = v212;
            *(float *)&v174.i32[1] = _S10 + _S0;
            int8x16_t v213 = v174;
            __asm { FCVT            S0, H15; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H15, S0
              FCVT            S0, H14; float
            }
            _S0 = expf(_S0);
            int8x16_t v158 = v213;
            __asm { FCVT            H14, S0 }
          }
          else
          {
            *(float *)v158.i32 = v203 + _S11;
            *(float *)&v158.i32[1] = _S10 + _S9;
          }
          __asm
          {
            FCVT            S0, H15
            FCVT            S2, H14
          }
          *(float *)&v158.i32[2] = _S0 + _S2;
          int8x16_t v214 = v158;
          centroidSizeAngleToBox3d(v217, v208, v158, 0.0);
          uint64_t v181 = *v196;
          long long v182 = [MEMORY[0x263F08C38] UUID];
          v183 = (id *)(v181 + 8 * v206);
          long long v216 = v182;
          unint64_t v184 = v225;
          if (v225 >= v226)
          {
            uint64_t v185 = std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(&v224, (long long *)v217, v183, (float *)v229, &v216, (uint64_t)&v218, &v228);
            float v83 = v155;
            double v82 = 1.0;
            float v84 = 0.5;
          }
          else
          {
            OUBox3d::OUBox3d(v225, (long long *)v217, v183, v182, (uint64_t)&v218, v228, *(float *)v229);
            float v83 = v155;
            double v82 = 1.0;
            float v84 = 0.5;
            uint64_t v185 = v184 + 224;
          }
          __asm
          {
            FCVT            H1, S8
            FCVT            D1, H1
          }
          float v188 = (double)(2 * v143) * 3.14159265 / 12.0 + _D1;
          float v189 = v188 + floor(v188 / 6.28318531) * -6.28318531;
          unint64_t v225 = v185;

          centroidSizeAngleToBox3d(v217, v208, v214, -v189);
          uint64_t v190 = *v196;
          uint64_t v191 = [MEMORY[0x263F08C38] UUID];
          uint64_t v192 = (id *)(v190 + 8 * v206);
          long long v215 = v191;
          unint64_t v193 = v222;
          if (v222 >= v223)
          {
            uint64_t v194 = std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(&v221, (long long *)v217, v192, (float *)v229, &v215, (uint64_t)&v218, &v228);
          }
          else
          {
            OUBox3d::OUBox3d(v222, (long long *)v217, v192, v191, (uint64_t)&v218, v228, *(float *)v229);
            uint64_t v194 = v193 + 224;
          }
          unint64_t v222 = v194;
        }
        if (v218)
        {
          long long v219 = (char *)v218;
          operator delete(v218);
        }
        ++v85;
      }
      nmsSameCls(&v224, (uint64_t)box3dIouLoose, (char **)v217, 0.25);
      select<OUBox3d>(&v221, v217, (uint64_t *)&v218);
      std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>>(a13, (long long *)a13[1], (long long *)v218, (uint64_t)v219, 0x6DB6DB6DB6DB6DB7 * ((v219 - (unsigned char *)v218) >> 5));
      v229[0] = &v218;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](v229);
      if (v217[0])
      {
        v217[1] = v217[0];
        operator delete(v217[0]);
      }
      v217[0] = &v221;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      v217[0] = &v224;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      ++v206;
    }
    while (v206 != v20);
  }
  if (v227.__begin_)
  {
    v227.__end_ = v227.__begin_;
    operator delete(v227.__begin_);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_237C31214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(v63);

  _Unwind_Resume(a1);
}

float box3dIouLoose(const box3d *a1, const box3d *a2)
{
  float32x4_t v2 = *(float32x4_t *)a1;
  float32x4_t v3 = *(float32x4_t *)a2;
  uint64_t v4 = 1;
  float32x4_t v5 = *(float32x4_t *)a1;
  float32x4_t v6 = *(float32x4_t *)a2;
  do
  {
    int v7 = 0;
    long long v8 = *((_OWORD *)a1 + v4);
    long long v9 = *((_OWORD *)a2 + v4);
    do
    {
      float32x4_t v10 = v6;
      float32x4_t v11 = v3;
      float32x4_t v12 = v5;
      __int32 v13 = v2.i32[3];
      int v14 = (float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      int v15 = (float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      int v16 = (float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      uint64_t v17 = (float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      float32x4_t v48 = v2;
      float v18 = *v17;
      long long v44 = v8;
      float v19 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      if (v19 < v18) {
        float v18 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      }
      *uint64_t v17 = v18;
      float32x4_t v20 = v48;
      float32x4_t v2 = v48;
      v2.i32[3] = v13;
      float32x4_t v46 = v11;
      float v21 = *v16;
      long long v43 = v9;
      float v22 = *v15;
      if (*v15 < v21) {
        float v21 = *v15;
      }
      float *v16 = v21;
      float32x4_t v23 = v46;
      float32x4_t v3 = v46;
      v3.i32[3] = v11.i32[3];
      float32x4_t v47 = v12;
      if (*v14 >= v19) {
        float v19 = *v14;
      }
      float *v14 = v19;
      float32x4_t v24 = v47;
      float32x4_t v5 = v47;
      v5.i32[3] = v12.i32[3];
      uint64_t v25 = (float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      float32x4_t v45 = v10;
      float v26 = *v25;
      if (*v25 < v22) {
        float v26 = v22;
      }
      float *v25 = v26;
      float32x4_t v27 = v45;
      float32x4_t v6 = v45;
      v6.i32[3] = v10.i32[3];
      ++v7;
    }
    while (v7 != 3);
    ++v4;
  }
  while (v4 != 5);
  int v28 = 0;
  long long v29 = 0uLL;
  do
  {
    float32x4_t v41 = v24;
    int v30 = (float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    float v31 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    float32x4_t v40 = v27;
    if (*(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3))) < v31) {
      float v31 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    }
    float32x4_t v39 = v20;
    float v32 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    float32x4_t v38 = v23;
    if (v32 < *v30) {
      float v32 = *v30;
    }
    long long v42 = v29;
    *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3))) = v31 - v32;
    long long v29 = v42;
    ++v28;
  }
  while (v28 != 3);
  float32x2_t v33 = vmaxnm_f32(*(float32x2_t *)&v42, 0);
  float result = 0.0;
  float v35 = fmaxf(*((float *)&v42 + 2), 0.0) * vmul_lane_f32(v33, v33, 1).f32[0];
  if (v35 >= 0.00000001)
  {
    float32x4_t v36 = vsubq_f32(v6, v3);
    float32x4_t v37 = vsubq_f32(v5, v2);
    return v35
         / (float)(vaddq_f32(vmulq_laneq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v36.f32, 1), v36, 2), vmulq_laneq_f32(vmulq_lane_f32(v37, *(float32x2_t *)v37.f32, 1), v37, 2)).f32[0]- v35);
  }
  return result;
}

void select<OUBox3d>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<OUBox3d>::reserve(a3, (uint64_t)(a2[1] - *a2) >> 3);
  int v7 = (void *)*a2;
  float32x4_t v6 = (void *)a2[1];
  memset(v8, 0, sizeof(v8));
  std::vector<OUBox3d>::__init_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(v8, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  for (; v7 != v6; ++v7)
  {
    OUBox3d::OUBox3d(&v9, (const OUBox3d *)(v8[0] + 224 * *v7));
    std::vector<OUBox3d>::push_back[abi:ne180100](a3, (long long *)&v9);

    if (__p) {
      operator delete(__p);
    }
    if (v13)
    {
      int v14 = v13;
      operator delete(v13);
    }
  }
  v9.id var1 = v8;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_237C31628(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, OUBox3d *a5)
{
  *(void *)(v6 - 56) = v5;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 56));
  _Unwind_Resume(a1);
}

uint64_t ou3dod::ParseNetOutputSSD(float a1, uint64_t a2, unsigned int a3, void *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  long long v97 = 0u;
  long long v98 = 0u;
  int v99 = 1065353216;
  int8x16_t v94 = 0;
  float32x4_t v95 = 0;
  uint64_t v96 = 0;
  OUBox3d v9 = (id *)ou3dod::kOfflineSsdTypesLUT;
  for (uint64_t i = qword_26AF273F8; v9 != (id *)i; ++v9)
  {
    *(void *)&v83[0] = *v9;
    id v11 = (float *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)v83);
    id v12 = v11;
    __int32 v13 = v95;
    if (v95 >= v96)
    {
      int v15 = v94;
      uint64_t v16 = v95 - v94;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = (char *)v96 - (char *)v94;
      if (((char *)v96 - (char *)v94) >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        float32x4_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v96, v19);
        int v15 = v94;
        __int32 v13 = v95;
      }
      else
      {
        float32x4_t v20 = 0;
      }
      float v21 = (float *)&v20[4 * v16];
      float *v21 = *v12;
      int v14 = v21 + 1;
      while (v13 != v15)
      {
        int v22 = *((_DWORD *)v13-- - 1);
        *((_DWORD *)v21-- - 1) = v22;
      }
      int8x16_t v94 = v21;
      float32x4_t v95 = v14;
      uint64_t v96 = (float *)&v20[4 * v19];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *float32x4_t v95 = *v11;
      int v14 = v13 + 1;
    }
    float32x4_t v95 = v14;
  }
  uint64_t v23 = *a8;
  for (uint64_t j = a8[1]; j != v23; std::__destroy_at[abi:ne180100]<OUBox3d,0>(j))
    j -= 224;
  a8[1] = v23;
  uint64_t v25 = a6;
  if ((int)a3 >= 1)
  {
    uint64_t v26 = 0;
    v27.i64[0] = 0;
    v27.i64[1] = LODWORD(a1);
    float32x4_t v72 = v27;
    int v28 = (float *)(a6 + 196 * a3);
    uint64_t v29 = 4 * a3;
    int v30 = (float *)(a6 + 20 * a3);
    float v31 = (float *)(a6 + 116 * a3);
    double v32 = 12.0;
    double v71 = 0.100000001;
    uint64_t v33 = a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v97);
      float v34 = *(float *)(v25 + 4 * (v26 + v33));
      if (v34 >= -2.1972)
      {
        float v35 = expf(-v34);
        v36.i32[0] = *(_DWORD *)(v25 + 4 * (v26 + 2 * a3));
        v36.i32[1] = *(_DWORD *)(v25 + 4 * (v26 + (int)(3 * a3)));
        v36.i32[2] = *(_DWORD *)(v25 + 4 * (v26 + (int)(4 * a3)));
        float32x4_t v79 = v36;
        float32x4_t v75 = *a5;
        float32x4_t v76 = *(float32x4_t *)(*a4 + 16 * v26);
        std::vector<float>::vector(&v92, 5uLL);
        uint64_t v38 = 0;
        float v39 = 1.0 / (v35 + 1.0);
        float32x4_t v40 = vaddq_f32(vaddq_f32(v79, v76), v75);
        float32x4_t v41 = v92;
        uint64_t v80 = v28;
        long long v42 = v28;
        do
        {
          v41[v38] = *v42;
          long long v42 = (float *)((char *)v42 + v29);
          ++v38;
        }
        while (v38 != 5);
        long long v43 = v93;
        if (v41 != v93)
        {
          float32x4_t v77 = v40;
          uint64_t v44 = 0;
          unint64_t v45 = v93 - v41;
          float v46 = *v41;
          if (v45 <= 1) {
            unint64_t v45 = 1;
          }
          do
          {
            if (v41[v44] > v46) {
              float v46 = v41[v44];
            }
            ++v44;
          }
          while (v45 != v44);
          float v47 = 0.0;
          float32x4_t v48 = v41;
          do
          {
            float v49 = *v48++;
            float v47 = v47 + expf(v49 - v46);
          }
          while (v48 != v43);
          float32x4_t v40 = v77;
          if (v39 / v47 >= v71)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            LODWORD(v91[0]) = 0;
            do
            {
              float v52 = (float)(expf(v41[v51] - v46) * v39) / v47;
              if (v52 > v94[v51])
              {
                *(void *)&v83[0] = v91;
                *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v97, (int *)v91, (uint64_t)&std::piecewise_construct, (_DWORD **)v83)+ 5) = v52;
                int v50 = v91[0];
                float32x4_t v41 = v92;
                long long v43 = v93;
              }
              LODWORD(v91[0]) = ++v50;
              uint64_t v51 = v50;
            }
            while (v50 < (unint64_t)(v43 - v41));
            double v32 = 12.0;
            float32x4_t v40 = v77;
          }
        }
        uint64_t v53 = 0;
        int v54 = 0;
        float v55 = *(float *)(a6 + 4 * (v26 + (int)(5 * a3)));
        signed int v56 = v30;
        do
        {
          if (*v56 > v55)
          {
            float v55 = *v56;
            int v54 = v53;
          }
          ++v53;
          signed int v56 = (float *)((char *)v56 + v29);
        }
        while (v53 != 12);
        uint64_t v57 = 0;
        int v58 = 0;
        double v59 = *(float *)(a6 + 4 * (v26 + (int)((v54 + 17) * a3))) * 3.14159265 / v32;
        float v60 = (float)v54;
        float v61 = *(float *)(a6 + 4 * (v26 + (int)(29 * a3)));
        int64_t v62 = v31;
        do
        {
          if (*v62 > v61)
          {
            float v61 = *v62;
            int v58 = v57;
          }
          ++v57;
          int64_t v62 = (float *)((char *)v62 + v29);
        }
        while (v57 != 5);
        float32x4_t v63 = *(float32x4_t *)(ou3dod::kOfflineSSDAnchorSizeList + 16 * v58);
        v37.i32[0] = *(_DWORD *)(a6 + 4 * (v26 + (int)((3 * v58 + 34) * a3)));
        v37.i32[1] = *(_DWORD *)(a6 + 4 * (v26 + (int)((3 * v58 + 35) * a3)));
        *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v63.f32);
        v37.i32[2] = vmuls_lane_f32(*(float *)(a6 + 4 * (v26 + (int)((3 * v58 + 36) * a3))), v63, 2);
        float v64 = v59;
        memset(v91, 0, sizeof(v91));
        centroidSizeAngleToBox3d(v91, (__n128)vaddq_f32(v72, v40), (int8x16_t)vaddq_f32(v63, v37), v64 + (float)(v60 * 0.5236));
        for (uint64_t k = (float *)v98; k; uint64_t k = *(float **)k)
        {
          uint64_t v66 = *((int *)k + 4);
          uint64_t v67 = ou3dod::kOfflineSsdTypesLUT;
          float v68 = k[5];
          uint64_t v69 = objc_msgSend(MEMORY[0x263F08C38], "UUID", *(void *)&v71);
          OUBox3d::OUBox3d((uint64_t)v83, v91, (id *)(v67 + 8 * v66), v69, (uint64_t)&v92, @"offline", v68);
          std::vector<OUBox3d>::emplace_back<OUBox3d>(a8, v83);

          if (__p) {
            operator delete(__p);
          }
          if (v87)
          {
            float v88 = v87;
            operator delete(v87);
          }
        }
        if (v92)
        {
          float16x4_t v93 = v92;
          operator delete(v92);
        }
        uint64_t v25 = a6;
        int v28 = v80;
        uint64_t v33 = a3;
      }
      ++v26;
      ++v28;
      ++v30;
      ++v31;
    }
    while (v26 != v33);
  }
  if (v94)
  {
    float32x4_t v95 = v94;
    operator delete(v94);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v97);
}

void sub_237C31C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,OUBox3d *a21)
{
  uint64_t v23 = *(void **)(v21 - 232);
  if (v23)
  {
    *(void *)(v21 - 224) = v23;
    operator delete(v23);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v21 - 208);
  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at(uint64_t a1, void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 40;
}

uint64_t std::vector<OUBox3d>::emplace_back<OUBox3d>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 5);
    if ((unint64_t)(v9 + 1) > 0x124924924924924) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v12 = 0x124924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      __int32 v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v4, v12);
    }
    else {
      __int32 v13 = 0;
    }
    int v15 = v13;
    uint64_t v16 = &v13[224 * v9];
    uint64_t v18 = &v13[224 * v12];
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>((uint64_t)v16, a2);
    unint64_t v17 = v16 + 224;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 224;
    a1[1] = v7 + 224;
  }
  a1[1] = v8;
  return v8 - 224;
}

void sub_237C31E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ou3dod::PostprocessAF(float32x4_t *a1, uint64_t a2, __CFString *a3, float32_t a4)
{
  int v7 = -1227133513 * ((uint64_t)(a3->info - (unint64_t)a3->isa) >> 5);
  uint64_t v38 = 0;
  float v39 = 0;
  float32x4_t v40 = 0;
  std::vector<unsigned long>::reserve((void **)&v38, v7);
  if (v7 >= 1)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = (uint64_t)a3->isa + 224 * i;
      float v10 = *(float *)(v9 + 136);
      if (v10 >= *(float *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at(a2, (void **)(v9 + 128)))
      {
        uint64_t v11 = v39;
        if (v39 >= v40)
        {
          __int32 v13 = v38;
          uint64_t v14 = (v39 - v38) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v40 - v38;
          if ((v40 - v38) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v40, v17);
            __int32 v13 = v38;
            uint64_t v11 = v39;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = &v18[8 * v14];
          *(void *)uint64_t v19 = i;
          unint64_t v12 = v19 + 8;
          while (v11 != v13)
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          uint64_t v38 = v19;
          float v39 = v12;
          float32x4_t v40 = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(void *)float v39 = i;
          unint64_t v12 = v11 + 8;
        }
        float v39 = v12;
      }
    }
  }
  uint64_t v21 = v39 - v38;
  if ((int)((unint64_t)(v39 - v38) >> 3) >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    do
    {
      OUBox3d::operator=((uint64_t)a3->isa + v22, (long long *)a3->isa + 14 * *(void *)&v38[v23]);
      v23 += 8;
      v22 += 224;
    }
    while ((v21 & 0x7FFFFFFF8) != v23);
  }
  std::vector<OUBox3d>::resize(a3, (int)(v21 >> 3));
  isa = (box3d *)a3->isa;
  info = (char *)a3->info;
  if (a3->isa != info)
  {
    do
    {
      swapCornerGT2QA(isa, (uint64_t)v37);
      long long v26 = v37[0];
      long long v27 = v37[1];
      long long v28 = v37[3];
      *((_OWORD *)isa + 2) = v37[2];
      *((_OWORD *)isa + 3) = v28;
      *(_OWORD *)isa = v26;
      *((_OWORD *)isa + 1) = v27;
      long long v29 = v37[4];
      long long v30 = v37[5];
      long long v31 = v37[7];
      *((_OWORD *)isa + 6) = v37[6];
      *((_OWORD *)isa + 7) = v31;
      *((_OWORD *)isa + 4) = v29;
      *((_OWORD *)isa + 5) = v30;
      isa = (box3d *)((char *)isa + 224);
    }
    while (isa != (box3d *)info);
    double v32 = (char *)a3->isa;
    uint64_t v33 = (char *)a3->info;
    if (a3->isa != v33)
    {
      float32x4_t v34 = *a1;
      v34.f32[2] = a4;
      do
      {
        for (uint64_t j = 0; j != 128; j += 16)
          *(float32x4_t *)&v32[j] = vaddq_f32(v34, *(float32x4_t *)&v32[j]);
        v32 += 224;
      }
      while (v32 != v33);
    }
  }
  if (v38)
  {
    float v39 = v38;
    operator delete(v38);
  }
}

void sub_237C32104(_Unwind_Exception *exception_object)
{
  float32x4_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    float v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ou3dod::PostprocessSSD(uint64_t *a1)
{
  nmsSameCls(a1, (uint64_t)box3dIouLoose, v18, 0.25);
  select<OUBox3d>(a1, v18, (uint64_t *)&v10);
  std::vector<OUBox3d>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = v10;
  a1[2] = v11;
  *(void *)&long long v11 = 0;
  long long v10 = 0uLL;
  uint64_t v19 = (void **)&v10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  while (v3 != v2)
  {
    swapCornerGT2QA((const box3d *)v3, (uint64_t)&v10);
    long long v4 = v10;
    long long v5 = v11;
    long long v6 = v13;
    *(_OWORD *)(v3 + 32) = v12;
    *(_OWORD *)(v3 + 48) = v6;
    *(_OWORD *)uint64_t v3 = v4;
    *(_OWORD *)(v3 + 16) = v5;
    long long v7 = v14;
    long long v8 = v15;
    long long v9 = v17;
    *(_OWORD *)(v3 + 96) = v16;
    *(_OWORD *)(v3 + 112) = v9;
    *(_OWORD *)(v3 + 64) = v7;
    *(_OWORD *)(v3 + 80) = v8;
    v3 += 224;
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_237C322B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(void *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    long long v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      long long v8 = *a1;
      long long v7 = a1[1];
    }
    else
    {
      long long v14 = 0;
    }
    long long v15 = &v14[4 * v11];
    long long v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    long long v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    float result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C3244C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::priority_queue<float,std::vector<float>,std::greater<float>>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  long long v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    size_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      size_t v8 = *(_DWORD **)a1;
      long long v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)long long v14 = *a2;
    uint64_t v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = (float *)(v6 + 1);
  }
  *(void *)(a1 + 8) = v7;
  long long v17 = *(_DWORD **)a1;
  uint64_t v18 = (uint64_t)v7 - *(void *)a1;
  if (v18 >= 5)
  {
    unint64_t v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    uint64_t v20 = (float *)&v17[v19];
    float v22 = *(v7 - 1);
    uint64_t v21 = v7 - 1;
    float v23 = v22;
    float v24 = *v20;
    if (*v20 > v22)
    {
      do
      {
        float *v21 = v24;
        uint64_t v21 = v20;
        if (!v19) {
          break;
        }
        unint64_t v19 = (v19 - 1) >> 1;
        uint64_t v20 = (float *)&v17[v19];
        float v24 = *v20;
      }
      while (*v20 > v23);
      float *v21 = v23;
    }
  }
}

void std::priority_queue<float>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  long long v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    size_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      size_t v8 = *(_DWORD **)a1;
      long long v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)long long v14 = *a2;
    uint64_t v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = (float *)(v6 + 1);
  }
  *(void *)(a1 + 8) = v7;
  long long v17 = *(_DWORD **)a1;
  uint64_t v18 = (uint64_t)v7 - *(void *)a1;
  if (v18 >= 5)
  {
    unint64_t v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    uint64_t v20 = (float *)&v17[v19];
    float v22 = *(v7 - 1);
    uint64_t v21 = v7 - 1;
    float v23 = v22;
    float v24 = *v20;
    if (*v20 < v22)
    {
      do
      {
        float *v21 = v24;
        uint64_t v21 = v20;
        if (!v19) {
          break;
        }
        unint64_t v19 = (v19 - 1) >> 1;
        uint64_t v20 = (float *)&v17[v19];
        float v24 = *v20;
      }
      while (*v20 < v23);
      float *v21 = v23;
    }
  }
}

void *std::vector<half>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    long long v6 = (_WORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_237C32750(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<half>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_237C32848(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(uint64_t *a1, long long *a2, id *a3, float *a4, void **a5, uint64_t a6, void **a7)
{
  uint64_t v8 = *a1;
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (uint64_t)(a1 + 2);
  unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v8) >> 5);
  if (2 * v18 > v10) {
    unint64_t v10 = 2 * v18;
  }
  if (v18 >= 0x92492492492492) {
    unint64_t v19 = 0x124924924924924;
  }
  else {
    unint64_t v19 = v10;
  }
  long long v27 = a1 + 2;
  if (v19) {
    uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v17, v19);
  }
  else {
    uint64_t v20 = 0;
  }
  float v23 = v20;
  float v24 = &v20[224 * v9];
  uint64_t v25 = (uint64_t)v24;
  long long v26 = &v20[224 * v19];
  OUBox3d::OUBox3d((uint64_t)v24, a2, a3, *a5, a6, *a7, *a4);
  uint64_t v25 = (uint64_t)(v24 + 224);
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v23);
  uint64_t v21 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v23);
  return v21;
}

void sub_237C329A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

long long *std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>>(uint64_t *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 5) >= a5)
      {
        uint64_t v21 = &a3[14 * a5];
      }
      else
      {
        uint64_t v21 = &a3[2 * ((uint64_t)(v12 - (void)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d const*,OUBox3d const*,OUBox3d*>(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<OUBox3d>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x92492492492492) {
        unint64_t v18 = 0x124924924924924;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      float v22 = (OUBox3d *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      long long v27 = v22;
      long long v28 = &v19[224 * v18];
      uint64_t v23 = 224 * a5;
      float v24 = (OUBox3d *)((char *)v22 + 224 * a5);
      do
      {
        OUBox3d::OUBox3d(v22, (const OUBox3d *)v7);
        float v22 = (OUBox3d *)((char *)v22 + 224);
        v7 += 14;
        v23 -= 224;
      }
      while (v23);
      long long v27 = v24;
      unint64_t v5 = (long long *)std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_237C32B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OUBox3d>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = (long long *)(a2 + v6 - a4);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v8, v10);
      v10 += 14;
      v8 += 224;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<OUBox3d>::__swap_out_circular_buffer(uint64_t *a1, void *a2, long long *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  unint64_t v7 = (long long *)*a1;
  uint64_t v8 = v6;
  if ((long long *)*a1 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v8 -= 224;
      v9 -= 14;
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v8, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = (long long *)a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v11, v3);
      v3 += 14;
      v11 += 224;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d const*,OUBox3d const*,OUBox3d*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      OUBox3d::OUBox3d((OUBox3d *)(a4 + v7), (const OUBox3d *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_237C32DAC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 224);
      long long v11 = *(_OWORD *)(a3 + v7 - 208);
      long long v12 = *(_OWORD *)(a3 + v7 - 176);
      *(_OWORD *)(v9 - 192) = *(_OWORD *)(a3 + v7 - 192);
      *(_OWORD *)(v9 - 176) = v12;
      *(_OWORD *)(v9 - 224) = v10;
      *(_OWORD *)(v9 - 208) = v11;
      long long v13 = *(_OWORD *)(a3 + v7 - 160);
      long long v14 = *(_OWORD *)(a3 + v7 - 144);
      long long v15 = *(_OWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v9 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(_OWORD *)(v9 - 112) = v15;
      *(_OWORD *)(v9 - 160) = v13;
      *(_OWORD *)(v9 - 144) = v14;
      uint64_t v16 = *(void *)(a3 + v7 - 96);
      *(void *)(a3 + v7 - 96) = 0;
      uint64_t v17 = *(void **)(a4 + v7 - 96);
      *(void *)(v9 - 96) = v16;

      *(_DWORD *)(v9 - 88) = *(_DWORD *)(a3 + v7 - 88);
      uint64_t v18 = *(void *)(a3 + v7 - 80);
      *(void *)(v8 - 80) = 0;
      unint64_t v19 = *(void **)(a4 + v7 - 80);
      *(void *)(v9 - 80) = v18;

      uint64_t v20 = *(void *)(a3 + v7 - 72);
      *(void *)(v8 - 72) = 0;
      uint64_t v21 = *(void **)(a4 + v7 - 72);
      *(void *)(v9 - 72) = v20;

      std::vector<float>::__move_assign(a4 + v7 - 64, (__n128 *)(a3 + v7 - 64));
      std::vector<BOOL>::__move_assign(a4 + v7 - 40, (void *)(a3 + v7 - 40));
      uint64_t v22 = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 16) = 0;
      uint64_t v23 = *(void **)(a4 + v7 - 16);
      *(void *)(v9 - 16) = v22;

      *(_WORD *)(v9 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 224;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      OUBox3d::operator=(a3, v4);
      v4 += 14;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x18uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_237C3313C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OUBox3d::OUBox3d(uint64_t a1, long long *a2, id *a3, void *a4, uint64_t a5, void *a6, float a7)
{
  id v13 = a4;
  id v14 = a6;
  long long v15 = a2[3];
  long long v17 = *a2;
  long long v16 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v16;
  long long v18 = a2[7];
  long long v20 = a2[4];
  long long v19 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 80) = v19;
  *(void *)(a1 + 128) = *a3;
  *(float *)(a1 + 136) = a7;
  *(void *)(a1 + 144) = [v13 copy];
  id v21 = v14;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 160), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 216) = -1;

  return a1;
}

void sub_237C33230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},float> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_237C33334(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},float> const&>(uint64_t **a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x30uLL);
    v7[4] = *(id *)a4;
    *((_DWORD *)v7 + 10) = *(_DWORD *)(a4 + 8);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, void **a5)
{
  uint8x8_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !CompareNSString::operator()((uint64_t)(a1 + 2), *a5, (void *)a2[4]))
  {
    if (!CompareNSString::operator()((uint64_t)(a1 + 2), (void *)a2[4], *a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      id v14 = (uint64_t *)a2[1];
      do
      {
        long long v15 = v14;
        id v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      long long v18 = a2;
      do
      {
        long long v15 = (uint64_t *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        long long v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!CompareNSString::operator()((uint64_t)(a1 + 2), *a5, (void *)v15[4])) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  long long v11 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      long long v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    long long v16 = a2;
    do
    {
      unint64_t v12 = (uint64_t *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      long long v16 = v12;
    }
    while (v17);
  }
  if (CompareNSString::operator()((uint64_t)(a1 + 2), (void *)v12[4], *a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(uint64_t a1, void *a2, void **a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        if (!CompareNSString::operator()(v7, *a3, (void *)v4[4])) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!CompareNSString::operator()(v7, (void *)v8[4], *a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL CompareNSString::operator()(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    if (v4) {
      BOOL v6 = [v4 compare:v5] == -1;
    }
    else {
      BOOL v6 = 1;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_237C33694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void *std::vector<half>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    id v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_237C33760(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    id v5 = (void *)(result + 8 * (v3 >> 1));
    BOOL v6 = (void *)(a2 - 8);
    float v7 = *(float *)(a2 - 8);
    if (*(float *)v5 > v7)
    {
      int v8 = *(_DWORD *)(a2 - 4);
      do
      {
        uint8x8_t v9 = v6;
        BOOL v6 = v5;
        void *v9 = *v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        id v5 = (void *)(result + 8 * v4);
      }
      while (*(float *)v5 > v7);
      *(float *)BOOL v6 = v7;
      *((_DWORD *)v6 + 1) = v8;
    }
  }
  return result;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    float v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint8x8_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<OUBox3d>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 5);
    if ((unint64_t)(v9 + 1) > 0x124924924924924) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v12 = 0x124924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    id v14 = v13;
    long long v15 = &v13[224 * v9];
    BOOL v17 = &v13[224 * v12];
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>((uint64_t)v15, a2);
    long long v16 = v15 + 224;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v8 = a1[1];
    std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 224;
    a1[1] = v7 + 224;
  }
  a1[1] = v8;
}

void sub_237C339AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<OUBox3d>::__init_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<OUBox3d>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_237C33A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<OUBox3d>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      OUBox3d::OUBox3d((OUBox3d *)(a4 + v7), (const OUBox3d *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_237C33B00(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    float result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        float result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::vector<OUBox3d>::resize(__CFString *a1, unint64_t a2)
{
  uint64_t info = a1->info;
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((int64_t)(info - (unint64_t)a1->isa) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OUBox3d>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = (uint64_t)a1->isa + 224 * a2;
    while (info != v7)
    {
      info -= 224;
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(info);
    }
    a1->uint64_t info = v7;
  }
}

__CFString *std::vector<OUBox3d>::__append(__CFString *a1, unint64_t a2)
{
  data = a1->data;
  uint64_t p_data = (uint64_t)&a1->data;
  BOOL v5 = data;
  uint64_t v7 = *(void *)(p_data - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&data[-v7] >> 5) >= a2)
  {
    return std::vector<OUBox3d>::__construct_at_end(a1, a2);
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((int64_t)(v7 - (unint64_t)a1->isa) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x124924924924924) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (char *)a1->isa) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v11 = 0x124924924924924;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = p_data;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(p_data, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    id v14 = &v12[224 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[224 * v11];
    long long v15 = &v14[224 * a2];
    do
    {
      *((_OWORD *)v14 + 12) = 0u;
      *((_OWORD *)v14 + 13) = 0u;
      *((_OWORD *)v14 + 10) = 0u;
      *((_OWORD *)v14 + 11) = 0u;
      *((_OWORD *)v14 + 8) = 0u;
      *((_OWORD *)v14 + 9) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *((_OWORD *)v14 + 7) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *(_OWORD *)id v14 = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((void *)v14 + 19) = @"unknown";
      *((_OWORD *)v14 + 10) = 0u;
      *((_OWORD *)v14 + 11) = 0u;
      *((_OWORD *)v14 + 12) = 0u;
      *((void *)v14 + 26) = 0;
      *((_WORD *)v14 + 108) = -1;
      v14 += 224;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<OUBox3d>::__swap_out_circular_buffer((uint64_t *)a1, v16);
    return (__CFString *)std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v16);
  }
}

void sub_237C33DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFString *std::vector<OUBox3d>::__construct_at_end(__CFString *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t info = result->info;
  if (a2)
  {
    uint64_t v4 = info + 224 * a2;
    do
    {
      *(_OWORD *)(info + 192) = 0u;
      *(_OWORD *)(info + 208) = 0u;
      *(_OWORD *)(info + 160) = 0u;
      *(_OWORD *)(info + 176) = 0u;
      *(_OWORD *)(info + 128) = 0u;
      *(_OWORD *)(info + 144) = 0u;
      *(_OWORD *)(info + 96) = 0u;
      *(_OWORD *)(info + 112) = 0u;
      *(_OWORD *)(info + 64) = 0u;
      *(_OWORD *)(info + 80) = 0u;
      *(_OWORD *)(info + 32) = 0u;
      *(_OWORD *)(info + 48) = 0u;
      *(_OWORD *)uint64_t info = 0u;
      *(_OWORD *)(info + 16) = 0u;
      float result = @"unknown";
      *(void *)(info + 152) = result;
      *(_OWORD *)(info + 160) = 0u;
      *(_OWORD *)(info + 176) = 0u;
      *(_OWORD *)(info + 192) = 0u;
      *(void *)(info + 208) = 0;
      *(_WORD *)(info + 216) = -1;
      info += 224;
    }
    while (info != v4);
    uint64_t info = v4;
  }
  v2->uint64_t info = info;
  return result;
}

void _GLOBAL__sub_I_OU3DODProcessUtils_mm()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x237E2CC70]();
  uint64_t v1 = @"Cabinet";
  id v21 = (uint64_t *)v1;
  uint64_t v22 = @"Refrigerator";
  uint64_t v23 = @"Shelf";
  float v24 = @"Stove";
  uint64_t v2 = @"Bed";
  uint64_t v25 = v2;
  long long v26 = @"Sink";
  long long v27 = @"Washer";
  long long v28 = @"Toilet";
  uint64_t v3 = @"Bathtub";
  uint64_t v29 = v3;
  long long v30 = @"Oven";
  long long v31 = @"Dishwasher";
  double v32 = @"Fireplace";
  uint64_t v33 = @"Stool";
  float32x4_t v34 = @"Chair";
  uint64_t v4 = @"Table";
  float v35 = v4;
  float32x4_t v36 = @"Screen";
  BOOL v5 = @"Sofa";
  float32x4_t v37 = v5;
  uint64_t v38 = @"Stairs";
  float v39 = @"Window";
  float32x4_t v40 = @"Door";
  float32x4_t v41 = @"BuildInCabinet";
  qword_26AF27360 = 0;
  qword_26AF27368 = 0;
  ou3dod::kObjectTypesLUT = 0;
  unint64_t v6 = (char *)operator new(0xA8uLL);
  uint64_t v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_26AF27360 = (uint64_t)v6;
  qword_26AF27368 = (uint64_t)(v6 + 168);
  do
  {
    *(void *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_26AF27360 = (uint64_t)(v6 + 168);
  for (uint64_t i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  unint64_t v9 = v1;
  qword_26AF27520 = 0;
  unk_26AF27528 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  id v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  unint64_t v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  void *v10 = v9;
  qword_26AF27520 = (uint64_t)(v10 + 1);
  unk_26AF27528 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  unint64_t v11 = v9;
  id v21 = v11;
  unint64_t v12 = v2;
  uint64_t v22 = v12;
  int v13 = v3;
  uint64_t v23 = v13;
  id v14 = v4;
  float v24 = v14;
  long long v15 = v5;
  uint64_t v25 = v15;
  qword_26AF273F8 = 0;
  qword_26AF27400 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  long long v16 = (char *)operator new(0x28uLL);
  uint64_t v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_26AF273F8 = (uint64_t)v16;
  qword_26AF27400 = (uint64_t)(v16 + 40);
  do
  {
    *(void *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_26AF273F8 = (uint64_t)(v16 + 40);
  for (uint64_t j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF27488 = 0;
  unk_26AF27490 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  long long v19 = operator new(0x50uLL);
  qword_26AF27488 = (uint64_t)(v19 + 5);
  unk_26AF27490 = v19 + 5;
  _OWORD v19[2] = xmmword_237CB4740;
  v19[3] = unk_237CB4750;
  v19[4] = xmmword_237CB4760;
  *long long v19 = xmmword_237CB4720;
  v19[1] = unk_237CB4730;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  id v21 = v11;
  LODWORD(v22) = 1055286886;
  uint64_t v23 = v12;
  LODWORD(v24) = 1039516303;
  uint64_t v25 = v13;
  LODWORD(v26) = 1045220557;
  long long v27 = v14;
  LODWORD(v28) = 1050253722;
  uint64_t v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (uint64_t k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
}

void sub_237C34398(_Unwind_Exception *a1)
{
  for (uint64_t i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

double ComputePointCloudOrigin(float32x4_t **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)a1[1] - (char *)*a1;
  if ((v2 >> 4))
  {
    float32x4_t v3 = *v1;
    if ((int)(v2 >> 4) >= 1)
    {
      uint64_t v4 = (v2 >> 4);
      do
      {
        float32x4_t v5 = *v1++;
        float32x4_t v6 = v5;
        v3.i32[3] = 0;
        v6.i32[3] = 0;
        float32x4_t v3 = vminnmq_f32(v3, v6);
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v3.i64[0] = 0;
  }
  return *(double *)v3.i64;
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<float>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 232) && *(unsigned char *)(result + 235))
  {
    float32x4_t v3 = *(__CVBuffer **)(*(void *)(result + 160) + 40);
    size_t Width = CVPixelBufferGetWidth(v3);
    unint64_t v5 = CVPixelBufferGetHeight(v3) * Width;
    float32x4_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v10) = 134217984;
      *(void *)((char *)&v10 + 4) = v5;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] output image number of elements %lu", (uint8_t *)&v10, 0xCu);
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (int *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v10, v5);
    if (v5)
    {
      uint64_t v8 = (_DWORD *)v10;
      do
      {
        int v9 = *BaseAddress++;
        *v8++ = v9;
        --v5;
      }
      while (v5);
    }
    float result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void sub_237C345BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<half>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(result + 232) && *(unsigned char *)(result + 235))
  {
    float32x4_t v3 = *(__CVBuffer **)(*(void *)(result + 160) + 40);
    size_t Width = CVPixelBufferGetWidth(v3);
    unint64_t v5 = CVPixelBufferGetHeight(v3) * Width;
    float32x4_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v16) = 134217984;
      *(void *)((char *)&v16 + 4) = v5;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] output image number of elements %lu", (uint8_t *)&v16, 0xCu);
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v16, v5);
    if (v5)
    {
      uint64_t v8 = (_DWORD *)v16;
      do
      {
        __int16 v9 = *BaseAddress++;
        _H0 = v9;
        __asm { FCVT            S0, H0 }
        *v8++ = _S0;
        --v5;
      }
      while (v5);
    }
    float result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v16;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void sub_237C3472C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>(uint64_t a1, int **a2)
{
  char v16 = 8;
  uint64_t v3 = a1 + 104;
  strcpy((char *)__p, "rgb_feat");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 104), (unsigned __int8 *)__p);
  unint64_t v5 = v4;
  if ((v16 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    id v14 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    }
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_3:
  char v16 = 8;
  strcpy((char *)__p, "rgb_feat");
  uint64_t v17 = __p;
  float32x4_t v6 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v17)+ 5);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  CVPixelBufferLockBaseAddress(v6, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(v6);
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  size_t Width = CVPixelBufferGetWidth(v6);
  if (CVPixelBufferGetHeight(v6) * Width != v8 >> 2)
  {
    id v14 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    }
LABEL_15:

    return 0;
  }
  if ((int)((unint64_t)v8 >> 2) >= 1)
  {
    long long v10 = *a2;
    uint64_t v11 = ((unint64_t)v8 >> 2);
    do
    {
      int v12 = *v10++;
      *BaseAddress++ = v12;
      --v11;
    }
    while (v11);
  }
  CVPixelBufferUnlockBaseAddress(v6, 0);
  return 1;
}

void sub_237C348E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<half>(uint64_t a1, int **a2)
{
  char v21 = 8;
  uint64_t v3 = a1 + 104;
  strcpy((char *)__p, "rgb_feat");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 104), (unsigned __int8 *)__p);
  unint64_t v5 = v4;
  if ((v21 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    long long v19 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    }
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_11;
  }
LABEL_3:
  char v21 = 8;
  strcpy((char *)__p, "rgb_feat");
  uint64_t v22 = __p;
  float32x4_t v6 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v22)+ 5);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  CVPixelBufferLockBaseAddress(v6, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(v6);
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  size_t Width = CVPixelBufferGetWidth(v6);
  if (CVPixelBufferGetHeight(v6) * Width != v8 >> 2)
  {
    long long v19 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    }
LABEL_15:

    return 0;
  }
  if ((int)((unint64_t)v8 >> 2) >= 1)
  {
    long long v10 = *a2;
    uint64_t v11 = ((unint64_t)v8 >> 2);
    do
    {
      int v12 = *v10++;
      _S0 = v12;
      __asm { FCVT            H0, S0 }
      *BaseAddress++ = _S0;
      --v11;
    }
    while (v11);
  }
  CVPixelBufferUnlockBaseAddress(v6, 0);
  return 1;
}

void sub_237C34A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<float>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 104;
  char v53 = 8;
  strcpy((char *)__p, "rgb_feat");
  __int16 v9 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 104), (unsigned __int8 *)__p);
  long long v10 = v9;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_3;
    }
  }
  else if (v9)
  {
LABEL_3:
    *(double *)v11.i64 = ComputePointCloudOrigin((float32x4_t **)a2);
    int8x16_t v51 = v11;
    char v53 = 6;
    strcpy((char *)__p, "points");
    int v54 = __p;
    int v12 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v54)+ 5);
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    size_t result = CVPixelBufferGetBytesPerRow(v12);
    if (result)
    {
      utils::Resample((utils *)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4), 0xDBBA0uLL, __p);
      CVPixelBufferLockBaseAddress(v12, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);
      bzero(BaseAddress, 0x440000uLL);
      bzero(*(void **)(a1 + 240), *(void *)(a1 + 248) - *(void *)(a1 + 240));
      long long v15 = (uint64_t *)__p[0];
      char v16 = (uint64_t *)__p[1];
      if (__p[0] != __p[1])
      {
        uint64_t v17 = *(float32x4_t **)a2;
        uint64_t v18 = *a4;
        uint64_t v19 = *a3;
        float32x2_t v20 = (float32x2_t)vextq_s8(v51, v51, 4uLL).u64[0];
        float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
        do
        {
          uint64_t v22 = *v15;
          uint64_t v23 = &v17[*v15];
          float v24 = (float)(v23->f32[0] - *(float *)v51.i32) / 0.05;
          int v25 = vcvtms_s32_f32(v24);
          int32x2_t v26 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)&v23->i32[1], v20), v21)));
          int v27 = v26.i32[0];
          BOOL v28 = v25 <= 31 && v26.i32[0] <= 31;
          int v29 = v26.i32[1];
          if (v28 && v26.i32[1] <= 31 && (v25 & 0x80000000) == 0)
          {
            int32x2_t v31 = vcltz_s32(v26);
            if ((v31.i8[0] & 1) == 0 && (v31.i8[4] & 1) == 0)
            {
              float v34 = (float)v29 + (float)((float)v27 * 32.0);
              int v32 = (int)(float)(v34 + (float)((float)((float)(int)floorf(v24) * 32.0) * 32.0));
              ++*(_DWORD *)(*(void *)(a1 + 240) + 4 * v32);
              *(float *)&BaseAddress[4 * v32] = *(float *)&BaseAddress[4 * v32] + 1.0;
              int16x4_t v33 = *(int16x4_t *)(v18 + 8 * v22);
              LOWORD(v34) = vaddv_s16(v33);
              if (v34 != 0.0)
              {
                float v35 = (float)LOWORD(v34);
                float v36 = (float)v33.u16[0] / v35;
                float v37 = (float)v33.u16[1] / v35;
                float v38 = (float)v33.u16[2] / v35;
                float v39 = (float)(1.0 - (float)(v38 + (float)(v36 + v37))) / 30.0;
                for (uint64_t i = 0x20000; i != 4456448; i += 0x20000)
                  *(float *)&BaseAddress[4 * v32 + i] = v39 + *(float *)&BaseAddress[4 * v32 + i];
                float32x4_t v41 = (unsigned __int8 *)(v19 + 4 * v22);
                unsigned int v42 = *v41;
                if (v42 > 0x20) {
                  unsigned int v42 = 0;
                }
                unsigned int v43 = v41[1];
                if (v43 > 0x20) {
                  unsigned int v43 = 0;
                }
                unsigned int v44 = v41[2];
                if (v44 > 0x20) {
                  unsigned int v44 = 0;
                }
                int v45 = v32 + 0x8000;
                *(float *)&BaseAddress[4 * (v45 + (v42 << 15))] = (float)(v36 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v42 << 15))];
                *(float *)&BaseAddress[4 * (v45 + (v43 << 15))] = (float)(v37 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v43 << 15))];
                *(float *)&BaseAddress[4 * (v45 + (v44 << 15))] = (float)(v38 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v44 << 15))];
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
      uint64_t v46 = 0;
      uint64_t v47 = *(void *)(a1 + 240);
      do
      {
        int v48 = *(_DWORD *)(v47 + 4 * v46);
        if (v48 >= 2)
        {
          for (uint64_t j = 0; j != 4456448; j += 0x20000)
            *(float *)&BaseAddress[j] = *(float *)&BaseAddress[j] / (float)v48;
        }
        ++v46;
        BaseAddress += 4;
      }
      while (v46 != 0x8000);
      CVPixelBufferUnlockBaseAddress(v12, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return 1;
    }
    return result;
  }
  int v50 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
    ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
  }

  return 0;
}

void sub_237C34E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<half>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 104;
  char v75 = 8;
  strcpy((char *)__p, "rgb_feat");
  __int16 v9 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 104), (unsigned __int8 *)__p);
  long long v10 = v9;
  if (v75 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_3;
    }
  }
  else if (v9)
  {
LABEL_3:
    *(double *)v11.i64 = ComputePointCloudOrigin((float32x4_t **)a2);
    int8x16_t v73 = v11;
    char v75 = 6;
    strcpy((char *)__p, "points");
    float32x4_t v76 = __p;
    int v12 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v76)+ 5);
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    size_t result = CVPixelBufferGetBytesPerRow(v12);
    if (result)
    {
      utils::Resample((utils *)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4), 0xDBBA0uLL, __p);
      CVPixelBufferLockBaseAddress(v12, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);
      bzero(BaseAddress, 0x220000uLL);
      bzero(*(void **)(a1 + 240), *(void *)(a1 + 248) - *(void *)(a1 + 240));
      long long v15 = (uint64_t *)__p[0];
      char v16 = (uint64_t *)__p[1];
      if (__p[0] != __p[1])
      {
        uint64_t v17 = *(float32x4_t **)a2;
        uint64_t v18 = *a4;
        uint64_t v19 = *a3;
        float32x2_t v20 = (float32x2_t)vextq_s8(v73, v73, 4uLL).u64[0];
        float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
        do
        {
          uint64_t v22 = *v15;
          uint64_t v23 = &v17[*v15];
          float v24 = (float)(v23->f32[0] - *(float *)v73.i32) / 0.05;
          int v25 = vcvtms_s32_f32(v24);
          int32x2_t v26 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)&v23->i32[1], v20), v21)));
          int v27 = v26.i32[0];
          BOOL v28 = v25 <= 31 && v26.i32[0] <= 31;
          int v29 = v26.i32[1];
          if (v28 && v26.i32[1] <= 31 && (v25 & 0x80000000) == 0)
          {
            int32x2_t v31 = vcltz_s32(v26);
            if ((v31.i8[0] & 1) == 0 && (v31.i8[4] & 1) == 0)
            {
              float v34 = (float)v29 + (float)((float)v27 * 32.0);
              int v32 = (int)(float)(v34 + (float)((float)((float)(int)floorf(v24) * 32.0) * 32.0));
              ++*(_DWORD *)(*(void *)(a1 + 240) + 4 * v32);
              *(short float *)&BaseAddress[2 * v32] = *(short float *)&BaseAddress[2 * v32]
                                                    + COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0));
              int16x4_t v33 = *(int16x4_t *)(v18 + 8 * v22);
              LOWORD(v34) = vaddv_s16(v33);
              if (v34 != 0.0)
              {
                float v35 = (float)LOWORD(v34);
                float v36 = (float)v33.u16[0] / v35;
                float v37 = (float)v33.u16[1] / v35;
                float v38 = (float)v33.u16[2] / v35;
                float v39 = (float)(1.0 - (float)(v38 + (float)(v36 + v37))) / 30.0;
                float32x4_t v40 = &BaseAddress[2 * v32];
                for (uint64_t i = 0x10000; i != 2228224; i += 0x10000)
                {
                  _H19 = *(_WORD *)&v40[i];
                  __asm { FCVT            S19, H19 }
                  _S19 = v39 + _S19;
                  __asm { FCVT            H19, S19 }
                  *(_WORD *)&v40[i] = LOWORD(_S19);
                }
                float v49 = (unsigned __int8 *)(v19 + 4 * v22);
                unsigned int v50 = *v49;
                if (v50 > 0x20) {
                  unsigned int v50 = 0;
                }
                unsigned int v51 = v49[1];
                if (v51 > 0x20) {
                  unsigned int v51 = 0;
                }
                unsigned int v52 = v49[2];
                if (v52 > 0x20) {
                  unsigned int v52 = 0;
                }
                int v53 = v32 + 0x8000;
                unsigned int v54 = v53 + (v50 << 15);
                _H19 = *(_WORD *)&BaseAddress[2 * v54];
                __asm { FCVT            S19, H19 }
                _S18 = (float)(v36 - v39) + _S19;
                __asm { FCVT            H18, S18 }
                *(_WORD *)&BaseAddress[2 * v54] = LOWORD(_S18);
                unsigned int v58 = v53 + (v51 << 15);
                LOWORD(_S18) = *(_WORD *)&BaseAddress[2 * v58];
                __asm { FCVT            S18, H18 }
                _S17 = (float)(v37 - v39) + _S18;
                __asm { FCVT            H17, S17 }
                *(_WORD *)&BaseAddress[2 * v58] = LOWORD(_S17);
                unsigned int v61 = v53 + (v52 << 15);
                LOWORD(_S17) = *(_WORD *)&BaseAddress[2 * v61];
                float v62 = v38 - v39;
                __asm { FCVT            S16, H17 }
                _S7 = v62 + _S16;
                __asm { FCVT            H7, S7 }
                *(_WORD *)&BaseAddress[2 * v61] = LOWORD(_S7);
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
      uint64_t v65 = 0;
      uint64_t v66 = *(void *)(a1 + 240);
      do
      {
        int v67 = *(_DWORD *)(v66 + 4 * v65);
        if (v67 >= 2)
        {
          for (uint64_t j = 0; j != 2228224; j += 0x10000)
          {
            _H1 = *(_WORD *)&BaseAddress[j];
            __asm { FCVT            S1, H1 }
            _S1 = _S1 / (float)v67;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&BaseAddress[j] = LOWORD(_S1);
          }
        }
        ++v65;
        BaseAddress += 2;
      }
      while (v65 != 0x8000);
      CVPixelBufferUnlockBaseAddress(v12, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return 1;
    }
    return result;
  }
  float32x4_t v72 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
    ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
  }

  return 0;
}

void sub_237C35270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    uint64_t v54 = *a3;
    int v8 = -1227133513 * ((v4 - v3) >> 5);
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<float>>::reserve(v66, v8);
    uint64_t v55 = a1;
    __int16 v9 = (float32x4_t *)(*a3 + 224 * a2);
    float32x4_t v57 = v9[6];
    float32x4_t v59 = *v9;
    std::__fs::filesystem::directory_entry::_Path __p = 0;
    float v64 = 0;
    unint64_t v65 = 0;
    std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(&__p, v8);
    if (v8 >= 1)
    {
      uint64_t v10 = 0;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      float32x4_t v12 = vmulq_f32(vaddq_f32(v59, v57), v11);
      float v13 = v12.f32[2];
      float32x4_t v60 = v12;
      do
      {
        uint64_t v14 = *a3 + 224 * v10;
        float32x4_t v56 = *(float32x4_t *)(v14 + 96);
        float32x4_t v58 = *(float32x4_t *)v14;
        box3dToCentroidSizeAngle((float32x4_t *)v14, v61);
        uint64_t v15 = v61[0];
        *(float32x2_t *)v61[0] = vsub_f32(*(float32x2_t *)v61[0], *(float32x2_t *)v60.f32);
        *(float *)(v15 + 8) = *(float *)(v15 + 8) - v13;
        std::vector<std::vector<float>>::push_back[abi:ne180100](v66, (uint64_t)v61);
        v16.i64[0] = 0xBF000000BF000000;
        v16.i64[1] = 0xBF000000BF000000;
        float32x4_t v17 = vaddq_f32(v60, vmulq_f32(vaddq_f32(v58, v56), v16));
        float32x4_t v18 = vmulq_f32(v17, v17);
        float v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        float32x2_t v20 = v64;
        if ((unint64_t)v64 >= v65)
        {
          uint64_t v22 = (float *)__p;
          int64_t v23 = ((char *)v64 - (unsigned char *)__p) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v65 - (void)__p;
          if ((uint64_t)(v65 - (void)__p) >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            int v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v65, v26);
            uint64_t v22 = (float *)__p;
            float32x2_t v20 = v64;
          }
          else
          {
            int v27 = 0;
          }
          BOOL v28 = (float *)&v27[8 * v23];
          float *v28 = v19;
          *((_DWORD *)v28 + 1) = v10;
          int v29 = v28;
          if (v20 != v22)
          {
            do
            {
              uint64_t v30 = *((void *)v20 - 1);
              v20 -= 2;
              *((void *)v29 - 1) = v30;
              v29 -= 2;
            }
            while (v20 != v22);
            uint64_t v22 = (float *)__p;
          }
          float32x2_t v21 = v28 + 2;
          std::__fs::filesystem::directory_entry::_Path __p = v29;
          float v64 = v28 + 2;
          unint64_t v65 = (unint64_t)&v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          float *v64 = v19;
          *((_DWORD *)v20 + 1) = v10;
          float32x2_t v21 = v20 + 2;
        }
        float v64 = v21;
        if (v61[0])
        {
          v61[1] = v61[0];
          operator delete((void *)v61[0]);
        }
        ++v10;
      }
      while (v10 != v8);
    }
    unint64_t v31 = 126 - 2 * __clz(((char *)v64 - (unsigned char *)__p) >> 3);
    if (v64 == __p) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v31;
    }
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb((uint64_t)__p, v64, (uint64_t)v61, v32, 1);
    char v62 = 7;
    uint64_t v33 = a1 + 104;
    strcpy((char *)v61, "context");
    v67[0] = (long long *)v61;
    float v34 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 104, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0) {
      operator delete((void *)v61[0]);
    }
    CVPixelBufferLockBaseAddress(v34, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v34);
    BaseAddress[27] = 0u;
    BaseAddress[28] = 0u;
    BaseAddress[25] = 0u;
    BaseAddress[26] = 0u;
    BaseAddress[23] = 0u;
    BaseAddress[24] = 0u;
    BaseAddress[21] = 0u;
    BaseAddress[22] = 0u;
    BaseAddress[19] = 0u;
    BaseAddress[20] = 0u;
    BaseAddress[17] = 0u;
    BaseAddress[18] = 0u;
    BaseAddress[15] = 0u;
    BaseAddress[16] = 0u;
    BaseAddress[13] = 0u;
    BaseAddress[14] = 0u;
    BaseAddress[11] = 0u;
    BaseAddress[12] = 0u;
    BaseAddress[9] = 0u;
    BaseAddress[10] = 0u;
    BaseAddress[7] = 0u;
    BaseAddress[8] = 0u;
    BaseAddress[5] = 0u;
    BaseAddress[6] = 0u;
    BaseAddress[3] = 0u;
    BaseAddress[4] = 0u;
    BaseAddress[1] = 0u;
    BaseAddress[2] = 0u;
    if (v8 >= 4) {
      int v36 = 4;
    }
    else {
      int v36 = v8;
    }
    _OWORD *BaseAddress = 0uLL;
    if (v8 >= 1)
    {
      uint64_t v37 = 0;
      float v38 = (char *)__p;
      uint64_t v39 = v66[0];
      uint64_t v40 = ou3dod::kObjectTypesLUT;
      unint64_t v41 = (unint64_t)(qword_26AF27378 - ou3dod::kObjectTypesLUT) >> 3;
      if (v36 <= 1) {
        uint64_t v42 = 1;
      }
      else {
        uint64_t v42 = v36;
      }
      uint64_t v43 = *a3;
      do
      {
        unsigned int v44 = &v38[8 * v37];
        int v45 = *((_DWORD *)v44 + 1);
        uint64_t v46 = *(_DWORD **)(v39 + 24 * v45);
        *(_DWORD *)BaseAddress = *v46;
        *((_DWORD *)BaseAddress + 1) = v46[1];
        *((_DWORD *)BaseAddress + 2) = v46[2];
        *((_DWORD *)BaseAddress + 3) = *(_DWORD *)v44;
        *((_DWORD *)BaseAddress + 4) = v46[3];
        *((_DWORD *)BaseAddress + 5) = v46[4];
        *((_DWORD *)BaseAddress + 6) = v46[5];
        *((_DWORD *)BaseAddress + 7) = v46[6];
        if ((int)v41 < 1)
        {
LABEL_40:
          uint64_t v47 = -1;
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v48 = *(void *)(v43 + 224 * v45 + 128);
          while (*(void *)(v40 + 8 * v47) != v48)
          {
            if (v41 == ++v47) {
              goto LABEL_40;
            }
          }
        }
        *(_DWORD *)((char *)BaseAddress + (((v47 << 32) + 0x800000000) >> 30)) = 1065353216;
        ++v37;
        BaseAddress = (_OWORD *)((char *)BaseAddress + 116);
      }
      while (v37 != v42);
    }
    CVPixelBufferUnlockBaseAddress(v34, 0);
    char v62 = 12;
    strcpy((char *)v61, "context_mask");
    v67[0] = (long long *)v61;
    float v49 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0) {
      operator delete((void *)v61[0]);
    }
    CVPixelBufferLockBaseAddress(v49, 0);
    unsigned int v50 = (int8x16_t *)CVPixelBufferGetBaseAddress(v49);
    int64x2_t v51 = vdupq_n_s64(v36);
    v52.i64[0] = 0x7F0000007FLL;
    v52.i64[1] = 0x7F0000007FLL;
    int8x16_t *v50 = vbicq_s8(v52, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v51, (int64x2_t)xmmword_237CB4790), (int32x4_t)vcgtq_s64(v51, (int64x2_t)xmmword_237CB4780)));
    CVPixelBufferUnlockBaseAddress(v49, 0);
    if (__p)
    {
      float v64 = (float *)__p;
      operator delete(__p);
    }
    std::__fs::filesystem::directory_entry::_Path __p = v66;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v3 = v54;
  }
  return v3 != v4;
}

void sub_237C357BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,char *a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a24 = __p;
    operator delete(__p);
  }
  std::__fs::filesystem::directory_entry::_Path __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_237C358E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    __int16 v9 = &v6[8 * v8];
    float32x4_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    float32x4_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::ComputeObjectIdx(uint64_t a1, void *a2)
{
  if ((int)((unint64_t)(qword_26AF27378 - ou3dod::kObjectTypesLUT) >> 3) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  while (*(void *)(ou3dod::kObjectTypesLUT + 8 * result) != *a2)
  {
    if (((unint64_t)(qword_26AF27378 - ou3dod::kObjectTypesLUT) >> 3) == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<half>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    uint64_t v54 = *a3;
    int v8 = -1227133513 * ((v4 - v3) >> 5);
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<float>>::reserve(v66, v8);
    uint64_t v55 = a1;
    __int16 v9 = (float32x4_t *)(*a3 + 224 * a2);
    float32x4_t v57 = v9[6];
    float32x4_t v59 = *v9;
    std::__fs::filesystem::directory_entry::_Path __p = 0;
    float v64 = 0;
    unint64_t v65 = 0;
    std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(&__p, v8);
    if (v8 >= 1)
    {
      uint64_t v10 = 0;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      float32x4_t v12 = vmulq_f32(vaddq_f32(v59, v57), v11);
      float v13 = v12.f32[2];
      float32x4_t v60 = v12;
      do
      {
        uint64_t v14 = *a3 + 224 * v10;
        float32x4_t v56 = *(float32x4_t *)(v14 + 96);
        float32x4_t v58 = *(float32x4_t *)v14;
        box3dToCentroidSizeAngle((float32x4_t *)v14, v61);
        uint64_t v15 = v61[0];
        *(float32x2_t *)v61[0] = vsub_f32(*(float32x2_t *)v61[0], *(float32x2_t *)v60.f32);
        *(float *)(v15 + 8) = *(float *)(v15 + 8) - v13;
        std::vector<std::vector<float>>::push_back[abi:ne180100](v66, (uint64_t)v61);
        v16.i64[0] = 0xBF000000BF000000;
        v16.i64[1] = 0xBF000000BF000000;
        float32x4_t v17 = vaddq_f32(v60, vmulq_f32(vaddq_f32(v58, v56), v16));
        float32x4_t v18 = vmulq_f32(v17, v17);
        float v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        float32x2_t v20 = v64;
        if ((unint64_t)v64 >= v65)
        {
          uint64_t v22 = (float *)__p;
          int64_t v23 = ((char *)v64 - (unsigned char *)__p) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v65 - (void)__p;
          if ((uint64_t)(v65 - (void)__p) >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            int v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v65, v26);
            uint64_t v22 = (float *)__p;
            float32x2_t v20 = v64;
          }
          else
          {
            int v27 = 0;
          }
          BOOL v28 = (float *)&v27[8 * v23];
          float *v28 = v19;
          *((_DWORD *)v28 + 1) = v10;
          int v29 = v28;
          if (v20 != v22)
          {
            do
            {
              uint64_t v30 = *((void *)v20 - 1);
              v20 -= 2;
              *((void *)v29 - 1) = v30;
              v29 -= 2;
            }
            while (v20 != v22);
            uint64_t v22 = (float *)__p;
          }
          float32x2_t v21 = v28 + 2;
          std::__fs::filesystem::directory_entry::_Path __p = v29;
          float v64 = v28 + 2;
          unint64_t v65 = (unint64_t)&v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          float *v64 = v19;
          *((_DWORD *)v20 + 1) = v10;
          float32x2_t v21 = v20 + 2;
        }
        float v64 = v21;
        if (v61[0])
        {
          v61[1] = v61[0];
          operator delete((void *)v61[0]);
        }
        ++v10;
      }
      while (v10 != v8);
    }
    unint64_t v31 = 126 - 2 * __clz(((char *)v64 - (unsigned char *)__p) >> 3);
    if (v64 == __p) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v31;
    }
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb((uint64_t)__p, v64, (uint64_t)v61, v32, 1);
    char v62 = 7;
    uint64_t v33 = a1 + 104;
    strcpy((char *)v61, "context");
    v67[0] = (long long *)v61;
    float v34 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 104, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0) {
      operator delete((void *)v61[0]);
    }
    CVPixelBufferLockBaseAddress(v34, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v34);
    BaseAddress[28] = 0;
    *((_OWORD *)BaseAddress + 12) = 0u;
    *((_OWORD *)BaseAddress + 13) = 0u;
    *((_OWORD *)BaseAddress + 10) = 0u;
    *((_OWORD *)BaseAddress + 11) = 0u;
    *((_OWORD *)BaseAddress + 8) = 0u;
    *((_OWORD *)BaseAddress + 9) = 0u;
    *((_OWORD *)BaseAddress + 6) = 0u;
    *((_OWORD *)BaseAddress + 7) = 0u;
    *((_OWORD *)BaseAddress + 4) = 0u;
    *((_OWORD *)BaseAddress + 5) = 0u;
    *((_OWORD *)BaseAddress + 2) = 0u;
    *((_OWORD *)BaseAddress + 3) = 0u;
    if (v8 >= 4) {
      int v36 = 4;
    }
    else {
      int v36 = v8;
    }
    *(_OWORD *)BaseAddress = 0uLL;
    *((_OWORD *)BaseAddress + 1) = 0uLL;
    if (v8 >= 1)
    {
      uint64_t v37 = 0;
      float v38 = (char *)__p;
      uint64_t v39 = v66[0];
      uint64_t v40 = ou3dod::kObjectTypesLUT;
      unint64_t v41 = (unint64_t)(qword_26AF27378 - ou3dod::kObjectTypesLUT) >> 3;
      uint64_t v42 = *a3;
      if (v36 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v36;
      }
      do
      {
        unsigned int v44 = (__int32 *)&v38[8 * v37];
        __int32 v45 = v44[1];
        uint64_t v46 = *(float32x4_t **)(v39 + 24 * v45);
        v47.i64[0] = v46[1].i64[0];
        v47.i32[2] = v46[1].i32[2];
        v47.i32[3] = *v44;
        *(int8x16_t *)BaseAddress = vqtbl1q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(*v46), v47), (int8x16_t)xmmword_237CB47A0);
        if ((int)v41 < 1)
        {
LABEL_39:
          uint64_t v48 = -1;
        }
        else
        {
          uint64_t v48 = 0;
          uint64_t v49 = *(void *)(v42 + 224 * v45 + 128);
          while (*(void *)(v40 + 8 * v48) != v49)
          {
            if (v41 == ++v48) {
              goto LABEL_39;
            }
          }
        }
        *(_WORD *)((char *)BaseAddress + (((v48 << 32) + 0x800000000) >> 31)) = COERCE_UNSIGNED_INT(1.0);
        ++v37;
        BaseAddress = (void *)((char *)BaseAddress + 58);
      }
      while (v37 != v43);
    }
    CVPixelBufferUnlockBaseAddress(v34, 0);
    char v62 = 12;
    strcpy((char *)v61, "context_mask");
    v67[0] = (long long *)v61;
    unsigned int v50 = (__CVBuffer *)*((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0) {
      operator delete((void *)v61[0]);
    }
    CVPixelBufferLockBaseAddress(v50, 0);
    int64x2_t v51 = (int8x8_t *)CVPixelBufferGetBaseAddress(v50);
    int64x2_t v52 = vdupq_n_s64(v36);
    int8x8_t *v51 = vbic_s8((int8x8_t)0xFC00FC00FC00FC00, (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_s64(v52, (int64x2_t)xmmword_237CB4790), (int32x4_t)vcgtq_s64(v52, (int64x2_t)xmmword_237CB4780))));
    CVPixelBufferUnlockBaseAddress(v50, 0);
    if (__p)
    {
      float v64 = (float *)__p;
      operator delete(__p);
    }
    std::__fs::filesystem::directory_entry::_Path __p = v66;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v3 = v54;
  }
  return v3 != v4;
}

void sub_237C35ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,char *a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a24 = __p;
    operator delete(__p);
  }
  std::__fs::filesystem::directory_entry::_Path __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ou3dor::OU3DOROfflineEspressoV2::~OU3DOROfflineEspressoV2(ou3dor::OU3DOROfflineEspressoV2 *this)
{
  *(void *)this = &unk_26EAD5EB0;
  unint64_t v2 = (void *)*((void *)this + 30);
  if (v2)
  {
    *((void *)this + 31) = v2;
    operator delete(v2);
  }
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
}

{
  uint64_t vars8;

  ou3dor::OU3DOROfflineEspressoV2::~OU3DOROfflineEspressoV2(this);
  JUMPOUT(0x237E2C510);
}

ou3dor::OU3DOROfflineEspressoV2 *ou3dor::OU3DOROfflineEspressoV2::OU3DOROfflineEspressoV2(ou3dor::OU3DOROfflineEspressoV2 *this)
{
  unint64_t v2 = (std::vector<int> *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v4);
  v2->__begin_ = (std::vector<int>::pointer)&unk_26EAD5EB0;
  LODWORD(v4[0]) = 0;
  std::vector<int>::vector(v2 + 10, 0x8000uLL, (const std::vector<int>::value_type *)v4);
  return this;
}

void sub_237C36080(_Unwind_Exception *a1)
{
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(v1);
  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutput@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(this + 232) && *(unsigned char *)(this + 235))
  {
    if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(void *)(this + 160) + 40)) == 1278226534)
    {
      ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<float>();
    }
    ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<half>();
  }
  *a2 = 0;
  a2[24] = 0;
  return this;
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::SetInputs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 233))
  {
    if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(void *)(a1 + 120) + 40)) == 1278226534) {
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    }
    ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<half>();
  }
  uint64_t v1 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    ou3dor::OU3DOROfflineEspressoV2::SetInputs();
  }

  return 0;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*(a2 - 2) < *(float *)v11)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v11, (float *)(v11 + 8), a2 - 2);
          break;
        case 4uLL:
          uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
          break;
        case 5uLL:
          uint64_t result = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (uint64_t *)(v11 + 24), (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((float *)v11 != a2)
      {
        return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_((float *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float32x4_t v17 = (float *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v11, (float *)(v11 + 8 * (v15 >> 1)), a2 - 2);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 8), v17 - 2, a2 - 4);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 16), (float *)(v11 + 8 + 8 * v16), a2 - 6);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(v17 - 2, v17, (float *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)float32x4_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 8 * (v15 >> 1)), (float *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v11 - 8) >= *(float *)v11)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_(v11, (uint64_t)v19);
    uint64_t v11 = (uint64_t)(v19 + 2);
    uint64_t result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_((uint64_t)(v19 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(v11, (uint64_t)a2);
  }
  else if ((float *)v11 != a2)
  {
    int64_t v23 = (float *)(v11 + 8);
    while (v23 != a2)
    {
      unint64_t v24 = v23;
      float v25 = *(float *)(v10 + 8);
      if (v25 < *(float *)v10)
      {
        int v26 = *(_DWORD *)(v10 + 12);
        int v27 = v24;
        do
        {
          BOOL v28 = v27;
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 2;
          *(void *)BOOL v28 = v29;
        }
        while (*(v28 - 4) > v25);
        *int v27 = v25;
        *((_DWORD *)v27 + 1) = v26;
      }
      int64_t v23 = v24 + 2;
      uint64_t v10 = (uint64_t)v24;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        float v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          uint64_t v8 = v3;
          while (1)
          {
            *(void *)(result + v8 + 8) = *(void *)(result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              uint64_t v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(float *)uint64_t v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        uint64_t v2 = v5 + 8;
        v3 += 8;
        uint64_t v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 < *a1)
  {
    uint64_t v5 = *(void *)a1;
    if (v4 < v3)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v5;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v5;
    if (*a3 >= *(float *)&v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v6;
    if (*a2 >= *a1) {
      return 1;
    }
    uint64_t v7 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(void *)a1))
  {
    uint64_t v5 = a1 + 2;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      float v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    uint64_t v7 = *(void *)v3;
    *(void *)float v3 = *(void *)a2;
    *(void *)a2 = v7;
    do
    {
      float v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      float v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1) {
    *(void *)a1 = *((void *)v3 - 1);
  }
  *((void *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  do
  {
    float v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  uint64_t v5 = &a1[v2];
  float v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      float v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    float v9 = &a1[v2];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)float v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      do
      {
        float v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        float v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    float v6 = v9 - 2;
  }
  if (v6 != a1) {
    *(void *)a1 = *(void *)v6;
  }
  *(void *)float v6 = v3;
  return v6;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      float v7 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    float v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_(float *a1, float *a2, float *a3, void *a4)
{
  uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *a1)
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        float v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 2 * v17 + 2;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(void *)float v19 = v18;
        }
        else
        {
          *(void *)float v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_OSF_NS_15iterator_traitsISM_E15difference_typeE((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = *a4;
      if (*v8 >= *a4)
      {
        int v11 = *((_DWORD *)a4 + 1);
        do
        {
          uint64_t v12 = a4;
          a4 = v8;
          *(void *)uint64_t v12 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_OSF_NS_15iterator_traitsISM_E15difference_typeE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 8);
    float v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      int v9 = *(_DWORD *)(a2 - 4);
      do
      {
        float v10 = v7;
        uint64_t v7 = v6;
        void *v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)uint64_t v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*(a2 - 2) < *(float *)v11)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v11, (float *)(v11 + 8), a2 - 2);
          break;
        case 4uLL:
          uint64_t result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
          break;
        case 5uLL:
          uint64_t result = _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (uint64_t *)(v11 + 24), (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((float *)v11 != a2)
      {
        return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_((float *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (float *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v11, (float *)(v11 + 8 * (v15 >> 1)), a2 - 2);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 8), v17 - 2, a2 - 4);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 16), (float *)(v11 + 8 + 8 * v16), a2 - 6);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(v17 - 2, v17, (float *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v11 + 8 * (v15 >> 1)), (float *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v11 - 8) >= *(float *)v11)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_(v11, (uint64_t)v19);
    uint64_t v11 = (uint64_t)(v19 + 2);
    uint64_t result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_((uint64_t)(v19 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(v11, (uint64_t)a2);
  }
  else if ((float *)v11 != a2)
  {
    int64_t v23 = (float *)(v11 + 8);
    while (v23 != a2)
    {
      unint64_t v24 = v23;
      float v25 = *(float *)(v10 + 8);
      if (v25 < *(float *)v10)
      {
        int v26 = *(_DWORD *)(v10 + 12);
        int v27 = v24;
        do
        {
          BOOL v28 = v27;
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 2;
          *(void *)BOOL v28 = v29;
        }
        while (*(v28 - 4) > v25);
        *int v27 = v25;
        *((_DWORD *)v27 + 1) = v26;
      }
      int64_t v23 = v24 + 2;
      uint64_t v10 = (uint64_t)v24;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      uint64_t v7 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  float v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      float v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  int v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *int v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    int v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_237C377C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void _GLOBAL__sub_I_OU3DOROfflineEspressoV2_mm()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x237E2CC70]();
  uint64_t v1 = @"Cabinet";
  float v21 = (uint64_t *)v1;
  BOOL v22 = @"Refrigerator";
  unint64_t v23 = @"Shelf";
  unint64_t v24 = @"Stove";
  uint64_t v2 = @"Bed";
  size_t v25 = v2;
  uint64_t v26 = @"Sink";
  int v27 = @"Washer";
  unint64_t v28 = @"Toilet";
  uint64_t v3 = @"Bathtub";
  uint64_t v29 = v3;
  uint64_t v30 = @"Oven";
  unint64_t v31 = @"Dishwasher";
  uint64_t v32 = @"Fireplace";
  uint64_t v33 = @"Stool";
  float v34 = @"Chair";
  unint64_t v4 = @"Table";
  float v35 = v4;
  int v36 = @"Screen";
  int8x8_t v5 = @"Sofa";
  uint64_t v37 = v5;
  float v38 = @"Stairs";
  uint64_t v39 = @"Window";
  uint64_t v40 = @"Door";
  unint64_t v41 = @"BuildInCabinet";
  qword_26AF27378 = 0;
  qword_26AF27380 = 0;
  ou3dod::kObjectTypesLUT = 0;
  unint64_t v6 = (char *)operator new(0xA8uLL);
  uint64_t v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_26AF27378 = (uint64_t)v6;
  qword_26AF27380 = (uint64_t)(v6 + 168);
  do
  {
    *(void *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_26AF27378 = (uint64_t)(v6 + 168);
  for (uint64_t i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  unint64_t v9 = v1;
  qword_26AF27538 = 0;
  unk_26AF27540 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  float v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  unint64_t v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  void *v10 = v9;
  qword_26AF27538 = (uint64_t)(v10 + 1);
  unk_26AF27540 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  uint64_t v11 = v9;
  float v21 = v11;
  uint8x8_t v12 = v2;
  BOOL v22 = v12;
  unint64_t v13 = v3;
  unint64_t v23 = v13;
  float v14 = v4;
  unint64_t v24 = v14;
  uint64_t v15 = v5;
  size_t v25 = v15;
  qword_26AF27410 = 0;
  qword_26AF27418 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  unint64_t v16 = (char *)operator new(0x28uLL);
  uint64_t v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_26AF27410 = (uint64_t)v16;
  qword_26AF27418 = (uint64_t)(v16 + 40);
  do
  {
    *(void *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_26AF27410 = (uint64_t)(v16 + 40);
  for (uint64_t j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF274A0 = 0;
  unk_26AF274A8 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  long long v19 = operator new(0x50uLL);
  qword_26AF274A0 = (uint64_t)(v19 + 5);
  unk_26AF274A8 = v19 + 5;
  _OWORD v19[2] = xmmword_237CB47D0;
  v19[3] = unk_237CB47E0;
  v19[4] = xmmword_237CB47F0;
  *long long v19 = xmmword_237CB47B0;
  v19[1] = unk_237CB47C0;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  float v21 = v11;
  LODWORD(v22) = 1055286886;
  unint64_t v23 = v12;
  LODWORD(v24) = 1039516303;
  size_t v25 = v13;
  LODWORD(v26) = 1045220557;
  int v27 = v14;
  LODWORD(v28) = 1050253722;
  uint64_t v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (uint64_t k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
}

void sub_237C37D60(_Unwind_Exception *a1)
{
  for (uint64_t i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void sub_237C37FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_237C38A6C()
{
  JUMPOUT(0x237C38A40);
}

void sub_237C38A7C()
{
  JUMPOUT(0x237C38A84);
}

void sub_237C38A8C()
{
  JUMPOUT(0x237C38A48);
}

void sub_237C38AA8()
{
  JUMPOUT(0x237C38A54);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_237C3918C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a27) {
    operator delete(a27);
  }
  uint64_t v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(void *)(v28 - 120) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_237C394CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_237C39AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id OUKeyframeToDictionary(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [MEMORY[0x263EFF9A0] dictionary];
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "count"));
  [v2 setObject:v3 forKeyedSubscript:@"count"];

  [v1 cameraPose];
  v74[0] = v4;
  v74[1] = v5;
  v74[2] = v6;
  v74[3] = v7;
  unint64_t v8 = [MEMORY[0x263EFF8F8] dataWithBytes:v74 length:64];
  [v2 setObject:v8 forKeyedSubscript:@"cameraPose"];

  unint64_t v9 = (const void *)[v1 points];
  uint64_t v10 = [v1 points];
  uint64_t v11 = [v1 count];
  double v71 = 0;
  float32x4_t v72 = 0;
  uint64_t v73 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(&v71, v9, v10 + 16 * v11, (v10 + 16 * v11 - (uint64_t)v9) >> 4);
  std::vector<float>::vector(&v69, ((v72 - (unsigned char *)v71) >> 3) + ((v72 - (unsigned char *)v71) >> 4));
  uint8x8_t v12 = (char *)v71;
  if (v72 != v71)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      unint64_t v16 = (char *)v69 + v13;
      uint64_t v17 = &v12[v14];
      uint64_t v18 = *(void *)v17;
      *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
      *(void *)unint64_t v16 = v18;
      ++v15;
      uint8x8_t v12 = (char *)v71;
      v14 += 16;
      v13 += 12;
    }
    while (v15 < (v72 - (unsigned char *)v71) >> 4);
  }
  if (v70 == v69)
  {
    id v19 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    id v19 = [MEMORY[0x263EFF8F8] dataWithBytes:v69 length:v70 - (unsigned char *)v69];
  }
  float v20 = v19;
  [v2 setObject:v19 forKeyedSubscript:@"points"];

  float v21 = (const void *)[v1 pointsToWorld];
  uint64_t v22 = [v1 pointsToWorld];
  uint64_t v23 = [v1 count];
  uint64_t v66 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v66, v21, v22 + 16 * v23, (v22 + 16 * v23 - (uint64_t)v21) >> 4);
  std::vector<float>::vector(&v64, ((v67 - (unsigned char *)v66) >> 3) + ((v67 - (unsigned char *)v66) >> 4));
  unint64_t v24 = (char *)v66;
  if (v67 != v66)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = (char *)v64 + v25;
      uint64_t v29 = &v24[v26];
      uint64_t v30 = *(void *)v29;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v29 + 2);
      *(void *)uint64_t v28 = v30;
      ++v27;
      unint64_t v24 = (char *)v66;
      v26 += 16;
      v25 += 12;
    }
    while (v27 < (v67 - (unsigned char *)v66) >> 4);
  }
  if (v65 == v64)
  {
    id v31 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    id v31 = [MEMORY[0x263EFF8F8] dataWithBytes:v64 length:v65 - (unsigned char *)v64];
  }
  uint64_t v32 = v31;
  [v2 setObject:v31 forKeyedSubscript:@"pointsToWorld"];

  uint64_t v33 = [v1 semanticLabels];
  uint64_t v34 = [v1 count];
  if (v33 && v34)
  {
    id v35 = [MEMORY[0x263EFF8F8] dataWithBytes:v33 length:4 * v34];
  }
  else
  {
    id v35 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  int v36 = v35;
  [v2 setObject:v35 forKeyedSubscript:@"semanticLabels"];

  uint64_t v37 = [v1 semanticVotes];
  uint64_t v38 = [v1 count];
  if (v37 && v38)
  {
    id v39 = [MEMORY[0x263EFF8F8] dataWithBytes:v37 length:8 * v38];
  }
  else
  {
    id v39 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  uint64_t v40 = v39;
  [v2 setObject:v39 forKeyedSubscript:@"semanticVotes"];

  unint64_t v41 = [v1 identifier];
  uint64_t v42 = [v41 UUIDString];

  [v2 setObject:v42 forKeyedSubscript:@"identifier"];
  uint64_t v43 = (const void *)[v1 colors];
  uint64_t v44 = [v1 colors];
  uint64_t v45 = [v1 count];
  unsigned int v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v61, v43, v44 + 16 * v45, (v44 + 16 * v45 - (uint64_t)v43) >> 4);
  std::vector<float>::vector(&__p, ((v62 - (unsigned char *)v61) >> 3) + ((v62 - (unsigned char *)v61) >> 4));
  uint64_t v46 = (char *)v61;
  if (v62 != v61)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v49 = 0;
    do
    {
      unsigned int v50 = (char *)__p + v47;
      int64x2_t v51 = &v46[v48];
      uint64_t v52 = *(void *)v51;
      *((_DWORD *)v50 + 2) = *((_DWORD *)v51 + 2);
      *(void *)unsigned int v50 = v52;
      ++v49;
      uint64_t v46 = (char *)v61;
      v48 += 16;
      v47 += 12;
    }
    while (v49 < (v62 - (unsigned char *)v61) >> 4);
  }
  if (v60 == __p)
  {
    id v53 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    id v53 = [MEMORY[0x263EFF8F8] dataWithBytes:__p length:v60 - (unsigned char *)__p];
  }
  uint64_t v54 = v53;
  [v2 setObject:v53 forKeyedSubscript:@"colors"];

  uint64_t v55 = NSNumber;
  [v1 timestamp];
  float32x4_t v56 = objc_msgSend(v55, "numberWithDouble:");
  [v2 setObject:v56 forKeyedSubscript:@"timestamp"];

  id v57 = v2;
  if (__p)
  {
    float32x4_t v60 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    char v62 = v61;
    operator delete(v61);
  }

  if (v64)
  {
    unint64_t v65 = v64;
    operator delete(v64);
  }
  if (v66)
  {
    int v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v71)
  {
    float32x4_t v72 = v71;
    operator delete(v71);
  }

  return v57;
}

void sub_237C3A1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v29 = v28;

  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

OUKeyframeExtended *OUKeyframeFromDictionary(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [[OUKeyframeExtended alloc] initWithDictionary:v1];

  return v2;
}

void sub_237C3A328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OUKeyframeSequenceToDictionary(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v1 = a1;
  unint64_t v2 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = objc_msgSend(v1, "allKeys", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v3);
        }
        long long v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unint64_t v8 = [v1 objectForKeyedSubscript:v7];
        unint64_t v9 = OUKeyframeToDictionary(v8);
        uint64_t v10 = [v7 UUIDString];
        [v2 setObject:v9 forKeyedSubscript:v10];
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return v2;
}

void sub_237C3A4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OUKeyframeSequenceFromDictionary(void *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v1 = a1;
  long long v13 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  obuint64_t j = [v1 allKeys];
  uint64_t v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v16 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        long long v6 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v5];
        long long v7 = [OUKeyframeExtended alloc];
        unint64_t v8 = [v1 objectForKeyedSubscript:v5];
        unint64_t v9 = [(OUKeyframeExtended *)v7 initWithDictionary:v8];

        if (v6) {
          BOOL v10 = v9 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          [v13 setObject:v9 forKeyedSubscript:v6];
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v2);
  }

  uint64_t v11 = (void *)[v13 copy];
  return v11;
}

void sub_237C3A6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id OUKeyframeSequenceFromDictionaryWithId(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v16 = a1;
  long long v14 = objc_msgSend(MEMORY[0x263EFF9A0], "dictionaryWithCapacity:", objc_msgSend(v16, "count"));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  obuint64_t j = [v16 allKeys];
  uint64_t v3 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        long long v7 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v6];
        unint64_t v8 = [OUKeyframeExtended alloc];
        unint64_t v9 = [v16 objectForKeyedSubscript:v6];
        BOOL v10 = [(OUKeyframeExtended *)v8 initWithDictionary:v9 withGroupId:a2];

        if (v7) {
          BOOL v11 = v10 == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11) {
          [v14 setObject:v10 forKeyedSubscript:v7];
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v3);
  }

  long long v12 = (void *)[v14 copy];
  return v12;
}

void sub_237C3A924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  id v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

char *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  id v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    unint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    id v16 = &v14[16 * a2];
    long long v18 = (char *)*a1;
    size_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      size_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_237C3AD98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  BOOL result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *long long v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_237C3B070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C3B0E4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C3B160(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint8x8_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_237C3B1D8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    BOOL result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  float v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      BOOL result = memmove(v9, __src, v16);
    }
    unint64_t v15 = &v9[v16];
    goto LABEL_20;
  }
  BOOL v14 = &__src[v13];
  if (v12 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    BOOL result = memmove(v9, v14, a3 - v14);
  }
  unint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *_ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint8x8_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_237C3B3A4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    BOOL result = std::vector<half>::__vallocate[abi:ne180100](v7, v11);
    size_t v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      long long v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  float v12 = (void **)(result + 8);
  BOOL v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  size_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    long long v19 = v16;
LABEL_19:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  unsigned char *v12 = &v9[v17];
  return result;
}

void *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint8x8_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_237C3B520(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint8x8_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    float v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _OWORD *a2)
{
  uint8x8_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v16 = &v15[16 * v11];
    size_t v17 = &v15[16 * v14];
    *(_OWORD *)size_t v16 = *a2;
    unint64_t v10 = v16 + 16;
    long long v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }
    unsigned char *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    _OWORD *v5 = *a2;
    unint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint8x8_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = &v6[4 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv4_hNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _DWORD *a2)
{
  uint8x8_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 1;
    if (v12 >> 1 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v16 = &v15[4 * v11];
    size_t v17 = &v15[4 * v14];
    *(_DWORD *)size_t v16 = *a2;
    unint64_t v10 = v16 + 4;
    long long v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        int v20 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v16 - 1) = v20;
        v16 -= 4;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }
    unsigned char *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    unint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint8x8_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv4_tNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, void *a2)
{
  uint8x8_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      unint64_t v15 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v16 = &v15[8 * v11];
    size_t v17 = &v15[8 * v14];
    *(void *)size_t v16 = *a2;
    unint64_t v10 = v16 + 8;
    long long v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }
    unsigned char *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = *a2;
    unint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void OU3DORIDTree::OU3DORIDTree(OU3DORIDTree *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "root")[3] = 0;
  operator new();
}

void sub_237C3BA88(_Unwind_Exception *a1)
{
  MEMORY[0x237E2C510](v2, 0x1092C4055567BECLL);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void OU3DORIDTree::PrintDebugTree(OU3DORIDTree::Node **this)
{
}

void OU3DORIDTree::Node::Print(OU3DORIDTree::Node *this)
{
  if (*((unsigned char *)this + 52)) {
    std::to_string(&v8, *((_DWORD *)this + 12));
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v8, "unknown");
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v2 = &v8;
  }
  else {
    uint64_t v2 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  uint64_t v3 = [NSString stringWithUTF8String:v2];
  uint8x8_t v4 = this;
  if (*((char *)this + 23) < 0) {
    uint8x8_t v4 = *(OU3DORIDTree::Node **)this;
  }
  int64_t v5 = [NSString stringWithUTF8String:v4];
  NSLog(&cfstr_NodeNameIdOfTh.isa, v5, v3);
  uint64_t v7 = (OU3DORIDTree::Node **)*((void *)this + 3);
  unint64_t v6 = (OU3DORIDTree::Node **)*((void *)this + 4);
  while (v7 != v6)
    OU3DORIDTree::Node::Print(*v7++);

  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_237C3BBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t OU3DORIDTree::FindNodeInternal(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  size_t v7 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    std::string v8 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string v8 = *(unsigned __int8 **)(a2 + 8);
  }
  unint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    unint64_t v9 = a3[1];
  }
  if (v8 == v9)
  {
    if (v10 >= 0) {
      uint64_t v11 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    if ((v6 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v4, v11, v7)) {
        return v4;
      }
    }
    else
    {
      if (!v6) {
        return v4;
      }
      uint64_t v12 = 0;
      while (*(unsigned __int8 *)(v4 + v12) == v11[v12])
      {
        if (v6 == ++v12) {
          return v4;
        }
      }
    }
  }
  uint64_t v13 = *(void **)(v4 + 24);
  unint64_t v14 = *(void **)(v4 + 32);
  while (1)
  {
    if (v13 == v14) {
      return 0;
    }
    uint64_t NodeInternal = OU3DORIDTree::FindNodeInternal(a1, *v13, a3);
    if (NodeInternal) {
      break;
    }
    ++v13;
  }
  return NodeInternal;
}

void OU3DORIDTree::AddNode(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t NodeInternal = OU3DORIDTree::FindNodeInternal(a1, *(void *)(a1 + 24), a3);
  if (NodeInternal)
  {
    int64_t v5 = (void *)NodeInternal;
    unint64_t v8 = *(void *)(NodeInternal + 40);
    uint64_t v6 = NodeInternal + 40;
    unint64_t v7 = v8;
    unint64_t v9 = *(void **)(v6 - 8);
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (void **)(v6 - 16);
      uint64_t v12 = *(void *)(v6 - 16);
      uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v7 - v12;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        size_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v6, v16);
      }
      else {
        size_t v17 = 0;
      }
      uint64_t v18 = &v17[8 * v13];
      long long v19 = &v17[8 * v16];
      *(void *)uint64_t v18 = a2;
      int v10 = v18 + 8;
      float v21 = (char *)v5[3];
      uint64_t v20 = (char *)v5[4];
      if (v20 != v21)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        uint64_t v20 = (char *)*v11;
      }
      v5[3] = v18;
      v5[4] = v10;
      v5[5] = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      void *v9 = a2;
      int v10 = v9 + 1;
    }
    v5[4] = v10;
  }
}

unint64_t OU3DORIDTree::FindRange(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t NodeInternal = (OU3DORIDTree::Node *)OU3DORIDTree::FindNodeInternal(a1, *(void *)(a1 + 24), a2);
  return OU3DORIDTree::Node::IDRange(NodeInternal);
}

unint64_t OU3DORIDTree::Node::IDRange(OU3DORIDTree::Node *this)
{
  if (*((unsigned char *)this + 52)
    || (int64_t v5 = (OU3DORIDTree::Node **)*((void *)this + 3), *((OU3DORIDTree::Node ***)this + 4) == v5))
  {
    unsigned int v2 = *((_DWORD *)this + 12);
    unint64_t v3 = v2;
  }
  else
  {
    unint64_t v6 = OU3DORIDTree::Node::IDRange(*v5);
    unsigned int v2 = v6;
    unint64_t v3 = HIDWORD(v6);
    unint64_t v8 = (OU3DORIDTree::Node **)*((void *)this + 3);
    unint64_t v7 = (OU3DORIDTree::Node **)*((void *)this + 4);
    while (v8 != v7)
    {
      unint64_t v9 = *v8++;
      uint64_t v10 = OU3DORIDTree::Node::IDRange(v9);
      if ((int)v2 >= (int)v10) {
        unsigned int v2 = v10;
      }
      if ((int)v3 <= SHIDWORD(v10)) {
        unint64_t v3 = HIDWORD(v10);
      }
      else {
        unint64_t v3 = v3;
      }
    }
  }
  return v2 | (v3 << 32);
}

OU3DORIDTree::Node *OU3DORIDTree::FindNodeBasedOnID(OU3DORIDTree::Node **this, int a2)
{
  return OU3DORIDTree::FindNodeBasedOnIDInternal((uint64_t)this, this[3], a2, 0);
}

OU3DORIDTree::Node *OU3DORIDTree::FindNodeBasedOnIDInternal(uint64_t a1, OU3DORIDTree::Node *a2, int a3, uint64_t *a4)
{
  if (!a2)
  {
LABEL_19:
    if (a4) {
      std::vector<std::string>::__clear[abi:ne180100](a4);
    }
    return 0;
  }
  unint64_t v6 = a2;
LABEL_3:
  if (!*((unsigned char *)v6 + 52) || *((_DWORD *)v6 + 12) != a3)
  {
    unint64_t v7 = (OU3DORIDTree::Node **)*((void *)v6 + 3);
    unint64_t v8 = (OU3DORIDTree::Node **)*((void *)v6 + 4);
    while (v7 != v8)
    {
      unint64_t v9 = *v7;
      unint64_t v10 = OU3DORIDTree::Node::IDRange(*v7);
      if ((int)v10 <= a3 && SHIDWORD(v10) >= a3)
      {
        if (a4)
        {
          unint64_t v12 = a4[1];
          if (v12 >= a4[2])
          {
            uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)v6);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, (long long *)v6);
            uint64_t v13 = v12 + 24;
          }
          a4[1] = v13;
        }
        unint64_t v6 = v9;
        if (v9) {
          goto LABEL_3;
        }
        goto LABEL_19;
      }
      ++v7;
    }
    goto LABEL_19;
  }
  if (a4)
  {
    unint64_t v15 = a4[1];
    if (v15 >= a4[2])
    {
      uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)v6);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, (long long *)v6);
      uint64_t v16 = v15 + 24;
    }
    a4[1] = v16;
  }
  return v6;
}

uint64_t OU3DORIDTree::FindNode(uint64_t a1, unsigned __int8 **a2)
{
  return OU3DORIDTree::FindNodeInternal(a1, *(void *)(a1 + 24), a2);
}

void OU3DORIDTree::GetRootToNodePath(OU3DORIDTree::Node **this@<X0>, int a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  OU3DORIDTree::FindNodeBasedOnIDInternal((uint64_t)this, this[3], a2, &v17);
  uint64_t v6 = v17;
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3) >= 2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 1;
    do
    {
      uint64_t v9 = v6 + v7;
      unint64_t v12 = *(const std::string::value_type **)(v9 + 24);
      uint64_t v10 = v9 + 24;
      uint64_t v11 = v12;
      int v13 = *(char *)(v10 + 23);
      if (v13 >= 0) {
        uint64_t v14 = (const std::string::value_type *)v10;
      }
      else {
        uint64_t v14 = v11;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        std::string::size_type v15 = *(void *)(v10 + 8);
      }
      std::string::append(a4, v14, v15);
      uint64_t v6 = v17;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
      if (v16 - 1 > v8)
      {
        std::string::push_back(a4, a3);
        uint64_t v6 = v17;
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
      }
      ++v8;
      v7 += 24;
    }
    while (v16 > v8);
  }
  uint64_t v20 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_237C3C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_237C3C160(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_237C3C278(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_237C3C83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSArray>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C3C968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id OUCameraToDictionary(void *a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  id v41 = a1;
  uint64_t v42 = [MEMORY[0x263EFF9A0] dictionary];
  [v41 intrinsics];
  long long v38 = v2;
  long long v39 = v1;
  long long v40 = v3;
  uint64_t v47 = [NSNumber numberWithFloat:*(double *)&v3];
  uint64_t v37 = (void *)v47;
  uint64_t v48 = [NSNumber numberWithFloat:*(double *)&v39];
  int v36 = (void *)v48;
  id v35 = [NSNumber numberWithFloat:*(double *)&v38];
  unint64_t v49 = v35;
  uint64_t v34 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v47 count:3];
  v43.columns[0].i64[0] = (uint64_t)v34;
  HIDWORD(v4) = DWORD1(v40);
  LODWORD(v4) = DWORD1(v40);
  unint64_t v5 = [NSNumber numberWithFloat:v4];
  v46[0] = v5;
  HIDWORD(v6) = DWORD1(v39);
  LODWORD(v6) = DWORD1(v39);
  uint64_t v7 = [NSNumber numberWithFloat:v6];
  v46[1] = v7;
  HIDWORD(v8) = DWORD1(v38);
  LODWORD(v8) = DWORD1(v38);
  uint64_t v9 = [NSNumber numberWithFloat:v8];
  v46[2] = v9;
  long long v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v46 count:3];
  v43.columns[0].i64[1] = (uint64_t)v10;
  uint64_t v11 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v40), DWORD2(v40))));
  v45[0] = v11;
  long long v12 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v39), DWORD2(v39))));
  v45[1] = v12;
  char v13 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v38), DWORD2(v38))));
  v45[2] = v13;
  long long v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v45 count:3];
  v43.columns[1].i64[0] = (uint64_t)v14;
  long long v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v43 count:3];

  [v42 setObject:v15 forKeyedSubscript:@"intrinsic"];
  unint64_t v16 = NSNumber;
  [v41 imageResolution];
  uint64_t v17 = objc_msgSend(v16, "numberWithDouble:");
  v44[0] = v17;
  uint64_t v18 = NSNumber;
  [v41 imageResolution];
  uint64_t v20 = [v18 numberWithDouble:v19];
  v44[1] = v20;
  float v21 = [MEMORY[0x263EFF8C0] arrayWithObjects:v44 count:2];
  [v42 setObject:v21 forKeyedSubscript:@"image_resolution"];

  [v41 pose];
  v43.columns[0] = v22;
  v43.columns[1] = v23;
  v43.columns[2] = v24;
  v43.columns[3] = v25;
  uint64_t v26 = float4x4ToNSArray(&v43, *(double *)v22.i64);
  [v42 setObject:v26 forKeyedSubscript:@"pose"];

  [v41 transform];
  v43.columns[0] = v27;
  v43.columns[1] = v28;
  v43.columns[2] = v29;
  v43.columns[3] = v30;
  id v31 = float4x4ToNSArray(&v43, *(double *)v27.i64);
  [v42 setObject:v31 forKeyedSubscript:@"transform"];

  uint64_t v32 = (void *)[v42 copy];
  return v32;
}

void sub_237C3CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_237C3D408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

_OUCamera *OUCameraFromDictionary(void *a1)
{
  id v1 = a1;
  long long v2 = [[_OUCamera alloc] initWithDictionary:v1];

  return v2;
}

void sub_237C3D588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VECV::ConnectedComponent::bitmapVal(VECV::ConnectedComponent *this, int a2, int a3)
{
  return *(void *)this + *((void *)this + 3) * a3 + a2;
}

uint64_t VECV::ConnectedComponent::labelVal(VECV::ConnectedComponent *this, int a2, int a3)
{
  return *((void *)this + 4) + 2 * (*((void *)this + 5) * (a3 + 1) + a2 + 1);
}

void *VECV::ConnectedComponent::ConnectedComponent(void *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, int a6)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[8] = 0;
  a1[7] = a1 + 8;
  uint64_t v70 = (uint64_t **)(a1 + 7);
  a1[9] = 0;
  a1[11] = 0;
  uint64_t v69 = a1 + 11;
  a1[10] = a1 + 11;
  double v71 = (uint64_t **)(a1 + 10);
  a1[12] = 0;
  a1[5] = (char *)a3 + 2;
  a1[6] = a4 + 2;
  a1[4] = malloc_type_calloc((void)(a4 + 2) * ((void)a3 + 2), 2uLL, 0x1000040BDFB0063uLL);
  v73[0] = 0;
  v73[1] = 0;
  float32x4_t v72 = (uint64_t *)v73;
  unsigned __int16 v74 = 0;
  char v75 = &v74;
  uint64_t v9 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
  *((_WORD *)v9 + 20) = 0;
  v9[6] = 0;
  if (a6 == 1)
  {
    if (!a4) {
      goto LABEL_88;
    }
    long long v10 = 0;
    int v11 = 0;
    uint64_t v12 = 1;
    do
    {
      if (a3)
      {
        char v13 = 0;
        do
        {
          if (*((unsigned char *)v13 + *a1 + (void)v10 * a1[3]))
          {
            uint64_t v14 = a1[4];
            uint64_t v15 = a1[5];
            unint64_t v16 = (unsigned __int16 *)(v14 + 2 * ((void)v13 + (void)v10 * v15));
            unsigned int v17 = v16[1];
            if (v16[1]) {
              unsigned __int16 v18 = v16[1];
            }
            else {
              unsigned __int16 v18 = -1;
            }
            uint64_t v19 = (uint64_t)v13 + v12 * v15;
            unsigned int v20 = *(unsigned __int16 *)(v14 + 2 * v19);
            unsigned __int16 v21 = v18;
            if (v20 < v18) {
              unsigned __int16 v21 = *(_WORD *)(v14 + 2 * v19);
            }
            if (*(_WORD *)(v14 + 2 * v19)) {
              unsigned __int16 v18 = v21;
            }
            unsigned __int16 v22 = v18;
            unsigned int v23 = *v16;
            if (v23 < v18) {
              unsigned __int16 v22 = *v16;
            }
            if (*v16) {
              unsigned __int16 v18 = v22;
            }
            unsigned int v24 = v16[2];
            if (v24 >= v18) {
              unsigned __int16 v25 = v18;
            }
            else {
              unsigned __int16 v25 = v16[2];
            }
            if (v24) {
              unsigned __int16 v26 = v25;
            }
            else {
              unsigned __int16 v26 = v18;
            }
            if (v26 == 0xFFFF)
            {
              *(_WORD *)(v14 + 2 * v19 + 2) = ++v11;
              unsigned __int16 v74 = v11;
              char v75 = &v74;
              simd_float4 v27 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
              *((_WORD *)v27 + 20) = v11;
              v27[6] = 0;
            }
            else
            {
              *(_WORD *)(v14 + 2 * v19 + 2) = v26;
              if (v17 > v26) {
                UnionFind<unsigned short>::Union(&v72, v17, v26);
              }
              if (v20 > v26) {
                UnionFind<unsigned short>::Union(&v72, v20, v26);
              }
              if (v23 > v26) {
                UnionFind<unsigned short>::Union(&v72, v23, v26);
              }
              if (v24 > v26) {
                UnionFind<unsigned short>::Union(&v72, v24, v26);
              }
            }
          }
          char v13 = (uint64_t *)((char *)v13 + 1);
        }
        while (a3 != v13);
      }
      ++v10;
      ++v12;
    }
    while (v10 != a4);
  }
  else
  {
    if (!a4) {
      goto LABEL_88;
    }
    simd_float4 v28 = 0;
    int v29 = 0;
    uint64_t v30 = 1;
    do
    {
      if (a3)
      {
        id v31 = 0;
        do
        {
          if (*((unsigned char *)v31 + *a1 + (void)v28 * a1[3]))
          {
            uint64_t v32 = a1[4];
            uint64_t v33 = a1[5];
            uint64_t v34 = v32 + 2 * ((void)v31 + (void)v28 * v33);
            unsigned int v35 = *(unsigned __int16 *)(v34 + 2);
            if (*(_WORD *)(v34 + 2)) {
              unsigned __int16 v36 = *(_WORD *)(v34 + 2);
            }
            else {
              unsigned __int16 v36 = -1;
            }
            uint64_t v37 = (uint64_t)v31 + v30 * v33;
            unsigned int v38 = *(unsigned __int16 *)(v32 + 2 * v37);
            unsigned __int16 v39 = v36;
            if (v38 < v36) {
              unsigned __int16 v39 = *(_WORD *)(v32 + 2 * v37);
            }
            if (*(_WORD *)(v32 + 2 * v37)) {
              unsigned __int16 v40 = v39;
            }
            else {
              unsigned __int16 v40 = v36;
            }
            if (v40 == 0xFFFF)
            {
              *(_WORD *)(v32 + 2 * v37 + 2) = ++v29;
              unsigned __int16 v74 = v29;
              char v75 = &v74;
              id v41 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
              *((_WORD *)v41 + 20) = v29;
              v41[6] = 0;
            }
            else
            {
              *(_WORD *)(v32 + 2 * v37 + 2) = v40;
              if (v35 > v40) {
                UnionFind<unsigned short>::Union(&v72, v35, v40);
              }
              if (v38 > v40) {
                UnionFind<unsigned short>::Union(&v72, v38, v40);
              }
            }
          }
          id v31 = (uint64_t *)((char *)v31 + 1);
        }
        while (a3 != v31);
      }
      ++v28;
      ++v30;
    }
    while (v28 != a4);
  }
  uint64_t v42 = 0;
  do
  {
    simd_float4x4 v43 = (char *)v42 + 1;
    if (a3)
    {
      uint64_t v44 = 0;
      do
      {
        uint64_t v45 = (uint64_t *)((char *)v44 + 1);
        __int16 v46 = UnionFind<unsigned short>::Find(&v72, *(_WORD *)(a1[4] + 2 * ((void)v44 + a1[5] * (void)v43 + 1)));
        uint64_t v47 = a1[4];
        uint64_t v48 = (uint64_t)v44 + a1[5] * (void)v43 + 1;
        *(_WORD *)(v47 + 2 * v48) = v46;
        unsigned __int16 v74 = 0;
        unsigned __int16 v74 = *(_WORD *)(v47 + 2 * v48);
        char v75 = &v74;
        unint64_t v49 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v70, &v74, (uint64_t)&std::piecewise_construct, &v75);
        v49[5] = (uint64_t *)((char *)v49[5] + 1);
        uint64_t v50 = *v69;
        if (!*v69) {
          goto LABEL_72;
        }
        int64x2_t v51 = v69;
        do
        {
          unsigned int v52 = *(unsigned __int16 *)(v50 + 32);
          BOOL v53 = v52 >= v74;
          if (v52 >= v74) {
            uint64_t v54 = (uint64_t *)v50;
          }
          else {
            uint64_t v54 = (uint64_t *)(v50 + 8);
          }
          if (v53) {
            int64x2_t v51 = (void *)v50;
          }
          uint64_t v50 = *v54;
        }
        while (*v54);
        if (v51 != v69 && v74 >= *((unsigned __int16 *)v51 + 16))
        {
          char v75 = &v74;
          id v57 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[5];
          char v75 = &v74;
          float32x4_t v58 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v57 >= v44) {
            float32x4_t v59 = v44;
          }
          else {
            float32x4_t v59 = v57;
          }
          v58[5] = v59;
          char v75 = &v74;
          float32x4_t v60 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[6];
          char v75 = &v74;
          unsigned int v61 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v60 <= v44) {
            char v62 = v44;
          }
          else {
            char v62 = v60;
          }
          v61[6] = v62;
          char v75 = &v74;
          uint64_t v63 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[7];
          char v75 = &v74;
          float v64 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v63 >= v42) {
            unint64_t v65 = v42;
          }
          else {
            unint64_t v65 = v63;
          }
          v64[7] = v65;
          char v75 = &v74;
          uint64_t v66 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[8];
          char v75 = &v74;
          uint64_t v55 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v66 <= v42) {
            float32x4_t v56 = v42;
          }
          else {
            float32x4_t v56 = v66;
          }
        }
        else
        {
LABEL_72:
          char v75 = &v74;
          uint64_t v55 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          v55[5] = v44;
          v55[6] = v44;
          float32x4_t v56 = v42;
          v55[7] = v42;
        }
        v55[8] = v56;
        uint64_t v44 = v45;
      }
      while (v45 != a3);
    }
    uint64_t v42 = (uint64_t *)((char *)v42 + 1);
  }
  while (v43 != a4);
LABEL_88:
  std::__tree<int>::destroy((uint64_t)&v72, v73[0]);
  return a1;
}

void sub_237C3DB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t **UnionFind<unsigned short>::Union(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  unsigned __int16 v19 = a2;
  unsigned __int16 v18 = a3;
  if (a2 >= a3) {
    double v4 = (uint64_t **)&v19;
  }
  else {
    double v4 = (uint64_t **)&v18;
  }
  unsigned int v20 = v4;
  unint64_t v5 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v4, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
  do
  {
    double v6 = v5;
    unint64_t v5 = (uint64_t **)v5[1];
  }
  while (v5);
  int v7 = *(unsigned __int16 *)v6;
  if (v18 >= v19) {
    double v8 = (uint64_t **)&v19;
  }
  else {
    double v8 = (uint64_t **)&v18;
  }
  unsigned int v20 = v8;
  BOOL result = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v8, (uint64_t)&std::piecewise_construct, (_WORD **)&v20);
  long long v10 = result + 5;
  do
  {
    int v11 = v10;
    long long v10 = (uint64_t **)v10[1];
  }
  while (v10);
  if (v7 != *(unsigned __int16 *)v11)
  {
    if (v18 >= v19) {
      uint64_t v12 = (uint64_t **)&v19;
    }
    else {
      uint64_t v12 = (uint64_t **)&v18;
    }
    unsigned int v20 = v12;
    char v13 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v12, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
    do
    {
      uint64_t v14 = (uint64_t *)v13;
      char v13 = (uint64_t **)v13[1];
    }
    while (v13);
    if (v19 >= v18) {
      uint64_t v15 = (uint64_t **)&v19;
    }
    else {
      uint64_t v15 = (uint64_t **)&v18;
    }
    unsigned int v20 = v15;
    unint64_t v16 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v15, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
    do
    {
      unsigned int v17 = v16;
      unint64_t v16 = (uint64_t **)v16[1];
    }
    while (v16);
    unsigned int v20 = v17;
    BOOL result = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v17, (uint64_t)&std::piecewise_construct, (_WORD **)&v20);
    result[6] = v14;
  }
  return result;
}

uint64_t UnionFind<unsigned short>::Find(uint64_t **a1, unsigned __int16 a2)
{
  unsigned __int16 v5 = a2;
  double v6 = &v5;
  long long v2 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, &v5, (uint64_t)&std::piecewise_construct, &v6)+ 5;
  do
  {
    long long v3 = v2;
    long long v2 = (uint64_t **)v2[1];
  }
  while (v2);
  return *(unsigned __int16 *)v3;
}

void VECV::ConnectedComponent::~ConnectedComponent(void **this)
{
}

uint64_t **std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        double v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x38uLL);
    v11[16] = **a4;
    v11[20] = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        double v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  double v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        double v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      double v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = (char *)operator new(0x48uLL);
    *((_WORD *)v11 + 16) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void ou3dod::OU3DAnchorFreeDetector::createForOnline(ou3dod::OU3DAnchorFreeDetector *this, const OU3DSSDConfig *a2)
{
}

void sub_237C3E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    ou3dod::OU3DAnchorFreeDetector::createForOnline((uint64_t)__p);
  }
  MEMORY[0x237E2C510](v16, 0x10B1C4009F42ACALL);

  _Unwind_Resume(a1);
}

void ou3dod::OU3DAnchorFreeDetector::createForOffline(ou3dod::OU3DAnchorFreeDetector *this, const OU3DSSDConfig *a2)
{
}

void sub_237C3E360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    ou3dod::OU3DAnchorFreeDetector::createForOnline((uint64_t)__p);
  }
  MEMORY[0x237E2C510](v16, 0x10B1C4009F42ACALL);

  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DAnchorFreeDetector::OU3DAnchorFreeDetector(uint64_t a1, uint64_t *a2, long long *a3, int a4, int a5, char a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v11 = ou3dod::OU3DODInterface::OU3DODInterface((void *)a1, a2);
  *int v11 = &unk_26EAD5EE8;
  long long v12 = a3[2];
  long long v13 = a3[3];
  long long v14 = a3[4];
  long long v16 = *a3;
  long long v15 = a3[1];
  *(_OWORD *)(v11 + 21) = 0u;
  unsigned int v17 = (void **)(v11 + 21);
  *((_OWORD *)v11 + 3) = v16;
  *((_OWORD *)v11 + 7) = v14;
  *((_OWORD *)v11 + 6) = v13;
  *((_OWORD *)v11 + 5) = v12;
  *((_OWORD *)v11 + 4) = v15;
  *((unsigned char *)v11 + 128) = a6;
  *((_DWORD *)v11 + 33) = a4;
  *((_DWORD *)v11 + 34) = a5;
  uint64_t v18 = (uint64_t)(v11 + 24);
  v11[18] = 0;
  v11[19] = 0;
  *((_DWORD *)v11 + 40) = 0;
  *(_OWORD *)(v11 + 23) = 0u;
  *(_OWORD *)(v11 + 25) = 0u;
  int v19 = *((_DWORD *)v11 + 16) * *((_DWORD *)v11 + 17) * *((_DWORD *)v11 + 18);
  *((_DWORD *)v11 + 35) = v19;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v25, v19, &__x);
  unsigned int v20 = *v17;
  if (*v17)
  {
    *(void *)(a1 + 176) = v20;
    operator delete(v20);
    *unsigned int v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
  }
  *(std::vector<int> *)(a1 + 168) = v25;
  if (*(unsigned char *)(a1 + 128)) {
    std::vector<float>::resize(v18, *(int *)(a1 + 136));
  }
  unsigned __int16 v21 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    int v22 = *(_DWORD *)(a1 + 140);
    LODWORD(v25.__begin_) = 136315394;
    *(std::vector<int>::pointer *)((char *)&v25.__begin_ + 4) = (std::vector<int>::pointer)"OU3DAnchorFreeDetector";
    WORD2(v25.__end_) = 1024;
    *(_DWORD *)((char *)&v25.__end_ + 6) = v22;
    _os_log_impl(&dword_237C17000, v21, OS_LOG_TYPE_INFO, "[3DOD][%s] Loading AF Espresso V2 version succeeded, with %d voxels.", (uint8_t *)&v25, 0x12u);
  }

  return a1;
}

void sub_237C3E5A8(_Unwind_Exception *a1)
{
  unsigned __int16 v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 25) = v5;
    operator delete(v5);
  }
  double v6 = *v3;
  if (*v3)
  {
    *((void *)v1 + 22) = v6;
    operator delete(v6);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DODInterface::~OU3DODInterface(ou3dod::OU3DODInterface *this)
{
  *(void *)this = &unk_26EAD5F40;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = (void **)((char *)this + 8);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void ou3dod::OU3DAnchorFreeDetector::Preprocess(ou3dod::OU3DAnchorFreeDetector *this, OUPointCloudCpp *a2)
{
  if (OUPointCloudCpp::IsValid(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    OUDnnInferenceInterface::GetInputSpan<half,void>();
  }
  uint64_t v2 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    ou3dod::OU3DAnchorFreeDetector::Preprocess(v2);
  }

  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_237CC3E0E);
  __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
}

void sub_237C3E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

BOOL OUPointCloudCpp::IsValid(OUPointCloudCpp *this)
{
  uint64_t v1 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
  return v1 == (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 4
      && v1 == (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2
      && v1 == (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3;
}

void ou3dod::OU3DAnchorFreeDetector::ParseNetOutput(ou3dod::OU3DAnchorFreeDetector *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v1, "centerness");
  OUDnnInferenceInterface::GetOutputSpan<half,void>();
}

void sub_237C3E950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void ou3dod::OU3DAnchorFreeDetector::Postprocess(ou3dod::OU3DAnchorFreeDetector *this)
{
}

void ou3dod::OU3DAnchorFreeDetector::~OU3DAnchorFreeDetector(ou3dod::OU3DAnchorFreeDetector *this)
{
  *(void *)this = &unk_26EAD5EE8;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26EAD5EE8;
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(this);
  JUMPOUT(0x237E2C510);
}

void _GLOBAL__sub_I_OU3DAnchorFreeDetector_mm()
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  v0 = @"Cabinet";
  uint64_t v44 = (uint64_t *)v0;
  simd_float4x4 v43 = @"Refrigerator";
  uint64_t v45 = v43;
  uint64_t v42 = @"Shelf";
  __int16 v46 = v42;
  id v41 = @"Stove";
  uint64_t v47 = v41;
  uint64_t v1 = @"Bed";
  uint64_t v48 = v1;
  unsigned __int16 v40 = @"Sink";
  unint64_t v49 = v40;
  unsigned __int16 v39 = @"Washer";
  uint64_t v50 = v39;
  unsigned int v38 = @"Toilet";
  int64x2_t v51 = v38;
  uint64_t v2 = @"Bathtub";
  unsigned int v52 = v2;
  uint64_t v37 = @"Oven";
  BOOL v53 = v37;
  unsigned __int16 v36 = @"Dishwasher";
  uint64_t v54 = v36;
  unsigned int v35 = @"Fireplace";
  uint64_t v55 = v35;
  uint64_t v34 = @"Stool";
  float32x4_t v56 = v34;
  uint64_t v33 = @"Chair";
  id v57 = v33;
  long long v3 = @"Table";
  float32x4_t v58 = v3;
  uint64_t v32 = @"Screen";
  float32x4_t v59 = v32;
  double v4 = @"Sofa";
  float32x4_t v60 = v4;
  id v31 = @"Stairs";
  unsigned int v61 = v31;
  uint64_t v30 = @"Window";
  char v62 = v30;
  unsigned __int16 v5 = @"Door";
  uint64_t v63 = v5;
  double v6 = @"BuildInCabinet";
  float v64 = v6;
  qword_26AF27390 = 0;
  qword_26AF27398 = 0;
  ou3dod::kObjectTypesLUT = 0;
  int v7 = (char *)operator new(0xA8uLL);
  uint64_t v8 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v7;
  qword_26AF27390 = (uint64_t)v7;
  qword_26AF27398 = (uint64_t)(v7 + 168);
  do
  {
    *(void *)&v7[v8 * 8] = (&v44)[v8];
    ++v8;
  }
  while (v8 != 21);
  qword_26AF27390 = (uint64_t)(v7 + 168);
  for (uint64_t i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  unsigned int v10 = v0;
  qword_26AF27550 = 0;
  unk_26AF27558 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  uint64_t v44 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v45) = 0;
  int v11 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v11;
  *int v11 = v10;
  qword_26AF27550 = (uint64_t)(v11 + 1);
  unk_26AF27558 = v11 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  long long v12 = v10;
  uint64_t v44 = v12;
  long long v13 = v1;
  uint64_t v45 = v13;
  long long v14 = v2;
  __int16 v46 = v14;
  long long v15 = v3;
  uint64_t v47 = v15;
  long long v16 = v4;
  uint64_t v48 = v16;
  qword_26AF27428 = 0;
  qword_26AF27430 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  unsigned int v17 = (char *)operator new(0x28uLL);
  uint64_t v18 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v17;
  qword_26AF27428 = (uint64_t)v17;
  qword_26AF27430 = (uint64_t)(v17 + 40);
  do
  {
    *(void *)&v17[v18 * 8] = (&v44)[v18];
    ++v18;
  }
  while (v18 != 5);
  qword_26AF27428 = (uint64_t)(v17 + 40);
  for (uint64_t j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF274B8 = 0;
  unk_26AF274C0 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  unsigned int v20 = operator new(0x50uLL);
  qword_26AF274B8 = (uint64_t)(v20 + 5);
  unk_26AF274C0 = v20 + 5;
  v20[2] = xmmword_237CB4850;
  v20[3] = unk_237CB4860;
  v20[4] = xmmword_237CB4870;
  *unsigned int v20 = xmmword_237CB4830;
  v20[1] = unk_237CB4840;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v20;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  unsigned __int16 v21 = v12;
  uint64_t v44 = v21;
  LODWORD(v45) = 1055286886;
  int v22 = v13;
  __int16 v46 = v22;
  LODWORD(v47) = 1039516303;
  unsigned int v23 = v14;
  uint64_t v48 = v23;
  LODWORD(v49) = 1045220557;
  unsigned int v24 = v15;
  uint64_t v50 = v24;
  LODWORD(v51) = 1050253722;
  std::vector<int> v25 = v16;
  unsigned int v52 = v25;
  LODWORD(v53) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v44, 5);
  for (uint64_t k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
  simd_float4 v27 = v21;
  uint64_t v44 = v27;
  LODWORD(v45) = 1050253722;
  __int16 v46 = v43;
  LODWORD(v47) = 1052602532;
  uint64_t v48 = v42;
  LODWORD(v49) = 1051260355;
  uint64_t v50 = v41;
  LODWORD(v51) = 1043878380;
  unsigned int v52 = v22;
  LODWORD(v53) = 1053273620;
  uint64_t v54 = v40;
  LODWORD(v55) = 1046562734;
  float32x4_t v56 = v39;
  LODWORD(v57) = 1051260355;
  float32x4_t v58 = v38;
  LODWORD(v59) = 1052266988;
  float32x4_t v60 = v23;
  LODWORD(v61) = 1053609165;
  char v62 = v37;
  LODWORD(v63) = 1050924810;
  float v64 = v36;
  int v65 = 1052266988;
  uint64_t v66 = v35;
  int v67 = 1050253722;
  uint64_t v68 = v34;
  int v69 = 1092616192;
  uint64_t v70 = v33;
  int v71 = 1049582633;
  float32x4_t v72 = v24;
  int v73 = 1050253722;
  unsigned __int16 v74 = v32;
  int v75 = 1054951342;
  float32x4_t v76 = v25;
  int v77 = 1052602532;
  std::vector<int>::pointer v78 = v31;
  int v79 = 1049582633;
  uint64_t v80 = v30;
  int v81 = 1092616192;
  double v82 = v5;
  int v83 = 1092616192;
  id v84 = v6;
  int v85 = 1092616192;
  for (uint64_t m = 40; m != -2; m -= 2)

  uint64_t v44 = v27;
  LODWORD(v45) = 1048576000;
}

void sub_237C3F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_237C3F40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3F634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL float3FromNSArray(void *a1, _OWORD *a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 count];
  if (v4 == 3)
  {
    unsigned __int16 v5 = [v3 objectAtIndexedSubscript:0];
    [v5 floatValue];
    *(void *)&long long v14 = v6;
    int v7 = [v3 objectAtIndexedSubscript:1];
    [v7 floatValue];
    int v13 = v8;
    uint64_t v9 = [v3 objectAtIndexedSubscript:2];
    [v9 floatValue];
    long long v10 = v14;
    DWORD1(v10) = v13;
    DWORD2(v10) = v11;
    *a2 = v10;
  }
  return v4 == 3;
}

void sub_237C3F74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3F8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3FA38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3FBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t box3dFromNSArray(NSArray *a1, box3d *a2)
{
  id v3 = a1;
  if ([(NSArray *)v3 count] == 8)
  {
    uint64_t v4 = 0;
    while (1)
    {
      unsigned __int16 v5 = [(NSArray *)v3 objectAtIndexedSubscript:v4];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0) {
        break;
      }
      int v7 = [(NSArray *)v3 objectAtIndexedSubscript:v4];
      BOOL v8 = float3FromNSArray(v7, a2);

      if (!v8) {
        break;
      }
      ++v4;
      a2 = (box3d *)((char *)a2 + 16);
      if (v4 == 8)
      {
        uint64_t v9 = 1;
        goto LABEL_8;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_8:

  return v9;
}

void sub_237C3FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3FE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C3FFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C4043C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isValidType(NSString *a1)
{
  uint64_t v1 = a1;
  {
    objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"Cabinet", @"Refrigerator", @"Shelf", @"Stove", @"Bed", @"Sink", @"Washer", @"Toilet", @"Bathtub", @"Oven", @"Dishwasher", @"Table", @"Sofa", @"Chair", @"Fireplace", @"Stool", @"Screen",
      @"Door",
      @"Window",
      @"Cuboid",
      @"Stairs",
      @"BuildInCabinet",
      @"Storage",
    isValidType(NSString *)::validTypes = 0);
  }
  uint64_t v2 = [(id)isValidType(NSString *)::validTypes containsObject:v1];

  return v2;
}

void sub_237C4064C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isValidODSourceType(NSString *a1)
{
  uint64_t v1 = a1;
  {
    isValidODSourceType(NSString *)::validTypes = objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"unknown", @"online", @"offline", 0);
  }
  uint64_t v2 = [(id)isValidODSourceType(NSString *)::validTypes containsObject:v1];

  return v2;
}

void sub_237C4071C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C408E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C40968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C40A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C40C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C40FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C41130(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_237C416EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSString>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C417F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSNumber>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C41868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSArray<NSNumber *>>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C418E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSArray<NSArray*<NSNumber *>>>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C41958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void float4FromNSArray(void *a1, _OWORD *a2)
{
  id v15 = a1;
  if ([v15 count] == 4)
  {
    id v3 = [v15 objectAtIndexedSubscript:0];
    [v3 floatValue];
    unsigned int v14 = v4;
    unsigned __int16 v5 = [v15 objectAtIndexedSubscript:1];
    [v5 floatValue];
    unsigned int v13 = v6;
    int v7 = [v15 objectAtIndexedSubscript:2];
    [v7 floatValue];
    unsigned int v12 = v8;
    uint64_t v9 = [v15 objectAtIndexedSubscript:3];
    [v9 floatValue];
    *(void *)&long long v10 = __PAIR64__(v13, v14);
    *((void *)&v10 + 1) = __PAIR64__(v11, v12);
    *a2 = v10;
  }
}

void sub_237C41A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  _Unwind_Resume(a1);
}

id objc_cast<NSMutableDictionary>(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_237C41B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C41C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C41D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t isValidGroupType(NSString *a1)
{
  id v1 = a1;
  {
    isValidGroupType(NSString *)::validTypes = objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"ChairGroup", @"LShapeGroup", @"UShapeGroup", @"FloorPlan", 0);
  }
  uint64_t v2 = [(id)isValidGroupType(NSString *)::validTypes containsObject:v1];

  return v2;
}

void sub_237C41DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C41F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_237C4206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C42268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C42370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C424E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C4258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C425FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id float3ToNSArray(__n128 a1)
{
  void v8[3] = *MEMORY[0x263EF8340];
  id v1 = objc_msgSend(NSNumber, "numberWithFloat:");
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  id v3 = [NSNumber numberWithFloat:v2];
  v8[1] = v3;
  unsigned int v4 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v8[2] = v4;
  unsigned __int16 v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  void v8[4];
  uint64_t vars8;

  void v8[3] = *MEMORY[0x263EF8340];
  id v1 = objc_msgSend(NSNumber, "numberWithFloat:");
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  id v3 = [NSNumber numberWithFloat:v2];
  v8[1] = v3;
  unsigned int v4 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v8[2] = v4;
  unsigned __int16 v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  void v8[4];
  uint64_t vars8;

  void v8[3] = *MEMORY[0x263EF8340];
  id v1 = objc_msgSend(NSNumber, "numberWithFloat:");
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  id v3 = [NSNumber numberWithFloat:v2];
  v8[1] = v3;
  unsigned int v4 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v8[2] = v4;
  unsigned __int16 v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  void v8[4];
  uint64_t vars8;

  void v8[3] = *MEMORY[0x263EF8340];
  id v1 = objc_msgSend(NSNumber, "numberWithFloat:");
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  id v3 = [NSNumber numberWithFloat:v2];
  v8[1] = v3;
  unsigned int v4 = objc_msgSend(NSNumber, "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v8[2] = v4;
  unsigned __int16 v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v8 count:3];

  return v5;
}

void sub_237C42944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SampleSemantics(uint64_t *a1@<X0>, void *a2@<X1>, __CVBuffer *a3@<X2>, __CVBuffer *a4@<X3>, void *a5@<X8>, simd_float4 a6@<Q0>, simd_float4 a7@<Q1>, simd_float4 a8@<Q2>, simd_float4 a9@<Q3>)
{
  v46.columns[2] = a8;
  v46.columns[3] = a9;
  v46.columns[0] = a6;
  v46.columns[1] = a7;
  id v13 = a2;
  [v13 intrinsics];
  float32x4_t v44 = v15;
  float32x4_t v45 = v14;
  float32x4_t v43 = v16;
  simd_float4x4 v55 = __invert_f4(v46);
  uint64_t v17 = 0;
  simd_float4x4 pixelBuffer = v46;
  do
  {
    v54.columns[v17] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v55.columns[0], COERCE_FLOAT(*(_OWORD *)&pixelBuffer.columns[v17])), (float32x4_t)v55.columns[1], *(float32x2_t *)pixelBuffer.columns[v17].f32, 1), (float32x4_t)v55.columns[2], (float32x4_t)pixelBuffer.columns[v17], 2), (float32x4_t)v55.columns[3], (float32x4_t)pixelBuffer.columns[v17], 3);
    ++v17;
  }
  while (v17 != 4);
  uint64_t v18 = 0;
  float32x4_t v20 = v44;
  float32x4_t v19 = v45;
  v19.i32[3] = 0;
  v20.i32[3] = 0;
  float32x4_t v21 = v43;
  v21.i32[3] = 0;
  simd_float4x4 pixelBuffer = v54;
  do
  {
    v54.columns[v18] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)&pixelBuffer.columns[v18])), v20, *(float32x2_t *)pixelBuffer.columns[v18].f32, 1), v21, (float32x4_t)pixelBuffer.columns[v18], 2), (float32x4_t)xmmword_237CB4480, (float32x4_t)pixelBuffer.columns[v18], 3);
    ++v18;
  }
  while (v18 != 4);
  float32x4_t v49 = (float32x4_t)v54.columns[1];
  float32x4_t v50 = (float32x4_t)v54.columns[0];
  float32x4_t v47 = (float32x4_t)v54.columns[3];
  float32x4_t v48 = (float32x4_t)v54.columns[2];
  int64_t Width = CVPixelBufferGetWidth(a3);
  int64_t Height = CVPixelBufferGetHeight(a3);
  [v13 imageResolution];
  double v25 = v24;
  [v13 imageResolution];
  double v27 = v26;
  PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&v54, a3);
  PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&pixelBuffer, a4);
  uint64_t v29 = *a1;
  uint64_t v28 = a1[1];
  unint64_t v30 = (v28 - *a1) >> 4;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(v52, v30);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(__p, v30);
  if (v28 != v29)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v30 <= 1) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = v30;
    }
    do
    {
      float32x4_t v38 = vaddq_f32(v47, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)(*a1 + v33))), v49, *(float32x2_t *)(*a1 + v33), 1), v48, *(float32x4_t *)(*a1 + v33), 2));
      float32x2_t v39 = (float32x2_t)vdivq_f32(v38, (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2)).u64[0];
      float v35 = (double)Width / v25;
      unsigned int v40 = vcvtms_s32_f32(v35 * v39.f32[0]);
      float v41 = 0.0;
      char v42 = 0;
      if ((v40 & 0x80000000) == 0)
      {
        float v36 = (double)Height / v27;
        LODWORD(v31) = vcvtms_s32_f32(vmuls_lane_f32(v36, v39, 1));
        if (v54.columns[0].i32[2] > (int)v40 && (v31 & 0x80000000) == 0 && v54.columns[0].i32[3] > (int)v31) {
          char v42 = *(unsigned char *)(v54.columns[1].i64[1] + v54.columns[1].i64[0] * v31 + v40);
        }
        if (pixelBuffer.columns[0].i32[2] > (int)v40
          && (v31 & 0x80000000) == 0
          && pixelBuffer.columns[0].i32[3] > (int)v31)
        {
          uint64_t v31 = pixelBuffer.columns[1].i64[1] + pixelBuffer.columns[1].i64[0] * v31;
          float v41 = *(float *)(v31 + 4 * v40);
        }
      }
      *((unsigned char *)v52[0] + v32) = v42;
      v39.i32[0] = *(_DWORD *)((char *)v52[0] + v32);
      *(_DWORD *)((char *)v52[0] + v32) = vmovn_s16((int16x8_t)vmovl_u8((uint8x8_t)v39).u16[0]).u32[0];
      *((_WORD *)__p[0] + v32) = (int)(float)(v41 * 100.0);
      *((int8x8_t *)__p[0] + v34) = vand_s8(*(int8x8_t *)((char *)__p[0] + 8 * v34), (int8x8_t)0xFFFF00000000FFFFLL);
      *((_WORD *)__p[0] + v32 + 3) = (int)(float)((float)(1.0 - v41) * 100.0);
      ++v34;
      v33 += 16;
      v32 += 4;
      --v37;
    }
    while (v37);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIDv4_hNS_9allocatorIS4_EEEENS3_IDv4_tNS5_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJRS7_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a5, (uint64_t)v52, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)pixelBuffer.columns[0].i64[0], 1uLL);
  CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v54.columns[0].i64[0], 1uLL);
}

void sub_237C42CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,CVPixelBufferRef a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  PixelBufferSampler<float>::~PixelBufferSampler(&a29);
  PixelBufferSampler<unsigned char>::~PixelBufferSampler((CVPixelBufferRef *)(v30 - 160));

  _Unwind_Resume(a1);
}

void WorldPCFromARFrameSceneCamera(_OUFrame *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  float32x4_t v16 = a1;
  [(_OUFrame *)v16 GetSceneCameraPoseInVisionWorld];
  float32x4_t v14 = v7;
  float32x4_t v15 = v6;
  float32x4_t v12 = v9;
  float32x4_t v13 = v8;
  CameraPCFromARFrameSceneCamera(v16, a2, (void **)a3);
  long long v10 = *(float32x2_t **)a3;
  unsigned int v11 = *(float32x2_t **)(a3 + 8);
  if (*(float32x2_t **)a3 != v11)
  {
    do
    {
      *(float32x4_t *)v10->f32 = vaddq_f32(v12, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v10->f32)), v14, *v10, 1), v13, *(float32x4_t *)v10->f32, 2));
      v10 += 2;
    }
    while (v10 != v11);
  }
}

void sub_237C42DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CameraPCFromARFrameSceneCamera(void *a1@<X0>, unsigned int a2@<W1>, void **a3@<X8>)
{
  id v5 = a1;
  float32x4_t v6 = (__CVBuffer *)[v5 sceneDepthBuffer];
  float32x4_t v7 = (__CVBuffer *)[v5 sceneDepthConfidenceBuffer];
  float32x4_t v8 = [v5 sceneCamera];
  int64_t Width = CVPixelBufferGetWidth(v6);
  int64_t Height = CVPixelBufferGetHeight(v6);
  if (Width && Height && (!v7 || (v10 = CVPixelBufferGetWidth(v7), size_t v11 = CVPixelBufferGetHeight(v7), v10) && v11))
  {
    [v8 intrinsics];
    v51.columns[0].i32[3] = 0;
    v51.columns[1].i32[3] = 0;
    v51.columns[2].i32[3] = 0;
    v51.columns[3] = (simd_float4)xmmword_237CB4480;
    simd_float4x4 v52 = __invert_f4(v51);
    float32x4_t v44 = (float32x4_t)v52.columns[1];
    float32x4_t v45 = (float32x4_t)v52.columns[0];
    float32x4_t v42 = (float32x4_t)v52.columns[3];
    float32x4_t v43 = (float32x4_t)v52.columns[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(a3, Height / a2 * (Width / a2));
    PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&pixelBuffer, v6);
    if (v7) {
      operator new();
    }
    [v8 imageResolution];
    double v13 = v12;
    id v39 = v5;
    [v8 imageResolution];
    unint64_t v14 = 0;
    float v15 = v13 / (double)Width;
    *(float *)&double v16 = v16 / (double)Height;
    double v17 = *(float *)&v16;
    double v18 = v15;
    do
    {
      unint64_t v19 = 0;
      uint64_t v20 = (int)(float)v14;
      do
      {
        int v22 = (int)(float)v19;
        float v23 = 0.0;
        if ((v22 & 0x80000000) == 0 && v47 > v22 && (v20 & 0x80000000) == 0 && v48 > (int)v20) {
          float v23 = *(float *)(v50 + v49 * v20 + 4 * v22);
        }
        float v24 = ((double)v19 + 0.5) * v18;
        float v21 = ((double)v14 + 0.5) * v17;
        float32x4_t v25 = vaddq_f32(v42, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v45, v23 * v24), v44, v23 * v21), v43, v23));
        double v27 = (float32x4_t *)a3[1];
        unint64_t v26 = (unint64_t)a3[2];
        if ((unint64_t)v27 >= v26)
        {
          float32x4_t v41 = v25;
          uint64_t v29 = ((char *)v27 - (unsigned char *)*a3) >> 4;
          if ((unint64_t)(v29 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v26 - (void)*a3;
          uint64_t v31 = v30 >> 3;
          if (v30 >> 3 <= (unint64_t)(v29 + 1)) {
            uint64_t v31 = v29 + 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            uint64_t v33 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v32);
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = (float32x4_t *)&v33[16 * v29];
          *uint64_t v34 = v41;
          uint64_t v28 = (char *)&v34[1];
          float v36 = (char *)*a3;
          float v35 = (char *)a3[1];
          if (v35 != *a3)
          {
            do
            {
              float32x4_t v37 = *((float32x4_t *)v35 - 1);
              v35 -= 16;
              v34[-1] = v37;
              --v34;
            }
            while (v35 != v36);
            float v35 = (char *)*a3;
          }
          *a3 = v34;
          a3[1] = v28;
          a3[2] = &v33[16 * v32];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *double v27 = v25;
          uint64_t v28 = (char *)&v27[1];
        }
        a3[1] = v28;
        v19 += a2;
      }
      while (v19 < Width);
      v14 += a2;
    }
    while (v14 < Height);
    id v5 = v39;
    if (a3[1] == *a3)
    {
      float32x4_t v38 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
        CameraPCFromARFrameSceneCamera(v38);
      }
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_237C431B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  MEMORY[0x237E2C510](v19, 0x1070C4075EB0837);
  PixelBufferSampler<float>::~PixelBufferSampler((CVPixelBufferRef *)va);
  float v21 = *(void **)v18;
  if (*(void *)v18)
  {
    *(void *)(v18 + 8) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIDv4_hNS_9allocatorIS4_EEEENS3_IDv4_tNS5_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJRS7_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return a1;
}

void sub_237C432B4(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float32x4_t v6 = result;
    BOOL result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C43330(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float32x4_t v6 = result;
    BOOL result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C433AC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferSampler<unsigned char>::PixelBufferSampler(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  *(void *)a1 = pixelBuffer;
  *(_DWORD *)(a1 + 8) = CVPixelBufferGetWidth(pixelBuffer);
  *(_DWORD *)(a1 + 12) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)a1);
  *(void *)(a1 + 16) = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)a1);
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, 1uLL);
  *(void *)(a1 + 24) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)a1);
  return a1;
}

CVPixelBufferRef *PixelBufferSampler<unsigned char>::~PixelBufferSampler(CVPixelBufferRef *a1)
{
  return a1;
}

CVPixelBufferRef *PixelBufferSampler<float>::~PixelBufferSampler(CVPixelBufferRef *a1)
{
  return a1;
}

void sub_237C4351C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C43684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C43804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C439C4(_Unwind_Exception *a1)
{
  if (v2) {

  }
  _Unwind_Resume(a1);
}

void sub_237C43AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C43D18(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void float3FromNSArray(void *a1, _OWORD *a2)
{
  id v12 = a1;
  if ([v12 count] == 3)
  {
    id v3 = [v12 objectAtIndexedSubscript:0];
    [v3 floatValue];
    *(void *)&long long v11 = v4;
    id v5 = [v12 objectAtIndexedSubscript:1];
    [v5 floatValue];
    int v10 = v6;
    uint64_t v7 = [v12 objectAtIndexedSubscript:2];
    [v7 floatValue];
    long long v8 = v11;
    DWORD1(v8) = v10;
    DWORD2(v8) = v9;
    *a2 = v8;
  }
}

void sub_237C43E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

_DWORD *utils::RotateInPlace<int,void>(_DWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 != a3 * a3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3) {
    return result;
  }
  if (a4 <= 179)
  {
    if (!a4) {
      return result;
    }
    if (a4 == 90)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 4 * a3;
      int v6 = result;
      do
      {
        uint64_t v7 = 0;
        long long v8 = v6;
        do
        {
          int v9 = v6[v7];
          v6[v7] = *v8;
          _DWORD *v8 = v9;
          ++v7;
          long long v8 = (_DWORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (uint64_t i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          unint64_t v11 = 0;
          unint64_t v12 = a3 - 1;
          do
          {
            int v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        BOOL result = (_DWORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    uint64_t v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      float32x4_t v25 = &result[v24];
      unint64_t v26 = result;
      do
      {
        for (uint64_t j = 0; j != a3; ++j)
        {
          int v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (uint64_t k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        unint64_t v30 = 0;
        unint64_t v31 = a3 - 1;
        do
        {
          int v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 4 * a3;
    double v16 = result;
    do
    {
      if (a3 != 1)
      {
        unint64_t v17 = 0;
        unint64_t v18 = a3 - 1;
        do
        {
          int v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      double v16 = (_DWORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (uint64_t m = 0; m != a3; ++m)
    {
      uint64_t v21 = 0;
      int v22 = result;
      do
      {
        int v23 = result[v21];
        result[v21] = *v22;
        *int v22 = v23;
        ++v21;
        int v22 = (_DWORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      BOOL result = (_DWORD *)((char *)result + v15 + 4);
    }
  }
  return result;
}

void sub_237C44290(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *utils::RotateInPlace<float,void>(_DWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 != a3 * a3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3) {
    return result;
  }
  if (a4 <= 179)
  {
    if (!a4) {
      return result;
    }
    if (a4 == 90)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 4 * a3;
      int v6 = result;
      do
      {
        uint64_t v7 = 0;
        long long v8 = v6;
        do
        {
          int v9 = v6[v7];
          v6[v7] = *v8;
          _DWORD *v8 = v9;
          ++v7;
          long long v8 = (_DWORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (uint64_t i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          unint64_t v11 = 0;
          unint64_t v12 = a3 - 1;
          do
          {
            int v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        BOOL result = (_DWORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    uint64_t v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      float32x4_t v25 = &result[v24];
      unint64_t v26 = result;
      do
      {
        for (uint64_t j = 0; j != a3; ++j)
        {
          int v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (uint64_t k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        unint64_t v30 = 0;
        unint64_t v31 = a3 - 1;
        do
        {
          int v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 4 * a3;
    double v16 = result;
    do
    {
      if (a3 != 1)
      {
        unint64_t v17 = 0;
        unint64_t v18 = a3 - 1;
        do
        {
          int v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      double v16 = (_DWORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (uint64_t m = 0; m != a3; ++m)
    {
      uint64_t v21 = 0;
      int v22 = result;
      do
      {
        int v23 = result[v21];
        result[v21] = *v22;
        *int v22 = v23;
        ++v21;
        int v22 = (_DWORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      BOOL result = (_DWORD *)((char *)result + v15 + 4);
    }
  }
  return result;
}

void sub_237C44508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *utils::RotateInPlace<half,void>(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 != a3 * a3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3) {
    return result;
  }
  if (a4 <= 179)
  {
    if (!a4) {
      return result;
    }
    if (a4 == 90)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 2 * a3;
      int v6 = result;
      do
      {
        uint64_t v7 = 0;
        long long v8 = v6;
        do
        {
          __int16 v9 = v6[v7];
          v6[v7] = *v8;
          _WORD *v8 = v9;
          ++v7;
          long long v8 = (_WORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (uint64_t i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          unint64_t v11 = 0;
          unint64_t v12 = a3 - 1;
          do
          {
            __int16 v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        BOOL result = (_WORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    uint64_t v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      float32x4_t v25 = &result[v24];
      unint64_t v26 = result;
      do
      {
        for (uint64_t j = 0; j != a3; ++j)
        {
          __int16 v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (uint64_t k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        unint64_t v30 = 0;
        unint64_t v31 = a3 - 1;
        do
        {
          __int16 v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 2 * a3;
    double v16 = result;
    do
    {
      if (a3 != 1)
      {
        unint64_t v17 = 0;
        unint64_t v18 = a3 - 1;
        do
        {
          __int16 v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      double v16 = (_WORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (uint64_t m = 0; m != a3; ++m)
    {
      uint64_t v21 = 0;
      int v22 = result;
      do
      {
        __int16 v23 = result[v21];
        result[v21] = *v22;
        *int v22 = v23;
        ++v21;
        int v22 = (_WORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      BOOL result = (_WORD *)((char *)result + v15 + 2);
    }
  }
  return result;
}

void sub_237C44780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void utils::Resample(utils *this@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  if ((unint64_t)this <= a2)
  {
    std::vector<unsigned long>::vector(a3, (unint64_t)this);
    uint64_t v20 = *a3;
    uint64_t v21 = a3[1];
    if (*a3 != v21)
    {
      uint64_t v22 = 0;
      do
        *v20++ = v22++;
      while (v20 != v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<unsigned long>::reserve(a3, a2);
    if ((int)this >= 1)
    {
      uint64_t v6 = 0;
      int v7 = -1;
      do
      {
        int v8 = (int)(float)((float)((float)a2 / (float)(unint64_t)this) * (float)(int)v6);
        if (v7 < v8)
        {
          int v10 = a3[1];
          unint64_t v9 = (unint64_t)a3[2];
          if ((unint64_t)v10 >= v9)
          {
            unint64_t v12 = *a3;
            uint64_t v13 = ((char *)v10 - (unsigned char *)*a3) >> 3;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v15 = v9 - (void)v12;
            if (v15 >> 2 > v14) {
              unint64_t v14 = v15 >> 2;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              unint64_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v16);
              unint64_t v12 = *a3;
              int v10 = a3[1];
            }
            else
            {
              unint64_t v17 = 0;
            }
            unint64_t v18 = &v17[8 * v13];
            *(void *)unint64_t v18 = v6;
            unint64_t v11 = v18 + 8;
            while (v10 != v12)
            {
              uint64_t v19 = *--v10;
              *((void *)v18 - 1) = v19;
              v18 -= 8;
            }
            *a3 = v18;
            a3[1] = v11;
            a3[2] = &v17[8 * v16];
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            void *v10 = v6;
            unint64_t v11 = v10 + 1;
          }
          a3[1] = v11;
        }
        ++v6;
        int v7 = v8;
      }
      while (v6 != this);
    }
  }
}

void sub_237C44920(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<int>>::~vector[abi:ne180100](void **a1)
{
  id v3 = a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_237C44AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C45084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_237C45724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_237C45E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_237C46258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void CountPointsNearPlane(void *a1@<X0>, float32x4_t **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  id v9 = a1;
  id v10 = a3;
  unint64_t v11 = v10;
  if ((char *)a2[1] - (char *)*a2 == 64)
  {
    unint64_t v12 = (float32x4_t *)[v10 points];
    uint64_t v13 = (__int32 *)[v11 semanticLabels];
    simd_float4x4 v54 = (_DWORD *)a4;
    uint64_t v14 = [v11 semanticVotes];
    int v55 = 0;
    uint64_t v56 = 0;
    int v15 = 0;
    int v16 = 0;
    unint64_t v17 = 0;
    float32x4_t v18 = **a2;
    float32x4_t v19 = (*a2)[1];
    float32x4_t v20 = vsubq_f32(v19, v18);
    int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    float32x2_t v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    float32x4_t v24 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    float32x4_t v25 = (*a2)[3];
    float32x4_t v26 = vsubq_f32(v25, v18);
    int32x4_t v27 = (int32x4_t)vmulq_f32(v26, v26);
    v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
    float32x2_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    float32x2_t v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
    float32x4_t v60 = vmulq_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
    float32x4_t v61 = v24;
    int32x4_t v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL), vnegq_f32(v24)), v60, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    float32x4_t v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
    float32x4_t v31 = vsubq_f32(v18, v19);
    float32x4_t v32 = vmulq_f32(v31, v31);
    float v33 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0])* 0.5)+ a5;
    float32x4_t v34 = vsubq_f32(v18, v25);
    float32x4_t v35 = vmulq_f32(v34, v34);
    float v36 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0])* 0.5)+ a5;
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    float32x4_t v58 = vmulq_f32(vaddq_f32(v18, (*a2)[2]), v35);
    while (1)
    {
      if (v17 >= [v11 count])
      {
        *simd_float4x4 v54 = v55;
        v54[1] = v56;
        v54[2] = v15;
        v54[3] = v16;
        v54[4] = HIDWORD(v56);
        goto LABEL_38;
      }
      float32x4_t v37 = vsubq_f32(*v12, v58);
      float32x4_t v38 = vmulq_f32(v61, v37);
      float32x4_t v39 = vmulq_f32(v60, v37);
      float32x4_t v40 = vmulq_f32(v59, v37);
      float v41 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
      unint64_t v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      float v43 = fabsf(*(float *)&v42);
      BOOL v44 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]) > v33|| v41 > v36;
      if (!v44 && v43 <= a5) {
        break;
      }
LABEL_34:
      ++v17;
      ++v12;
      ++v13;
    }
    int32x2_t v46 = *(int32x2_t *)(v14 + 8 * v17);
    unsigned __int32 v47 = vmax_u16((uint16x4_t)v46.u32[0], (uint16x4_t)vzip2_s32(v46, 0)).u32[0];
    if (HIWORD(v47) > (unsigned __int16)v47) {
      LOWORD(v47) = HIWORD(v47);
    }
    double v57 = *(double *)&v42;
    if (v46.u16[0] == (unsigned __int16)v47)
    {
      uint64_t v48 = 0;
    }
    else if (v46.u16[1] == (unsigned __int16)v47)
    {
      uint64_t v48 = 1;
    }
    else if (v46.u16[2] == (unsigned __int16)v47)
    {
      uint64_t v48 = 2;
    }
    else
    {
      if (v46.u16[3] != (unsigned __int16)v47)
      {
        int v49 = *v13;
        goto LABEL_22;
      }
      uint64_t v48 = 3;
    }
    v46.i32[0] = *v13;
    int8x8_t v62 = vzip1_s8((int8x8_t)v46, (int8x8_t)v46);
    int v49 = *(unsigned __int8 *)((unint64_t)&v62 | (2 * v48));
LABEL_22:
    v63[0] = v49;
    uint64_t v50 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSemanticsODLabelMap, v63);
    if (!v50) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    id v51 = (id)v50[3];
    if (*(float *)&v57 >= 0.0)
    {
      if (objc_msgSend(v9, "isEqualToString:", v51, v57))
      {
        ++v55;
        *(_OWORD *)([v11 colors] + 16 * v17) = xmmword_237CB48E0;
      }
      ++v15;
    }
    else
    {
      if (objc_msgSend(v9, "isEqualToString:", v51, v57))
      {
        LODWORD(v56) = v56 + 1;
        *(_OWORD *)([v11 colors] + 16 * v17) = xmmword_237CB4490;
      }
      else
      {
        v52.i32[0] = *v13;
        int v53 = HIDWORD(v56);
        if ((vmovl_u8(v52).u8[0] - 1) < 3u) {
          int v53 = HIDWORD(v56) + 1;
        }
        HIDWORD(v56) = v53;
      }
      ++v16;
    }

    goto LABEL_34;
  }
  *(void *)a4 = -1;
  *(void *)(a4 + 8) = -1;
  *(_DWORD *)(a4 + 16) = -1;
LABEL_38:
}

void sub_237C466B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  id v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_237C46788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void _GLOBAL__sub_I_OUObjectCompleteness_mm()
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  uint64_t v50 = 3212836864;
  RW_VW = xmmword_237CB4490;
  *(_OWORD *)algn_26AF277B0 = xmmword_237CB44C0;
  *((void *)&v51 + 1) = 0x3F80000000000000;
  xmmword_26AF277C0 = xmmword_237CB44A0;
  unk_26AF277D0 = xmmword_237CB4480;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_0);
  RC_VC = xmmword_237CB4490;
  *(_OWORD *)algn_26AF27030 = xmmword_237CB44D0;
  xmmword_26AF27040 = xmmword_237CB44C0;
  unk_26AF27050 = xmmword_237CB4480;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_26);
  ARKit_VW_RW = xmmword_237CB44D0;
  unk_26AF268C0 = xmmword_237CB44B0;
  xmmword_26AF268D0 = xmmword_237CB44E0;
  unk_26AF268E0 = xmmword_237CB4480;
  LODWORD(v54) = 0;
  *((void *)&v54 + 1) = @"Unknown";
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = *((id *)&v54 + 1);
  LODWORD(v56) = 2;
  *((void *)&v56 + 1) = *((id *)&v55 + 1);
  LODWORD(v57) = 3;
  *((void *)&v57 + 1) = *((id *)&v56 + 1);
  LODWORD(v58) = 4;
  *((void *)&v58 + 1) = *((id *)&v57 + 1);
  LODWORD(v59) = 5;
  *((void *)&v59 + 1) = *((id *)&v58 + 1);
  LODWORD(v60) = 6;
  *(void *)&long long v51 = @"Door";
  *((void *)&v60 + 1) = v51;
  LODWORD(v61) = 7;
  int v49 = @"Window";
  *((void *)&v61 + 1) = v49;
  LODWORD(v62) = 8;
  *((void *)&v62 + 1) = *((id *)&v59 + 1);
  LODWORD(v63) = 9;
  unsigned __int32 v47 = @"Fireplace";
  *((void *)&v63 + 1) = v47;
  LODWORD(v64) = 10;
  *((void *)&v64 + 1) = *((id *)&v62 + 1);
  LODWORD(v65) = 11;
  *((void *)&v65 + 1) = *((id *)&v64 + 1);
  LODWORD(v66) = 12;
  uint64_t v48 = @"Stairs";
  *((void *)&v66 + 1) = v48;
  LODWORD(v67) = 13;
  float v43 = @"Bed";
  *((void *)&v67 + 1) = v43;
  LODWORD(v68) = 14;
  int v69 = @"Cabinet";
  LODWORD(v70) = 15;
  int32x2_t v46 = @"Chair";
  int v71 = v46;
  LODWORD(v72) = 16;
  int v73 = v69;
  LODWORD(v74) = 17;
  int v75 = v73;
  int v76 = 18;
  float32x4_t v45 = @"Sofa";
  int v77 = v45;
  int v78 = 19;
  BOOL v44 = @"Table";
  int v79 = v44;
  int v80 = 20;
  unint64_t v42 = @"Toilet";
  int v81 = v42;
  int v82 = 21;
  v0 = @"Sink";
  int v83 = v0;
  int v84 = 22;
  float v41 = @"Bathtub";
  int v85 = v41;
  int v86 = 23;
  id v87 = *((id *)&v65 + 1);
  int v88 = 24;
  uint64_t v1 = @"Refrigerator";
  float v89 = v1;
  int v90 = 25;
  uint64_t v2 = @"Stove";
  uint64_t v91 = v2;
  int v92 = 26;
  uint64_t v3 = @"Washer";
  float16x4_t v93 = v3;
  int v94 = 27;
  uint64_t v4 = @"Oven";
  float32x4_t v95 = v4;
  int v96 = 28;
  uint64_t v5 = @"Dishwasher";
  long long v97 = v5;
  int v98 = 29;
  id v99 = v87;
  int v100 = 30;
  uint64_t v6 = v75;
  unint64_t v101 = v6;
  int v102 = 31;
  id v103 = v99;
  int v104 = 32;
  int v7 = @"Screen";
  float v105 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)kSemanticsODLabelMap, (int *)&v54, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], kSemanticsODLabelMap, &dword_237C17000);
  long long v64 = xmmword_237CB4A40;
  long long v65 = unk_237CB4A50;
  long long v66 = xmmword_237CB4A60;
  long long v67 = unk_237CB4A70;
  long long v60 = xmmword_237CB4A00;
  long long v61 = unk_237CB4A10;
  long long v62 = xmmword_237CB4A20;
  long long v63 = unk_237CB4A30;
  long long v56 = xmmword_237CB49C0;
  long long v57 = unk_237CB49D0;
  long long v58 = xmmword_237CB49E0;
  long long v59 = unk_237CB49F0;
  long long v54 = xmmword_237CB49A0;
  long long v55 = unk_237CB49B0;
  uint64_t v68 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v54, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v54) = 0;
  *((void *)&v54 + 1) = v6;
  LODWORD(v55) = 1;
  *((void *)&v55 + 1) = v1;
  LODWORD(v56) = 2;
  *((void *)&v56 + 1) = @"Shelf";
  LODWORD(v57) = 3;
  *((void *)&v57 + 1) = v2;
  LODWORD(v58) = 4;
  *((void *)&v58 + 1) = v43;
  LODWORD(v59) = 5;
  *((void *)&v59 + 1) = v0;
  LODWORD(v60) = 6;
  *((void *)&v60 + 1) = v3;
  LODWORD(v61) = 7;
  *((void *)&v61 + 1) = v42;
  LODWORD(v62) = 8;
  *((void *)&v62 + 1) = v41;
  LODWORD(v63) = 9;
  *((void *)&v63 + 1) = v4;
  LODWORD(v64) = 10;
  *((void *)&v64 + 1) = v5;
  LODWORD(v65) = 11;
  *((void *)&v65 + 1) = v47;
  LODWORD(v66) = 12;
  *((void *)&v66 + 1) = @"Stool";
  LODWORD(v67) = 13;
  *((void *)&v67 + 1) = v46;
  LODWORD(v68) = 14;
  int v69 = v44;
  LODWORD(v70) = 15;
  int v71 = v7;
  LODWORD(v72) = 16;
  int v73 = v45;
  LODWORD(v74) = 17;
  int v75 = v48;
  int v76 = 18;
  int v77 = v49;
  int v78 = 19;
  int v79 = (__CFString *)(id)v51;
  int v80 = 20;
  int v81 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v54, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
  id v10 = operator new(0x10uLL);
  *(void *)&long long v54 = v10;
  long long v51 = xmmword_237CB48F0;
  _OWORD *v10 = xmmword_237CB48F0;
  *((void *)&v54 + 1) = v10 + 1;
  long long v55 = (unint64_t)(v10 + 1);
  long long v56 = 0uLL;
  unint64_t v11 = operator new(0x10uLL);
  *((void *)&v55 + 1) = v11;
  *unint64_t v11 = xmmword_237CB4900;
  *(void *)&long long v56 = v11 + 1;
  *((void *)&v56 + 1) = v11 + 1;
  long long v57 = 0uLL;
  *(void *)&long long v58 = 0;
  unint64_t v12 = operator new(0x10uLL);
  *(void *)&long long v57 = v12;
  _OWORD *v12 = xmmword_237CB4910;
  *((void *)&v57 + 1) = v12 + 1;
  long long v58 = (unint64_t)(v12 + 1);
  long long v59 = 0uLL;
  uint64_t v13 = operator new(0x10uLL);
  *((void *)&v58 + 1) = v13;
  *uint64_t v13 = xmmword_237CB4920;
  *(void *)&long long v59 = v13 + 1;
  *((void *)&v59 + 1) = v13 + 1;
  long long v60 = 0uLL;
  *(void *)&long long v61 = 0;
  uint64_t v14 = operator new(0x10uLL);
  *(void *)&long long v60 = v14;
  _OWORD *v14 = xmmword_237CB4930;
  *((void *)&v60 + 1) = v14 + 1;
  long long v61 = (unint64_t)(v14 + 1);
  long long v62 = 0uLL;
  int v15 = operator new(0x10uLL);
  *((void *)&v61 + 1) = v15;
  *int v15 = xmmword_237CB4940;
  *(void *)&long long v62 = v15 + 1;
  *((void *)&v62 + 1) = v15 + 1;
  qword_26AF26B50 = 0;
  qword_26AF26B58 = 0;
  kFaceCornerIndicesMap = 0;
  uint8x8_t v52 = &kFaceCornerIndicesMap;
  char v53 = 0;
  kFaceCornerIndicesMap = (uint64_t)operator new(0x90uLL);
  qword_26AF26B50 = kFaceCornerIndicesMap;
  qword_26AF26B58 = kFaceCornerIndicesMap + 144;
  uint64_t v16 = 0;
  qword_26AF26B50 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_26AF26B58, (uint64_t)&v54, (uint64_t)&v63, (void *)kFaceCornerIndicesMap);
  do
  {
    unint64_t v17 = *(void **)((char *)&v61 + v16 + 8);
    if (v17)
    {
      *(void *)((char *)&v62 + v16) = v17;
      operator delete(v17);
    }
    v16 -= 24;
  }
  while (v16 != -144);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kFaceCornerIndicesMap, &dword_237C17000);
  float32x4_t v18 = operator new(0x10uLL);
  *(void *)&long long v54 = v18;
  *float32x4_t v18 = v51;
  *((void *)&v54 + 1) = v18 + 1;
  long long v55 = (unint64_t)(v18 + 1);
  long long v56 = 0uLL;
  float32x4_t v19 = operator new(0x10uLL);
  *((void *)&v55 + 1) = v19;
  *float32x4_t v19 = xmmword_237CB4950;
  *(void *)&long long v56 = v19 + 1;
  *((void *)&v56 + 1) = v19 + 1;
  long long v57 = 0uLL;
  *(void *)&long long v58 = 0;
  float32x4_t v20 = operator new(0x10uLL);
  *(void *)&long long v57 = v20;
  *float32x4_t v20 = xmmword_237CB4960;
  *((void *)&v57 + 1) = v20 + 1;
  long long v58 = (unint64_t)(v20 + 1);
  long long v59 = 0uLL;
  int32x4_t v21 = operator new(0x10uLL);
  *((void *)&v58 + 1) = v21;
  _OWORD *v21 = xmmword_237CB4970;
  *(void *)&long long v59 = v21 + 1;
  *((void *)&v59 + 1) = v21 + 1;
  long long v60 = 0uLL;
  *(void *)&long long v61 = 0;
  float32x2_t v22 = operator new(0x10uLL);
  *(void *)&long long v60 = v22;
  *float32x2_t v22 = xmmword_237CB4980;
  *((void *)&v60 + 1) = v22 + 1;
  long long v61 = (unint64_t)(v22 + 1);
  long long v62 = 0uLL;
  float32x2_t v23 = operator new(0x10uLL);
  *((void *)&v61 + 1) = v23;
  *float32x2_t v23 = xmmword_237CB4990;
  *(void *)&long long v62 = v23 + 1;
  *((void *)&v62 + 1) = v23 + 1;
  qword_26AF26998 = 0;
  qword_26AF269A0 = 0;
  kFaceEdgeIndicesMap = 0;
  uint8x8_t v52 = &kFaceEdgeIndicesMap;
  char v53 = 0;
  kFaceEdgeIndicesMap = (uint64_t)operator new(0x90uLL);
  qword_26AF26998 = kFaceEdgeIndicesMap;
  qword_26AF269A0 = kFaceEdgeIndicesMap + 144;
  uint64_t v24 = 0;
  qword_26AF26998 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_26AF269A0, (uint64_t)&v54, (uint64_t)&v63, (void *)kFaceEdgeIndicesMap);
  do
  {
    float32x4_t v25 = *(void **)((char *)&v61 + v24 + 8);
    if (v25)
    {
      *(void *)((char *)&v62 + v24) = v25;
      operator delete(v25);
    }
    v24 -= 24;
  }
  while (v24 != -144);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kFaceEdgeIndicesMap, &dword_237C17000);
  float32x4_t v26 = operator new(8uLL);
  *(void *)&long long v54 = v26;
  *float32x4_t v26 = 0x100000000;
  *((void *)&v54 + 1) = v26 + 1;
  long long v55 = (unint64_t)(v26 + 1);
  long long v56 = 0uLL;
  int32x4_t v27 = operator new(8uLL);
  *((void *)&v55 + 1) = v27;
  *int32x4_t v27 = 0x200000000;
  *(void *)&long long v56 = v27 + 1;
  *((void *)&v56 + 1) = v27 + 1;
  long long v57 = 0uLL;
  *(void *)&long long v58 = 0;
  float32x2_t v28 = operator new(8uLL);
  *(void *)&long long v57 = v28;
  void *v28 = 0x300000000;
  *((void *)&v57 + 1) = v28 + 1;
  long long v58 = (unint64_t)(v28 + 1);
  long long v59 = 0uLL;
  float32x2_t v29 = operator new(8uLL);
  *((void *)&v58 + 1) = v29;
  void *v29 = 0x400000000;
  *(void *)&long long v59 = v29 + 1;
  *((void *)&v59 + 1) = v29 + 1;
  long long v60 = 0uLL;
  *(void *)&long long v61 = 0;
  int32x4_t v30 = operator new(8uLL);
  *(void *)&long long v60 = v30;
  void *v30 = 0x100000004;
  *((void *)&v60 + 1) = v30 + 1;
  long long v61 = (unint64_t)(v30 + 1);
  long long v62 = 0uLL;
  float32x4_t v31 = operator new(8uLL);
  *((void *)&v61 + 1) = v31;
  void *v31 = 0x200000001;
  *(void *)&long long v62 = v31 + 1;
  *((void *)&v62 + 1) = v31 + 1;
  long long v63 = 0uLL;
  *(void *)&long long v64 = 0;
  float32x4_t v32 = operator new(8uLL);
  *(void *)&long long v63 = v32;
  void *v32 = 0x300000002;
  *((void *)&v63 + 1) = v32 + 1;
  long long v64 = (unint64_t)(v32 + 1);
  long long v65 = 0uLL;
  float v33 = operator new(8uLL);
  *((void *)&v64 + 1) = v33;
  *float v33 = 0x400000003;
  *(void *)&long long v65 = v33 + 1;
  *((void *)&v65 + 1) = v33 + 1;
  long long v66 = 0uLL;
  *(void *)&long long v67 = 0;
  float32x4_t v34 = operator new(8uLL);
  *(void *)&long long v66 = v34;
  *float32x4_t v34 = 0x500000001;
  *((void *)&v66 + 1) = v34 + 1;
  long long v67 = (unint64_t)(v34 + 1);
  uint64_t v68 = 0;
  int v69 = 0;
  float32x4_t v35 = operator new(8uLL);
  *((void *)&v67 + 1) = v35;
  void *v35 = 0x500000002;
  uint64_t v68 = (uint64_t)(v35 + 1);
  int v69 = (__CFString *)(v35 + 1);
  uint64_t v70 = 0;
  int v71 = 0;
  float32x4_t v72 = 0;
  float v36 = operator new(8uLL);
  uint64_t v70 = v36;
  void *v36 = 0x500000003;
  int v71 = (__CFString *)(v36 + 1);
  float32x4_t v72 = v36 + 1;
  int v73 = 0;
  unsigned __int16 v74 = 0;
  int v75 = 0;
  float32x4_t v37 = operator new(8uLL);
  int v73 = (__CFString *)v37;
  void *v37 = 0x500000004;
  unsigned __int16 v74 = v37 + 1;
  int v75 = (__CFString *)(v37 + 1);
  qword_26AF26980 = 0;
  qword_26AF26988 = 0;
  kEdgeFaceIndicesMap = 0;
  uint8x8_t v52 = &kEdgeFaceIndicesMap;
  char v53 = 0;
  kEdgeFaceIndicesMap = (uint64_t)operator new(0x120uLL);
  qword_26AF26980 = kEdgeFaceIndicesMap;
  qword_26AF26988 = kEdgeFaceIndicesMap + 288;
  qword_26AF26980 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_26AF26988, (uint64_t)&v54, (uint64_t)&v76, (void *)kEdgeFaceIndicesMap);
  uint64_t v38 = 36;
  do
  {
    float32x4_t v39 = *(uint64_t **)((char *)&v51 + v38 * 8 + 8);
    if (v39)
    {
      (&v52)[v38] = v39;
      operator delete(v39);
    }
    v38 -= 3;
  }
  while (v38 * 8);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kEdgeFaceIndicesMap, &dword_237C17000);
}

void sub_237C47500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27)
{
  qword_26AF26980 = v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v29 = 36;
  while (1)
  {
    int32x4_t v30 = *(void ***)(&a27 + v29 * 8 - 24);
    if (v30)
    {
      (&a25)[v29] = v30;
      operator delete(v30);
    }
    v29 -= 3;
    if (!(v29 * 8)) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t OUEspressoInference::OUEspressoInference(uint64_t a1, void *a2, long long *a3, int a4, int a5)
{
  id v9 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)a1 = &unk_26EAD5F70;
  id v10 = v9;
  *(void *)(a1 + 88) = v10;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 112) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v11;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((void *)(a1 + 120), *((void *)a3 + 3), *((void *)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 4) - *((void *)a3 + 3)) >> 4));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((void *)(a1 + 144), *((void *)a3 + 6), *((void *)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 4));
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(unsigned char *)(a1 + 288) = 0;
  if (!*(void *)(a1 + 88))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": invalid bundle.", (const void **)"OUEspressoInference", (void **)&v14.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &v14);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  OUEspressoInference::LoadModel((OUEspressoInference *)a1);
  OUEspressoInference::TryBuildEspressoPlan((OUEspressoInference *)a1);

  return a1;
}

void sub_237C478D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  OUDnnInferenceInterface::~OUDnnInferenceInterface((OUDnnInferenceInterface *)v15);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      id v9 = a2;
    }
    else {
      id v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  id v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

void OUEspressoInference::LoadModel(OUEspressoInference *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)((char *)this + 96);
  if (*((char *)this + 119) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  uint64_t v4 = [NSString stringWithUTF8String:v2];
  uint64_t v5 = [v3 pathForResource:v4 ofType:0];

  size_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(v12.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] Loading network path: %@", (uint8_t *)&v12, 0xCu);
  }

  if (!v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": unable to locate the network files.", (const void **)"OUEspressoInference", (void **)&v12.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  *((void *)this + 21) = espresso_create_context();
  int v7 = *((_DWORD *)this + 50);
  if (v7 && v7 != 10007)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoInference";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v7;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[%s] Untested engine type: %d.", (uint8_t *)&v12, 0x12u);
    }

    int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, (const char *)&unk_237CC3E0E);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v8, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  *((void *)this + 22) = espresso_create_plan();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(v12.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoInference";
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[%s] Adding network to plan. If the program crashes at this line, it is likely b/c the network requires too much memory.", (uint8_t *)&v12, 0xCu);
  }

  id v9 = v5;
  [v9 UTF8String];
  if (espresso_plan_add_network())
  {
    long long v11 = __cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": failed to add network.", (const void **)"OUEspressoInference", (void **)&v12.__r_.__value_.__l.__data_);
    MEMORY[0x237E2C200](v11, &v12);
    __cxa_throw(v11, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  OUEspressoInference::InitializeIOBuffers((uint64_t)this, (std::string::size_type *)this + 15, 1);
  OUEspressoInference::InitializeIOBuffers((uint64_t)this, (std::string::size_type *)this + 18, 0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] Done loading model.", (uint8_t *)&v12, 2u);
  }
}

void sub_237C47DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v15);

  _Unwind_Resume(a1);
}

void OUEspressoInference::TryBuildEspressoPlan(OUEspressoInference *this)
{
  if (espresso_plan_get_phase() != 1)
  {
    if (espresso_plan_build())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237E2C1F0](exception, "[3DOD] failed to build espresso plan.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v3 = this;
    OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()((uint64_t)&v3, (uint64_t)this + 208);
    OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()((uint64_t)&v3, (uint64_t)this + 248);
  }
}

void sub_237C47EC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OUEspressoInference::ModelInfo::~ModelInfo(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void OUEspressoInference::~OUEspressoInference(OUEspressoInference *this)
{
  *(void *)this = &unk_26EAD5F70;
  if (*((void *)this + 22)) {
    espresso_plan_destroy();
  }
  if (*((void *)this + 21)) {
    espresso_context_destroy();
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 208);
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 120);
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }

  OUDnnInferenceInterface::~OUDnnInferenceInterface(this);
}

{
  uint64_t vars8;

  OUEspressoInference::~OUEspressoInference(this);
  JUMPOUT(0x237E2C510);
}

uint64_t OUEspressoInference::Infer(OUEspressoInference *this)
{
  OUEspressoInference::TryReshapeNetwork(this);
  OUEspressoInference::TryBuildEspressoPlan(this);
  uint64_t v2 = (void *)((char *)this + 224);
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (espresso_network_bind_buffer())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      __n128 v4 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to bind input buffer.", &v11, &v12);
      MEMORY[0x237E2C200](exception, &v12, v4);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  uint64_t v5 = (void *)((char *)this + 264);
  while (1)
  {
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if (espresso_network_bind_buffer())
    {
      size_t v6 = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      __n128 v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to bind output buffer.", &v11, &v12);
      MEMORY[0x237E2C200](v6, &v12, v7);
      __cxa_throw(v6, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  uint64_t result = espresso_plan_execute_sync();
  if (result)
  {
    id v9 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    __n128 v10 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to run inference.", &v11, &v12);
    MEMORY[0x237E2C200](v9, &v12, v10);
    __cxa_throw(v9, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_237C48230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v21) {
    __cxa_free_exception(v20);
  }
  _Unwind_Resume(exception_object);
}

void OUEspressoInference::TryReshapeNetwork(OUEspressoInference *this)
{
  if (!*((unsigned char *)this + 288)) {
    return;
  }
  uint64_t v2 = *((void *)this + 4);
  v16[0] = 0;
  std::vector<char const*>::vector(v17, (int)v2, v16);
  std::vector<int>::value_type __x = -1;
  std::vector<int>::vector(&v15, (int)v2, &__x);
  std::vector<std::vector<int>>::vector(v16, 5uLL, (uint64_t)&v15);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  std::vector<int>::value_type __x = -1;
  std::vector<int>::vector(&v15, (int)v2, &__x);
  uint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3 + 2;
      if (*((char *)v3 + 39) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      *((void *)v17[0] + v4) = v5;
      uint64_t v7 = v3[12];
      uint64_t v6 = v3[13];
      if (v6 == v7)
      {
        int v8 = 0;
      }
      else
      {
        int v8 = 0;
        id v9 = (uint64_t *)v16[0];
        do
        {
          int v11 = *(_DWORD *)(v6 - 4);
          v6 -= 4;
          int v10 = v11;
          ++v8;
          uint64_t v12 = *v9;
          v9 += 3;
          *(_DWORD *)(v12 + 4 * v4) = v10;
        }
        while (v6 != v7);
      }
      v15.__begin_[v4++] = v8;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  if (espresso_plan_get_phase() && espresso_plan_build_clean())
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x237E2C1F0](exception, "[3DOD] failed to clean espresso plan.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x237E2C1F0](exception, "[3DOD] failed to reshape network.");
    goto LABEL_24;
  }
  *((unsigned char *)this + 288) = 0;
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  v15.__begin_ = (std::vector<int>::pointer)v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_237C48488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  std::__fs::filesystem::directory_entry::_Path __p = &a15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  float32x4_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void OUEspressoInference::InitializeIOBuffers(uint64_t a1, std::string::size_type *a2, int a3)
{
  if (a3) {
    uint64_t v3 = (unsigned int (*)(void, void, std::string::size_type))MEMORY[0x263F3B878];
  }
  else {
    uint64_t v3 = (unsigned int (*)(void, void, std::string::size_type))MEMORY[0x263F3B880];
  }
  if (a3) {
    uint64_t v4 = (void *)(a1 + 8);
  }
  else {
    uint64_t v4 = (void *)(a1 + 48);
  }
  if (a3) {
    uint64_t v5 = a1 + 208;
  }
  else {
    uint64_t v5 = a1 + 248;
  }
  std::string::size_type v6 = *a2;
  std::string::size_type v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      std::string::size_type v10 = v6;
      if (*(char *)(v6 + 23) < 0) {
        std::string::size_type v10 = *(void *)v6;
      }
      if (v3(*(void *)(a1 + 184), *(void *)(a1 + 192), v10))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": fail to declare network IO.", (const void **)"OUEspressoInference", &v31);
        MEMORY[0x237E2C200](exception, &v31);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      __uint64_t n = 0;
      uint64_t v27 = 0;
      std::vector<unsigned long>::vector(&v31, 0xAuLL, &v27);
      espresso_network_query_blob_shape();
      std::vector<unsigned long>::resize((uint64_t)&v31, __n);
      uint64_t v27 = 0;
      float32x2_t v28 = 0;
      uint64_t v29 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v27, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 3);
      __x[0] = -1;
      std::vector<int>::vector(&__p, __n, __x);
      uint64_t v11 = *(void *)(v6 + 24);
      uint64_t v12 = *(void *)(v6 + 32);
      std::vector<int>::size_type v13 = (v12 - v11) >> 2;
      if (v13 == __n)
      {
        if (v12 != v11)
        {
          std::vector<int>::size_type v14 = 0;
          std::vector<int> v15 = v27;
          std::vector<int>::pointer begin = __p.__begin_;
          do
          {
            uint64_t v17 = *(unsigned int *)(v11 + 4 * v14);
            if ((int)v17 >= 1)
            {
              v15[v14] = v17;
              begin[v14] = v17;
              *(unsigned char *)(a1 + 288) = 1;
              std::vector<int>::size_type v13 = __n;
            }
            ++v14;
          }
          while (v14 < v13);
        }
      }
      else if (v12 != v11)
      {
        float32x4_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v25, "[3DOD] capacity and shape must have the same size.");
        goto LABEL_47;
      }
      int v18 = *(_DWORD *)(a1 + 204);
      if (v18 <= 131079)
      {
        if (v18 == 65552)
        {
          uint64_t v19 = 1278226536;
        }
        else
        {
          if (v18 != 65568)
          {
LABEL_46:
            float32x4_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v25, "Invalid espresso storage types.");
LABEL_47:
            v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v25, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
          }
          uint64_t v19 = 1278226534;
        }
      }
      else
      {
        uint64_t v19 = 1278226488;
        if (v18 != 131080)
        {
          if (v18 == 131104)
          {
            uint64_t v19 = 1111970369;
          }
          else if (v18 != 262152)
          {
            goto LABEL_46;
          }
        }
      }
      OUDnnInferenceInterface::CreateIOBuffer(a1, v6, (char **)&v27, (_anonymous_namespace_ *)v19, a3);
      float32x4_t v20 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v4, (unsigned __int8 *)v6);
      char v21 = (std::vector<int> *)v20;
      if (!v20) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      float32x2_t v22 = (char *)(v20 + 96);
      if (&v21[4] != &__p) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v22, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
      }
      *(void *)std::vector<int>::value_type __x = v6;
      float32x2_t v23 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (long long **)__x);
      *((void *)v23 + 5) = v21[2].__end_;
      *((_DWORD *)v23 + 50) = *(_DWORD *)(a1 + 204);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v27)
      {
        float32x2_t v28 = v27;
        operator delete(v27);
      }
      if (v31)
      {
        float32x4_t v32 = v31;
        operator delete(v31);
      }
      v6 += 48;
    }
    while (v6 != v7);
  }
}

void sub_237C4891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void OUEspressoInference::SetInputBufferShape(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v16 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v18 = 0;
      _os_log_impl(&dword_237C17000, v16, OS_LOG_TYPE_INFO, "[3DOD] empty shape, skipping.", v18, 2u);
    }
  }
  else
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 8), a2);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::string::size_type v6 = *(char **)a3;
    uint64_t v7 = *(void *)(a3 + 8);
    unint64_t v8 = (v7 - *(void *)a3) >> 2;
    id v9 = (int *)*((void *)v5 + 9);
    if (v8 != (uint64_t)(*((void *)v5 + 10) - (void)v9) >> 3)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] shape must has the same size as the blob shape's size.");
      goto LABEL_18;
    }
    if ((char *)v7 != v6)
    {
      if (v8 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = (v7 - *(void *)a3) >> 2;
      }
      uint64_t v11 = *(char **)a3;
      while (1)
      {
        int v13 = *(_DWORD *)v11;
        v11 += 4;
        int v12 = v13;
        int v14 = *v9;
        v9 += 2;
        if (v12 > v14) {
          break;
        }
        if (!--v10) {
          goto LABEL_11;
        }
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] shape exceeds capacity.");
LABEL_18:
      __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
    }
LABEL_11:
    std::vector<int> v15 = (char *)(v5 + 96);
    if (v15 != (char *)a3) {
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v15, v6, v7, v8);
    }
    *(unsigned char *)(a1 + 288) = 1;
  }
}

void sub_237C48B10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    std::vector<unsigned long>::vector(__p, 0xAuLL, &v4);
    espresso_network_query_blob_shape();
    std::vector<unsigned long>::resize((uint64_t)__p, v6);
    if (espresso_buffer_pack_tensor_shape())
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x237E2C1F0](exception, "[3DOD] fail to pack buffer.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_237C48C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_237C48CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,OUEspressoInference::ModelInfo::BlobInfo&,OUEspressoInference::ModelInfo::BlobInfo*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_237C48DF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,OUEspressoInference::ModelInfo::BlobInfo&,OUEspressoInference::ModelInfo::BlobInfo*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  return this;
}

void sub_237C48E84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_237C4906C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    std::vector<int> v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C49204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_237C49288(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_237C49340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  float32x2_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *float32x2_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_237C49628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0xD0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((void *)v8 + 25) = 0;
  double result = 0.0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_237C49708(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t OUEspressoV2Inference::OUEspressoV2Inference(uint64_t a1, void *a2, long long *a3, int a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v7 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)a1 = &unk_26EAD5FC0;
  id v8 = v7;
  unint64_t v9 = v8;
  *(void *)(a1 + 88) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((void *)a3 + 1));
    id v11 = *(id *)(a1 + 88);
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 112) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v10;
    id v11 = v8;
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 136) = a4;
  *(_OWORD *)(a1 + 160) = 0u;
  if (!v11)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] invalid bundle.", &v18, &buf);
    std::logic_error::logic_error(exception, &buf);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  if (a4)
  {
    if (e5rt_e5_compiler_create())
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      unint64_t v13 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
        _os_log_impl(&dword_237C17000, v13, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }
    }
    if (e5rt_e5_compiler_options_create())
    {
      uint64_t v14 = e5rt_get_last_error_message();
      std::vector<int> v15 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
        _os_log_impl(&dword_237C17000, v15, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  OUEspressoV2Inference::LoadModel((OUEspressoV2Inference *)a1);

  return a1;
}

void sub_237C49998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v21 + 119) < 0) {
        operator delete(*v23);
      }

      OUDnnInferenceInterface::~OUDnnInferenceInterface((OUDnnInferenceInterface *)v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void OUEspressoV2Inference::LoadModel(OUEspressoV2Inference *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 96;
  if (*((char *)this + 119) < 0) {
    uint64_t v2 = (char *)*((void *)this + 12);
  }
  uint64_t v3 = (void *)*((void *)this + 11);
  unint64_t v4 = [NSString stringWithUTF8String:v2];
  uint64_t v5 = [v3 pathForResource:v4 ofType:0];

  unint64_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoV2Inference";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v5;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[%s] Loading network path: %@", (uint8_t *)&buf, 0x16u);
  }

  if (!v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": unable to locate the network files.", (const void **)"OUEspressoV2Inference", (void **)&buf.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &buf);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  if (*((unsigned char *)this + 136))
  {
    [v5 UTF8String];
    if (e5rt_e5_compiler_compile())
    {
      uint64_t last_error_message = e5rt_get_last_error_message();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
        _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }
    }
    if (e5rt_program_library_get_num_functions())
    {
      uint64_t v8 = e5rt_get_last_error_message();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
        _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      OUEspressoV2Inference::LoadModel(0, v6);
    }

    unint64_t v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x237E2C1F0](v13, &unk_237CC3E0E);
    __cxa_throw(v13, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  [v5 UTF8String];
  if (e5rt_execution_stream_operation_create_precompiled_compute_operation())
  {
    uint64_t v9 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }
  }
  OUEspressoV2Inference::InitializeIOBuffers(this, 1);
  OUEspressoV2Inference::InitializeIOBuffers(this, 0);
  if (e5rt_execution_stream_create())
  {
    uint64_t v10 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (e5rt_execution_stream_encode_operation())
  {
    uint64_t v11 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoV2Inference";
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[%s] Done loading model.", (uint8_t *)&buf, 0xCu);
  }
}

void sub_237C4A0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v19);

  _Unwind_Resume(a1);
}

void OUEspressoV2Inference::~OUEspressoV2Inference(OUEspressoV2Inference *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26EAD5FC0;
  if (e5rt_execution_stream_operation_release())
  {
    uint64_t last_error_message = e5rt_get_last_error_message();
    uint64_t v3 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = last_error_message;
      _os_log_impl(&dword_237C17000, v3, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v6, 0xCu);
    }
  }
  if (e5rt_execution_stream_release())
  {
    uint64_t v4 = e5rt_get_last_error_message();
    uint64_t v5 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = v4;
      _os_log_impl(&dword_237C17000, v5, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v6, 0xCu);
    }
  }
  if (*((void *)this + 21)) {
    e5rt_program_function_release();
  }
  if (*((void *)this + 20)) {
    e5rt_program_library_release();
  }
  if (*((void *)this + 19)) {
    e5rt_e5_compiler_options_release();
  }
  if (*((void *)this + 18)) {
    e5rt_e5_compiler_release();
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }

  OUDnnInferenceInterface::~OUDnnInferenceInterface(this);
}

{
  uint64_t vars8;

  OUEspressoV2Inference::~OUEspressoV2Inference(this);
  JUMPOUT(0x237E2C510);
}

void sub_237C4A334(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void OUEspressoV2Inference::Infer(OUEspressoV2Inference *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (e5rt_execution_stream_execute_sync())
  {
    uint64_t last_error_message = e5rt_get_last_error_message();
    uint64_t v2 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      uint64_t v4 = last_error_message;
      _os_log_impl(&dword_237C17000, v2, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void OUEspressoV2Inference::InitializeIOBuffers(OUEspressoV2Inference *this, int a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v4 = (unsigned int (*)(void, char *, uint64_t *))MEMORY[0x263F3B7F0];
  int v6 = (void *)((char *)this + 128);
  uint64_t v5 = *((void *)this + 16);
  if (a2) {
    uint64_t v4 = (unsigned int (*)(void, char *, uint64_t *))MEMORY[0x263F3B7E8];
  }
  float v43 = v4;
  if (a2) {
    uint64_t v7 = v6 - 15;
  }
  else {
    uint64_t v7 = v6 - 10;
  }
  if (a2) {
    uint64_t v8 = (void (*)(uint64_t, unint64_t *))MEMORY[0x263F3B7C8];
  }
  else {
    uint64_t v8 = (void (*)(uint64_t, unint64_t *))MEMORY[0x263F3B7D0];
  }
  if (a2) {
    uint64_t v9 = (void (*)(void, unint64_t, char **))MEMORY[0x263F3B7C0];
  }
  else {
    uint64_t v9 = (void (*)(void, unint64_t, char **))MEMORY[0x263F3B7D8];
  }
  unint64_t v59 = 0;
  v8(v5, &v59);
  std::vector<char const*>::vector(&v57, v59);
  v9(*v6, v59, v57);
  uint64_t v10 = v57;
  uint64_t v11 = v58;
  if (v57 != v58)
  {
    do
    {
      uint8x8_t v12 = *v10;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      if (v43(*((void *)this + 16), v12, &v56))
      {
        uint64_t last_error_message = e5rt_get_last_error_message();
        uint64_t v14 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
          _os_log_impl(&dword_237C17000, v14, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_io_port_retain_tensor_desc())
      {
        uint64_t v15 = e5rt_get_last_error_message();
        unint64_t v16 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
          _os_log_impl(&dword_237C17000, v16, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      char v53 = 0;
      __uint64_t n = 0;
      if (e5rt_tensor_desc_get_shape())
      {
        uint64_t v17 = e5rt_get_last_error_message();
        std::string v18 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v17;
          _os_log_impl(&dword_237C17000, v18, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      if (e5rt_tensor_desc_get_strides())
      {
        uint64_t v19 = e5rt_get_last_error_message();
        uint64_t v20 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
          _os_log_impl(&dword_237C17000, v20, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      uint64_t v48 = 0;
      int v49 = 0;
      uint64_t v50 = 0;
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((uint64_t)&v48, 0, v53, &v53[8 * __n], __n);
      *(v49 - 1) = *(void *)(v51 + 8 * v52 - 16) / *(uint64_t *)(v51 + 8 * v52 - 8);
      uint64_t v47 = 0;
      int v46 = 0;
      if (e5rt_tensor_desc_retain_dtype())
      {
        uint64_t v21 = e5rt_get_last_error_message();
        size_t v22 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
          _os_log_impl(&dword_237C17000, v22, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_tensor_desc_dtype_get_component_pack())
      {
        uint64_t v23 = e5rt_get_last_error_message();
        unint64_t v24 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v23;
          _os_log_impl(&dword_237C17000, v24, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      uint64_t v25 = 1278226488;
      if (v46)
      {
        if (v46 == 6)
        {
          uint64_t v25 = 1278226534;
        }
        else
        {
          if (v46 != 3)
          {
            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] unsupported component types.", &__x, &buf);
            std::logic_error::logic_error(exception, &buf);
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
          }
          uint64_t v25 = 1278226536;
        }
      }
      OUDnnInferenceInterface::CreateIOBuffer((uint64_t)this, (std::string::size_type)__p, (char **)&v48, (_anonymous_namespace_ *)v25, a2);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (e5rt_tensor_desc_dtype_release())
      {
        uint64_t v26 = e5rt_get_last_error_message();
        uint64_t v27 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
          _os_log_impl(&dword_237C17000, v27, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&buf, v12);
      float32x2_t v28 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v7, (unsigned __int8 *)&buf);
      if (!v28) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      LODWORD(__x.__r_.__value_.__l.__data_) = -1;
      std::vector<int>::vector((std::vector<int> *)&buf, __n, (const std::vector<int>::value_type *)&__x);
      uint64_t v29 = (void *)*((void *)v28 + 12);
      if (v29)
      {
        *((void *)v28 + 13) = v29;
        operator delete(v29);
        *((void *)v28 + 12) = 0;
        *((void *)v28 + 13) = 0;
        *((void *)v28 + 14) = 0;
      }
      *((std::string *)v28 + 4) = buf;
      if (!CVPixelBufferGetIOSurface(*((CVPixelBufferRef *)v28 + 5)))
      {
        float32x4_t v40 = __cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        __n128 v41 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to get io surface", &__x, &buf);
        MEMORY[0x237E2C200](v40, &buf, v41);
        __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      __x.__r_.__value_.__r.__words[0] = 0;
      if (e5rt_buffer_object_create_from_iosurface())
      {
        uint64_t v30 = e5rt_get_last_error_message();
        float32x4_t v31 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
          _os_log_impl(&dword_237C17000, v31, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_io_port_bind_buffer_object())
      {
        uint64_t v32 = e5rt_get_last_error_message();
        float v33 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v32;
          _os_log_impl(&dword_237C17000, v33, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_buffer_object_release())
      {
        uint64_t v34 = e5rt_get_last_error_message();
        float32x4_t v35 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
          _os_log_impl(&dword_237C17000, v35, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_tensor_desc_release())
      {
        uint64_t v36 = e5rt_get_last_error_message();
        float32x4_t v37 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v36;
          _os_log_impl(&dword_237C17000, v37, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (e5rt_io_port_release())
      {
        uint64_t v38 = e5rt_get_last_error_message();
        float32x4_t v39 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
          _os_log_impl(&dword_237C17000, v39, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }
      }
      if (v48)
      {
        int v49 = v48;
        operator delete(v48);
      }
      ++v10;
    }
    while (v10 != v11);
    uint64_t v10 = v57;
  }
  if (v10)
  {
    long long v58 = v10;
    operator delete(v10);
  }
}

void sub_237C4AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OUEspressoV2Inference::SetInputBufferShape()
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  uint64_t v1 = std::string::append(&v3, "] dynamic inference not implemented.", 0x24uLL);
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v4.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v4.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(exception, &v4);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
}

void sub_237C4AE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    std::string v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_237C4AF58(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      std::string v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v9, v17);
    }
    else {
      std::string v18 = 0;
    }
    float32x2_t v28 = &v18[8 * v15];
    std::vector<int> __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)float32x2_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    float32x4_t v35 = v30;
    uint64_t v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[8 * a5];
    uint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_237C4B14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t ou3dod::IsObjectBelongToType(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return 0;
  }
  uint64_t v4 = *a2 + 8;
  do
  {
    uint64_t result = [*(id *)(a1 + 128) isEqualToString:*(void *)(v4 - 8)];
    if (result) {
      break;
    }
    BOOL v6 = v4 == v2;
    v4 += 8;
  }
  while (!v6);
  return result;
}

BOOL ou3dod::ShouldForceExtendCorner(id *this, const OUBox3d *a2, const OUBox3d *a3)
{
  objc_msgSend(this[18], "UUIDString", a3);
  id v4 = objc_claimAutoreleasedReturnValue();
  unint64_t v14 = (char *)[v4 UTF8String];
  id v5 = [a2[1].var5.var2.var0 UUIDString];
  unint64_t v13 = (char *)[v5 UTF8String];
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v15, &v14, &v13);

  uint64_t v7 = (void *)ou3dod::HistoryMergeInfo::Get(v6) + 5;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v7, (unsigned __int8 *)v15);
  BOOL v11 = (v8
      || (uint64_t v9 = v16,
          long long v10 = *(_OWORD *)v15,
          *(_OWORD *)uint64_t v15 = *(_OWORD *)__p,
          uint64_t v16 = v18,
          *(_OWORD *)std::vector<int> __p = v10,
          uint64_t v18 = v9,
          (uint64_t v8 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v7, (unsigned __int8 *)v15)) != 0))&& v8[64] != 0;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  return v11;
}

void sub_237C4B3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ou3dod::SetForceExtendCornerFlag(id *this, const OUBox3d *a2, const OUBox3d *a3)
{
  unsigned __int8 v3 = a3;
  BOOL v6 = ou3dod::HistoryMergeInfo::Get((ou3dod::HistoryMergeInfo *)this);
  id v7 = [a2[1].var5.var2.var0 UUIDString];
  v18[0] = (long long *)[v7 UTF8String];
  id v8 = [this[18] UUIDString];
  unint64_t v13 = (char *)[v8 UTF8String];
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v14, (char **)v18, &v13);
  uint64_t v9 = (void *)v6 + 5;

  long long v10 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v9, (unsigned __int8 *)v14);
  if (v10)
  {
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove(v9, v10, (uint64_t)v18);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v18, 0);
  }
  uint64_t v11 = v15;
  long long v12 = *(_OWORD *)v14;
  *(_OWORD *)unint64_t v14 = *(_OWORD *)__p;
  uint64_t v15 = v17;
  *(_OWORD *)std::vector<int> __p = v12;
  uint64_t v17 = v11;
  v18[0] = (long long *)v14;
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, v18)[64] = v3;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_237C4B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ou3dod::ShouldForceMerge(ou3dod *this, float32x4_t *a2, const OUBox3d *a3)
{
  id v5 = ou3dod::HistoryMergeInfo::Get(this);
  id v6 = [*((id *)this + 18) UUIDString];
  v29.i64[0] = [v6 UTF8String];
  id v7 = [(id)a2[9].i64[0] UUIDString];
  v28[0].i64[0] = [v7 UTF8String];
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&v37, (char **)&v29, (char **)v28);
  id v8 = (void *)v5 + 5;

  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v8, (unsigned __int8 *)&v37);
  if (v9
    || (long long v10 = v37,
        long long v37 = v39,
        uint64_t v11 = v38,
        long long v39 = v10,
        uint64_t v38 = v40,
        uint64_t v40 = v11,
        (uint64_t v9 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v8, (unsigned __int8 *)&v37)) != 0))
  {
    long long v12 = @"Table";
    *(void *)&long long v30 = 0;
    float32x4_t v29 = 0uLL;
    v28[0].i64[0] = (uint64_t)&v29;
    v28[0].i8[8] = 0;
    unint64_t v13 = operator new(8uLL);
    v29.i64[0] = (uint64_t)v13;
    v29.i64[1] = (uint64_t)v13;
    *(void *)&long long v30 = v13 + 1;
    unint64_t v14 = v12;
    *unint64_t v13 = v14;
    v29.i64[1] = (uint64_t)(v13 + 1);
    float v15 = 0.2;
    if ((void *)v29.i64[0] != v13 + 1)
    {
      uint64_t v16 = v29.i64[0] - 8;
      while (![*((id *)this + 16) isEqualToString:*(void *)(v16 + 8)])
      {
        v16 += 8;
        if ((void *)v16 == v13) {
          goto LABEL_9;
        }
      }
      float v15 = 0.4;
    }
LABEL_9:
    v28[0].i64[0] = (uint64_t)&v29;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    float32x4_t v29 = 0u;
    long long v30 = 0u;
    box3dEnlarge((float32x4_t *)this, 0.4, v15, 0.0, &v29);
    memset(v28, 0, sizeof(v28));
    box3dEnlarge(a2, 0.4, v15, 0.0, v28);
    memset(v27, 0, sizeof(v27));
    box3dIou(&v29, v28, 0, (uint64_t)v27);
    if (*(float *)v27 >= 0.01)
    {
      float32x4_t v17 = vsubq_f32(*(float32x4_t *)this, *((float32x4_t *)this + 1));
      float32x2_t v18 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v17, v17)));
      float32x2_t v19 = vrsqrte_f32(v18);
      float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
      *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v17.f32, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
      float32x4_t v21 = vsubq_f32(*a2, a2[1]);
      float32x2_t v22 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
      float32x2_t v23 = vrsqrte_f32(v22);
      float32x2_t v24 = vmul_f32(v23, vrsqrts_f32(v22, vmul_f32(v23, v23)));
      if (fabsf(vaddv_f32(vmul_f32(*(float32x2_t *)v17.f32, vmul_n_f32(*(float32x2_t *)v21.f32, vmul_f32(v24, vrsqrts_f32(v22, vmul_f32(v24, v24))).f32[0])))) < 0.173)
      {
        uint64_t v25 = 1;
        goto LABEL_14;
      }
    }
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove(v8, v9, (uint64_t)v41);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v41, 0);
  }
  uint64_t v25 = 0;
LABEL_14:
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  return v25;
}

void sub_237C4B890(_Unwind_Exception *a1)
{
  std::pair<std::string,std::string>::~pair(v1 - 192);
  _Unwind_Resume(a1);
}

float32x2_t ou3dod::ComputeHeadingDirection(float32x4_t *this, const box3d *a2)
{
  float32x4_t v2 = vsubq_f32(*this, this[1]);
  float32x2_t v3 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v2, v2)));
  float32x2_t v4 = vrsqrte_f32(v3);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  return vmul_n_f32(*(float32x2_t *)v2.f32, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
}

float ou3dod::Compute2DOverlapRatio(ou3dod *this, const box3d *a2, const box3d *a3, const box3d *a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)this;
  *((void *)&v4 + 1) = *((void *)this + 2);
  long long v5 = *((_OWORD *)this + 2);
  *((void *)&v5 + 1) = *((void *)this + 6);
  v33[0] = v4;
  v33[1] = v5;
  long long v6 = *(_OWORD *)a2;
  *((void *)&v6 + 1) = *((void *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 2);
  *((void *)&v7 + 1) = *((void *)a2 + 6);
  v32[0] = v6;
  v32[1] = v7;
  long long v8 = *(_OWORD *)a3;
  *((void *)&v8 + 1) = *((void *)a3 + 2);
  long long v9 = *((_OWORD *)a3 + 2);
  *((void *)&v9 + 1) = *((void *)a3 + 6);
  v31[0] = v8;
  v31[1] = v9;
  OU::Polygon::Polygon(v30, v33, 4);
  OU::Polygon::Polygon(v29, v32, 4);
  OU::Polygon::Polygon(v28, v31, 4);
  OU::clip((OU *)v30, (const Polygon *)v28, (char *)v27);
  OU::clip((OU *)v29, (const Polygon *)v28, (char *)v26);
  OU::clip((OU *)v30, (const Polygon *)v29, (char *)__p);
  if (OU::area((OU *)__p, v10) > 0.001)
  {
    OU::clip((OU *)v28, (const Polygon *)__p, (char *)&v20);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::vector<int> __p = v20;
    uint64_t v24 = v21;
    long long v25 = v22;
  }
  float v12 = OU::area((OU *)v27, v11);
  float v14 = OU::area((OU *)v26, v13);
  float v16 = OU::area((OU *)__p, v15);
  float v18 = OU::area((OU *)v28, v17);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return (float)((float)(v12 + v14) - v16) / v18;
}

void sub_237C4BB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a36) {
    operator delete(a36);
  }
  long long v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(void *)(v37 - 184) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void sub_237C4BBB8()
{
}

void sub_237C4BBC0()
{
}

void sub_237C4BBC8()
{
}

void ou3dod::extractClassPoints(void *a1@<X0>, float32x4_t *a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  id v6 = a1;
  id v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v7)
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    id v57 = v7;
    obuint64_t j = v7;
    uint64_t v8 = [obj countByEnumeratingWithState:&v67 objects:v71 count:16];
    if (v8)
    {
      uint64_t v59 = *(void *)v68;
      do
      {
        uint64_t v9 = 0;
        uint64_t v61 = v8;
        do
        {
          if (*(void *)v68 != v59) {
            objc_enumerationMutation(obj);
          }
          long long v10 = *(void **)(*((void *)&v67 + 1) + 8 * v9);
          uint64_t v11 = objc_msgSend(v10, "points", v57);
          uint64_t v12 = [v10 semanticLabels];
          uint64_t v13 = [v10 semanticVotes];
          unint64_t v14 = 0;
          float32x4_t v15 = vsubq_f32(*a2, a2[3]);
          float32x4_t v16 = vmulq_f32(v15, v15);
          v16.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
          float v17 = sqrtf(v16.f32[0]);
          float32x2_t v18 = vrsqrte_f32((float32x2_t)v16.u32[0]);
          float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18)));
          float32x4_t v65 = vmulq_n_f32(v15, vmul_f32(v19, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v19, v19))).f32[0]);
          float32x4_t v20 = vsubq_f32(*a2, a2[1]);
          float32x4_t v21 = vmulq_f32(v20, v20);
          v21.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
          v16.f32[0] = sqrtf(v21.f32[0]);
          float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
          float32x2_t v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
          float32x4_t v64 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
          float32x4_t v24 = vsubq_f32(*a2, a2[4]);
          float32x4_t v25 = vmulq_f32(v24, v24);
          v25.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
          float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
          float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
          float32x4_t v28 = vmulq_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
          float v29 = v17 * 0.5;
          float v30 = v16.f32[0] * 0.5;
          float v31 = sqrtf(v25.f32[0]) * 0.5;
          v24.i64[0] = 0x3F0000003F000000;
          v24.i64[1] = 0x3F0000003F000000;
          float32x4_t v62 = vmulq_f32(vaddq_f32(*a2, a2[6]), v24);
          float32x4_t v63 = v28;
          while (v14 < [v10 count])
          {
            float32x4_t v66 = *(float32x4_t *)(v11 + 16 * v14);
            float32x4_t v32 = vsubq_f32(v66, v62);
            float32x4_t v33 = vmulq_f32(v65, v32);
            float32x4_t v34 = vmulq_f32(v64, v32);
            float32x4_t v35 = vmulq_f32(v63, v32);
            float v36 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
            float v37 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]);
            if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]) <= v29&& v36 <= v30&& v37 <= v31)
            {
              uint16x4_t v40 = *(uint16x4_t *)(v13 + 8 * v14);
              int8x16_t v41 = (int8x16_t)vmovl_u16(v40);
              uint32x4_t v42 = vaddw_u16((uint32x4_t)vextq_s8(v41, v41, 8uLL), v40);
              if (v42.i16[0] + v42.i16[2])
              {
                v42.i32[0] = *(_DWORD *)(v12 + 4 * v14);
                float v43 = [NSNumber numberWithUnsignedChar:vmovl_u8(*(uint8x8_t *)v42.i8).u8[0]];
                int v44 = [v6 containsObject:v43];

                if (v44)
                {
                  int v46 = (float32x4_t *)a4[1];
                  unint64_t v45 = (unint64_t)a4[2];
                  if ((unint64_t)v46 >= v45)
                  {
                    uint64_t v48 = ((char *)v46 - (unsigned char *)*a4) >> 4;
                    if ((unint64_t)(v48 + 1) >> 60) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v49 = v45 - (void)*a4;
                    uint64_t v50 = v49 >> 3;
                    if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
                      uint64_t v50 = v48 + 1;
                    }
                    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v51 = v50;
                    }
                    if (v51) {
                      uint64_t v52 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v51);
                    }
                    else {
                      uint64_t v52 = 0;
                    }
                    char v53 = (float32x4_t *)&v52[16 * v48];
                    float32x4_t *v53 = v66;
                    f32 = (_OWORD *)v53[1].f32;
                    uint64_t v55 = (float32x4_t *)*a4;
                    long long v54 = (float32x4_t *)a4[1];
                    if (v54 != *a4)
                    {
                      do
                      {
                        float32x4_t v56 = v54[-1];
                        --v54;
                        v53[-1] = v56;
                        --v53;
                      }
                      while (v54 != v55);
                      long long v54 = (float32x4_t *)*a4;
                    }
                    *a4 = v53;
                    a4[1] = f32;
                    a4[2] = &v52[16 * v51];
                    if (v54) {
                      operator delete(v54);
                    }
                  }
                  else
                  {
                    float32x4_t *v46 = v66;
                    f32 = (_OWORD *)v46[1].f32;
                  }
                  a4[1] = f32;
                }
              }
            }
            ++v14;
          }
          ++v9;
        }
        while (v9 != v61);
        uint64_t v8 = [obj countByEnumeratingWithState:&v67 objects:v71 count:16];
      }
      while (v8);
    }

    id v7 = v57;
  }
}

void sub_237C4BFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void ou3dod::PrintBoxCorner(ou3dod *this, const box3d *a2)
{
  float32x2_t v3 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    ou3dod::PrintBoxCorner(this, v3);
  }
}

double ou3dod::FindIntersect(float32x4_t a1, int32x4_t a2, float32x4_t a3, int32x4_t a4)
{
  a1.i32[2] = 1.0;
  a2.i32[2] = 1.0;
  a3.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  int32x4_t v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(a1)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  int32x4_t v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a4, a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(a3)), (float32x4_t)a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  int32x4_t v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v5)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  if (fabsf(*(float *)&v8.i32[1]) >= 0.000001) {
    *(void *)&double result = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1)).u64[0];
  }
  else {
    *(void *)&double result = vdupq_n_s32(0x7F7FFFFFu).u64[0];
  }
  return result;
}

float32x4_t *ou3dod::MaybeReorderBackObjectCorner(float32x4_t *result, float32x2_t a2)
{
  for (int i = 0; i != 3; ++i)
  {
    float32x4_t v3 = vsubq_f32(*result, result[1]);
    float32x2_t v4 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v3, v3)));
    float32x2_t v5 = vrsqrte_f32(v4);
    float32x2_t v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
    *(float32x2_t *)v3.f32 = vsub_f32(a2, vmul_n_f32(*(float32x2_t *)v3.f32, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]));
    if (sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32))) < 0.01) {
      break;
    }
    float32x4_t v7 = (uint64_t *)result;
    for (uint64_t j = 1; j != 5; ++j)
    {
      uint64_t *v7 = result[(j & 3) + 4].i64[0];
      v7 += 2;
    }
    for (uint64_t k = 0; k != 4; ++k)
      result[k + 4].i64[0] = result[k].i64[0];
  }
  return result;
}

uint64_t ou3dod::ShiftBoxCorner(uint64_t this, box3d *a2)
{
  for (uint64_t i = 0; i != 64; i += 16)
  {
    *(void *)(this + i) = *(void *)(this + 16 * (a2 & 3 | 4u));
    LODWORD(a2) = a2 + 1;
  }
  for (uint64_t j = 0; j != 64; j += 16)
    *(void *)(this + j + 64) = *(void *)(this + j);
  return this;
}

BOOL ou3dod::IsBoxSurfaceAttached(float32x4_t *this, const box3d *a2, const box3d *a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  do
  {
    for (uint64_t i = 0; i != 64; i += 16)
    {
      float32x4_t v6 = vsubq_f32(this[v3], *(float32x4_t *)((char *)a2 + i));
      if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v6, v6))) < 0.01) {
        ++v4;
      }
    }
    ++v3;
  }
  while (v3 != 4);
  return v4 > 1;
}

void ou3dod::MaybeReorderObjectCorner(id *this, OUBox3d *a2)
{
  if (this)
  {
    int v3 = objc_msgSend(this[16], "isEqualToString:", @"Cabinet", box3dToCentroidSizeAngle((float32x4_t *)this, (uint64_t *)__p).n128_f64[0]);
    int v4 = __p[0];
    if (v3)
    {
      float v6 = *((float *)__p[0] + 3);
      float v5 = *((float *)__p[0] + 4);
      BOOL v7 = v5 <= 1.0 || v5 <= v6;
      if (!v7 && (float)(v5 / v6) > 1.5)
      {
        uint64_t v8 = 1;
        uint64_t v9 = this;
        do
        {
          id *v9 = this[2 * (v8 & 3) + 8];
          v9 += 2;
          ++v8;
        }
        while (v8 != 5);
        for (uint64_t i = 0; i != 8; i += 2)
          this[i + 8] = this[i];
        goto LABEL_19;
      }
    }
    else
    {
      float v11 = *((float *)__p[0] + 3);
      float v12 = *((float *)__p[0] + 4);
      if (v11 <= v12 && (float)(v12 / v11) > 1.5)
      {
        uint64_t v13 = 1;
        unint64_t v14 = this;
        do
        {
          id *v14 = this[2 * (v13 & 3) + 8];
          v14 += 2;
          ++v13;
        }
        while (v13 != 5);
        for (uint64_t j = 0; j != 8; j += 2)
          this[j + 8] = this[j];
LABEL_19:
        if (!v4) {
          return;
        }
      }
    }
    __p[1] = v4;
    operator delete(v4);
  }
}

void sub_237C4C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::AdjustBoxCornerOrder(float32x4_t *this, float32x4_t *a2, box3d *a3)
{
  box3dToCentroidSizeAngle(this, (uint64_t *)v39);
  box3dToCentroidSizeAngle(a2, (uint64_t *)__p);
  unsigned int v5 = 0;
  float32x2_t v6 = *(float32x2_t *)v39[0];
  float32x2_t v7 = *(float32x2_t *)__p[0];
  float32x2_t v8 = vsub_f32(*(float32x2_t *)this->f32, *(float32x2_t *)__p[0]);
  float v9 = sqrtf(vaddv_f32(vmul_f32(v8, v8)));
  int v10 = 1;
  for (uint64_t i = 1; i != 4; ++i)
  {
    float32x2_t v12 = vsub_f32(*(float32x2_t *)this[i].f32, v7);
    float v13 = sqrtf(vaddv_f32(vmul_f32(v12, v12)));
    if (v13 < v9)
    {
      unsigned int v5 = v10;
      float v9 = v13;
    }
    ++v10;
  }
  if (v5) {
    BOOL v14 = v5 == 3;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = 2;
    float32x4_t v16 = this;
    do
    {
      v16->i64[0] = this[(v15 & 3) + 4].i64[0];
      ++v16;
      ++v15;
    }
    while (v15 != 6);
    for (uint64_t j = 0; j != 4; ++j)
      this[j + 4].i64[0] = this[j].i64[0];
    if (v5 < 2) {
      int v18 = 2;
    }
    else {
      int v18 = -2;
    }
    v5 += v18;
  }
  int v19 = 0;
  float32x2_t v20 = vsub_f32(*(float32x2_t *)a2->f32, v6);
  float v21 = sqrtf(vaddv_f32(vmul_f32(v20, v20)));
  int v22 = 1;
  for (uint64_t k = 1; k != 4; ++k)
  {
    float32x2_t v24 = vsub_f32(*(float32x2_t *)a2[k].f32, v6);
    float v25 = sqrtf(vaddv_f32(vmul_f32(v24, v24)));
    if (v25 < v21)
    {
      float v21 = v25;
      int v19 = v22;
    }
    ++v22;
  }
  if (v19) {
    BOOL v26 = v19 == 3;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26)
  {
    uint64_t v27 = 2;
    float32x4_t v28 = a2;
    do
    {
      v28->i64[0] = a2[(v27 & 3) + 4].i64[0];
      ++v28;
      ++v27;
    }
    while (v27 != 6);
    for (uint64_t m = 0; m != 4; ++m)
      a2[m + 4].i64[0] = a2[m].i64[0];
    if (v19) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
  }
  if (v19 + v5 != 3) {
    goto LABEL_40;
  }
  float32x2_t v30 = *(float32x2_t *)this[v5].f32;
  float32x2_t v31 = *(float32x2_t *)a2[v19].f32;
  if (vaddv_f32(vmul_f32(vsub_f32(v30, v6), vsub_f32(v31, v6))) < 0.0
    && vaddv_f32(vmul_f32(vsub_f32(v30, v7), vsub_f32(v31, v7))) < 0.0)
  {
    float32x4_t v32 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
      ou3dod::AdjustBoxCornerOrder();
    }

LABEL_40:
    uint64_t v33 = 0;
    goto LABEL_44;
  }
  float32x4_t v34 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
    ou3dod::AdjustBoxCornerOrder(v5, v19, v34);
  }

  ou3dod::PrintBoxCorner((ou3dod *)this, v35);
  ou3dod::PrintBoxCorner((ou3dod *)a2, v36);
  uint64_t v33 = 1;
LABEL_44:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  return v33;
}

void sub_237C4C688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::MaybeClipExtendLShapeObjects(void *a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t *a6, void *a7, int a8)
{
  uint64_t v382 = *MEMORY[0x263EF8340];
  id v13 = a4;
  uint64_t v15 = *a6;
  uint64_t v14 = a6[1];
  v297 = a6;
  uint64_t v298 = a3;
  uint64_t v299 = a2;
  uint64_t v16 = *a6 + 224 * a2;
  long long v17 = *(_OWORD *)(v16 + 80);
  uint64_t v18 = *a6 + 224 * a3;
  long long v367 = *(_OWORD *)(v16 + 64);
  long long v368 = v17;
  long long v19 = *(_OWORD *)(v16 + 112);
  long long v369 = *(_OWORD *)(v16 + 96);
  long long v370 = v19;
  long long v20 = *(_OWORD *)(v16 + 16);
  float32x4_t v363 = *(float32x4_t *)v16;
  long long v364 = v20;
  long long v21 = *(_OWORD *)(v16 + 48);
  long long v365 = *(_OWORD *)(v16 + 32);
  long long v366 = v21;
  long long v22 = *(_OWORD *)(v18 + 80);
  long long v359 = *(_OWORD *)(v18 + 64);
  long long v360 = v22;
  long long v23 = *(_OWORD *)(v18 + 112);
  long long v361 = *(_OWORD *)(v18 + 96);
  long long v362 = v23;
  long long v24 = *(_OWORD *)(v18 + 16);
  float32x4_t v355 = *(float32x4_t *)v18;
  long long v356 = v24;
  long long v25 = *(_OWORD *)(v18 + 48);
  long long v357 = *(_OWORD *)(v18 + 32);
  long long v358 = v25;
  if ((ou3dod::AdjustBoxCornerOrder((float32x4_t *)v16, (float32x4_t *)v18, v26) & 1) == 0)
  {
    ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
    uint64_t v62 = 1;
    goto LABEL_171;
  }
  float32x4_t v27 = *(float32x4_t *)(v16 + 16);
  v27.i32[2] = 1.0;
  float32x4_t v28 = *(float32x4_t *)(v16 + 32);
  v28.i32[2] = 1.0;
  float32x4_t v29 = *(float32x4_t *)(v18 + 16);
  v29.i32[2] = 1.0;
  float32x4_t v30 = *(float32x4_t *)(v18 + 32);
  v30.i32[2] = 1.0;
  int32x4_t v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
  float32x4_t v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
  int32x4_t v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), vnegq_f32(v29)), v30, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
  float32x4_t v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
  float32x4_t v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL);
  int8x16_t v36 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL);
  float32x4_t v37 = vnegq_f32(v32);
  int32x4_t v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), v37), v34, v35);
  float32x4_t v39 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  float32x4_t v292 = v39;
  if (fabsf(*(float *)&v38.i32[1]) >= 0.000001) {
    float32x4_t v39 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1));
  }
  float32x4_t v40 = *(float32x4_t *)v16;
  float32x4_t v287 = v39;
  v39.i32[2] = *(void *)(v16 + 8);
  float32x4_t v41 = (float32x4_t)vextq_s8(v36, (int8x16_t)v31, 8uLL);
  float32x4_t v42 = vsubq_f32(v39, *(float32x4_t *)(v16 + 16));
  float32x4_t v43 = vmulq_f32(v42, v42);
  float32x4_t v44 = vsubq_f32(v39, *(float32x4_t *)(v16 + 32));
  float32x4_t v45 = vmulq_f32(v44, v44);
  float32x4_t v46 = vsubq_f32(v39, *(float32x4_t *)(v18 + 16));
  float32x4_t v47 = vmulq_f32(v46, v46);
  float32x4_t v294 = v39;
  float32x4_t v48 = vsubq_f32(v39, *(float32x4_t *)(v18 + 32));
  float32x4_t v49 = vmulq_f32(v48, v48);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0])+ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0])) >= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]) + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0])))unint64_t v50 = 1; {
  else
  }
    unint64_t v50 = 0x100000000;
  float32x4_t v51 = *(float32x4_t *)(v16 + 48);
  float32x4_t v52 = *(float32x4_t *)v18;
  v40.i32[2] = 1.0;
  v51.i32[2] = 1.0;
  float32x4_t v53 = *(float32x4_t *)(v18 + 48);
  v52.i32[2] = 1.0;
  v53.i32[2] = 1.0;
  int32x4_t v54 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL), vnegq_f32(v40)), v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
  float32x4_t v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL);
  int32x4_t v56 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v52)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL));
  float32x4_t v57 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v56, v56), (int8x16_t)v56, 0xCuLL);
  float32x4_t v58 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL);
  int32x4_t v59 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), vnegq_f32(v55)), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL));
  if (fabsf(*(float *)&v59.i32[1]) >= 0.000001) {
    float32x4_t v292 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1));
  }
  int32x4_t v60 = (int32x4_t)vmlaq_f32(vmulq_f32(v58, v37), v57, v41);
  if (fabsf(*(float *)&v60.i32[1]) >= 0.000001) {
    float32x4_t v61 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 1));
  }
  else {
    float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  }
  float32x4_t v286 = v61;
  long long v63 = *(_OWORD *)(v16 + 80);
  long long v351 = *(_OWORD *)(v16 + 64);
  long long v352 = v63;
  long long v64 = *(_OWORD *)(v16 + 112);
  long long v353 = *(_OWORD *)(v16 + 96);
  long long v354 = v64;
  long long v65 = *(_OWORD *)(v16 + 16);
  float32x4_t v347 = *(float32x4_t *)v16;
  long long v348 = v65;
  long long v66 = *(_OWORD *)(v16 + 48);
  long long v349 = *(_OWORD *)(v16 + 32);
  long long v350 = v66;
  v291 = v13;
  box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v346);
  box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)v345);
  *(double *)v67.i64 = rotationZMatrix(*((float *)v346[0] + 6));
  uint64_t v69 = 0;
  uint64_t v285 = 0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 5);
  v70.i64[0] = *(void *)v346[0];
  v70.i32[2] = *((_DWORD *)v346[0] + 2);
  int32x4_t v72 = vzip1q_s32(v67, v71);
  int32x4_t v73 = vzip2q_s32(v67, v71);
  float32x4_t v75 = (float32x4_t)vdupq_laneq_s32(v74, 2);
  float32x4_t v76 = (float32x4_t)vzip1q_s32(v67, v74);
  v76.i32[2] = v71.i32[0];
  int32x4_t v77 = vzip1q_s32(v72, v74);
  float32x4_t v78 = (float32x4_t)vzip2q_s32(v72, vdupq_lane_s32(*(int32x2_t *)v74.i8, 1));
  float32x4_t v79 = (float32x4_t)vzip2q_s32(v67, v74);
  v79.i32[2] = v71.i32[2];
  int32x4_t v80 = vzip1q_s32(v73, (int32x4_t)v75);
  int32x4_t v81 = vdupq_lane_s32(*(int32x2_t *)v71.i8, 1);
  float32x4_t v82 = (float32x4_t)vtrn2q_s32(v77, (int32x4_t)v78);
  v82.i32[2] = v80.i32[1];
  do
  {
    int32x4_t v83 = v77;
    v83.i32[3] = v68;
    int32x4_t v84 = v80;
    v84.i32[3] = v75.i32[3];
    float32x4_t v75 = vsubq_f32(*(float32x4_t *)((char *)&v347 + v69), v70);
    *(float32x4_t *)((char *)&v347 + v69) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v83, v84), (int32x4_t)v78), v75.f32[0]), v82, *(float32x2_t *)v75.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v83, v84), v81), v75, 2);
    v69 += 16;
    v75.i32[3] = v84.i32[3];
    __int32 v68 = v83.i32[3];
  }
  while (v69 != 128);
  uint64_t v85 = 0;
  float32x4_t v86 = vsubq_f32(v294, v70);
  unsigned __int32 v87 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v77, v80), (int32x4_t)v78), v86.f32[0]), v82, *(float32x2_t *)v86.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v77, v80), v81), v86, 2).u32[0];
  unint64_t v88 = v50 & 1;
  do
  {
    unint64_t v89 = (unint64_t)(&v347
                           + ou3dod::MaybeClipExtendLShapeObjects(std::vector<OUBox3d> const&,std::pair<unsigned long,unsigned long>,NSArray<OUPointCloud *> *,BOOL,std::vector<OUBox3d>*,std::vector<BOOL> *,BOOL)::indices[4 * (v50 & 1) + v85]);
    LODWORD(v90) = v87;
    HIDWORD(v90) = HIDWORD(*(void *)v89);
    *(_DWORD *)(v89 | 8) = *(void *)(v89 + 8);
    *(void *)unint64_t v89 = v90;
    ++v85;
  }
  while (v85 != 4);
  uint64_t v91 = 0;
  long long v341 = v351;
  long long v342 = v352;
  long long v343 = v353;
  long long v344 = v354;
  float32x4_t v337 = v347;
  long long v338 = v348;
  long long v339 = v349;
  long long v340 = v350;
  do
  {
    *(float32x4_t *)((char *)&v337 + v91 * 4) = vaddq_f32(v70, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(_OWORD *)((char *)&v337 + v91 * 4))), v78, *(float32x2_t *)&v337.f32[v91], 1), v79, *(float32x4_t *)((char *)&v337 + v91 * 4), 2));
    v91 += 4;
  }
  while (v91 != 32);
  v79.i64[0] = *(void *)v345[0];
  v79.i32[2] = *((_DWORD *)v345[0] + 2);
  float32x4_t v288 = v79;
  long long v92 = *(_OWORD *)(v18 + 80);
  long long v333 = *(_OWORD *)(v18 + 64);
  long long v334 = v92;
  long long v93 = *(_OWORD *)(v18 + 112);
  long long v335 = *(_OWORD *)(v18 + 96);
  long long v336 = v93;
  int64x2_t v94 = *(int64x2_t *)(v18 + 16);
  float32x4_t v329 = *(float32x4_t *)v18;
  int64x2_t v330 = v94;
  long long v95 = *(_OWORD *)(v18 + 48);
  long long v331 = *(_OWORD *)(v18 + 32);
  long long v332 = v95;
  *(double *)v96.i64 = rotationZMatrix(*((float *)v345[0] + 6));
  uint64_t v98 = 0;
  int32x4_t v100 = vzip1q_s32(v96, v99);
  int32x4_t v101 = vzip2q_s32(v96, v99);
  float32x4_t v103 = (float32x4_t)vdupq_laneq_s32(v102, 2);
  float32x4_t v104 = (float32x4_t)vzip1q_s32(v96, v102);
  v104.i32[2] = v99.i32[0];
  int32x4_t v105 = vzip1q_s32(v100, v102);
  float32x4_t v106 = (float32x4_t)vzip2q_s32(v100, vdupq_lane_s32(*(int32x2_t *)v102.i8, 1));
  float32x4_t v107 = (float32x4_t)vzip2q_s32(v96, v102);
  v107.i32[2] = v99.i32[2];
  int32x4_t v108 = vzip1q_s32(v101, (int32x4_t)v103);
  int32x4_t v109 = vdupq_lane_s32(*(int32x2_t *)v99.i8, 1);
  float32x4_t v110 = (float32x4_t)vtrn2q_s32(v105, (int32x4_t)v106);
  v110.i32[2] = v108.i32[1];
  do
  {
    int32x4_t v111 = v105;
    v111.i32[3] = v103.i32[3];
    int32x4_t v112 = v108;
    v112.i32[3] = v97;
    float32x4_t v103 = vsubq_f32(*(float32x4_t *)((char *)&v329 + v98), v288);
    *(float32x4_t *)((char *)&v329 + v98) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v111, v112), (int32x4_t)v106), v103.f32[0]), v110, *(float32x2_t *)v103.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v111, v112), v109), v103, 2);
    v98 += 16;
    v103.i32[3] = v111.i32[3];
  }
  while (v98 != 128);
  uint64_t v113 = 0;
  float32x4_t v114 = vsubq_f32(v294, v288);
  unsigned __int32 v115 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v105, v108), (int32x4_t)v106), v114.f32[0]), v110, *(float32x2_t *)v114.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v105, v108), v109), v114, 2).u32[0];
  do
  {
    unint64_t v116 = (unint64_t)(&v329
                            + *(int *)((char *)ou3dod::MaybeClipExtendLShapeObjects(std::vector<OUBox3d> const&,std::pair<unsigned long,unsigned long>,NSArray<OUPointCloud *> *,BOOL,std::vector<OUBox3d>*,std::vector<BOOL> *,BOOL)::indices
                                     + ((v50 >> 28) & 0x10)
                                     + v113));
    LODWORD(v117) = v115;
    HIDWORD(v117) = HIDWORD(*(void *)v116);
    *(_DWORD *)(v116 | 8) = *(void *)(v116 + 8);
    *(void *)unint64_t v116 = v117;
    v113 += 4;
  }
  while (v113 != 16);
  uint64_t v118 = 0;
  long long v325 = v333;
  long long v326 = v334;
  long long v327 = v335;
  long long v328 = v336;
  float32x4_t v321 = v329;
  int64x2_t v322 = v330;
  long long v323 = v331;
  long long v324 = v332;
  do
  {
    *(float32x4_t *)((char *)&v321 + v118 * 4) = vaddq_f32(v288, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, COERCE_FLOAT(*(_OWORD *)((char *)&v321 + v118 * 4))), v106, *(float32x2_t *)&v321.f32[v118], 1), v107, *(float32x4_t *)((char *)&v321 + v118 * 4), 2));
    v118 += 4;
  }
  while (v118 != 32);
  if ((a8 & 1) != 0 || (box3dIou(&v337, &v321, 0, (uint64_t)&v313), v313.f32[0] <= 0.02))
  {
    v295 = a7;
    float32x4_t v120 = v337;
    long long v121 = v338;
    long long v122 = v340;
    *(_OWORD *)(v16 + 32) = v339;
    *(_OWORD *)(v16 + 48) = v122;
    *(float32x4_t *)uint64_t v16 = v120;
    *(_OWORD *)(v16 + 16) = v121;
    long long v123 = v341;
    long long v124 = v342;
    long long v125 = v344;
    *(_OWORD *)(v16 + 96) = v343;
    *(_OWORD *)(v16 + 112) = v125;
    *(_OWORD *)(v16 + 64) = v123;
    *(_OWORD *)(v16 + 80) = v124;
    long long v126 = v328;
    long long v128 = v325;
    long long v127 = v326;
    *(_OWORD *)(v18 + 96) = v327;
    *(_OWORD *)(v18 + 112) = v126;
    *(_OWORD *)(v18 + 64) = v128;
    *(_OWORD *)(v18 + 80) = v127;
    int64x2_t v129 = (int64x2_t)v321;
    int64x2_t v130 = v322;
    long long v131 = v324;
    *(_OWORD *)(v18 + 32) = v323;
    *(_OWORD *)(v18 + 48) = v131;
    *(int64x2_t *)uint64_t v18 = v129;
    *(int64x2_t *)(v18 + 16) = v130;
    int8x16_t v132 = *(int8x16_t *)v16;
    int8x16_t v133 = *(int8x16_t *)v18;
    if (v50) {
      uint64_t v134 = v16;
    }
    else {
      uint64_t v134 = v18;
    }
    float32x4_t v135 = *(float32x4_t *)(v134 + 48);
    if (*(float *)&v133.i32[2] >= *(float *)&v132.i32[2]) {
      __int32 v136 = *(void *)(v16 + 8);
    }
    else {
      __int32 v136 = *(void *)(v18 + 8);
    }
    float v137 = *(float *)(v16 + 72);
    float v138 = *(float *)(v18 + 72);
    if (v137 >= v138) {
      __int32 v139 = *(_DWORD *)(v16 + 72);
    }
    else {
      __int32 v139 = *(_DWORD *)(v18 + 72);
    }
    float v140 = vabds_f32(v137 - *(float *)&v132.i32[2], v138 - *(float *)&v133.i32[2]);
    if (v140 >= 0.15 && a5)
    {
      int8x16_t v280 = *(int8x16_t *)v18;
      int8x16_t v281 = *(int8x16_t *)v16;
      __int32 v282 = v136;
      __int32 v283 = v139;
      float32x4_t v289 = *(float32x4_t *)(v134 + 48);
      v380 = @"Sofa";
      uint64_t v381 = @"Table";
      v314.i64[0] = 0;
      float32x4_t v313 = 0uLL;
      v309[0] = &v313;
      LOBYTE(v309[1]) = 0;
      BOOL v141 = operator new(0x10uLL);
      v313.i64[0] = (uint64_t)v141;
      v313.i64[1] = (uint64_t)v141;
      long long v142 = v141 + 2;
      v314.i64[0] = (uint64_t)(v141 + 2);
      *BOOL v141 = v380;
      v141[1] = v381;
      v313.i64[1] = (uint64_t)(v141 + 2);
      if ((void *)v313.i64[0] == v141 + 2)
      {
        char v145 = 0;
      }
      else
      {
        uint64_t v143 = v313.i64[0] + 8;
        do
        {
          int v144 = objc_msgSend(*(id *)(v15 + 224 * v299 + 128), "isEqualToString:", *(void *)(v143 - 8), *(_OWORD *)&v280, *(_OWORD *)&v281);
          char v145 = v144;
          if ((void *)v143 == v142) {
            int v146 = 1;
          }
          else {
            int v146 = v144;
          }
          v143 += 8;
        }
        while (v146 != 1);
      }
      v309[0] = &v313;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v309);
      for (uint64_t i = 8; i != -8; i -= 8)

      float32x4_t v135 = v289;
      __int32 v136 = v282;
      __int32 v139 = v283;
      int8x16_t v133 = v280;
      int8x16_t v132 = v281;
      if ((v145 & 1) == 0)
      {
LABEL_56:
        v129.i64[0] = 0;
        v130.i64[0] = v88;
        int8x16_t v151 = vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v130, v129).i64[0], 0), v132, v133);
        float32x4_t v152 = v135;
        v152.i32[2] = v136;
        float32x4_t v153 = v287;
        v153.i32[2] = v136;
        float32x4_t v313 = v152;
        float32x4_t v314 = v153;
        int8x16_t v154 = v151;
        v154.i32[2] = v136;
        float32x4_t v155 = v292;
        v155.i32[2] = v136;
        int8x16_t v315 = v154;
        float32x4_t v316 = v155;
        v135.i32[2] = v139;
        float32x4_t v156 = v287;
        v156.i32[2] = v139;
        v151.i32[2] = v139;
        float32x4_t v317 = v135;
        float32x4_t v318 = v156;
        float32x4_t v157 = v292;
        v157.i32[2] = v139;
        int8x16_t v319 = v151;
        float32x4_t v320 = v157;
        box3dToCentroidSizeAngle(&v313, (uint64_t *)v312);
        if ((a8 & 1) == 0 && (*((float *)v312[0] + 4) > 1.5 || *((float *)v312[0] + 3) > 1.5))
        {
          long long v158 = v368;
          *(_OWORD *)(v16 + 64) = v367;
          *(_OWORD *)(v16 + 80) = v158;
          long long v159 = v370;
          *(_OWORD *)(v16 + 96) = v369;
          *(_OWORD *)(v16 + 112) = v159;
          long long v160 = v364;
          *(float32x4_t *)uint64_t v16 = v363;
          *(_OWORD *)(v16 + 16) = v160;
          long long v161 = v366;
          *(_OWORD *)(v16 + 32) = v365;
          *(_OWORD *)(v16 + 48) = v161;
          long long v162 = v360;
          *(_OWORD *)(v18 + 64) = v359;
          *(_OWORD *)(v18 + 80) = v162;
          long long v163 = v362;
          *(_OWORD *)(v18 + 96) = v361;
          *(_OWORD *)(v18 + 112) = v163;
          long long v164 = v356;
          *(float32x4_t *)uint64_t v18 = v355;
          *(_OWORD *)(v18 + 16) = v164;
          long long v165 = v358;
          *(_OWORD *)(v18 + 32) = v357;
          *(_OWORD *)(v18 + 48) = v165;
          ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
          uint64_t v62 = 3;
          goto LABEL_165;
        }
        uint64_t v290 = @"Sofa";
        long long v378 = v290;
        long long v166 = @"Table";
        v379 = v166;
        v309[1] = 0;
        *(void *)&long long v310 = 0;
        v309[0] = 0;
        __p[0] = v309;
        LOBYTE(__p[1]) = 0;
        long long v167 = (char *)operator new(0x10uLL);
        v309[0] = v167;
        v309[1] = v167;
        long long v168 = v167 + 16;
        *(void *)&long long v310 = v167 + 16;
        *(void *)long long v167 = v378;
        *((void *)v167 + 1) = v379;
        v309[1] = v167 + 16;
        if (v309[0] == v167 + 16)
        {
          int v171 = 0;
        }
        else
        {
          int8x16_t v169 = (char *)v309[0] + 8;
          do
          {
            int v170 = objc_msgSend(*(id *)(v15 + 224 * v299 + 128), "isEqualToString:", *((void *)v169 - 1), *(_OWORD *)&v280, *(_OWORD *)&v281);
            int v171 = v170;
            if (v169 == v168) {
              int v172 = 1;
            }
            else {
              int v172 = v170;
            }
            v169 += 8;
          }
          while (v172 != 1);
        }
        __p[0] = v309;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        for (uint64_t j = 8; j != -8; j -= 8)

        if (v171)
        {
          box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v309);
          float v175 = *((float *)v309[0] + 3);
          float v174 = *((float *)v309[0] + 4);
          box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)__p);
          if (v174 >= v175) {
            float v176 = v175;
          }
          else {
            float v176 = v174;
          }
          if (v176 <= 0.2) {
            goto LABEL_102;
          }
          float v177 = *((float *)__p[0] + 4);
          if (v177 >= *((float *)__p[0] + 3)) {
            float v177 = *((float *)__p[0] + 3);
          }
          if (v177 <= 0.2)
          {
LABEL_102:
            long long v206 = v368;
            *(_OWORD *)(v16 + 64) = v367;
            *(_OWORD *)(v16 + 80) = v206;
            long long v207 = v370;
            *(_OWORD *)(v16 + 96) = v369;
            *(_OWORD *)(v16 + 112) = v207;
            long long v208 = v364;
            *(float32x4_t *)uint64_t v16 = v363;
            *(_OWORD *)(v16 + 16) = v208;
            long long v209 = v366;
            *(_OWORD *)(v16 + 32) = v365;
            *(_OWORD *)(v16 + 48) = v209;
            long long v210 = v360;
            *(_OWORD *)(v18 + 64) = v359;
            *(_OWORD *)(v18 + 80) = v210;
            long long v211 = v362;
            *(_OWORD *)(v18 + 96) = v361;
            *(_OWORD *)(v18 + 112) = v211;
            long long v212 = v356;
            *(float32x4_t *)uint64_t v18 = v355;
            *(_OWORD *)(v18 + 16) = v212;
            long long v213 = v358;
            *(_OWORD *)(v18 + 32) = v357;
            *(_OWORD *)(v18 + 48) = v213;
            ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v309[0])
            {
              v309[1] = v309[0];
              operator delete(v309[0]);
            }
            uint64_t v62 = 7;
            goto LABEL_165;
          }
          __p[1] = __p[0];
          operator delete(__p[0]);
          if (v309[0])
          {
            v309[1] = v309[0];
            operator delete(v309[0]);
          }
        }
        v376[0] = v290;
        uint64_t v178 = objc_msgSend(MEMORY[0x263EFFA08], "setWithArray:", &unk_26EADC9E0, *(_OWORD *)&v280, *(_OWORD *)&v281);
        v377[0] = v178;
        v376[1] = v166;
        long long v179 = [MEMORY[0x263EFFA08] setWithArray:&unk_26EADC9F8];
        v377[1] = v179;
        v376[2] = @"Cabinet";
        long long v180 = [MEMORY[0x263EFFA08] setWithArray:&unk_26EADCA10];
        v377[2] = v180;
        uint64_t v181 = [NSDictionary dictionaryWithObjects:v377 forKeys:v376 count:3];

        long long v284 = (void *)v181;
        if ((int)(-1227133513 * ((uint64_t)(a1[1] - *a1) >> 5)) >= 1)
        {
          uint64_t v183 = 0;
          unint64_t v184 = (id *)(v15 + 224 * v299 + 128);
          unint64_t v185 = 0xFFFFFFC000000020 * ((uint64_t)(a1[1] - *a1) >> 5);
          while (1)
          {
            long long v310 = 0u;
            long long v311 = 0u;
            *(_OWORD *)v309 = 0u;
            box3dIou((float32x4_t *)(*a1 + v183), &v313, 0, (uint64_t)v309);
            if ((![*v184 isEqualToString:@"Cabinet"]
               || ([*(id *)(*a1 + v183 + 128) isEqualToString:@"Chair"] & 1) == 0)
              && (![*v184 isEqualToString:v166]
               || ![*(id *)(*a1 + v183 + 128) isEqualToString:@"Cabinet"]
               || *(float *)(*a1 + v183 + 72) >= (float)(*(float *)(v16 + 72) + 0.1))
              && *((float *)&v309[1] + 1) > 0.6)
            {
              break;
            }
            v183 += 224;
            if (v185 == v183) {
              goto LABEL_89;
            }
          }
          ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
          int8x16_t v214 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
          uint64_t v186 = v284;
          if (os_log_type_enabled(v214, OS_LOG_TYPE_DEBUG)) {
            ou3dod::MaybeClipExtendLShapeObjects();
          }

          long long v215 = v368;
          *(_OWORD *)(v16 + 64) = v367;
          *(_OWORD *)(v16 + 80) = v215;
          long long v216 = v370;
          *(_OWORD *)(v16 + 96) = v369;
          *(_OWORD *)(v16 + 112) = v216;
          long long v217 = v364;
          *(float32x4_t *)uint64_t v16 = v363;
          *(_OWORD *)(v16 + 16) = v217;
          long long v218 = v366;
          *(_OWORD *)(v16 + 32) = v365;
          *(_OWORD *)(v16 + 48) = v218;
          long long v219 = v360;
          *(_OWORD *)(v18 + 64) = v359;
          *(_OWORD *)(v18 + 80) = v219;
          long long v220 = v362;
          *(_OWORD *)(v18 + 96) = v361;
          *(_OWORD *)(v18 + 112) = v220;
          long long v221 = v356;
          *(float32x4_t *)uint64_t v18 = v355;
          *(_OWORD *)(v18 + 16) = v221;
          long long v222 = v358;
          uint64_t v62 = 8;
          *(_OWORD *)(v18 + 32) = v357;
          *(_OWORD *)(v18 + 48) = v222;
          goto LABEL_164;
        }
LABEL_89:
        uint64_t v186 = v284;
        BOOL ShouldForceExtendCorner = ou3dod::ShouldForceExtendCorner((id *)v16, (const OUBox3d *)v18, v182);
        float v188 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG)) {
          ou3dod::MaybeClipExtendLShapeObjects();
        }

        if (((a8 | ShouldForceExtendCorner) & 1) == 0)
        {
          uint64_t v189 = v15 + 224 * v299;
          uint64_t v191 = *(void **)(v189 + 128);
          uint64_t v190 = (void *)(v189 + 128);
          if (([v191 isEqualToString:@"Cabinet"] & 1) == 0)
          {
            uint64_t v192 = [v284 objectForKeyedSubscript:*v190];
            ou3dod::extractClassPoints(v192, &v313, v291, v309);

            int64_t v193 = (char *)v309[1] - (char *)v309[0];
            if ((void *)((char *)v309[1] - (char *)v309[0]) > (void *)0x27F) {
              goto LABEL_110;
            }
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG)) {
              ou3dod::MaybeClipExtendLShapeObjects(v193 >> 4, v188);
            }

            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
            {
              float v195 = ou3dod::Compute2DOverlapRatio((ou3dod *)&v363, (const box3d *)&v355, (const box3d *)&v313, v194);
              ou3dod::MaybeClipExtendLShapeObjects(v375, v188, v195);
            }

            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG)) {
              ou3dod::MaybeClipExtendLShapeObjects();
            }

            if (ou3dod::Compute2DOverlapRatio((ou3dod *)&v363, (const box3d *)&v355, (const box3d *)&v313, v196) >= 0.5)
            {
LABEL_110:
              uint64_t v62 = 7;
              char v197 = 1;
            }
            else
            {
              ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
              char v197 = 0;
              long long v198 = v368;
              *(_OWORD *)(v16 + 64) = v367;
              *(_OWORD *)(v16 + 80) = v198;
              long long v199 = v370;
              *(_OWORD *)(v16 + 96) = v369;
              *(_OWORD *)(v16 + 112) = v199;
              long long v200 = v364;
              *(float32x4_t *)uint64_t v16 = v363;
              *(_OWORD *)(v16 + 16) = v200;
              long long v201 = v366;
              *(_OWORD *)(v16 + 32) = v365;
              *(_OWORD *)(v16 + 48) = v201;
              long long v202 = v360;
              *(_OWORD *)(v18 + 64) = v359;
              *(_OWORD *)(v18 + 80) = v202;
              long long v203 = v362;
              *(_OWORD *)(v18 + 96) = v361;
              *(_OWORD *)(v18 + 112) = v203;
              long long v204 = v356;
              *(float32x4_t *)uint64_t v18 = v355;
              *(_OWORD *)(v18 + 16) = v204;
              long long v205 = v358;
              uint64_t v62 = 5;
              *(_OWORD *)(v18 + 32) = v357;
              *(_OWORD *)(v18 + 48) = v205;
            }
            if (v309[0])
            {
              v309[1] = v309[0];
              operator delete(v309[0]);
            }
            if ((v197 & 1) == 0)
            {
LABEL_164:

LABEL_165:
              if (v312[0])
              {
                v312[1] = v312[0];
                operator delete(v312[0]);
              }
              goto LABEL_167;
            }
          }
        }
        box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v308);
        if (*((float *)v308[0] + 3) >= *((float *)v308[0] + 4)) {
          float v223 = *((float *)v308[0] + 3);
        }
        else {
          float v223 = *((float *)v308[0] + 4);
        }
        box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)v307);
        if (*((float *)v307[0] + 3) >= *((float *)v307[0] + 4)) {
          float v224 = *((float *)v307[0] + 3);
        }
        else {
          float v224 = *((float *)v307[0] + 4);
        }
        if (a5)
        {
          long long v373 = v290;
          long long v374 = v166;
          v309[1] = 0;
          *(void *)&long long v310 = 0;
          v309[0] = 0;
          __p[0] = v309;
          LOBYTE(__p[1]) = 0;
          unint64_t v225 = (char *)operator new(0x10uLL);
          v309[0] = v225;
          v309[1] = v225;
          unint64_t v226 = v225 + 16;
          *(void *)&long long v310 = v225 + 16;
          *(void *)unint64_t v225 = v373;
          *((void *)v225 + 1) = v374;
          v309[1] = v225 + 16;
          if (v309[0] == v225 + 16)
          {
            int v229 = 0;
          }
          else
          {
            std::vector<int> v227 = (id *)(v15 + 224 * v299 + 128);
            id v228 = (char *)v309[0] + 8;
            do
            {
              int v229 = [*v227 isEqualToString:*((void *)v228 - 1)];
              if (v228 == v226) {
                int v230 = 1;
              }
              else {
                int v230 = v229;
              }
              v228 += 8;
            }
            while (v230 != 1);
          }
          int v231 = v223 < v224 ? v229 : 0;
          __p[0] = v309;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          for (uint64_t k = 8; k != -8; k -= 8)

          if (v231)
          {
            long long v233 = v368;
            *(_OWORD *)(v16 + 64) = v367;
            *(_OWORD *)(v16 + 80) = v233;
            long long v234 = v370;
            *(_OWORD *)(v16 + 96) = v369;
            *(_OWORD *)(v16 + 112) = v234;
            long long v235 = v364;
            *(float32x4_t *)uint64_t v16 = v363;
            *(_OWORD *)(v16 + 16) = v235;
            long long v236 = v366;
            *(_OWORD *)(v16 + 32) = v365;
            *(_OWORD *)(v16 + 48) = v236;
            long long v237 = v360;
            *(_OWORD *)(v18 + 64) = v359;
            *(_OWORD *)(v18 + 80) = v237;
            long long v238 = v362;
            *(_OWORD *)(v18 + 96) = v361;
            *(_OWORD *)(v18 + 112) = v238;
            long long v239 = v356;
            *(float32x4_t *)uint64_t v18 = v355;
            *(_OWORD *)(v18 + 16) = v239;
            long long v240 = v358;
            uint64_t v62 = 6;
            *(_OWORD *)(v18 + 32) = v357;
            *(_OWORD *)(v18 + 48) = v240;
LABEL_160:
            if (v307[0])
            {
              v307[1] = v307[0];
              operator delete(v307[0]);
            }
            if (v308[0])
            {
              v308[1] = v308[0];
              operator delete(v308[0]);
            }
            goto LABEL_164;
          }
        }
        float32x4_t v242 = *(float32x4_t *)v16;
        float32x4_t v241 = *(float32x4_t *)(v16 + 16);
        uint64_t v243 = v286.i64[0];
        float32x2_t v244 = vsub_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v287.f32);
        int32x2_t v245 = (int32x2_t)vmul_f32(v244, v244);
        float32x4_t v246 = *(float32x4_t *)(v16 + 32);
        float32x4_t v247 = *(float32x4_t *)(v16 + 48);
        float32x2_t v248 = vsub_f32(*(float32x2_t *)v246.f32, *(float32x2_t *)v287.f32);
        int32x2_t v249 = (int32x2_t)vmul_f32(v248, v248);
        int32x2_t v250 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v245, v249), (float32x2_t)vzip2_s32(v245, v249)));
        float32x2_t v251 = vsub_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v286.f32);
        int32x2_t v252 = (int32x2_t)vmul_f32(v251, v251);
        float32x2_t v253 = vsub_f32(*(float32x2_t *)v246.f32, *(float32x2_t *)v286.f32);
        int32x2_t v254 = (int32x2_t)vmul_f32(v253, v253);
        float32x2_t v255 = vsub_f32(*(float32x2_t *)v16, *(float32x2_t *)v292.f32);
        int32x2_t v256 = (int32x2_t)vmul_f32(v255, v255);
        float32x2_t v257 = vsub_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v292.f32);
        int32x2_t v258 = (int32x2_t)vmul_f32(v257, v257);
        float32x2_t v259 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v252, v256), (float32x2_t)vzip2_s32(v252, v256)));
        float32x2_t v260 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v254, v258), (float32x2_t)vzip2_s32(v254, v258)));
        int32x2_t v261 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v259, v260), (int8x8_t)v260, (int8x8_t)v259);
        int32x2_t v262 = vcgt_f32((float32x2_t)vzip2_s32(v261, v250), (float32x2_t)vzip1_s32(v261, v250));
        if (v262.i8[0])
        {
          if (v262.i8[4])
          {
            *(_DWORD *)(v16 + 8) = v242.i32[2];
            unint64_t v263 = vsubq_f32(vaddq_f32(v286, v242), v241).u64[0];
            *(void *)uint64_t v16 = v263;
            *(void *)(v16 + 64) = v263;
            *(_DWORD *)(v16 + 24) = v241.i32[2];
            *(void *)(v16 + 16) = v286.i64[0];
            long long v264 = (uint64_t *)(v16 + 80);
          }
          else
          {
            *(_DWORD *)(v16 + 56) = v247.i32[2];
            unint64_t v267 = vsubq_f32(vaddq_f32(v286, v247), v246).u64[0];
            *(void *)(v16 + 48) = v267;
            *(void *)(v16 + 112) = v267;
            *(_DWORD *)(v16 + 40) = v246.i32[2];
            *(void *)(v16 + 32) = v286.i64[0];
            long long v264 = (uint64_t *)(v16 + 96);
          }
        }
        else
        {
          if (v262.i8[4])
          {
            *(_DWORD *)(v16 + 24) = v241.i32[2];
            unint64_t v265 = vsubq_f32(vaddq_f32(v292, v241), v242).u64[0];
            *(void *)(v16 + 16) = v265;
            *(_DWORD *)(v16 + 8) = v242.i32[2];
            *(void *)uint64_t v16 = v292.i64[0];
            *(void *)(v16 + 80) = v265;
            uint64_t v243 = v292.i64[0];
            int v266 = v285;
            long long v264 = (uint64_t *)(v16 + 64);
LABEL_144:
            *long long v264 = v243;
            uint64_t v304 = 0;
            v305 = 0;
            unint64_t v306 = 0;
            if (v266 >= 1)
            {
              unint64_t v269 = 0;
              uint64_t v270 = v266;
              do
              {
                if (v269 != v299 && v269 != v298)
                {
                  uint64_t v271 = *v297;
                  long long v310 = 0u;
                  long long v311 = 0u;
                  v272 = (float32x4_t *)(v271 + 224 * v269);
                  *(_OWORD *)v309 = 0u;
                  box3dIou(v272, (float32x4_t *)v16, 0, (uint64_t)v309);
                  long long v302 = 0u;
                  long long v303 = 0u;
                  *(_OWORD *)std::vector<int> __p = 0u;
                  box3dIou(v272, (float32x4_t *)v18, 0, (uint64_t)__p);
                  memset(v300, 0, sizeof(v300));
                  box3dIou(v272, &v313, 0, (uint64_t)v300);
                  if (*((float *)&v309[1] + 1) > 0.2 || *((float *)&__p[1] + 1) > 0.2 || *((float *)v300 + 3) > 0.2)
                  {
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
                    {
                      float v278 = ou3dod::Compute2DOverlapRatio((ou3dod *)v16, (const box3d *)v18, (const box3d *)v272, v273);
                      *(_DWORD *)std::string buf = 134217984;
                      double v372 = v278;
                      _os_log_debug_impl(&dword_237C17000, v188, OS_LOG_TYPE_DEBUG, "[3DOD Lshape merge] 2D Overlap Ratio %f", buf, 0xCu);
                    }

                    if (ou3dod::Compute2DOverlapRatio((ou3dod *)v16, (const box3d *)v18, (const box3d *)v272, v274) > 0.6)
                    {
                      *(void *)(*v295 + ((v269 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v269;
                      v275 = (const OUBox3d *)(*v297 + 224 * v269);
                      v276 = v305;
                      if ((unint64_t)v305 >= v306)
                      {
                        uint64_t v277 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v304, v275);
                      }
                      else
                      {
                        OUBox3d::OUBox3d(v305, v275);
                        uint64_t v277 = (OUBox3d *)((char *)v276 + 224);
                      }
                      v305 = v277;
                    }
                  }
                }
                ++v269;
              }
              while (v269 != v270);
            }
            ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, (const OUBox3d *)1);
            v309[0] = &v304;
            std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v309);
            uint64_t v62 = 0;
            goto LABEL_160;
          }
          *(_DWORD *)(v16 + 40) = v246.i32[2];
          unint64_t v268 = vsubq_f32(vaddq_f32(v292, v246), v247).u64[0];
          *(void *)(v16 + 32) = v268;
          *(_DWORD *)(v16 + 56) = v247.i32[2];
          *(void *)(v16 + 48) = v292.i64[0];
          *(void *)(v16 + 96) = v268;
          long long v264 = (uint64_t *)(v16 + 112);
          uint64_t v243 = v292.i64[0];
        }
        int v266 = v285;
        goto LABEL_144;
      }
    }
    else if (v140 >= 0.15)
    {
      goto LABEL_56;
    }
    uint64_t v148 = -64;
    do
    {
      uint64_t v149 = (__int32 *)(v15 + 224 * v299 + 72 + v148);
      v149[16] = v139;
      uint64_t v150 = (__int32 *)(v15 + 224 * v298 + 72 + v148);
      v150[16] = v139;
      *uint64_t v149 = v136;
      *uint64_t v150 = v136;
      v148 += 16;
    }
    while (v148);
    goto LABEL_56;
  }
  ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
  __int32 v119 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG)) {
    ou3dod::MaybeClipExtendLShapeObjects();
  }

  uint64_t v62 = 2;
LABEL_167:
  if (v345[0])
  {
    v345[1] = v345[0];
    operator delete(v345[0]);
  }
  id v13 = v291;
  if (v346[0])
  {
    v346[1] = v346[0];
    operator delete(v346[0]);
  }
LABEL_171:

  return v62;
}

void sub_237C4DC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }

  if (a68) {
    operator delete(a68);
  }
  float32x4_t v70 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v70;
    operator delete(v70);
  }
  int32x4_t v71 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v71;
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

void ou3dod::LShapeBeautification(void *a1, unint64_t a2, unint64_t a3, void *a4, int a5, uint64_t *a6, void *a7, void *a8)
{
  id v15 = a4;
  if (((*(void *)(*a7 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
    && ((*(void *)(*a7 + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
  {
    float32x4_t v32 = a1;
    float v16 = boxVolume((const box3d *)(*a6 + 224 * a2));
    float v17 = boxVolume((const box3d *)(*a6 + 224 * a3));
    if (v16 <= v17) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = a3;
    }
    if (v16 > v17) {
      a3 = a2;
    }
    uint64_t v31 = *a6;
    float32x4_t v34 = 0;
    float32x4_t v35 = 0;
    std::vector<int> __p = 0;
    p_p = &__p;
    char v37 = 0;
    float32x4_t v30 = @"Sofa";
    long long v19 = (char *)operator new(8uLL);
    std::vector<int> __p = v19;
    float32x4_t v34 = v19;
    float32x4_t v35 = v19 + 8;
    long long v20 = v30;
    *(void *)long long v19 = v20;
    float32x4_t v34 = v19 + 8;
    if (__p == v19 + 8)
    {
      BOOL v22 = 0;
    }
    else
    {
      long long v21 = (char *)__p - 8;
      while (![*(id *)(v31 + 224 * v18 + 128) isEqualToString:*((void *)v21 + 1)])
      {
        v21 += 8;
        if (v21 == v19)
        {
          BOOL v22 = 0;
          goto LABEL_15;
        }
      }
      BOOL v22 = (float)(*(float *)(*a6 + 224 * a3 + 72) - *(float *)(*a6 + 224 * v18 + 72)) > 0.15;
    }
LABEL_15:
    p_p = &__p;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

    if (v22) {
      uint64_t v23 = a3;
    }
    else {
      uint64_t v23 = v18;
    }
    if (!v22) {
      uint64_t v18 = a3;
    }
    id v24 = [*(id *)(*a6 + 224 * v18 + 144) UUIDString];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v24 UTF8String]);
    long long v25 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(a8, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }

    if (v25) {
      uint64_t v26 = v18;
    }
    else {
      uint64_t v26 = v23;
    }
    if (v25) {
      uint64_t v27 = v23;
    }
    else {
      uint64_t v27 = v18;
    }
    id v28 = [*(id *)(*a6 + 224 * v26 + 144) UUIDString];
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v28 UTF8String]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)a8, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }

    int v29 = ou3dod::MaybeClipExtendLShapeObjects(v32, v26, v27, v15, a5, a6, a7, 0);
    if (a5 && v29 == 6) {
      ou3dod::MaybeClipExtendLShapeObjects(v32, v27, v26, v15, 1, a6, a7, 0);
    }
  }
}

void sub_237C4E160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(void *a1, char **a2, char **a3)
{
  unsigned int v5 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, *a3);
  return a1;
}

void sub_237C4E228(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)a2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)(a2 + 24));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5 ^ v4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5 ^ v4;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  float v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  float32x2_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = *((void *)v12 + 1);
      if (v7 == v14)
      {
        if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v13, v12 + 16, a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      float32x2_t v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

{
  unint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  char v17;

  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)a2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)(a2 + 24));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5 ^ v4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5 ^ v4;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  float v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  float32x2_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = *((void *)v12 + 1);
      if (v14 == v7)
      {
        if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v13, v12 + 16, a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      float32x2_t v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    float v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = a2[47];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = a2[47];
  }
  else {
    uint64_t v13 = *((void *)a2 + 4);
  }
  uint64_t v14 = a3[47];
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)a3 + 4);
  }
  if (v13 != v14) {
    return 0;
  }
  char v16 = (const void **)(a2 + 24);
  long long v19 = (unsigned __int8 *)*((void *)a3 + 3);
  uint64_t v18 = a3 + 24;
  char v17 = v19;
  if (v15 >= 0) {
    long long v20 = v18;
  }
  else {
    long long v20 = v17;
  }
  if ((v12 & 0x80) != 0) {
    return memcmp(*v16, v20, *((void *)a2 + 4)) == 0;
  }
  if (!a2[47]) {
    return 1;
  }
  uint64_t v21 = v12 - 1;
  do
  {
    int v23 = *(unsigned __int8 *)v16;
    char v16 = (const void **)((char *)v16 + 1);
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  float32x4_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v25, (uint64_t)a2);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v26, (uint64_t)(a2 + 24)) ^ v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_237C4E9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), *a3);
  v8[64] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_237C4EA3C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint8x8_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_237C4EAD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *int v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_237C4ED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OU3DLShapeObjectMergerUtils_mm()
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = @"Unknown";
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  unint64_t v20 = @"Door";
  *((void *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  BOOL v19 = @"Window";
  *((void *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  float v17 = @"Fireplace";
  *((void *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  float v18 = @"Stairs";
  *((void *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  uint64_t v13 = @"Bed";
  *((void *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  int8x16_t v36 = @"Cabinet";
  int v37 = 15;
  float v16 = @"Chair";
  int32x4_t v38 = v16;
  int v39 = 16;
  float32x4_t v40 = v36;
  int v41 = 17;
  float32x4_t v42 = v40;
  int v43 = 18;
  unint64_t v15 = @"Sofa";
  float32x4_t v44 = v15;
  int v45 = 19;
  uint64_t v14 = @"Table";
  float32x4_t v46 = v14;
  int v47 = 20;
  unint64_t v12 = @"Toilet";
  float32x4_t v48 = v12;
  int v49 = 21;
  v0 = @"Sink";
  unint64_t v50 = v0;
  int v51 = 22;
  uint64_t v11 = @"Bathtub";
  float32x4_t v52 = v11;
  int v53 = 23;
  id v54 = *((id *)&v32 + 1);
  int v55 = 24;
  uint64_t v1 = @"Refrigerator";
  int32x4_t v56 = v1;
  int v57 = 25;
  float32x4_t v2 = @"Stove";
  float32x4_t v58 = v2;
  int v59 = 26;
  unint64_t v3 = @"Washer";
  int32x4_t v60 = v3;
  int v61 = 27;
  long long v4 = @"Oven";
  uint64_t v62 = v4;
  int v63 = 28;
  uint8x8_t v5 = @"Dishwasher";
  long long v64 = v5;
  int v65 = 29;
  id v66 = v54;
  int v67 = 30;
  long long v6 = v42;
  __int32 v68 = v6;
  int v69 = 31;
  id v70 = v66;
  int v71 = 32;
  uint64_t v7 = @"Screen";
  int32x4_t v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v31 = xmmword_237CB4C48;
  long long v32 = unk_237CB4C58;
  long long v33 = xmmword_237CB4C68;
  long long v34 = unk_237CB4C78;
  long long v27 = xmmword_237CB4C08;
  long long v28 = unk_237CB4C18;
  long long v29 = xmmword_237CB4C28;
  long long v30 = unk_237CB4C38;
  long long v23 = xmmword_237CB4BC8;
  long long v24 = unk_237CB4BD8;
  long long v25 = xmmword_237CB4BE8;
  long long v26 = unk_237CB4BF8;
  long long v21 = xmmword_237CB4BA8;
  long long v22 = unk_237CB4BB8;
  uint64_t v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = @"Shelf";
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((void *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((void *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((void *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((void *)&v33 + 1) = @"Stool";
  LODWORD(v34) = 13;
  *((void *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  int8x16_t v36 = v14;
  int v37 = 15;
  int32x4_t v38 = v7;
  int v39 = 16;
  float32x4_t v40 = v15;
  int v41 = 17;
  float32x4_t v42 = v18;
  int v43 = 18;
  float32x4_t v44 = v19;
  int v45 = 19;
  float32x4_t v46 = v20;
  int v47 = 20;
  float32x4_t v48 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
}

void sub_237C4F404(_Unwind_Exception *a1)
{
  for (uint64_t i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},std::set<unsigned char>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void OUCannyEdgeDetectorSemantic::OUCannyEdgeDetectorSemantic(OUCannyEdgeDetectorSemantic *this, id *a2)
{
  v23[1] = *MEMORY[0x263EF8340];
  long long v4 = (void *)OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_26EAD6010;
  v4[19] = 0;
  v4[20] = 0;
  *((void *)this + 21) = a2[7];
  int v20 = 1038323257;
  std::vector<float>::vector(__p, 9uLL, &v20);
  id v5 = objc_alloc(MEMORY[0x263F13268]);
  uint64_t v6 = [v5 initWithDevice:*((void *)this + 1) kernelWidth:3 kernelHeight:3 weights:__p[0]];
  uint64_t v7 = (void *)*((void *)this + 19);
  *((void *)this + 19) = v6;

  if (*((__CFString **)this + 21) == @"Unknown")
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Object type shouldn't be unknown for edge detection.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  uint64_t v8 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 18, [*((id *)this + 5) pixelFormat]);
  unint64_t v9 = (void *)*((void *)this + 20);
  *((void *)this + 20) = v8;

  uint64_t v10 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 16, 10);
  uint64_t v11 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v10;

  if (*((_DWORD *)this + 16) != *((_DWORD *)this + 18) || *((_DWORD *)this + 17) != *((_DWORD *)this + 19))
  {
    uint64_t v12 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 18, 10);
    uint64_t v13 = (void *)*((void *)this + 4);
    *((void *)this + 4) = v12;
  }
  uint64_t v14 = [objc_alloc(MEMORY[0x263F13258]) initWithDevice:*((void *)this + 1)];
  unint64_t v15 = (void *)*((void *)this + 7);
  *((void *)this + 7) = v14;

  LODWORD(v16) = *((_DWORD *)a2 + 1);
  [*((id *)this + 7) setHighThreshold:v16];
  LODWORD(v17) = *(_DWORD *)a2;
  [*((id *)this + 7) setLowThreshold:v17];
  [*((id *)this + 7) setUseFastMode:*((unsigned __int8 *)a2 + 8)];
  uint64_t v22 = *MEMORY[0x263F04130];
  v23[0] = MEMORY[0x263EFFA78];
  CFDictionaryRef v18 = [NSDictionary dictionaryWithObjects:v23 forKeys:&v22 count:1];
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], *((int *)this + 16), *((int *)this + 17), 0x4C303038u, v18, (CVPixelBufferRef *)this + 18);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_237C4F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  __cxa_free_exception(v13);
  if (__p) {
    operator delete(__p);
  }

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(v12);
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(void **this)
{
  *this = &unk_26EAD6708;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
}

void OUCannyEdgeDetectorSemantic::GenerateSourceTexture(uint64_t a1, void *a2)
{
  id v33 = a2;
  if ([v33 semanticLabelBufferOnWideCamera]) {
    unint64_t v3 = (__CVBuffer *)[v33 semanticLabelBufferOnWideCamera];
  }
  else {
    unint64_t v3 = (__CVBuffer *)[v33 semanticLabelBuffer];
  }
  long long v4 = v3;
  if (CVPixelBufferGetWidth(v3) != *(_DWORD *)(a1 + 64) || CVPixelBufferGetHeight(v4) != *(_DWORD *)(a1 + 68))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Semantic edge detection image size doesn't match.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  OUCannyEdgeDetectorSemantic::CopyCVPixelBuffer((CVPixelBufferRef *)a1, v4);
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 144), 0);
  int Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 144));
  int Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 144));
  BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 144));
  uint64_t v8 = qword_26AF27300;
  if (qword_26AF27300)
  {
    unint64_t v9 = BaseAddress;
    unint64_t v10 = *(void *)(a1 + 168);
    uint64_t v11 = &qword_26AF27300;
    do
    {
      unint64_t v12 = *(void *)(v8 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        uint64_t v14 = (uint64_t *)v8;
      }
      else {
        uint64_t v14 = (uint64_t *)(v8 + 8);
      }
      if (v13) {
        uint64_t v11 = (uint64_t *)v8;
      }
      uint64_t v8 = *v14;
    }
    while (*v14);
    if (v11 != &qword_26AF27300 && v10 >= v11[4])
    {
      uint64_t v16 = (Width * Height);
      if (v16 << 32)
      {
        double v17 = &v9[(int)v16];
        CFDictionaryRef v18 = v15 + 1;
        do
        {
          uint64_t v19 = *v18;
          if (!*v18) {
            goto LABEL_30;
          }
          unsigned int v20 = *v9;
          long long v21 = v15 + 1;
          do
          {
            unsigned int v22 = *(unsigned __int8 *)(v19 + 25);
            BOOL v23 = v22 >= v20;
            if (v22 >= v20) {
              long long v24 = (uint64_t *)v19;
            }
            else {
              long long v24 = (uint64_t *)(v19 + 8);
            }
            if (v23) {
              long long v21 = (uint64_t *)v19;
            }
            uint64_t v19 = *v24;
          }
          while (*v24);
          if (v21 != v18 && *((unsigned __int8 *)v21 + 25) <= v20) {
            unsigned __int8 v25 = *(unsigned char *)(*v15 + 25);
          }
          else {
LABEL_30:
          }
            unsigned __int8 v25 = 0;
          *v9++ = v25;
        }
        while (v9 != v17);
      }
      IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 144));
      long long v27 = (void *)MEMORY[0x263F12A50];
      size_t v28 = IOSurfaceGetWidth(IOSurface);
      long long v29 = [v27 texture2DDescriptorWithPixelFormat:10 width:v28 height:IOSurfaceGetHeight(IOSurface) mipmapped:0];
      uint64_t v30 = [*(id *)(a1 + 8) newTextureWithDescriptor:v29 iosurface:IOSurface plane:0];
      long long v31 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v30;
    }
  }
}

void sub_237C4FA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *OUCannyEdgeDetectorSemantic::CopyCVPixelBuffer(CVPixelBufferRef *this, CVPixelBufferRef pixelBuffer)
{
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  int Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  CVPixelBufferLockBaseAddress(this[18], 0);
  uint64_t v7 = CVPixelBufferGetBaseAddress(this[18]);
  return memcpy(v7, BaseAddress, Height * BytesPerRow);
}

void *std::map<NSString * {__strong},std::set<unsigned char>>::at(uint64_t a1, unint64_t *a2)
{
  float32x4_t v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      float32x4_t v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    float32x4_t v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

void OUCannyEdgeDetectorSemantic::PostProcess(id *this)
{
  id v3 = [this[2] commandBuffer];
  objc_msgSend(this[19], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
  [v3 commit];
  [v3 waitUntilCompleted];
  id v2 = this[5];
  this[5] = this[20];
  this[20] = v2;
}

void sub_237C4FC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorSemantic::~OUCannyEdgeDetectorSemantic(OUCannyEdgeDetectorSemantic *this)
{
  *(void *)this = &unk_26EAD6010;
  id v2 = (__CVBuffer *)*((void *)this + 18);
  if (v2) {
    CVPixelBufferRelease(v2);
  }

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface((void **)this);
}

{
  uint64_t vars8;

  OUCannyEdgeDetectorSemantic::~OUCannyEdgeDetectorSemantic(this);
  JUMPOUT(0x237E2C510);
}

void *std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(void *a1, id *a2, uint64_t a3)
{
  *a1 = *a2;
  std::set<unsigned char>::set[abi:ne180100](a1 + 1, a3);
  return a1;
}

void sub_237C4FD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned char>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned char>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_237C4FD80(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned char>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(v5, v6, v4 + 25, v4 + 25);
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, unsigned char *a4)
{
  uint64_t v6 = std::__tree<unsigned char>::__find_equal<unsigned char>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned char>::__find_equal<unsigned char>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  id v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          id v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        id v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          id v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        id v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    unsigned int v6 = (_DWORD *)a1[1];
    unsigned int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_237C500BC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<unsigned char>::set[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_237C50140(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},std::set<unsigned char>>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},std::set<unsigned char>> const&>((uint64_t **)a1, v4, a2, (id *)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_237C501C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},std::set<unsigned char>> const&>(uint64_t **a1, void *a2, unint64_t *a3, id *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__find_equal<NSString * {__strong}>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__construct_node<std::pair<NSString * const {__strong},std::set<unsigned char>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<int>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__find_equal<NSString * {__strong}>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__construct_node<std::pair<NSString * const {__strong},std::set<unsigned char>> const&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100](v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_237C5046C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::set<unsigned char>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100](void *a1, id *a2)
{
  uint64_t v3 = (uint64_t)(a2 + 1);
  *a1 = *a2;
  std::set<unsigned char>::set[abi:ne180100](a1 + 1, v3);
  return a1;
}

void sub_237C504CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::set<unsigned char>>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<int>::destroy(a2 + 40, *(void **)(a2 + 48));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);

    operator delete(a2);
  }
}

void _GLOBAL__sub_I_OUCannyEdgeDetectorSemantic_mm()
{
  v23[4] = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x237E2CC70]();
  __int16 v15 = 4366;
  char v16 = 30;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v17, (unsigned __int8 *)&v15, 3);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v19, (id *)&OU3DObjectTypeCabinet, (uint64_t)v17);
  __int16 v11 = 4366;
  char v12 = 30;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v13, (unsigned __int8 *)&v11, 3);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v20, (id *)&OU3DObjectTypeShelf, (uint64_t)v13);
  unsigned __int8 v8 = 19;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v9, &v8, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v21, (id *)&OU3DObjectTypeTable, (uint64_t)v9);
  unsigned __int8 v5 = 18;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v6, &v5, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v22, (id *)&OU3DObjectTypeSofa, (uint64_t)v6);
  unsigned __int8 v2 = 32;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v3, &v2, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v23, (id *)&OU3DObjectTypeScreen, (uint64_t)v3);
  for (uint64_t i = 0; i != -20; i -= 4)
  {
    std::__tree<int>::destroy((uint64_t)&v23[i + 1], (void *)v23[i + 2]);
  }
  std::__tree<int>::destroy((uint64_t)v3, v4);
  std::__tree<int>::destroy((uint64_t)v6, v7);
  std::__tree<int>::destroy((uint64_t)v9, v10);
  std::__tree<int>::destroy((uint64_t)v13, v14);
  std::__tree<int>::destroy((uint64_t)v17, v18);
}

void sub_237C507E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  _GLOBAL__sub_I_OUCannyEdgeDetectorSemantic_mm_cold_1(v31 + 160, (uint64_t)&a30);
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  std::__tree<int>::destroy((uint64_t)&a15, a16);
  std::__tree<int>::destroy((uint64_t)&a19, a20);
  std::__tree<int>::destroy((uint64_t)&a23, a24);
  std::__tree<int>::destroy((uint64_t)&a27, *(void **)(v30 + 8));
  _Unwind_Resume(a1);
}

void sub_237C50C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_237C50EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C50FE0(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_237C51518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void vectorFromNSArray(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  int v7 = 0;
  std::vector<float>::vector(a2, [v3 count], &v7);
  for (unint64_t i = 0; [v3 count] > i; ++i)
  {
    unsigned __int8 v5 = [v3 objectAtIndexedSubscript:i];
    [v5 floatValue];
    *(_DWORD *)(*a2 + 4 * i) = v6;
  }
}

void sub_237C51708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C518C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C51B30(_Unwind_Exception *a1, uint64_t a2, OUBox3d *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_237C51C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CollectPointCloudFromBox(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v45 = a2[3];
  float32x4_t v47 = *a2;
  float32x4_t v40 = a2[4];
  float32x4_t v41 = a2[6];
  float32x4_t v43 = a2[1];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a3, (a1[1] - *a1) >> 4);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5 != *a1)
  {
    unint64_t v7 = 0;
    float32x4_t v8 = vsubq_f32(v47, v45);
    float32x4_t v9 = vmulq_f32(v8, v8);
    v9.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
    float v10 = sqrtf(v9.f32[0]);
    float32x2_t v11 = vrsqrte_f32((float32x2_t)v9.u32[0]);
    float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11)));
    float32x4_t v13 = vmulq_n_f32(v8, vmul_f32(v12, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v12, v12))).f32[0]);
    float32x4_t v14 = vsubq_f32(v47, v43);
    float32x4_t v15 = vmulq_f32(v14, v14);
    v15.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
    float32x2_t v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    float32x2_t v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
    float32x4_t v44 = vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    float32x4_t v46 = v13;
    float v18 = v10 * 0.5;
    float v19 = sqrtf(v15.f32[0]) * 0.5;
    float32x4_t v20 = vsubq_f32(v47, v40);
    float32x4_t v21 = vmulq_f32(v20, v20);
    float v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0])* 0.5;
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
    float32x4_t v42 = vmulq_f32(vaddq_f32(v47, v41), v21);
    do
    {
      if (vabds_f32(COERCE_FLOAT(*(void *)(v6 + 16 * v7 + 8)), v42.f32[2]) <= v22)
      {
        float32x4_t v48 = *(float32x4_t *)(v6 + 16 * v7);
        float32x4_t v23 = vsubq_f32(v48, v42);
        float32x4_t v24 = vmulq_f32(v46, v23);
        float32x4_t v25 = vmulq_f32(v44, v23);
        float v26 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]) <= v18&& v26 <= v19)
        {
          long long v29 = *(float32x4_t **)(a3 + 8);
          unint64_t v28 = *(void *)(a3 + 16);
          if ((unint64_t)v29 >= v28)
          {
            uint64_t v31 = ((uint64_t)v29 - *(void *)a3) >> 4;
            if ((unint64_t)(v31 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v28 - *(void *)a3;
            uint64_t v33 = v32 >> 3;
            if (v32 >> 3 <= (unint64_t)(v31 + 1)) {
              uint64_t v33 = v31 + 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              uint64_t v35 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v34);
            }
            else {
              uint64_t v35 = 0;
            }
            int8x16_t v36 = (float32x4_t *)&v35[16 * v31];
            float32x4_t *v36 = v48;
            f32 = (_OWORD *)v36[1].f32;
            int32x4_t v38 = *(char **)a3;
            int v37 = *(char **)(a3 + 8);
            if (v37 != *(char **)a3)
            {
              do
              {
                float32x4_t v39 = *((float32x4_t *)v37 - 1);
                v37 -= 16;
                v36[-1] = v39;
                --v36;
              }
              while (v37 != v38);
              int v37 = *(char **)a3;
            }
            *(void *)a3 = v36;
            *(void *)(a3 + 8) = f32;
            *(void *)(a3 + 16) = &v35[16 * v34];
            if (v37) {
              operator delete(v37);
            }
          }
          else
          {
            float32x4_t *v29 = v48;
            f32 = (_OWORD *)v29[1].f32;
          }
          *(void *)(a3 + 8) = f32;
          uint64_t v6 = *a1;
          uint64_t v5 = a1[1];
        }
      }
      ++v7;
    }
    while (v7 < (v5 - v6) >> 4);
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv(a3);
}

void sub_237C51F70(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v6 >= (v3 - (uint64_t)v4) >> 4) {
    return;
  }
  if (v5 == v4)
  {
    float32x2_t v11 = 0;
    uint64_t v9 = 16 * v6;
    goto LABEL_8;
  }
  unint64_t v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
  unint64_t v4 = *(char **)a1;
  float32x4_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[16 * v6];
  float32x2_t v11 = &v7[16 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    long long v13 = *((_OWORD *)v8 - 1);
    v8 -= 16;
    *(_OWORD *)(v12 - 16) = v13;
    v12 -= 16;
  }
  while (v8 != v4);
  unint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void CollectPointCloudFromBox(OUPointCloud *a1@<X0>, float32x4_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1;
  float32x4_t v65 = *a2;
  float32x4_t v67 = a2[1];
  float32x4_t v69 = a2[3];
  float32x4_t v62 = a2[4];
  float32x4_t v63 = a2[6];
  int32x4_t v77 = 0;
  float32x4_t v78 = 0;
  float32x4_t v79 = 0;
  int32x4_t v74 = 0;
  float32x4_t v75 = 0;
  float32x4_t v76 = 0;
  std::vector<int> __p = 0;
  int32x4_t v72 = 0;
  uint64_t v73 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&v77, [(OUPointCloud *)v4 count]);
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm(&v74, [(OUPointCloud *)v4 count]);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&__p, [(OUPointCloud *)v4 count]);
  unint64_t v5 = 0;
  float32x4_t v6 = vsubq_f32(v65, v69);
  float32x4_t v7 = vmulq_f32(v6, v6);
  v7.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  float v8 = sqrtf(v7.f32[0]);
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9)));
  float32x4_t v11 = vmulq_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v10, v10))).f32[0]);
  float32x4_t v12 = vsubq_f32(v65, v67);
  float32x4_t v13 = vmulq_f32(v12, v12);
  v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
  float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  float32x4_t v68 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  float32x4_t v70 = v11;
  float v16 = v8 * 0.5;
  float v17 = sqrtf(v13.f32[0]) * 0.5;
  float32x4_t v18 = vsubq_f32(v65, v62);
  float32x4_t v19 = vmulq_f32(v18, v18);
  float v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])* 0.5;
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  float32x4_t v66 = vmulq_f32(vaddq_f32(v65, v63), v19);
  while ([(OUPointCloud *)v4 count] > v5)
  {
    uint64_t v21 = [(OUPointCloud *)v4 points];
    if (vabds_f32(COERCE_FLOAT(*(void *)(v21 + 16 * v5 + 8)), v66.f32[2]) <= v20)
    {
      float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v21 + 16 * v5), v66);
      float32x4_t v23 = vmulq_f32(v70, v22);
      float32x4_t v24 = vmulq_f32(v68, v22);
      float v25 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) <= v16&& v25 <= v17)
      {
        long long v64 = *(_OWORD *)(v21 + 16 * v5);
        long long v27 = v78;
        if (v78 >= v79)
        {
          uint64_t v29 = (v78 - (unsigned char *)v77) >> 4;
          if ((unint64_t)(v29 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v30 = (v79 - (unsigned char *)v77) >> 3;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if ((unint64_t)(v79 - (unsigned char *)v77) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31) {
            uint64_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v79, v31);
          }
          else {
            uint64_t v32 = 0;
          }
          uint64_t v33 = &v32[16 * v29];
          *(_OWORD *)uint64_t v33 = v64;
          unint64_t v28 = v33 + 16;
          uint64_t v35 = (char *)v77;
          unint64_t v34 = v78;
          if (v78 != v77)
          {
            do
            {
              long long v36 = *((_OWORD *)v34 - 1);
              v34 -= 16;
              *((_OWORD *)v33 - 1) = v36;
              v33 -= 16;
            }
            while (v34 != v35);
            unint64_t v34 = (char *)v77;
          }
          int32x4_t v77 = v33;
          float32x4_t v78 = v28;
          float32x4_t v79 = &v32[16 * v31];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_OWORD *)float32x4_t v78 = v64;
          unint64_t v28 = v27 + 16;
        }
        float32x4_t v78 = v28;
        uint64_t v37 = [(OUPointCloud *)v4 semanticLabels];
        uint64_t v38 = v37;
        float32x4_t v39 = v75;
        if (v75 >= v76)
        {
          uint64_t v41 = (v75 - (unsigned char *)v74) >> 2;
          if ((unint64_t)(v41 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = (v76 - (unsigned char *)v74) >> 1;
          if (v42 <= v41 + 1) {
            unint64_t v42 = v41 + 1;
          }
          if ((unint64_t)(v76 - (unsigned char *)v74) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            float32x4_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v76, v43);
          }
          else {
            float32x4_t v44 = 0;
          }
          float32x4_t v45 = &v44[4 * v41];
          *(_DWORD *)float32x4_t v45 = *(_DWORD *)(v38 + 4 * v5);
          float32x4_t v40 = v45 + 4;
          float32x4_t v47 = (char *)v74;
          float32x4_t v46 = v75;
          if (v75 != v74)
          {
            do
            {
              int v48 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v45 - 1) = v48;
              v45 -= 4;
            }
            while (v46 != v47);
            float32x4_t v46 = (char *)v74;
          }
          int32x4_t v74 = v45;
          float32x4_t v75 = v40;
          float32x4_t v76 = &v44[4 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(_DWORD *)float32x4_t v75 = *(_DWORD *)(v37 + 4 * v5);
          float32x4_t v40 = v39 + 4;
        }
        float32x4_t v75 = v40;
        uint64_t v49 = [(OUPointCloud *)v4 semanticVotes];
        uint64_t v50 = v49;
        int v51 = v72;
        if (v72 >= v73)
        {
          uint64_t v53 = (v72 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v53 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v54 = (v73 - (unsigned char *)__p) >> 2;
          if (v54 <= v53 + 1) {
            unint64_t v54 = v53 + 1;
          }
          if ((unint64_t)(v73 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v54;
          }
          if (v55) {
            int32x4_t v56 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v73, v55);
          }
          else {
            int32x4_t v56 = 0;
          }
          int v57 = &v56[8 * v53];
          *(void *)int v57 = *(void *)(v50 + 8 * v5);
          float32x4_t v52 = v57 + 8;
          int v59 = (char *)__p;
          float32x4_t v58 = v72;
          if (v72 != __p)
          {
            do
            {
              uint64_t v60 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v57 - 1) = v60;
              v57 -= 8;
            }
            while (v58 != v59);
            float32x4_t v58 = (char *)__p;
          }
          std::vector<int> __p = v57;
          int32x4_t v72 = v52;
          uint64_t v73 = &v56[8 * v55];
          if (v58) {
            operator delete(v58);
          }
        }
        else
        {
          *(void *)int32x4_t v72 = *(void *)(v49 + 8 * v5);
          float32x4_t v52 = v51 + 8;
        }
        int32x4_t v72 = v52;
      }
    }
    ++v5;
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&v77);
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&v74);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&__p);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v77, (uint64_t)&v74, (uint64_t)&__p);
  if (__p)
  {
    int32x4_t v72 = (char *)__p;
    operator delete(__p);
  }
  if (v74)
  {
    float32x4_t v75 = (char *)v74;
    operator delete(v74);
  }
  if (v77)
  {
    float32x4_t v78 = (char *)v77;
    operator delete(v77);
  }
}

void sub_237C52558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  unint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 2;
  if (v6 >= (v3 - (uint64_t)v4) >> 2) {
    return;
  }
  if (v5 == v4)
  {
    float32x4_t v11 = 0;
    uint64_t v9 = 4 * v6;
    goto LABEL_8;
  }
  float32x4_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v6);
  unint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[4 * v6];
  float32x4_t v11 = &v7[4 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *(_DWORD *)(v12 - 4) = v13;
    v12 -= 4;
  }
  while (v8 != v4);
  unint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(char **)a1;
  unint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    float32x4_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  float32x4_t v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
  unint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  float32x4_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
  unint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *NormalizePointCloud@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (const void *)*result;
  uint64_t v4 = result[1];
  if (*result == v4)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    unint64_t v5 = result;
    float32x4_t v6 = 0uLL;
    float32x4_t v7 = (float32x4_t *)*result;
    do
    {
      float32x4_t v8 = *v7++;
      float32x4_t v6 = vaddq_f32(v6, v8);
    }
    while (v7 != (float32x4_t *)v4);
    float32x4_t v19 = v6;
    unint64_t v9 = (v4 - (uint64_t)v3) >> 4;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v20, v3, v4, v9);
    uint64_t v11 = v20;
    if (v5[1] == *v5)
    {
      v10.i32[0] = -1.0;
    }
    else
    {
      unint64_t v12 = 0;
      v10.f32[0] = (float)v9;
      float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      float32x4_t v13 = vdivq_f32(v19, v10);
      v10.i32[0] = -1.0;
      do
      {
        *(float32x4_t *)(v11 + 16 * v12) = vsubq_f32(*(float32x4_t *)(v11 + 16 * v12), v13);
        uint64_t v11 = v20;
        float32x4_t v14 = vmulq_f32(*(float32x4_t *)(v20 + 16 * v12), *(float32x4_t *)(v20 + 16 * v12));
        float v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
        if (v10.f32[0] < v15) {
          v10.f32[0] = v15;
        }
        ++v12;
      }
      while (v12 < (uint64_t)(v5[1] - *v5) >> 4);
    }
    if (v21 == v11)
    {
      uint64_t v18 = v11;
    }
    else
    {
      unint64_t v16 = 0;
      float32x4_t v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      do
      {
        *(float32x4_t *)(v11 + 16 * v16) = vdivq_f32(*(float32x4_t *)(v11 + 16 * v16), v17);
        ++v16;
        uint64_t v11 = v20;
        uint64_t v18 = v21;
      }
      while (v16 < (v21 - v20) >> 4);
    }
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v22;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

double FarthestPointSample@<D0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double result@<D0>)
{
  if (a4 > 0 && (unint64_t v9 = (a1[1] - *a1) >> 4, v9 == (uint64_t)(a2[1] - *a2) >> 2) && v9 == (uint64_t)(a3[1] - *a3) >> 3)
  {
    if (v9 <= a4)
    {
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRKS7_RKSA_RKSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(v36, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
      long long v29 = v36[1];
      *(_OWORD *)a5 = v36[0];
      *(_OWORD *)(a5 + 16) = v29;
      uint64_t result = *(double *)&v36[2];
      long long v30 = v37;
      *(_OWORD *)(a5 + 32) = v36[2];
      *(_OWORD *)(a5 + 48) = v30;
      *(void *)(a5 + 64) = v38;
      *(unsigned char *)(a5 + 72) = 1;
    }
    else
    {
      unint64_t v11 = a4;
      LODWORD(v36[0]) = 2139095039;
      std::vector<float>::vector(&v34, v9, v36);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(v33, v11);
      _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(v32, v11);
      _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(__p, v11);
      int v12 = rand();
      uint64_t v13 = 0;
      unint64_t v14 = v12 % v9;
      uint64_t v15 = *a1;
      do
      {
        uint64_t v16 = 0;
        *((_OWORD *)v33[0] + v13) = *(_OWORD *)(v15 + 16 * v14);
        *((_DWORD *)v32[0] + v13) = *(_DWORD *)(*a2 + 4 * v14);
        *((void *)__p[0] + v13) = *(void *)(*a3 + 8 * v14);
        uint64_t v15 = *a1;
        float32x4_t v17 = *(float32x4_t *)(*a1 + 16 * v14);
        uint64_t v18 = (float *)v34;
        do
        {
          float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v15 + 16 * v16), v17);
          float32x4_t v20 = vmulq_f32(v19, v19);
          float v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
          if (v21 < v18[v16]) {
            v18[v16] = v21;
          }
          ++v16;
        }
        while (v9 != v16);
        uint64_t v22 = v18 + 1;
        BOOL v23 = v18 == v35 || v22 == v35;
        float32x4_t v24 = v18;
        if (!v23)
        {
          float v25 = *v18;
          float32x4_t v24 = v18;
          float v26 = v18 + 1;
          do
          {
            float v27 = *v26++;
            float v28 = v27;
            if (v25 < v27)
            {
              float v25 = v28;
              float32x4_t v24 = v22;
            }
            uint64_t v22 = v26;
          }
          while (v26 != v35);
        }
        unint64_t v14 = v24 - v18;
        ++v13;
      }
      while (v13 != v11);
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(v36, (uint64_t)v33, (uint64_t)v32, (uint64_t)__p);
      *(_OWORD *)a5 = v36[0];
      *(void *)(a5 + 16) = *(void *)&v36[1];
      v36[0] = 0uLL;
      *(_OWORD *)(a5 + 24) = *(_OWORD *)((char *)&v36[1] + 8);
      *(void *)(a5 + 40) = *((void *)&v36[2] + 1);
      memset(&v36[1], 0, 32);
      uint64_t result = *(double *)&v37;
      *(_OWORD *)(a5 + 48) = v37;
      *(void *)(a5 + 64) = v38;
      *(unsigned char *)(a5 + 72) = 1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v32[0])
      {
        v32[1] = v32[0];
        operator delete(v32[0]);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      if (v34)
      {
        uint64_t v35 = (float *)v34;
        operator delete(v34);
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 72) = 0;
  }
  return result;
}

void sub_237C52B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  return a1;
}

void sub_237C52BFC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRKS7_RKSA_RKSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  return a1;
}

void sub_237C52CBC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL OU3DSSDConfig::IsValidConfig(OU3DSSDConfig *this)
{
  if (*(int *)this < 1) {
    return 0;
  }
  BOOL v1 = !*((_DWORD *)this + 4) || *((_DWORD *)this + 5) == 0;
  if (v1 || *((_DWORD *)this + 6) == 0) {
    return 0;
  }
  BOOL v4 = *((float *)this + 8) > 0.0;
  if (*((float *)this + 9) <= 0.0) {
    BOOL v4 = 0;
  }
  return *((float *)this + 10) > 0.0 && v4;
}

__n128 *OU3DSSDConfig::OU3DSSDConfig(__n128 *a1, unsigned __int32 a2, __n128 a3, __n128 a4, __n128 a5)
{
  a1->n128_u32[0] = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4].n128_u8[0] = 0;
  if ((unint64_t)(MGGetSInt64Answer() - 32800) <= 0xE0) {
    a1[4].n128_u8[0] = 1;
  }
  if (!OU3DSSDConfig::IsValidConfig((OU3DSSDConfig *)a1))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] The voxelSSD config is not valid.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_237C52DE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_237C52F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C52FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C53170(_Unwind_Exception *a1)
{
  MEMORY[0x237E2C510](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_237C53310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C535C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev((uint64_t)&a20);
  float32x4_t v24 = *(void **)(v22 - 120);
  if (v24)
  {
    *(void *)(v22 - 112) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_237C538CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_237C539B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C53A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C53CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x237E2C510](v21, 0x10B2C40427CE99DLL);

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(a1, a2, (uint64_t)a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_237C53E80(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

ou3dor::OU3DObjectRepresentation *std::unique_ptr<ou3dor::OU3DObjectRepresentation>::reset[abi:ne180100](ou3dor::OU3DObjectRepresentation **a1, ou3dor::OU3DObjectRepresentation *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ou3dor::OU3DObjectRepresentation::~OU3DObjectRepresentation(result);
    JUMPOUT(0x237E2C510);
  }
  return result;
}

void ou3dor::OU3DObjectRepresentation::~OU3DObjectRepresentation(ou3dor::OU3DObjectRepresentation *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 128);
  utils::OUImageUtils::~OUImageUtils((ou3dor::OU3DObjectRepresentation *)((char *)this + 96));

  std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100]((OU3DORIDTree **)this + 6, 0);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  id v3 = *(id *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 8))(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void utils::OUImageUtils::~OUImageUtils(utils::OUImageUtils *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  while (v2 != v3)
  {
    free(*(void **)(v2 + 24));
    v2 += 32;
  }
  free(*((void **)this + 3));
  BOOL v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

OU3DORIDTree *std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100](OU3DORIDTree **a1, OU3DORIDTree *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    OU3DORIDTree::~OU3DORIDTree(result);
    JUMPOUT(0x237E2C510);
  }
  return result;
}

void OU3DORIDTree::~OU3DORIDTree(OU3DORIDTree *this)
{
  uint64_t v2 = (OU3DORIDTree::Node *)*((void *)this + 3);
  if (v2)
  {
    OU3DORIDTree::Node::~Node(v2);
    MEMORY[0x237E2C510]();
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void OU3DORIDTree::Node::~Node(OU3DORIDTree::Node *this)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = (void *)*((void *)this + 3);
  unint64_t v4 = *((void *)v3 + 1) - (void)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 & 0x7FFFFFFF8;
    do
    {
      float32x4_t v7 = *(OU3DORIDTree::Node **)(*((void *)this + 3) + v5);
      if (v7)
      {
        OU3DORIDTree::Node::~Node(v7);
        MEMORY[0x237E2C510]();
      }
      v5 += 8;
    }
    while (v6 != v5);
    uint64_t v2 = (void *)*((void *)this + 3);
  }
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

utils::OUFrameWriter *std::unique_ptr<utils::OUFrameWriter>::reset[abi:ne180100](utils::OUFrameWriter **a1, utils::OUFrameWriter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    utils::OUFrameWriter::~OUFrameWriter(result);
    JUMPOUT(0x237E2C510);
  }
  return result;
}

void _GLOBAL__sub_I_OUPipelineOnline_mm()
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v22) = 0;
  *((void *)&v22 + 1) = @"Unknown";
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 2;
  *((void *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 3;
  *((void *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 4;
  *((void *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 5;
  *((void *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 6;
  uint64_t v21 = @"Door";
  *((void *)&v28 + 1) = v21;
  LODWORD(v29) = 7;
  float32x4_t v20 = @"Window";
  *((void *)&v29 + 1) = v20;
  LODWORD(v30) = 8;
  *((void *)&v30 + 1) = *((id *)&v27 + 1);
  LODWORD(v31) = 9;
  uint64_t v18 = @"Fireplace";
  *((void *)&v31 + 1) = v18;
  LODWORD(v32) = 10;
  *((void *)&v32 + 1) = *((id *)&v30 + 1);
  LODWORD(v33) = 11;
  *((void *)&v33 + 1) = *((id *)&v32 + 1);
  LODWORD(v34) = 12;
  float32x4_t v19 = @"Stairs";
  *((void *)&v34 + 1) = v19;
  LODWORD(v35) = 13;
  unint64_t v14 = @"Bed";
  *((void *)&v35 + 1) = v14;
  LODWORD(v36) = 14;
  long long v37 = @"Cabinet";
  int v38 = 15;
  float32x4_t v17 = @"Chair";
  float32x4_t v39 = v17;
  int v40 = 16;
  uint64_t v41 = v37;
  int v42 = 17;
  unint64_t v43 = v41;
  int v44 = 18;
  uint64_t v16 = @"Sofa";
  float32x4_t v45 = v16;
  int v46 = 19;
  uint64_t v15 = @"Table";
  float32x4_t v47 = v15;
  int v48 = 20;
  uint64_t v13 = @"Toilet";
  uint64_t v49 = v13;
  int v50 = 21;
  v0 = @"Sink";
  int v51 = v0;
  int v52 = 22;
  int v12 = @"Bathtub";
  uint64_t v53 = v12;
  int v54 = 23;
  unint64_t v55 = (__CFString *)*((id *)&v33 + 1);
  int v56 = 24;
  uint64_t v1 = @"Refrigerator";
  int v57 = v1;
  int v58 = 25;
  uint64_t v2 = @"Stove";
  int v59 = v2;
  int v60 = 26;
  uint64_t v3 = @"Washer";
  int v61 = v3;
  int v62 = 27;
  unint64_t v4 = @"Oven";
  float32x4_t v63 = v4;
  int v64 = 28;
  uint64_t v5 = @"Dishwasher";
  float32x4_t v65 = v5;
  int v66 = 29;
  float32x4_t v67 = v55;
  int v68 = 30;
  uint64_t v6 = v43;
  float32x4_t v69 = v6;
  int v70 = 31;
  int v71 = v67;
  int v72 = 32;
  float32x4_t v7 = @"Screen";
  uint64_t v73 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v22, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v32 = xmmword_237CB4D70;
  long long v33 = unk_237CB4D80;
  long long v34 = xmmword_237CB4D90;
  long long v35 = unk_237CB4DA0;
  long long v28 = xmmword_237CB4D30;
  long long v29 = unk_237CB4D40;
  long long v30 = xmmword_237CB4D50;
  long long v31 = unk_237CB4D60;
  long long v24 = xmmword_237CB4CF0;
  long long v25 = unk_237CB4D00;
  long long v26 = xmmword_237CB4D10;
  long long v27 = unk_237CB4D20;
  long long v22 = xmmword_237CB4CD0;
  long long v23 = unk_237CB4CE0;
  uint64_t v36 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v22, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v22) = 0;
  *((void *)&v22 + 1) = v6;
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = v1;
  LODWORD(v24) = 2;
  *((void *)&v24 + 1) = @"Shelf";
  LODWORD(v25) = 3;
  *((void *)&v25 + 1) = v2;
  LODWORD(v26) = 4;
  *((void *)&v26 + 1) = v14;
  LODWORD(v27) = 5;
  *((void *)&v27 + 1) = v0;
  LODWORD(v28) = 6;
  *((void *)&v28 + 1) = v3;
  LODWORD(v29) = 7;
  *((void *)&v29 + 1) = v13;
  LODWORD(v30) = 8;
  *((void *)&v30 + 1) = v12;
  LODWORD(v31) = 9;
  *((void *)&v31 + 1) = v4;
  LODWORD(v32) = 10;
  *((void *)&v32 + 1) = v5;
  LODWORD(v33) = 11;
  *((void *)&v33 + 1) = v18;
  LODWORD(v34) = 12;
  *((void *)&v34 + 1) = @"Stool";
  LODWORD(v35) = 13;
  *((void *)&v35 + 1) = v17;
  LODWORD(v36) = 14;
  long long v37 = v15;
  int v38 = 15;
  float32x4_t v39 = v7;
  int v40 = 16;
  uint64_t v41 = v16;
  int v42 = 17;
  unint64_t v43 = v19;
  int v44 = 18;
  float32x4_t v45 = v20;
  int v46 = 19;
  float32x4_t v47 = v21;
  int v48 = 20;
  uint64_t v49 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v22, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
  *((void *)&v22 + 1) = @"Chair-chair_type-dining";
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = @"Chair-chair_type-swivel";
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = @"Chair-chair_type-other";
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = @"Chair-chair_leg_type-four";
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = @"Chair-chair_leg_type-star";
  LODWORD(v27) = 6;
  *((void *)&v27 + 1) = @"Chair-chair_leg_type-other";
  LODWORD(v28) = 7;
  *((void *)&v28 + 1) = @"Chair-chair_arm_type-missing";
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = @"Chair-chair_arm_type-existing";
  LODWORD(v30) = 9;
  *((void *)&v30 + 1) = @"Chair-chair_back_type-missing";
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = @"Chair-chair_back_type-existing";
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = @"Chair-chair_seat_height-tall_seat";
  LODWORD(v33) = 12;
  *((void *)&v33 + 1) = @"Chair-chair_seat_height-normal/low_seat";
  LODWORD(v34) = 13;
  *((void *)&v34 + 1) = @"Chair-chair_seat_shape-rectangular";
  LODWORD(v35) = 14;
  *((void *)&v35 + 1) = @"Chair-chair_seat_shape-round";
  LODWORD(v36) = 15;
  long long v37 = @"Chair-chair_seat_shape-none";
  int v38 = 16;
  float32x4_t v39 = @"Sofa-sofa_type-rectangular";
  int v40 = 17;
  uint64_t v41 = @"Sofa-sofa_type-lShaped";
  int v42 = 18;
  unint64_t v43 = @"Sofa-sofa_type-singleSeat";
  int v44 = 19;
  float32x4_t v45 = @"Sofa-sofa_type-lShapedMain";
  int v46 = 20;
  float32x4_t v47 = @"Sofa-sofa_type-lShapedExtension";
  int v48 = 21;
  uint64_t v49 = @"Sofa-sofa_type-lShapedMiddle";
  int v50 = 22;
  int v51 = @"Sofa-sofa_type-other";
  int v52 = 23;
  uint64_t v53 = @"Sofa-sofa_arm_type-missing";
  int v54 = 24;
  unint64_t v55 = @"Sofa-sofa_arm_type-two_arms";
  int v56 = 25;
  int v57 = @"Sofa-sofa_arm_type-none";
  int v58 = 26;
  int v59 = @"Sofa-sofa_back_type-missing";
  int v60 = 27;
  int v61 = @"Sofa-sofa_back_type-existing";
  int v62 = 28;
  float32x4_t v63 = @"Table-table_type-desk";
  int v64 = 29;
  float32x4_t v65 = @"Table-table_type-coffee";
  int v66 = 30;
  float32x4_t v67 = @"Table-table_type-dining";
  int v68 = 31;
  float32x4_t v69 = @"Table-table_type-other";
  int v70 = 32;
  int v71 = @"Table-table_shape-rectangular";
  int v72 = 33;
  uint64_t v73 = @"Table-table_shape-lShaped";
  int v74 = 34;
  float32x4_t v75 = @"Table-table_shape-circularElliptic";
  int v76 = 35;
  int32x4_t v77 = @"Table-table_shape-other";
  int v78 = 36;
  float32x4_t v79 = @"Table-table_leg_type-two_leg";
  int v80 = 37;
  int32x4_t v81 = @"Table-table_leg_type-four_leg";
  int v82 = 38;
  int32x4_t v83 = @"Table-table_leg_type-none";
  int v84 = 39;
  uint64_t v85 = @"Table-table_attribute-with_storage";
  int v86 = 40;
  unsigned __int32 v87 = @"Table-table_attribute-without_storage";
  int v88 = 41;
  unint64_t v89 = @"Cabinet-cabinet_type-standalone_cabinet";
  int v90 = 42;
  uint64_t v91 = @"Cabinet-cabinet_type-kitchen_cabinet";
  int v92 = 43;
  long long v93 = @"Cabinet-cabinet_type-nightstand";
  int v94 = 44;
  long long v95 = @"Cabinet-cabinet_type-none";
  int v96 = 45;
  __int32 v97 = @"Cabinet-cabinet_attribute-no_countertop";
  int v98 = 46;
  int32x4_t v99 = @"Cabinet-cabinet_attribute-with_countertop";
  int v100 = 100;
  int32x4_t v101 = @"Sofa-sofa_arm_type-existing";
  int v102 = 101;
  LODWORD(v22) = 0;
  float32x4_t v103 = @"Storage-storage_type-cabinet";
  int v104 = 102;
  int32x4_t v105 = @"Storage-storage_type-shelf";
  int v106 = 103;
  float32x4_t v107 = @"Chair-chair_type-stool";
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)&ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v22, 50);
  for (uint64_t k = 792; k != -8; k -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], &ou3dor::k3DORSupportedAttributeTypeMap, &dword_237C17000);
}

void sub_237C54CE0(_Unwind_Exception *a1)
{
  for (uint64_t i = 792; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_237C55F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&STACK[0x3C0];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = (void **)&STACK[0x3D8];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = a18;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a61);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x3F0], (void *)STACK[0x3F8]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x408], (void *)STACK[0x410]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x420], (void *)STACK[0x428]);
  _Unwind_Resume(a1);
}

void sub_237C5615C()
{
}

_anonymous_namespace_::UnionFind *anonymous namespace'::UnionFind::UnionFind(_anonymous_namespace_::UnionFind *this, int a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v4 = (std::vector<int> *)((char *)this + 24);
  std::vector<int>::size_type v5 = a2;
  *(_OWORD *)this = 0u;
  std::vector<int>::resize((std::vector<int> *)this, a2);
  std::vector<int>::value_type __x = 0;
  std::vector<int>::resize(v4, v5, &__x);
  uint64_t v6 = *(_DWORD **)this;
  float32x4_t v7 = (_DWORD *)*((void *)this + 1);
  if (*(_DWORD **)this != v7)
  {
    int v8 = 0;
    do
      *v6++ = v8++;
    while (v6 != v7);
  }
  *((_DWORD *)this + 12) = a2;
  return this;
}

void sub_237C561F0(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::vector<int>::size_type v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *anonymous namespace'::UnionFind::unite(uint64_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *this;
  unint64_t v4 = (this[1] - *this) >> 2;
  if (v4 > (int)a2 && v4 > (int)a3)
  {
    for (uint64_t i = (int *)(v3 + 4 * (int)a2); *i != a2; uint64_t i = (int *)(v3 + 4 * a2))
    {
      a2 = *(int *)(v3 + 4 * *i);
      *uint64_t i = a2;
    }
    for (uint64_t j = (int *)(v3 + 4 * (int)a3); *j != a3; uint64_t j = (int *)(v3 + 4 * a3))
    {
      a3 = *(int *)(v3 + 4 * *j);
      int *j = a3;
    }
    if (a2 != a3)
    {
      uint64_t v7 = this[3];
      if (*(_DWORD *)(v7 + 4 * (int)a2) >= *(_DWORD *)(v7 + 4 * (int)a3))
      {
        *(_DWORD *)(v3 + 4 * (int)a3) = a2;
        int v8 = *(_DWORD *)(v7 + 4 * (int)a2);
        if (v8 == *(_DWORD *)(v7 + 4 * (int)a3)) {
          *(_DWORD *)(v7 + 4 * (int)a2) = v8 + 1;
        }
      }
      else
      {
        *(_DWORD *)(v3 + 4 * (int)a2) = a3;
      }
      --*((_DWORD *)this + 12);
    }
  }
  return this;
}

float32x2_t anonymous namespace'::findIntersect(float32x4_t a1, int32x4_t a2, float32x4_t a3, int32x4_t a4)
{
  a1.i32[2] = 1.0;
  a2.i32[2] = 1.0;
  a3.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  int32x4_t v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(a1)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  int32x4_t v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a4, a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(a3)), (float32x4_t)a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  int8x16_t v8 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v5)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  if (fabsf(*(float *)&v8.i32[1]) >= 0.000001)
  {
    v10.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0];
    v10.i32[1] = v8.i32[0];
    return vdiv_f32(v10, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1));
  }
  else
  {
    return (float32x2_t)vdupq_n_s32(0x7F7FFFFFu).u64[0];
  }
}

void sub_237C5658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_237C57C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  STACK[0x280] = (unint64_t)&a27;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  STACK[0x280] = (unint64_t)&a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  STACK[0x330] = (unint64_t)&a61;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((uint64_t)&a64, a65);
  STACK[0x330] = (unint64_t)&a67;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev((uint64_t)&a70);
  STACK[0x330] = (unint64_t)&STACK[0x220];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  int v71 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v71;
    operator delete(v71);
  }
  int v72 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v72;
    operator delete(v72);
  }
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x268], (void *)STACK[0x270]);
  _Unwind_Resume(a1);
}

void anonymous namespace'::mergeGivenBoxes(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v205 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  unint64_t v14 = a4[1];
  if (*a4 == v14 || (uint64_t v15 = a1[1], *a1 == v15) || (v16 = v14 - *a4, v16 > 0x6DB6DB6DB6DB6DB7 * ((v15 - *a1) >> 5)))
  {
    *(_WORD *)(a7 + 128) = 0;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    goto LABEL_5;
  }
  std::vector<float>::vector(&v194, v16);
  float32x4_t v17 = *a4;
  uint64_t v18 = (float *)v194;
  uint64_t v19 = (char *)a4[1] - (char *)*a4;
  if (v19)
  {
    uint64_t v20 = v19 >> 2;
    BOOL v21 = (unint64_t)(v19 >> 2) > 1;
    uint64_t v22 = *a3;
    if (!v21) {
      uint64_t v20 = 1;
    }
    long long v23 = *a4;
    long long v24 = (float *)v194;
    do
    {
      int v25 = *v23++;
      *v24++ = *(float *)(*(void *)(v22 + 24 * v25) + 12) * *(float *)(*(void *)(v22 + 24 * v25) + 16);
      --v20;
    }
    while (v20);
  }
  long long v26 = v18 + 1;
  _ZF = v18 == v195 || v26 == v195;
  long long v28 = v18;
  if (!_ZF)
  {
    float v29 = *v18;
    long long v28 = v18;
    long long v30 = v18 + 1;
    do
    {
      float v31 = *v30++;
      float v32 = v31;
      if (v29 < v31)
      {
        float v29 = v32;
        long long v28 = v26;
      }
      long long v26 = v30;
    }
    while (v30 != v195);
  }
  int v169 = a6;
  uint64_t v168 = a7;
  float v33 = *(float *)(*(void *)(*a3 + 24 * *(int *)((char *)v17 + (((char *)v28 - (char *)v18) << 30 >> 30))) + 24);
  LODWORD(__x) = 0;
  std::vector<int>::vector(&v193, 0x18uLL, (const std::vector<int>::value_type *)&__x);
  int v170 = (uint64_t *)a4;
  long long v34 = *a4;
  long long v35 = a4[1];
  if (v34 != v35)
  {
    uint64_t v36 = *a3;
    std::vector<int>::pointer begin = v193.__begin_;
    do
    {
      int v38 = *v34++;
      float v39 = *(float *)(*(void *)(v36 + 24 * v38) + 24) + 12.5663706 - v33;
      float v40 = fmod(v39, 3.14159265);
      signed int v41 = vcvtmd_s64_f64((v40 + 3.14159265) / 0.261799395);
      ++begin[v41];
    }
    while (v34 != v35);
  }
  long long __x = xmmword_237CB4DF0;
  *(void *)&long long v198 = 0x1700000012;
  std::unordered_set<int>::unordered_set((uint64_t)v192, (int *)&__x, 6);
  LODWORD(__x) = 0;
  HIDWORD(v42) = HIDWORD(v170);
  uint64_t v43 = 0;
  if (v193.__end_ == v193.__begin_)
  {
    int v44 = v169;
  }
  else
  {
    int v44 = v169;
    do
    {
      float32x4_t v45 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v192, (int *)&__x);
      int v46 = __x;
      if (!v45)
      {
        if (v193.__begin_[(int)__x]) {
          uint64_t v43 = (v43 + 1);
        }
        else {
          uint64_t v43 = v43;
        }
      }
      LODWORD(__x) = __x + 1;
    }
    while (v46 + 1 < (unint64_t)(v193.__end_ - v193.__begin_));
  }
  BOOL v167 = (int)v43 > 3;
  *(double *)v47.i64 = rotationZMatrix(v33);
  float32x4_t v172 = v48;
  float32x4_t v173 = v47;
  float32x4_t v171 = v49;
  std::vector<int> __p = 0;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  float v188 = 0;
  uint64_t v183 = 0;
  unint64_t v184 = 0;
  unint64_t v185 = 0;
  std::vector<box3d>::vector(&v181, (v170[1] - *v170) >> 2);
  uint64_t v50 = *v170;
  if (v170[1] == *v170)
  {
    float32x4_t v175 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v97.i64[0] = 0x80000000800000;
    v97.i64[1] = 0x80000000800000;
  }
  else
  {
    unint64_t v51 = 0;
    v52.i64[0] = 0x80000000800000;
    v52.i64[1] = 0x80000000800000;
    float32x4_t v174 = v52;
    float32x4_t v175 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    HIDWORD(v43) = 0;
    do
    {
      uint64_t v42 = 0;
      int v53 = *(_DWORD *)(v50 + 4 * v51);
      do
      {
        float32x4_t v54 = *(float32x4_t *)(*a1 + 224 * v53 + 16 * v42);
        *((float32x4_t *)v181 + 8 * v51 + v42) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v173, v54.f32[0]), v172, *(float32x2_t *)v54.f32, 1), v171, v54, 2);
        unint64_t v55 = (char *)v181 + 128 * v51;
        float32x4_t v56 = *(float32x4_t *)&v55[16 * v42];
        int v57 = v190;
        float32x4_t v176 = v56;
        if (v190 >= v191)
        {
          int v59 = (char *)__p;
          uint64_t v60 = (v190 - (unsigned char *)__p) >> 2;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = v191 - (unsigned char *)__p;
          if ((v191 - (unsigned char *)__p) >> 1 > v61) {
            unint64_t v61 = v62 >> 1;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            int v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v191, v63);
            int v59 = (char *)__p;
            int v57 = v190;
          }
          else
          {
            int v64 = 0;
          }
          float32x4_t v65 = &v64[4 * v60];
          *(_DWORD *)float32x4_t v65 = v176.i32[0];
          int v58 = v65 + 4;
          while (v57 != v59)
          {
            int v66 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          std::vector<int> __p = v65;
          uint64_t v190 = v58;
          uint64_t v191 = &v64[4 * v63];
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v190 = v56.i32[0];
          int v58 = v57 + 4;
        }
        uint64_t v190 = v58;
        int v67 = *(_DWORD *)&v55[16 * v42 + 4];
        int v68 = v187;
        if (v187 >= v188)
        {
          int v70 = (char *)v186;
          uint64_t v71 = (v187 - (unsigned char *)v186) >> 2;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v73 = v188 - (unsigned char *)v186;
          if ((v188 - (unsigned char *)v186) >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v74 = v72;
          }
          if (v74)
          {
            float32x4_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v188, v74);
            int v70 = (char *)v186;
            int v68 = v187;
          }
          else
          {
            float32x4_t v75 = 0;
          }
          int v76 = &v75[4 * v71];
          *(_DWORD *)int v76 = v67;
          float32x4_t v69 = v76 + 4;
          while (v68 != v70)
          {
            int v77 = *((_DWORD *)v68 - 1);
            v68 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          uint64_t v186 = v76;
          uint64_t v187 = v69;
          float v188 = &v75[4 * v74];
          if (v70) {
            operator delete(v70);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v187 = v67;
          float32x4_t v69 = v68 + 4;
        }
        uint64_t v187 = v69;
        int v78 = *(_DWORD *)&v55[16 * v42 + 8];
        float32x4_t v79 = v184;
        if (v184 >= v185)
        {
          int32x4_t v81 = (char *)v183;
          uint64_t v82 = (v184 - (unsigned char *)v183) >> 2;
          unint64_t v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v84 = v185 - (unsigned char *)v183;
          if ((v185 - (unsigned char *)v183) >> 1 > v83) {
            unint64_t v83 = v84 >> 1;
          }
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v85 = v83;
          }
          if (v85)
          {
            int v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v185, v85);
            int32x4_t v81 = (char *)v183;
            float32x4_t v79 = v184;
          }
          else
          {
            int v86 = 0;
          }
          unsigned __int32 v87 = &v86[4 * v82];
          *(_DWORD *)unsigned __int32 v87 = v78;
          int v80 = v87 + 4;
          while (v79 != v81)
          {
            int v88 = *((_DWORD *)v79 - 1);
            v79 -= 4;
            *((_DWORD *)v87 - 1) = v88;
            v87 -= 4;
          }
          uint64_t v183 = v87;
          unint64_t v184 = v80;
          unint64_t v185 = &v86[4 * v85];
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v184 = v78;
          int v80 = v79 + 4;
        }
        float32x4_t v89 = v175;
        float32x4_t v90 = v176;
        v89.i32[3] = 0;
        v90.i32[3] = 0;
        float32x4_t v91 = vminnmq_f32(v89, v90);
        float32x4_t v92 = v174;
        v92.i32[3] = 0;
        float32x4_t v174 = vmaxnmq_f32(v92, v90);
        float32x4_t v175 = v91;
        unint64_t v184 = v80;
        ++v42;
      }
      while (v42 != 8);
      ++v51;
      uint64_t v50 = *v170;
      uint64_t v93 = v170[1] - *v170;
    }
    while (v51 < v93 >> 2);
    BOOL v94 = (unint64_t)v93 < 0x10 || @"Stairs" == v13;
    int v44 = v169;
    if (v94) {
      goto LABEL_91;
    }
    std::__sort<std::__less<float,float> &,float *>();
    std::__sort<std::__less<float,float> &,float *>();
    std::__sort<std::__less<float,float> &,float *>();
    v97.f32[0] = (float)(unint64_t)((v190 - (unsigned char *)__p) >> 2);
    int v95 = (int)(float)(v97.f32[0] * 0.15);
    int v96 = (int)(float)(v97.f32[0] * 0.85);
    v97.i32[0] = *((_DWORD *)__p + v95);
    v97.i32[1] = *((_DWORD *)v186 + v95);
    v97.i32[2] = *((_DWORD *)v183 + v95);
    float32x4_t v175 = v97;
    v97.i32[0] = *((_DWORD *)__p + v96);
    v97.i32[1] = *((_DWORD *)v186 + v96);
    v97.i32[2] = *((_DWORD *)v183 + v96);
  }
  float32x4_t v174 = v97;
LABEL_91:
  LODWORD(__x) = 0;
  std::vector<float>::vector(v180, 7uLL, &__x);
  int8x16_t v98 = (int8x16_t)vabdq_f32(v174, v175);
  v99.i64[0] = 0x3F0000003F000000;
  v99.i64[1] = 0x3F0000003F000000;
  float32x4_t v100 = vmulq_f32(vaddq_f32(v174, v175), v99);
  int32x4_t v101 = (float *)v180[0];
  v100.i32[3] = v98.i32[0];
  *(float32x4_t *)v180[0] = v100;
  *((void *)v101 + 2) = vextq_s8(v98, v98, 4uLL).u64[0];
  v101[6] = v33;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  long long __x = 0u;
  long long v198 = 0u;
  centroidSizeAngleToBox3d((uint64_t *)v180, 0, &__x);
  if (v44)
  {
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    float v177 = 0;
    float v102 = *((float *)v180[0] + 4);
    LODWORD(v43) = vcvtps_s32_f32(*((float *)v180[0] + 3) / 0.1);
    std::vector<std::vector<int>>::resize((uint64_t *)&v177, (int)v43);
    LODWORD(v42) = vcvtps_s32_f32(v102 / 0.1);
    if ((int)v43 >= 1)
    {
      uint64_t v103 = 0;
      do
      {
        std::vector<int>::resize((std::vector<int> *)&v177[v103], (int)v42);
        v103 += 3;
      }
      while (3 * v43 != v103);
    }
    if ((int)v43 >= 1)
    {
      uint64_t v104 = 0;
      float v105 = *(float *)v180[0] - (float)(*((float *)v180[0] + 3) * 0.5);
      float v106 = *((float *)v180[0] + 1) - (float)(*((float *)v180[0] + 4) * 0.5);
      do
      {
        if ((int)v42 >= 1)
        {
          uint64_t v107 = 0;
          _S13 = v105 + (float)((float)(int)v104 * 0.1);
          do
          {
            int32x4_t v109 = (float32x4_t *)v181;
            float32x4_t v110 = v182;
            if (v181 != v182)
            {
              _S15 = v106 + (float)((float)(int)v107 * 0.1);
              do
              {
                box3dToCentroidSizeAngle(v109, (uint64_t *)v196);
                float v112 = *((float *)v196[0] + 3) * *((float *)v196[0] + 4);
                _Q1 = *v109;
                _Q5 = v109[1];
                _S3 = _Q5.i32[1];
                __asm
                {
                  FMLS            S4, S3, V1.S[0]
                  FMLA            S4, S13, V5.S[1]
                  FMLS            S4, S15, V5.S[0]
                }
                float v122 = (float)(fabsf(_S4) * 0.5) + 0.0;
                if (v122 > v112) {
                  goto LABEL_104;
                }
                _S6 = -_Q5.f32[0];
                _Q5 = v109[2];
                __asm
                {
                  FMLA            S7, S6, V5.S[1]
                  FMLA            S7, S13, V5.S[1]
                  FMLS            S7, S15, V5.S[0]
                }
                float v128 = v122 + (float)(fabsf(_S7) * 0.5);
                if (v128 > v112) {
                  goto LABEL_104;
                }
                _S7 = -_Q5.f32[0];
                _Q3 = v109[3];
                __asm
                {
                  FMLA            S5, S7, V3.S[1]
                  FMLA            S5, S13, V3.S[1]
                  FMLS            S5, S15, V3.S[0]
                }
                float v134 = v128 + (float)(fabsf(_S5) * 0.5);
                if (v134 <= v112) {
                  int v135 = (float)(v134
                }
                               + (float)(fabsf((float)((float)((float)((float)((float)(_Q3.f32[1]* (float)-(float)(v105+ (float)((float)(int)v104 * 0.1)))+ (float)(_Q3.f32[0] * _S15))+ (float)(_Q1.f32[0] * _Q3.f32[1]))+ (float)((float)-_Q3.f32[0]* COERCE_FLOAT(HIDWORD(v109->i64[0]))))+ (float)(_S13 * COERCE_FLOAT(HIDWORD(v109->i64[0]))))+ (float)((float)-_Q1.f32[0] * _S15))* 0.5)) <= v112;
                else {
LABEL_104:
                }
                  int v135 = 0;
                v196[1] = v196[0];
                operator delete(v196[0]);
                v177[3 * v104][v107] += v135;
                v109 += 8;
              }
              while (v109 != v110);
            }
            ++v107;
          }
          while (v107 != v42);
        }
        ++v104;
      }
      while (v104 != v43);
    }
    if (v177 == v178)
    {
      int v137 = 0;
      int v136 = 0;
      __int32 v139 = v170;
    }
    else
    {
      int v136 = 0;
      int v137 = 0;
      float v138 = v177;
      __int32 v139 = v170;
      do
      {
        for (uint64_t i = *v138; i != v138[1]; ++i)
        {
          int v141 = *i;
          v136 += v141;
          if (!v141) {
            ++v137;
          }
        }
        v138 += 3;
      }
      while (v138 != v178);
    }
    float v144 = (float)(0xAAAAAAAAAAAAAAABLL * (v178 - v177) * (v177[1] - *v177));
    float v145 = (float)v137 / v144;
    float v146 = (float)((float)v136 / (float)(unint64_t)(((char *)v182 - (unsigned char *)v181) >> 7)) / v144;
    uint64_t v148 = *v139;
    uint64_t v147 = v139[1];
    uint64_t v149 = v147 - *v139;
    if (v147 == *v139)
    {
      int v151 = 0;
      float v155 = 0.0;
      BOOL v143 = v167;
    }
    else
    {
      uint64_t v150 = 0;
      int v151 = 0;
      unint64_t v152 = v149 >> 2;
      if (v152 <= 1) {
        uint64_t v153 = 1;
      }
      else {
        uint64_t v153 = v152;
      }
      int8x16_t v154 = (int *)(v148 + 4);
      float v155 = 0.0;
      uint64_t v156 = 1;
      BOOL v143 = v167;
      do
      {
        uint64_t v157 = v150 + 1;
        if (v152 > v150 + 1)
        {
          uint64_t v158 = *(void *)(*a5 + 24 * *(int *)(v148 + 4 * v150));
          unint64_t v159 = v152;
          long long v160 = v154;
          do
          {
            uint64_t v161 = *v160++;
            float v155 = v155 + *(float *)(v158 + 4 * v161);
            ++v151;
            --v159;
          }
          while (v156 != v159);
        }
        ++v156;
        ++v154;
        uint64_t v150 = v157;
      }
      while (v157 != v153);
    }
    BOOL v162 = (float)(v155 / (float)v151) >= 0.5;
    if (v146 >= 0.5) {
      BOOL v162 = 1;
    }
    char v142 = v145 <= 0.07 || v162;
    v196[0] = &v177;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v196);
  }
  else
  {
    char v142 = 1;
    BOOL v143 = v167;
  }
  long long v163 = v202;
  *(_OWORD *)(v168 + 64) = v201;
  *(_OWORD *)(v168 + 80) = v163;
  long long v164 = v204;
  *(_OWORD *)(v168 + 96) = v203;
  *(_OWORD *)(v168 + 112) = v164;
  long long v165 = v198;
  *(_OWORD *)uint64_t v168 = __x;
  *(_OWORD *)(v168 + 16) = v165;
  long long v166 = v200;
  *(_OWORD *)(v168 + 32) = v199;
  *(_OWORD *)(v168 + 48) = v166;
  *(unsigned char *)(v168 + 128) = v142;
  *(unsigned char *)(v168 + 129) = v143;
  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }
  if (v181)
  {
    long long v182 = (float32x4_t *)v181;
    operator delete(v181);
  }
  if (v183)
  {
    unint64_t v184 = (char *)v183;
    operator delete(v183);
  }
  if (v186)
  {
    uint64_t v187 = (char *)v186;
    operator delete(v186);
  }
  if (__p)
  {
    uint64_t v190 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v192);
  if (v193.__begin_)
  {
    v193.__end_ = v193.__begin_;
    operator delete(v193.__begin_);
  }
  if (v194)
  {
    float v195 = (float *)v194;
    operator delete(v194);
  }
LABEL_5:
}

void sub_237C58ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62)
{
  a62 = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a48);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }

  _Unwind_Resume(a1);
}

float **anonymous namespace'::getMeanLogits@<X0>(uint64_t *a1@<X0>, int **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (float **)std::vector<float>::vector(a3, (uint64_t)(*(void *)(*a1 + 224 * **a2 + 168) - *(void *)(*a1 + 224 * **a2 + 160)) >> 2);
  int32x4_t v6 = *a2;
  float32x4_t v7 = a2[1];
  int8x16_t v8 = *result;
  unint64_t v9 = result[1];
  unint64_t v10 = v9 - *result;
  if (*a2 != v7)
  {
    uint64_t v11 = *a1;
    if (v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9 - *result;
    }
    uint64_t v13 = *a2;
    do
    {
      if (v9 != v8)
      {
        unint64_t v14 = *(float **)(v11 + 224 * *v13 + 160);
        uint64_t result = (float **)v12;
        uint64_t v15 = v8;
        do
        {
          float v16 = *v14++;
          *uint64_t v15 = v16 + *v15;
          ++v15;
          uint64_t result = (float **)((char *)result - 1);
        }
        while (result);
      }
      ++v13;
    }
    while (v13 != v7);
  }
  if (v9 != v8)
  {
    float v17 = (float)(unint64_t)(v7 - v6);
    if (v10 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v10;
    }
    do
    {
      float *v8 = *v8 / v17;
      ++v8;
      --v18;
    }
    while (v18);
  }
  return result;
}

void RemoveFPCabinetFromRefridge(uint64_t *a1, void *a2)
{
  if (a2)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (a2[1] == 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) && v4 != v5)
    {
      unint64_t v7 = 0;
      do
      {
        if (((*(void *)(*a2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        {
          int v8 = [*(id *)(v5 + 224 * v7 + 128) isEqualToString:@"Refrigerator"];
          uint64_t v9 = *a1;
          uint64_t v4 = a1[1];
          if (v8)
          {
            uint64_t v5 = a1[1];
            if (v4 != v9)
            {
              uint64_t v10 = 0;
              unint64_t v11 = 0;
              do
              {
                if ((*(void *)(*a2 + 8 * (v11 >> 6)) & (1 << v11)) == 0
                  && [*(id *)(v9 + v10 + 128) isEqualToString:@"Cabinet"])
                {
                  box3dIou((float32x4_t *)(*a1 + 224 * v7), (float32x4_t *)(*a1 + v10), 0, (uint64_t)v12);
                  if (v13 > 0.7) {
                    *(void *)(*a2 + 8 * (v11 >> 6)) |= 1 << v11;
                  }
                }
                ++v11;
                uint64_t v9 = *a1;
                uint64_t v4 = a1[1];
                v10 += 224;
              }
              while (v11 < 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5));
              uint64_t v5 = *a1;
            }
          }
          else
          {
            uint64_t v5 = *a1;
          }
        }
        ++v7;
      }
      while (v7 < 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 5));
    }
  }
}

void sub_237C5A0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char *a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a33)
  {
    a34 = a33;
    operator delete(a33);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  a33 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::sortIndices@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  std::vector<unsigned long>::vector(a2, (a1[1] - *a1) >> 2);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t *)a2[1];
  if ((uint64_t *)*a2 != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (uint64_t *)*a2;
    do
      *v7++ = v6++;
    while (v7 != v5);
  }
  unint64_t v8 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  unint64_t v11 = a1;
  if (v5 == (uint64_t *)v4) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
}

void anonymous namespace'::nonMaxSuppressBoxes(void ***a1, const OUBox3d **a2, int a3, uint64_t *a4, void *a5, void *a6, float a7)
{
  unint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)*a2) >> 5);
  if (v9 >= 2)
  {
    if (a6 && a6[1] == v9)
    {
      v36[0] = 0;
      v36[1] = 0;
      long long v35 = (uint64_t *)v36;
      uint64_t v15 = *a1;
      unint64_t v14 = a1[1];
      if (*a1 != v14)
      {
        do
        {
          std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(&v35, v15, v15);
          ++v15;
        }
        while (v15 != v14);
        unint64_t v8 = *a2;
        unint64_t v7 = a2[1];
      }
      memset(v34, 0, sizeof(v34));
      for (; v8 != v7; unint64_t v8 = (const OUBox3d *)((char *)v8 + 224))
      {
        OUBox3d::OUBox3d(&v37, v8);
        LOBYTE(v33[0]) = v36 != (void **)std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>((uint64_t)&v35, v38);
        std::vector<BOOL>::push_back((uint64_t)v34, v33);

        if (__p) {
          operator delete(__p);
        }
        if (v39)
        {
          float v40 = v39;
          operator delete(v39);
        }
      }
      float v31 = a2;
      uint64_t v16 = *a4;
      uint64_t v17 = a4[1];
      if (v17 != *a4)
      {
        unint64_t v18 = 0;
        do
        {
          unint64_t v19 = *(void *)(v16 + 8 * v18);
          if (((1 << v19) & *(void *)(*a6 + 8 * (v19 >> 6))) == 0
            && (*((void *)v34[0] + (v19 >> 6)) & (1 << v19)) != 0)
          {
            unint64_t v20 = v18 + 1;
            if (v18 + 1 < (v17 - v16) >> 3)
            {
              do
              {
                unint64_t v21 = *(void *)(v16 + 8 * v20);
                unint64_t v22 = v21 >> 6;
                uint64_t v23 = 1 << v21;
                if (((1 << v21) & *(void *)(*a6 + 8 * (v21 >> 6))) == 0 && (*((void *)v34[0] + v22) & v23) != 0)
                {
                  long long v24 = (void *)*((void *)&(*v31)[1].var5.var0 + 28 * v19);
                  uint64_t v25 = *((void *)&(*v31)[1].var5.var0 + 28 * v21);
                  if (a3)
                  {
                    if (([v24 isEqualToString:v25] & 1) == 0
                      && *(float *)(*(void *)(*a5 + 24 * v19) + 4 * v21) >= a7)
                    {
                      *(void *)(*a6 + 8 * v22) |= v23;
                    }
                  }
                  else if ([v24 isEqualToString:v25] {
                         && *(float *)(*(void *)(*a5 + 24 * v19) + 4 * v21) >= a7)
                  }
                  {
                    box3dToCentroidSizeAngle((float32x4_t *)*v31 + 14 * v19, (uint64_t *)&v37);
                    box3dToCentroidSizeAngle((float32x4_t *)*v31 + 14 * v21, (uint64_t *)v33);
                    long long v26 = v33[0];
                    unint64_t v27 = v19 >> 6;
                    if ((float)((float)(*((float *)v37.var1 + 4) * *((float *)v37.var1 + 3)) * *((float *)v37.var1 + 5)) <= (float)((float)(*((float *)v33[0] + 4) * *((float *)v33[0] + 3)) * *((float *)v33[0] + 5)))
                    {
                      uint64_t v28 = 1 << v19;
                    }
                    else
                    {
                      unint64_t v27 = v21 >> 6;
                      uint64_t v28 = 1 << v21;
                    }
                    *(void *)(*a6 + 8 * v27) |= v28;
                    v33[1] = v26;
                    operator delete(v26);
                    if (v37.var1)
                    {
                      *(void *)&v37.var2 = v37.var1;
                      operator delete(v37.var1);
                    }
                  }
                }
                ++v20;
                uint64_t v16 = *a4;
                uint64_t v17 = a4[1];
              }
              while (v20 < (v17 - *a4) >> 3);
            }
          }
          ++v18;
        }
        while (v18 < (v17 - v16) >> 3);
      }
      if (v34[0]) {
        operator delete(v34[0]);
      }
      std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v35, v36[0]);
    }
    else
    {
      float v29 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
    }
      }
  }
}

void sub_237C5A988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::SaveBoxes(OUBox3d *a1, void *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  id var1 = a1->var1;
  uint64_t v4 = *(unsigned char **)&a1->var2;
  if (v4 != a1->var1)
  {
    unint64_t v7 = a1;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (((*(void *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        unint64_t v11 = (const OUBox3d *)&var1[v8];
        if ((unint64_t)v9 >= v15)
        {
          a1 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v13, v11);
          unint64_t v9 = a1;
        }
        else
        {
          OUBox3d::OUBox3d(v9, v11);
          unint64_t v9 = (OUBox3d *)((char *)v9 + 224);
        }
        unint64_t v14 = v9;
        id var1 = v7->var1;
        uint64_t v4 = *(unsigned char **)&v7->var2;
      }
      ++v10;
      v8 += 224;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v4 - var1) >> 5));
  }
  uint64_t v12 = OUVizTool::Get((OUVizTool *)a1);
  OUVizTool::SaveBoxes((uint64_t)v12, a3, &v13);
  uint64_t v16 = (void **)&v13;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_237C5AAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void anonymous namespace'::zeroOutClassScores(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v11 = a2;
  std::vector<float>::vector(a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 5));
  if (a3[1] != *a3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      char v7 = [*(id *)(*a1 + v5 + 128) isEqualToString:v11];
      int v8 = 0;
      if ((v7 & 1) == 0) {
        int v8 = *(_DWORD *)(*a1 + v5 + 136);
      }
      uint64_t v9 = *a3;
      uint64_t v10 = a3[1];
      *(_DWORD *)(*a3 + 4 * v6++) = v8;
      v5 += 224;
    }
    while (v6 < (v10 - v9) >> 2);
  }
}

void sub_237C5ABE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  id v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)id v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_237C5AD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  std::__split_buffer<std::string>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    int v18 = (int *)&v15[4 * v12];
    unint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    unint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    unint64_t v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--int v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    unint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_237C5B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_237C5B11C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<box3d>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<box3d>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, a2 << 7);
    a1[1] = &v4[128 * a2];
  }
  return a1;
}

void sub_237C5B18C(_Unwind_Exception *exception_object)
{
  std::vector<int>::size_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<box3d>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    std::vector<int>::size_type v16 = &v12[24 * v8];
    int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_237C5B3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_237C5B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<OUBox3d>::__emplace_back_slow_path<OUBox3d&>(uint64_t *a1, const OUBox3d *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = (OUBox3d *)&v10[224 * v4];
  std::vector<int>::size_type v16 = &v10[224 * v9];
  OUBox3d::OUBox3d(v14, a2);
  p_var5 = &v14[2].var5;
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_237C5B700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    char v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if (*(float *)(**a3 + 4 * (int)v44) > *(float *)(**a3 + (*v12 << 32 >> 30)))
                {
                  uint64_t *v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                int v46 = v12 + 1;
                float32x4_t v47 = v12 + 2;
                float32x4_t v48 = v12 + 3;
                uint64_t v49 = *(a2 - 1);
                uint64_t v50 = v12[3];
                uint64_t v51 = **a3;
                if (*(float *)(v51 + 4 * (int)v49) > *(float *)(v51 + 4 * (int)v50))
                {
                  *float32x4_t v48 = v49;
                  *(a2 - 1) = v50;
                  uint64_t v52 = *v48;
                  uint64_t v53 = *v47;
                  float v54 = *(float *)(v51 + (*v48 << 32 >> 30));
                  if (v54 > *(float *)(v51 + (*v47 << 32 >> 30)))
                  {
                    *float32x4_t v47 = v52;
                    *float32x4_t v48 = v53;
                    uint64_t v55 = *v46;
                    if (v54 > *(float *)(v51 + (*v46 << 32 >> 30)))
                    {
                      v12[1] = v52;
                      v12[2] = v55;
                      uint64_t v56 = *v12;
                      if (v54 > *(float *)(v51 + (*v12 << 32 >> 30)))
                      {
                        uint64_t *v12 = v52;
                        v12[1] = v56;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                int v57 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v58 = 0;
                  uint64_t v59 = **a3;
                  uint64_t v60 = v12;
                  do
                  {
                    uint64_t v62 = *v60;
                    uint64_t v61 = v60[1];
                    uint64_t v60 = v57;
                    float v63 = *(float *)(v59 + 4 * (int)v61);
                    if (v63 > *(float *)(v59 + 4 * (int)v62))
                    {
                      uint64_t v64 = v58;
                      while (1)
                      {
                        *(uint64_t *)((char *)v12 + v64 + 8) = v62;
                        if (!v64) {
                          break;
                        }
                        uint64_t v62 = *(uint64_t *)((char *)v12 + v64 - 8);
                        v64 -= 8;
                        if (v63 <= *(float *)(v59 + 4 * (int)v62))
                        {
                          float32x4_t v65 = (uint64_t *)((char *)v12 + v64 + 8);
                          goto LABEL_79;
                        }
                      }
                      float32x4_t v65 = v12;
LABEL_79:
                      uint64_t *v65 = v61;
                    }
                    int v57 = v60 + 1;
                    v58 += 8;
                  }
                  while (v60 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              float32x4_t v97 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v98 = **a3;
                do
                {
                  uint64_t v100 = *v11;
                  uint64_t v99 = v11[1];
                  uint64_t v11 = v97;
                  float v101 = *(float *)(v98 + 4 * (int)v99);
                  if (v101 > *(float *)(v98 + 4 * (int)v100))
                  {
                    do
                    {
                      *float32x4_t v97 = v100;
                      uint64_t v100 = *(v97 - 2);
                      --v97;
                    }
                    while (v101 > *(float *)(v98 + 4 * (int)v100));
                    *float32x4_t v97 = v99;
                  }
                  float32x4_t v97 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v66 = (v14 - 2) >> 1;
              int v67 = *a3;
              int64_t v68 = v66;
              do
              {
                int64_t v69 = v68;
                if (v66 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  uint64_t v71 = &v12[v70];
                  uint64_t v72 = 2 * v68 + 2;
                  uint64_t v73 = *v67;
                  if (v72 < (uint64_t)v14 && *(float *)(v73 + (*v71 << 32 >> 30)) > *(float *)(v73 + 4 * (int)v71[1]))
                  {
                    ++v71;
                    uint64_t v70 = 2 * v69 + 2;
                  }
                  unint64_t v74 = &v12[v69];
                  uint64_t result = *v71;
                  uint64_t v75 = *v74;
                  float v76 = *(float *)(v73 + (*v74 << 32 >> 30));
                  if (*(float *)(v73 + (*v71 << 32 >> 30)) <= v76)
                  {
                    do
                    {
                      int v77 = v71;
                      uint64_t *v74 = result;
                      if (v66 < v70) {
                        break;
                      }
                      uint64_t v78 = 2 * v70;
                      uint64_t v70 = (2 * v70) | 1;
                      uint64_t v71 = &v12[v70];
                      uint64_t v79 = v78 + 2;
                      if (v79 < (uint64_t)v14
                        && *(float *)(v73 + (*v71 << 32 >> 30)) > *(float *)(v73 + 4 * (int)v71[1]))
                      {
                        ++v71;
                        uint64_t v70 = v79;
                      }
                      uint64_t result = *v71;
                      unint64_t v74 = v77;
                    }
                    while (*(float *)(v73 + (*v71 << 32 >> 30)) <= v76);
                    *int v77 = v75;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              uint64_t v80 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v81 = 0;
                uint64_t v82 = *v12;
                unint64_t v83 = *a3;
                uint64_t v84 = v12;
                do
                {
                  unint64_t v85 = v84;
                  v84 += v81 + 1;
                  uint64_t v86 = 2 * v81;
                  uint64_t v81 = (2 * v81) | 1;
                  uint64_t v87 = v86 + 2;
                  if (v87 < v80)
                  {
                    uint64_t result = v84[1];
                    if (*(float *)(*v83 + (*v84 << 32 >> 30)) > *(float *)(*v83 + 4 * (int)result))
                    {
                      ++v84;
                      uint64_t v81 = v87;
                    }
                  }
                  uint64_t *v85 = *v84;
                }
                while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                if (v84 == --a2)
                {
                  *uint64_t v84 = v82;
                }
                else
                {
                  *uint64_t v84 = *a2;
                  *a2 = v82;
                  uint64_t v88 = (char *)v84 - (char *)v12 + 8;
                  if (v88 >= 9)
                  {
                    unint64_t v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                    float32x4_t v90 = &v12[v89];
                    uint64_t v91 = *v90;
                    uint64_t v92 = *v84;
                    uint64_t v93 = *v83;
                    float v94 = *(float *)(v93 + (*v84 << 32 >> 30));
                    if (*(float *)(v93 + (*v90 << 32 >> 30)) > v94)
                    {
                      do
                      {
                        int v95 = v90;
                        *uint64_t v84 = v91;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        float32x4_t v90 = &v12[v89];
                        uint64_t v91 = *v90;
                        uint64_t v84 = v95;
                      }
                      while (*(float *)(v93 + (*v90 << 32 >> 30)) > v94);
                      *int v95 = v92;
                    }
                  }
                }
              }
              while (v80-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          std::vector<int>::size_type v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            uint64_t v17 = *v11;
            *uint64_t v11 = *v16;
            uint64_t *v16 = v17;
          }
          else
          {
          }
          --a4;
          uint64_t v18 = *v11;
          uint64_t v19 = **a3;
          if (a5) {
            break;
          }
          float v20 = *(float *)(v19 + 4 * (int)v18);
          if (*(float *)(v19 + (*(v11 - 1) << 32 >> 30)) > v20) {
            break;
          }
          if (v20 <= *(float *)(v19 + (*(a2 - 1) << 32 >> 30)))
          {
            uint64_t v36 = v11 + 1;
            do
            {
              char v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v20 <= *(float *)(v19 + (*v12 << 32 >> 30)));
          }
          else
          {
            char v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v20 <= *(float *)(v19 + 4 * (int)v35));
          }
          OUBox3d v37 = a2;
          if (v12 < a2)
          {
            OUBox3d v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v20 > *(float *)(v19 + 4 * (int)v38));
          }
          if (v12 < v37)
          {
            uint64_t v39 = *v12;
            uint64_t v40 = *v37;
            do
            {
              uint64_t *v12 = v40;
              uint64_t *v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                uint64_t v39 = v41;
              }
              while (v20 <= *(float *)(v19 + 4 * (int)v41));
              do
              {
                uint64_t v42 = *--v37;
                uint64_t v40 = v42;
              }
              while (v20 > *(float *)(v19 + 4 * (int)v42));
            }
            while (v12 < v37);
          }
          uint64_t v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v43;
          }
          a5 = 0;
          uint64_t *v43 = v18;
        }
        uint64_t v21 = 0;
        float v22 = *(float *)(v19 + 4 * (int)v18);
        do
          uint64_t v23 = v11[++v21];
        while (*(float *)(v19 + 4 * (int)v23) > v22);
        long long v24 = &v11[v21];
        int v25 = a2;
        if (v21 == 1)
        {
          int v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v27 = *--v25;
          }
          while (*(float *)(v19 + 4 * (int)v27) <= v22);
        }
        else
        {
          do
            uint64_t v26 = *--v25;
          while (*(float *)(v19 + 4 * (int)v26) <= v22);
        }
        if (v24 >= v25)
        {
          float v33 = v24 - 1;
        }
        else
        {
          uint64_t v28 = *v25;
          float v29 = &v11[v21];
          long long v30 = v25;
          do
          {
            uint64_t *v29 = v28;
            uint64_t *v30 = v23;
            do
            {
              uint64_t v31 = v29[1];
              ++v29;
              uint64_t v23 = v31;
            }
            while (*(float *)(v19 + 4 * (int)v31) > v22);
            do
            {
              uint64_t v32 = *--v30;
              uint64_t v28 = v32;
            }
            while (*(float *)(v19 + 4 * (int)v32) <= v22);
          }
          while (v29 < v30);
          float v33 = v29 - 1;
        }
        if (v33 != v11) {
          *uint64_t v11 = *v33;
        }
        *float v33 = v18;
        if (v24 >= v25) {
          break;
        }
LABEL_33:
        a5 = 0;
        char v12 = v33 + 1;
      }
      char v12 = v33 + 1;
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_33;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **a4;
  float v7 = *(float *)(v6 + (*a2 << 32 >> 30));
  float v8 = *(float *)(v6 + (*result << 32 >> 30));
  uint64_t v9 = *a3;
  float v10 = *(float *)(v6 + (*a3 << 32 >> 30));
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *result;
      if (*(float *)(v6 + (*a2 << 32 >> 30)) > *(float *)(v6 + (*result << 32 >> 30)))
      {
        char *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      char *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + (*a3 << 32 >> 30)) <= v8) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      char *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * (int)v8) > *(float *)(**a3 + (*a1 << 32 >> 30)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      uint64_t v21 = a1 + 1;
      float v22 = a1 + 2;
      uint64_t v23 = a1 + 3;
      uint64_t v24 = *(a2 - 1);
      uint64_t v25 = a1[3];
      uint64_t v26 = **a3;
      if (*(float *)(v26 + 4 * (int)v24) > *(float *)(v26 + 4 * (int)v25))
      {
        *uint64_t v23 = v24;
        *(a2 - 1) = v25;
        uint64_t v27 = *v23;
        uint64_t v28 = *v22;
        float v29 = *(float *)(v26 + (*v23 << 32 >> 30));
        if (v29 > *(float *)(v26 + (*v22 << 32 >> 30)))
        {
          *float v22 = v27;
          *uint64_t v23 = v28;
          uint64_t v30 = *v21;
          if (v29 > *(float *)(v26 + (*v21 << 32 >> 30)))
          {
            a1[1] = v27;
            a1[2] = v30;
            uint64_t v31 = *a1;
            if (v29 > *(float *)(v26 + (*a1 << 32 >> 30)))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + (*v11 << 32 >> 30));
    if (v17 > *(float *)(v13 + (*v10 << 32 >> 30)))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= *(float *)(v13 + 4 * (int)v16))
        {
          float v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v20 = a1;
LABEL_13:
      *float v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v11 = *a3;
  uint64_t v12 = **a5;
  if (*(float *)(v12 + (*a4 << 32 >> 30)) > *(float *)(v12 + (*a3 << 32 >> 30)))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(float *)(v12 + (*a3 << 32 >> 30)) > *(float *)(v12 + (*a2 << 32 >> 30)))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(float *)(v12 + (*a2 << 32 >> 30)) > *(float *)(v12 + (*a1 << 32 >> 30)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t **a1, void **a2, id *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    float v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = (uint64_t)*a3;
    std::__tree<int>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(uint64_t a1, void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = CompareNSString::operator()(v5, *(void **)(v3 + 32), *a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || CompareNSString::operator()(v5, *a2, *(void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_237C5C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (int i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void *OUVizTool::Get(OUVizTool *this)
{
  {
    OUVizTool::OUVizTool((OUVizTool *)&OUVizTool::Get(void)::viz_tool_singleton);
    __cxa_atexit((void (*)(void *))OUVizTool::~OUVizTool, &OUVizTool::Get(void)::viz_tool_singleton, &dword_237C17000);
  }
  return &OUVizTool::Get(void)::viz_tool_singleton;
}

void sub_237C5C84C(_Unwind_Exception *a1)
{
}

void OUVizTool::~OUVizTool(id *this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_237C5C948(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t **a1, uint64_t *a2, void **a3, id *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = (uint64_t)*a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void _GLOBAL__sub_I_OU3DObjectMerger_mm()
{
  v0 = (void *)MEMORY[0x237E2CC70]();
  ObjectUnderstandingTest::Bundle = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.ObjectUnderstandingTests"];
}

uint64_t OUCannyEdgeDetectorRGB::OUCannyEdgeDetectorRGB(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface(a1, a2);
  void *v4 = &unk_26EAD6070;
  v4[18] = 0;
  v4[19] = 0;
  int v22 = 1038323257;
  std::vector<float>::vector(__p, 9uLL, &v22);
  id v5 = objc_alloc(MEMORY[0x263F13268]);
  uint64_t v6 = [v5 initWithDevice:*(void *)(a1 + 8) kernelWidth:3 kernelHeight:3 weights:__p[0]];
  int v7 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v6;

  uint64_t v8 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 64), 80);
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v8;

  uint64_t v10 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 72), [*(id *)(a1 + 40) pixelFormat]);
  int v11 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v10;

  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a1 + 72) || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a1 + 76))
  {
    uint64_t v12 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 72), 80);
    int v13 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v12;
  }
  uint64_t v14 = operator new(0xCuLL);
  *(void *)uint64_t v14 = 0x3F1645A23E991687;
  void v14[2] = 1038710997;
  id v15 = objc_alloc(MEMORY[0x263F13258]);
  LODWORD(v16) = 1.0;
  uint64_t v17 = [v15 initWithDevice:*(void *)(a1 + 8) linearToGrayScaleTransform:v14 sigma:v16];
  uint64_t v18 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v17;

  LODWORD(v19) = *(_DWORD *)(a2 + 4);
  [*(id *)(a1 + 56) setHighThreshold:v19];
  LODWORD(v20) = *(_DWORD *)a2;
  [*(id *)(a1 + 56) setLowThreshold:v20];
  [*(id *)(a1 + 56) setUseFastMode:*(unsigned __int8 *)(a2 + 8)];
  operator delete(v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_237C5CD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(v11);
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::GenerateSourceTexture(uint64_t a1, void *a2)
{
  id v12 = a2;
  unint64_t v3 = (__CVBuffer *)[v12 sceneColorBuffer];
  if (CVPixelBufferGetWidth(v3) != *(_DWORD *)(a1 + 64) || CVPixelBufferGetHeight(v3) != *(_DWORD *)(a1 + 68))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Edge detection image size doesn't match.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  IOSurface = CVPixelBufferGetIOSurface(v3);
  if (CVPixelBufferGetPixelFormatType(v3) == 2016686640) {
    uint64_t v5 = 505;
  }
  else {
    uint64_t v5 = 500;
  }
  uint64_t v6 = (void *)MEMORY[0x263F12A50];
  size_t Width = IOSurfaceGetWidth(IOSurface);
  uint64_t v8 = [v6 texture2DDescriptorWithPixelFormat:v5 width:Width height:IOSurfaceGetHeight(IOSurface) mipmapped:0];
  [v8 setUsage:3];
  uint64_t v9 = [*(id *)(a1 + 8) newTextureWithDescriptor:v8 iosurface:IOSurface plane:0];
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
}

void sub_237C5CEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::PostProcess(id *this)
{
  id v3 = [this[2] commandBuffer];
  objc_msgSend(this[19], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
  [v3 commit];
  [v3 waitUntilCompleted];
  id v2 = this[5];
  this[5] = this[18];
  this[18] = v2;
}

void sub_237C5CFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::~OUCannyEdgeDetectorRGB(id *this)
{
  OUCannyEdgeDetectorRGB::~OUCannyEdgeDetectorRGB(this);
  JUMPOUT(0x237E2C510);
}

{
  uint64_t vars8;

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(this);
}

BOOL ou3dor::E5RTExecute(int *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = *a1;
  if (*a1)
  {
    uint64_t last_error_message = e5rt_get_last_error_message();
    id v3 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = last_error_message;
      _os_log_impl(&dword_237C17000, v3, OS_LOG_TYPE_INFO, "[3DOR] E5RT operation failed with message = %s", (uint8_t *)&v5, 0xCu);
    }
  }
  return v1 == 0;
}

uint64_t ou3dor::DescribeTensorDescriptor()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v0 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Printing tensor information", buf, 2u);
  }

  e5rt_tensor_desc_retain_dtype();
  e5rt_tensor_desc_dtype_get_num_components();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v3) = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Num components per element = %u \n", buf, 8u);
  }

  e5rt_tensor_desc_dtype_get_component_dtype();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Component data type is UINT \n", buf, 2u);
  }

  e5rt_tensor_desc_dtype_get_component_size();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v3 = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Component size is %zu bytes \n", buf, 0xCu);
  }

  e5rt_tensor_desc_dtype_get_element_size();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v3 = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Element size is %zu bytes \n", buf, 0xCu);
  }

  e5rt_tensor_desc_get_rank();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v3 = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Tensor rank is %zu \n", buf, 0xCu);
  }

  e5rt_tensor_desc_get_shape();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_237C17000, v0, OS_LOG_TYPE_INFO, "[3DOR] Tensor shape is { ", buf, 2u);
  }

  e5rt_tensor_desc_get_strides();
  return e5rt_tensor_desc_dtype_release();
}

uint64_t ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26EAD60D0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 216) = a2[2];
  *(_OWORD *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 232) = 0;
  if (!ou3dor::OU3DOREspressoV2Interface::LoadModel((ou3dor::OU3DOREspressoV2Interface *)a1))
  {
    int v5 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface(v5);
    }
  }
  return a1;
}

void sub_237C5D67C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL ou3dor::OU3DOREspressoV2Interface::LoadModel(ou3dor::OU3DOREspressoV2Interface *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v2 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  if (v2)
  {
    uint64_t v3 = [NSString stringWithUTF8String:*((void *)this + 23)];
    uint64_t v4 = [v2 pathForResource:v3 ofType:0];

    if (!v4)
    {
      int v21 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)this + 184);
        ou3dor::OU3DOREspressoV2Interface::LoadModel((char *)&__p, v35, v21);
      }

      BOOL v20 = 0;
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(v35, (char *)[v4 UTF8String]);
    LODWORD(__p) = e5rt_execution_stream_operation_create_precompiled_compute_operation();
    if (!ou3dor::E5RTExecute((int *)&__p)
      || (unint64_t v29 = 0, LODWORD(__p) = e5rt_execution_stream_operation_get_num_inputs(), !ou3dor::E5RTExecute((int *)&__p)))
    {
      BOOL v20 = 0;
LABEL_47:
      if (v36 < 0) {
        operator delete(*(void **)v35);
      }
LABEL_52:

      goto LABEL_53;
    }
    std::vector<char const*>::vector(&v27, v29);
    LODWORD(__p) = e5rt_execution_stream_operation_get_input_names();
    if (ou3dor::E5RTExecute((int *)&__p))
    {
      uint64_t v6 = (char **)v27;
      int v5 = v28;
      if (v27 == v28)
      {
LABEL_25:
        LODWORD(__p) = e5rt_execution_stream_operation_get_num_outputs();
        if (ou3dor::E5RTExecute((int *)&__p))
        {
          std::vector<char const*>::vector(&buf, 0);
          LODWORD(__p) = e5rt_execution_stream_operation_get_output_names();
          if (!ou3dor::E5RTExecute((int *)&__p)) {
            goto LABEL_57;
          }
          int v13 = (char **)*((void *)&buf + 1);
          uint64_t v14 = (char **)buf;
          if ((void)buf != *((void *)&buf + 1))
          {
            id v15 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
            do
            {
              double v16 = *v14;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, v16);
                p_p = &__p;
                if (v25 < 0) {
                  p_p = __p;
                }
                *(_DWORD *)uint64_t v31 = 136315138;
                *(void *)&v31[4] = p_p;
                _os_log_impl(&dword_237C17000, v15, OS_LOG_TYPE_INFO, "[3DOR] Model output name: %s", v31, 0xCu);
                if (SHIBYTE(v25) < 0) {
                  operator delete(__p);
                }
              }

              LODWORD(__p) = e5rt_execution_stream_operation_retain_output_port();
              BOOL v18 = ou3dor::E5RTExecute((int *)&__p);
              std::vector<int> __p = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(v18, 0, (uint64_t)&__p);
              std::string::basic_string[abi:ne180100]<0>(v31, v16);
              uint64_t v30 = (long long *)v31;
              double v19 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 64, v31, (uint64_t)&std::piecewise_construct, &v30);
              if (v19 + 40 != (unsigned __int8 *)&__p) {
                _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v19 + 40, (char *)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 3);
              }
              *((void *)v19 + 8) = v26;
              if (v32 < 0) {
                operator delete(*(void **)v31);
              }
              *(_DWORD *)uint64_t v31 = e5rt_io_port_release();
              ou3dor::E5RTExecute((int *)v31);
              std::string::basic_string[abi:ne180100]<0>(v31, v16);
              ou3dor::OU3DOREspressoV2Interface::CreateAndBindOutputPort((uint64_t)this, v31);
              if (v32 < 0) {
                operator delete(*(void **)v31);
              }
              if (__p)
              {
                uint64_t v24 = __p;
                operator delete(__p);
              }
              ++v14;
            }
            while (v14 != v13);
          }
          LODWORD(__p) = e5rt_execution_stream_create();
          if (ou3dor::E5RTExecute((int *)&__p))
          {
            LODWORD(__p) = e5rt_execution_stream_encode_operation();
            BOOL v20 = ou3dor::E5RTExecute((int *)&__p);
          }
          else
          {
LABEL_57:
            BOOL v20 = 0;
          }
          if ((void)buf)
          {
            *((void *)&buf + 1) = buf;
            operator delete((void *)buf);
          }
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v7 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
        while (1)
        {
          uint64_t v8 = *v6;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, v8);
            uint64_t v9 = &__p;
            if (v25 < 0) {
              uint64_t v9 = __p;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v9;
            _os_log_impl(&dword_237C17000, v7, OS_LOG_TYPE_INFO, "[3DOR] Load model file: %s", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(v25) < 0) {
              operator delete(__p);
            }
          }

          uint64_t v30 = 0;
          LODWORD(__p) = e5rt_execution_stream_operation_retain_input_port();
          BOOL v10 = ou3dor::E5RTExecute((int *)&__p);
          if (!v10) {
            break;
          }
          std::vector<int> __p = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(v10, (uint64_t)v30, (uint64_t)&__p);
          std::string::basic_string[abi:ne180100]<0>(&buf, v8);
          *(void *)uint64_t v31 = &buf;
          int v11 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 24, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (long long **)v31);
          if (v11 + 40 != (unsigned __int8 *)&__p) {
            _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v11 + 40, (char *)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 3);
          }
          *((void *)v11 + 8) = v26;
          if (v34 < 0) {
            operator delete((void *)buf);
          }
          LODWORD(buf) = e5rt_io_port_release();
          BOOL v12 = ou3dor::E5RTExecute((int *)&buf);
          if (v12)
          {
            std::string::basic_string[abi:ne180100]<0>(&buf, v8);
            ou3dor::OU3DOREspressoV2Interface::CreateAndBindInputPort((uint64_t)this, (unsigned __int8 *)&buf);
            if (v34 < 0) {
              operator delete((void *)buf);
            }
          }
          if (__p)
          {
            uint64_t v24 = __p;
            operator delete(__p);
          }
          if (!v12) {
            break;
          }
          if (++v6 == v5) {
            goto LABEL_25;
          }
        }
      }
    }
    BOOL v20 = 0;
LABEL_55:
    if (v27)
    {
      uint64_t v28 = (char **)v27;
      operator delete(v27);
    }
    goto LABEL_47;
  }
  BOOL v20 = 0;
LABEL_53:

  return v20;
}

void sub_237C5DC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v37 - 105) < 0) {
    operator delete(*(void **)(v37 - 128));
  }

  _Unwind_Resume(a1);
}

void ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(ou3dor::OU3DOREspressoV2Interface *this)
{
  *(void *)this = &unk_26EAD60D0;
  int v5 = e5rt_execution_stream_operation_release();
  ou3dor::E5RTExecute(&v5);
  int v4 = e5rt_execution_stream_release();
  ou3dor::E5RTExecute(&v4);
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear((uint64_t)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear((uint64_t)this + 64);
  for (int i = (CVPixelBufferRef *)((char *)this + 120); ; CVPixelBufferRelease(i[5]))
  {
    int i = (CVPixelBufferRef *)*i;
    if (!i) {
      break;
    }
  }
  for (uint64_t j = (CVPixelBufferRef *)((char *)this + 160); ; CVPixelBufferRelease(j[5]))
  {
    uint64_t j = (CVPixelBufferRef *)*j;
    if (!j) {
      break;
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 24);
}

{
  uint64_t vars8;

  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
  JUMPOUT(0x237E2C510);
}

BOOL ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[1] = 0;
  LODWORD(v23[0]) = e5rt_io_port_retain_tensor_desc();
  ou3dor::E5RTExecute((int *)v23);
  ou3dor::DescribeTensorDescriptor();
  unint64_t v22 = 0;
  v23[0] = 0;
  LODWORD(v21) = e5rt_tensor_desc_get_shape();
  ou3dor::E5RTExecute((int *)&v21);
  if (v22)
  {
    unint64_t v4 = 0;
    int v5 = (void *)(a3 + 16);
    uint64_t v6 = *(void **)(a3 + 8);
    do
    {
      uint64_t v7 = v23[0];
      if ((unint64_t)v6 >= *v5)
      {
        uint64_t v9 = *(void **)a3;
        uint64_t v10 = ((uint64_t)v6 - *(void *)a3) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = *v5 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v13);
          uint64_t v9 = *(void **)a3;
          uint64_t v6 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v14 = 0;
        }
        id v15 = &v14[8 * v10];
        *(void *)id v15 = *(void *)(v7 + 8 * v4);
        uint64_t v8 = v15 + 8;
        while (v6 != v9)
        {
          uint64_t v16 = *--v6;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = &v14[8 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        void *v6 = *(void *)(v23[0] + 8 * v4);
        uint64_t v8 = v6 + 1;
      }
      *(void *)(a3 + 8) = v8;
      ++v4;
      uint64_t v6 = v8;
    }
    while (v4 < v22);
  }
  uint64_t v21 = 0;
  int v20 = e5rt_tensor_desc_retain_dtype();
  ou3dor::E5RTExecute(&v20);
  int v20 = 0;
  int component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  ou3dor::E5RTExecute(&component_dtype);
  *(_DWORD *)(a3 + 24) = v20;
  int component_dtype = 0;
  e5rt_tensor_desc_dtype_get_component_pack();
  *(_DWORD *)(a3 + 28) = component_dtype;
  int v18 = e5rt_tensor_desc_dtype_release();
  ou3dor::E5RTExecute(&v18);
  int v18 = e5rt_tensor_desc_release();
  return ou3dor::E5RTExecute(&v18);
}

void *std::string::basic_string<std::string_view,0>(void *__dst, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    int v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    int v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((unsigned char *)v5 + v3) = 0;
  return __dst;
}

BOOL ou3dor::OU3DOREspressoV2Interface::CreateAndBindInputPort(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v4 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if ((a2[23] & 0x80u) == 0) {
      int v5 = a2;
    }
    else {
      int v5 = *(unsigned __int8 **)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "[3DOR] Model input name: %s", buf, 0xCu);
  }

  *(void *)long long buf = a2;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, a2, (uint64_t)&std::piecewise_construct, (long long **)buf);
  uint64_t v7 = v6;
  uint64_t v8 = (char **)(v6 + 40);
  uint64_t v9 = (uint64_t *)*((void *)v6 + 5);
  for (int i = (uint64_t *)*((void *)v6 + 6); v9 != i; ++v9)
  {
    uint64_t v11 = *v9;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "[3DOR] Model input shape: %zu", buf, 0xCu);
    }
  }
  OSType v12 = 1278226534;
  int v13 = *((_DWORD *)v7 + 17);
  if (v13 == 3)
  {
    OSType v12 = 1278226536;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "[3DOR] e5rt tensor format: float 16 type";
      goto LABEL_16;
    }
LABEL_17:

    goto LABEL_18;
  }
  if (v13 == 6)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v14 = "[3DOR] e5rt tensor format: float 32 type";
LABEL_16:
      _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, v14, buf, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
LABEL_18:
  PixelBuffer = (__CVBuffer *)ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer((uint64_t)v6, v8, v12);
  *(void *)long long buf = a2;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 104, a2, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 5) = PixelBuffer;
  *(void *)long long buf = 0;
  LODWORD(v18) = e5rt_execution_stream_operation_retain_input_port();
  BOOL result = ou3dor::E5RTExecute((int *)&v18);
  if (!result) {
    goto LABEL_24;
  }
  CVPixelBufferGetIOSurface(PixelBuffer);
  uint64_t v18 = 0;
  int v17 = e5rt_buffer_object_create_from_iosurface();
  BOOL result = ou3dor::E5RTExecute(&v17);
  if (!result) {
    goto LABEL_24;
  }
  int v17 = e5rt_io_port_bind_buffer_object();
  BOOL result = ou3dor::E5RTExecute(&v17);
  if (result
    && (int v17 = e5rt_buffer_object_release(), result = ou3dor::E5RTExecute(&v17))
    && (int v17 = e5rt_io_port_release(), result = ou3dor::E5RTExecute(&v17)))
  {
    *(unsigned char *)(a1 + 233) = 1;
  }
  else
  {
LABEL_24:
    *(unsigned char *)(a1 + 233) = 0;
  }
  return result;
}

BOOL ou3dor::OU3DOREspressoV2Interface::CreateAndBindOutputPort(uint64_t a1, unsigned __int8 *a2)
{
  OSType v4 = 1278226534;
  *(void *)long long buf = a2;
  int v5 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 64, a2, (uint64_t)&std::piecewise_construct, (long long **)buf);
  uint64_t v6 = (char **)(v5 + 40);
  int v7 = *((_DWORD *)v5 + 17);
  if (v7 == 3)
  {
    uint64_t v8 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    OSType v4 = 1278226536;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v9 = "[3DOR] e5rt tensor format: float 16 type";
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (v7 == 6)
  {
    uint64_t v8 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v9 = "[3DOR] e5rt tensor format: float 32 type";
LABEL_7:
      _os_log_impl(&dword_237C17000, v8, OS_LOG_TYPE_INFO, v9, buf, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:
  PixelBuffer = (__CVBuffer *)ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer((uint64_t)v5, v6, v4);
  *(void *)long long buf = a2;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, a2, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 5) = PixelBuffer;
  *(void *)long long buf = 0;
  LODWORD(v13) = e5rt_execution_stream_operation_retain_output_port();
  BOOL result = ou3dor::E5RTExecute((int *)&v13);
  if (!result) {
    goto LABEL_15;
  }
  CVPixelBufferGetIOSurface(PixelBuffer);
  uint64_t v13 = 0;
  int v12 = e5rt_buffer_object_create_from_iosurface();
  BOOL result = ou3dor::E5RTExecute(&v12);
  if (!result) {
    goto LABEL_15;
  }
  int v12 = e5rt_io_port_bind_buffer_object();
  BOOL result = ou3dor::E5RTExecute(&v12);
  if (result
    && (int v12 = e5rt_buffer_object_release(), result = ou3dor::E5RTExecute(&v12))
    && (int v12 = e5rt_io_port_release(), result = ou3dor::E5RTExecute(&v12)))
  {
    *(unsigned char *)(a1 + 234) = 1;
  }
  else
  {
LABEL_15:
    *(unsigned char *)(a1 + 234) = 0;
  }
  return result;
}

void ou3dor::OU3DOREspressoV2Interface::Inference(ou3dor::OU3DOREspressoV2Interface *this)
{
  if (*((unsigned char *)this + 232))
  {
    kdebug_trace();
    ou3dor::OU3DOREspressoV2Interface::Eval(this);
    kdebug_trace();
  }
  else
  {
    uint64_t v2 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOREspressoV2Interface::Inference(v2);
    }
  }
}

void ou3dor::OU3DOREspressoV2Interface::Eval(ou3dor::OU3DOREspressoV2Interface *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = e5rt_execution_stream_execute_sync();
  if (v2)
  {
    uint64_t last_error_message = e5rt_get_last_error_message();
    OSType v4 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = last_error_message;
      _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v5, 0xCu);
    }
  }
  *((unsigned char *)this + 235) = v2 == 0;
}

uint64_t ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer(uint64_t a1, char **a2, OSType a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  OSType v4 = *a2;
  int v5 = a2[1];
  int v6 = 1;
  if (*a2 != v5)
  {
    uint64_t v7 = *a2;
    do
    {
      int v8 = *(_DWORD *)v7;
      v7 += 8;
      v6 *= v8;
    }
    while (v7 != v5);
  }
  unint64_t v9 = (unint64_t)(v5 - v4) >> 3;
  if ((int)v9 < 2)
  {
    int v12 = 1;
  }
  else
  {
    uint64_t v10 = (v9 - 1);
    int v11 = 0x7FFFFFFF;
    int v12 = 1;
    int v13 = 1;
    do
    {
      int v14 = *(_DWORD *)v4;
      v4 += 8;
      v13 *= v14;
      int v15 = v6 / v13;
      int v16 = v13 + 7;
      if (v13 >= 0) {
        int v16 = v13;
      }
      unsigned int v17 = (v16 & 0xFFFFFFF8) + 8;
      if ((v13 & 7) == 0) {
        unsigned int v17 = v13;
      }
      int v18 = v15 + 7;
      if (v15 >= 0) {
        int v18 = v6 / v13;
      }
      unsigned int v19 = (v18 & 0xFFFFFFF8) + 8;
      if ((v15 & 7) != 0) {
        int v15 = v19;
      }
      int v20 = v15 * v17;
      if (v20 < v11)
      {
        int v11 = v20;
        int v12 = v13;
      }
      --v10;
    }
    while (v10);
  }
  uint64_t v21 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  int v22 = v6 / v12;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v12;
    __int16 v29 = 1024;
    int v30 = v22;
    _os_log_impl(&dword_237C17000, v21, OS_LOG_TYPE_INFO, "[3DOD] Create CVPixelBuffer width %d height %d", buf, 0xEu);
  }

  *(void *)long long buf = 0;
  uint64_t v26 = *MEMORY[0x263F04130];
  uint64_t v27 = MEMORY[0x263EFFA78];
  CFDictionaryRef v23 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v12, v22, a3, v23, (CVPixelBufferRef *)buf);
  uint64_t v24 = *(void *)buf;

  return v24;
}

void sub_237C5E984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unsigned int v17 = (char *)operator new(0x48uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)unsigned int v17 = 0;
  *((void *)v17 + 1) = v10;
  int v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)int v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_237C5EC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_237C5EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)int v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_237C5F024(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_237C5F2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_237C5F364(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL test_utils::Comparator::closeEnoughWPercent(test_utils::Comparator *this, float a2, float a3, float a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  float v6 = fmaxf(a4, 0.0);
  float v7 = vabds_f32(a2, a3);
  if (v7 < v6) {
    return 1;
  }
  float v8 = fabsf(a2);
  float v9 = fabsf(a3);
  if (v9 < v8) {
    float v8 = v9;
  }
  if (v7 < (float)(v8 * v6)) {
    return 1;
  }
  OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  BOOL result = os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO);
  if (result)
  {
    int v12 = 134218240;
    double v13 = a2;
    __int16 v14 = 2048;
    double v15 = a3;
    _os_log_impl(&dword_237C17000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.9f, and val2: %.9f are not close enough!\n", (uint8_t *)&v12, 0x16u);
    return 0;
  }
  return result;
}

BOOL test_utils::Comparator::closeEnough(test_utils::Comparator *this, float a2, float a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  double v4 = a2;
  if (a2 <= 0.001) {
    float v5 = 0.000001;
  }
  else {
    float v5 = a2 / 1000.0;
  }
  float v6 = vabds_f32(a2, a3);
  if (v6 >= v5)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      int v9 = 134218240;
      double v10 = v4;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl(&dword_237C17000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.7f, and val2: %.7f are not close enough!\n", (uint8_t *)&v9, 0x16u);
    }
  }
  return v6 < v5;
}

BOOL test_utils::Comparator::closeEnough(float *a1, float *a2)
{
  BOOL v4 = test_utils::Comparator::closeEnough((test_utils::Comparator *)a1, *a1, *a2);
  if (!v4) {
    return 0;
  }
  BOOL v5 = test_utils::Comparator::closeEnough((test_utils::Comparator *)v4, a1[1], a2[1]);
  if (!v5) {
    return 0;
  }
  float v6 = a1[2];
  float v7 = a2[2];
  return test_utils::Comparator::closeEnough((test_utils::Comparator *)v5, v6, v7);
}

BOOL test_utils::Comparator::closeEnough(test_utils::Comparator *this, int a2)
{
  int v3 = (int)this;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (this != a2)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109376;
      v6[1] = v3;
      __int16 v7 = 1024;
      int v8 = a2;
      _os_log_impl(&dword_237C17000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %d, and val2: %d are not close enough!\n", (uint8_t *)v6, 0xEu);
    }
  }
  return v3 == a2;
}

BOOL test_utils::Comparator::closeEnoughSoftmax(test_utils::Comparator *this, float a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  float v3 = vabds_f32(a2, a3);
  if (v3 >= 0.01)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      int v8 = 134218240;
      double v9 = a2;
      __int16 v10 = 2048;
      double v11 = a3;
      _os_log_impl(&dword_237C17000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.3f, and val2: %.3f are not close enough!\n", (uint8_t *)&v8, 0x16u);
    }
  }
  return v3 < 0.01;
}

void ou3dor::CadModelRetriever::CadModelRetriever(ou3dor::CadModelRetriever *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26EAD6100;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1065353216;
  [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  [(id)objc_claimAutoreleasedReturnValue() pathForResource:@"CadAssets" ofType:0];
  [ objc_claimAutoreleasedReturnValue() UTF8String];
  operator new();
}

void sub_237C5FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table(a15);
  size_t v25 = *a16;
  if (*a16)
  {
    *(void *)(v23 + 32) = v25;
    operator delete(v25);
  }

  uint64_t v26 = *(void *)(v23 + 8);
  *(void *)(v23 + 8) = 0;
  if (v26) {
    std::default_delete<OUDataLoader>::operator()[abi:ne180100](a14, v26);
  }
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<float>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v3 = v2[63];
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)v2 + 6);
  }
  if (v3 != 7
    || (v4 >= 0 ? (BOOL v5 = (int *)(v2 + 40)) : (BOOL v5 = (int *)*((void *)v2 + 5)),
        (int v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == 1634692198) ? (v8 = v7 == 842232929) : (v8 = 0),
        !v8))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "float64");
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v2 + 12);
}

void sub_237C5FF90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::span<float,18446744073709551615ul>>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    double v9 = &v6[16 * v8];
    double v11 = (char *)*a1;
    __int16 v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      __int16 v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t OUDataLoader::getDataSpan<unsigned short>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v3 = (const void **)(v2 + 40);
  uint64_t v4 = v2[63];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)v2 + 6);
  }
  if (v4 != 6
    || (v5 >= 0 ? (int v6 = (unsigned __int16 *)(v2 + 40)) : (int v6 = (unsigned __int16 *)*v3),
        (int v7 = *(_DWORD *)v6, v8 = v6[2], v7 == 1953393013) ? (v9 = v8 == 13873) : (v9 = 0),
        !v9))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "uint32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int8");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v2 + 12);
}

void sub_237C601A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<unsigned char>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v3 = (const void **)(v2 + 40);
  uint64_t v4 = v2[63];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)v2 + 6);
  }
  if (v4 != 5
    || (v5 >= 0 ? (int v6 = v2 + 40) : (int v6 = (unsigned __int8 *)*v3),
        (int v7 = *(_DWORD *)v6, v8 = v6[4], v7 == 1953393013) ? (v9 = v8 == 56) : (v9 = 0),
        !v9))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "uint16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int8");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v2 + 12);
}

void sub_237C6031C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<signed char>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v3 = (const void **)(v2 + 40);
  uint64_t v4 = v2[63];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)v2 + 6);
  }
  if (v4 != 4 || (v5 >= 0 ? (int v6 = v2 + 40) : (int v6 = *v3), *v6 != 947154537))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v2 + 12);
}

void sub_237C60444(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dor::CadModelRetriever::RetrieveCadModels(ou3dor::CadModelRetriever *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        int v7 = (OU3DObject *)*(id *)(*((void *)&v14 + 1) + 8 * i);
        uint64_t CadModel = ou3dor::CadModelRetriever::RetrieveCadModel(a1, v7);
        if (CadModel != -1)
        {
          BOOL v9 = (void *)*((void *)a1 + 2);
          __int16 v10 = objc_msgSend(NSString, "stringWithFormat:", @"%d", CadModel);
          double v11 = [v9 objectForKeyedSubscript:v10];
          [(OU3DObject *)v7 setCadModelName:v11];

          uint64_t v12 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = [(OU3DObject *)v7 cadModelName];
            *(_DWORD *)long long buf = 136315394;
            BOOL v19 = "CadModelRetriever";
            __int16 v20 = 2112;
            unint64_t v21 = v13;
            _os_log_impl(&dword_237C17000, v12, OS_LOG_TYPE_INFO, "[3DOR][%s] retrieved model: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
    }
    while (v4);
  }
}

void sub_237C60650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ou3dor::CadModelRetriever::RetrieveCadModel(ou3dor::CadModelRetriever *this, OU3DObject *a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = [(OU3DObject *)v3 type];
  std::string::basic_string[abi:ne180100]<0>(buf, (char *)[v4 UTF8String]);
  uint64_t v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(kObjectTypeToRetrievelClassIdx, (unsigned __int8 *)buf);
  if (v56 < 0) {
    operator delete(*(void **)buf);
  }

  if (!v5)
  {
    int v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315138;
      *(void *)&buf[1] = "CadModelRetriever";
      _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR][%s] unsupported object type for retrieval.", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_34;
  }
  int v6 = [(OU3DObject *)v3 embedding3d];
  if (![v6 count])
  {
    char v36 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315138;
      *(void *)&buf[1] = "CadModelRetriever";
      _os_log_impl(&dword_237C17000, v36, OS_LOG_TYPE_INFO, "[3DOR][%s] no object embedding for the current object; skipping.",
        (uint8_t *)buf,
        0xCu);
    }

LABEL_34:
    uint64_t v37 = 0xFFFFFFFFLL;
    goto LABEL_45;
  }
  if ([v6 count] != 256)
  {
    uint64_t v43 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      ou3dor::CadModelRetriever::RetrieveCadModel(v43);
    }

    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x237E2C1F0](exception, &unk_237CC3E0E);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = 0;
  float v8 = 0.0;
  do
  {
    BOOL v9 = [v6 objectAtIndexedSubscript:v7];
    [v9 floatValue];
    float v11 = v10;

    float v8 = v11 * v11 + v8;
    ++v7;
  }
  while (v7 != 256);
  uint64_t v12 = 0;
  float v13 = sqrtf(v8);
  do
  {
    long long v14 = [v6 objectAtIndexedSubscript:v12];
    [v14 floatValue];
    *(float *)&buf[v12] = v15 / v13;

    ++v12;
  }
  while (v12 != 256);
  long long v16 = v5 + 40;
  long long v17 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>((void *)this + 14, v16);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v18 = v17 + 3;
  ou3dor::CadModelRetriever::SortByDistance((uint64_t)this, (uint64_t *)v17 + 3, (uint64_t)buf, &__p);
  uint64_t v19 = 0;
  int v20 = 0;
  unsigned __int8 v21 = 0;
  memset(v46, 0, sizeof(v46));
  int v47 = 1065353216;
  do
  {
    uint64_t v22 = *(unsigned __int16 *)(*v18 + 2 * __p.__begin_[v19]);
    unsigned __int8 v45 = 0;
    unsigned __int8 v45 = *(unsigned char *)(*((void *)this + 10) + v22);
    v49[0].i64[0] = (uint64_t)&v45;
    uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned char,int>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,int>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,int>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,int>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v46, &v45, (uint64_t)&std::piecewise_construct, v49);
    ++v19;
    int v24 = *((_DWORD *)v23 + 5);
    *((_DWORD *)v23 + 5) = v24 + 1;
    if (v24 >= v20)
    {
      unsigned __int8 v21 = v45;
      int v20 = v24 + 1;
    }
  }
  while (v19 != 10);
  size_t v25 = [(OU3DObject *)v3 boxesDict];
  uint64_t v26 = [v25 objectForKey:@"rawdetection"];

  if (v26)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    float32x4_t v50 = 0u;
    memset(v49, 0, sizeof(v49));
    box3dFromNSArray(v26, (uint64_t)v49);
    float32x4_t v27 = vsubq_f32(v49[0], v49[1]);
    float32x4_t v28 = vmulq_f32(v27, v27);
    v28.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
    float32x4_t v29 = vsubq_f32(v49[0], v50);
    float32x4_t v30 = vmulq_f32(v29, v29);
    v30.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    BOOL v35 = v28.f32[0] < v30.f32[0];
    float v31 = v30.f32[0] / v28.f32[0];
    float v32 = v28.f32[0] / v30.f32[0];
    if (!v35) {
      float v32 = v31;
    }
    double v33 = v32;
    if (v33 <= 0.7 || v21 > 1u)
    {
      BOOL v35 = (v21 & 0xFE) == 0xE && v33 < 0.7;
      if (v35) {
        v21 -= 14;
      }
    }
    else
    {
      v21 += 14;
    }
  }
  std::vector<int>::pointer begin = __p.__begin_;
  if (__p.__begin_ == __p.__end_)
  {
LABEL_39:
    uint64_t v40 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      __int32 v41 = *v16;
      v49[0].i32[0] = 136315650;
      *(uint64_t *)((char *)v49[0].i64 + 4) = (uint64_t)"CadModelRetriever";
      v49[0].i16[6] = 1024;
      *(__int32 *)((char *)&v49[0].i32[3] + 2) = v41;
      v49[1].i16[1] = 1024;
      v49[1].i32[1] = v21;
      _os_log_impl(&dword_237C17000, v40, OS_LOG_TYPE_INFO, "[3DOR][%s] Could not find any CAD model for (class, subclass) = (%d, %d).", (uint8_t *)v49, 0x18u);
    }

    uint64_t v37 = 0xFFFFFFFFLL;
  }
  else
  {
    while (1)
    {
      uint64_t v39 = *(unsigned __int16 *)(*v18 + 2 * *begin);
      if (*(unsigned char *)(*((void *)this + 12) + v39))
      {
        if (*(unsigned __int8 *)(*((void *)this + 10) + v39) == v21) {
          break;
        }
      }
      if (++begin == __p.__end_) {
        goto LABEL_39;
      }
    }
    uint64_t v37 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * v39);
  }

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v46);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
LABEL_45:

  return v37;
}

void sub_237C60BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  __cxa_free_exception(v44);

  _Unwind_Resume(a1);
}

void ou3dor::CadModelRetriever::SortByDistance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::vector<int> *a4@<X8>)
{
  unint64_t v8 = (a2[1] - *a2) >> 1;
  LODWORD(v26) = 0;
  std::vector<float>::vector(__p, v8, &v26);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1] - *a2;
  std::vector<int>::size_type v11 = v10 >> 1;
  if (v10)
  {
    uint64_t v12 = 0;
    float v13 = __p[0];
    uint64_t v14 = *(void *)(a1 + 24);
    if (v11 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v11;
    }
    do
    {
      uint64_t v16 = 0;
      v13[v12] = 0;
      uint64_t v17 = *(void *)(v14 + 16 * *(unsigned __int16 *)(v9 + 2 * v12));
      float v18 = 0.0;
      do
      {
        float v18 = (float)(*(float *)(a3 + v16) - *(float *)(v17 + v16))
            * (float)(*(float *)(a3 + v16) - *(float *)(v17 + v16))
            + v18;
        *(float *)&v13[v12] = v18;
        v16 += 4;
      }
      while (v16 != 1024);
      ++v12;
    }
    while (v12 != v15);
  }
  std::vector<int>::vector(a4, v11);
  std::vector<int>::pointer begin = a4->__begin_;
  std::__split_buffer<std::string>::pointer end = a4->__end_;
  if (a4->__begin_ != end)
  {
    int v21 = 0;
    uint64_t v22 = a4->__begin_;
    do
      *v22++ = v21++;
    while (v22 != end);
  }
  unint64_t v23 = 126 - 2 * __clz(end - begin);
  uint64_t v26 = __p;
  if (end == begin) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(begin, end, (uint64_t **)&v26, v24, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_237C60DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ou3dor::CadModelRetriever::~CadModelRetriever(ou3dor::CadModelRetriever *this)
{
  ou3dor::CadModelRetriever::~CadModelRetriever(this);
  JUMPOUT(0x237E2C510);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = &unk_26EAD6100;
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table((uint64_t)this + 112);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  id v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    std::default_delete<OUDataLoader>::operator()[abi:ne180100]((uint64_t)this + 8, v3);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_237C60E84(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  std::vector<int>::size_type v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          std::vector<int>::size_type v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if (*(float *)(**a3 + 4 * v44) < *(float *)(**a3 + 4 * v45))
                {
                  int *v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4uLL:
                BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                int v46 = v12 + 2;
                int v47 = v12 + 3;
                BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v48 = *(a2 - 1);
                uint64_t v49 = v12[3];
                uint64_t v50 = **a3;
                if (*(float *)(v50 + 4 * v48) < *(float *)(v50 + 4 * v49))
                {
                  *int v47 = v48;
                  *(a2 - 1) = v49;
                  uint64_t v51 = *v47;
                  uint64_t v52 = *v46;
                  float v53 = *(float *)(v50 + 4 * v51);
                  if (v53 < *(float *)(v50 + 4 * v52))
                  {
                    int *v46 = v51;
                    *int v47 = v52;
                    uint64_t v54 = v12[1];
                    if (v53 < *(float *)(v50 + 4 * v54))
                    {
                      v12[1] = v51;
                      v12[2] = v54;
                      uint64_t v55 = *v12;
                      if (v53 < *(float *)(v50 + 4 * v55))
                      {
                        int *v12 = v51;
                        v12[1] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                char v56 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = **a3;
                  uint64_t v59 = v12;
                  do
                  {
                    uint64_t v61 = *v59;
                    uint64_t v60 = v59[1];
                    uint64_t v59 = v56;
                    float v62 = *(float *)(v58 + 4 * v60);
                    if (v62 < *(float *)(v58 + 4 * v61))
                    {
                      uint64_t v63 = v57;
                      while (1)
                      {
                        *(int *)((char *)v12 + v63 + 4) = v61;
                        if (!v63) {
                          break;
                        }
                        uint64_t v61 = *(int *)((char *)v12 + v63 - 4);
                        v63 -= 4;
                        if (v62 >= *(float *)(v58 + 4 * v61))
                        {
                          uint64_t v64 = (int *)((char *)v12 + v63 + 4);
                          goto LABEL_80;
                        }
                      }
                      uint64_t v64 = v12;
LABEL_80:
                      int *v64 = v60;
                    }
                    char v56 = v59 + 1;
                    v57 += 4;
                  }
                  while (v59 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              int v96 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v97 = **a3;
                do
                {
                  uint64_t v99 = *v11;
                  uint64_t v98 = v11[1];
                  std::vector<int>::size_type v11 = v96;
                  float v100 = *(float *)(v97 + 4 * v98);
                  if (v100 < *(float *)(v97 + 4 * v99))
                  {
                    do
                    {
                      *int v96 = v99;
                      uint64_t v99 = *(v96 - 2);
                      --v96;
                    }
                    while (v100 < *(float *)(v97 + 4 * v99));
                    *int v96 = v98;
                  }
                  int v96 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v65 = (v14 - 2) >> 1;
              int64_t v66 = *a3;
              int64_t v67 = v65;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  uint64_t v70 = &v12[v69];
                  uint64_t v71 = 2 * v67 + 2;
                  uint64_t v72 = *v66;
                  if (v71 < (uint64_t)v14 && *(float *)(v72 + 4 * *v70) < *(float *)(v72 + 4 * v70[1]))
                  {
                    ++v70;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  BOOL result = &v12[v68];
                  uint64_t v73 = *v70;
                  uint64_t v74 = *result;
                  float v75 = *(float *)(v72 + 4 * v74);
                  if (*(float *)(v72 + 4 * v73) >= v75)
                  {
                    do
                    {
                      float v76 = v70;
                      uint64_t *result = v73;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      uint64_t v70 = &v12[v69];
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v14 && *(float *)(v72 + 4 * *v70) < *(float *)(v72 + 4 * v70[1]))
                      {
                        ++v70;
                        uint64_t v69 = v78;
                      }
                      uint64_t v73 = *v70;
                      BOOL result = v76;
                    }
                    while (*(float *)(v72 + 4 * v73) >= v75);
                    *float v76 = v74;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v79 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v80 = 0;
                int v81 = *v12;
                uint64_t v82 = *a3;
                unint64_t v83 = v12;
                do
                {
                  uint64_t v84 = v83;
                  v83 += v80 + 1;
                  uint64_t v85 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v86 = v85 + 2;
                  if (v86 < v79)
                  {
                    BOOL result = (int *)v83[1];
                    if (*(float *)(*v82 + 4 * *v83) < *(float *)(*v82 + 4 * (void)result))
                    {
                      ++v83;
                      uint64_t v80 = v86;
                    }
                  }
                  *uint64_t v84 = *v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v83 == --a2)
                {
                  *unint64_t v83 = v81;
                }
                else
                {
                  *unint64_t v83 = *a2;
                  *a2 = v81;
                  uint64_t v87 = (char *)v83 - (char *)v12 + 4;
                  if (v87 >= 5)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                    unint64_t v89 = &v12[v88];
                    uint64_t v90 = *v89;
                    uint64_t v91 = *v83;
                    uint64_t v92 = *v82;
                    float v93 = *(float *)(v92 + 4 * v91);
                    if (*(float *)(v92 + 4 * v90) < v93)
                    {
                      do
                      {
                        float v94 = v89;
                        *unint64_t v83 = v90;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        unint64_t v89 = &v12[v88];
                        uint64_t v90 = *v89;
                        unint64_t v83 = v94;
                      }
                      while (*(float *)(v92 + 4 * v90) < v93);
                      int *v94 = v91;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11, &v11[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v16 - 1, v16, &v11[v15 + 1], a3);
            int v17 = *v11;
            *std::vector<int>::size_type v11 = *v16;
            int *v16 = v17;
          }
          else
          {
            BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(&v11[v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          int v18 = *v11;
          uint64_t v19 = **a3;
          if (a5) {
            break;
          }
          float v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v11 - 1)) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(float *)(v19 + 4 * *(a2 - 1)))
          {
            char v36 = v11 + 1;
            do
            {
              uint64_t v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v20 >= *(float *)(v19 + 4 * *v12));
          }
          else
          {
            uint64_t v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v20 >= *(float *)(v19 + 4 * v35));
          }
          uint64_t v37 = a2;
          if (v12 < a2)
          {
            uint64_t v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v20 < *(float *)(v19 + 4 * v38));
          }
          if (v12 < v37)
          {
            int v39 = *v12;
            int v40 = *v37;
            do
            {
              int *v12 = v40;
              int *v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                int v39 = v41;
              }
              while (v20 >= *(float *)(v19 + 4 * v41));
              do
              {
                uint64_t v42 = *--v37;
                int v40 = v42;
              }
              while (v20 < *(float *)(v19 + 4 * v42));
            }
            while (v12 < v37);
          }
          uint64_t v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *std::vector<int>::size_type v11 = *v43;
          }
          a5 = 0;
          int *v43 = v18;
        }
        float v20 = *(float *)(v19 + 4 * v18);
LABEL_13:
        uint64_t v21 = 0;
        do
          uint64_t v22 = v11[++v21];
        while (*(float *)(v19 + 4 * v22) < v20);
        unint64_t v23 = &v11[v21];
        uint64_t v24 = a2;
        if (v21 == 1)
        {
          uint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *--v24;
          }
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        else
        {
          do
            uint64_t v25 = *--v24;
          while (*(float *)(v19 + 4 * v25) >= v20);
        }
        if (v23 >= v24)
        {
          double v33 = v23 - 1;
        }
        else
        {
          int v27 = *v24;
          int v28 = v22;
          float32x4_t v29 = &v11[v21];
          float32x4_t v30 = v24;
          do
          {
            int *v29 = v27;
            int *v30 = v28;
            do
            {
              uint64_t v31 = v29[1];
              ++v29;
              int v28 = v31;
            }
            while (*(float *)(v19 + 4 * v31) < v20);
            do
            {
              uint64_t v32 = *--v30;
              int v27 = v32;
            }
            while (*(float *)(v19 + 4 * v32) >= v20);
          }
          while (v29 < v30);
          double v33 = v29 - 1;
        }
        if (v33 != v11) {
          *std::vector<int>::size_type v11 = *v33;
        }
        *double v33 = v18;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        BOOL result = (int *)std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(v11, v33, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v33 + 1;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11, v33, a3);
      uint64_t v12 = v33 + 1;
      BOOL result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v33 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    return result;
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **a4;
  float v7 = *(float *)(v6 + 4 * v4);
  float v8 = *(float *)(v6 + 4 * v5);
  uint64_t v9 = *a3;
  float v10 = *(float *)(v6 + 4 * v9);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *a2;
      uint64_t v12 = *result;
      if (*(float *)(v6 + 4 * v11) < *(float *)(v6 + 4 * v12))
      {
        uint64_t *result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      uint64_t *result = v4;
      *a2 = v5;
      uint64_t v13 = *a3;
      if (*(float *)(v6 + 4 * v13) >= v8) {
        return result;
      }
      *a2 = v13;
    }
    else
    {
      uint64_t *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(float *)(v25 + 4 * v23) < *(float *)(v25 + 4 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          int *v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          float v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v20 = a1;
LABEL_13:
      *float v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  if (*(float *)(v13 + 4 * v11) < *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,unsigned char>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_237C61A44(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  float v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_237C61CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  v8[40] = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_237C61D68(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::default_delete<OUDataLoader>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(a2 + 24);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x237E2C510);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint8x8_t v11 = operator new(0x30uLL);
  *uint8x8_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint8x8_t v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }
  *uint8x8_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    size_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_237C6221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned char,int>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,int>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,int>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,int>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_237C62560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_CadModelRetriever_mm()
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v24) = 0;
  *((void *)&v24 + 1) = @"Unknown";
  LODWORD(v25) = 1;
  *((void *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 2;
  *((void *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 3;
  *((void *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 4;
  *((void *)&v28 + 1) = *((id *)&v27 + 1);
  LODWORD(v29) = 5;
  *((void *)&v29 + 1) = *((id *)&v28 + 1);
  LODWORD(v30) = 6;
  unint64_t v23 = @"Door";
  *((void *)&v30 + 1) = v23;
  LODWORD(v31) = 7;
  unint64_t v22 = @"Window";
  *((void *)&v31 + 1) = v22;
  LODWORD(v32) = 8;
  *((void *)&v32 + 1) = *((id *)&v29 + 1);
  LODWORD(v33) = 9;
  uint64_t v20 = @"Fireplace";
  *((void *)&v33 + 1) = v20;
  LODWORD(v34) = 10;
  *((void *)&v34 + 1) = *((id *)&v32 + 1);
  LODWORD(v35) = 11;
  *((void *)&v35 + 1) = *((id *)&v34 + 1);
  LODWORD(v36) = 12;
  unint64_t v21 = @"Stairs";
  *((void *)&v36 + 1) = v21;
  LODWORD(v37) = 13;
  unint64_t v16 = @"Bed";
  *((void *)&v37 + 1) = v16;
  LODWORD(v38) = 14;
  int v39 = @"Cabinet";
  int v40 = 15;
  uint64_t v19 = @"Chair";
  uint64_t v41 = v19;
  int v42 = 16;
  uint64_t v43 = v39;
  int v44 = 17;
  uint64_t v45 = v43;
  int v46 = 18;
  size_t v18 = @"Sofa";
  int v47 = v18;
  int v48 = 19;
  unint64_t v17 = @"Table";
  uint64_t v49 = v17;
  int v50 = 20;
  BOOL v15 = @"Toilet";
  uint64_t v51 = v15;
  int v52 = 21;
  v0 = @"Sink";
  float v53 = v0;
  int v54 = 22;
  float v14 = @"Bathtub";
  uint64_t v55 = v14;
  int v56 = 23;
  id v57 = *((id *)&v35 + 1);
  int v58 = 24;
  uint64_t v1 = @"Refrigerator";
  uint64_t v59 = v1;
  int v60 = 25;
  int8x8_t v2 = @"Stove";
  uint64_t v61 = v2;
  int v62 = 26;
  unint64_t v3 = @"Washer";
  uint64_t v63 = v3;
  int v64 = 27;
  unint64_t v4 = @"Oven";
  int64_t v65 = v4;
  int v66 = 28;
  unint64_t v5 = @"Dishwasher";
  int64_t v67 = v5;
  int v68 = 29;
  id v69 = v57;
  int v70 = 30;
  uint64_t v6 = v45;
  uint64_t v71 = v6;
  int v72 = 31;
  id v73 = v69;
  int v74 = 32;
  unint64_t v7 = @"Screen";
  float v75 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v24, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v34 = xmmword_237CB4F00;
  long long v35 = unk_237CB4F10;
  long long v36 = xmmword_237CB4F20;
  long long v37 = unk_237CB4F30;
  long long v30 = xmmword_237CB4EC0;
  long long v31 = unk_237CB4ED0;
  long long v32 = xmmword_237CB4EE0;
  long long v33 = unk_237CB4EF0;
  long long v26 = xmmword_237CB4E80;
  long long v27 = unk_237CB4E90;
  long long v28 = xmmword_237CB4EA0;
  long long v29 = unk_237CB4EB0;
  long long v24 = xmmword_237CB4E60;
  long long v25 = unk_237CB4E70;
  uint64_t v38 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v24, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v24) = 0;
  *((void *)&v24 + 1) = v6;
  LODWORD(v25) = 1;
  *((void *)&v25 + 1) = v1;
  LODWORD(v26) = 2;
  *((void *)&v26 + 1) = @"Shelf";
  LODWORD(v27) = 3;
  *((void *)&v27 + 1) = v2;
  LODWORD(v28) = 4;
  *((void *)&v28 + 1) = v16;
  LODWORD(v29) = 5;
  *((void *)&v29 + 1) = v0;
  LODWORD(v30) = 6;
  *((void *)&v30 + 1) = v3;
  LODWORD(v31) = 7;
  *((void *)&v31 + 1) = v15;
  LODWORD(v32) = 8;
  *((void *)&v32 + 1) = v14;
  LODWORD(v33) = 9;
  *((void *)&v33 + 1) = v4;
  LODWORD(v34) = 10;
  *((void *)&v34 + 1) = v5;
  LODWORD(v35) = 11;
  *((void *)&v35 + 1) = v20;
  LODWORD(v36) = 12;
  *((void *)&v36 + 1) = @"Stool";
  LODWORD(v37) = 13;
  uint8x8_t v9 = v19;
  *((void *)&v37 + 1) = v9;
  LODWORD(v38) = 14;
  int v39 = v17;
  int v40 = 15;
  uint64_t v41 = v7;
  int v42 = 16;
  unint64_t v10 = v18;
  uint64_t v43 = v10;
  int v44 = 17;
  uint64_t v45 = v21;
  int v46 = 18;
  int v47 = v22;
  int v48 = 19;
  uint64_t v49 = v23;
  int v50 = 20;
  uint64_t v51 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v24, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
  std::string::basic_string[abi:ne180100]<0>(&v24, (char *)[(__CFString *)v10 UTF8String]);
  BYTE8(v25) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v26, (char *)[(__CFString *)v9 UTF8String]);
  BYTE8(v27) = 1;
  std::unordered_map<std::string,unsigned char>::unordered_map((uint64_t)kObjectTypeToRetrievelClassIdx, (unsigned __int8 *)&v24, 2);
  for (uint64_t k = 0; k != -64; k -= 32)
  {
    if (*((char *)&v27 + k + 7) < 0) {
      operator delete(*(void **)((char *)&v26 + k));
    }
  }
  __cxa_atexit((void (*)(void *))std::unordered_map<std::string,unsigned char>::~unordered_map[abi:ne180100], kObjectTypeToRetrievelClassIdx, &dword_237C17000);
}

void sub_237C62D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v28 = 0;
  while (1)
  {
    if (*(char *)(v26 + v28 + 55) < 0) {
      operator delete(*(void **)(v26 + v28 + 32));
    }
    v28 -= 32;
    if (v28 == -64) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_237C62F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C62FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t is_sample_points_equal(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  unint64_t v6 = 0;
  unint64_t v7 = ([v5 count] + 29) / 0x1EuLL;
  unint64_t v8 = (float *)(a3 + 8);
  uint8x8_t v9 = (float *)(a1 + 8);
  int v10 = 1;
  while (v6 < [v5 count])
  {
    uint64_t v11 = (test_utils::Comparator *)[v5 points];
    long long v12 = *((_OWORD *)v11 + v6);
    *(_OWORD *)(v8 - 2) = v12;
    BOOL v13 = test_utils::Comparator::closeEnoughWPercent(v11, *(v9 - 2), *(float *)&v12, 0.000001);
    BOOL v14 = v13;
    BOOL v15 = test_utils::Comparator::closeEnoughWPercent((test_utils::Comparator *)v13, *(v9 - 1), *(v8 - 1), 0.000001);
    v10 &= test_utils::Comparator::closeEnoughWPercent((test_utils::Comparator *)v15, *v9, *v8, 0.000001) && v15 && v14;
    v6 += v7;
    v8 += 4;
    v9 += 4;
  }

  return v10 & 1;
}

void sub_237C630CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C633C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C63880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_237C639D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C63B4C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_237C63DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C63F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C6408C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C6422C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C64834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_237C64A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C64C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C64E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C6503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_237C65190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C65458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double rotationZMatrix(float a1)
{
  __float2 v1 = __sincosf_stret(a1);
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v1.__sinval), LODWORD(v1.__cosval)));
}

float rotationYMatrix(float a1)
{
  return __sincosf_stret(a1).__cosval;
}

double rotationXMatrix(float a1)
{
  __sincosf_stret(a1);
  *(void *)&double result = 1065353216;
  return result;
}

__n128 swapCornerGT2QA@<Q0>(const box3d *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)a1;
  long long v3 = *((_OWORD *)a1 + 1);
  long long v4 = *((_OWORD *)a1 + 2);
  *(_OWORD *)a2 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  __n128 result = *((__n128 *)a1 + 4);
  long long v6 = *((_OWORD *)a1 + 5);
  long long v7 = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)a1 + 7);
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  return result;
}

__n128 box3dToCentroidSizeAngle@<Q0>(float32x4_t *a1@<X0>, uint64_t *a2@<X8>)
{
  float32x4_t v3 = vsubq_f32(*a1, a1[3]);
  float32x4_t v4 = vmulq_f32(v3, v3);
  float v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  float32x4_t v6 = vsubq_f32(*a1, a1[1]);
  float32x4_t v7 = vmulq_f32(v6, v6);
  float v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  float32x4_t v9 = vsubq_f32(*a1, a1[4]);
  float32x4_t v10 = vmulq_f32(v9, v9);
  float v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v15 = vmulq_f32(vaddq_f32(*a1, a1[6]), v10);
  float v12 = atan2f(v6.f32[0], v6.f32[1]);
  int v16 = 0;
  std::vector<float>::vector(a2, 7uLL, &v16);
  uint64_t v13 = *a2;
  __n128 result = (__n128)v15;
  *(void *)uint64_t v13 = v15.i64[0];
  *(_DWORD *)(v13 + 8) = v15.i32[2];
  *(float *)(v13 + 12) = v5;
  *(float *)(v13 + 16) = v8;
  *(float *)(v13 + 20) = v11;
  *(float *)(v13 + 24) = v12;
  return result;
}

void box3dVol(const float *a1)
{
  if (a1)
  {
    std::vector<float>::vector(__C, 3uLL);
    float v2 = 0.0;
    vDSP_vsub(a1 + 3, 1, a1, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    vDSP_vsub(a1 + 6, 1, a1 + 3, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    vDSP_vsub(a1 + 12, 1, a1, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    if (__C[0])
    {
      __C[1] = __C[0];
      operator delete(__C[0]);
    }
  }
}

void sub_237C659A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float boxVolume(const box3d *a1)
{
  float v2 = operator new(0x80uLL);
  long long v3 = *((_OWORD *)a1 + 5);
  v2[4] = *((_OWORD *)a1 + 4);
  v2[5] = v3;
  long long v4 = *((_OWORD *)a1 + 7);
  v2[6] = *((_OWORD *)a1 + 6);
  v2[7] = v4;
  long long v5 = *((_OWORD *)a1 + 1);
  _OWORD *v2 = *(_OWORD *)a1;
  v2[1] = v5;
  long long v6 = *((_OWORD *)a1 + 3);
  v2[2] = *((_OWORD *)a1 + 2);
  v2[3] = v6;
  std::vector<float>::vector(__p, 0x18uLL);
  uint64_t v7 = 0;
  float v8 = v2;
  do
  {
    float32x4_t v9 = (char *)__p[0] + v7;
    uint64_t v10 = *(void *)v8;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v8 + 2);
    *(void *)float32x4_t v9 = v10;
    v7 += 12;
    ++v8;
  }
  while (v7 != 96);
  operator delete(v2);
  box3dVol((const float *)__p[0]);
  float v12 = v11;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_237C65A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t box3dToYDownCoord@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 128; i += 16)
  {
    int32x4_t v3 = (int32x4_t)vmulq_f32(*(float32x4_t *)(result + i), (float32x4_t)xmmword_237CB4F80);
    *(int32x4_t *)(a2 + i) = vuzp1q_s32(v3, vrev64q_s32(v3));
  }
  return result;
}

uint64_t box3dToZUpCoord@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 128; i += 16)
  {
    int32x4_t v3 = (int32x4_t)vmulq_f32(*(float32x4_t *)(result + i), (float32x4_t)xmmword_237CB4F90);
    *(int32x4_t *)(a2 + i) = vuzp1q_s32(v3, vrev64q_s32(v3));
  }
  return result;
}

float flipAxisToWorld@<S0>(const box3d *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = 0;
  long long v3 = *((_OWORD *)a1 + 5);
  a2[4] = *((_OWORD *)a1 + 4);
  a2[5] = v3;
  long long v4 = *((_OWORD *)a1 + 7);
  a2[6] = *((_OWORD *)a1 + 6);
  a2[7] = v4;
  long long v5 = *((_OWORD *)a1 + 1);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  long long v6 = *((_OWORD *)a1 + 3);
  a2[2] = *((_OWORD *)a1 + 2);
  a2[3] = v6;
  do
  {
    uint64_t v7 = (float *)&a2[v2];
    unint64_t v8 = vuzp1q_s32((int32x4_t)a2[v2], (int32x4_t)a2[v2]).u64[0];
    float result = -COERCE_FLOAT(HIDWORD(*(void *)&a2[v2]));
    v7[2] = result;
    *(void *)uint64_t v7 = v8;
    ++v2;
  }
  while (v2 != 8);
  return result;
}

void box3dIou(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  float32x4_t v7 = *a1;
  float32x4_t v8 = *a2;
  float32x4_t v9 = vsubq_f32(*a1, *a2);
  float32x4_t v10 = vmulq_f32(v9, v9);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]) <= 0.001)
  {
    uint64_t v25 = 1;
    while (v25 != 8)
    {
      float32x4_t v26 = vsubq_f32(a1[v25], a2[v25]);
      float32x4_t v27 = vmulq_f32(v26, v26);
      ++v25;
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]) > 0.001)
      {
        if ((unint64_t)(v25 - 2) < 7) {
          goto LABEL_2;
        }
        break;
      }
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)a4 = _D0;
    *(float *)(a4 + 8) = boxVolume((const box3d *)a1);
    *(_OWORD *)(a4 + 12) = xmmword_237CB4FA0;
    *(_OWORD *)(a4 + 28) = xmmword_237CB44B0;
    *(_DWORD *)(a4 + 44) = 0;
  }
  else
  {
LABEL_2:
    if (a3)
    {
      uint64_t v11 = 0;
      float32x4_t v12 = a1[5];
      float32x4_t v63 = a1[4];
      float32x4_t v64 = v12;
      float32x4_t v13 = a1[7];
      float32x4_t v65 = a1[6];
      float32x4_t v66 = v13;
      float32x4_t v14 = a1[1];
      *(float32x4_t *)uint64_t v59 = *a1;
      float32x4_t v60 = v14;
      float32x4_t v15 = a1[3];
      float32x4_t v61 = a1[2];
      float32x4_t v62 = v15;
      do
      {
        int v16 = &v59[v11];
        unint64_t v17 = vuzp1q_s32(*(int32x4_t *)&v59[v11], *(int32x4_t *)&v59[v11]).u64[0];
        *((float *)v16 + 2) = -COERCE_FLOAT((unint64_t)v59[v11] >> 32);
        void *v16 = (void *)v17;
        v11 += 2;
      }
      while (v11 != 16);
      uint64_t v18 = 0;
      float32x4_t v19 = a2[7];
      v58[6] = a2[6];
      v58[7] = v19;
      float32x4_t v20 = a2[5];
      v58[4] = a2[4];
      v58[5] = v20;
      float32x4_t v21 = a2[1];
      v58[0] = *a2;
      v58[1] = v21;
      float32x4_t v22 = a2[3];
      v58[2] = a2[2];
      v58[3] = v22;
      do
      {
        unint64_t v23 = (float *)&v58[v18];
        unint64_t v24 = vuzp1q_s32((int32x4_t)v58[v18], (int32x4_t)v58[v18]).u64[0];
        void v23[2] = -COERCE_FLOAT(HIDWORD(*(void *)&v58[v18]));
        *(void *)unint64_t v23 = v24;
        ++v18;
      }
      while (v18 != 8);
      box3dIou((const box3d *)v59, (const box3d *)v58, 0);
    }
    else
    {
      float32x4_t v33 = a1[2];
      v7.i64[1] = a1[1].i64[0];
      v33.i64[1] = a1[3].i64[0];
      float32x4_t v34 = a2[2];
      v8.i64[1] = a2[1].i64[0];
      v68[0] = v7;
      v68[1] = v33;
      v34.i64[1] = a2[3].i64[0];
      v67[0] = v8;
      v67[1] = v34;
      OU::Polygon::Polygon(v59, v68, 4);
      OU::Polygon::Polygon(v58, v67, 4);
      OU::clip((OU *)v59, (const Polygon *)v58, (char *)__p);
      float v36 = OU::area((OU *)v59, v35);
      float v38 = OU::area((OU *)v58, v37);
      float v40 = OU::area((OU *)__p, v39);
      float v41 = a1->f32[2];
      float v42 = a2->f32[2];
      float v43 = a1[4].f32[2];
      float v44 = a2[4].f32[2];
      float v46 = OU::area((OU *)v59, v45);
      float32x4_t v55 = *a1;
      float32x4_t v56 = a1[4];
      float v48 = OU::area((OU *)v58, v47);
      float v49 = (float)(v36 + v38) - v40;
      float v50 = fmax((float)(fminf(v43, v44) - fmaxf(v41, v42)), 0.0);
      float v51 = v40 * v50;
      float v52 = v46 * vabds_f32(v56.f32[2], v55.f32[2]);
      float v53 = v48 * vabds_f32(a2[4].f32[2], a2->f32[2]);
      float v54 = (float)(v52 + v53) - v51;
      *(float *)a4 = v51 / v54;
      *(float *)(a4 + 4) = v51;
      *(float *)(a4 + 8) = v54;
      *(float *)(a4 + 12) = v51 / fminf(v52, v53);
      *(float *)(a4 + 16) = v51 / v52;
      *(float *)(a4 + 20) = v51 / v53;
      *(float *)(a4 + 24) = v40 / v49;
      *(float *)(a4 + 28) = v40;
      *(float *)(a4 + 32) = v49;
      *(float *)(a4 + 36) = v40 / fminf(v36, v38);
      *(float *)(a4 + 40) = v40 / v36;
      *(float *)(a4 + 44) = v40 / v38;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*(void *)&v58[0])
      {
        *((void *)&v58[0] + 1) = *(void *)&v58[0];
        operator delete(*(void **)&v58[0]);
      }
      if (v59[0])
      {
        v59[1] = v59[0];
        operator delete(v59[0]);
      }
    }
  }
}

void sub_237C65ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void centroidSizeAngleToBox3d(_OWORD *a1@<X8>, __n128 a2@<Q0>, int8x16_t a3@<Q1>, float a4@<S2>)
{
  std::vector<float>::vector(__p, 7uLL);
  __n128 v6 = a2;
  v6.n128_u32[3] = a3.i32[0];
  float32x4_t v7 = (int8x8_t *)__p[0];
  *(__n128 *)__p[0] = v6;
  v7[2] = vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), 4uLL);
  *(float *)v7[3].i32 = a4;
  centroidSizeAngleToBox3d((uint64_t *)__p, 1, a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_237C65FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void centroidSizeAngleToBox3d(uint64_t *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a1;
  float32_t v6 = *(float *)(*a1 + 20) * 0.5;
  float32x2_t v21 = vmul_f32(*(float32x2_t *)(*a1 + 12), (float32x2_t)0x3F0000003F000000);
  float32x4_t v7 = (float32x2_t *)operator new(0x60uLL);
  float32x4_t v8 = v7;
  uint64_t v9 = 0;
  float32x2_t *v7 = v21;
  v7[1].f32[0] = -v6;
  v7[1].i32[1] = v21.i32[0];
  v7[2].f32[0] = -v21.f32[1];
  v7[2].f32[1] = -v6;
  v7[3].f32[0] = -v21.f32[0];
  v7[3].f32[1] = -v21.f32[1];
  v7[4].f32[0] = -v6;
  v7[4].f32[1] = -v21.f32[0];
  v7[5].i32[0] = v21.i32[1];
  v7[5].f32[1] = -v6;
  v7[6] = v21;
  v7[7].f32[0] = v6;
  v7[7].i32[1] = v21.i32[0];
  v7[8].f32[0] = -v21.f32[1];
  v7[8].f32[1] = v6;
  v7[9].f32[0] = -v21.f32[0];
  v7[9].f32[1] = -v21.f32[1];
  v7[11].i32[0] = v21.i32[1];
  v7[10].f32[0] = v6;
  v7[10].f32[1] = -v21.f32[0];
  v7[11].f32[1] = v6;
  v10.i32[3] = 0;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  uint64_t v11 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  do
  {
    *(float32x2_t *)uint64_t v11 = *(float32x2_t *)((char *)v7 + v9 * 4);
    *((_DWORD *)v11 + 2) = v7[1].i32[v9];
    v9 += 3;
    ++v11;
  }
  while (v9 != 24);
  if (a2)
  {
    unint64_t v12 = (unint64_t)__sincosf_stret(*(float *)(v5 + 24));
    uint64_t v13 = 0;
    v14.i64[1] = 0;
    v14.i32[0] = HIDWORD(v12);
    v10.i32[3] = 0;
    do
    {
      v14.f32[1] = -*(float *)&v12;
      a3[v13] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(a3[v13])), (float32x4_t)v12, *(float32x2_t *)&a3[v13], 1), (float32x4_t)xmmword_237CB44B0, (float32x4_t)a3[v13], 2);
      ++v13;
    }
    while (v13 != 8);
  }
  uint64_t v15 = 0;
  v10.i64[0] = *(void *)v5;
  v10.i32[2] = *(_DWORD *)(v5 + 8);
  do
  {
    a3[v15] = vaddq_f32(v10, (float32x4_t)a3[v15]);
    ++v15;
  }
  while (v15 != 8);
  if ((a2 & 1) == 0)
  {
    __float2 v17 = __sincosf_stret(*(float *)(v5 + 24));
    *(__float2 *)v16.i8 = v17;
    uint64_t v18 = 0;
    int32x4_t v19 = vzip1q_s32(v16, (int32x4_t)0);
    float32x4_t v20 = (float32x4_t)vzip2q_s32(vzip1q_s32(vdupq_lane_s32(*(int32x2_t *)v19.i8, 0), (int32x4_t)0), v19);
    do
    {
      a3[v18] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)__PAIR64__(-v17.__sinval, LODWORD(v17.__cosval)), COERCE_FLOAT(a3[v18])), v20, *(float32x2_t *)&a3[v18], 1), (float32x4_t)xmmword_237CB44B0, (float32x4_t)a3[v18], 2);
      ++v18;
    }
    while (v18 != 8);
  }
  operator delete(v8);
}

double getCentroid(const box3d *a1)
{
  uint64_t v1 = 0;
  float32x4_t v2 = 0uLL;
  do
  {
    float32x4_t v2 = vaddq_f32(v2, *(float32x4_t *)((char *)a1 + v1));
    v1 += 16;
  }
  while (v1 != 128);
  v3.i64[0] = 0x3E0000003E000000;
  v3.i64[1] = 0x3E0000003E000000;
  *(void *)&double result = vmulq_f32(v2, v3).u64[0];
  return result;
}

int32x4_t *rotateBoxCorners@<X0>(int32x4_t *result@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  int32x4_t v4 = result[1];
  int32x4_t v5 = result[2];
  int32x4_t v6 = result[3];
  int32x4_t v7 = vzip1q_s32(*result, v5);
  int32x4_t v8 = vzip2q_s32(*result, v5);
  int32x4_t v9 = vzip1q_s32(v4, v6);
  int32x4_t v10 = vzip2q_s32(v4, v6);
  int32x4_t v11 = vzip1q_s32(v7, v9);
  int32x4_t v12 = vzip2q_s32(v7, v9);
  int32x4_t v13 = vzip1q_s32(v8, v10);
  int32x4_t v14 = vzip2q_s32(v8, v10);
  int32x4_t v15 = vzip1q_s32(v11, v13);
  int32x4_t v16 = vzip2q_s32(v11, v13);
  int32x4_t v17 = vzip1q_s32(v12, v14);
  int32x4_t v18 = vzip2q_s32(v12, v14);
  float32x4_t v19 = (float32x4_t)vzip1q_s32(v15, v17);
  float32x4_t v20 = (float32x4_t)vzip2q_s32(v15, v17);
  float32x4_t v21 = (float32x4_t)vzip1q_s32(v16, v18);
  float32x4_t v22 = (float32x4_t)vzip2q_s32(v16, v18);
  do
  {
    *(float32x4_t *)(a3 + v3) = vaddq_f32(v22, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)a2 + v3))), v20, *(float32x2_t *)((char *)a2 + v3), 1), v21, *(float32x4_t *)((char *)a2 + v3), 2));
    v3 += 16;
  }
  while (v3 != 128);
  return result;
}

float32x4_t *rotateBoxCorners@<X0>(float32x4_t *result@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  float32x4_t v4 = *result;
  float32x4_t v5 = result[1];
  float32x4_t v6 = result[2];
  do
  {
    *(float32x4_t *)(a3 + v3) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(_OWORD *)((char *)a2 + v3))), v5, *(float32x2_t *)((char *)a2 + v3), 1), v6, *(float32x4_t *)((char *)a2 + v3), 2);
    v3 += 16;
  }
  while (v3 != 128);
  return result;
}

void writeBox3ds(const void **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) == (a3[1] - *a3) >> 2)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v6 = (size_t)a1[1];
    }
    int32x4_t v7 = &v44;
    std::string::basic_string[abi:ne180100]((uint64_t)&v44, v6 + 11);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int32x4_t v7 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0) {
        int32x4_t v8 = a1;
      }
      else {
        int32x4_t v8 = *a1;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "corners.txt");
    if (*((char *)a1 + 23) >= 0) {
      size_t v9 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v9 = (size_t)a1[1];
    }
    p_s = &__s;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v9 + 9);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (*((char *)a1 + 23) >= 0) {
        int32x4_t v11 = a1;
      }
      else {
        int32x4_t v11 = *a1;
      }
      memmove(p_s, v11, v9);
    }
    strcpy((char *)p_s + v9, "types.txt");
    if (*((char *)a1 + 23) >= 0) {
      size_t v12 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v12 = (size_t)a1[1];
    }
    int32x4_t v13 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v12 + 15);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int32x4_t v13 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if (*((char *)a1 + 23) >= 0) {
        int32x4_t v14 = a1;
      }
      else {
        int32x4_t v14 = *a1;
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "confidences.txt");
    if (*((char *)a1 + 23) >= 0) {
      size_t v15 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v15 = (size_t)a1[1];
    }
    int32x4_t v16 = &v41;
    std::string::basic_string[abi:ne180100]((uint64_t)&v41, v15 + 9);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int32x4_t v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if (v15)
    {
      if (*((char *)a1 + 23) >= 0) {
        int32x4_t v17 = a1;
      }
      else {
        int32x4_t v17 = *a1;
      }
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, "uuids.txt");
    std::vector<float>::vector(v40, 0x4924924924924928 * ((a2[1] - *a2) >> 5));
    std::vector<float>::vector(__p, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    std::vector<std::string>::vector(&v38, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    uint64_t v18 = *a2;
    if (a2[1] != *a2)
    {
      int v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 4;
      do
      {
        float32x4_t v22 = v40[0];
        unint64_t v23 = (_DWORD *)(v18 + v21);
        uint64_t v24 = -24;
        do
        {
          v22[(v19 + v24 + 24)] = *(v23 - 1);
          v22[(v19 + v24 + 25)] = *v23;
          v22[(v19 + v24 + 26)] = v23[1];
          v23 += 4;
          v24 += 3;
        }
        while (v24);
        uint64_t v25 = v18 + 224 * v20;
        *((_DWORD *)__p[0] + v20) = *(_DWORD *)(v25 + 136);
        id v26 = [*(id *)(v25 + 144) UUIDString];
        float32x4_t v27 = (const std::string::value_type *)[v26 UTF8String];
        std::string::__assign_external(&v38.__begin_[v20], v27);

        ++v20;
        uint64_t v18 = *a2;
        v21 += 224;
        v19 += 24;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v20);
    }
    ObjectUnderstandingTest::writeValue<std::vector<float>>(&v44, (uint64_t *)v40);
    v45.__sb_.__extbufnext_ = 0;
    v45.__sb_.__extbuf_ = (char *)&unk_26EAD62B8;
    v46.__vftable = (std::ios_base_vtbl *)&unk_26EAD62E0;
    std::ios_base::init(&v46, v45.__sb_.__extbuf_min_);
    int v48 = -1;
    uint64_t v47 = 0;
    MEMORY[0x237E2C2D0](v45.__sb_.__extbuf_min_);
    std::fstream::open(&v45, &__s, 0x10u);
    uint64_t v28 = *a3;
    uint64_t v29 = a3[1];
    if (*a3 != v29)
    {
      do
      {
        long long v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
        v28 += 4;
      }
      while (v28 != v29);
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v45 + *((void *)v45.__sb_.__extbuf_ - 3)), *(_DWORD *)&v45.__sb_.__extbuf_min_[*((void *)v45.__sb_.__extbuf_ - 3) + 8] | 4);
    }
    MEMORY[0x237E2C2E0](v45.__sb_.__extbuf_min_);
    std::iostream::~basic_iostream();
    MEMORY[0x237E2C480](&v46);
    ObjectUnderstandingTest::writeValue<std::vector<float>>(&v42, (uint64_t *)__p);
    v45.__sb_.__extbufnext_ = 0;
    v45.__sb_.__extbuf_ = (char *)&unk_26EAD62B8;
    v46.__vftable = (std::ios_base_vtbl *)&unk_26EAD62E0;
    std::ios_base::init(&v46, v45.__sb_.__extbuf_min_);
    int v48 = -1;
    uint64_t v47 = 0;
    MEMORY[0x237E2C2D0](v45.__sb_.__extbuf_min_);
    std::fstream::open(&v45, &v41, 0x10u);
    std::vector<std::string>::pointer begin = v38.__begin_;
    for (std::vector<std::string>::pointer i = v38.__end_; begin != i; ++begin)
    {
      int v33 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v33 >= 0) {
        uint64_t v34 = (uint64_t)begin;
      }
      else {
        uint64_t v34 = begin->__r_.__value_.__r.__words[0];
      }
      if (v33 >= 0) {
        uint64_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t size = begin->__r_.__value_.__l.__size_;
      }
      float v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45.__sb_.__extbufend_, v34, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ", 1);
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v45 + *((void *)v45.__sb_.__extbuf_ - 3)), *(_DWORD *)&v45.__sb_.__extbuf_min_[*((void *)v45.__sb_.__extbuf_ - 3) + 8] | 4);
    }
    MEMORY[0x237E2C2E0](v45.__sb_.__extbuf_min_);
    std::iostream::~basic_iostream();
    MEMORY[0x237E2C480](&v46);
    v45.__sb_.__extbuf_ = (char *)&v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v37 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
      writeBox3ds(v37);
    }
  }
}

void sub_237C66A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char *a43,char a44)
{
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v44);
  a43 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

uint64_t ObjectUnderstandingTest::writeValue<std::vector<float>>(const std::string *a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v8.__sb_.__extbufnext_ = 0;
  v8.__sb_.__extbuf_ = (char *)&unk_26EAD62B8;
  v9.__vftable = (std::ios_base_vtbl *)&unk_26EAD62E0;
  std::ios_base::init(&v9, v8.__sb_.__extbuf_min_);
  int v11 = -1;
  uint64_t v10 = 0;
  MEMORY[0x237E2C2D0](v8.__sb_.__extbuf_min_);
  std::fstream::open(&v8, a1, 0x10u);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      size_t v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
      v4 += 4;
    }
    while (v4 != v5);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v8 + *((void *)v8.__sb_.__extbuf_ - 3)), *(_DWORD *)&v8.__sb_.__extbuf_min_[*((void *)v8.__sb_.__extbuf_ - 3) + 8] | 4);
  }
  MEMORY[0x237E2C2E0](v8.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x237E2C480](&v9);
}

void sub_237C66D18(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v1);
  _Unwind_Resume(a1);
}

uint64_t loadBoxes(uint64_t a1, void *a2)
{
  v34[19] = *MEMORY[0x263EF8340];
  std::vector<int> __p = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::ifstream::basic_ifstream(v31);
  uint64_t v3 = v33;
  if (v33)
  {
    int v30 = 0;
    while (1)
    {
      uint64_t v4 = (void *)MEMORY[0x237E2C320](v31, &v30);
      if ((*((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5) != 0) {
        break;
      }
      uint64_t v5 = v28;
      if (v28 >= v29)
      {
        int32x4_t v7 = __p;
        uint64_t v8 = (v28 - __p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v29 - __p;
        if ((v29 - __p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v29, v11);
          int32x4_t v7 = __p;
          uint64_t v5 = v28;
        }
        else
        {
          uint64_t v12 = 0;
        }
        int32x4_t v13 = &v12[4 * v8];
        *(_DWORD *)int32x4_t v13 = v30;
        size_t v6 = v13 + 4;
        while (v5 != v7)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        std::vector<int> __p = v13;
        uint64_t v29 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v28 = v30;
        size_t v6 = v28 + 4;
      }
      uint64_t v28 = v6;
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v31 + *(void *)(v31[0] - 24)), *(_DWORD *)&v32[*(void *)(v31[0] - 24) + 16] | 4);
    }
  }
  v31[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x237E2C2E0](v32);
  std::istream::~istream();
  MEMORY[0x237E2C480](v34);
  if (v3 && (unint64_t v15 = (v28 - __p) >> 2, v16 = v15 / 0x18, !(v15 % 0x18)))
  {
    a2[1] = *a2;
    std::vector<box3d>::resize((uint64_t)a2, v16);
    if ((unint64_t)(v28 - __p) >= 0x60)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      if (v16 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = v16;
      }
      do
      {
        uint64_t v24 = 0;
        uint64_t v25 = v21;
        do
        {
          *(void *)&long long v19 = *(void *)&__p[v25];
          DWORD2(v19) = *(_DWORD *)&__p[v25 + 8];
          *(_OWORD *)(*a2 + v20 + v24) = v19;
          v25 += 12;
          v24 += 16;
        }
        while (v24 != 128);
        ++v22;
        v21 += 96;
        v20 += 128;
      }
      while (v22 != v23);
    }
    uint64_t v18 = 1;
  }
  else
  {
    int32x4_t v17 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      loadBoxes(v17);
    }

    uint64_t v18 = 0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v18;
}

void sub_237C670B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<box3d>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 7;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 7);
    }
  }
  else
  {
    std::vector<box3d>::__append((void **)a1, a2 - v2);
  }
}

uint64_t box2boxCornerdist(uint64_t result, const box3d *a2)
{
  uint64_t v2 = 0;
  float v3 = 3.4028e38;
  do
  {
    for (uint64_t i = 0; i != 128; i += 16)
    {
      float32x4_t v5 = vsubq_f32(*(float32x4_t *)(result + 16 * v2), *(float32x4_t *)((char *)a2 + i));
      float32x4_t v6 = vmulq_f32(v5, v5);
      float v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
      if (v7 < v3) {
        float v3 = v7;
      }
    }
    ++v2;
  }
  while (v2 != 8);
  return result;
}

float GetHeadingAngle(float32x4_t *a1)
{
  unint64_t v1 = vsubq_f32(*a1, a1[1]).u64[0];
  return atan2f(*(float *)&v1, *((float *)&v1 + 1));
}

void box3dEnlarge(float32x4_t *a1@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, _OWORD *a5@<X8>)
{
  float32x4_t v19 = *a1;
  float32x4_t v8 = vsubq_f32(*a1, a1[3]);
  float32x4_t v9 = vmulq_f32(v8, v8);
  v9.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])+ a2;
  float32x4_t v10 = vsubq_f32(*a1, a1[1]);
  float32x4_t v11 = vmulq_f32(v10, v10);
  *(float *)v5.i32 = fmaxf(v9.f32[0], 0.1);
  float v12 = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])+ a3, 0.1);
  float32x4_t v13 = vsubq_f32(*a1, a1[4]);
  float32x4_t v14 = vmulq_f32(v13, v13);
  *(float *)&v5.i32[1] = v12;
  v5.i32[2] = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0])+ a4, 0.1);
  int8x16_t v18 = v5;
  float v15 = atan2f(v10.f32[0], v10.f32[1]);
  v16.i64[0] = 0x3F0000003F000000;
  v16.i64[1] = 0x3F0000003F000000;
  __n128 v17 = (__n128)vmulq_f32(vaddq_f32(v19, a1[6]), v16);
  centroidSizeAngleToBox3d(a5, v17, v18, v15);
}

void box3dFromNSArray(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  id v18 = v3;
  if (!v3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] box3dFromNSArray takes non-null pointer).");
    goto LABEL_10;
  }
  if ([v3 count] != 8)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] box3dFromNSArray takes non-8 corners box).");
LABEL_10:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    int8x16_t v5 = [v18 objectAtIndexedSubscript:i];
    float32x4_t v6 = [v5 objectAtIndexedSubscript:0];
    [v6 floatValue];
    *(void *)&long long v17 = v7;
    float32x4_t v8 = [v18 objectAtIndexedSubscript:i];
    float32x4_t v9 = [v8 objectAtIndexedSubscript:1];
    [v9 floatValue];
    int v16 = v10;
    float32x4_t v11 = [v18 objectAtIndexedSubscript:i];
    float v12 = [v11 objectAtIndexedSubscript:2];
    [v12 floatValue];
    long long v13 = v17;
    DWORD1(v13) = v16;
    DWORD2(v13) = v14;
    *(_OWORD *)(a2 + 16 * i) = v13;
  }
}

void sub_237C6740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

BOOL areBoxesEqualByCorners(const box3d *a1, const box3d *a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 0;
  uint64_t v4 = (float32x2_t *)((char *)a2 + 4);
  int8x16_t v5 = (float32x2_t *)((char *)a1 + 4);
  float32x2_t v6 = (float32x2_t)vdup_n_s32(0x358637BDu);
  do
  {
    if (vabds_f32(v5[-1].f32[1], v4[-1].f32[1]) > 0.000001) {
      break;
    }
    int32x2_t v7 = vcgt_f32(vabd_f32(*v5, *v4), v6);
    if (v7.i8[0]) {
      break;
    }
    if (v7.i8[4]) {
      break;
    }
    BOOL v3 = v2 > 6;
    v4 += 2;
    v5 += 2;
    ++v2;
  }
  while (v2 != 8);
  return v3;
}

id rawBoxesToObjects(uint64_t *a1, unsigned int a2)
{
  return boxesToObjects(a1, @"rawdetection", a2);
}

id boxesToObjects(uint64_t *a1, void *a2, unsigned int a3)
{
  id v27 = a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5);
  int32x2_t v7 = [MEMORY[0x263EFF980] arrayWithCapacity:v6];
  BOOL v8 = v4 == v5;
  float32x4_t v9 = v7;
  if (!v8)
  {
    uint64_t v10 = 0;
    if (v6 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v6;
    }
    long long v25 = xmmword_237CB4FB0;
    do
    {
      float v12 = objc_alloc_init(OU3DObject);
      [(OU3DObject *)v12 setType:*(void *)(*a1 + 224 * v10 + 128)];
      long long v13 = (void *)[*(id *)(*a1 + 224 * v10 + 152) copy];
      [(OU3DObject *)v12 setDetection_source:v13];

      int v14 = (void *)[*(id *)(*a1 + 224 * v10 + 144) copy];
      [(OU3DObject *)v12 setIdentifier:v14];

      LODWORD(v15) = *(_DWORD *)(*a1 + 224 * v10 + 136);
      [(OU3DObject *)v12 setConfidence:v15];
      uint64_t v16 = *a1 + 224 * v10;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v28 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v28, *(const void **)(v16 + 160), *(void *)(v16 + 168), (uint64_t)(*(void *)(v16 + 168) - *(void *)(v16 + 160)) >> 2);
      long long v31 = 0;
      long long v32 = 0;
      uint64_t v33 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, v28, (uint64_t)v29, (v29 - (unsigned char *)v28) >> 2);
      std::vector<int> __p = 0;
      long long v35 = 0;
      uint64_t v36 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
      long long v17 = [MEMORY[0x263EFF980] arrayWithCapacity:(v35 - (unsigned char *)__p) >> 2];
      float32x4_t v19 = __p;
      if (v35 != __p)
      {
        unint64_t v20 = 0;
        do
        {
          LODWORD(v18) = v19[v20];
          uint64_t v21 = objc_msgSend(NSNumber, "numberWithFloat:", v18, v25);
          [v17 addObject:v21];

          ++v20;
          float32x4_t v19 = __p;
        }
        while (v20 < (v35 - (unsigned char *)__p) >> 2);
      }
      uint64_t v22 = objc_msgSend(v17, "copy", v25);

      float32x4_t v9 = v7;
      if (__p)
      {
        long long v35 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      [(OU3DObject *)v12 setLogits:v22];

      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      [(OU3DObject *)v12 setStatus:a3];
      [(OU3DObject *)v12 setColor:*(double *)&v25];
      [(OU3DObject *)v12 addGroupId:*(__int16 *)(*a1 + 224 * v10 + 216) forGroupType:*(void *)(*a1 + 224 * v10 + 208)];
      [(OU3DObject *)v12 addBoxesDict:*a1 + 224 * v10 forDictKey:v27];
      [v7 addObject:v12];

      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v23 = (void *)[v9 copy];

  return v23;
}

void sub_237C677EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void updateObjectsWithBoxes(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v25 = a3;
  uint64_t v6 = [v5 count];
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v24 = v6;
    do
    {
      BOOL v8 = [v5 objectAtIndexedSubscript:v7];
      uint64_t v9 = *a1;
      if (a1[1] != *a1)
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t v11 = *(void **)(v9 + 224 * v10 + 144);
          float v12 = [v5 objectAtIndexedSubscript:v7];
          long long v13 = [v12 identifier];
          LOBYTE(v11) = [v11 isEqual:v13];

          if (v11)
          {
            [v8 setType:*(void *)(*a1 + 224 * v10 + 128)];
            int v14 = (void *)[*(id *)(*a1 + 224 * v10 + 152) copy];
            objc_msgSend(v8, "setDetection_source:", v14);

            double v15 = (void *)[*(id *)(*a1 + 224 * v10 + 144) copy];
            [v8 setIdentifier:v15];

            LODWORD(v16) = *(_DWORD *)(*a1 + 224 * v10 + 136);
            [v8 setConfidence:v16];
            uint64_t v17 = *a1 + 224 * v10;
            id v27 = 0;
            uint64_t v28 = 0;
            id v26 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v26, *(const void **)(v17 + 160), *(void *)(v17 + 168), (uint64_t)(*(void *)(v17 + 168) - *(void *)(v17 + 160)) >> 2);
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v29, v26, (uint64_t)v27, (v27 - (unsigned char *)v26) >> 2);
            std::vector<int> __p = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
            double v18 = [MEMORY[0x263EFF980] arrayWithCapacity:(v33 - (unsigned char *)__p) >> 2];
            unint64_t v20 = __p;
            if (v33 != __p)
            {
              unint64_t v21 = 0;
              do
              {
                LODWORD(v19) = v20[v21];
                uint64_t v22 = [NSNumber numberWithFloat:v19];
                [v18 addObject:v22];

                ++v21;
                unint64_t v20 = __p;
              }
              while (v21 < (v33 - (unsigned char *)__p) >> 2);
            }
            uint64_t v23 = (void *)[v18 copy];

            if (__p)
            {
              uint64_t v33 = __p;
              operator delete(__p);
            }
            if (v29)
            {
              uint64_t v30 = v29;
              operator delete(v29);
            }
            [v8 setLogits:v23];

            if (v26)
            {
              id v27 = v26;
              operator delete(v26);
            }
            [v8 addGroupId:*(__int16 *)(*a1 + 224 * v10 + 216) forGroupType:*(void *)(*a1 + 224 * v10 + 208)];
            [v8 addBoxesDict:*a1 + 224 * v10 forDictKey:v25];
          }
          ++v10;
          uint64_t v9 = *a1;
        }
        while (v10 < 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
      }

      ++v7;
    }
    while (v7 != v24);
  }
}

void sub_237C67B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

uint64_t isBoxRectangle(float32x4_t *a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = a1;
  do
  {
    int16x4_t v3 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v2, a1[(v1 & 0xFFFFFFFB) + 4])));
    if (v3.i8[0] & 1 | v3.i8[2] & 1) {
      return 0;
    }
    ++v1;
    ++v2;
  }
  while (v1 != 4);
  float32x2_t v4 = *(float32x2_t *)a1[1].f32;
  float32x2_t v5 = vsub_f32(*(float32x2_t *)a1->f32, v4);
  int32x2_t v6 = (int32x2_t)vmul_f32(v5, v5);
  float32x2_t v7 = *(float32x2_t *)a1[2].f32;
  float32x2_t v8 = *(float32x2_t *)a1[3].f32;
  float32x2_t v9 = vsub_f32(v7, v8);
  int32x2_t v10 = (int32x2_t)vmul_f32(v9, v9);
  float32x2_t v11 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v6, v10), (float32x2_t)vzip2_s32(v6, v10)));
  if (fabsf(vsub_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).f32[0]) > 0.00005) {
    return 0;
  }
  float32x2_t v12 = vsub_f32(v4, v7);
  int32x2_t v13 = (int32x2_t)vmul_f32(v12, v12);
  float32x2_t v14 = vsub_f32(*(float32x2_t *)a1->f32, v8);
  int32x2_t v15 = (int32x2_t)vmul_f32(v14, v14);
  float32x2_t v16 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v15, v13), (float32x2_t)vzip2_s32(v15, v13)));
  if (fabsf(vsub_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).f32[0]) > 0.00005) {
    return 0;
  }
  float32x4_t v17 = a1[1];
  float32x4_t v18 = a1[2];
  float32x4_t v19 = vsubq_f32(v18, v17);
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(vsubq_f32(v17, *a1), v19)) > 0.00001)
  {
    unint64_t v20 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      isBoxRectangle(v20, v21, v22, v23, v24, v25, v26, v27);
    }
LABEL_15:

    return 0;
  }
  float32x4_t v28 = a1[3];
  float32x4_t v29 = vsubq_f32(v28, v18);
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v19, v29)) > 0.00001)
  {
    unint64_t v20 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      isBoxRectangle(v20, v30, v31, v32, v33, v34, v35, v36);
    }
    goto LABEL_15;
  }
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v29, vsubq_f32(*a1, v28))) > 0.00001)
  {
    unint64_t v20 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      isBoxRectangle(v20, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_15;
  }
  return 1;
}

void Box3dEnlarge(int32x2_t a1@<D0>, float32x4_t *a2@<X1>, int a3@<W0>, float32x4_t *a4@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  float32x4_t v6 = a2[3];
  float32x4_t v7 = a2[5];
  float32x4_t v45 = a2[4];
  a4[4] = v45;
  a4[5] = v7;
  float32x4_t v8 = a2[7];
  a4[6] = a2[6];
  a4[7] = v8;
  float32x4_t v9 = a2[1];
  float32x4_t v42 = v6;
  float32x4_t v44 = *a2;
  *a4 = *a2;
  a4[1] = v9;
  float32x4_t v10 = a2[3];
  float32x4_t v40 = a2[1];
  a4[2] = a2[2];
  a4[3] = v10;
  float32x2_t v11 = (void **)operator new(0x10uLL);
  v51[0] = v11;
  *(_OWORD *)float32x2_t v11 = xmmword_237CB48F0;
  v51[1] = v11 + 2;
  v51[2] = v11 + 2;
  float32x2_t v12 = (void **)operator new(0x10uLL);
  v51[3] = v12;
  *(_OWORD *)float32x2_t v12 = xmmword_237CB4940;
  v51[4] = v12 + 2;
  v51[5] = v12 + 2;
  int32x2_t v13 = (void **)operator new(0x10uLL);
  v51[6] = v13;
  *(_OWORD *)int32x2_t v13 = xmmword_237CB4900;
  v51[7] = v13 + 2;
  v51[8] = v13 + 2;
  float32x2_t v14 = (void **)operator new(0x10uLL);
  v51[9] = v14;
  *(_OWORD *)float32x2_t v14 = xmmword_237CB4910;
  v51[10] = v14 + 2;
  v51[11] = v14 + 2;
  int32x2_t v15 = (void **)operator new(0x10uLL);
  v51[12] = v15;
  *(_OWORD *)int32x2_t v15 = xmmword_237CB4920;
  v51[13] = v15 + 2;
  v51[14] = v15 + 2;
  float32x2_t v16 = (void **)operator new(0x10uLL);
  v51[15] = v16;
  *(_OWORD *)float32x2_t v16 = xmmword_237CB4930;
  v51[16] = v16 + 2;
  v51[17] = v16 + 2;
  int v48 = 0;
  v49[0] = 0;
  uint64_t v47 = 0;
  v49[1] = &v47;
  char v50 = 0;
  uint64_t v47 = operator new(0x90uLL);
  int v48 = v47;
  v49[0] = v47 + 18;
  uint64_t v17 = 0;
  int v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)v49, (uint64_t)v51, (uint64_t)&v52, v47);
  float32x4_t v18 = vsubq_f32(v40, v44);
  int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  float32x2_t v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  float32x4_t v22 = vmulq_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  float32x4_t v23 = vsubq_f32(v42, v44);
  int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  float32x2_t v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
  float32x4_t v41 = v22;
  float32x4_t v43 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
  float32x4_t v27 = vsubq_f32(v45, v44);
  int32x4_t v28 = (int32x4_t)vmulq_f32(v27, v27);
  v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
  float32x2_t v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  float32x2_t v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
  float32x4_t v46 = vmulq_n_f32(v27, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
  do
  {
    uint64_t v31 = v51[v17 + 15];
    if (v31)
    {
      v51[v17 + 16] = v31;
      operator delete(v31);
    }
    v17 -= 3;
  }
  while (v17 != -18);
  uint64_t v32 = operator new(0x60uLL);
  _OWORD *v32 = v46;
  v32[1] = v46;
  _OWORD v32[2] = v43;
  v32[3] = v41;
  v32[4] = v43;
  v32[5] = v41;
  uint64_t v33 = (int **)&v47[3 * a3];
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  if (v34 != v35)
  {
    float32x4_t v36 = (float32x4_t)vdupq_lane_s32(a1, 0);
    float32x4_t v37 = (float32x4_t)v32[a3];
    do
    {
      uint64_t v38 = *v34++;
      a4[v38] = vmlaq_f32(a4[v38], v37, v36);
    }
    while (v34 != v35);
  }
  operator delete(v32);
  v51[0] = (void **)&v47;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v51);
}

void sub_237C6814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

void sub_237C681E8()
{
}

void rawBoxesFromObjects(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

void boxesFromObjects(void *a1@<X0>, void *a2@<X1>, char **a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = a1;
  id v54 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v52 = a4;
  if (a3) {
    a3[1] = *a3;
  }
  unint64_t v8 = 0;
  uint64_t v51 = (uint64_t)(a3 + 2);
  while (objc_msgSend(v7, "count", v51) > v8)
  {
    unint64_t v9 = 0;
    float32x4_t v65 = 0;
    float32x4_t v66 = 0;
    int64_t v67 = 0;
    while (1)
    {
      float32x4_t v10 = [v7 objectAtIndexedSubscript:v8];
      float32x2_t v11 = [v10 logits];
      unint64_t v12 = [v11 count];

      if (v12 <= v9) {
        break;
      }
      int32x2_t v13 = [v7 objectAtIndexedSubscript:v8];
      float32x2_t v14 = [v13 logits];
      int32x2_t v15 = [v14 objectAtIndex:v9];
      [v15 floatValue];
      int v17 = v16;

      float32x4_t v18 = v66;
      if (v66 >= v67)
      {
        float32x2_t v20 = v65;
        uint64_t v21 = (v66 - v65) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v67 - v65;
        if ((v67 - v65) >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          float32x2_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v24);
          float32x2_t v20 = v65;
          float32x4_t v18 = v66;
        }
        else
        {
          float32x2_t v25 = 0;
        }
        float32x2_t v26 = &v25[4 * v21];
        *(_DWORD *)float32x2_t v26 = v17;
        int32x4_t v19 = v26 + 4;
        while (v18 != v20)
        {
          int v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        float32x4_t v65 = v26;
        float32x4_t v66 = v19;
        int64_t v67 = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v66 = v17;
        int32x4_t v19 = v18 + 4;
      }
      float32x4_t v66 = v19;
      ++v9;
    }
    int32x4_t v28 = [v7 objectAtIndexedSubscript:v8];
    char v29 = [v28 hasBoxesDict:v54];

    if (v29)
    {
      memset(v64, 0, sizeof(v64));
      float32x2_t v30 = [v7 objectAtIndexedSubscript:v8];
      uint64_t v31 = [v30 boxesDict];
      uint64_t v32 = [v31 objectForKeyedSubscript:v54];
      box3dFromNSArray(v32, (uint64_t)v64);

      float v53 = [v7 objectAtIndexedSubscript:v8];
      id v55 = [v53 type];
      uint64_t v33 = [v7 objectAtIndexedSubscript:v8];
      [v33 confidence];
      float v35 = v34;
      float32x4_t v36 = [v7 objectAtIndexedSubscript:v8];
      float32x4_t v37 = [v36 identifier];
      uint64_t v38 = [v7 objectAtIndexedSubscript:v8];
      uint64_t v39 = objc_msgSend(v38, "detection_source");
      OUBox3d::OUBox3d((uint64_t)v56, v64, &v55, v37, (uint64_t)&v65, v39, v35);
      std::vector<OUBox3d>::push_back[abi:ne180100](v52, v56);

      if (__p) {
        operator delete(__p);
      }
      if (v60)
      {
        float32x4_t v61 = v60;
        operator delete(v60);
      }

      if (a3)
      {
        float32x4_t v41 = a3[1];
        unint64_t v40 = (unint64_t)a3[2];
        if ((unint64_t)v41 >= v40)
        {
          float32x4_t v43 = *a3;
          uint64_t v44 = (v41 - *a3) >> 2;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v46 = v40 - (void)v43;
          if (v46 >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v51, v47);
            float32x4_t v43 = *a3;
            float32x4_t v41 = a3[1];
          }
          else
          {
            int v48 = 0;
          }
          uint64_t v49 = &v48[4 * v44];
          *(_DWORD *)uint64_t v49 = v8;
          float32x4_t v42 = v49 + 4;
          while (v41 != v43)
          {
            int v50 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v49 - 1) = v50;
            v49 -= 4;
          }
          *a3 = v49;
          a3[1] = v42;
          a3[2] = &v48[4 * v47];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(_DWORD *)float32x4_t v41 = v8;
          float32x4_t v42 = v41 + 4;
        }
        a3[1] = v42;
      }
    }
    if (v65)
    {
      float32x4_t v66 = v65;
      operator delete(v65);
    }
    ++v8;
  }
}

void sub_237C68654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, OUBox3d *a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void **a15)
{
  float32x4_t v18 = *(void **)(v16 - 136);
  if (v18)
  {
    *(void *)(v16 - 128) = v18;
    operator delete(v18);
  }
  a15 = a10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void NonMaximumSuppression(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char **a4@<X8>, float a5@<S0>)
{
  if (a2)
  {
    std::vector<int>::vector(&v32, a2);
    std::vector<int>::pointer begin = v32.__begin_;
    std::vector<int>::pointer end = v32.__end_;
    if (v32.__begin_ != v32.__end_)
    {
      int v11 = 0;
      std::vector<int>::pointer v12 = v32.__begin_;
      do
        *v12++ = v11++;
      while (v12 != end);
    }
    unint64_t v13 = 126 - 2 * __clz(end - begin);
    uint64_t v33 = a1;
    if (end == begin) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v13;
    }
    std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>((uint64_t)begin, end, &v33, v14, 1);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    while (v32.__begin_ != v32.__end_)
    {
      uint64_t v15 = *(v32.__end_ - 1);
      int v17 = a4[1];
      unint64_t v16 = (unint64_t)a4[2];
      if ((unint64_t)v17 >= v16)
      {
        int32x4_t v19 = *a4;
        uint64_t v20 = (v17 - *a4) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          unint64_t v24 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v23);
          int32x4_t v19 = *a4;
          int v17 = a4[1];
        }
        else
        {
          unint64_t v24 = 0;
        }
        float32x2_t v25 = &v24[8 * v20];
        *(void *)float32x2_t v25 = v15;
        float32x4_t v18 = v25 + 8;
        while (v17 != v19)
        {
          uint64_t v26 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v25 - 1) = v26;
          v25 -= 8;
        }
        *a4 = v25;
        a4[1] = v18;
        a4[2] = &v24[8 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)int v17 = v15;
        float32x4_t v18 = v17 + 8;
      }
      a4[1] = v18;
      std::vector<int>::pointer v27 = v32.__begin_;
      int32x4_t v28 = v32.__end_ - 1;
      v32.__end_ = v28;
      if (v32.__begin_ == v28)
      {
        int v29 = 0;
      }
      else
      {
        int v29 = 0;
        do
        {
          int v30 = *v27;
          std::function<float ()(int,int)>::operator()(a3, v15, *v27);
          if (v31 <= a5) {
            v32.__begin_[v29++] = v30;
          }
          ++v27;
        }
        while (v27 != v28);
      }
      std::vector<int>::resize(&v32, v29);
    }
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_237C6894C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<float ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *nmsSameCls@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26EAD6368;
  v7[1] = a1;
  v7[3] = v7;
  int v4 = -1227133513 * ((a1[1] - *a1) >> 5);
  v6[0] = &unk_26EAD63F8;
  v6[1] = a1;
  _DWORD v6[2] = a2;
  v6[3] = v6;
  NonMaximumSuppression((uint64_t)v7, v4, (uint64_t)v6, a3, a4);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](v7);
}

void sub_237C68AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void nmsSameCls(id **a1@<X0>, float (*a2)(_OWORD *, _OWORD *)@<X1>, void *a3@<X2>, char **a4@<X8>, float a5@<S0>)
{
  id v9 = a3;
  float32x4_t v10 = a1[1];
  if (*a1 == v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    std::vector<float>::vector(&v58, v10 - *a1);
    int v11 = *a1;
    std::vector<int>::pointer v12 = a1[1];
    unint64_t v13 = v58;
    if (*a1 != v12)
    {
      do
      {
        [*v11 confidence];
        *v13++ = v14;
        ++v11;
      }
      while (v11 != v12);
      unint64_t v13 = v58;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<int>::vector(&v57, (v59 - (unsigned char *)v13) >> 2);
    std::vector<int>::pointer begin = v57.__begin_;
    std::vector<int>::pointer end = v57.__end_;
    if (v57.__begin_ != v57.__end_)
    {
      int v17 = 0;
      std::vector<int>::pointer v18 = v57.__begin_;
      do
        *v18++ = v17++;
      while (v18 != end);
    }
    unint64_t v19 = 126 - 2 * __clz(end - begin);
    *(void *)&v56[0] = &v58;
    if (end == begin) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v19;
    }
    unint64_t v21 = v57.__begin_;
    std::vector<int>::pointer v22 = v57.__end_;
    if (v57.__begin_ != v57.__end_)
    {
      uint64_t v54 = (uint64_t)(a4 + 2);
      do
      {
        uint64_t v23 = *(v22 - 1);
        if ((objc_msgSend((*a1)[v23], "hasBoxesDict:", v9, v54) & 1) == 0) {
          --v57.__end_;
        }
        memset(v56, 0, sizeof(v56));
        unint64_t v24 = [(*a1)[v23] boxesDict];
        float32x2_t v25 = [v24 objectForKeyedSubscript:v9];
        box3dFromNSArray(v25, (uint64_t)v56);

        std::vector<int>::pointer v27 = a4[1];
        unint64_t v26 = (unint64_t)a4[2];
        if ((unint64_t)v27 >= v26)
        {
          int v29 = *a4;
          uint64_t v30 = (v27 - *a4) >> 3;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v32 = v26 - (void)v29;
          if (v32 >> 2 > v31) {
            unint64_t v31 = v32 >> 2;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            float v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v54, v33);
            int v29 = *a4;
            std::vector<int>::pointer v27 = a4[1];
          }
          else
          {
            float v34 = 0;
          }
          float v35 = &v34[8 * v30];
          *(void *)float v35 = v23;
          int32x4_t v28 = v35 + 8;
          while (v27 != v29)
          {
            uint64_t v36 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v35 - 1) = v36;
            v35 -= 8;
          }
          *a4 = v35;
          a4[1] = v28;
          a4[2] = &v34[8 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)std::vector<int>::pointer v27 = v23;
          int32x4_t v28 = v27 + 8;
        }
        a4[1] = v28;
        memset((char *)&v55[8] + 8, 0, 24);
        float32x4_t v37 = v57.__begin_;
        if ((std::vector<int>::pointer)((char *)v57.__end_ - (char *)v57.__begin_) != (std::vector<int>::pointer)4)
        {
          unint64_t v38 = 0;
          do
          {
            int v39 = v37[v38];
            if ([(*a1)[v39] hasBoxesDict:v9])
            {
              unint64_t v40 = [(*a1)[v23] type];
              float32x4_t v41 = [(*a1)[v39] type];

              if (v40 != v41) {
                goto LABEL_36;
              }
              memset(v55, 0, 128);
              float32x4_t v42 = [(*a1)[v39] boxesDict];
              float32x4_t v43 = [v42 objectForKeyedSubscript:v9];
              box3dFromNSArray(v43, (uint64_t)v55);

              if (a2(v56, v55) <= a5)
              {
LABEL_36:
                uint64_t v44 = *(char **)&v55[9];
                if (*(void *)&v55[9] >= *((void *)&v55[9] + 1))
                {
                  uint64_t v46 = (char *)*((void *)&v55[8] + 1);
                  uint64_t v47 = (uint64_t)(*(void *)&v55[9] - *((void *)&v55[8] + 1)) >> 2;
                  unint64_t v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v49 = *((void *)&v55[9] + 1) - *((void *)&v55[8] + 1);
                  if ((uint64_t)(*((void *)&v55[9] + 1) - *((void *)&v55[8] + 1)) >> 1 > v48) {
                    unint64_t v48 = v49 >> 1;
                  }
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v50 = v48;
                  }
                  if (v50)
                  {
                    uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v55[9] + 8, v50);
                    uint64_t v46 = (char *)*((void *)&v55[8] + 1);
                    uint64_t v44 = *(char **)&v55[9];
                  }
                  else
                  {
                    uint64_t v51 = 0;
                  }
                  uint64_t v52 = (int *)&v51[4 * v47];
                  int *v52 = v39;
                  unint64_t v45 = v52 + 1;
                  while (v44 != v46)
                  {
                    int v53 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--uint64_t v52 = v53;
                  }
                  *((void *)&v55[8] + 1) = v52;
                  *(void *)&v55[9] = v45;
                  *((void *)&v55[9] + 1) = &v51[4 * v50];
                  if (v46) {
                    operator delete(v46);
                  }
                }
                else
                {
                  **(_DWORD **)&v55[9] = v39;
                  unint64_t v45 = v44 + 4;
                }
                *(void *)&v55[9] = v45;
              }
            }
            ++v38;
            float32x4_t v37 = v57.__begin_;
          }
          while (v57.__end_ - v57.__begin_ - 1 > v38);
        }
        if (v37)
        {
          v57.__end_ = v37;
          operator delete(v37);
        }
        unint64_t v21 = (int *)*((void *)&v55[8] + 1);
        std::vector<int> v57 = *(std::vector<int> *)((char *)&v55[8] + 8);
        std::vector<int>::pointer v22 = *(std::vector<int>::pointer *)&v55[9];
      }
      while (*((void *)&v55[8] + 1) != *(void *)&v55[9]);
    }
    if (v21)
    {
      v57.__end_ = v21;
      operator delete(v21);
    }
    if (v58)
    {
      id v59 = v58;
      operator delete(v58);
    }
  }
}

void sub_237C68F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  unint64_t v33 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v33;
    operator delete(v33);
  }
  float v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(void *)(v31 - 128) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void *nmsAgnosticCls@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26EAD6488;
  v7[1] = a1;
  v7[3] = v7;
  int v4 = -1227133513 * ((a1[1] - *a1) >> 5);
  v6[0] = &unk_26EAD6508;
  v6[1] = a1;
  _DWORD v6[2] = a2;
  v6[3] = v6;
  NonMaximumSuppression((uint64_t)v7, v4, (uint64_t)v6, a3, a4);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](v7);
}

void sub_237C6909C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t nmsWReference@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, float (*a3)(uint64_t, uint64_t)@<X2>, char **a4@<X8>, float a5@<S0>)
{
  if (*a2 == a2[1])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    id v9 = (uint64_t *)result;
    memset(v31, 0, sizeof(v31));
    int v32 = 1065353216;
    int v30 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v31, &v30))
      {
        uint64_t v10 = *v9;
        if (v9[1] != *v9)
        {
          uint64_t v11 = 0;
          unint64_t v12 = 0;
          do
          {
            if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) <= (unint64_t)v30) {
              std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
            }
            if (a3(*a2 + 224 * v30, v10 + v11) > a5) {
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v31, &v30, &v30);
            }
            ++v12;
            uint64_t v10 = *v9;
            v11 += 224;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5) > v12);
        }
      }
      unint64_t v13 = ++v30;
      uint64_t v15 = *a2;
      uint64_t v14 = a2[1];
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v14 - *a2) >> 5) > v13);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    int v30 = 0;
    if (v14 != v15)
    {
      do
      {
        unint64_t v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v31, &v30);
        int v17 = v30;
        if (!v16)
        {
          uint64_t v18 = v30;
          uint64_t v20 = a4[1];
          unint64_t v19 = (unint64_t)a4[2];
          if ((unint64_t)v20 >= v19)
          {
            std::vector<int>::pointer v22 = *a4;
            uint64_t v23 = (v20 - *a4) >> 3;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = v19 - (void)v22;
            if (v25 >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              std::vector<int>::pointer v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v26);
              std::vector<int>::pointer v22 = *a4;
              uint64_t v20 = a4[1];
            }
            else
            {
              std::vector<int>::pointer v27 = 0;
            }
            int32x4_t v28 = &v27[8 * v23];
            *(void *)int32x4_t v28 = v18;
            unint64_t v21 = v28 + 8;
            while (v20 != v22)
            {
              uint64_t v29 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v28 - 1) = v29;
              v28 -= 8;
            }
            *a4 = v28;
            a4[1] = v21;
            a4[2] = &v27[8 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *(void *)uint64_t v20 = v30;
            unint64_t v21 = v20 + 8;
          }
          a4[1] = v21;
          int v17 = v30;
        }
        int v30 = v17 + 1;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(v17 + 1));
    }
    return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v31);
  }
  return result;
}

void sub_237C69320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

id packBoxesDict(void *a1, uint64_t *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = (void *)[v5 mutableCopy];
  unint64_t v8 = 0;
  memset(v34, 0, sizeof(v34));
  int v35 = 1065353216;
  while (v8 < [v7 count])
  {
    id v9 = [v7 objectAtIndexedSubscript:v8];
    uint64_t v10 = [v9 identifier];
    id v11 = [v10 UUIDString];
    std::string::basic_string[abi:ne180100]<0>(&v39, (char *)[v11 UTF8String]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v34, (unsigned __int8 *)&v39, (uint64_t)&v39);
    if (SHIBYTE(v41) < 0) {
      operator delete(v39);
    }

    uint64_t v12 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = *(void **)(v12 + v13 + 144);
        unint64_t v16 = [v9 identifier];
        LODWORD(v15) = [v15 isEqual:v16];

        if (v15)
        {
          [v9 addBoxesDict:*a2 + v13 forDictKey:v6];
          [v9 addGroupId:*(__int16 *)(*a2 + v13 + 216) forGroupType:*(void *)(*a2 + v13 + 208)];
        }
        ++v14;
        uint64_t v12 = *a2;
        v13 += 224;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v14);
    }

    ++v8;
  }
  if ([v6 isEqualToString:@"lshaped"])
  {
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    if (*a2 != v18)
    {
      do
      {
        id v19 = [*(id *)(v17 + 144) UUIDString];
        std::string::basic_string[abi:ne180100]<0>(&v39, (char *)[v19 UTF8String]);
        uint64_t v20 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v34, (unsigned __int8 *)&v39);
        if (SHIBYTE(v41) < 0) {
          operator delete(v39);
        }

        if (!v20)
        {
          unint64_t v21 = objc_alloc_init(OU3DObject);
          [(OU3DObject *)v21 setType:*(void *)(v17 + 128)];
          std::vector<int>::pointer v22 = (void *)[*(id *)(v17 + 144) copy];
          [(OU3DObject *)v21 setIdentifier:v22];

          LODWORD(v23) = *(_DWORD *)(v17 + 136);
          [(OU3DObject *)v21 setConfidence:v23];
          uint64_t v31 = 0;
          int v32 = 0;
          uint64_t v33 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, *(const void **)(v17 + 160), *(void *)(v17 + 168), (uint64_t)(*(void *)(v17 + 168) - *(void *)(v17 + 160)) >> 2);
          std::vector<int> __p = 0;
          float32x4_t v37 = 0;
          uint64_t v38 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v32, (v32 - (unsigned char *)v31) >> 2);
          int v39 = 0;
          unint64_t v40 = 0;
          uint64_t v41 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v39, __p, (uint64_t)v37, (v37 - (unsigned char *)__p) >> 2);
          unint64_t v24 = [MEMORY[0x263EFF980] arrayWithCapacity:(v40 - v39) >> 2];
          unint64_t v26 = v39;
          if (v40 != v39)
          {
            unint64_t v27 = 0;
            do
            {
              LODWORD(v25) = v26[v27];
              int32x4_t v28 = [NSNumber numberWithFloat:v25];
              [v24 addObject:v28];

              ++v27;
              unint64_t v26 = v39;
            }
            while (v27 < (v40 - v39) >> 2);
          }
          uint64_t v29 = (void *)[v24 copy];

          if (v39)
          {
            unint64_t v40 = v39;
            operator delete(v39);
          }
          if (__p)
          {
            float32x4_t v37 = __p;
            operator delete(__p);
          }
          [(OU3DObject *)v21 setLogits:v29];

          if (v31)
          {
            int v32 = v31;
            operator delete(v31);
          }
          [(OU3DObject *)v21 setStatus:1];
          [(OU3DObject *)v21 setColor:0.000195791275];
          [(OU3DObject *)v21 addGroupId:*(__int16 *)(v17 + 216) forGroupType:*(void *)(v17 + 208)];
          [(OU3DObject *)v21 addBoxesDict:v17 forDictKey:v6];
          [v7 insertObject:v21 atIndex:0];
        }
        v17 += 224;
      }
      while (v17 != v18);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v34);

  return v7;
}

void sub_237C6974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);

  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_237C69910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void std::vector<box3d>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += 128 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 7);
    if (v9 >> 57) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 7;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 6 > v9) {
      unint64_t v9 = v11 >> 6;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[128 * v10];
    uint64_t v15 = &v13[128 * v12];
    bzero(v14, a2 << 7);
    unint64_t v16 = &v14[128 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 8);
        long long v20 = *((_OWORD *)v17 - 7);
        long long v21 = *((_OWORD *)v17 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v17 - 6);
        *((_OWORD *)v14 - 5) = v21;
        *((_OWORD *)v14 - 8) = v19;
        *((_OWORD *)v14 - 7) = v20;
        long long v22 = *((_OWORD *)v17 - 4);
        long long v23 = *((_OWORD *)v17 - 3);
        long long v24 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v24;
        *((_OWORD *)v14 - 4) = v22;
        *((_OWORD *)v14 - 3) = v23;
        v14 -= 128;
        v17 -= 128;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (int *)result;
  while (2)
  {
    unint64_t v12 = a2 - 1;
    uint64_t v153 = a2;
    int8x16_t v154 = a2 - 2;
    int v151 = a2 - 3;
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                std::function<float ()(int)>::operator()(*a3, *(a2 - 1));
                float v78 = v77;
                double result = std::function<float ()(int)>::operator()(*a3, *v11);
                if (v78 < v79)
                {
                  int v80 = *v11;
                  *uint64_t v11 = *(a2 - 1);
                  *(a2 - 1) = v80;
                }
                break;
              case 3:
                double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11, v11 + 1, v12, a3);
                break;
              case 4:
                double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11, v11 + 1, v11 + 2, v12, a3);
                break;
              case 5:
                double result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(v11, v11 + 1, v11 + 2, v11 + 3, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            int v81 = v11 + 1;
            BOOL v83 = v11 == a2 || v81 == a2;
            if (a5)
            {
              if (!v83)
              {
                uint64_t v84 = 0;
                uint64_t v85 = v11;
                do
                {
                  uint64_t v86 = v85;
                  uint64_t v85 = v81;
                  std::function<float ()(int)>::operator()(*a3, v86[1]);
                  float v88 = v87;
                  double result = std::function<float ()(int)>::operator()(*a3, *v86);
                  if (v88 < v89)
                  {
                    int v90 = *v85;
                    uint64_t v91 = v84;
                    while (1)
                    {
                      *(int *)((char *)v11 + v91 + 4) = *(int *)((char *)v11 + v91);
                      if (!v91) {
                        break;
                      }
                      std::function<float ()(int)>::operator()(*a3, v90);
                      float v93 = v92;
                      double result = std::function<float ()(int)>::operator()(*a3, *(int *)((char *)v11 + v91 - 4));
                      v91 -= 4;
                      if (v93 >= v94)
                      {
                        int v95 = (int *)((char *)v11 + v91 + 4);
                        goto LABEL_81;
                      }
                    }
                    int v95 = v11;
LABEL_81:
                    *int v95 = v90;
                  }
                  int v81 = v85 + 1;
                  v84 += 4;
                }
                while (v85 + 1 != a2);
              }
            }
            else if (!v83)
            {
              do
              {
                float v140 = v11;
                uint64_t v11 = v81;
                std::function<float ()(int)>::operator()(*a3, v140[1]);
                float v142 = v141;
                double result = std::function<float ()(int)>::operator()(*a3, *v140);
                if (v142 < v143)
                {
                  int v144 = *v11;
                  float v145 = v11;
                  do
                  {
                    float v146 = v145;
                    int v147 = *--v145;
                    *float v146 = v147;
                    std::function<float ()(int)>::operator()(*a3, v144);
                    float v149 = v148;
                    double result = std::function<float ()(int)>::operator()(*a3, *(v146 - 2));
                  }
                  while (v149 < v150);
                  *float v145 = v144;
                }
                int v81 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v96 = (unint64_t)(v15 - 2) >> 1;
              int64_t v155 = v96;
              do
              {
                int64_t v97 = v96;
                if (v155 >= v96)
                {
                  int64_t v152 = v96;
                  uint64_t v98 = (2 * v96) | 1;
                  uint64_t v99 = &v11[v98];
                  uint64_t v100 = 2 * v96 + 2;
                  if (v100 < v15)
                  {
                    std::function<float ()(int)>::operator()(*a3, *v99);
                    float v102 = v101;
                    std::function<float ()(int)>::operator()(*a3, v99[1]);
                    if (v102 < v103)
                    {
                      ++v99;
                      uint64_t v98 = v100;
                    }
                  }
                  int64_t v97 = v152;
                  uint64_t v104 = &v11[v152];
                  std::function<float ()(int)>::operator()(*a3, *v99);
                  float v106 = v105;
                  double result = std::function<float ()(int)>::operator()(*a3, *v104);
                  if (v106 >= v107)
                  {
                    int v108 = *v104;
                    do
                    {
                      int32x4_t v109 = v104;
                      uint64_t v104 = v99;
                      *int32x4_t v109 = *v99;
                      if (v155 < v98) {
                        break;
                      }
                      uint64_t v110 = 2 * v98;
                      uint64_t v98 = (2 * v98) | 1;
                      uint64_t v99 = &v11[v98];
                      uint64_t v111 = v110 + 2;
                      if (v110 + 2 < v15)
                      {
                        std::function<float ()(int)>::operator()(*a3, *v99);
                        float v113 = v112;
                        std::function<float ()(int)>::operator()(*a3, v99[1]);
                        if (v113 < v114)
                        {
                          ++v99;
                          uint64_t v98 = v111;
                        }
                      }
                      std::function<float ()(int)>::operator()(*a3, *v99);
                      float v116 = v115;
                      double result = std::function<float ()(int)>::operator()(*a3, v108);
                    }
                    while (v116 >= v117);
                    int *v104 = v108;
                    int64_t v97 = v152;
                    a2 = v153;
                  }
                }
                int64_t v96 = v97 - 1;
              }
              while (v97);
              uint64_t v118 = (unint64_t)v14 >> 2;
              do
              {
                __int32 v119 = a2;
                uint64_t v120 = 0;
                int v156 = *v11;
                long long v121 = v11;
                do
                {
                  float v122 = v121;
                  v121 += v120 + 1;
                  uint64_t v123 = 2 * v120;
                  uint64_t v120 = (2 * v120) | 1;
                  uint64_t v124 = v123 + 2;
                  if (v123 + 2 < v118)
                  {
                    std::function<float ()(int)>::operator()(*a3, *v121);
                    float v126 = v125;
                    double result = std::function<float ()(int)>::operator()(*a3, v121[1]);
                    if (v126 < v127)
                    {
                      ++v121;
                      uint64_t v120 = v124;
                    }
                  }
                  *float v122 = *v121;
                }
                while (v120 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                a2 = v119 - 1;
                if (v121 == v119 - 1)
                {
                  *long long v121 = v156;
                }
                else
                {
                  *long long v121 = *a2;
                  *a2 = v156;
                  uint64_t v128 = (char *)v121 - (char *)v11 + 4;
                  if (v128 >= 5)
                  {
                    unint64_t v129 = (((unint64_t)v128 >> 2) - 2) >> 1;
                    int64x2_t v130 = &v11[v129];
                    std::function<float ()(int)>::operator()(*a3, *v130);
                    float v132 = v131;
                    double result = std::function<float ()(int)>::operator()(*a3, *v121);
                    if (v132 < v133)
                    {
                      int v134 = *v121;
                      do
                      {
                        int v135 = v121;
                        long long v121 = v130;
                        *int v135 = *v130;
                        if (!v129) {
                          break;
                        }
                        unint64_t v129 = (v129 - 1) >> 1;
                        int64x2_t v130 = &v11[v129];
                        std::function<float ()(int)>::operator()(*a3, *v130);
                        float v137 = v136;
                        double result = std::function<float ()(int)>::operator()(*a3, v134);
                      }
                      while (v137 < v138);
                      *long long v121 = v134;
                    }
                  }
                }
              }
              while (v118-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v11[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v17, v11, v12, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11, v17, v12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11 + 1, v17 - 1, v154, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11 + 2, &v11[v16 + 1], v151, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v17 - 1, v17, &v11[v16 + 1], a3);
            int v18 = *v11;
            *uint64_t v11 = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5) {
            break;
          }
          std::function<float ()(int)>::operator()(*a3, *(v11 - 1));
          float v20 = v19;
          std::function<float ()(int)>::operator()(*a3, *v11);
          if (v20 < v21) {
            break;
          }
          int v50 = *v11;
          std::function<float ()(int)>::operator()(*a3, *v11);
          float v52 = v51;
          double result = std::function<float ()(int)>::operator()(*a3, *v12);
          if (v52 >= v53)
          {
            id v58 = v11 + 1;
            do
            {
              uint64_t v13 = v58;
              if (v58 >= a2) {
                break;
              }
              std::function<float ()(int)>::operator()(*a3, v50);
              float v60 = v59;
              ++v58;
              double result = std::function<float ()(int)>::operator()(*a3, *v13);
            }
            while (v60 >= v61);
          }
          else
          {
            uint64_t v13 = v11;
            do
            {
              std::function<float ()(int)>::operator()(*a3, v50);
              float v55 = v54;
              int v56 = v13[1];
              ++v13;
              double result = std::function<float ()(int)>::operator()(*a3, v56);
            }
            while (v55 >= v57);
          }
          float32x4_t v62 = a2;
          if (v13 < a2)
          {
            float32x4_t v62 = a2;
            do
            {
              std::function<float ()(int)>::operator()(*a3, v50);
              float v64 = v63;
              int v65 = *--v62;
              double result = std::function<float ()(int)>::operator()(*a3, v65);
            }
            while (v64 < v66);
          }
          while (v13 < v62)
          {
            int v67 = *v13;
            *uint64_t v13 = *v62;
            *float32x4_t v62 = v67;
            do
            {
              std::function<float ()(int)>::operator()(*a3, v50);
              float v69 = v68;
              int v70 = v13[1];
              ++v13;
              std::function<float ()(int)>::operator()(*a3, v70);
            }
            while (v69 >= v71);
            do
            {
              std::function<float ()(int)>::operator()(*a3, v50);
              float v73 = v72;
              int v74 = *--v62;
              double result = std::function<float ()(int)>::operator()(*a3, v74);
            }
            while (v73 < v75);
          }
          uint64_t v76 = v13 - 1;
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            *uint64_t v11 = *v76;
          }
          a5 = 0;
          *uint64_t v76 = v50;
        }
        uint64_t v22 = 0;
        int v23 = *v11;
        do
        {
          std::function<float ()(int)>::operator()(*a3, v11[v22 + 1]);
          float v25 = v24;
          std::function<float ()(int)>::operator()(*a3, v23);
          ++v22;
        }
        while (v25 < v26);
        unint64_t v27 = &v11[v22];
        int32x4_t v28 = v153;
        if (v22 == 1)
        {
          int32x4_t v28 = v153;
          do
          {
            if (v27 >= v28) {
              break;
            }
            int v33 = *--v28;
            std::function<float ()(int)>::operator()(*a3, v33);
            float v35 = v34;
            std::function<float ()(int)>::operator()(*a3, v23);
          }
          while (v35 >= v36);
        }
        else
        {
          do
          {
            int v29 = *--v28;
            std::function<float ()(int)>::operator()(*a3, v29);
            float v31 = v30;
            std::function<float ()(int)>::operator()(*a3, v23);
          }
          while (v31 >= v32);
        }
        if (v27 >= v28)
        {
          unint64_t v48 = v27 - 1;
        }
        else
        {
          float32x4_t v37 = &v11[v22];
          uint64_t v38 = v28;
          do
          {
            int v39 = *v37;
            int *v37 = *v38;
            int *v38 = v39;
            do
            {
              int v40 = v37[1];
              ++v37;
              std::function<float ()(int)>::operator()(*a3, v40);
              float v42 = v41;
              std::function<float ()(int)>::operator()(*a3, v23);
            }
            while (v42 < v43);
            do
            {
              int v44 = *--v38;
              std::function<float ()(int)>::operator()(*a3, v44);
              float v46 = v45;
              std::function<float ()(int)>::operator()(*a3, v23);
            }
            while (v46 >= v47);
          }
          while (v37 < v38);
          unint64_t v48 = v37 - 1;
        }
        a2 = v153;
        if (v48 != v11) {
          *uint64_t v11 = *v48;
        }
        *unint64_t v48 = v23;
        if (v27 >= v28) {
          break;
        }
LABEL_33:
        double result = std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>(v11, v48, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v48 + 1;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v11, v48, a3);
      uint64_t v13 = v48 + 1;
      double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v48 + 1, v153, a3);
      if (result) {
        break;
      }
      if (!v49) {
        goto LABEL_33;
      }
    }
    a2 = v48;
    if (!v49) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a2, a3, a4, a6);
  std::function<float ()(int)>::operator()(*a6, *a5);
  float v13 = v12;
  uint64_t result = std::function<float ()(int)>::operator()(*a6, *a4);
  if (v13 < v15)
  {
    int v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    std::function<float ()(int)>::operator()(*a6, *a4);
    float v18 = v17;
    uint64_t result = std::function<float ()(int)>::operator()(*a6, *a3);
    if (v18 < v19)
    {
      int v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      std::function<float ()(int)>::operator()(*a6, *a3);
      float v22 = v21;
      uint64_t result = std::function<float ()(int)>::operator()(*a6, *a2);
      if (v22 < v23)
      {
        int v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        std::function<float ()(int)>::operator()(*a6, *a2);
        float v26 = v25;
        uint64_t result = std::function<float ()(int)>::operator()(*a6, *a1);
        if (v26 < v27)
        {
          int v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  std::function<float ()(int)>::operator()(*a4, *a2);
  float v9 = v8;
  std::function<float ()(int)>::operator()(*a4, *a1);
  float v11 = v10;
  std::function<float ()(int)>::operator()(*a4, *a3);
  float v13 = v12;
  uint64_t result = std::function<float ()(int)>::operator()(*a4, *a2);
  if (v9 >= v11)
  {
    if (v13 < v15)
    {
      int v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      std::function<float ()(int)>::operator()(*a4, *a2);
      float v19 = v18;
      uint64_t result = std::function<float ()(int)>::operator()(*a4, *a1);
      if (v19 < v20)
      {
        int v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  else
  {
    int v16 = *a1;
    if (v13 >= v15)
    {
      *a1 = *a2;
      *a2 = v16;
      std::function<float ()(int)>::operator()(*a4, *a3);
      float v23 = v22;
      uint64_t result = std::function<float ()(int)>::operator()(*a4, *a2);
      if (v23 >= v24) {
        return result;
      }
      int v16 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v16;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      std::function<float ()(int)>::operator()(*a3, *(a2 - 1));
      float v9 = v8;
      std::function<float ()(int)>::operator()(*a3, *a1);
      if (v9 < v10)
      {
        int v11 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      float v12 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      float v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    std::function<float ()(int)>::operator()(*a3, *v13);
    float v17 = v16;
    std::function<float ()(int)>::operator()(*a3, *v12);
    if (v17 < v18)
    {
      int v19 = *v13;
      uint64_t v20 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v20 + 12) = *(int *)((char *)a1 + v20 + 8);
        if (v20 == -8) {
          break;
        }
        std::function<float ()(int)>::operator()(*a3, v19);
        float v22 = v21;
        std::function<float ()(int)>::operator()(*a3, *(int *)((char *)a1 + v20 + 4));
        v20 -= 4;
        if (v22 >= v23)
        {
          float v24 = (int *)((char *)a1 + v20 + 12);
          goto LABEL_12;
        }
      }
      float v24 = a1;
LABEL_12:
      *float v24 = v19;
      if (++v15 == 8) {
        return v13 + 1 == a2;
      }
    }
    float v12 = v13;
    v14 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
}

uint64_t std::function<float ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x237E2C510);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a2, a3, a5);
  std::function<float ()(int)>::operator()(*a5, *a4);
  float v11 = v10;
  uint64_t result = std::function<float ()(int)>::operator()(*a5, *a3);
  if (v11 < v13)
  {
    int v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    std::function<float ()(int)>::operator()(*a5, *a3);
    float v16 = v15;
    uint64_t result = std::function<float ()(int)>::operator()(*a5, *a2);
    if (v16 < v17)
    {
      int v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      std::function<float ()(int)>::operator()(*a5, *a2);
      float v20 = v19;
      uint64_t result = std::function<float ()(int)>::operator()(*a5, *a1);
      if (v20 < v21)
      {
        int v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  float v11 = result;
  while (2)
  {
    float v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          float v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if (*(float *)(**a3 + 4 * v44) < *(float *)(**a3 + 4 * v45))
                {
                  int *v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                float v46 = v12 + 2;
                float v47 = v12 + 3;
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v48 = *(a2 - 1);
                uint64_t v49 = v12[3];
                uint64_t v50 = **a3;
                if (*(float *)(v50 + 4 * v48) < *(float *)(v50 + 4 * v49))
                {
                  *float v47 = v48;
                  *(a2 - 1) = v49;
                  uint64_t v51 = *v47;
                  uint64_t v52 = *v46;
                  float v53 = *(float *)(v50 + 4 * v51);
                  if (v53 < *(float *)(v50 + 4 * v52))
                  {
                    int *v46 = v51;
                    *float v47 = v52;
                    uint64_t v54 = v12[1];
                    if (v53 < *(float *)(v50 + 4 * v54))
                    {
                      v12[1] = v51;
                      v12[2] = v54;
                      uint64_t v55 = *v12;
                      if (v53 < *(float *)(v50 + 4 * v55))
                      {
                        int *v12 = v51;
                        v12[1] = v55;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                int v56 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v57 = 0;
                  uint64_t v58 = **a3;
                  float v59 = v12;
                  do
                  {
                    uint64_t v61 = *v59;
                    uint64_t v60 = v59[1];
                    float v59 = v56;
                    float v62 = *(float *)(v58 + 4 * v60);
                    if (v62 < *(float *)(v58 + 4 * v61))
                    {
                      uint64_t v63 = v57;
                      while (1)
                      {
                        *(int *)((char *)v12 + v63 + 4) = v61;
                        if (!v63) {
                          break;
                        }
                        uint64_t v61 = *(int *)((char *)v12 + v63 - 4);
                        v63 -= 4;
                        if (v62 >= *(float *)(v58 + 4 * v61))
                        {
                          float v64 = (int *)((char *)v12 + v63 + 4);
                          goto LABEL_80;
                        }
                      }
                      float v64 = v12;
LABEL_80:
                      int *v64 = v60;
                    }
                    int v56 = v59 + 1;
                    v57 += 4;
                  }
                  while (v59 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              int64_t v96 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v97 = **a3;
                do
                {
                  uint64_t v99 = *v11;
                  uint64_t v98 = v11[1];
                  float v11 = v96;
                  float v100 = *(float *)(v97 + 4 * v98);
                  if (v100 < *(float *)(v97 + 4 * v99))
                  {
                    do
                    {
                      *int64_t v96 = v99;
                      uint64_t v99 = *(v96 - 2);
                      --v96;
                    }
                    while (v100 < *(float *)(v97 + 4 * v99));
                    *int64_t v96 = v98;
                  }
                  int64_t v96 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v65 = (v14 - 2) >> 1;
              float v66 = *a3;
              int64_t v67 = v65;
              do
              {
                int64_t v68 = v67;
                if (v65 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  int v70 = &v12[v69];
                  uint64_t v71 = 2 * v67 + 2;
                  uint64_t v72 = *v66;
                  if (v71 < (uint64_t)v14 && *(float *)(v72 + 4 * *v70) < *(float *)(v72 + 4 * v70[1]))
                  {
                    ++v70;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  uint64_t result = &v12[v68];
                  uint64_t v73 = *v70;
                  uint64_t v74 = *result;
                  float v75 = *(float *)(v72 + 4 * v74);
                  if (*(float *)(v72 + 4 * v73) >= v75)
                  {
                    do
                    {
                      uint64_t v76 = v70;
                      int *result = v73;
                      if (v65 < v69) {
                        break;
                      }
                      uint64_t v77 = 2 * v69;
                      uint64_t v69 = (2 * v69) | 1;
                      int v70 = &v12[v69];
                      uint64_t v78 = v77 + 2;
                      if (v78 < (uint64_t)v14 && *(float *)(v72 + 4 * *v70) < *(float *)(v72 + 4 * v70[1]))
                      {
                        ++v70;
                        uint64_t v69 = v78;
                      }
                      uint64_t v73 = *v70;
                      uint64_t result = v76;
                    }
                    while (*(float *)(v72 + 4 * v73) >= v75);
                    *uint64_t v76 = v74;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              uint64_t v79 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v80 = 0;
                int v81 = *v12;
                uint64_t v82 = *a3;
                BOOL v83 = v12;
                do
                {
                  uint64_t v84 = v83;
                  v83 += v80 + 1;
                  uint64_t v85 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  uint64_t v86 = v85 + 2;
                  if (v86 < v79)
                  {
                    uint64_t result = (int *)v83[1];
                    if (*(float *)(*v82 + 4 * *v83) < *(float *)(*v82 + 4 * (void)result))
                    {
                      ++v83;
                      uint64_t v80 = v86;
                    }
                  }
                  *uint64_t v84 = *v83;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v83 == --a2)
                {
                  *BOOL v83 = v81;
                }
                else
                {
                  *BOOL v83 = *a2;
                  *a2 = v81;
                  uint64_t v87 = (char *)v83 - (char *)v12 + 4;
                  if (v87 >= 5)
                  {
                    unint64_t v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                    float v89 = &v12[v88];
                    uint64_t v90 = *v89;
                    uint64_t v91 = *v83;
                    uint64_t v92 = *v82;
                    float v93 = *(float *)(v92 + 4 * v91);
                    if (*(float *)(v92 + 4 * v90) < v93)
                    {
                      do
                      {
                        float v94 = v89;
                        *BOOL v83 = v90;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        float v89 = &v12[v88];
                        uint64_t v90 = *v89;
                        BOOL v83 = v94;
                      }
                      while (*(float *)(v92 + 4 * v90) < v93);
                      int *v94 = v91;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          float v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11, &v11[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v16 - 1, v16, &v11[v15 + 1], a3);
            int v17 = *v11;
            *float v11 = *v16;
            int *v16 = v17;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(&v11[v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          int v18 = *v11;
          uint64_t v19 = **a3;
          if (a5) {
            break;
          }
          float v20 = *(float *)(v19 + 4 * v18);
          if (*(float *)(v19 + 4 * *(v11 - 1)) < v20) {
            goto LABEL_13;
          }
          if (v20 >= *(float *)(v19 + 4 * *(a2 - 1)))
          {
            float v36 = v11 + 1;
            do
            {
              float v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v20 >= *(float *)(v19 + 4 * *v12));
          }
          else
          {
            float v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v20 >= *(float *)(v19 + 4 * v35));
          }
          float32x4_t v37 = a2;
          if (v12 < a2)
          {
            float32x4_t v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v20 < *(float *)(v19 + 4 * v38));
          }
          if (v12 < v37)
          {
            int v39 = *v12;
            int v40 = *v37;
            do
            {
              int *v12 = v40;
              int *v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                int v39 = v41;
              }
              while (v20 >= *(float *)(v19 + 4 * v41));
              do
              {
                uint64_t v42 = *--v37;
                int v40 = v42;
              }
              while (v20 < *(float *)(v19 + 4 * v42));
            }
            while (v12 < v37);
          }
          float v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *float v11 = *v43;
          }
          a5 = 0;
          int *v43 = v18;
        }
        float v20 = *(float *)(v19 + 4 * v18);
LABEL_13:
        uint64_t v21 = 0;
        do
          uint64_t v22 = v11[++v21];
        while (*(float *)(v19 + 4 * v22) < v20);
        float v23 = &v11[v21];
        float v24 = a2;
        if (v21 == 1)
        {
          float v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *--v24;
          }
          while (*(float *)(v19 + 4 * v26) >= v20);
        }
        else
        {
          do
            uint64_t v25 = *--v24;
          while (*(float *)(v19 + 4 * v25) >= v20);
        }
        if (v23 >= v24)
        {
          int v33 = v23 - 1;
        }
        else
        {
          int v27 = *v24;
          int v28 = v22;
          int v29 = &v11[v21];
          float v30 = v24;
          do
          {
            int *v29 = v27;
            int *v30 = v28;
            do
            {
              uint64_t v31 = v29[1];
              ++v29;
              int v28 = v31;
            }
            while (*(float *)(v19 + 4 * v31) < v20);
            do
            {
              uint64_t v32 = *--v30;
              int v27 = v32;
            }
            while (*(float *)(v19 + 4 * v32) >= v20);
          }
          while (v29 < v30);
          int v33 = v29 - 1;
        }
        if (v33 != v11) {
          *float v11 = *v33;
        }
        *int v33 = v18;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        a5 = 0;
        float v12 = v33 + 1;
      }
      float v12 = v33 + 1;
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v21 = a1 + 2;
      uint64_t v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v23 = *(a2 - 1);
      uint64_t v24 = a1[3];
      uint64_t v25 = **a3;
      if (*(float *)(v25 + 4 * v23) < *(float *)(v25 + 4 * v24))
      {
        *uint64_t v22 = v23;
        *(a2 - 1) = v24;
        uint64_t v26 = *v22;
        uint64_t v27 = *v21;
        float v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          int *v21 = v26;
          *uint64_t v22 = v27;
          uint64_t v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            uint64_t v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      float v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    float v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          float v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v20 = a1;
LABEL_13:
      *float v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]()
{
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4 = std::filebuf::open();
  BOOL v5 = (std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3));
  if (v4) {
    std::ios_base::iostate v6 = 0;
  }
  else {
    std::ios_base::iostate v6 = v5->__rdstate_ | 4;
  }
  std::ios_base::clear(v5, v6);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  uint64_t v2 = a1 + 54;
  MEMORY[0x237E2C2E0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v2);
  return a1;
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  uint64_t v1 = a1 + 54;
  MEMORY[0x237E2C2E0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v1);
  JUMPOUT(0x237E2C510);
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x237E2C2E0](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x237E2C480);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = a1 + 52;
  MEMORY[0x237E2C2E0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v1);
  JUMPOUT(0x237E2C510);
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x237E2C2E0](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x237E2C480);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  uint64_t v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x237E2C2E0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x237E2C480](v1 + 54);
  JUMPOUT(0x237E2C510);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x237E2C330](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      float v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x237E2C340](v13);
  return a1;
}

void sub_237C6BAFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x237E2C340](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x237C6BADCLL);
}

void sub_237C6BB50(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_237C6BCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::~__func()
{
}

void *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26EAD6368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EAD6368;
  a2[1] = v2;
  return result;
}

float std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 5) <= v2) {
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  }
  return *(float *)(*v3 + 224 * (int)v2 + 136);
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EAD63F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EAD63F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::operator()(uint64_t result, int *a2, int *a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(result + 8);
  uint64_t v5 = *v4;
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5);
  if (v6 <= v3 || (unint64_t v7 = *a3, v6 <= v7)) {
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(void *)(v5 + 224 * (int)v3 + 128) == *(void *)(v5 + 224 * (int)v7 + 128))
  {
    size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(result + 16);
    return v8(v5 + 224 * (int)v3, v5 + 224 * (int)v7);
  }
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target_type()
{
}

void *std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::~__func()
{
}

void *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26EAD6488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EAD6488;
  a2[1] = v2;
  return result;
}

float std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 5) <= v2) {
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  }
  return *(float *)(*v3 + 224 * (int)v2 + 136);
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target_type()
{
}

void std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::~__func()
{
}

__n128 std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26EAD6508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EAD6508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5);
  if (v7 <= v4 || (unint64_t v8 = *a3, v7 <= v8)) {
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  }
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 16);
  return v9(v6 + 224 * (int)v4, v6 + 224 * (int)v8);
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target_type()
{
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void _GLOBAL__sub_I_OUBoxUtils_mm()
{
  v0 = (void *)MEMORY[0x237E2CC70]();
  ObjectUnderstandingTest::Bundle = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.ObjectUnderstandingTests"];
}

void OUDataLoader::OUDataLoader(std::string *this, long long *a2)
{
  v92[19] = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 1065353216;
  int v70 = this + 1;
  unint64_t v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  uint64_t v71 = this;
  int64_t v65 = objc_msgSend(NSString, "stringWithFormat:", @"%s/metadata.json", v4);
  float v66 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithContentsOfFile:");
  objc_msgSend(MEMORY[0x263F08900], "JSONObjectWithData:options:error:");
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v74 = [obj countByEnumeratingWithState:&v83 objects:v89 count:16];
  if (v74)
  {
    uint64_t v78 = 0;
    uint64_t v5 = *(void *)v84;
    std::string::size_type v68 = *MEMORY[0x263F8C2A8];
    std::string::size_type v67 = *(void *)(MEMORY[0x263F8C2A8] + 24);
    uint64_t v69 = *(void *)v84;
    while (1)
    {
      if (v5 != v69) {
        objc_enumerationMutation(obj);
      }
      id v6 = *(id *)(*((void *)&v83 + 1) + 8 * v78);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v6 UTF8String]);
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v70, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v87);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      uint64_t v76 = [obj objectForKey:v6];
      id v77 = [v76 objectForKey:@"type"];
      uint64_t v72 = (const void **)(v7 + 40);
      std::string::__assign_external((std::string *)(v7 + 40), (const std::string::value_type *)[v77 UTF8String]);
      unint64_t v8 = [v76 objectForKey:@"shape"];
      id v73 = v6;
      *((void *)v7 + 11) = 1;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      id v9 = v8;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v79 objects:v88 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v80;
        int64_t v12 = (void **)(v7 + 64);
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v80 != v11) {
              objc_enumerationMutation(v9);
            }
            int v14 = [*(id *)(*((void *)&v79 + 1) + 8 * i) intValue];
            uint64_t v15 = v14;
            float v17 = (char *)*((void *)v7 + 9);
            unint64_t v16 = *((void *)v7 + 10);
            if ((unint64_t)v17 >= v16)
            {
              uint64_t v19 = (char *)*v12;
              uint64_t v20 = (v17 - (unsigned char *)*v12) >> 3;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v22 = v16 - (void)v19;
              if (v22 >> 2 > v21) {
                unint64_t v21 = v22 >> 2;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                uint64_t v24 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 80), v23);
                uint64_t v19 = (char *)*((void *)v7 + 8);
                float v17 = (char *)*((void *)v7 + 9);
              }
              else
              {
                uint64_t v24 = 0;
              }
              uint64_t v25 = &v24[8 * v20];
              *(void *)uint64_t v25 = v15;
              char v18 = v25 + 8;
              while (v17 != v19)
              {
                uint64_t v26 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v25 - 1) = v26;
                v25 -= 8;
              }
              *((void *)v7 + 8) = v25;
              *((void *)v7 + 9) = v18;
              *((void *)v7 + 10) = &v24[8 * v23];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              *(void *)float v17 = v14;
              char v18 = v17 + 8;
            }
            *((void *)v7 + 9) = v18;
            *((void *)v7 + 11) *= v15;
          }
          uint64_t v10 = [v9 countByEnumeratingWithState:&v79 objects:v88 count:16];
        }
        while (v10);
      }

      uint64_t v27 = v71;
      if (SHIBYTE(v71->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v27 = (std::string *)v71->__r_.__value_.__r.__words[0];
      }
      id v28 = [NSString stringWithFormat:@"%s/%@.bin", v27, v73];
      [v28 UTF8String];
      std::ifstream::basic_ifstream((uint64_t *)__p);
      if (v91)
      {
        uint64_t v29 = (unint64_t *)(v7 + 96);
        v87.__r_.__value_.__s.__data_[0] = 0;
        while (std::istream::peek() != -1)
        {
          std::istream::read();
          uint64_t v31 = (unsigned char *)*((void *)v7 + 13);
          unint64_t v30 = *((void *)v7 + 14);
          if ((unint64_t)v31 >= v30)
          {
            unint64_t v33 = *v29;
            BOOL v34 = &v31[-*v29];
            unint64_t v35 = (unint64_t)(v34 + 1);
            if ((uint64_t)(v34 + 1) < 0) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = v30 - v33;
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v37 = v35;
            }
            if (v37) {
              uint64_t v38 = (char *)operator new(v37);
            }
            else {
              uint64_t v38 = 0;
            }
            int v39 = &v34[(void)v38];
            int v40 = &v34[(void)v38];
            *int v40 = v87.__r_.__value_.__s.__data_[0];
            uint64_t v32 = v40 + 1;
            if (v31 != (unsigned char *)v33)
            {
              uint64_t v41 = &v31[~v33];
              do
              {
                char v42 = *--v31;
                (v41--)[(void)v38] = v42;
              }
              while (v31 != (unsigned char *)v33);
              uint64_t v31 = (unsigned char *)*v29;
              int v39 = v38;
            }
            *((void *)v7 + 12) = v39;
            *((void *)v7 + 13) = v32;
            *((void *)v7 + 14) = &v38[v37];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            unsigned char *v31 = v87.__r_.__value_.__s.__data_[0];
            uint64_t v32 = v31 + 1;
          }
          *((void *)v7 + 13) = v32;
        }
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1]+ *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
        }
      }
      __p[0].__r_.__value_.__r.__words[0] = v68;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v68 - 24)) = v67;
      MEMORY[0x237E2C2E0](&__p[0].__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x237E2C480](v92);

      int v43 = (char)v7[63];
      if (v43 >= 0) {
        size_t v44 = v7[63];
      }
      else {
        size_t v44 = *((void *)v7 + 6);
      }
      uint64_t v46 = *((void *)v7 + 12);
      uint64_t v45 = *((void *)v7 + 13);
      uint64_t v47 = *((void *)v7 + 11);
      switch(v44)
      {
        case 4uLL:
          if (v43 >= 0) {
            uint64_t v48 = v72;
          }
          else {
            uint64_t v48 = *v72;
          }
          if (!memcmp(v48, "int8", v44)) {
            goto LABEL_68;
          }
          goto LABEL_127;
        case 5uLL:
          if (v43 >= 0) {
            float v59 = v72;
          }
          else {
            float v59 = *v72;
          }
          if (*(_DWORD *)v59 == 913600105 && v59[4] == 52) {
            goto LABEL_115;
          }
          if (*(_DWORD *)v59 == 863268457 && v59[4] == 50) {
            goto LABEL_117;
          }
          if (!memcmp(v59, "int16", v44)) {
            goto LABEL_116;
          }
          if (*(_DWORD *)v59 != 1953393013 || v59[4] != 56) {
            goto LABEL_127;
          }
LABEL_68:
          uint64_t v49 = 1;
          break;
        case 6uLL:
          if (v43 >= 0) {
            uint64_t v50 = v72;
          }
          else {
            uint64_t v50 = *v72;
          }
          if (*(_DWORD *)v50 == 1953393013 && v50[2] == 13366) {
            goto LABEL_115;
          }
          if (*(_DWORD *)v50 == 1953393013 && v50[2] == 12851) {
            goto LABEL_117;
          }
          if (memcmp(v50, "uint16", v44)) {
            goto LABEL_127;
          }
          goto LABEL_116;
        case 7uLL:
          if (v43 >= 0) {
            float v53 = (int *)v72;
          }
          else {
            float v53 = (int *)*v72;
          }
          if (*v53 == 1634692198 && *(int *)((char *)v53 + 3) == 875983969)
          {
LABEL_115:
            uint64_t v49 = 8;
          }
          else if (*v53 == 1634692198 && *(int *)((char *)v53 + 3) == 842232929)
          {
LABEL_117:
            uint64_t v49 = 4;
          }
          else
          {
            int v56 = *v53;
            int v57 = *(int *)((char *)v53 + 3);
            if (v56 != 1634692198 || v57 != 909210721)
            {
LABEL_127:
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(") .", &v87, __p);
              std::logic_error::logic_error(exception, __p);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
            }
LABEL_116:
            uint64_t v49 = 2;
          }
          break;
        default:
          goto LABEL_127;
      }
      if (v45 - v46 != v49 * v47)
      {
        uint64_t v63 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x237E2C1F0](v63, "[OUDataLoader] mismatching data size; bin file might be corrupted.");
        __cxa_throw(v63, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }

      if (++v78 >= v74)
      {
        unint64_t v74 = [obj countByEnumeratingWithState:&v83 objects:v89 count:16];
        if (!v74) {
          break;
        }
        uint64_t v78 = 0;
      }
      uint64_t v5 = *(void *)v84;
    }
  }
}

void sub_237C6CDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(a19);
  if (*(char *)(a20 + 23) < 0) {
    operator delete(*(void **)a20);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (char *)operator new(0x78uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + 1) = v10;
  char v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)char v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_237C6D1B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_237C6D3B4(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x237E2C480](v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OUDataLoader_mm()
{
  v0 = (void *)MEMORY[0x237E2CC70]();
  ObjectUnderstandingTest::Bundle = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.ObjectUnderstandingTests"];
}

uint64_t std::vector<int>::~vector[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void ou3dod::OU3DSparseSSDetector::createForEspressoCPU(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 72);
  int64_t v65 = 0;
  float v66 = 0;
  uint64_t v67 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v65, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  long long v3 = v65;
  for (uint64_t i = v66; v3 != i; ++v3)
    int *v3 = (v2 - 1 + *v3) / v2;
  v64[0] = 0;
  int64x2_t v63 = 0u;
  memset(v62, 0, sizeof(v62));
  std::string::__assign_external(v62, "sparse_voxelssd_cpu.espresso.net", 0x20uLL);
  for (uint64_t j = qword_26AF27888; j; uint64_t j = *(void *)j)
  {
    id v6 = (uint64_t *)(j + 16);
    uint64_t v7 = *(unsigned __int8 *)(j + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(j + 39);
    }
    else {
      uint64_t v8 = *(void *)(j + 24);
    }
    if (v8 == 13
      && ((v7 & 0x80u) == 0 ? (unint64_t v9 = (uint64_t *)(j + 16)) : (unint64_t v9 = (uint64_t *)*v6),
          (v10 = *v9, uint64_t v11 = *(uint64_t *)((char *)v9 + 5), v10 == 0x765F657372617073)
        ? (BOOL v12 = v11 == 0x736C65786F765F65)
        : (BOOL v12 = 0),
          v12))
    {
      int v17 = 0;
      std::vector<int>::size_type v18 = 3;
    }
    else
    {
      if ((v7 & 0x80) != 0)
      {
        uint64_t v14 = *v6;
        unint64_t v13 = (char *)(*v6 + 1);
        uint64_t v7 = *(void *)(j + 24);
      }
      else
      {
        unint64_t v13 = (char *)(j + 17);
        uint64_t v14 = j + 16;
      }
      int v15 = *v13;
      int v16 = *(char *)(v14 + v7 - 1);
      switch(v16)
      {
        case '1':
          int v17 = v15 - 48;
          break;
        case 'r':
          int v17 = v15 - 49;
          break;
        case '2':
          int v17 = v15 - 47;
          break;
        default:
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x237E2C1F0](exception, "[3DOD IS] unexpected post-script.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      std::vector<int>::size_type v18 = 5;
    }
    LODWORD(__x.__r_.__value_.__l.__data_) = -1;
    std::vector<int>::vector(&v61, v18, (const std::vector<int>::value_type *)&__x);
    std::vector<int>::pointer begin = v61.__begin_;
    *v61.__begin_ = v65[v17];
    if (*(char *)(j + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)(j + 16), *(void *)(j + 24));
      std::vector<int>::pointer begin = v61.__begin_;
    }
    else
    {
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      __x.__r_.__value_.__r.__words[2] = *(void *)(j + 32);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v60 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, begin, (uint64_t)v61.__end_, v61.__end_ - begin);
    std::string::size_type size = v62[1].__r_.__value_.__l.__size_;
    if (v62[1].__r_.__value_.__l.__size_ >= v62[1].__r_.__value_.__r.__words[2])
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(v62[1].__r_.__value_.__l.__size_ - v62[1].__r_.__value_.__r.__words[0]) >> 4);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v62[1].__r_.__value_.__r.__words[2] - v62[1].__r_.__value_.__r.__words[0]) >> 4) > v23)
        unint64_t v23 = 0x5555555555555556
            * ((uint64_t)(v62[1].__r_.__value_.__r.__words[2] - v62[1].__r_.__value_.__r.__words[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v62[1].__r_.__value_.__r.__words[2] - v62[1].__r_.__value_.__r.__words[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        unint64_t v24 = 0x555555555555555;
      else {
        unint64_t v24 = v23;
      }
      uint64_t v71 = &v62[1].__r_.__value_.__s.__data_[16];
      size_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v62[1].__r_.__value_.__r.__words[2], v24);
      uint64_t v26 = &v25[48 * v22];
      std::string::size_type v68 = v25;
      v69.i64[0] = (uint64_t)v26;
      std::string::size_type v70 = (std::string::size_type)&v25[48 * v27];
      long long v28 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&__x.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v26 = v28;
      memset(&__x, 0, sizeof(__x));
      *((void *)v26 + 3) = 0;
      *((void *)v26 + 4) = 0;
      *((void *)v26 + 5) = 0;
      *(_OWORD *)(v26 + 24) = *(_OWORD *)__p;
      *((void *)v26 + 5) = v60;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      std::string::size_type v29 = (std::string::size_type)(v26 + 48);
      v69.i64[1] = (uint64_t)(v26 + 48);
      std::string::size_type v30 = v62[1].__r_.__value_.__l.__size_;
      std::string::pointer data = v62[1].__r_.__value_.__l.__data_;
      std::string::size_type v32 = v69.i64[0];
      if (v62[1].__r_.__value_.__l.__size_ == v62[1].__r_.__value_.__r.__words[0])
      {
        int64x2_t v34 = vdupq_n_s64(v62[1].__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          long long v33 = *(_OWORD *)(v30 - 48);
          *(void *)(v32 - 32) = *(void *)(v30 - 32);
          *(_OWORD *)(v32 - 48) = v33;
          *(void *)(v30 - 40) = 0;
          *(void *)(v30 - 32) = 0;
          *(void *)(v30 - 48) = 0;
          *(void *)(v32 - 24) = 0;
          *(void *)(v32 - 16) = 0;
          *(void *)(v32 - 8) = 0;
          *(_OWORD *)(v32 - 24) = *(_OWORD *)(v30 - 24);
          *(void *)(v32 - 8) = *(void *)(v30 - 8);
          v32 -= 48;
          *(void *)(v30 - 24) = 0;
          *(void *)(v30 - 16) = 0;
          *(void *)(v30 - 8) = 0;
          v30 -= 48;
        }
        while ((std::string::pointer)v30 != data);
        int64x2_t v34 = *(int64x2_t *)&v62[1].__r_.__value_.__l.__data_;
        std::string::size_type v29 = v69.u64[1];
      }
      v62[1].__r_.__value_.__r.__words[0] = v32;
      v62[1].__r_.__value_.__l.__size_ = v29;
      int64x2_t v69 = v34;
      std::string::size_type v35 = v62[1].__r_.__value_.__r.__words[2];
      v62[1].__r_.__value_.__r.__words[2] = v70;
      std::string::size_type v70 = v35;
      std::string::size_type v68 = (char *)v34.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v68);
      v62[1].__r_.__value_.__l.__size_ = v29;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v21 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *(void *)(v62[1].__r_.__value_.__l.__size_ + 16) = *((void *)&__x.__r_.__value_.__l + 2);
      *(void *)(size + 24) = 0;
      *(_OWORD *)std::string::size_type size = v21;
      memset(&__x, 0, sizeof(__x));
      *(void *)(size + 32) = 0;
      *(void *)(size + 40) = 0;
      *(_OWORD *)(size + 24) = *(_OWORD *)__p;
      *(void *)(size + 40) = v60;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      v62[1].__r_.__value_.__l.__size_ = size + 48;
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v61.__begin_)
    {
      v61.__end_ = v61.__begin_;
      operator delete(v61.__begin_);
    }
  }
  for (uint64_t k = qword_26AF278B0; k; uint64_t k = *(void *)k)
  {
    size_t v37 = (uint64_t *)(k + 16);
    uint64_t v38 = k + 16;
    if (*(char *)(k + 39) < 0) {
      uint64_t v38 = *v37;
    }
    uint64_t v39 = *(char *)(v38 + 1);
    LODWORD(__x.__r_.__value_.__l.__data_) = -1;
    std::vector<int>::vector(&v61, 3uLL, (const std::vector<int>::value_type *)&__x);
    std::vector<int>::pointer v40 = v61.__begin_;
    *v61.__begin_ = v65[v39 - 48];
    if (*(char *)(k + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)(k + 16), *(void *)(k + 24));
      std::vector<int>::pointer v40 = v61.__begin_;
    }
    else
    {
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v37;
      __x.__r_.__value_.__r.__words[2] = *(void *)(k + 32);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v60 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v40, (uint64_t)v61.__end_, v61.__end_ - v40);
    uint64_t v41 = v63.i64[1];
    if (v63.i64[1] >= v64[0])
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v63.i64[1] - v63.i64[0]) >> 4);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((v64[0] - v63.i64[0]) >> 4) > v44) {
        unint64_t v44 = 0x5555555555555556 * ((v64[0] - v63.i64[0]) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v64[0] - v63.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v45 = 0x555555555555555;
      }
      else {
        unint64_t v45 = v44;
      }
      uint64_t v71 = (std::string::value_type *)v64;
      uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)v64, v45);
      uint64_t v47 = &v46[48 * v43];
      std::string::size_type v68 = v46;
      v69.i64[0] = (uint64_t)v47;
      std::string::size_type v70 = (std::string::size_type)&v46[48 * v48];
      long long v49 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *((void *)v47 + 2) = *((void *)&__x.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v47 = v49;
      memset(&__x, 0, sizeof(__x));
      *((void *)v47 + 3) = 0;
      *((void *)v47 + 4) = 0;
      *((void *)v47 + 5) = 0;
      *(_OWORD *)(v47 + 24) = *(_OWORD *)__p;
      *((void *)v47 + 5) = v60;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      uint64_t v50 = v47 + 48;
      v69.i64[1] = (uint64_t)(v47 + 48);
      uint64_t v51 = v63.i64[1];
      uint64_t v52 = v63.i64[0];
      uint64_t v53 = v69.i64[0];
      if (v63.i64[1] == v63.i64[0])
      {
        int64x2_t v55 = vdupq_n_s64(v63.u64[1]);
      }
      else
      {
        do
        {
          long long v54 = *(_OWORD *)(v51 - 48);
          *(void *)(v53 - 32) = *(void *)(v51 - 32);
          *(_OWORD *)(v53 - 48) = v54;
          *(void *)(v51 - 40) = 0;
          *(void *)(v51 - 32) = 0;
          *(void *)(v51 - 48) = 0;
          *(void *)(v53 - 24) = 0;
          *(void *)(v53 - 16) = 0;
          *(void *)(v53 - 8) = 0;
          *(_OWORD *)(v53 - 24) = *(_OWORD *)(v51 - 24);
          *(void *)(v53 - 8) = *(void *)(v51 - 8);
          v53 -= 48;
          *(void *)(v51 - 24) = 0;
          *(void *)(v51 - 16) = 0;
          *(void *)(v51 - 8) = 0;
          v51 -= 48;
        }
        while (v51 != v52);
        int64x2_t v55 = v63;
        uint64_t v50 = (char *)v69.i64[1];
      }
      v63.i64[0] = v53;
      v63.i64[1] = (uint64_t)v50;
      int64x2_t v69 = v55;
      std::string::size_type v56 = v64[0];
      v64[0] = v70;
      std::string::size_type v70 = v56;
      std::string::size_type v68 = (char *)v55.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v68);
      v63.i64[1] = (uint64_t)v50;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v42 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *(void *)(v63.i64[1] + 16) = *((void *)&__x.__r_.__value_.__l + 2);
      *(void *)(v41 + 24) = 0;
      *(_OWORD *)uint64_t v41 = v42;
      memset(&__x, 0, sizeof(__x));
      *(void *)(v41 + 32) = 0;
      *(void *)(v41 + 40) = 0;
      *(_OWORD *)(v41 + 24) = *(_OWORD *)__p;
      *(void *)(v41 + 40) = v60;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      v63.i64[1] = v41 + 48;
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v61.__begin_)
    {
      v61.__end_ = v61.__begin_;
      operator delete(v61.__begin_);
    }
  }
  [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_237C6DCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  *a12 = 0;
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);

  OUEspressoInference::ModelInfo::~ModelInfo(&a26);
  std::string::size_type v30 = *(void **)(v28 - 160);
  if (v30)
  {
    *(void *)(v28 - 152) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void OUEspressoInference::ModelInfo::BlobInfo::~BlobInfo(OUEspressoInference::ModelInfo::BlobInfo *this)
{
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void ou3dod::OU3DSparseSSDetector::createForEspressoANETunneled()
{
  std::string::size_type v39 = 0;
  int64x2_t v38 = 0u;
  memset(v37, 0, sizeof(v37));
  std::string::__assign_external(v37, "sparse_voxelssd_ane.espresso.net", 0x20uLL);
  for (uint64_t i = qword_26AF27888; i; uint64_t i = *(void *)i)
  {
    if (*(char *)(i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(i + 16), *(void *)(i + 24));
    }
    else {
      std::string v34 = *(std::string *)(i + 16);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v36 = 0;
    std::string::size_type size = v37[1].__r_.__value_.__l.__size_;
    if (v37[1].__r_.__value_.__l.__size_ >= v37[1].__r_.__value_.__r.__words[2])
    {
      unint64_t v3 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v37[1].__r_.__value_.__l.__size_ - v37[1].__r_.__value_.__r.__words[0]) >> 4);
      unint64_t v4 = v3 + 1;
      if (v3 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v37[1].__r_.__value_.__r.__words[2] - v37[1].__r_.__value_.__r.__words[0]) >> 4) > v4)
        unint64_t v4 = 0x5555555555555556
           * ((uint64_t)(v37[1].__r_.__value_.__r.__words[2] - v37[1].__r_.__value_.__r.__words[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v37[1].__r_.__value_.__r.__words[2] - v37[1].__r_.__value_.__r.__words[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        unint64_t v5 = 0x555555555555555;
      else {
        unint64_t v5 = v4;
      }
      long long v42 = &v37[1].__r_.__value_.__s.__data_[16];
      id v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v37[1].__r_.__value_.__r.__words[2], v5);
      std::string::size_type v7 = (std::string::size_type)v6 + 48 * v3;
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v40.__r_.__value_.__l.__size_ = v7;
      std::string::size_type v41 = (std::string::size_type)v6 + 48 * v8;
      long long v9 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)(v7 + 16) = *((void *)&v34.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v7 = v9;
      memset(&v34, 0, sizeof(v34));
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(void *)(v7 + 40) = 0;
      *(_OWORD *)(v7 + 24) = *(_OWORD *)__p;
      *(void *)(v7 + 40) = v36;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      std::string::size_type v10 = v7 + 48;
      v40.__r_.__value_.__r.__words[2] = v7 + 48;
      std::string::size_type v11 = v37[1].__r_.__value_.__l.__size_;
      std::string::pointer data = v37[1].__r_.__value_.__l.__data_;
      std::string::size_type v13 = v40.__r_.__value_.__l.__size_;
      if (v37[1].__r_.__value_.__l.__size_ == v37[1].__r_.__value_.__r.__words[0])
      {
        int64x2_t v15 = vdupq_n_s64(v37[1].__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          long long v14 = *(_OWORD *)(v11 - 48);
          *(void *)(v13 - 32) = *(void *)(v11 - 32);
          *(_OWORD *)(v13 - 48) = v14;
          *(void *)(v11 - 40) = 0;
          *(void *)(v11 - 32) = 0;
          *(void *)(v11 - 48) = 0;
          *(void *)(v13 - 24) = 0;
          *(void *)(v13 - 16) = 0;
          *(void *)(v13 - 8) = 0;
          *(_OWORD *)(v13 - 24) = *(_OWORD *)(v11 - 24);
          *(void *)(v13 - 8) = *(void *)(v11 - 8);
          v13 -= 48;
          *(void *)(v11 - 24) = 0;
          *(void *)(v11 - 16) = 0;
          *(void *)(v11 - 8) = 0;
          v11 -= 48;
        }
        while ((std::string::pointer)v11 != data);
        int64x2_t v15 = *(int64x2_t *)&v37[1].__r_.__value_.__l.__data_;
        std::string::size_type v10 = v40.__r_.__value_.__r.__words[2];
      }
      v37[1].__r_.__value_.__r.__words[0] = v13;
      v37[1].__r_.__value_.__l.__size_ = v10;
      *(int64x2_t *)&v40.__r_.__value_.__r.__words[1] = v15;
      std::string::size_type v16 = v37[1].__r_.__value_.__r.__words[2];
      v37[1].__r_.__value_.__r.__words[2] = v41;
      std::string::size_type v41 = v16;
      v40.__r_.__value_.__r.__words[0] = v15.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v40);
      v37[1].__r_.__value_.__l.__size_ = v10;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v2 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)(v37[1].__r_.__value_.__l.__size_ + 16) = *((void *)&v34.__r_.__value_.__l + 2);
      *(void *)(size + 24) = 0;
      *(_OWORD *)std::string::size_type size = v2;
      memset(&v34, 0, sizeof(v34));
      *(void *)(size + 32) = 0;
      *(void *)(size + 40) = 0;
      *(_OWORD *)(size + 24) = *(_OWORD *)__p;
      *(void *)(size + 40) = v36;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      v37[1].__r_.__value_.__l.__size_ = size + 48;
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = qword_26AF278B0; j; uint64_t j = *(void *)j)
  {
    if (*(char *)(j + 39) < 0) {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(j + 16), *(void *)(j + 24));
    }
    else {
      std::string v34 = *(std::string *)(j + 16);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v36 = 0;
    uint64_t v18 = v38.i64[1];
    if (v38.i64[1] >= v39)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v38.i64[1] - v38.i64[0]) >> 4);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v39 - v38.i64[0]) >> 4) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((uint64_t)(v39 - v38.i64[0]) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v38.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v22 = 0x555555555555555;
      }
      else {
        unint64_t v22 = v21;
      }
      long long v42 = (std::string::value_type *)&v39;
      unint64_t v23 = std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v39, v22);
      std::string::size_type v24 = (std::string::size_type)v23 + 48 * v20;
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v40.__r_.__value_.__l.__size_ = v24;
      std::string::size_type v41 = (std::string::size_type)v23 + 48 * v25;
      long long v26 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)(v24 + 16) = *((void *)&v34.__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v24 = v26;
      memset(&v34, 0, sizeof(v34));
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0;
      *(void *)(v24 + 40) = 0;
      *(_OWORD *)(v24 + 24) = *(_OWORD *)__p;
      *(void *)(v24 + 40) = v36;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      std::string::size_type v27 = v24 + 48;
      v40.__r_.__value_.__r.__words[2] = v24 + 48;
      uint64_t v28 = v38.i64[1];
      uint64_t v29 = v38.i64[0];
      std::string::size_type v30 = v40.__r_.__value_.__l.__size_;
      if (v38.i64[1] == v38.i64[0])
      {
        int64x2_t v32 = vdupq_n_s64(v38.u64[1]);
      }
      else
      {
        do
        {
          long long v31 = *(_OWORD *)(v28 - 48);
          *(void *)(v30 - 32) = *(void *)(v28 - 32);
          *(_OWORD *)(v30 - 48) = v31;
          *(void *)(v28 - 40) = 0;
          *(void *)(v28 - 32) = 0;
          *(void *)(v28 - 48) = 0;
          *(void *)(v30 - 24) = 0;
          *(void *)(v30 - 16) = 0;
          *(void *)(v30 - 8) = 0;
          *(_OWORD *)(v30 - 24) = *(_OWORD *)(v28 - 24);
          *(void *)(v30 - 8) = *(void *)(v28 - 8);
          v30 -= 48;
          *(void *)(v28 - 24) = 0;
          *(void *)(v28 - 16) = 0;
          *(void *)(v28 - 8) = 0;
          v28 -= 48;
        }
        while (v28 != v29);
        int64x2_t v32 = v38;
        std::string::size_type v27 = v40.__r_.__value_.__r.__words[2];
      }
      v38.i64[0] = v30;
      v38.i64[1] = v27;
      *(int64x2_t *)&v40.__r_.__value_.__r.__words[1] = v32;
      std::string::size_type v33 = v39;
      std::string::size_type v39 = v41;
      std::string::size_type v41 = v33;
      v40.__r_.__value_.__r.__words[0] = v32.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v40);
      v38.i64[1] = v27;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
      *(void *)(v38.i64[1] + 16) = *((void *)&v34.__r_.__value_.__l + 2);
      *(void *)(v18 + 24) = 0;
      *(_OWORD *)uint64_t v18 = v19;
      memset(&v34, 0, sizeof(v34));
      *(void *)(v18 + 32) = 0;
      *(void *)(v18 + 40) = 0;
      *(_OWORD *)(v18 + 24) = *(_OWORD *)__p;
      *(void *)(v18 + 40) = v36;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v36 = 0;
      v38.i64[1] = v18 + 48;
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  objc_claimAutoreleasedReturnValue();
  operator new();
}

void sub_237C6E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (__p) {
    ou3dod::OU3DAnchorFreeDetector::createForOnline((uint64_t)__p);
  }
  MEMORY[0x237E2C510](v28, 0x10B1C40E4B8FA47);

  OUEspressoInference::ModelInfo::~ModelInfo(&a27);
  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DSparseSSDetector::OU3DSparseSSDetector(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v5 = ou3dod::OU3DODInterface::OU3DODInterface((void *)a1, a2);
  void *v5 = &unk_26EAD6588;
  long long v6 = a3[3];
  long long v7 = a3[4];
  long long v8 = a3[5];
  *((_OWORD *)v5 + 9) = a3[6];
  long long v9 = a3[1];
  long long v10 = a3[2];
  *((_OWORD *)v5 + 3) = *a3;
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 7) = v7;
  *((_OWORD *)v5 + 8) = v8;
  *((_OWORD *)v5 + 5) = v10;
  *((_OWORD *)v5 + 6) = v6;
  if (*((unsigned char *)v5 + 152)) {
    int v11 = *(_DWORD *)(a1 + 48) + 3;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a1 + 160) = v11;
  _ZNSt3__16vectorINS0_IDv3_iNS_9allocatorIS1_EEEENS2_IS4_EEEC2Em((void *)(a1 + 168), (*(_DWORD *)(a1 + 116) + 1));
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  std::vector<std::span<float,18446744073709551615ul>>::vector((void *)(a1 + 256), (*(_DWORD *)(a1 + 116) + 1));
  std::vector<std::span<float,18446744073709551615ul>>::vector((void *)(a1 + 280), (*(_DWORD *)(a1 + 116) + 1));
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  float v12 = *(float *)(a1 + 80);
  float v13 = *(float *)(a1 + 84);
  *(_WORD *)(a1 + 472) = 1;
  if (v12 != v13 || v12 != *(float *)(a1 + 88))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD IS] Expect the voxel size is identical across all three dimensions.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_237C6E9C4(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v2 + 432);

  long long v6 = *(void **)(v2 + 400);
  if (v6)
  {
    *(void *)(v2 + 408) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)(v2 + 376);
  if (v7)
  {
    *(void *)(v2 + 384) = v7;
    operator delete(v7);
  }
  long long v8 = *(void **)(v2 + 352);
  if (v8)
  {
    *(void *)(v2 + 360) = v8;
    operator delete(v8);
  }
  long long v9 = (void **)(v2 + 304);
  long long v10 = *(void **)(v2 + 328);
  if (v10)
  {
    *(void *)(v2 + 336) = v10;
    operator delete(v10);
  }
  int v11 = *v9;
  if (*v9)
  {
    *(void *)(v2 + 312) = v11;
    operator delete(v11);
  }
  float v12 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 288) = v12;
    operator delete(v12);
  }
  float v13 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 264) = v13;
    operator delete(v13);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(a2 + 3));
  long long v14 = *a2;
  if (*a2)
  {
    *(void *)(v2 + 200) = v14;
    operator delete(v14);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ou3dod::OU3DODInterface::~OU3DODInterface((ou3dod::OU3DODInterface *)v2);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::Preprocess(ou3dod::OU3DSparseSSDetector *this, OUPointCloudCpp *a2)
{
  if (OUPointCloudCpp::IsValid(a2)) {
    ou3dod::OU3DSparseSSDetector::VoxelizePointCloud(this, a2, *((float *)this + 20));
  }
  unint64_t v4 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    ou3dod::OU3DSparseSSDetector::Preprocess(v4);
  }

  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_237CC3E0E);
  __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
}

void sub_237C6EBA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::VoxelizePointCloud(ou3dod::OU3DSparseSSDetector *this, const OUPointCloudCpp *a2, float a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "sparse_voxels");
  int v6 = **((_DWORD **)this + 24);
  memset(v48, 0, sizeof(v48));
  int v49 = 1065353216;
  long long v7 = (char **)*((void *)this + 21);
  v7[1] = *v7;
  memset(&v47, 0, sizeof(v47));
  std::vector<int>::reserve(&v47, v6);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 != *(void *)a2)
  {
    unint64_t v10 = 0;
    do
    {
      long long v11 = *(_OWORD *)(v9 + 16 * v10);
      uint64_t v12 = *((void *)a2 + 3);
      for (int i = 1; ; ++i)
      {
        _OWORD v46[2] = v11;
        if (i == 3) {
          break;
        }
      }
      if ((i - 1) >= 2)
      {
        long long v14 = *(_OWORD *)(v12 + 16 * v10);
        for (int j = 1; ; ++j)
        {
          v46[1] = v14;
          if (j == 3) {
            break;
          }
        }
        if ((j - 1) >= 2)
        {
          int v16 = 0;
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          long long v17 = 0uLL;
          do
          {
            unsigned int v18 = vcvtms_s32_f32(*(float *)(v12 + 16 * v10 + 4 * (v16 & 3)) / a3);
            v46[0] = v17;
            *(_DWORD *)((unint64_t)v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3))) = v18;
            long long v17 = v46[0];
            *(_DWORD *)&uint8_t buf[8] = DWORD2(v46[0]);
            *(void *)long long buf = *(void *)&v46[0];
            ++v16;
          }
          while (v16 != 3);
          if (!_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(v48, (int32x4_t *)buf))
          {
            _ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_((uint64_t)v48, (int32x4_t *)buf, (int32x4_t *)buf);
            unint64_t v20 = v7[1];
            unint64_t v19 = (unint64_t)v7[2];
            if ((unint64_t)v20 >= v19)
            {
              uint64_t v22 = (v20 - *v7) >> 4;
              if ((unint64_t)(v22 + 1) >> 60) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = v19 - (void)*v7;
              uint64_t v24 = v23 >> 3;
              if (v23 >> 3 <= (unint64_t)(v22 + 1)) {
                uint64_t v24 = v22 + 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              if (v25) {
                long long v26 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 2), v25);
              }
              else {
                long long v26 = 0;
              }
              std::string::size_type v27 = &v26[16 * v22];
              *(_OWORD *)std::string::size_type v27 = *(_OWORD *)buf;
              unint64_t v21 = v27 + 16;
              uint64_t v29 = *v7;
              uint64_t v28 = v7[1];
              if (v28 != *v7)
              {
                do
                {
                  long long v30 = *((_OWORD *)v28 - 1);
                  v28 -= 16;
                  *((_OWORD *)v27 - 1) = v30;
                  v27 -= 16;
                }
                while (v28 != v29);
                uint64_t v28 = *v7;
              }
              void *v7 = v27;
              v7[1] = v21;
              v7[2] = &v26[16 * v25];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *(_OWORD *)unint64_t v20 = *(_OWORD *)buf;
              unint64_t v21 = v20 + 16;
            }
            v7[1] = v21;
            std::vector<int>::pointer end = v47.__end_;
            if (v47.__end_ >= v47.__end_cap_.__value_)
            {
              std::vector<int>::pointer begin = v47.__begin_;
              int64_t v34 = v47.__end_ - v47.__begin_;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              int64_t v36 = (char *)v47.__end_cap_.__value_ - (char *)v47.__begin_;
              if (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                int64x2_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v47.__end_cap_, v37);
                std::vector<int>::pointer begin = v47.__begin_;
                std::vector<int>::pointer end = v47.__end_;
              }
              else
              {
                int64x2_t v38 = 0;
              }
              std::string::size_type v39 = (int *)&v38[4 * v34];
              int *v39 = v10;
              int64x2_t v32 = v39 + 1;
              while (end != begin)
              {
                int v40 = *--end;
                *--std::string::size_type v39 = v40;
              }
              v47.__begin_ = v39;
              v47.__end_ = v32;
              v47.__end_cap_.__value_ = (int *)&v38[4 * v37];
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *v47.__end_ = v10;
              int64x2_t v32 = end + 1;
            }
            v47.__end_ = v32;
          }
          uint64_t v9 = *(void *)a2;
          uint64_t v8 = *((void *)a2 + 1);
        }
      }
      ++v10;
    }
    while (v10 < (v8 - v9) >> 4);
  }
  unint64_t v41 = (v7[1] - *v7) >> 4;
  if (v41 > v6)
  {
    long long v42 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "SparseSSD";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v41;
      __int16 v52 = 1024;
      int v53 = v6;
      _os_log_impl(&dword_237C17000, v42, OS_LOG_TYPE_INFO, "[3DOD][%s] Voxel count %lu > capacity %d, triggers resampling; this would cause regression to detection and/or segmentation.",
        buf,
        0x1Cu);
    }

    utils::Resample((utils *)v41, v6, (void **)buf);
    uint64_t v43 = *(void *)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      unint64_t v44 = 0;
      do
      {
        uint64_t v45 = *(void *)(v43 + 8 * v44);
        *(_OWORD *)&(*v7)[16 * v44] = *(_OWORD *)&(*v7)[16 * v45];
        v47.__begin_[v44++] = v47.__begin_[v45];
        uint64_t v43 = *(void *)buf;
      }
      while (v44 < (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
    }
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v7, v6);
    std::vector<int>::resize(&v47, v6);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  OUDnnInferenceInterface::GetInputSpan<float,void>();
}

void sub_237C6F120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps(ou3dod::OU3DSparseSSDetector *this, int a2, double a3, int32x4_t a4)
{
  v47[0] = (uint64_t)this;
  if (a2)
  {
    memset(v45, 0, sizeof(v45));
    int v46 = 1065353216;
    unint64_t v4 = (void *)*((void *)this + 21);
    unint64_t v5 = (int32x4_t *)v4;
    int v6 = (int32x4_t *)(v4 + 3);
    v4[4] = v4[3];
    long long v7 = (_OWORD **)(v4 + 4);
    uint64_t v8 = v4 + 1;
    if (v4[1] != *v4)
    {
      unint64_t v9 = 0;
      unint64_t v10 = v4 + 5;
      do
      {
        int v11 = 0;
        LODWORD(v43[1]) = 0;
        v43[0] = 0;
        long long v12 = *(_OWORD *)(v5->i64[0] + 16 * v9);
        long long v13 = 0uLL;
        do
        {
          long long v37 = v12;
          unsigned int v14 = vcvtms_s32_f32((float)*(int *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) * 0.5);
          long long v38 = v13;
          *(_DWORD *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) = v14;
          long long v15 = v38;
          HIDWORD(v15) = HIDWORD(v13);
          ++v11;
          long long v13 = v15;
        }
        while (v11 != 3);
        *(_OWORD *)uint64_t v43 = v38;
        if (!_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(v45, (int32x4_t *)v43))
        {
          _ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_((uint64_t)v45, (int32x4_t *)v43, (int32x4_t *)v43);
          int v16 = *v7;
          if ((unint64_t)*v7 >= *v10)
          {
            uint64_t v18 = ((uint64_t)v16 - v6->i64[0]) >> 4;
            if ((unint64_t)(v18 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = *v10 - v6->i64[0];
            uint64_t v20 = v19 >> 3;
            if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
              uint64_t v20 = v18 + 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              uint64_t v22 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v10, v21);
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[16 * v18];
            *(_OWORD *)uint64_t v23 = *(_OWORD *)v43;
            long long v17 = v23 + 16;
            uint64_t v24 = *v7;
            unint64_t v25 = (_OWORD *)v6->i64[0];
            if (*v7 != (_OWORD *)v6->i64[0])
            {
              do
              {
                long long v26 = *--v24;
                *((_OWORD *)v23 - 1) = v26;
                v23 -= 16;
              }
              while (v24 != v25);
              uint64_t v24 = (_OWORD *)v6->i64[0];
            }
            v6->i64[0] = (uint64_t)v23;
            void *v7 = v17;
            void *v10 = &v22[16 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            _OWORD *v16 = *(_OWORD *)v43;
            long long v17 = v16 + 1;
          }
          void *v7 = v17;
        }
        ++v9;
      }
      while (v9 < (*v8 - v5->i64[0]) >> 4);
    }
    std::to_string(&v39, 0);
    uint64_t v28 = std::string::insert(&v39, 0, "l", 1uLL);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    long long v30 = std::string::append(&v40, "_k3_s1", 6uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v47, (unsigned __int8 *)&__p, (uint64_t)v43, v5, 1, 3, 0);
  }
  int64x2_t v32 = (int32x4_t *)*((void *)this + 21);
  std::to_string(&__p, 0);
  std::string::size_type v33 = std::string::insert(&__p, 0, "l", 1uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  unint64_t v35 = std::string::append(&v42, "_k3_s1", 6uLL);
  long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  std::string::size_type v44 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v43 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v47, (unsigned __int8 *)v43, (uint64_t)v45, v32, 1, 3, 0);
}

void sub_237C6F93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v52 - 160);
  _Unwind_Resume(a1);
}

int32x4_t *anonymous namespace'::NeighborMapHelper::InitCoordToIndexMap@<X0>(int32x4_t *result@<X0>, unsigned __int32 a2@<W1>, uint64_t a3@<X8>, int32x4_t a4@<Q1>)
{
  v5.i32[1] = 0;
  v5.i64[1] = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v6 = result->i64[1] - result->i64[0];
  if ((int)(v6 >> 4) >= 1)
  {
    long long v7 = (uint64_t *)result;
    uint64_t v8 = 0;
    v5.i32[0] = 1;
    a4.i32[0] = a2;
    int8x16_t v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a4, v5), 0);
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    uint32x4_t v12 = (uint32x4_t)vbicq_s8(v10, v9);
    uint64_t v11 = (v6 >> 4);
    do
    {
      uint32x4_t v13 = vshlq_u32(*(uint32x4_t *)(*v7 + 16 * v8), v12);
      unsigned int v14 = &v13;
      __n128 result = _ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJOS2_EEENSK_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_(a3, (int32x4_t *)&v13, (uint64_t)&std::piecewise_construct, (int32x4_t **)&v14);
      result[2].i32[0] = v8++;
    }
    while (v11 != v8);
  }
  return result;
}

void sub_237C6FB7C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps(unsigned int)::$_0::operator()(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, void *a4, int a5, int a6, char a7)
{
  uint64_t v24 = *a1;
  unint64_t v41 = 0;
  std::string v42 = &v41;
  uint64_t v43 = 0x4812000000;
  std::string::size_type v44 = __Block_byref_object_copy_;
  uint64_t v45 = __Block_byref_object_dispose_;
  int v46 = "";
  std::vector<int>::size_type v13 = (int)(a6 * a6 * a6 * ((a4[1] - *a4) >> 4));
  __x[0] = -1;
  std::vector<int>::vector(&v47, v13, __x);
  uint64_t v14 = a6;
  std::vector<int>::vector(&v40, a6);
  uint64_t v23 = a2;
  std::vector<int>::pointer begin = v40.__begin_;
  if (a6 >= 1)
  {
    int v16 = -1;
    std::vector<int>::pointer v17 = v40.__begin_;
    do
    {
      *v17++ = v16++;
      --v14;
    }
    while (v14);
  }
  uint64_t v18 = dispatch_get_global_queue(0, 0);
  uint64_t v20 = *a4;
  uint64_t v19 = a4[1];
  *(void *)std::string __x = MEMORY[0x263EF8330];
  uint64_t v28 = 3321888768;
  long long v29 = ___ZN12_GLOBAL__N_117NeighborMapHelper7ComputeERKNSt3__113unordered_mapIDv3_iiN5utils8SimdHashIS3_EENS4_9SimdEqualIS3_EENS1_9allocatorINS1_4pairIKS3_iEEEEEERKNS1_6vectorIS3_NS9_IS3_EEEEjib_block_invoke;
  long long v30 = &unk_26EAD65C8;
  char v39 = a7;
  int v37 = a6;
  int v38 = a5;
  int64x2_t v32 = a4;
  std::string __p = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)v40.__end_, v40.__end_ - begin);
  uint64_t v36 = a3;
  long long v31 = &v41;
  dispatch_apply((v19 - v20) >> 4, v18, __x);
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v25, v42[6], (uint64_t)v42[7], ((unsigned char *)v42[7] - (unsigned char *)v42[6]) >> 2);
  if (__p)
  {
    long long v34 = __p;
    operator delete(__p);
  }

  if (v40.__begin_)
  {
    v40.__end_ = v40.__begin_;
    operator delete(v40.__begin_);
  }
  _Block_object_dispose(&v41, 8);
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  *(void *)std::string __x = v23;
  unint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24 + 216, v23, (uint64_t)&std::piecewise_construct, (long long **)__x);
  uint64_t v22 = (void *)*((void *)v21 + 5);
  if (v22)
  {
    *((void *)v21 + 6) = v22;
    operator delete(v22);
    *((void *)v21 + 5) = 0;
    *((void *)v21 + 6) = 0;
    *((void *)v21 + 7) = 0;
  }
  *(_OWORD *)(v21 + 40) = v25;
  *((void *)v21 + 7) = v26;
  OUDnnInferenceInterface::GetInputSpan<float,void>();
}

void sub_237C7004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  __cxa_free_exception(v36);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::ParseNetOutput(ou3dod::OU3DSparseSSDetector *this)
{
  uint64_t v2 = *((int *)this + 39);
  if (v2 > 2) {
    std::string::size_type v18 = 0;
  }
  else {
    std::string::size_type v18 = qword_237CB5670[v2];
  }
  int v3 = *((_DWORD *)this + 29);
  if ((v3 & 0x80000000) == 0)
  {
    std::to_string(&v19, v3);
    unint64_t v4 = std::string::insert(&v19, 0, "l", 1uLL);
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append(&v20, "_", 1uLL);
    std::string __p = *v6;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v20, size + 7);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int8x16_t v9 = &v20;
    }
    else {
      int8x16_t v9 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if (v7 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v9, p_p, size);
    }
    strcpy((char *)v9 + size, "preds_1");
    OUDnnInferenceInterface::GetOutputSpan<float,void>();
  }
  *((void *)this + 39) = *((void *)this + 38);
  *((void *)this + 42) = *((void *)this + 41);
  *((void *)this + 45) = *((void *)this + 44);
  *((void *)this + 48) = *((void *)this + 47);
  std::vector<box3d>::reserve((void **)this + 38, 0);
  std::vector<float>::reserve((void **)this + 41, 0);
  std::vector<float>::reserve((void **)this + 44, 0);
  std::vector<box3d>::reserve((void **)this + 47, (uint64_t)(*(void *)(*((void *)this + 21) + 8) - **((void **)this + 21)) >> 4);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  __p.__r_.__value_.__l.__size_ = v18;
  uint64_t v11 = *((unsigned int *)this + 29);
  if ((v11 & 0x80000000) == 0)
  {
    double v12 = *((float *)this + 20);
    float v13 = ldexp(1.0, *((_DWORD *)this + 29)) * v12;
    if (v11)
    {
      int v14 = v11 - 1;
      uint64_t v15 = 16 * v11;
      uint64_t v16 = 24 * v11;
      do
      {
        ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()((uint64_t *)&__p, (void **)this + 38, (uint64_t)this + 328, (uint64_t *)(*((void *)this + 21) + v16), (void *)(*((void *)this + 32) + v15), v13);
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)this + 352, *((void *)this + 45), *(char **)(*((void *)this + 35) + v15), (char *)(*(void *)(*((void *)this + 35) + v15) + 4 * *(void *)(*((void *)this + 35) + v15 + 8)), *(void *)(*((void *)this + 35) + v15 + 8));
        double v17 = *((float *)this + 20);
        float v13 = ldexp(1.0, v14--) * v17;
        v16 -= 24;
        v15 -= 16;
      }
      while (v15);
    }
    ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()((uint64_t *)&__p, (void **)this + 47, 0, *((uint64_t **)this + 21), *((void **)this + 32), v13);
  }
}

void sub_237C70500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<box3d>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 7)
  {
    if (a2 >> 57) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    int8x16_t v9 = &v6[128 * v8];
    uint64_t v11 = (char *)*a1;
    int8x16_t v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 8);
        long long v14 = *((_OWORD *)v10 - 7);
        long long v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        long long v16 = *((_OWORD *)v10 - 4);
        long long v17 = *((_OWORD *)v10 - 3);
        long long v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      int8x16_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()(uint64_t *a1, void **a2, uint64_t a3, uint64_t *a4, void *a5, float a6)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v78 = a3 + 16;
    uint64_t v79 = (uint64_t)(a2 + 2);
    uint64_t v80 = *a1;
    do
    {
      int32x4_t v84 = *(int32x4_t *)(v6 + 16 * v11);
      long long v13 = (float *)(*a5 + 4 * v12);
      int v14 = *(_DWORD *)(v80 + 156);
      float v15 = expf(*v13);
      float v16 = expf(v13[1]);
      float v17 = expf(v13[2]);
      float v18 = expf(v13[3]);
      float v19 = expf(v13[4]);
      float v20 = expf(v13[5]);
      if (v14 == 2)
      {
        uint64_t v22 = 0;
        int v23 = -1;
        float v24 = -3.4028e38;
        do
        {
          if (v13[v22 + 6] > v24)
          {
            float v24 = v13[v22 + 6];
            int v23 = v22;
          }
          ++v22;
        }
        while (v22 != 12);
        float v25 = (float)v23;
        float v26 = expf(v13[v23 + 18]);
        float v21 = (float)(v26 + (float)(v25 * 0.5236))
            - floor((float)(v26 + (float)(v25 * 0.5236)) / 6.28318531) * 6.28318531;
      }
      else
      {
        float v21 = 0.0;
        if (v14 == 1)
        {
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::invalid_argument::invalid_argument[abi:ne180100](exception, "[OU3D IS] Not implemented.");
          __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
        }
      }
      uint64_t v27 = 0;
      v28.i32[3] = v82;
      v28.f32[0] = v16 - v15;
      v28.f32[1] = v18 - v17;
      v28.f32[2] = v20 - v19;
      v31.i64[0] = 0x3F0000003F000000;
      v31.i64[1] = 0x3F0000003F000000;
      float32x4_t v30 = vmulq_f32(v28, v31);
      float32x4_t v29 = vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(v84), a6), v30);
      v30.f32[0] = (float)(v15 + v16) * 0.5;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      *(float *)&long long v93 = -(float)((float)(v19 + v20) * 0.5);
      *((float *)&v93 + 1) = (float)(v19 + v20) * 0.5;
      v31.f32[0] = -v30.f32[0];
      float32x4_t v32 = v31;
      float32x4_t v33 = v30;
      long long v34 = (float32x4_t *)&v87;
      do
      {
        __int32 v35 = *(_DWORD *)((char *)&v93 + v27);
        v32.f32[1] = -(float)((float)(v17 + v18) * 0.5);
        float32x4_t v36 = v32;
        v36.i32[2] = v35;
        v31.f32[1] = (float)(v17 + v18) * 0.5;
        float32x4_t v37 = v31;
        v37.i32[2] = v35;
        v34[-2] = vaddq_f32(v29, v36);
        v34[-1] = vaddq_f32(v29, v37);
        v33.f32[1] = v31.f32[1];
        float32x4_t v38 = v33;
        v38.i32[2] = v35;
        v30.f32[1] = v32.f32[1];
        float32x4_t v39 = v30;
        v39.i32[2] = v35;
        v27 += 4;
        *long long v34 = vaddq_f32(v29, v38);
        v34[1] = vaddq_f32(v29, v39);
        v34 += 4;
      }
      while (v27 != 8);
      long long v97 = v89;
      long long v98 = v90;
      long long v99 = v91;
      long long v100 = v92;
      long long v93 = v85;
      long long v94 = v86;
      long long v95 = v87;
      long long v96 = v88;
      std::vector<int> v40 = a2[1];
      unint64_t v41 = (unint64_t)a2[2];
      if ((unint64_t)v40 >= v41)
      {
        uint64_t v47 = ((char *)v40 - (unsigned char *)*a2) >> 7;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 57) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v49 = v41 - (void)*a2;
        if (v49 >> 6 > v48) {
          unint64_t v48 = v49 >> 6;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50) {
          uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v79, v50);
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v52 = &v51[128 * v47];
        long long v53 = v94;
        *(_OWORD *)uint64_t v52 = v93;
        *((_OWORD *)v52 + 1) = v53;
        long long v54 = v96;
        *((_OWORD *)v52 + 2) = v95;
        *((_OWORD *)v52 + 3) = v54;
        long long v55 = v100;
        *((_OWORD *)v52 + 6) = v99;
        *((_OWORD *)v52 + 7) = v55;
        long long v56 = v98;
        *((_OWORD *)v52 + 4) = v97;
        *((_OWORD *)v52 + 5) = v56;
        uint64_t v58 = (char *)*a2;
        int v57 = (char *)a2[1];
        float v59 = v52;
        if (v57 != *a2)
        {
          do
          {
            long long v60 = *((_OWORD *)v57 - 8);
            long long v61 = *((_OWORD *)v57 - 7);
            long long v62 = *((_OWORD *)v57 - 5);
            *((_OWORD *)v59 - 6) = *((_OWORD *)v57 - 6);
            *((_OWORD *)v59 - 5) = v62;
            *((_OWORD *)v59 - 8) = v60;
            *((_OWORD *)v59 - 7) = v61;
            long long v63 = *((_OWORD *)v57 - 4);
            long long v64 = *((_OWORD *)v57 - 3);
            long long v65 = *((_OWORD *)v57 - 1);
            *((_OWORD *)v59 - 2) = *((_OWORD *)v57 - 2);
            *((_OWORD *)v59 - 1) = v65;
            *((_OWORD *)v59 - 4) = v63;
            *((_OWORD *)v59 - 3) = v64;
            v59 -= 128;
            v57 -= 128;
          }
          while (v57 != v58);
          int v57 = (char *)*a2;
        }
        int v46 = v52 + 128;
        *a2 = v59;
        a2[1] = v52 + 128;
        a2[2] = &v51[128 * v50];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        long long v42 = v98;
        void v40[4] = v97;
        v40[5] = v42;
        long long v43 = v100;
        v40[6] = v99;
        v40[7] = v43;
        long long v44 = v94;
        *std::vector<int> v40 = v93;
        v40[1] = v44;
        long long v45 = v96;
        v40[2] = v95;
        v40[3] = v45;
        int v46 = v40 + 8;
      }
      a2[1] = v46;
      if (a3)
      {
        uint64_t v67 = *(float **)(a3 + 8);
        unint64_t v66 = *(void *)(a3 + 16);
        if ((unint64_t)v67 >= v66)
        {
          int64x2_t v69 = *(float **)a3;
          uint64_t v70 = ((uint64_t)v67 - *(void *)a3) >> 2;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = v66 - (void)v69;
          if (v72 >> 1 > v71) {
            unint64_t v71 = v72 >> 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            unint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v78, v73);
            int64x2_t v69 = *(float **)a3;
            uint64_t v67 = *(float **)(a3 + 8);
          }
          else
          {
            unint64_t v74 = 0;
          }
          float v75 = (float *)&v74[4 * v70];
          *float v75 = v21;
          std::string::size_type v68 = v75 + 1;
          while (v67 != v69)
          {
            int v76 = *((_DWORD *)v67-- - 1);
            *((_DWORD *)v75-- - 1) = v76;
          }
          *(void *)a3 = v75;
          *(void *)(a3 + 8) = v68;
          *(void *)(a3 + 16) = &v74[4 * v73];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          float *v67 = v21;
          std::string::size_type v68 = v67 + 1;
        }
        *(void *)(a3 + 8) = v68;
      }
      ++v11;
      v12 += a1[1];
      uint64_t v6 = *a4;
    }
    while (v11 < (a4[1] - *a4) >> 4);
  }
}

void sub_237C70B14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(ou3dod::OU3DSparseSSDetector *this)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 33);
  int v3 = *((_DWORD *)this + 34);
  std::vector<int>::size_type v4 = (uint64_t)(*((void *)this + 39) - *((void *)this + 38)) >> 7;
  __x[0] = 0;
  std::vector<int>::vector(&v127, v4, __x);
  unint64_t v5 = (v2 - v3);
  uint64_t v6 = *((void *)this + 39) - *((void *)this + 38);
  unint64_t v7 = v6 >> 7;
  if ((int)(v6 >> 7) >= 1)
  {
    uint64_t v8 = 0;
    std::vector<int>::pointer begin = v127.__begin_;
    uint64_t v10 = ((unint64_t)v6 >> 7);
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v10 != v8);
  }
  if (v7 > *((unsigned int *)this + 32))
  {
    LODWORD(v143) = -8388609;
    std::vector<float>::vector(__x, v7, &v143);
    unint64_t v11 = *((void *)this + 39) - *((void *)this + 38);
    if ((int)(v11 >> 7) >= 1)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = *(void *)__x;
      if (v5 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = (v2 - v3);
      }
      uint64_t v16 = (v11 >> 7);
      do
      {
        if (v2 != v3)
        {
          float v17 = *(float *)(v14 + 4 * v12);
          float v18 = (float *)(*((void *)this + 44) + 4 * v13);
          v13 += v15;
          uint64_t v19 = v15;
          do
          {
            float v20 = *v18;
            if (v17 < *v18)
            {
              *(float *)(v14 + 4 * v12) = v20;
              float v17 = v20;
            }
            ++v18;
            --v19;
          }
          while (v19);
        }
        ++v12;
      }
      while (v12 != v16);
    }
    uint64_t v21 = *((unsigned int *)this + 32);
    std::vector<int>::pointer v22 = v127.__begin_;
    std::vector<int>::pointer end = v127.__end_;
    float v143 = __x;
    if (v21)
    {
      float v24 = &v127.__begin_[v21];
      if (v21 != 1)
      {
        unint64_t v25 = (unint64_t)(v21 - 2) >> 1;
        unint64_t v26 = v25 + 1;
        uint64_t v27 = &v127.__begin_[v25];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v22, (uint64_t **)&v143, v21, v27--);
          --v26;
        }
        while (v26);
      }
      if (v24 != end)
      {
        std::vector<int>::pointer v28 = &v22[v21];
        do
        {
          uint64_t v29 = *v28;
          uint64_t v30 = *v22;
          if (*(float *)(*(void *)__x + 4 * v29) > *(float *)(*(void *)__x + 4 * v30))
          {
            std::string *v28 = v30;
            *std::vector<int>::pointer v22 = v29;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v22, (uint64_t **)&v143, v21, v22);
          }
          ++v28;
        }
        while (v28 != end);
      }
      if (v21 != 1)
      {
        do
        {
          uint64_t v31 = 0;
          int v32 = *v22;
          float32x4_t v33 = v143;
          std::vector<int>::pointer v34 = v22;
          do
          {
            std::vector<int>::pointer v35 = v34;
            v34 += v31 + 1;
            uint64_t v36 = 2 * v31;
            uint64_t v31 = (2 * v31) | 1;
            uint64_t v37 = v36 + 2;
            if (v37 < v21 && *(float *)(*(void *)v33 + 4 * *v34) > *(float *)(*(void *)v33 + 4 * v34[1]))
            {
              ++v34;
              uint64_t v31 = v37;
            }
            std::string *v35 = *v34;
          }
          while (v31 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
          if (v34 == --v24)
          {
            *std::vector<int>::pointer v34 = v32;
          }
          else
          {
            *std::vector<int>::pointer v34 = *v24;
            *float v24 = v32;
            uint64_t v38 = (char *)v34 - (char *)v22 + 4;
            if (v38 >= 5)
            {
              unint64_t v39 = (((unint64_t)v38 >> 2) - 2) >> 1;
              std::vector<int> v40 = &v22[v39];
              uint64_t v41 = *v40;
              uint64_t v42 = *(void *)v33;
              uint64_t v43 = *v34;
              float v44 = *(float *)(v42 + 4 * v43);
              if (*(float *)(v42 + 4 * v41) > v44)
              {
                do
                {
                  *std::vector<int>::pointer v34 = v41;
                  std::vector<int>::pointer v34 = v40;
                  if (!v39) {
                    break;
                  }
                  unint64_t v39 = (v39 - 1) >> 1;
                  std::vector<int> v40 = &v22[v39];
                  uint64_t v41 = *v40;
                }
                while (*(float *)(v42 + 4 * v41) > v44);
                *std::vector<int>::pointer v34 = v43;
              }
            }
          }
        }
        while (v21-- > 2);
      }
    }
    std::vector<int>::resize(&v127, *((unsigned int *)this + 32));
    if (*(void *)__x)
    {
      *(void *)&std::vector<int>::value_type __x[2] = *(void *)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v124 = 0;
  float v125 = 0;
  unint64_t v126 = 0;
  if ((int)v5 < 1)
  {
    float v102 = 0;
    uint64_t v101 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    float v117 = &v123;
    uint64_t v118 = &v126;
    do
    {
      std::string __p = 0;
      float v122 = 0;
      uint64_t v123 = 0;
      std::vector<int>::pointer v47 = v127.__begin_;
      std::vector<int>::pointer v48 = v127.__end_;
      if (v127.__begin_ == v127.__end_)
      {
        int64x2_t v69 = 0;
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = *v47;
          float v51 = *(float *)(*((void *)this + 44) + 4 * (v46 + v50 * v5));
          if (v51 > *((float *)this + 35))
          {
            uint64_t v52 = (_OWORD *)(*((void *)this + 38) + (v50 << 7));
            long long v132 = v52[4];
            long long v133 = v52[5];
            long long v134 = v52[6];
            long long v135 = v52[7];
            *(_OWORD *)std::string __x = *v52;
            long long v129 = v52[1];
            long long v130 = v52[2];
            long long v131 = v52[3];
            int v53 = *(_DWORD *)(*((void *)this + 41) + 4 * v50);
            if (v49 >= (unint64_t)v123)
            {
              uint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - (void)__p) >> 4);
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) > 0x1C71C71C71C71C7) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x1C71C71C71C71C72 * (((char *)v123 - (unsigned char *)__p) >> 4) > v55) {
                unint64_t v55 = 0x1C71C71C71C71C72 * (((char *)v123 - (unsigned char *)__p) >> 4);
              }
              if (0x8E38E38E38E38E39 * (((char *)v123 - (unsigned char *)__p) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v56 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v56 = v55;
              }
              std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(&v143, v56, v54, (uint64_t)v117);
              int v57 = v145;
              *((_OWORD *)v145 + 4) = v132;
              *((_OWORD *)v57 + 5) = v133;
              *((_OWORD *)v57 + 6) = v134;
              *((_OWORD *)v57 + 7) = v135;
              *(_OWORD *)int v57 = *(_OWORD *)__x;
              *((_OWORD *)v57 + 1) = v129;
              *((_OWORD *)v57 + 2) = v130;
              *((_OWORD *)v57 + 3) = v131;
              *((_DWORD *)v57 + 32) = v53;
              *((_DWORD *)v57 + 33) = v46;
              *((float *)v57 + 34) = v51;
              uint64_t v58 = (uint64_t *)__p;
              float v59 = v122;
              long long v60 = p_p;
              if (v122 == __p)
              {
                uint64_t v58 = v122;
              }
              else
              {
                long long v61 = v122;
                do
                {
                  *((_OWORD *)v60 - 9) = *((_OWORD *)v61 - 9);
                  long long v62 = *((_OWORD *)v61 - 8);
                  long long v63 = *((_OWORD *)v61 - 7);
                  long long v64 = *((_OWORD *)v61 - 5);
                  *((_OWORD *)v60 - 6) = *((_OWORD *)v61 - 6);
                  *((_OWORD *)v60 - 5) = v64;
                  *((_OWORD *)v60 - 8) = v62;
                  *((_OWORD *)v60 - 7) = v63;
                  long long v65 = *((_OWORD *)v61 - 4);
                  long long v66 = *((_OWORD *)v61 - 3);
                  long long v67 = *((_OWORD *)v61 - 1);
                  *((_OWORD *)v60 - 2) = *((_OWORD *)v61 - 2);
                  *((_OWORD *)v60 - 1) = v67;
                  *((_OWORD *)v60 - 4) = v65;
                  *((_OWORD *)v60 - 3) = v66;
                  v60 -= 18;
                  v61 -= 18;
                }
                while (v61 != v58);
              }
              unint64_t v49 = (unint64_t)(v57 + 18);
              std::string __p = v60;
              float v122 = v57 + 18;
              std::string::size_type v68 = v123;
              uint64_t v123 = v146;
              float v145 = v59;
              float v146 = v68;
              float v143 = (std::vector<int>::value_type *)v58;
              p_p = (void **)v58;
              if (v59 != v58) {
                float v145 = (uint64_t *)((char *)v59 - 144 - 144 * (((char *)v59 - (char *)v58 - 144) / 0x90uLL));
              }
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              memmove((void *)v49, v52, 0x80uLL);
              *(_DWORD *)(v49 + 128) = v53;
              *(_DWORD *)(v49 + 132) = v46;
              *(float *)(v49 + 136) = v51;
              v49 += 144;
            }
            float v122 = (uint64_t *)v49;
          }
          ++v47;
        }
        while (v47 != v48);
        int64x2_t v69 = __p;
      }
      *(void *)std::string __x = &unk_26EAD6608;
      *(void *)&std::vector<int>::value_type __x[2] = &__p;
      *((void *)&v129 + 1) = __x;
      float v143 = (std::vector<int>::value_type *)&unk_26EAD6688;
      p_p = &__p;
      float v146 = &v143;
      NonMaximumSuppression((uint64_t)__x, 954437177 * ((v49 - (unint64_t)v69) >> 4), (uint64_t)&v143, &v119, *((float *)this + 36));
      std::__function::__value_func<float ()(int,int)>::~__value_func[abi:ne180100](&v143);
      std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](__x);
      unint64_t v71 = v119;
      uint64_t v70 = v120;
      if (v119 != v120)
      {
        uint64_t v72 = v125;
        do
        {
          unint64_t v73 = (char *)__p + 144 * *(void *)v71;
          if ((unint64_t)v72 >= v126)
          {
            uint64_t v80 = 0x8E38E38E38E38E39 * ((v72 - (unsigned char *)v124) >> 4);
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) > 0x1C71C71C71C71C7) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v126 - (void)v124) >> 4) > v81) {
              unint64_t v81 = 0x1C71C71C71C71C72 * ((uint64_t)(v126 - (void)v124) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v126 - (void)v124) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v82 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v82 = v81;
            }
            std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(__x, v82, v80, (uint64_t)v118);
            long long v83 = (_OWORD *)v129;
            long long v84 = v73[1];
            long long v85 = v73[2];
            long long v86 = v73[4];
            *(_OWORD *)(v129 + 48) = v73[3];
            v83[4] = v86;
            v83[2] = v85;
            long long v87 = v73[8];
            long long v89 = v73[5];
            long long v88 = v73[6];
            v83[7] = v73[7];
            long long v83[8] = v87;
            v83[5] = v89;
            v83[6] = v88;
            *long long v83 = *v73;
            v83[1] = v84;
            long long v90 = (char *)v124;
            long long v91 = v125;
            long long v92 = *(char **)&__x[2];
            if (v125 == v124)
            {
              long long v90 = v125;
            }
            else
            {
              long long v93 = v125;
              do
              {
                *((_OWORD *)v92 - 9) = *((_OWORD *)v93 - 9);
                long long v94 = *((_OWORD *)v93 - 8);
                long long v95 = *((_OWORD *)v93 - 7);
                long long v96 = *((_OWORD *)v93 - 5);
                *((_OWORD *)v92 - 6) = *((_OWORD *)v93 - 6);
                *((_OWORD *)v92 - 5) = v96;
                *((_OWORD *)v92 - 8) = v94;
                *((_OWORD *)v92 - 7) = v95;
                long long v97 = *((_OWORD *)v93 - 4);
                long long v98 = *((_OWORD *)v93 - 3);
                long long v99 = *((_OWORD *)v93 - 1);
                *((_OWORD *)v92 - 2) = *((_OWORD *)v93 - 2);
                *((_OWORD *)v92 - 1) = v99;
                *((_OWORD *)v92 - 4) = v97;
                *((_OWORD *)v92 - 3) = v98;
                v92 -= 144;
                v93 -= 144;
              }
              while (v93 != v90);
            }
            uint64_t v72 = (char *)(v83 + 9);
            uint64_t v124 = v92;
            float v125 = (char *)(v83 + 9);
            unint64_t v100 = v126;
            unint64_t v126 = *((void *)&v129 + 1);
            *(void *)&long long v129 = v91;
            *((void *)&v129 + 1) = v100;
            *(void *)std::string __x = v90;
            *(void *)&std::vector<int>::value_type __x[2] = v90;
            if (v91 != v90) {
              *(void *)&long long v129 = &v91[-144 - 144 * ((v91 - v90 - 144) / 0x90uLL)];
            }
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v72 = *v73;
            long long v74 = v73[1];
            long long v75 = v73[2];
            long long v76 = v73[4];
            *((_OWORD *)v72 + 3) = v73[3];
            *((_OWORD *)v72 + 4) = v76;
            *((_OWORD *)v72 + 1) = v74;
            *((_OWORD *)v72 + 2) = v75;
            long long v77 = v73[5];
            long long v78 = v73[6];
            long long v79 = v73[8];
            *((_OWORD *)v72 + 7) = v73[7];
            *((_OWORD *)v72 + 8) = v79;
            *((_OWORD *)v72 + 5) = v77;
            *((_OWORD *)v72 + 6) = v78;
            v72 += 144;
          }
          float v125 = v72;
          v71 += 8;
        }
        while (v71 != v70);
        unint64_t v71 = v119;
      }
      if (v71)
      {
        uint64_t v120 = v71;
        operator delete(v71);
      }
      if (__p)
      {
        float v122 = (uint64_t *)__p;
        operator delete(__p);
      }
      ++v46;
    }
    while (v46 != v5);
    uint64_t v101 = (float *)v124;
    float v102 = (float *)v125;
  }
  unint64_t v103 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v102 - (char *)v101) >> 4));
  if (v102 == v101) {
    uint64_t v104 = 0;
  }
  else {
    uint64_t v104 = v103;
  }
  std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>((unint64_t)v101, v102, v104, 1);
  uint64_t v105 = *((void *)this + 1);
  if (0x8E38E38E38E38E39 * ((v125 - (unsigned char *)v124) >> 4) >= *((unsigned int *)this + 31)) {
    unint64_t v106 = *((unsigned int *)this + 31);
  }
  else {
    unint64_t v106 = 0x8E38E38E38E38E39 * ((v125 - (unsigned char *)v124) >> 4);
  }
  for (uint64_t i = *((void *)this + 2); i != v105; std::__destroy_at[abi:ne180100]<OUBox3d,0>(i))
    i -= 224;
  *((void *)this + 2) = v105;
  std::vector<OUBox3d>::reserve((uint64_t *)this + 1, v106);
  uint64_t v118 = (unint64_t *)((char *)this + 400);
  std::vector<float>::resize((uint64_t)this + 400, v106);
  int v108 = (char *)v124;
  if (v106)
  {
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 4 * v106;
    do
    {
      float v112 = (long long *)&v108[v109];
      float v113 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSparseSSDObjectLabels, (int *)&v108[v109 + 132]);
      if (!v113) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      float v114 = *(float *)((char *)v124 + v109 + 136);
      float v115 = [MEMORY[0x263F08C38] UUID];
      LODWORD(__p) = 0;
      std::vector<float>::vector(&v143, 0x15uLL, &__p);
      if (*((unsigned char *)this + 473)) {
        float v116 = @"online";
      }
      else {
        float v116 = @"offline";
      }
      OUBox3d::OUBox3d((uint64_t)__x, v112, (id *)v113 + 3, v115, (uint64_t)&v143, v116, v114);
      std::vector<OUBox3d>::emplace_back<OUBox3d>((uint64_t *)this + 1, (long long *)__x);

      if (v141) {
        operator delete(v141);
      }
      if (v139)
      {
        float v140 = v139;
        operator delete(v139);
      }

      if (v143)
      {
        p_p = (void **)v143;
        operator delete(v143);
      }

      int v108 = (char *)v124;
      *(_DWORD *)(*v118 + v110) = *(_DWORD *)((char *)v124 + v109 + 128);
      v110 += 4;
      v109 += 144;
    }
    while (v111 != v110);
  }
  else if (!v124)
  {
    goto LABEL_121;
  }
  float v125 = v108;
  operator delete(v108);
LABEL_121:
  if (v127.__begin_)
  {
    v127.__end_ = v127.__begin_;
    operator delete(v127.__begin_);
  }
}

void sub_237C71540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::OU3DSparseSSDetector::InstanceSegmentation(ou3dod::OU3DSparseSSDetector *this)
{
  int v2 = (uint64_t *)*((void *)this + 21);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  unint64_t v5 = (v3 - *v2) >> 4;
  uint64_t v6 = [MEMORY[0x263EFF980] arrayWithCapacity:v5];
  unint64_t v7 = (void *)*((void *)this + 53);
  *((void *)this + 53) = v6;

  if (v3 == v4)
  {
    float v33 = 3.7912e-37;
    char v34 = 0;
    std::unordered_set<SemanticLabelv5>::unordered_set((uint64_t)v35, (unsigned __int8 *)&v33, 5);
  }
  else
  {
    uint64_t v32 = v3;
    uint64_t v8 = 0;
    if (v5 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v5;
    }
    do
    {
      uint64_t v10 = objc_alloc_init(OU3DVoxel);
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      [(OU3DVoxel *)v10 setCenter:*(double *)vmulq_f32(*((float32x4_t *)this + 5), vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(**((void **)this + 21) + 16 * v8)), v11)).i64];
      [(OU3DVoxel *)v10 setSize:*((double *)this + 10)];
      [*((id *)this + 53) addObject:v10];

      ++v8;
    }
    while (v9 != v8);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = (void *)*((void *)this + 35);
    do
    {
      float v33 = 0.0;
      unsigned int v15 = *((_DWORD *)this + 33);
      if (v15 < 2)
      {
        ++v12;
      }
      else
      {
        uint64_t v16 = (float *)(*v14 + 4 * v12);
        float v17 = *v16;
        uint64_t v18 = 1;
        do
        {
          float v19 = v16[v18];
          if (v19 > v17)
          {
            float v33 = *(float *)&v18;
            float v17 = v19;
          }
          ++v18;
        }
        while (v15 != v18);
        v12 += v15 - 2 + 2;
      }
      float v20 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSparseSSDSemanticLabels, (int *)&v33);
      if (!v20) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v21 = *((unsigned __int8 *)v20 + 20);
      std::vector<int>::pointer v22 = [*((id *)this + 53) objectAtIndexedSubscript:v13];
      objc_msgSend(v22, "setSemantic_label:", v21);

      ++v13;
    }
    while (v13 != v9);
    float v33 = 3.7912e-37;
    char v34 = 0;
    std::unordered_set<SemanticLabelv5>::unordered_set((uint64_t)v35, (unsigned __int8 *)&v33, 5);
    if (v32 != v4)
    {
      uint64_t v23 = 0;
      if (v5 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v5;
      }
      do
      {
        unint64_t v25 = objc_msgSend(*((id *)this + 53), "objectAtIndexedSubscript:", v23, v32);
        LOBYTE(v33) = objc_msgSend(v25, "semantic_label");
        if (!std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>(v35, (unsigned __int8 *)&v33))
        {
          uint64_t v26 = *((void *)this + 1);
          if (*((void *)this + 2) != v26)
          {
            unint64_t v27 = 0;
            std::vector<int>::pointer v28 = (float32x4_t *)(*((void *)this + 47) + (v23 << 7));
            uint64_t v29 = 144;
            while (1)
            {
              box3dIou(v28, (float32x4_t *)(v26 + v29 - 144), 0, (uint64_t)&v33);
              *(float *)&double v30 = v33;
              if (v33 > *((float *)this + 37)) {
                break;
              }
              ++v27;
              uint64_t v26 = *((void *)this + 1);
              v29 += 224;
              if (v27 >= 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v26) >> 5)) {
                goto LABEL_21;
              }
            }
            objc_msgSend(v25, "setObject_id:", *(void *)(v26 + v29), v30);
          }
        }
LABEL_21:

        ++v23;
      }
      while (v23 != v24);
    }
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v35);
}

void sub_237C718E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::Postprocess(ou3dod::OU3DSparseSSDetector *this)
{
  ou3dod::OU3DSparseSSDetector::ParseNetOutput(this);
  ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(this);
  ou3dod::OU3DSparseSSDetector::InstanceSegmentation(this);
  uint64_t v2 = *((void *)this + 1);
  if (*((void *)this + 2) != v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      __float2 v5 = __sincosf_stret(*(float *)(*((void *)this + 50) + 4 * v4));
      uint64_t v6 = 0;
      v7.i64[0] = 0x3F0000003F000000;
      v7.i64[1] = 0x3F0000003F000000;
      float32x2_t v8 = (float32x2_t)vmulq_f32(vaddq_f32(*(float32x4_t *)(v2 + 224 * v4), *(float32x4_t *)(v2 + 224 * v4 + 32)), v7).u64[0];
      v9.f32[0] = -v5.__sinval;
      v9.i32[1] = LODWORD(v5.__cosval);
      uint64_t v10 = v2 + v3;
      do
      {
        long long v11 = *(_OWORD *)(v10 + v6);
        float32x2_t v12 = vsub_f32(*(float32x2_t *)&v11, v8);
        *(_DWORD *)(v10 + v6 + 8) = DWORD2(v11);
        *(float32x2_t *)(v10 + v6) = vmla_lane_f32(vmla_n_f32(v8, (float32x2_t)__PAIR64__(LODWORD(v5.__sinval), LODWORD(v5.__cosval)), v12.f32[0]), v9, v12, 1);
        v6 += 16;
      }
      while (v6 != 128);
      ++v4;
      uint64_t v2 = *((void *)this + 1);
      v3 += 224;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v2) >> 5));
  }
}

void ou3dod::OU3DSparseSSDetector::~OU3DSparseSSDetector(id *this)
{
  ou3dod::OU3DSparseSSDetector::~OU3DSparseSSDetector(this);
  JUMPOUT(0x237E2C510);
}

{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void **v10;

  *this = &unk_26EAD6588;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(this + 54));

  uint64_t v2 = this[50];
  if (v2)
  {
    this[51] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[47];
  if (v3)
  {
    this[48] = v3;
    operator delete(v3);
  }
  unint64_t v4 = this[44];
  if (v4)
  {
    this[45] = v4;
    operator delete(v4);
  }
  __float2 v5 = this[41];
  if (v5)
  {
    this[42] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this[38];
  if (v6)
  {
    this[39] = v6;
    operator delete(v6);
  }
  float32x4_t v7 = this[35];
  if (v7)
  {
    this[36] = v7;
    operator delete(v7);
  }
  float32x2_t v8 = this[32];
  if (v8)
  {
    this[33] = v8;
    operator delete(v8);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(this + 27));
  float32x2_t v9 = this[24];
  if (v9)
  {
    this[25] = v9;
    operator delete(v9);
  }
  uint64_t v10 = this + 21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  ou3dod::OU3DODInterface::~OU3DODInterface((ou3dod::OU3DODInterface *)this);
}

uint64_t std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *_ZNSt3__16vectorINS0_IDv3_iNS_9allocatorIS1_EEEENS2_IS4_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_237C71B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::span<float,18446744073709551615ul>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_237C71BA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *_ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJOS2_EEENSK_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_(uint64_t a1, int32x4_t *a2, uint64_t a3, int32x4_t **a4)
{
  int32x4_t v7 = *a2;
  unint64_t v8 = a2->i32[0];
  uint64_t v9 = 1;
  for (uint64_t i = 7; i != 21; i += 7)
  {
    int32x4_t v28 = v7;
    v8 ^= (uint64_t)*(int *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9++ & 3))) << i;
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
    uint64_t v14 = *(int32x4_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int j = *v14; j; int j = (int32x4_t *)j->i64[0])
      {
        unint64_t v16 = j->u64[1];
        if (v16 == v8)
        {
          uint32x4_t v17 = (uint32x4_t)vceqq_s32(j[1], v7);
          v17.i32[3] = v17.i32[2];
          if ((vminvq_u32(v17) & 0x80000000) != 0) {
            return j;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int j = (int32x4_t *)operator new(0x30uLL);
  j->i64[0] = 0;
  j->i64[1] = v8;
  j[1] = **a4;
  j[2].i32[0] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(int32x4_t ***)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    j->i64[0] = (uint64_t)*v25;
LABEL_40:
    void *v25 = j;
    goto LABEL_41;
  }
  j->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = j;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (j->i64[0])
  {
    unint64_t v26 = *(void *)(j->i64[0] + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    unint64_t v25 = (int32x4_t **)(*(void *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return j;
}

void sub_237C71E18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

int32x4_t *___ZN12_GLOBAL__N_117NeighborMapHelper7ComputeERKNSt3__113unordered_mapIDv3_iiN5utils8SimdHashIS3_EENS4_9SimdEqualIS3_EENS1_9allocatorINS1_4pairIKS3_iEEEEEERKNS1_6vectorIS3_NS9_IS3_EEEEjib_block_invoke(int32x4_t *result, uint64_t a2, int32x4_t a3)
{
  uint64_t v3 = result;
  int32x4_t v4 = *(int32x4_t *)(*(void *)result[2].i64[1] + 16 * a2);
  if (!result[5].i8[8])
  {
    size_t v5 = (const float *)&result[5].i32[1];
    a3 = (int32x4_t)vld1q_dup_f32(v5);
    int32x4_t v4 = vmulq_s32(a3, v4);
  }
  uint64_t v6 = (unsigned __int32 *)result[3].i64[0];
  int32x4_t v7 = (unsigned __int32 *)result[3].i64[1];
  if (v6 != v7)
  {
    uint64_t v8 = result[5].i32[0] * a2 * result[5].i32[0] * result[5].i32[0];
    int32x4_t v16 = v4;
    do
    {
      uint64_t v9 = (__int32 *)v3[3].i64[0];
      uint64_t v10 = (__int32 *)v3[3].i64[1];
      if (v9 != v10)
      {
        a3.i32[0] = *v6;
        int32x4_t v15 = a3;
        do
        {
          unint64_t v11 = (__int32 *)v3[3].i64[0];
          uint8x8_t v12 = (__int32 *)v3[3].i64[1];
          if (v11 != v12)
          {
            int32x4_t v13 = v15;
            v13.i32[1] = *v9;
            v13.i32[2] = v15.i32[2];
            int32x4_t v17 = v13;
            do
            {
              int32x4_t v14 = v17;
              v14.i32[2] = *v11;
              int32x4_t v18 = vaddq_s32(v14, v4);
              __n128 result = _ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_((void *)v3[4].i64[1], &v18);
              if (result) {
                *(_DWORD *)(*(void *)(*(void *)(v3[2].i64[0] + 8) + 48) + 4 * v8) = result[2].i32[0];
              }
              ++v8;
              ++v11;
              int32x4_t v4 = v16;
            }
            while (v11 != v12);
          }
          ++v9;
        }
        while (v9 != v10);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

void *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

int32x4_t *_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(void *a1, int32x4_t *a2)
{
  int32x4_t v2 = *a2;
  unint64_t v3 = a2->i32[0];
  uint64_t v4 = 1;
  for (uint64_t i = 7; i != 21; i += 7)
  {
    int32x4_t v14 = v2;
    v3 ^= (uint64_t)*(int *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4++ & 3))) << i;
  }
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v3;
    if (v3 >= *(void *)&v6) {
      unint64_t v9 = v3 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v6 - 1) & v3;
  }
  uint64_t v10 = *(int32x4_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (__n128 result = *v10; result; __n128 result = (int32x4_t *)result->i64[0])
  {
    unint64_t v12 = result->u64[1];
    if (v3 == v12)
    {
      uint32x4_t v13 = (uint32x4_t)vceqq_s32(result[1], v2);
      v13.i32[3] = v13.i32[2];
      if ((vminvq_u32(v13) & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v6) {
          v12 %= *(void *)&v6;
        }
      }
      else
      {
        v12 &= *(void *)&v6 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return result;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint8x8_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    uint32x4_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      int32x4_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    }
    else {
      int32x4_t v18 = 0;
    }
    int32x4_t v28 = &v18[4 * v15];
    std::string __p = v18;
    char v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    double v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)int32x4_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    std::vector<int>::pointer v35 = v30;
    size_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[4 * a5];
    size_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[4 * a5];
    unint64_t v25 = &v23[-4 * a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)unint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  size_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_237C72284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(char **)(a2 + 8);
  int8x8_t v6 = (char *)*a1;
  uint8x8_t v7 = v5;
  if (*a1 != __src)
  {
    unint64_t v8 = __src;
    uint8x8_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint8x8_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint32x4_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      uint8x8_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint8x8_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

void *std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint8x8_t v7 = (char *)operator new(144 * a2);
  }
  else
  {
    uint8x8_t v7 = 0;
  }
  uint64_t v8 = &v7[144 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[144 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(a2 - 2) > *(float *)(v10 + 136))
                {
                  long long v202 = *(_OWORD *)v10;
                  long long v238 = *(_OWORD *)(v10 + 48);
                  long long v250 = *(_OWORD *)(v10 + 64);
                  long long v214 = *(_OWORD *)(v10 + 16);
                  long long v226 = *(_OWORD *)(v10 + 32);
                  long long v286 = *(_OWORD *)(v10 + 112);
                  long long v298 = *(_OWORD *)(v10 + 128);
                  long long v262 = *(_OWORD *)(v10 + 80);
                  long long v274 = *(_OWORD *)(v10 + 96);
                  *(_OWORD *)unint64_t v10 = *((_OWORD *)a2 - 9);
                  long long v74 = *((_OWORD *)a2 - 8);
                  long long v75 = *((_OWORD *)a2 - 7);
                  long long v76 = *((_OWORD *)a2 - 5);
                  *(_OWORD *)(v10 + 48) = *((_OWORD *)a2 - 6);
                  *(_OWORD *)(v10 + 64) = v76;
                  *(_OWORD *)(v10 + 16) = v74;
                  *(_OWORD *)(v10 + 32) = v75;
                  long long v77 = *((_OWORD *)a2 - 4);
                  long long v78 = *((_OWORD *)a2 - 3);
                  long long v79 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v10 + 112) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 128) = v79;
                  *(_OWORD *)(v10 + 80) = v77;
                  *(_OWORD *)(v10 + 96) = v78;
                  *((_OWORD *)a2 - 9) = v202;
                  *((_OWORD *)a2 - 6) = v238;
                  *((_OWORD *)a2 - 5) = v250;
                  *((_OWORD *)a2 - 8) = v214;
                  *((_OWORD *)a2 - 7) = v226;
                  *((_OWORD *)a2 - 2) = v286;
                  *((_OWORD *)a2 - 1) = v298;
                  *((_OWORD *)a2 - 4) = v262;
                  *((_OWORD *)a2 - 3) = v274;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v10, (long long *)(v10 + 144), a2 - 36);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v10, (long long *)(v10 + 144), (long long *)(v10 + 288), (long long *)a2 - 9);
                break;
              case 5uLL:
                uint64_t v80 = (long long *)(v10 + 144);
                unint64_t v81 = (long long *)(v10 + 288);
                unint64_t v82 = (long long *)(v10 + 432);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v10, (long long *)(v10 + 144), (long long *)(v10 + 288), (long long *)(v10 + 432));
                if (*(a2 - 2) > *(float *)(v10 + 568))
                {
                  long long v227 = *(_OWORD *)(v10 + 464);
                  long long v239 = *(_OWORD *)(v10 + 480);
                  long long v287 = *(_OWORD *)(v10 + 544);
                  long long v299 = *(_OWORD *)(v10 + 560);
                  long long v251 = *(_OWORD *)(v10 + 496);
                  long long v263 = *(_OWORD *)(v10 + 512);
                  long long v275 = *(_OWORD *)(v10 + 528);
                  long long v203 = *v82;
                  long long v215 = *(_OWORD *)(v10 + 448);
                  *unint64_t v82 = *((_OWORD *)a2 - 9);
                  long long v83 = *((_OWORD *)a2 - 8);
                  long long v84 = *((_OWORD *)a2 - 7);
                  long long v85 = *((_OWORD *)a2 - 5);
                  *(_OWORD *)(v10 + 480) = *((_OWORD *)a2 - 6);
                  *(_OWORD *)(v10 + 496) = v85;
                  *(_OWORD *)(v10 + 448) = v83;
                  *(_OWORD *)(v10 + 464) = v84;
                  long long v86 = *((_OWORD *)a2 - 4);
                  long long v87 = *((_OWORD *)a2 - 3);
                  long long v88 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v10 + 544) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 560) = v88;
                  *(_OWORD *)(v10 + 512) = v86;
                  *(_OWORD *)(v10 + 528) = v87;
                  *((_OWORD *)a2 - 9) = v203;
                  *((_OWORD *)a2 - 6) = v239;
                  *((_OWORD *)a2 - 5) = v251;
                  *((_OWORD *)a2 - 8) = v215;
                  *((_OWORD *)a2 - 7) = v227;
                  *((_OWORD *)a2 - 2) = v287;
                  *((_OWORD *)a2 - 1) = v299;
                  *((_OWORD *)a2 - 4) = v263;
                  *((_OWORD *)a2 - 3) = v275;
                  if (*(float *)(v10 + 568) > *(float *)(v10 + 424))
                  {
                    long long v276 = *(_OWORD *)(v10 + 384);
                    long long v288 = *(_OWORD *)(v10 + 400);
                    long long v300 = *(_OWORD *)(v10 + 416);
                    long long v228 = *(_OWORD *)(v10 + 320);
                    long long v240 = *(_OWORD *)(v10 + 336);
                    long long v252 = *(_OWORD *)(v10 + 352);
                    long long v264 = *(_OWORD *)(v10 + 368);
                    long long v204 = *v81;
                    long long v216 = *(_OWORD *)(v10 + 304);
                    long long v89 = *(_OWORD *)(v10 + 512);
                    *(_OWORD *)(v10 + 352) = *(_OWORD *)(v10 + 496);
                    *(_OWORD *)(v10 + 368) = v89;
                    long long v90 = *(_OWORD *)(v10 + 544);
                    *(_OWORD *)(v10 + 384) = *(_OWORD *)(v10 + 528);
                    *(_OWORD *)(v10 + 400) = v90;
                    *(_OWORD *)(v10 + 416) = *(_OWORD *)(v10 + 560);
                    long long v91 = *(_OWORD *)(v10 + 480);
                    *(_OWORD *)(v10 + 320) = *(_OWORD *)(v10 + 464);
                    *(_OWORD *)(v10 + 336) = v91;
                    long long v92 = *(_OWORD *)(v10 + 448);
                    *unint64_t v81 = *v82;
                    *(_OWORD *)(v10 + 304) = v92;
                    *(_OWORD *)(v10 + 496) = v252;
                    *(_OWORD *)(v10 + 512) = v264;
                    *(_OWORD *)(v10 + 528) = v276;
                    *(_OWORD *)(v10 + 544) = v288;
                    *(_OWORD *)(v10 + 560) = v300;
                    *(_OWORD *)(v10 + 464) = v228;
                    *(_OWORD *)(v10 + 480) = v240;
                    LODWORD(v92) = *(_DWORD *)(v10 + 424);
                    LODWORD(v91) = *(_DWORD *)(v10 + 280);
                    *unint64_t v82 = v204;
                    *(_OWORD *)(v10 + 448) = v216;
                    if (*(float *)&v92 > *(float *)&v91)
                    {
                      long long v277 = *(_OWORD *)(v10 + 240);
                      long long v289 = *(_OWORD *)(v10 + 256);
                      long long v301 = *(_OWORD *)(v10 + 272);
                      long long v229 = *(_OWORD *)(v10 + 176);
                      long long v241 = *(_OWORD *)(v10 + 192);
                      long long v253 = *(_OWORD *)(v10 + 208);
                      long long v265 = *(_OWORD *)(v10 + 224);
                      long long v205 = *v80;
                      long long v217 = *(_OWORD *)(v10 + 160);
                      long long v93 = *(_OWORD *)(v10 + 368);
                      *(_OWORD *)(v10 + 208) = *(_OWORD *)(v10 + 352);
                      *(_OWORD *)(v10 + 224) = v93;
                      long long v94 = *(_OWORD *)(v10 + 400);
                      *(_OWORD *)(v10 + 240) = *(_OWORD *)(v10 + 384);
                      *(_OWORD *)(v10 + 256) = v94;
                      *(_OWORD *)(v10 + 272) = *(_OWORD *)(v10 + 416);
                      long long v95 = *(_OWORD *)(v10 + 336);
                      *(_OWORD *)(v10 + 176) = *(_OWORD *)(v10 + 320);
                      *(_OWORD *)(v10 + 192) = v95;
                      long long v96 = *(_OWORD *)(v10 + 304);
                      long long *v80 = *v81;
                      *(_OWORD *)(v10 + 160) = v96;
                      *(_OWORD *)(v10 + 352) = v253;
                      *(_OWORD *)(v10 + 368) = v265;
                      *(_OWORD *)(v10 + 384) = v277;
                      *(_OWORD *)(v10 + 400) = v289;
                      *(_OWORD *)(v10 + 416) = v301;
                      *(_OWORD *)(v10 + 320) = v229;
                      *(_OWORD *)(v10 + 336) = v241;
                      LODWORD(v96) = *(_DWORD *)(v10 + 280);
                      LODWORD(v95) = *(_DWORD *)(v10 + 136);
                      *unint64_t v81 = v205;
                      *(_OWORD *)(v10 + 304) = v217;
                      if (*(float *)&v96 > *(float *)&v95)
                      {
                        long long v206 = *(_OWORD *)v10;
                        long long v242 = *(_OWORD *)(v10 + 48);
                        long long v254 = *(_OWORD *)(v10 + 64);
                        long long v218 = *(_OWORD *)(v10 + 16);
                        long long v230 = *(_OWORD *)(v10 + 32);
                        long long v290 = *(_OWORD *)(v10 + 112);
                        long long v302 = *(_OWORD *)(v10 + 128);
                        long long v266 = *(_OWORD *)(v10 + 80);
                        long long v278 = *(_OWORD *)(v10 + 96);
                        long long v97 = *(_OWORD *)(v10 + 192);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 176);
                        *(_OWORD *)(v10 + 48) = v97;
                        long long v98 = *(_OWORD *)(v10 + 272);
                        long long v99 = *(_OWORD *)(v10 + 240);
                        *(_OWORD *)(v10 + 112) = *(_OWORD *)(v10 + 256);
                        *(_OWORD *)(v10 + 128) = v98;
                        long long v100 = *(_OWORD *)(v10 + 224);
                        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v10 + 208);
                        *(_OWORD *)(v10 + 80) = v100;
                        *(_OWORD *)(v10 + 96) = v99;
                        long long v101 = *(_OWORD *)(v10 + 160);
                        *(_OWORD *)unint64_t v10 = *v80;
                        *(_OWORD *)(v10 + 16) = v101;
                        *(_OWORD *)(v10 + 240) = v278;
                        *(_OWORD *)(v10 + 256) = v290;
                        *(_OWORD *)(v10 + 272) = v302;
                        *(_OWORD *)(v10 + 176) = v230;
                        *(_OWORD *)(v10 + 192) = v242;
                        *(_OWORD *)(v10 + 208) = v254;
                        *(_OWORD *)(v10 + 224) = v266;
                        long long *v80 = v206;
                        *(_OWORD *)(v10 + 160) = v218;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 3455)
          {
            float v102 = (float *)(v10 + 144);
            BOOL v104 = (float *)v10 == a2 || v102 == a2;
            if (a4)
            {
              if (!v104)
              {
                uint64_t v105 = 0;
                unint64_t v106 = v10;
                do
                {
                  float v107 = v102;
                  float v108 = *(float *)(v106 + 280);
                  if (v108 > *(float *)(v106 + 136))
                  {
                    long long v207 = *(_OWORD *)v102;
                    long long v243 = *((_OWORD *)v102 + 3);
                    long long v255 = *((_OWORD *)v102 + 4);
                    long long v219 = *((_OWORD *)v102 + 1);
                    long long v231 = *((_OWORD *)v102 + 2);
                    uint64_t v303 = *((void *)v102 + 16);
                    long long v279 = *((_OWORD *)v102 + 6);
                    long long v291 = *((_OWORD *)v102 + 7);
                    long long v267 = *((_OWORD *)v102 + 5);
                    int v109 = *(_DWORD *)(v106 + 284);
                    uint64_t v110 = v105;
                    while (1)
                    {
                      uint64_t v111 = (float *)(v10 + v110);
                      long long v112 = *(_OWORD *)(v10 + v110 + 112);
                      *((_OWORD *)v111 + 15) = *(_OWORD *)(v10 + v110 + 96);
                      *((_OWORD *)v111 + 16) = v112;
                      *((_OWORD *)v111 + 17) = *(_OWORD *)(v10 + v110 + 128);
                      long long v113 = *(_OWORD *)(v10 + v110 + 48);
                      *((_OWORD *)v111 + 11) = *(_OWORD *)(v10 + v110 + 32);
                      *((_OWORD *)v111 + 12) = v113;
                      long long v114 = *(_OWORD *)(v10 + v110 + 80);
                      *((_OWORD *)v111 + 13) = *(_OWORD *)(v10 + v110 + 64);
                      *((_OWORD *)v111 + 14) = v114;
                      long long v115 = *(_OWORD *)(v10 + v110 + 16);
                      *((_OWORD *)v111 + 9) = *(_OWORD *)(v10 + v110);
                      *((_OWORD *)v111 + 10) = v115;
                      if (!v110) {
                        break;
                      }
                      v110 -= 144;
                      if (v108 <= *(v111 - 2))
                      {
                        uint64_t v116 = v10 + v110 + 144;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v116 = v10;
LABEL_84:
                    *(_OWORD *)uint64_t v116 = v207;
                    *(_OWORD *)(v116 + 48) = v243;
                    *(_OWORD *)(v116 + 64) = v255;
                    *(_OWORD *)(v116 + 16) = v219;
                    *(_OWORD *)(v116 + 32) = v231;
                    *(void *)(v116 + 128) = v303;
                    *(_OWORD *)(v116 + 96) = v279;
                    *(_OWORD *)(v116 + 112) = v291;
                    *(_OWORD *)(v116 + 80) = v267;
                    *(float *)(v116 + 136) = v108;
                    *(_DWORD *)(v116 + 140) = v109;
                  }
                  float v102 = v107 + 36;
                  v105 += 144;
                  unint64_t v106 = (unint64_t)v107;
                }
                while (v107 + 36 != a2);
              }
            }
            else if (!v104)
            {
              do
              {
                unint64_t v165 = (unint64_t)v102;
                float v166 = *(float *)(a1 + 280);
                if (v166 > *(float *)(a1 + 136))
                {
                  long long v210 = *(_OWORD *)v102;
                  long long v246 = *((_OWORD *)v102 + 3);
                  long long v258 = *((_OWORD *)v102 + 4);
                  long long v222 = *((_OWORD *)v102 + 1);
                  long long v234 = *((_OWORD *)v102 + 2);
                  uint64_t v306 = *((void *)v102 + 16);
                  long long v282 = *((_OWORD *)v102 + 6);
                  long long v294 = *((_OWORD *)v102 + 7);
                  long long v270 = *((_OWORD *)v102 + 5);
                  int v167 = *(_DWORD *)(a1 + 284);
                  do
                  {
                    long long v168 = *((_OWORD *)v102 - 2);
                    *((_OWORD *)v102 + 6) = *((_OWORD *)v102 - 3);
                    *((_OWORD *)v102 + 7) = v168;
                    *((_OWORD *)v102 + 8) = *((_OWORD *)v102 - 1);
                    long long v169 = *((_OWORD *)v102 - 6);
                    *((_OWORD *)v102 + 2) = *((_OWORD *)v102 - 7);
                    *((_OWORD *)v102 + 3) = v169;
                    long long v170 = *((_OWORD *)v102 - 4);
                    *((_OWORD *)v102 + 4) = *((_OWORD *)v102 - 5);
                    *((_OWORD *)v102 + 5) = v170;
                    long long v171 = *((_OWORD *)v102 - 8);
                    *(_OWORD *)float v102 = *((_OWORD *)v102 - 9);
                    *((_OWORD *)v102 + 1) = v171;
                    *(float *)&long long v171 = *(v102 - 38);
                    v102 -= 36;
                  }
                  while (v166 > *(float *)&v171);
                  *(_OWORD *)float v102 = v210;
                  *((_OWORD *)v102 + 3) = v246;
                  *((_OWORD *)v102 + 4) = v258;
                  *((_OWORD *)v102 + 1) = v222;
                  *((_OWORD *)v102 + 2) = v234;
                  *((void *)v102 + 16) = v306;
                  *((_OWORD *)v102 + 6) = v282;
                  *((_OWORD *)v102 + 7) = v294;
                  *((_OWORD *)v102 + 5) = v270;
                  v102[34] = v166;
                  *((_DWORD *)v102 + 35) = v167;
                }
                float v102 = (float *)(v165 + 144);
                a1 = v165;
              }
              while ((float *)(v165 + 144) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v117 = (v12 - 2) >> 1;
              int64_t v118 = v117;
              do
              {
                int64_t v119 = v118;
                if (v117 >= v118)
                {
                  uint64_t v120 = (2 * v118) | 1;
                  unint64_t v121 = v10 + 144 * v120;
                  if (2 * v118 + 2 < (uint64_t)v12 && *(float *)(v10 + 144 * v120 + 136) > *(float *)(v121 + 280))
                  {
                    v121 += 144;
                    uint64_t v120 = 2 * v118 + 2;
                  }
                  float v122 = *(float *)(v10 + 144 * v118 + 136);
                  if (*(float *)(v121 + 136) <= v122)
                  {
                    unint64_t v123 = v10 + 144 * v118;
                    long long v208 = *(_OWORD *)v123;
                    long long v244 = *(_OWORD *)(v123 + 48);
                    long long v256 = *(_OWORD *)(v123 + 64);
                    long long v220 = *(_OWORD *)(v123 + 16);
                    long long v232 = *(_OWORD *)(v123 + 32);
                    uint64_t v304 = *(void *)(v123 + 128);
                    long long v280 = *(_OWORD *)(v123 + 96);
                    long long v292 = *(_OWORD *)(v123 + 112);
                    long long v268 = *(_OWORD *)(v123 + 80);
                    int v124 = *(_DWORD *)(v123 + 140);
                    do
                    {
                      float v125 = (_OWORD *)v123;
                      unint64_t v123 = v121;
                      *float v125 = *(_OWORD *)v121;
                      long long v126 = *(_OWORD *)(v121 + 16);
                      long long v127 = *(_OWORD *)(v121 + 32);
                      long long v128 = *(_OWORD *)(v121 + 64);
                      v125[3] = *(_OWORD *)(v121 + 48);
                      v125[4] = v128;
                      v125[1] = v126;
                      v125[2] = v127;
                      long long v129 = *(_OWORD *)(v121 + 80);
                      long long v130 = *(_OWORD *)(v121 + 96);
                      long long v131 = *(_OWORD *)(v121 + 128);
                      v125[7] = *(_OWORD *)(v121 + 112);
                      v125[8] = v131;
                      v125[5] = v129;
                      v125[6] = v130;
                      if (v117 < v120) {
                        break;
                      }
                      uint64_t v132 = (2 * v120) | 1;
                      unint64_t v121 = v10 + 144 * v132;
                      uint64_t v133 = 2 * v120 + 2;
                      if (v133 < (uint64_t)v12 && *(float *)(v10 + 144 * v132 + 136) > *(float *)(v121 + 280))
                      {
                        v121 += 144;
                        uint64_t v132 = v133;
                      }
                      uint64_t v120 = v132;
                    }
                    while (*(float *)(v121 + 136) <= v122);
                    *(_OWORD *)unint64_t v123 = v208;
                    *(_OWORD *)(v123 + 48) = v244;
                    *(_OWORD *)(v123 + 64) = v256;
                    *(_OWORD *)(v123 + 16) = v220;
                    *(_OWORD *)(v123 + 32) = v232;
                    *(void *)(v123 + 128) = v304;
                    *(_OWORD *)(v123 + 96) = v280;
                    *(_OWORD *)(v123 + 112) = v292;
                    *(_OWORD *)(v123 + 80) = v268;
                    *(float *)(v123 + 136) = v122;
                    *(_DWORD *)(v123 + 140) = v124;
                  }
                }
                int64_t v118 = v119 - 1;
              }
              while (v119);
              int64_t v134 = v11 / 0x90uLL;
              do
              {
                uint64_t v135 = 0;
                long long v209 = *(_OWORD *)v10;
                long long v245 = *(_OWORD *)(v10 + 48);
                long long v257 = *(_OWORD *)(v10 + 64);
                long long v221 = *(_OWORD *)(v10 + 16);
                long long v233 = *(_OWORD *)(v10 + 32);
                long long v293 = *(_OWORD *)(v10 + 112);
                long long v305 = *(_OWORD *)(v10 + 128);
                long long v269 = *(_OWORD *)(v10 + 80);
                long long v281 = *(_OWORD *)(v10 + 96);
                unint64_t v136 = v10;
                do
                {
                  id v137 = (_OWORD *)v136;
                  uint64_t v138 = v135 + 1;
                  v136 += 144 * (v135 + 1);
                  uint64_t v139 = 2 * v135;
                  uint64_t v135 = (2 * v135) | 1;
                  int64_t v140 = v139 + 2;
                  if (v140 < v134 && *((float *)&v137[9 * v138 + 8] + 2) > *(float *)(v136 + 280))
                  {
                    v136 += 144;
                    uint64_t v135 = v140;
                  }
                  *id v137 = *(_OWORD *)v136;
                  long long v141 = *(_OWORD *)(v136 + 16);
                  long long v142 = *(_OWORD *)(v136 + 32);
                  long long v143 = *(_OWORD *)(v136 + 64);
                  v137[3] = *(_OWORD *)(v136 + 48);
                  v137[4] = v143;
                  v137[1] = v141;
                  v137[2] = v142;
                  long long v144 = *(_OWORD *)(v136 + 80);
                  long long v145 = *(_OWORD *)(v136 + 96);
                  long long v146 = *(_OWORD *)(v136 + 128);
                  v137[7] = *(_OWORD *)(v136 + 112);
                  v137[8] = v146;
                  v137[5] = v144;
                  v137[6] = v145;
                }
                while (v135 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                a2 -= 36;
                if ((float *)v136 == a2)
                {
                  *(_OWORD *)unint64_t v136 = v209;
                  *(_OWORD *)(v136 + 48) = v245;
                  *(_OWORD *)(v136 + 64) = v257;
                  *(_OWORD *)(v136 + 16) = v221;
                  *(_OWORD *)(v136 + 32) = v233;
                  *(_OWORD *)(v136 + 112) = v293;
                  *(_OWORD *)(v136 + 128) = v305;
                  *(_OWORD *)(v136 + 80) = v269;
                  *(_OWORD *)(v136 + 96) = v281;
                }
                else
                {
                  *(_OWORD *)unint64_t v136 = *(_OWORD *)a2;
                  long long v147 = *((_OWORD *)a2 + 1);
                  long long v148 = *((_OWORD *)a2 + 2);
                  long long v149 = *((_OWORD *)a2 + 4);
                  *(_OWORD *)(v136 + 48) = *((_OWORD *)a2 + 3);
                  *(_OWORD *)(v136 + 64) = v149;
                  *(_OWORD *)(v136 + 16) = v147;
                  *(_OWORD *)(v136 + 32) = v148;
                  long long v150 = *((_OWORD *)a2 + 5);
                  long long v151 = *((_OWORD *)a2 + 6);
                  long long v152 = *((_OWORD *)a2 + 8);
                  *(_OWORD *)(v136 + 112) = *((_OWORD *)a2 + 7);
                  *(_OWORD *)(v136 + 128) = v152;
                  *(_OWORD *)(v136 + 80) = v150;
                  *(_OWORD *)(v136 + 96) = v151;
                  *(_OWORD *)a2 = v209;
                  *((_OWORD *)a2 + 3) = v245;
                  *((_OWORD *)a2 + 4) = v257;
                  *((_OWORD *)a2 + 1) = v221;
                  *((_OWORD *)a2 + 2) = v233;
                  *((_OWORD *)a2 + 7) = v293;
                  *((_OWORD *)a2 + 8) = v305;
                  *((_OWORD *)a2 + 5) = v269;
                  *((_OWORD *)a2 + 6) = v281;
                  uint64_t v153 = v136 - v10 + 144;
                  if (v153 >= 145)
                  {
                    unint64_t v154 = (v153 / 0x90uLL - 2) >> 1;
                    float v155 = *(float *)(v136 + 136);
                    if (*(float *)(v10 + 144 * v154 + 136) > v155)
                    {
                      long long v174 = *(_OWORD *)v136;
                      long long v183 = *(_OWORD *)(v136 + 48);
                      long long v186 = *(_OWORD *)(v136 + 64);
                      long long v177 = *(_OWORD *)(v136 + 16);
                      long long v180 = *(_OWORD *)(v136 + 32);
                      uint64_t v198 = *(void *)(v136 + 128);
                      long long v192 = *(_OWORD *)(v136 + 96);
                      long long v195 = *(_OWORD *)(v136 + 112);
                      long long v189 = *(_OWORD *)(v136 + 80);
                      int v156 = *(_DWORD *)(v136 + 140);
                      do
                      {
                        uint64_t v157 = (_OWORD *)v136;
                        unint64_t v136 = v10 + 144 * v154;
                        _OWORD *v157 = *(_OWORD *)v136;
                        long long v158 = *(_OWORD *)(v136 + 16);
                        long long v159 = *(_OWORD *)(v136 + 32);
                        long long v160 = *(_OWORD *)(v136 + 64);
                        v157[3] = *(_OWORD *)(v136 + 48);
                        v157[4] = v160;
                        v157[1] = v158;
                        v157[2] = v159;
                        long long v161 = *(_OWORD *)(v136 + 80);
                        long long v162 = *(_OWORD *)(v136 + 96);
                        long long v163 = *(_OWORD *)(v136 + 128);
                        v157[7] = *(_OWORD *)(v136 + 112);
                        v157[8] = v163;
                        v157[5] = v161;
                        v157[6] = v162;
                        if (!v154) {
                          break;
                        }
                        unint64_t v154 = (v154 - 1) >> 1;
                      }
                      while (*(float *)(v10 + 144 * v154 + 136) > v155);
                      *(_OWORD *)unint64_t v136 = v174;
                      *(_OWORD *)(v136 + 48) = v183;
                      *(_OWORD *)(v136 + 64) = v186;
                      *(_OWORD *)(v136 + 16) = v177;
                      *(_OWORD *)(v136 + 32) = v180;
                      *(void *)(v136 + 128) = v198;
                      *(_OWORD *)(v136 + 96) = v192;
                      *(_OWORD *)(v136 + 112) = v195;
                      *(_OWORD *)(v136 + 80) = v189;
                      *(float *)(v136 + 136) = v155;
                      *(_DWORD *)(v136 + 140) = v156;
                    }
                  }
                }
              }
              while (v134-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = (long long *)(v10 + 144 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x4801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (long long *)(a1 + 144 * (v12 >> 1)), a2 - 36);
            uint64_t v15 = 9 * v13;
            uint64_t v16 = (long long *)(a1 + 144 * v13 - 144);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)(a1 + 144), v16, a2 - 72);
            unint64_t v17 = (long long *)(a1 + 144 + 16 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)(a1 + 288), v17, a2 - 108);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v16, v14, (float *)v17);
            long long v199 = *(_OWORD *)a1;
            long long v235 = *(_OWORD *)(a1 + 48);
            long long v247 = *(_OWORD *)(a1 + 64);
            long long v211 = *(_OWORD *)(a1 + 16);
            long long v223 = *(_OWORD *)(a1 + 32);
            long long v283 = *(_OWORD *)(a1 + 112);
            long long v295 = *(_OWORD *)(a1 + 128);
            long long v259 = *(_OWORD *)(a1 + 80);
            long long v271 = *(_OWORD *)(a1 + 96);
            *(_OWORD *)a1 = *v14;
            long long v18 = v14[1];
            long long v19 = v14[2];
            long long v20 = v14[4];
            *(_OWORD *)(a1 + 48) = v14[3];
            *(_OWORD *)(a1 + 64) = v20;
            *(_OWORD *)(a1 + 16) = v18;
            *(_OWORD *)(a1 + 32) = v19;
            long long v21 = v14[5];
            long long v22 = v14[6];
            long long v23 = v14[8];
            *(_OWORD *)(a1 + 112) = v14[7];
            *(_OWORD *)(a1 + 128) = v23;
            *(_OWORD *)(a1 + 80) = v21;
            *(_OWORD *)(a1 + 96) = v22;
            long long *v14 = v199;
            v14[3] = v235;
            v14[4] = v247;
            v14[1] = v211;
            void v14[2] = v223;
            v14[7] = v283;
            v14[8] = v295;
            v14[5] = v259;
            v14[6] = v271;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)(a1 + 144 * (v12 >> 1)), (long long *)a1, a2 - 36);
          }
          --a3;
          if (a4) {
            break;
          }
          float v24 = *(float *)(a1 + 136);
          if (*(float *)(a1 - 8) > v24) {
            goto LABEL_12;
          }
          long long v173 = *(_OWORD *)a1;
          long long v182 = *(_OWORD *)(a1 + 48);
          long long v185 = *(_OWORD *)(a1 + 64);
          long long v176 = *(_OWORD *)(a1 + 16);
          long long v179 = *(_OWORD *)(a1 + 32);
          uint64_t v197 = *(void *)(a1 + 128);
          long long v191 = *(_OWORD *)(a1 + 96);
          long long v194 = *(_OWORD *)(a1 + 112);
          long long v188 = *(_OWORD *)(a1 + 80);
          if (v24 <= *(a2 - 2))
          {
            unint64_t v53 = a1 + 144;
            do
            {
              unint64_t v10 = v53;
              if (v53 >= (unint64_t)a2) {
                break;
              }
              float v54 = *(float *)(v53 + 136);
              v53 += 144;
            }
            while (v24 <= v54);
          }
          else
          {
            unint64_t v51 = a1;
            do
            {
              unint64_t v10 = v51 + 144;
              float v52 = *(float *)(v51 + 280);
              v51 += 144;
            }
            while (v24 <= v52);
          }
          unint64_t v55 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v56 = a2;
            do
            {
              unint64_t v55 = v56 - 36;
              float v57 = *(v56 - 2);
              v56 -= 36;
            }
            while (v24 > v57);
          }
          int v58 = *(_DWORD *)(a1 + 140);
          while (v10 < (unint64_t)v55)
          {
            long long v201 = *(_OWORD *)v10;
            long long v237 = *(_OWORD *)(v10 + 48);
            long long v249 = *(_OWORD *)(v10 + 64);
            long long v213 = *(_OWORD *)(v10 + 16);
            long long v225 = *(_OWORD *)(v10 + 32);
            long long v285 = *(_OWORD *)(v10 + 112);
            long long v297 = *(_OWORD *)(v10 + 128);
            long long v261 = *(_OWORD *)(v10 + 80);
            long long v273 = *(_OWORD *)(v10 + 96);
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v55;
            long long v59 = *((_OWORD *)v55 + 1);
            long long v60 = *((_OWORD *)v55 + 2);
            long long v61 = *((_OWORD *)v55 + 4);
            *(_OWORD *)(v10 + 48) = *((_OWORD *)v55 + 3);
            *(_OWORD *)(v10 + 64) = v61;
            *(_OWORD *)(v10 + 16) = v59;
            *(_OWORD *)(v10 + 32) = v60;
            long long v62 = *((_OWORD *)v55 + 5);
            long long v63 = *((_OWORD *)v55 + 6);
            long long v64 = *((_OWORD *)v55 + 8);
            *(_OWORD *)(v10 + 112) = *((_OWORD *)v55 + 7);
            *(_OWORD *)(v10 + 128) = v64;
            *(_OWORD *)(v10 + 80) = v62;
            *(_OWORD *)(v10 + 96) = v63;
            *(_OWORD *)unint64_t v55 = v201;
            *((_OWORD *)v55 + 3) = v237;
            *((_OWORD *)v55 + 4) = v249;
            *((_OWORD *)v55 + 1) = v213;
            *((_OWORD *)v55 + 2) = v225;
            *((_OWORD *)v55 + 7) = v285;
            *((_OWORD *)v55 + 8) = v297;
            *((_OWORD *)v55 + 5) = v261;
            *((_OWORD *)v55 + 6) = v273;
            do
            {
              float v65 = *(float *)(v10 + 280);
              v10 += 144;
            }
            while (v24 <= v65);
            do
            {
              float v66 = *(v55 - 2);
              v55 -= 36;
            }
            while (v24 > v66);
          }
          long long v67 = (long long *)(v10 - 144);
          BOOL v4 = v10 - 144 >= a1;
          BOOL v5 = v10 - 144 == a1;
          if (v10 - 144 != a1)
          {
            *(_OWORD *)a1 = *v67;
            long long v68 = *(_OWORD *)(v10 - 128);
            long long v69 = *(_OWORD *)(v10 - 112);
            long long v70 = *(_OWORD *)(v10 - 80);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v10 - 96);
            *(_OWORD *)(a1 + 64) = v70;
            *(_OWORD *)(a1 + 16) = v68;
            *(_OWORD *)(a1 + 32) = v69;
            long long v71 = *(_OWORD *)(v10 - 64);
            long long v72 = *(_OWORD *)(v10 - 48);
            long long v73 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 128) = v73;
            *(_OWORD *)(a1 + 80) = v71;
            *(_OWORD *)(a1 + 96) = v72;
          }
          a4 = 0;
          long long *v67 = v173;
          *(_OWORD *)(v10 - 96) = v182;
          *(_OWORD *)(v10 - 80) = v185;
          *(_OWORD *)(v10 - 128) = v176;
          *(_OWORD *)(v10 - 112) = v179;
          *(void *)(v10 - 16) = v197;
          *(_OWORD *)(v10 - 48) = v191;
          *(_OWORD *)(v10 - 32) = v194;
          *(_OWORD *)(v10 - 64) = v188;
          *(float *)(v10 - 8) = v24;
          *(_DWORD *)(v10 - 4) = v58;
        }
        float v24 = *(float *)(a1 + 136);
LABEL_12:
        uint64_t v25 = 0;
        long long v172 = *(_OWORD *)a1;
        long long v181 = *(_OWORD *)(a1 + 48);
        long long v184 = *(_OWORD *)(a1 + 64);
        long long v175 = *(_OWORD *)(a1 + 16);
        long long v178 = *(_OWORD *)(a1 + 32);
        uint64_t v196 = *(void *)(a1 + 128);
        long long v190 = *(_OWORD *)(a1 + 96);
        long long v193 = *(_OWORD *)(a1 + 112);
        long long v187 = *(_OWORD *)(a1 + 80);
        int v26 = *(_DWORD *)(a1 + 140);
        do
        {
          float v27 = *(float *)(a1 + v25 + 280);
          v25 += 144;
        }
        while (v27 > v24);
        unint64_t v28 = a1 + v25;
        uint64_t v29 = a2;
        if (v25 == 144)
        {
          uint64_t v32 = a2;
          while (v28 < (unint64_t)v32)
          {
            double v30 = v32 - 36;
            float v33 = *(v32 - 2);
            v32 -= 36;
            if (v33 > v24) {
              goto LABEL_22;
            }
          }
          double v30 = v32;
        }
        else
        {
          do
          {
            double v30 = v29 - 36;
            float v31 = *(v29 - 2);
            v29 -= 36;
          }
          while (v31 <= v24);
        }
LABEL_22:
        unint64_t v10 = v28;
        if (v28 < (unint64_t)v30)
        {
          char v34 = v30;
          do
          {
            long long v200 = *(_OWORD *)v10;
            long long v236 = *(_OWORD *)(v10 + 48);
            long long v248 = *(_OWORD *)(v10 + 64);
            long long v212 = *(_OWORD *)(v10 + 16);
            long long v224 = *(_OWORD *)(v10 + 32);
            long long v284 = *(_OWORD *)(v10 + 112);
            long long v296 = *(_OWORD *)(v10 + 128);
            long long v260 = *(_OWORD *)(v10 + 80);
            long long v272 = *(_OWORD *)(v10 + 96);
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v34;
            long long v35 = *((_OWORD *)v34 + 1);
            long long v36 = *((_OWORD *)v34 + 2);
            long long v37 = *((_OWORD *)v34 + 4);
            *(_OWORD *)(v10 + 48) = *((_OWORD *)v34 + 3);
            *(_OWORD *)(v10 + 64) = v37;
            *(_OWORD *)(v10 + 16) = v35;
            *(_OWORD *)(v10 + 32) = v36;
            long long v38 = *((_OWORD *)v34 + 5);
            long long v39 = *((_OWORD *)v34 + 6);
            long long v40 = *((_OWORD *)v34 + 8);
            *(_OWORD *)(v10 + 112) = *((_OWORD *)v34 + 7);
            *(_OWORD *)(v10 + 128) = v40;
            *(_OWORD *)(v10 + 80) = v38;
            *(_OWORD *)(v10 + 96) = v39;
            *(_OWORD *)char v34 = v200;
            *((_OWORD *)v34 + 3) = v236;
            *((_OWORD *)v34 + 4) = v248;
            *((_OWORD *)v34 + 1) = v212;
            *((_OWORD *)v34 + 2) = v224;
            *((_OWORD *)v34 + 7) = v284;
            *((_OWORD *)v34 + 8) = v296;
            *((_OWORD *)v34 + 5) = v260;
            *((_OWORD *)v34 + 6) = v272;
            do
            {
              float v41 = *(float *)(v10 + 280);
              v10 += 144;
            }
            while (v41 > v24);
            do
            {
              float v42 = *(v34 - 2);
              v34 -= 36;
            }
            while (v42 <= v24);
          }
          while (v10 < (unint64_t)v34);
        }
        uint64_t v43 = (long long *)(v10 - 144);
        if (v10 - 144 != a1)
        {
          *(_OWORD *)a1 = *v43;
          long long v44 = *(_OWORD *)(v10 - 128);
          long long v45 = *(_OWORD *)(v10 - 112);
          long long v46 = *(_OWORD *)(v10 - 80);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v10 - 96);
          *(_OWORD *)(a1 + 64) = v46;
          *(_OWORD *)(a1 + 16) = v44;
          *(_OWORD *)(a1 + 32) = v45;
          long long v47 = *(_OWORD *)(v10 - 64);
          long long v48 = *(_OWORD *)(v10 - 48);
          long long v49 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 128) = v49;
          *(_OWORD *)(a1 + 80) = v47;
          *(_OWORD *)(a1 + 96) = v48;
        }
        long long *v43 = v172;
        *(_OWORD *)(v10 - 96) = v181;
        *(_OWORD *)(v10 - 80) = v184;
        *(_OWORD *)(v10 - 128) = v175;
        *(_OWORD *)(v10 - 112) = v178;
        *(void *)(v10 - 16) = v196;
        *(_OWORD *)(v10 - 48) = v190;
        *(_OWORD *)(v10 - 32) = v193;
        *(_OWORD *)(v10 - 64) = v187;
        *(float *)(v10 - 8) = v24;
        *(_DWORD *)(v10 - 4) = v26;
        if (v28 >= (unint64_t)v30) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>(a1, v10 - 144, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v50 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(a1, v10 - 144);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v50) {
        goto LABEL_33;
      }
    }
    a2 = (float *)(v10 - 144);
    if (!v50) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(float *a1, long long *a2, float *a3)
{
  result.n128_u32[0] = *((_DWORD *)a2 + 34);
  float v4 = a3[34];
  if (result.n128_f32[0] <= a1[34])
  {
    if (v4 > result.n128_f32[0])
    {
      long long v60 = a2[6];
      long long v64 = a2[7];
      long long v68 = a2[8];
      long long v44 = a2[2];
      long long v48 = a2[3];
      long long v52 = a2[4];
      long long v56 = a2[5];
      long long v36 = *a2;
      __n128 v40 = (__n128)a2[1];
      *a2 = *(_OWORD *)a3;
      long long v11 = *((_OWORD *)a3 + 1);
      long long v12 = *((_OWORD *)a3 + 2);
      long long v13 = *((_OWORD *)a3 + 4);
      a2[3] = *((_OWORD *)a3 + 3);
      a2[4] = v13;
      a2[1] = v11;
      a2[2] = v12;
      long long v14 = *((_OWORD *)a3 + 5);
      long long v15 = *((_OWORD *)a3 + 6);
      long long v16 = *((_OWORD *)a3 + 8);
      a2[7] = *((_OWORD *)a3 + 7);
      a2[8] = v16;
      a2[5] = v14;
      a2[6] = v15;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 7) = v64;
      *((_OWORD *)a3 + 8) = v68;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *((_OWORD *)a3 + 4) = v52;
      *((_OWORD *)a3 + 5) = v56;
      __n128 result = v40;
      *(_OWORD *)a3 = v36;
      *((__n128 *)a3 + 1) = v40;
      result.n128_u32[0] = *((_DWORD *)a2 + 34);
      if (result.n128_f32[0] > a1[34])
      {
        long long v61 = *((_OWORD *)a1 + 6);
        long long v65 = *((_OWORD *)a1 + 7);
        long long v69 = *((_OWORD *)a1 + 8);
        long long v45 = *((_OWORD *)a1 + 2);
        long long v49 = *((_OWORD *)a1 + 3);
        long long v53 = *((_OWORD *)a1 + 4);
        long long v57 = *((_OWORD *)a1 + 5);
        long long v37 = *(_OWORD *)a1;
        __n128 v41 = *(__n128 *)(a1 + 4);
        *(_OWORD *)a1 = *a2;
        long long v17 = a2[1];
        long long v18 = a2[2];
        long long v19 = a2[4];
        *((_OWORD *)a1 + 3) = a2[3];
        *((_OWORD *)a1 + 4) = v19;
        *((_OWORD *)a1 + 1) = v17;
        *((_OWORD *)a1 + 2) = v18;
        long long v20 = a2[5];
        long long v21 = a2[6];
        long long v22 = a2[8];
        *((_OWORD *)a1 + 7) = a2[7];
        *((_OWORD *)a1 + 8) = v22;
        *((_OWORD *)a1 + 5) = v20;
        *((_OWORD *)a1 + 6) = v21;
        a2[6] = v61;
        a2[7] = v65;
        a2[8] = v69;
        a2[2] = v45;
        a2[3] = v49;
        a2[4] = v53;
        a2[5] = v57;
        __n128 result = v41;
        *a2 = v37;
        a2[1] = (__int128)v41;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f32[0])
    {
      long long v62 = *((_OWORD *)a1 + 6);
      long long v66 = *((_OWORD *)a1 + 7);
      long long v70 = *((_OWORD *)a1 + 8);
      long long v46 = *((_OWORD *)a1 + 2);
      long long v50 = *((_OWORD *)a1 + 3);
      long long v54 = *((_OWORD *)a1 + 4);
      long long v58 = *((_OWORD *)a1 + 5);
      long long v38 = *(_OWORD *)a1;
      __n128 v42 = *(__n128 *)(a1 + 4);
      *(_OWORD *)a1 = *a2;
      long long v23 = a2[1];
      long long v24 = a2[2];
      long long v25 = a2[4];
      *((_OWORD *)a1 + 3) = a2[3];
      *((_OWORD *)a1 + 4) = v25;
      *((_OWORD *)a1 + 1) = v23;
      *((_OWORD *)a1 + 2) = v24;
      long long v26 = a2[5];
      long long v27 = a2[6];
      long long v28 = a2[8];
      *((_OWORD *)a1 + 7) = a2[7];
      *((_OWORD *)a1 + 8) = v28;
      *((_OWORD *)a1 + 5) = v26;
      *((_OWORD *)a1 + 6) = v27;
      a2[6] = v62;
      a2[7] = v66;
      a2[8] = v70;
      a2[2] = v46;
      a2[3] = v50;
      a2[4] = v54;
      a2[5] = v58;
      __n128 result = v42;
      *a2 = v38;
      a2[1] = (__int128)v42;
      result.n128_f32[0] = a3[34];
      if (result.n128_f32[0] <= *((float *)a2 + 34)) {
        return result;
      }
      long long v59 = a2[6];
      long long v63 = a2[7];
      long long v67 = a2[8];
      long long v43 = a2[2];
      long long v47 = a2[3];
      long long v51 = a2[4];
      long long v55 = a2[5];
      long long v35 = *a2;
      __n128 v39 = (__n128)a2[1];
      *a2 = *(_OWORD *)a3;
      long long v29 = *((_OWORD *)a3 + 1);
      long long v30 = *((_OWORD *)a3 + 2);
      long long v31 = *((_OWORD *)a3 + 4);
      a2[3] = *((_OWORD *)a3 + 3);
      a2[4] = v31;
      a2[1] = v29;
      a2[2] = v30;
      long long v32 = *((_OWORD *)a3 + 5);
      long long v33 = *((_OWORD *)a3 + 6);
      long long v34 = *((_OWORD *)a3 + 8);
      a2[7] = *((_OWORD *)a3 + 7);
      a2[8] = v34;
      a2[5] = v32;
      a2[6] = v33;
    }
    else
    {
      long long v59 = *((_OWORD *)a1 + 6);
      long long v63 = *((_OWORD *)a1 + 7);
      long long v67 = *((_OWORD *)a1 + 8);
      long long v43 = *((_OWORD *)a1 + 2);
      long long v47 = *((_OWORD *)a1 + 3);
      long long v51 = *((_OWORD *)a1 + 4);
      long long v55 = *((_OWORD *)a1 + 5);
      long long v35 = *(_OWORD *)a1;
      __n128 v39 = *(__n128 *)(a1 + 4);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v5 = *((_OWORD *)a3 + 1);
      long long v6 = *((_OWORD *)a3 + 2);
      long long v7 = *((_OWORD *)a3 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a1 + 4) = v7;
      *((_OWORD *)a1 + 1) = v5;
      *((_OWORD *)a1 + 2) = v6;
      long long v8 = *((_OWORD *)a3 + 5);
      long long v9 = *((_OWORD *)a3 + 6);
      long long v10 = *((_OWORD *)a3 + 8);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a3 + 7);
      *((_OWORD *)a1 + 8) = v10;
      *((_OWORD *)a1 + 5) = v8;
      *((_OWORD *)a1 + 6) = v9;
    }
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 7) = v63;
    *((_OWORD *)a3 + 8) = v67;
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *((_OWORD *)a3 + 4) = v51;
    *((_OWORD *)a3 + 5) = v55;
    __n128 result = v39;
    *(_OWORD *)a3 = v35;
    *((__n128 *)a3 + 1) = v39;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 8) > *(float *)(a1 + 136))
      {
        long long v82 = *(_OWORD *)(a1 + 96);
        long long v88 = *(_OWORD *)(a1 + 112);
        long long v94 = *(_OWORD *)(a1 + 128);
        long long v58 = *(_OWORD *)(a1 + 32);
        long long v64 = *(_OWORD *)(a1 + 48);
        long long v70 = *(_OWORD *)(a1 + 64);
        long long v76 = *(_OWORD *)(a1 + 80);
        long long v46 = *(_OWORD *)a1;
        long long v52 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 144);
        long long v6 = *(_OWORD *)(a2 - 128);
        long long v7 = *(_OWORD *)(a2 - 112);
        long long v8 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 64) = v8;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = v7;
        long long v9 = *(_OWORD *)(a2 - 64);
        long long v10 = *(_OWORD *)(a2 - 48);
        long long v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 128) = v11;
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a2 - 48) = v82;
        *(_OWORD *)(a2 - 32) = v88;
        *(_OWORD *)(a2 - 16) = v94;
        *(_OWORD *)(a2 - 112) = v58;
        *(_OWORD *)(a2 - 96) = v64;
        *(_OWORD *)(a2 - 80) = v70;
        *(_OWORD *)(a2 - 64) = v76;
        *(_OWORD *)(a2 - 144) = v46;
        *(_OWORD *)(a2 - 128) = v52;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (long long *)(a1 + 144), (float *)(a2 - 144));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (long long *)(a1 + 144), (long long *)(a1 + 288), (long long *)(a2 - 144));
      return 1;
    case 5uLL:
      long long v25 = (long long *)(a1 + 144);
      long long v26 = (long long *)(a1 + 288);
      long long v27 = (long long *)(a1 + 432);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (long long *)(a1 + 144), (long long *)(a1 + 288), (long long *)(a1 + 432));
      if (*(float *)(a2 - 8) <= *(float *)(a1 + 568)) {
        return 1;
      }
      long long v84 = *(_OWORD *)(a1 + 528);
      long long v90 = *(_OWORD *)(a1 + 544);
      long long v96 = *(_OWORD *)(a1 + 560);
      long long v60 = *(_OWORD *)(a1 + 464);
      long long v66 = *(_OWORD *)(a1 + 480);
      long long v72 = *(_OWORD *)(a1 + 496);
      long long v78 = *(_OWORD *)(a1 + 512);
      long long v48 = *v27;
      long long v54 = *(_OWORD *)(a1 + 448);
      *long long v27 = *(_OWORD *)(a2 - 144);
      long long v28 = *(_OWORD *)(a2 - 128);
      long long v29 = *(_OWORD *)(a2 - 112);
      long long v30 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 496) = v30;
      *(_OWORD *)(a1 + 448) = v28;
      *(_OWORD *)(a1 + 464) = v29;
      long long v31 = *(_OWORD *)(a2 - 64);
      long long v32 = *(_OWORD *)(a2 - 48);
      long long v33 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 560) = v33;
      *(_OWORD *)(a1 + 512) = v31;
      *(_OWORD *)(a1 + 528) = v32;
      *(_OWORD *)(a2 - 48) = v84;
      *(_OWORD *)(a2 - 32) = v90;
      *(_OWORD *)(a2 - 16) = v96;
      *(_OWORD *)(a2 - 112) = v60;
      *(_OWORD *)(a2 - 96) = v66;
      *(_OWORD *)(a2 - 80) = v72;
      *(_OWORD *)(a2 - 64) = v78;
      *(_OWORD *)(a2 - 144) = v48;
      *(_OWORD *)(a2 - 128) = v54;
      if (*(float *)(a1 + 568) <= *(float *)(a1 + 424)) {
        return 1;
      }
      long long v85 = *(_OWORD *)(a1 + 384);
      long long v91 = *(_OWORD *)(a1 + 400);
      long long v97 = *(_OWORD *)(a1 + 416);
      long long v61 = *(_OWORD *)(a1 + 320);
      long long v67 = *(_OWORD *)(a1 + 336);
      long long v73 = *(_OWORD *)(a1 + 352);
      long long v79 = *(_OWORD *)(a1 + 368);
      long long v49 = *v26;
      long long v55 = *(_OWORD *)(a1 + 304);
      long long v34 = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 368) = v34;
      long long v35 = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 400) = v35;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 560);
      long long v36 = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 336) = v36;
      long long v37 = *(_OWORD *)(a1 + 448);
      *long long v26 = *v27;
      *(_OWORD *)(a1 + 304) = v37;
      *(_OWORD *)(a1 + 496) = v73;
      *(_OWORD *)(a1 + 512) = v79;
      *(_OWORD *)(a1 + 528) = v85;
      *(_OWORD *)(a1 + 544) = v91;
      *(_OWORD *)(a1 + 560) = v97;
      *(_OWORD *)(a1 + 464) = v61;
      *(_OWORD *)(a1 + 480) = v67;
      LODWORD(v37) = *(_DWORD *)(a1 + 424);
      LODWORD(v36) = *(_DWORD *)(a1 + 280);
      *long long v27 = v49;
      *(_OWORD *)(a1 + 448) = v55;
      if (*(float *)&v37 <= *(float *)&v36) {
        return 1;
      }
      long long v86 = *(_OWORD *)(a1 + 240);
      long long v92 = *(_OWORD *)(a1 + 256);
      long long v98 = *(_OWORD *)(a1 + 272);
      long long v62 = *(_OWORD *)(a1 + 176);
      long long v68 = *(_OWORD *)(a1 + 192);
      long long v74 = *(_OWORD *)(a1 + 208);
      long long v80 = *(_OWORD *)(a1 + 224);
      long long v50 = *v25;
      long long v56 = *(_OWORD *)(a1 + 160);
      long long v38 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 224) = v38;
      long long v39 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 256) = v39;
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 416);
      long long v40 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 192) = v40;
      long long v41 = *(_OWORD *)(a1 + 304);
      long long *v25 = *v26;
      *(_OWORD *)(a1 + 160) = v41;
      *(_OWORD *)(a1 + 352) = v74;
      *(_OWORD *)(a1 + 368) = v80;
      *(_OWORD *)(a1 + 384) = v86;
      *(_OWORD *)(a1 + 400) = v92;
      *(_OWORD *)(a1 + 416) = v98;
      *(_OWORD *)(a1 + 320) = v62;
      *(_OWORD *)(a1 + 336) = v68;
      LODWORD(v41) = *(_DWORD *)(a1 + 280);
      LODWORD(v40) = *(_DWORD *)(a1 + 136);
      *long long v26 = v50;
      *(_OWORD *)(a1 + 304) = v56;
      if (*(float *)&v41 <= *(float *)&v40) {
        return 1;
      }
      long long v87 = *(_OWORD *)(a1 + 96);
      long long v93 = *(_OWORD *)(a1 + 112);
      long long v99 = *(_OWORD *)(a1 + 128);
      long long v63 = *(_OWORD *)(a1 + 32);
      long long v69 = *(_OWORD *)(a1 + 48);
      long long v75 = *(_OWORD *)(a1 + 64);
      long long v81 = *(_OWORD *)(a1 + 80);
      long long v51 = *(_OWORD *)a1;
      long long v57 = *(_OWORD *)(a1 + 16);
      long long v42 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 80) = v42;
      long long v43 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 112) = v43;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 272);
      long long v44 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 48) = v44;
      long long v45 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)a1 = *v25;
      *(_OWORD *)(a1 + 16) = v45;
      *(_OWORD *)(a1 + 208) = v75;
      *(_OWORD *)(a1 + 224) = v81;
      *(_OWORD *)(a1 + 240) = v87;
      *(_OWORD *)(a1 + 256) = v93;
      *(_OWORD *)(a1 + 272) = v99;
      *(_OWORD *)(a1 + 176) = v63;
      *(_OWORD *)(a1 + 192) = v69;
      BOOL result = 1;
      long long *v25 = v51;
      *(_OWORD *)(a1 + 160) = v57;
      return result;
    default:
      uint64_t v12 = a1 + 288;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (long long *)(a1 + 144), (float *)(a1 + 288));
      uint64_t v13 = a1 + 432;
      if (a1 + 432 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float v16 = *(float *)(v13 + 136);
    if (v16 > *(float *)(v12 + 136))
    {
      long long v83 = *(_OWORD *)(v13 + 96);
      long long v89 = *(_OWORD *)(v13 + 112);
      uint64_t v95 = *(void *)(v13 + 128);
      long long v59 = *(_OWORD *)(v13 + 32);
      long long v65 = *(_OWORD *)(v13 + 48);
      long long v71 = *(_OWORD *)(v13 + 64);
      long long v77 = *(_OWORD *)(v13 + 80);
      long long v47 = *(_OWORD *)v13;
      long long v53 = *(_OWORD *)(v13 + 16);
      uint64_t v17 = v14;
      int v18 = *(_DWORD *)(v13 + 140);
      while (1)
      {
        uint64_t v19 = a1 + v17;
        long long v20 = *(_OWORD *)(a1 + v17 + 400);
        *(_OWORD *)(v19 + 528) = *(_OWORD *)(a1 + v17 + 384);
        *(_OWORD *)(v19 + 544) = v20;
        *(_OWORD *)(v19 + 560) = *(_OWORD *)(a1 + v17 + 416);
        long long v21 = *(_OWORD *)(a1 + v17 + 336);
        *(_OWORD *)(v19 + 464) = *(_OWORD *)(a1 + v17 + 320);
        *(_OWORD *)(v19 + 480) = v21;
        long long v22 = *(_OWORD *)(a1 + v17 + 368);
        *(_OWORD *)(v19 + 496) = *(_OWORD *)(a1 + v17 + 352);
        *(_OWORD *)(v19 + 512) = v22;
        long long v23 = *(_OWORD *)(a1 + v17 + 304);
        *(_OWORD *)(v19 + 432) = *(_OWORD *)(a1 + v17 + 288);
        *(_OWORD *)(v19 + 448) = v23;
        if (v17 == -288) {
          break;
        }
        v17 -= 144;
        if (v16 <= *(float *)(v19 + 280))
        {
          uint64_t v24 = a1 + v17 + 432;
          goto LABEL_12;
        }
      }
      uint64_t v24 = a1;
LABEL_12:
      *(_OWORD *)(v24 + 96) = v83;
      *(_OWORD *)(v24 + 112) = v89;
      *(void *)(v24 + 128) = v95;
      *(_OWORD *)(v24 + 32) = v59;
      *(_OWORD *)(v24 + 48) = v65;
      *(_OWORD *)(v24 + 64) = v71;
      *(_OWORD *)(v24 + 80) = v77;
      *(_OWORD *)uint64_t v24 = v47;
      *(_OWORD *)(v24 + 16) = v53;
      *(float *)(v24 + 136) = v16;
      ++v15;
      *(_DWORD *)(v24 + 140) = v18;
      if (v15 == 8) {
        return v13 + 144 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 144;
    v13 += 144;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(float *a1, long long *a2, long long *a3, long long *a4)
{
  __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(a1, a2, (float *)a3);
  result.n128_u32[0] = *((_DWORD *)a4 + 34);
  if (result.n128_f32[0] > *((float *)a3 + 34))
  {
    long long v45 = a3[6];
    long long v48 = a3[7];
    long long v51 = a3[8];
    long long v33 = a3[2];
    long long v36 = a3[3];
    long long v39 = a3[4];
    long long v42 = a3[5];
    long long v27 = *a3;
    __n128 v30 = (__n128)a3[1];
    *a3 = *a4;
    long long v9 = a4[1];
    long long v10 = a4[2];
    long long v11 = a4[4];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v9;
    a3[2] = v10;
    long long v12 = a4[5];
    long long v13 = a4[6];
    long long v14 = a4[8];
    a3[7] = a4[7];
    a3[8] = v14;
    a3[5] = v12;
    a3[6] = v13;
    a4[6] = v45;
    a4[7] = v48;
    a4[8] = v51;
    a4[2] = v33;
    a4[3] = v36;
    a4[4] = v39;
    a4[5] = v42;
    __n128 result = v30;
    *a4 = v27;
    a4[1] = (__int128)v30;
    result.n128_u32[0] = *((_DWORD *)a3 + 34);
    if (result.n128_f32[0] > *((float *)a2 + 34))
    {
      long long v46 = a2[6];
      long long v49 = a2[7];
      long long v52 = a2[8];
      long long v34 = a2[2];
      long long v37 = a2[3];
      long long v40 = a2[4];
      long long v43 = a2[5];
      long long v28 = *a2;
      __n128 v31 = (__n128)a2[1];
      *a2 = *a3;
      long long v15 = a3[1];
      long long v16 = a3[2];
      long long v17 = a3[4];
      a2[3] = a3[3];
      a2[4] = v17;
      a2[1] = v15;
      a2[2] = v16;
      long long v18 = a3[5];
      long long v19 = a3[6];
      long long v20 = a3[8];
      a2[7] = a3[7];
      a2[8] = v20;
      a2[5] = v18;
      a2[6] = v19;
      a3[6] = v46;
      a3[7] = v49;
      a3[8] = v52;
      a3[2] = v34;
      a3[3] = v37;
      a3[4] = v40;
      a3[5] = v43;
      __n128 result = v31;
      *a3 = v28;
      a3[1] = (__int128)v31;
      result.n128_u32[0] = *((_DWORD *)a2 + 34);
      if (result.n128_f32[0] > a1[34])
      {
        long long v47 = *((_OWORD *)a1 + 6);
        long long v50 = *((_OWORD *)a1 + 7);
        long long v53 = *((_OWORD *)a1 + 8);
        long long v35 = *((_OWORD *)a1 + 2);
        long long v38 = *((_OWORD *)a1 + 3);
        long long v41 = *((_OWORD *)a1 + 4);
        long long v44 = *((_OWORD *)a1 + 5);
        long long v29 = *(_OWORD *)a1;
        __n128 v32 = *(__n128 *)(a1 + 4);
        *(_OWORD *)a1 = *a2;
        long long v21 = a2[1];
        long long v22 = a2[2];
        long long v23 = a2[4];
        *((_OWORD *)a1 + 3) = a2[3];
        *((_OWORD *)a1 + 4) = v23;
        *((_OWORD *)a1 + 1) = v21;
        *((_OWORD *)a1 + 2) = v22;
        long long v24 = a2[5];
        long long v25 = a2[6];
        long long v26 = a2[8];
        *((_OWORD *)a1 + 7) = a2[7];
        *((_OWORD *)a1 + 8) = v26;
        *((_OWORD *)a1 + 5) = v24;
        *((_OWORD *)a1 + 6) = v25;
        a2[6] = v47;
        a2[7] = v50;
        a2[8] = v53;
        a2[2] = v35;
        a2[3] = v38;
        a2[4] = v41;
        a2[5] = v44;
        __n128 result = v32;
        *a2 = v29;
        a2[1] = (__int128)v32;
      }
    }
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_237C73E8C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_237C740FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_237C741A8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_237C74448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_237C744EC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

int32x4_t *_ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_(uint64_t a1, int32x4_t *a2, int32x4_t *a3)
{
  int32x4_t v6 = *a2;
  unint64_t v7 = a2->i32[0];
  uint64_t v8 = 1;
  for (uint64_t i = 7; i != 21; i += 7)
  {
    int32x4_t v27 = v6;
    v7 ^= (uint64_t)*(int *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8++ & 3))) << i;
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v10) {
        unint64_t v3 = v7 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v7;
    }
    unint64_t v13 = *(int32x4_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (int j = *v13; j; int j = (int32x4_t *)j->i64[0])
      {
        unint64_t v15 = j->u64[1];
        if (v15 == v7)
        {
          uint32x4_t v16 = (uint32x4_t)vceqq_s32(j[1], v6);
          v16.i32[3] = v16.i32[2];
          if ((vminvq_u32(v16) & 0x80000000) != 0) {
            return j;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  int j = (int32x4_t *)operator new(0x20uLL);
  j->i64[0] = 0;
  j->i64[1] = v7;
  j[1] = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v7 >= v10) {
        unint64_t v3 = v7 % v10;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(int32x4_t ***)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    j->i64[0] = (uint64_t)*v24;
LABEL_40:
    *unint64_t v24 = j;
    goto LABEL_41;
  }
  j->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = j;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (j->i64[0])
  {
    unint64_t v25 = *(void *)(j->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (int32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return j;
}

void sub_237C74754(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::~__func()
{
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26EAD6608;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EAD6608;
  a2[1] = v2;
  return result;
}

float std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return *(float *)(**(void **)(a1 + 8) + 144 * *a2 + 136);
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::target_type()
{
}

void std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::~__func()
{
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26EAD6688;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EAD6688;
  a2[1] = v2;
  return result;
}

float std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  box3dIou((float32x4_t *)(**(void **)(a1 + 8) + 144 * *a2), (float32x4_t *)(**(void **)(a1 + 8) + 144 * *a3), 0, (uint64_t)v4);
  return v4[0];
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::target_type()
{
}

uint64_t std::unordered_set<SemanticLabelv5>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      std::__hash_table<SemanticLabelv5,std::hash<SemanticLabelv5>,std::equal_to<SemanticLabelv5>,std::allocator<SemanticLabelv5>>::__emplace_unique_key_args<SemanticLabelv5,SemanticLabelv5 const&>(a1, a2, a2);
      ++a2;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_237C749E0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<SemanticLabelv5,std::hash<SemanticLabelv5>,std::equal_to<SemanticLabelv5>,std::allocator<SemanticLabelv5>>::__emplace_unique_key_args<SemanticLabelv5,SemanticLabelv5 const&>(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  BOOL v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *BOOL v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    BOOL v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_237C74C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OU3DSparseSSDetector_mm()
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  v0 = @"Cabinet";
  *(void *)&long long v72 = v0;
  long long v71 = @"Refrigerator";
  *((void *)&v72 + 1) = v71;
  long long v55 = @"Shelf";
  *(void *)&long long v73 = v55;
  long long v70 = @"Stove";
  *((void *)&v73 + 1) = v70;
  uint64_t v1 = @"Bed";
  *(void *)&long long v74 = v1;
  long long v64 = @"Sink";
  *((void *)&v74 + 1) = v64;
  long long v69 = @"Washer";
  *(void *)&long long v75 = v69;
  long long v62 = @"Toilet";
  *((void *)&v75 + 1) = v62;
  uint64_t v2 = @"Bathtub";
  *(void *)&long long v76 = v2;
  long long v68 = @"Oven";
  *((void *)&v76 + 1) = v68;
  long long v67 = @"Dishwasher";
  *(void *)&long long v77 = v67;
  long long v58 = @"Fireplace";
  *((void *)&v77 + 1) = v58;
  long long v54 = @"Stool";
  *(void *)&long long v78 = v54;
  long long v60 = @"Chair";
  *((void *)&v78 + 1) = v60;
  unint64_t v3 = @"Table";
  *(void *)&long long v79 = v3;
  long long v66 = @"Screen";
  *((void *)&v79 + 1) = v66;
  uint64_t v4 = @"Sofa";
  *(void *)&long long v80 = v4;
  long long v56 = @"Stairs";
  *((void *)&v80 + 1) = v56;
  uint64_t v5 = @"Window";
  *(void *)&long long v81 = v5;
  unint64_t v6 = @"Door";
  *((void *)&v81 + 1) = v6;
  long long v53 = @"BuildInCabinet";
  *(void *)&long long v82 = v53;
  qword_26AF273A8 = 0;
  qword_26AF273B0 = 0;
  ou3dod::kObjectTypesLUT = 0;
  unint64_t v7 = (char *)operator new(0xA8uLL);
  uint64_t v8 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v7;
  qword_26AF273A8 = (uint64_t)v7;
  qword_26AF273B0 = (uint64_t)(v7 + 168);
  do
  {
    *(void *)&v7[v8] = *(id *)((char *)&v72 + v8);
    v8 += 8;
  }
  while (v8 != 168);
  qword_26AF273A8 = (uint64_t)(v7 + 168);
  for (uint64_t i = 160; i != -8; i -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  unint64_t v10 = v0;
  qword_26AF27568 = 0;
  unk_26AF27570 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  *(void *)&long long v72 = &ou3dod::kAFClassIdToObjectTypeOffline;
  BYTE8(v72) = 0;
  unint64_t v11 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v11;
  *unint64_t v11 = v10;
  qword_26AF27568 = (uint64_t)(v11 + 1);
  unk_26AF27570 = v11 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  float v12 = v10;
  *(void *)&long long v72 = v12;
  float v13 = v1;
  *((void *)&v72 + 1) = v13;
  BOOL v14 = v2;
  *(void *)&long long v73 = v14;
  unint64_t v15 = v3;
  *((void *)&v73 + 1) = v15;
  unint64_t v16 = v4;
  *(void *)&long long v74 = v16;
  qword_26AF27440 = 0;
  qword_26AF27448 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  size_t v17 = (char *)operator new(0x28uLL);
  uint64_t v18 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v17;
  qword_26AF27440 = (uint64_t)v17;
  qword_26AF27448 = (uint64_t)(v17 + 40);
  do
  {
    *(void *)&v17[v18] = *(id *)((char *)&v72 + v18);
    v18 += 8;
  }
  while (v18 != 40);
  qword_26AF27440 = (uint64_t)(v17 + 40);
  for (uint64_t j = 32; j != -8; j -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF274D0 = 0;
  unk_26AF274D8 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  unint64_t v20 = operator new(0x50uLL);
  qword_26AF274D0 = (uint64_t)(v20 + 5);
  unk_26AF274D8 = v20 + 5;
  v20[2] = xmmword_237CB5390;
  v20[3] = unk_237CB53A0;
  void v20[4] = xmmword_237CB53B0;
  *unint64_t v20 = xmmword_237CB5370;
  v20[1] = unk_237CB5380;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v20;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  unint64_t v21 = v12;
  *(void *)&long long v72 = v21;
  DWORD2(v72) = 1055286886;
  size_t v22 = v13;
  *(void *)&long long v73 = v22;
  DWORD2(v73) = 1039516303;
  uint64_t v23 = v14;
  *(void *)&long long v74 = v23;
  DWORD2(v74) = 1045220557;
  unint64_t v24 = v15;
  *(void *)&long long v75 = v24;
  DWORD2(v75) = 1050253722;
  unint64_t v25 = v16;
  *(void *)&long long v76 = v25;
  DWORD2(v76) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v72, 5);
  for (uint64_t k = 64; k != -16; k -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
  LODWORD(v72) = 0;
  *((void *)&v72 + 1) = @"Unknown";
  LODWORD(v73) = 1;
  *((void *)&v73 + 1) = *((id *)&v72 + 1);
  LODWORD(v74) = 2;
  *((void *)&v74 + 1) = *((id *)&v73 + 1);
  LODWORD(v75) = 3;
  *((void *)&v75 + 1) = *((id *)&v74 + 1);
  LODWORD(v76) = 4;
  *((void *)&v76 + 1) = *((id *)&v75 + 1);
  LODWORD(v77) = 5;
  id v27 = *((id *)&v76 + 1);
  *((void *)&v77 + 1) = v27;
  LODWORD(v78) = 6;
  long long v51 = v6;
  *((void *)&v78 + 1) = v51;
  LODWORD(v79) = 7;
  long long v50 = v5;
  *((void *)&v79 + 1) = v50;
  LODWORD(v80) = 8;
  id v28 = v27;
  *((void *)&v80 + 1) = v28;
  LODWORD(v81) = 9;
  long long v49 = v58;
  *((void *)&v81 + 1) = v49;
  LODWORD(v82) = 10;
  *((void *)&v82 + 1) = v28;
  LODWORD(v83) = 11;
  id v29 = *((id *)&v82 + 1);
  *((void *)&v83 + 1) = v29;
  LODWORD(v84) = 12;
  long long v59 = v56;
  *((void *)&v84 + 1) = v59;
  LODWORD(v85) = 13;
  long long v47 = v22;
  *((void *)&v85 + 1) = v47;
  LODWORD(v86) = 14;
  __n128 v30 = v21;
  long long v87 = v30;
  LODWORD(v88) = 15;
  long long v61 = v60;
  long long v89 = v61;
  int v90 = 16;
  long long v91 = v30;
  int v92 = 17;
  __n128 v31 = v91;
  long long v93 = v31;
  LODWORD(v94) = 18;
  long long v57 = v25;
  uint64_t v95 = v57;
  int v96 = 19;
  long long v48 = v24;
  long long v97 = v48;
  int v98 = 20;
  long long v63 = v62;
  long long v99 = v63;
  LODWORD(v100[0]) = 21;
  __n128 v32 = v64;
  v100[1] = v32;
  int v101 = 22;
  long long v65 = v23;
  float v102 = v65;
  int v103 = 23;
  id v33 = v29;
  id v104 = v33;
  LODWORD(v105[0]) = 24;
  long long v34 = v71;
  v105[1] = v34;
  int v106 = 25;
  long long v35 = v70;
  float v107 = v35;
  int v108 = 26;
  long long v36 = v69;
  int v109 = v36;
  int v110 = 27;
  long long v37 = v68;
  uint64_t v111 = v37;
  int v112 = 28;
  long long v38 = v67;
  long long v113 = v38;
  int v114 = 29;
  id v39 = v33;
  id v115 = v39;
  int v116 = 30;
  long long v40 = v31;
  int64_t v117 = v40;
  int v118 = 31;
  id v119 = v39;
  int v120 = 32;
  long long v41 = v66;
  unint64_t v121 = v41;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v72, 33);
  for (uint64_t m = 520; m != -8; m -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v82 = xmmword_237CB5460;
  long long v83 = unk_237CB5470;
  long long v84 = xmmword_237CB5480;
  long long v85 = unk_237CB5490;
  long long v78 = xmmword_237CB5420;
  long long v79 = unk_237CB5430;
  long long v80 = xmmword_237CB5440;
  long long v81 = unk_237CB5450;
  long long v74 = xmmword_237CB53E0;
  long long v75 = unk_237CB53F0;
  long long v76 = xmmword_237CB5400;
  long long v77 = unk_237CB5410;
  long long v72 = xmmword_237CB53C0;
  long long v73 = unk_237CB53D0;
  uint64_t v86 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)kSparseSSDSemanticLabels, (int *)&v72, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v72) = 0;
  *((void *)&v72 + 1) = v40;
  LODWORD(v73) = 1;
  *((void *)&v73 + 1) = v34;
  LODWORD(v74) = 2;
  *((void *)&v74 + 1) = v55;
  LODWORD(v75) = 3;
  *((void *)&v75 + 1) = v35;
  LODWORD(v76) = 4;
  *((void *)&v76 + 1) = v47;
  LODWORD(v77) = 5;
  *((void *)&v77 + 1) = v32;
  LODWORD(v78) = 6;
  *((void *)&v78 + 1) = v36;
  LODWORD(v79) = 7;
  *((void *)&v79 + 1) = v63;
  LODWORD(v80) = 8;
  *((void *)&v80 + 1) = v65;
  LODWORD(v81) = 9;
  *((void *)&v81 + 1) = v37;
  LODWORD(v82) = 10;
  *((void *)&v82 + 1) = v38;
  LODWORD(v83) = 11;
  *((void *)&v83 + 1) = v49;
  LODWORD(v84) = 12;
  *((void *)&v84 + 1) = v54;
  LODWORD(v85) = 13;
  *((void *)&v85 + 1) = v61;
  LODWORD(v86) = 14;
  long long v87 = v48;
  LODWORD(v88) = 15;
  long long v89 = v41;
  int v90 = 16;
  long long v91 = v57;
  int v92 = 17;
  long long v93 = v59;
  LODWORD(v94) = 18;
  uint64_t v95 = v50;
  int v96 = 19;
  long long v97 = v51;
  int v98 = 20;
  long long v99 = v53;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)kSparseSSDObjectLabels, (int *)&v72, 21);
  for (uint64_t n = 328; n != -8; n -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], kSparseSSDObjectLabels, &dword_237C17000);
  qword_26AF278D0 = 0;
  unk_26AF278D8 = 0;
  ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity = 0;
  long long v44 = operator new(0x14uLL);
  qword_26AF278D0 = (uint64_t)(v44 + 5);
  unk_26AF278D8 = v44 + 5;
  v44[4] = 512;
  *(_OWORD *)long long v44 = xmmword_237CB54A8;
  ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity = (uint64_t)v44;
  __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity, &dword_237C17000);
  std::string::basic_string[abi:ne180100]<0>(&v72, "sparse_voxels");
  std::string::basic_string[abi:ne180100]<0>((void *)&v73 + 1, "l0_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v75, "l0_k1_s2");
  std::string::basic_string[abi:ne180100]<0>((void *)&v76 + 1, "l0_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v78, "l1_k3_s1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v79 + 1, "l1_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(&v81, "l1_k3_s2");
  std::string::basic_string[abi:ne180100]<0>((void *)&v82 + 1, "l1_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(&v84, "l2_k3_s1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v85 + 1, "l2_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(&v88, "l2_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v91, "l2_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(&v94, "l3_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v97, "l3_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(v100, "l3_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v102, "l3_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(v105, "l4_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v107, "l4_k2_tr");
  std::unordered_set<std::string>::unordered_set((uint64_t)&ou3dod::OU3DSparseSSDetector::kInputBlobName, (unsigned __int8 *)&v72, 18);
  uint64_t v45 = 432;
  do
  {
    if (*((char *)&v72 + v45 - 1) < 0) {
      operator delete(*(void **)((char *)&v72 + v45 - 24));
    }
    v45 -= 24;
  }
  while (v45);
  __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kInputBlobName, &dword_237C17000);
  std::string::basic_string[abi:ne180100]<0>(&v72, "l0_preds_1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v73 + 1, "l0_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v75, "l1_preds_1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v76 + 1, "l1_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v78, "l2_preds_1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v79 + 1, "l2_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v81, "l3_preds_1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v82 + 1, "l3_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v84, "l4_preds_1");
  std::string::basic_string[abi:ne180100]<0>((void *)&v85 + 1, "l4_scores_1");
  std::unordered_set<std::string>::unordered_set((uint64_t)&ou3dod::OU3DSparseSSDetector::kOutputBlobName, (unsigned __int8 *)&v72, 10);
  for (iuint64_t i = 0; ii != -240; ii -= 24)
  {
    if (*((char *)&v87 + ii + 7) < 0) {
      operator delete(*(void **)((char *)&v85 + ii + 8));
    }
  }
  __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kOutputBlobName, &dword_237C17000);
}

void sub_237C75A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v33 = 0;
  while (1)
  {
    if (*(char *)(v31 + v33 + 239) < 0) {
      operator delete(*(void **)(v31 + v33 + 216));
    }
    v33 -= 24;
    if (v33 == -240) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *ou3dod::OU3DODInterface::OU3DODInterface(void *result, uint64_t *a2)
{
  void *result = &unk_26EAD5F40;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v2 = *a2;
  *a2 = 0;
  result[4] = v2;
  return result;
}

uint64_t ou3dod::OU3DODInterface::Process(OUDnnInferenceInterface **this, const OUPointCloudCpp *a2)
{
  kdebug_trace();
  OUDnnInferenceInterface::LockInputs(this[4], 0);
  (*((void (**)(OUDnnInferenceInterface **, const OUPointCloudCpp *))*this + 2))(this, a2);
  OUDnnInferenceInterface::UnlockInputs(this[4], 0);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(OUDnnInferenceInterface *))(*(void *)this[4] + 16))(this[4]);
  kdebug_trace();
  kdebug_trace();
  OUDnnInferenceInterface::LockOutputs(this[4], 1uLL);
  (*((void (**)(OUDnnInferenceInterface **))*this + 3))(this);
  OUDnnInferenceInterface::UnlockOutputs(this[4], 1uLL);
  return kdebug_trace();
}

void _GLOBAL__sub_I_OU3DODInterface_mm()
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  v0 = (void *)MEMORY[0x237E2CC70]();
  uint64_t v1 = @"Cabinet";
  unint64_t v21 = (uint64_t *)v1;
  size_t v22 = @"Refrigerator";
  uint64_t v23 = @"Shelf";
  unint64_t v24 = @"Stove";
  uint64_t v2 = @"Bed";
  unint64_t v25 = v2;
  long long v26 = @"Sink";
  id v27 = @"Washer";
  id v28 = @"Toilet";
  unint64_t v3 = @"Bathtub";
  id v29 = v3;
  __n128 v30 = @"Oven";
  uint64_t v31 = @"Dishwasher";
  __n128 v32 = @"Fireplace";
  uint64_t v33 = @"Stool";
  long long v34 = @"Chair";
  uint64_t v4 = @"Table";
  long long v35 = v4;
  long long v36 = @"Screen";
  uint64_t v5 = @"Sofa";
  long long v37 = v5;
  long long v38 = @"Stairs";
  id v39 = @"Window";
  long long v40 = @"Door";
  long long v41 = @"BuildInCabinet";
  qword_26AF273C0 = 0;
  qword_26AF273C8 = 0;
  ou3dod::kObjectTypesLUT = 0;
  unint64_t v6 = (char *)operator new(0xA8uLL);
  uint64_t v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_26AF273C0 = (uint64_t)v6;
  qword_26AF273C8 = (uint64_t)(v6 + 168);
  do
  {
    *(void *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_26AF273C0 = (uint64_t)(v6 + 168);
  for (uint64_t i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  unint64_t v9 = v1;
  qword_26AF27580 = 0;
  unk_26AF27588 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  unint64_t v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  unint64_t v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  void *v10 = v9;
  qword_26AF27580 = (uint64_t)(v10 + 1);
  unk_26AF27588 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  unint64_t v11 = v9;
  unint64_t v21 = v11;
  float v12 = v2;
  size_t v22 = v12;
  float v13 = v3;
  uint64_t v23 = v13;
  BOOL v14 = v4;
  unint64_t v24 = v14;
  unint64_t v15 = v5;
  unint64_t v25 = v15;
  qword_26AF27458 = 0;
  qword_26AF27460 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  unint64_t v16 = (char *)operator new(0x28uLL);
  uint64_t v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_26AF27458 = (uint64_t)v16;
  qword_26AF27460 = (uint64_t)(v16 + 40);
  do
  {
    *(void *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_26AF27458 = (uint64_t)(v16 + 40);
  for (uint64_t j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF274E8 = 0;
  unk_26AF274F0 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  BOOL v19 = operator new(0x50uLL);
  qword_26AF274E8 = (uint64_t)(v19 + 5);
  unk_26AF274F0 = v19 + 5;
  _OWORD v19[2] = xmmword_237CB56C0;
  v19[3] = unk_237CB56D0;
  unint64_t v19[4] = xmmword_237CB56E0;
  *BOOL v19 = xmmword_237CB56A0;
  v19[1] = unk_237CB56B0;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  unint64_t v21 = v11;
  LODWORD(v22) = 1055286886;
  uint64_t v23 = v12;
  LODWORD(v24) = 1039516303;
  unint64_t v25 = v13;
  LODWORD(v26) = 1045220557;
  id v27 = v14;
  LODWORD(v28) = 1050253722;
  id v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (uint64_t k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
}

void sub_237C762AC(_Unwind_Exception *a1)
{
  for (uint64_t i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void *GetRange@<X0>(void *result@<X0>, void *a2@<X1>, int32x2_t *a3@<X8>, float32x2_t a4@<D0>)
{
  uint64_t v4 = 0;
  char v5 = 0;
  float32x2_t v6 = 0;
  float32x2_t v7 = a4;
  do
  {
    while (*(float *)(*a2 + 4 * v4) >= 0.1)
    {
      float32x2_t v8 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)(*result + 8 * v4), 0), a4);
      float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v6), (int8x8_t)v8, (int8x8_t)v6);
      float32x2_t v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v8), (int8x8_t)v8, (int8x8_t)v7);
      char v5 = 1;
      if (v4++ == 7) {
        goto LABEL_9;
      }
    }
    ++v4;
  }
  while (v4 != 8);
  if (v5)
  {
LABEL_9:
    v10.i32[0] = vdup_lane_s32((int32x2_t)v7, 1).u32[0];
    v10.i32[1] = v6.i32[1];
    *a3 = vzip1_s32((int32x2_t)v7, (int32x2_t)v6);
    a3[1] = v10;
    char v11 = 1;
    goto LABEL_11;
  }
  char v11 = 0;
  a3->i8[0] = 0;
LABEL_11:
  a3[2].i8[0] = v11;
  return result;
}

void *FilterByCornerInView@<X0>(void *result@<X0>, void *a2@<X1>, int32x4_t *a3@<X8>, float32x2_t a4@<D0>)
{
  if (result[1] - *result != 64 || a2[1] - *a2 != 32) {
    goto LABEL_11;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  float32x2_t v6 = 0;
  *(float32x2_t *)v7.f32 = a4;
  do
  {
    if (*(float *)(*a2 + 4 * v4) >= 0.1)
    {
      ++v5;
      float32x2_t v8 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)(*result + 8 * v4), 0), a4);
      float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v6), (int8x8_t)v8, (int8x8_t)v6);
      *(int8x8_t *)v7.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, v8), (int8x8_t)v8, *(int8x8_t *)v7.f32);
    }
    ++v4;
  }
  while (v4 != 8);
  if (v5 >= 8
    && (float32x2_t v9 = vsub_f32(v6, *(float32x2_t *)v7.f32), v10 = vdiv_f32(v9, a4), v10.f32[1] >= 0.15)
    && v10.f32[0] >= 0.15)
  {
    *(float32x2_t *)&v7.u32[2] = v9;
    a3->i32[0] = v5;
    a3->u64[1] = (unint64_t)v10;
    a3[1].i64[0] = 0;
    a3[2] = vcvtq_s32_f32(v7);
    char v11 = 1;
  }
  else
  {
LABEL_11:
    char v11 = 0;
    a3->i8[0] = 0;
  }
  a3[3].i8[0] = v11;
  return result;
}

BOOL FilterByOcclusion(void *a1, void *a2, float **a3, box3d *a4, uint64_t a5)
{
  id v9 = a1;
  size_t Width = CVPixelBufferGetWidth((CVPixelBufferRef)[v9 sceneColorBuffer]);
  size_t Height = CVPixelBufferGetHeight((CVPixelBufferRef)[v9 sceneColorBuffer]);
  v12.f32[0] = (float)Width;
  v12.f32[1] = (float)Height;
  GetRange(a2, a3, &v58, v12);
  if (v60)
  {
    [v9 GetSceneRgbToDepthRatio];
    int32x2_t v14 = vcvt_s32_f32(vdiv_f32((float32x2_t)vzip1_s32(v58, v59), v13));
    int32x2_t v15 = vcvt_s32_f32(vdiv_f32((float32x2_t)vzip2_s32(v58, v59), v13));
    unint64_t v16 = *a3;
    uint64_t v17 = a3[1];
    float32x2_t v47 = v13;
    float v18 = 0.0;
    if (*a3 != v17)
    {
      do
      {
        float v19 = *v16++;
        float v18 = v18 + v19;
      }
      while (v16 != v17);
    }
    long long v55 = 0;
    long long v56 = 0;
    long long v57 = 0;
    int32x2_t v48 = v15;
    *(int32x2_t *)v49.f32 = v14;
    int32x2_t v20 = vsub_s32(v15, v14);
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v55, vmul_lane_s32(v20, v20, 1).i32[0]);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)[v9 sceneDepthBuffer]);
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)[v9 sceneDepthBuffer], 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)[v9 sceneDepthBuffer]);
    uint64_t v43 = a5;
    long long v44 = a4;
    if (v49.i32[1] >= v48.i32[1])
    {
      int v22 = 0;
      int v21 = 0;
    }
    else
    {
      int v21 = 0;
      int v22 = 0;
      float v23 = fmaxf(v18 * 0.125, 0.1);
      uint64_t v24 = v49.i32[0];
      uint64_t v25 = v49.i32[1];
      do
      {
        if ((int)v24 < v48.i32[0])
        {
          uint64_t v26 = v24;
          do
          {
            float v27 = *(float *)&BaseAddress[4 * v26 + BytesPerRow * v25];
            if (v27 > 0.1)
            {
              ++v21;
              float v50 = *(float *)&BaseAddress[4 * v26 + BytesPerRow * v25];
              if (v27 <= v23)
              {
                [v9 GetSceneCameraProjectionMatrixInVisionWorld];
                simd_float4x4 v62 = __invert_f4(v61);
                float32x4_t v28 = vaddq_f32((float32x4_t)v62.columns[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v62.columns[0], (float)(v47.f32[0] * (float)(int)v26) * v50), (float32x4_t)v62.columns[1], (float)(v47.f32[1] * (float)(int)v25) * v50), (float32x4_t)v62.columns[2], v50));
                id v29 = v56;
                if (v56 >= v57)
                {
                  float32x4_t v51 = v28;
                  uint64_t v31 = v56 - v55;
                  if ((unint64_t)(v31 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v32 = ((char *)v57 - (char *)v55) >> 3;
                  if (v32 <= v31 + 1) {
                    unint64_t v32 = v31 + 1;
                  }
                  if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v32;
                  }
                  if (v33) {
                    long long v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v57, v33);
                  }
                  else {
                    long long v34 = 0;
                  }
                  long long v35 = (float32x4_t *)&v34[16 * v31];
                  float32x4_t *v35 = v51;
                  __n128 v30 = v35 + 1;
                  long long v37 = v55;
                  long long v36 = v56;
                  if (v56 != v55)
                  {
                    do
                    {
                      float32x4_t v38 = v36[-1];
                      --v36;
                      v35[-1] = v38;
                      --v35;
                    }
                    while (v36 != v37);
                    long long v36 = v55;
                  }
                  long long v55 = v35;
                  long long v56 = v30;
                  long long v57 = (float32x4_t *)&v34[16 * v33];
                  if (v36) {
                    operator delete(v36);
                  }
                }
                else
                {
                  float32x4_t *v56 = v28;
                  __n128 v30 = v29 + 1;
                }
                long long v56 = v30;
              }
              else
              {
                ++v22;
              }
            }
            ++v26;
          }
          while (v48.i32[0] != v26);
        }
        ++v25;
      }
      while (v48.i32[1] != v25);
    }
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)[v9 sceneDepthBuffer], 1uLL);
    memset(v54, 0, sizeof(v54));
    box3dEnlarge((float32x4_t *)v44, 0.1, 0.1, 0.1, v54);
    CollectPointCloudFromBox((uint64_t *)&v55, v54, (uint64_t)&v52);
    long long v40 = v52;
    float v41 = (float)(int)(v22 + ((unint64_t)(v53 - v52) >> 4)) / (float)((float)v21 + 0.001);
    *(float *)(v43 + 20) = v41;
    BOOL v39 = v41 >= 0.35;
    if (v40)
    {
      long long v53 = v40;
      operator delete(v40);
    }
    if (v55)
    {
      long long v56 = v55;
      operator delete(v55);
    }
  }
  else
  {
    BOOL v39 = 0;
  }

  return v39;
}

void sub_237C7686C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 - 168);
  if (v4)
  {
    *(void *)(v2 - 160) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

BOOL FilterByCoverage3d(uint64_t *a1, uint64_t *a2, float32x4_t *a3, uint64_t a4)
{
  CollectPointCloudFromBox(a1, a3, (uint64_t)&__p);
  float32x4_t v7 = __p;
  if (__p == v15)
  {
    BOOL v10 = 0;
    if (!__p) {
      return v10;
    }
    goto LABEL_5;
  }
  CollectPointCloudFromBox(a2, a3, (uint64_t)&v12);
  float32x2_t v8 = v12;
  float32x4_t v7 = __p;
  float v9 = (float)(unint64_t)((v13 - v12) >> 4) / (float)(unint64_t)((v15 - (unsigned char *)__p) >> 4);
  *(float *)(a4 + 16) = v9;
  BOOL v10 = v9 > 0.4;
  if (v8)
  {
    float32x2_t v13 = v8;
    operator delete(v8);
    float32x4_t v7 = __p;
  }
  if (v7)
  {
LABEL_5:
    int32x2_t v15 = v7;
    operator delete(v7);
  }
  return v10;
}

void sub_237C76984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL FilterByCoverage3d(uint64_t *a1, _OUFrame *a2, float32x4_t *a3, uint64_t a4)
{
  WorldPCFromARFrameSceneCamera(a2, 4u, (uint64_t)__p);
  BOOL v7 = FilterByCoverage3d(a1, (uint64_t *)__p, a3, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v7;
}

void sub_237C76A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FilterByCenter(float32x4_t *a1, float32x2_t *a2, float32x4_t a3)
{
  float32x4_t v3 = vaddq_f32(a1[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), a1[1], *a2, 1), a1[2], *(float32x4_t *)a2->f32, 2));
  if (v3.f32[2] <= 0.0)
  {
    char v4 = 0;
  }
  else
  {
    a3.i64[1] = vdivq_f32(v3, (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).u64[0];
    char v4 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(a3, (float32x4_t)a3.u64[1])), 0xFuLL)));
  }
  return v4 & 1;
}

void IsObjectBoxInView(_OUFrame *a1@<X0>, box3d *a2@<X1>, simd_float4 *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v5 = a1;
  float32x2_t v6 = [(_OUFrame *)v5 sceneColorBuffer];
  size_t Width = CVPixelBufferGetWidth(v6);
  size_t Height = CVPixelBufferGetHeight(v6);
  [(_OUFrame *)v5 GetSceneCameraProjectionMatrixInVisionWorld];
  v32.columns[0] = v9;
  v32.columns[1] = v10;
  v32.columns[2] = v11;
  v32.columns[3] = v12;
  ProjectToImage(&v32, a2, v29);
  v13.f32[0] = (float)Width;
  v13.f32[1] = (float)Height;
  FilterByCornerInView(v29, __p, (int32x4_t *)&v32, v13);
  if (!v32.columns[3].i8[0]) {
    goto LABEL_13;
  }
  float32x4_t v25 = *((float32x4_t *)a2 + 6);
  float32x4_t v26 = *(float32x4_t *)a2;
  [(_OUFrame *)v5 GetSceneCameraProjectionMatrixInVisionWorld];
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  float32x4_t v15 = vmulq_f32(vaddq_f32(v26, v25), v14);
  float32x4_t v20 = vaddq_f32(v19, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v15.f32[0]), v17, *(float32x2_t *)v15.f32, 1), v18, v15, 2));
  if (v20.f32[2] <= 0.0) {
    goto LABEL_13;
  }
  unint64_t v21 = vdivq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).u64[0];
  BOOL v22 = *(float *)&v21 < 0.0 || *(float *)&v21 > (float)Width;
  if (v22 || (*((float *)&v21 + 1) >= 0.0 ? (BOOL v23 = *((float *)&v21 + 1) > (float)Height) : (BOOL v23 = 1), v23))
  {
LABEL_13:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    v27[0] = v32.columns[0];
    v27[1] = v32.columns[1];
    simd_float4 v28 = v32.columns[2];
    if (FilterByOcclusion(v5, v29, (float **)__p, a2, (uint64_t)v27))
    {
      *a3 = v28;
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
      a3->i8[0] = 0;
    }
    a3[1].i8[0] = v24;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30) {
    operator delete(v30);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_237C76C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _ZNSt3__15tupleIJNS_6vectorIDv2_fNS_9allocatorIS2_EEEENS1_IbNS3_IbEEEENS1_IfNS3_IfEEEEEED1Ev((uint64_t)va);

  _Unwind_Resume(a1);
}

void ProjectToImage(const simd::float4x4 *a1@<X0>, const box3d *a2@<X1>, void *a3@<X8>)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(v13, 8uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(v12, 8uLL, (unsigned __int8 *)__p);
  std::vector<float>::vector(__p, 8uLL);
  for (unint64_t i = 0; i != 8; ++i)
  {
    int32x4_t v7 = (int32x4_t)vaddq_f32((float32x4_t)a1->columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1->columns[0], COERCE_FLOAT(*((_OWORD *)a2 + i))), (float32x4_t)a1->columns[1], *(float32x2_t *)((char *)a2 + 16 * i), 1), (float32x4_t)a1->columns[2], *((float32x4_t *)a2 + i), 2));
    unint64_t v8 = i >> 6;
    uint64_t v9 = 1 << i;
    if (*(float *)&v7.i32[2] <= 0.0) {
      uint64_t v10 = *((void *)v12[0] + v8) | v9;
    }
    else {
      uint64_t v10 = *((void *)v12[0] + v8) & ~v9;
    }
    *((void *)v12[0] + v8) = v10;
    *((_DWORD *)__p[0] + i) = v7.i32[2];
    *((float32x2_t *)v13[0] + i) = vdiv_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2));
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv2_fNS_9allocatorIS4_EEEENS3_IbNS5_IbEEEENS3_IfNS5_IfEEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJRS7_RS9_RSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(a3, (uint64_t)v13, (uint64_t)v12, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0]) {
    operator delete(v12[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_237C76DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv2_fNS_9allocatorIS2_EEEENS1_IbNS3_IbEEEENS1_IfNS3_IfEEEEEED1Ev(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  float32x4_t v3 = *(void **)(a1 + 24);
  if (v3) {
    operator delete(v3);
  }
  char v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv2_fNS_9allocatorIS4_EEEENS3_IbNS5_IbEEEENS3_IfNS5_IfEEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJRS7_RS9_RSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::vector<BOOL>::vector(a1 + 3, a3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 6, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  return a1;
}

void sub_237C76ED8(_Unwind_Exception *exception_object)
{
  if (*v2) {
    operator delete(*v2);
  }
  char v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float32x2_t v6 = result;
    __n128 result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C76F68(_Unwind_Exception *exception_object)
{
  float32x4_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_OU3DORPreprocess_mm()
{
  v0 = (void *)MEMORY[0x237E2CC70]();
  RW_VW = xmmword_237CB4490;
  *(_OWORD *)algn_26AF277F0 = xmmword_237CB44C0;
  xmmword_26AF27800 = xmmword_237CB44A0;
  unk_26AF27810 = xmmword_237CB4480;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_1);
  RC_VC = xmmword_237CB4490;
  *(_OWORD *)algn_26AF27070 = xmmword_237CB44D0;
  xmmword_26AF27080 = xmmword_237CB44C0;
  unk_26AF27090 = xmmword_237CB4480;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_7);
  ARKit_VW_RW = xmmword_237CB44D0;
  unk_26AF26900 = xmmword_237CB44B0;
  xmmword_26AF26910 = xmmword_237CB44E0;
  unk_26AF26920 = xmmword_237CB4480;
}

uint64_t OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  float32x4_t v3 = (id *)(a1 + 8);
  *(void *)a1 = &unk_26EAD6708;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 12);
  *(void *)(a1 + 72) = *(void *)(a2 + 20);
  char v4 = (unsigned int *)(a1 + 72);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 128) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 112) = v5;
  }
  *(_DWORD *)(a1 + 136) = 0;
  id v6 = MTLCreateSystemDefaultDevice();
  id v7 = *v3;
  id *v3 = v6;

  uint64_t v8 = [*v3 newCommandQueue];
  uint64_t v9 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v8;

  uint64_t v10 = [objc_alloc(MEMORY[0x263F13240]) initWithDevice:*v3];
  simd_float4 v11 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v10;

  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  v14.i64[0] = (int)v12;
  v14.i64[1] = SHIDWORD(v12);
  float64x2_t v15 = vcvtq_f64_s64(v14);
  v14.i64[0] = (int)v13;
  v14.i64[1] = SHIDWORD(v13);
  *(float64x2_t *)(a1 + 80) = vdivq_f64(v15, vcvtq_f64_s64(v14));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  objc_msgSend(*(id *)(a1 + 48), "setScaleTransform:");
  uint64_t v16 = OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, v4, 10);
  float32x4_t v17 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v16;

  return a1;
}

void sub_237C771D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  void v16[5] = *MEMORY[0x263EF8340];
  v15[0] = *MEMORY[0x263F0EF50];
  id v6 = [NSNumber numberWithInt:*a2];
  v16[0] = v6;
  v15[1] = *MEMORY[0x263F0EDF8];
  id v7 = [NSNumber numberWithInt:a2[1]];
  uint64_t v8 = *MEMORY[0x263F0ED48];
  v16[1] = v7;
  v16[2] = &unk_26EADC938;
  uint64_t v9 = *MEMORY[0x263F0EE48];
  _OWORD v15[2] = v8;
  v15[3] = v9;
  v15[4] = *MEMORY[0x263F0EE38];
  void v16[3] = &unk_26EADC950;
  v16[4] = &unk_26EADC968;
  CFDictionaryRef v10 = [NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:5];

  IOSurfaceRef v11 = IOSurfaceCreate(v10);
  uint64_t v12 = [MEMORY[0x263F12A50] texture2DDescriptorWithPixelFormat:a3 width:(int)*a2 height:(int)a2[1] mipmapped:0];
  [v12 setUsage:3];
  uint64_t v13 = (void *)[*(id *)(a1 + 8) newTextureWithDescriptor:v12 iosurface:v11 plane:0];
  CFRelease(v11);

  return v13;
}

void sub_237C773D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::DetectEdges(id *a1, void *a2)
{
  id v3 = a2;
  (*((void (**)(id *, id))*a1 + 3))(a1, v3);
  OUCannyEdgeDetectorInterface::RescaleSourceMTLTexture(a1);
  id v4 = OUCannyEdgeDetectorInterface::DetectEdgesInternal(a1);
  (*((void (**)(id *))*a1 + 4))(a1);
  id v5 = a1[5];

  return v5;
}

void sub_237C774C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUCannyEdgeDetectorInterface::RescaleSourceMTLTexture(id *this)
{
  if (*((_DWORD *)this + 16) == *((_DWORD *)this + 18) && *((_DWORD *)this + 17) == *((_DWORD *)this + 19))
  {
    id v3 = this[3];
    id v4 = this[4];
    this[4] = v3;
  }
  else
  {
    id v6 = [this[2] commandBuffer];
    objc_msgSend(this[6], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
    [v6 commit];
    id v3 = (id)[v6 waitUntilCompleted];
    id v4 = v6;
  }
  return MEMORY[0x270F9A758](v3, v4);
}

void sub_237C7756C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::DetectEdgesInternal(id *this)
{
  uint64_t v2 = [this[2] commandBuffer];
  [this[7] encodeToCommandBuffer:v2 sourceTexture:this[4] destinationTexture:this[5]];
  [v2 commit];
  [v2 waitUntilCompleted];
  id v3 = this[5];

  return v3;
}

void sub_237C775E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::GenerateCIImage(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (void *)[objc_alloc(MEMORY[0x263F00650]) initWithMTLTexture:v2 options:0];

  return v3;
}

void sub_237C7764C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ou3dod::OU3DLShapeObjectMerger::MergeLShape(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X3>, int a4@<W4>, void *a5@<X8>)
{
  id v8 = a2;
  uint64_t v9 = a3;
  CFDictionaryRef v10 = ou3dod::HistoryMergeInfo::Get(v9);
  int v106 = ou3dod::HistoryMergeInfo::Get((ou3dod::HistoryMergeInfo *)v10);
  IOSurfaceRef v11 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    ou3dod::OU3DLShapeObjectMerger::MergeLShape((uint64_t)v10, v11);
  }
  int v109 = v8;
  int v112 = v11;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  id v119 = 0;
  int v120 = 0;
  unint64_t v121 = 0;
  int v110 = a5;
  int v108 = v9;
  if ((int)(-1227133513 * ((a1[1] - *a1) >> 5)) <= 0)
  {
    LODWORD(v105) = 0;
    int v35 = 0;
    long long v34 = 0;
    int v116 = 0;
    int64_t v117 = 0;
    int v118 = 0;
LABEL_52:
    int v104 = v35;
    uint64_t v155 = 0;
    uint64_t v156 = 0;
    float32x4_t v49 = v34;
    uint64_t v157 = 0;
    goto LABEL_53;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0xFFFFFFC000000020 * ((a1[1] - *a1) >> 5);
  do
  {
    char v14 = [(ou3dod::HistoryMergeInfo *)v9 containsObject:*(void *)(*a1 + v12 + 128)];
    uint64_t v15 = *a1;
    if (v14)
    {
      uint64_t v16 = @"Table";
      *(void *)&long long v145 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v139[0].i64[0] = (uint64_t)__p;
      v139[0].i8[8] = 0;
      float32x4_t v17 = operator new(8uLL);
      uint64_t v18 = v15 + v12;
      __p[0] = v17;
      __p[1] = v17;
      *(void *)&long long v145 = v17 + 1;
      float32x4_t v19 = v16;
      *float32x4_t v17 = v19;
      __p[1] = v17 + 1;
      LODWORD(v17) = ou3dod::IsObjectBelongToType(v18, __p);
      v139[0].i64[0] = (uint64_t)__p;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v139);

      a5 = v110;
      if (!v17) {
        goto LABEL_21;
      }
      box3dToCentroidSizeAngle((float32x4_t *)(*a1 + v12), (uint64_t *)__p);
      float v21 = *((float *)__p[0] + 3);
      float v20 = *((float *)__p[0] + 4);
      if (v20 >= 0.6 || v21 >= 0.6)
      {
        double v22 = (float)(v20 / v21);
        if (v22 < 0.9 || v22 > 1.1)
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
LABEL_21:
          __n128 v30 = (const OUBox3d *)(*a1 + v12);
          uint64_t v31 = v120;
          if ((unint64_t)v120 >= v121)
          {
            simd::float4x4 v32 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>((uint64_t *)&v119, v30);
          }
          else
          {
            OUBox3d::OUBox3d(v120, v30);
            simd::float4x4 v32 = (OUBox3d *)((char *)v31 + 224);
          }
          int v120 = v32;
          goto LABEL_25;
        }
      }
      BOOL v23 = (const OUBox3d *)(*a1 + v12);
      unint64_t v24 = v110[1];
      if (v24 >= v110[2])
      {
        uint64_t v26 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v110, v23);
      }
      else
      {
        OUBox3d::OUBox3d((OUBox3d *)v110[1], v23);
        uint64_t v26 = v24 + 224;
        v110[1] = v24 + 224;
      }
      v110[1] = v26;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      float v27 = (const OUBox3d *)(v15 + v12);
      unint64_t v28 = a5[1];
      if (v28 >= a5[2])
      {
        uint64_t v29 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a5, v27);
      }
      else
      {
        OUBox3d::OUBox3d((OUBox3d *)a5[1], v27);
        uint64_t v29 = v28 + 224;
        a5[1] = v28 + 224;
      }
      a5[1] = v29;
    }
LABEL_25:
    v12 += 224;
  }
  while (v13 != v12);
  long long v34 = v119;
  uint64_t v33 = v120;
  int v116 = 0;
  int64_t v117 = 0;
  int v118 = 0;
  uint64_t v105 = 0x6DB6DB6DB6DB6DB7 * (((char *)v120 - (char *)v119) >> 5);
  int v35 = v105;
  if (v120 == v119) {
    goto LABEL_52;
  }
  do
  {
    float32x2_t v36 = ou3dod::ComputeHeadingDirection((float32x4_t *)v34, (const box3d *)v25);
    float32x2_t v37 = v36;
    float32x4_t v38 = v117;
    if (v117 >= v118)
    {
      uint64_t v40 = ((char *)v117 - (unsigned char *)v116) >> 3;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v41 = ((char *)v118 - (unsigned char *)v116) >> 2;
      if (v41 <= v40 + 1) {
        unint64_t v41 = v40 + 1;
      }
      if ((unint64_t)((char *)v118 - (unsigned char *)v116) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v41;
      }
      if (v25) {
        uint64_t v42 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v118, v25);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (float32x2_t *)&v42[8 * v40];
      float32x2_t *v43 = v37;
      BOOL v39 = v43 + 1;
      uint64_t v45 = (char *)v116;
      long long v44 = (char *)v117;
      if (v117 != v116)
      {
        do
        {
          float32x2_t v46 = *(float32x2_t *)(v44 - 8);
          v44 -= 8;
          v43[-1] = v46;
          --v43;
        }
        while (v44 != v45);
        long long v44 = (char *)v116;
      }
      int v116 = v43;
      int64_t v117 = v39;
      int v118 = (float32x2_t *)&v42[8 * v25];
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *int64_t v117 = v36;
      BOOL v39 = v38 + 1;
    }
    int64_t v117 = v39;
    long long v34 = (OUBox3d *)((char *)v34 + 224);
  }
  while (v34 != v33);
  float32x2_t v47 = v119;
  long long v34 = v120;
  if (v119 == v120) {
    goto LABEL_52;
  }
  do
  {
    ou3dod::MaybeReorderObjectCorner(&v47->var1, (OUBox3d *)v25);
    float32x2_t v47 = (OUBox3d *)((char *)v47 + 224);
  }
  while (v47 != v34);
  int32x2_t v48 = (float32x4_t *)v119;
  long long v34 = v120;
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  int v104 = v105;
  if (v119 == v120)
  {
    float32x4_t v49 = v120;
  }
  else
  {
    do
    {
      box3dToCentroidSizeAngle(v48, (uint64_t *)__p);
      std::vector<std::vector<float>>::push_back[abi:ne180100](&v155, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v48 += 14;
    }
    while (v48 != (float32x4_t *)v34);
    long long v34 = v119;
    float32x4_t v49 = v120;
  }
LABEL_53:
  long long v113 = 0u;
  long long v114 = 0u;
  int v115 = 1065353216;
  int64_t v50 = (unint64_t)(-1227133513 * ((unint64_t)((char *)v49 - (char *)v34) >> 5)) << 32;
  float32x4_t v51 = v112;
  if (v50)
  {
    long long v52 = 0;
    uint64_t v111 = (uint64_t)v10 + 40;
    unint64_t v53 = v50 >> 32;
    if (v53 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v53;
    }
    do
    {
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      for (unint64_t i = 0; i != (char *)v54; ++i)
      {
        if (v52 != i)
        {
          v154[0] = i;
          v154[1] = v52;
          if (!std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v113, v154))
          {
            if (ou3dod::ShouldForceMerge((ou3dod *)((char *)v119 + 224 * (void)v52), (float32x4_t *)((char *)v119 + v56), v58))
            {
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
                ou3dod::OU3DLShapeObjectMerger::MergeLShape(&buf, v153, v51);
              }

              __p[0] = v52;
              __p[1] = i;
              std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v113, __p, __p);
            }
            else
            {
              float32x2_t v60 = ou3dod::ComputeHeadingDirection((float32x4_t *)v119 + 14 * (void)v52, v59);
              float32x2_t v62 = ou3dod::ComputeHeadingDirection((float32x4_t *)((char *)v119 + v56), v61);
              long long v63 = (long long *)((char *)v119 + 224 * (void)v52);
              long long v64 = v63[3];
              long long v66 = *v63;
              long long v65 = v63[1];
              long long v146 = v63[2];
              long long v147 = v64;
              *(_OWORD *)std::string __p = v66;
              long long v145 = v65;
              long long v67 = v63[7];
              long long v69 = v63[4];
              long long v68 = v63[5];
              long long v150 = v63[6];
              long long v151 = v67;
              long long v148 = v69;
              long long v149 = v68;
              float32x4_t v70 = *(float32x4_t *)((char *)&v119->var1 + v56);
              float32x4_t v71 = *(float32x4_t *)((char *)&v119->var3 + v56);
              float32x4_t v72 = *(float32x4_t *)((char *)&v119->var5.var2.var0 + v56);
              v139[2] = *(float32x4_t *)((char *)&v119->var5.var0 + v56);
              v139[3] = v72;
              v139[0] = v70;
              v139[1] = v71;
              long long v73 = *(_OWORD *)((char *)&v119->var6.var1 + v56);
              long long v74 = *(_OWORD *)((char *)&v119->var7 + v56);
              long long v75 = *(_OWORD *)((char *)&v119[1].var3 + v56);
              long long v142 = *(_OWORD *)((char *)&v119[1].var1 + v56);
              long long v143 = v75;
              long long v140 = v73;
              long long v141 = v74;
              long long v138 = 0u;
              memset(v137, 0, sizeof(v137));
              box3dIou((float32x4_t *)__p, v139, 0, (uint64_t)v137);
              long long v76 = v119;
              long long v77 = @"Table";
              *(void *)&long long v130 = 0;
              float32x4_t v129 = 0uLL;
              v128[0].i64[0] = (uint64_t)&v129;
              v128[0].i8[8] = 0;
              long long v78 = operator new(8uLL);
              v129.i64[0] = (uint64_t)v78;
              v129.i64[1] = (uint64_t)v78;
              *(void *)&long long v130 = v78 + 1;
              long long v79 = v77;
              *long long v78 = v79;
              v129.i64[1] = (uint64_t)(v78 + 1);
              LODWORD(v78) = ou3dod::IsObjectBelongToType((uint64_t)v76 + 224 * (void)v52, &v129);
              v128[0].i64[0] = (uint64_t)&v129;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);

              if (v78) {
                float v80 = 0.15;
              }
              else {
                float v80 = 0.3;
              }
              long long v81 = v119;
              long long v82 = v79;
              *(void *)&long long v130 = 0;
              float32x4_t v129 = 0uLL;
              v128[0].i64[0] = (uint64_t)&v129;
              v128[0].i8[8] = 0;
              long long v83 = operator new(8uLL);
              v129.i64[0] = (uint64_t)v83;
              v129.i64[1] = (uint64_t)v83;
              *(void *)&long long v130 = v83 + 1;
              long long v84 = v82;
              *long long v83 = v84;
              v129.i64[1] = (uint64_t)(v83 + 1);
              LODWORD(v83) = ou3dod::IsObjectBelongToType((uint64_t)v81 + 224 * (void)v52, &v129);
              v128[0].i64[0] = (uint64_t)&v129;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);

              if (v83) {
                float v85 = 0.15;
              }
              else {
                float v85 = 0.1;
              }
              long long v135 = 0u;
              long long v136 = 0u;
              long long v133 = 0u;
              long long v134 = 0u;
              long long v131 = 0u;
              long long v132 = 0u;
              float32x4_t v129 = 0u;
              long long v130 = 0u;
              box3dEnlarge((float32x4_t *)__p, v80, v85, 0.0, &v129);
              float32x4_t v51 = v112;
              memset(v128, 0, sizeof(v128));
              box3dEnlarge(v139, v80, v85, 0.0, v128);
              memset(v127, 0, sizeof(v127));
              box3dIou(&v129, v128, 0, (uint64_t)v127);
              float v86 = *(float *)(*(void *)(v155 + 24 * (void)v52) + 8);
              float v87 = *(float *)(*(void *)(v155 + v55) + 8);
              float v88 = *(float *)v127;
              float v89 = *((float *)&v138 + 1);
              BOOL v91 = ([*((id *)&v119[1].var5.var0 + 28 * (void)v52) isEqualToString:v84] & 1) == 0
                 && ![*((id *)&v119[1].var5.var0 + 28 * (void)v52) isEqualToString:@"Cabinet"]|| vabds_f32(*((float *)&v148 + 2), *((float *)&v140 + 2)) < 0.2;
              BOOL IsBoxSurfaceAttached = ou3dod::IsBoxSurfaceAttached((float32x4_t *)v119 + 14 * (void)v52, (const box3d *)((char *)v119 + v56), v90);
              BOOL v93 = fabsf(vaddv_f32(vmul_f32(v60, v62))) >= 0.173;
              if (vabds_f32(v86, v87) >= 0.7) {
                BOOL v93 = 1;
              }
              if (v88 <= 0.0) {
                BOOL v93 = 1;
              }
              if (v89 > 0.6) {
                BOOL v93 = 1;
              }
              if (!v93 && v91 && !IsBoxSurfaceAttached)
              {
                v123[0] = v52;
                v123[1] = i;
                std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v113, v123, v123);
                id v94 = [*((id *)&v119[1].var5.var2.var0 + 28 * (void)v52) UUIDString];
                v158[0] = (long long *)[v94 UTF8String];
                id v95 = [*(id *)((char *)&v119[1].var5.var2.var0 + v56) UUIDString];
                uint64_t v122 = (char *)[v95 UTF8String];
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v123, (char **)v158, &v122);

                v158[0] = (long long *)v123;
                std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(v111, (unsigned __int8 *)v123, (uint64_t)&std::piecewise_construct, v158)[64] = 0;
                if (v126 < 0) {
                  operator delete(v125);
                }
                if (v124 < 0) {
                  operator delete(v123[0]);
                }
              }
            }
          }
        }
        v56 += 224;
        v55 += 24;
      }
      long long v52 = (char *)v52 + 1;
    }
    while (v52 != (void *)v54);
  }
  __p[0] = &v155;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG)) {
    ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape((uint64_t)&v113, v51);
  }

  v139[0].i8[0] = 0;
  std::vector<BOOL>::vector(__p, (int)v105, (unsigned __int8 *)v139);
  for (uint64_t j = (void *)v114; j; uint64_t j = (void *)*j)
    ou3dod::LShapeBeautification(v110, j[2], j[3], v109, a4, (uint64_t *)&v119, __p, v106);
  if (v104 >= 1)
  {
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    do
    {
      ou3dod::MaybeReorderBackObjectCorner((float32x4_t *)((char *)v119 + v97), *(float32x2_t *)((char *)v116 + 8 * v98++));
      v97 += 224;
    }
    while (v105 != v98);
    uint64_t v99 = 0;
    unint64_t v100 = 0;
    do
    {
      if (((*(void *)((char *)__p[0] + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
      {
        int v101 = (OUBox3d *)((char *)v119 + v99);
        unint64_t v102 = v110[1];
        if (v102 >= v110[2])
        {
          uint64_t v103 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v110, v101);
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v110[1], v101);
          uint64_t v103 = v102 + 224;
          v110[1] = v102 + 224;
        }
        v110[1] = v103;
      }
      ++v100;
      v99 += 224;
    }
    while (v105 != v100);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v113);
  if (v116)
  {
    int64_t v117 = (float32x2_t *)v116;
    operator delete(v116);
  }
  __p[0] = &v119;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_237C78158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x2F0] = (unint64_t)&a33;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = a17;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);

  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DLShapeObjectMerger::GetLShapeMergeInfo(ou3dod::OU3DLShapeObjectMerger *this)
{
  return (uint64_t)ou3dod::HistoryMergeInfo::Get(this) + 40;
}

void _GLOBAL__sub_I_OU3DLShapeObjectMerger_mm()
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = @"Unknown";
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  float v20 = @"Door";
  *((void *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  float32x4_t v19 = @"Window";
  *((void *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  float32x4_t v17 = @"Fireplace";
  *((void *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  uint64_t v18 = @"Stairs";
  *((void *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  unint64_t v13 = @"Bed";
  *((void *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  float32x2_t v36 = @"Cabinet";
  int v37 = 15;
  uint64_t v16 = @"Chair";
  float32x4_t v38 = v16;
  int v39 = 16;
  uint64_t v40 = v36;
  int v41 = 17;
  uint64_t v42 = v40;
  int v43 = 18;
  uint64_t v15 = @"Sofa";
  long long v44 = v15;
  int v45 = 19;
  char v14 = @"Table";
  float32x2_t v46 = v14;
  int v47 = 20;
  uint64_t v12 = @"Toilet";
  int32x2_t v48 = v12;
  int v49 = 21;
  v0 = @"Sink";
  int64_t v50 = v0;
  int v51 = 22;
  IOSurfaceRef v11 = @"Bathtub";
  long long v52 = v11;
  int v53 = 23;
  id v54 = *((id *)&v32 + 1);
  int v55 = 24;
  uint64_t v1 = @"Refrigerator";
  uint64_t v56 = v1;
  int v57 = 25;
  id v2 = @"Stove";
  int32x2_t v58 = v2;
  int v59 = 26;
  id v3 = @"Washer";
  float32x2_t v60 = v3;
  int v61 = 27;
  id v4 = @"Oven";
  float32x2_t v62 = v4;
  int v63 = 28;
  id v5 = @"Dishwasher";
  long long v64 = v5;
  int v65 = 29;
  id v66 = v54;
  int v67 = 30;
  id v6 = v42;
  long long v68 = v6;
  int v69 = 31;
  id v70 = v66;
  int v71 = 32;
  id v7 = @"Screen";
  float32x4_t v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v31 = xmmword_237CB5860;
  long long v32 = unk_237CB5870;
  long long v33 = xmmword_237CB5880;
  long long v34 = unk_237CB5890;
  long long v27 = xmmword_237CB5820;
  long long v28 = unk_237CB5830;
  long long v29 = xmmword_237CB5840;
  long long v30 = unk_237CB5850;
  long long v23 = xmmword_237CB57E0;
  long long v24 = unk_237CB57F0;
  long long v25 = xmmword_237CB5800;
  long long v26 = unk_237CB5810;
  long long v21 = xmmword_237CB57C0;
  long long v22 = unk_237CB57D0;
  uint64_t v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v21) = 0;
  *((void *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((void *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((void *)&v23 + 1) = @"Shelf";
  LODWORD(v24) = 3;
  *((void *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((void *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((void *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((void *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((void *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((void *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((void *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((void *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((void *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((void *)&v33 + 1) = @"Stool";
  LODWORD(v34) = 13;
  *((void *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  float32x2_t v36 = v14;
  int v37 = 15;
  float32x4_t v38 = v7;
  int v39 = 16;
  uint64_t v40 = v15;
  int v41 = 17;
  uint64_t v42 = v18;
  int v43 = 18;
  long long v44 = v19;
  int v45 = 19;
  float32x2_t v46 = v20;
  int v47 = 20;
  int32x2_t v48 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
}

void sub_237C789FC(_Unwind_Exception *a1)
{
  for (uint64_t i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_237C78E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C79110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::~pair(uint64_t a1)
{
  return a1;
}

uint64_t std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

void ou3dor::OU3DObjectRepresentation::OU3DObjectRepresentation(ou3dor::OU3DObjectRepresentation *this, int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100]((uint64_t *)this + 2, (uint64_t)&ou3dor::k3DORTargetClasses);
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 80) = 0;
  *((_OWORD *)this + 4) = 0u;
  utils::OUImageUtils::OUImageUtils((ou3dor::OU3DObjectRepresentation *)((char *)this + 96));
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_237C79430(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;
  MEMORY[0x237E2C510](v7, 0x10F1C404C2F8F17);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v5);
  utils::OUImageUtils::~OUImageUtils(v4);

  std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100](v3, 0);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v2, (void *)v1[3]);
  uint64_t v9 = v1[1];
  v1[1] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v1;
  uint64_t *v1 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(a1);
}

void sub_237C79548()
{
}

uint64_t ou3dor::OU3DObjectRepresentation::InitRotater(ou3dor::OU3DObjectRepresentation *this, CVPixelBufferRef pixelBuffer)
{
  if (!*((unsigned char *)this + 80))
  {
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    id v4 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 90, PixelFormatType, 224.0, 224.0);
    uint64_t v5 = (void *)*((void *)this + 7);
    *((void *)this + 7) = v4;

    id v6 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 180, PixelFormatType, 224.0, 224.0);
    uint64_t v7 = (void *)*((void *)this + 8);
    *((void *)this + 8) = v6;

    id v8 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 270, PixelFormatType, 224.0, 224.0);
    uint64_t v9 = (void *)*((void *)this + 9);
    *((void *)this + 9) = v8;

    *((unsigned char *)this + 80) = 1;
  }
  return 1;
}

BOOL ou3dor::OU3DObjectRepresentation::InitRotater(ou3dor::OU3DObjectRepresentation *this, _OUFrame *a2)
{
  id v3 = a2;
  id v4 = [(_OUFrame *)v3 GetSceneColorBufferBGRA];
  uint64_t v5 = v4;
  if (v4 && !*((unsigned char *)this + 80))
  {
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    size_t Width = CVPixelBufferGetWidth(v5);
    size_t Height = CVPixelBufferGetHeight(v5);
    id v9 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 90, PixelFormatType, (float)Height, (float)Width);
    uint64_t v10 = (void *)*((void *)this + 7);
    *((void *)this + 7) = v9;

    id v11 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 180, PixelFormatType, (float)Width, (float)Height);
    uint64_t v12 = (void *)*((void *)this + 8);
    *((void *)this + 8) = v11;

    id v13 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 270, PixelFormatType, (float)Height, (float)Width);
    char v14 = (void *)*((void *)this + 9);
    *((void *)this + 9) = v13;

    *((unsigned char *)this + 80) = 1;
  }

  return v5 != 0;
}

void sub_237C7974C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CVBuffer *ou3dor::OU3DObjectRepresentation::RotateImage(ou3dor::OU3DObjectRepresentation *this, _OUFrame *a2, __CVBuffer *a3)
{
  uint64_t v5 = a2;
  id v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    ou3dor::OU3DObjectRepresentation::RotateImage();
  }

  switch([(_OUFrame *)v5 deviceOrientation])
  {
    case 1:
      uint64_t v7 = (id *)((char *)this + 56);
      goto LABEL_10;
    case 2:
      uint64_t v7 = (id *)((char *)this + 72);
      goto LABEL_10;
    case 3:
      goto LABEL_14;
    case 4:
      uint64_t v7 = (id *)((char *)this + 64);
LABEL_10:
      id v8 = *v7;
      a3 = (__CVBuffer *)[v8 rotateImage:a3];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "Generating up-right over wide camera image.", v10, 2u);
      }

      break;
    default:
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        ou3dor::OU3DObjectRepresentation::RotateImage();
      }
      a3 = 0;
      id v8 = v6;
      break;
  }

LABEL_14:
  return a3;
}

void sub_237C7989C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AddObjects2DFeatures(ou3dor::OU3DObjectRepresentation *a1, void *a2, void *a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v4 = a2;
  id v50 = a3;
  id v54 = v4;
  if (!v4 || ([(_OUFrame *)v4 camera], (uint64_t v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_46:
    obuint64_t j = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DObjectRepresentation::AddObjects2DFeatures();
    }
    goto LABEL_48;
  }
  id v6 = [(_OUFrame *)v4 sceneCamera];
  if (!v6 || ![(_OUFrame *)v4 sceneColorBuffer])
  {

    goto LABEL_46;
  }
  uint64_t v7 = [(_OUFrame *)v4 sceneDepthBuffer];

  if (!v7) {
    goto LABEL_46;
  }
  if ([v50 count] || *(_DWORD *)OUVizTool::Get(0))
  {
    id v8 = [(_OUFrame *)v54 GetSceneColorBufferBGRA];
    id v9 = (OUVizTool *)OUVizTool::Get(v8);
    OUVizTool::SaveARFrameImage(v9, v8);
    CVPixelBufferRef pixelBuffer = v8;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id v10 = v50;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v76 objects:v89 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v77;
      id v13 = (void *)((char *)a1 + 128);
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v77 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v76 + 1) + 8 * i);
          uint64_t v16 = [v15 identifier];
          id v17 = [v16 UUIDString];
          std::string::basic_string[abi:ne180100]<0>(&v57, (char *)[v17 UTF8String]);

          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v13, (unsigned __int8 *)&v57))
          {
            uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v13, (unsigned __int8 *)&v57);
            if (!v18) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            uint64_t v73 = 0;
            long long v74 = 0;
            uint64_t v75 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v73, *((const void **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 2);
            v80[1] = 0;
            v80[0] = 0;
            *(void *)&long long v81 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v80, v73, (uint64_t)v74, (v74 - (unsigned char *)v73) >> 2);
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v61 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v80[0], (uint64_t)v80[1], ((char *)v80[1] - (char *)v80[0]) >> 2);
            float32x4_t v19 = [MEMORY[0x263EFF980] arrayWithCapacity:((char *)__p[1] - (char *)__p[0]) >> 2];
            long long v21 = __p[0];
            if (__p[1] != __p[0])
            {
              unint64_t v22 = 0;
              do
              {
                LODWORD(v20) = v21[v22];
                long long v23 = [NSNumber numberWithFloat:v20];
                [v19 addObject:v23];

                ++v22;
                long long v21 = __p[0];
              }
              while (v22 < ((char *)__p[1] - (char *)__p[0]) >> 2);
            }
            long long v24 = (void *)[v19 copy];

            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v80[0])
            {
              v80[1] = v80[0];
              operator delete(v80[0]);
            }
            if (v73)
            {
              long long v74 = v73;
              operator delete(v73);
            }
            [v15 updateObjectEmbedding2d:v24];
          }
          if (v58 < 0) {
            operator delete(v57);
          }
        }
        uint64_t v11 = [v10 countByEnumeratingWithState:&v76 objects:v89 count:16];
      }
      while (v11);
    }

    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    obuint64_t j = v10;
    uint64_t v25 = [obj countByEnumeratingWithState:&v69 objects:v88 count:16];
    if (v25)
    {
      uint64_t v56 = *(void *)v70;
      int v53 = (void **)((char *)a1 + 96);
      int v49 = (char *)a1 + 128;
      *(void *)&long long v26 = 138412802;
      long long v48 = v26;
      do
      {
        for (uint64_t j = 0; j != v25; ++j)
        {
          if (*(void *)v70 != v56) {
            objc_enumerationMutation(obj);
          }
          long long v28 = *(OU3DObject **)(*((void *)&v69 + 1) + 8 * j);
          long long v68 = [(OU3DObject *)v28 type];
          BOOL v29 = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>((uint64_t)a1 + 16, &v68) == 0;

          if (!v29)
          {
            long long v30 = [(OU3DObject *)v28 boxesDict];
            long long v31 = [v30 objectForKey:@"rawdetection"];
            BOOL v32 = v31 == 0;

            if (!v32)
            {
              long long v66 = 0u;
              long long v67 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              *(_OWORD *)std::string __p = 0u;
              long long v61 = 0u;
              long long v33 = [(OU3DObject *)v28 boxesDict];
              long long v34 = [v33 objectForKeyedSubscript:@"rawdetection"];
              box3dFromNSArray(v34, (uint64_t)__p);

              box3dEnlarge((float32x4_t *)__p, 0.1, 0.1, 0.1, v80);
              long long v64 = v84;
              long long v65 = v85;
              long long v66 = v86;
              long long v67 = v87;
              *(_OWORD *)std::string __p = *(_OWORD *)v80;
              long long v61 = v81;
              long long v62 = v82;
              long long v63 = v83;
              IsObjectBoxInView(v54, (box3d *)__p, (simd_float4 *)v80);
              if ((_BYTE)v81)
              {
                *(int32x2_t *)v36.i8 = ou3dor::OU3DObjectRepresentation::MaybeEnlargeCropImageSize(v35, pixelBuffer, (int32x2_t *)v80);
                int v37 = utils::OUImageUtils::SquareCropImage(v53, pixelBuffer, 0x100u, *(double *)v36.i64, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
                if (v38)
                {
                  int v39 = v37;
                  uint64_t v40 = utils::OUImageUtils::CropImage(v53, v37, COERCE_DOUBLE(0x1000000010), COERCE_DOUBLE(0xE0000000E0));
                  if (v41)
                  {
                    uint64_t v42 = v40;
                    ou3dor::OU3DObjectRepresentation::InitRotater(a1, v40);
                    int v43 = ou3dor::OU3DObjectRepresentation::RotateImage(a1, v54, v42);
                    if (v43)
                    {
                      long long v44 = [(OU3DObject *)v28 identifier];
                      id v45 = [v44 UUIDString];
                      std::string::basic_string[abi:ne180100]<0>(&v59, (char *)[v45 UTF8String]);

                      int v47 = (OUVizTool *)OUVizTool::Get(v46);
                      OUVizTool::SaveObjectImageCrop(v47, v28, v43);
                      ou3dor::OU3DOROnlineEspressoV2::SetInput(*(ou3dor::OU3DOROnlineEspressoV2 **)a1, v43);
                    }
                    CVPixelBufferRelease(v39);
                    CVPixelBufferRelease(v42);
                  }
                }
              }
            }
          }
        }
        uint64_t v25 = [obj countByEnumeratingWithState:&v69 objects:v88 count:16];
      }
      while (v25);
    }
LABEL_48:
  }
}

void sub_237C7A1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

int32x2_t ou3dor::OU3DObjectRepresentation::MaybeEnlargeCropImageSize(int a1, CVPixelBufferRef pixelBuffer, int32x2_t *a3)
{
  int Width = CVPixelBufferGetWidth(pixelBuffer);
  CVPixelBufferGetHeight(pixelBuffer);
  return vmax_s32(vsub_s32(*a3, vdup_n_s32((int)(float)((float)((float)Width * 0.0039062) * 5.0))), 0);
}

void ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(uint64_t a1, void *a2, void *a3)
{
  *(void *)((char *)&v83[2] + 4) = *MEMORY[0x263EF8340];
  int v55 = a2;
  id v57 = a3;
  if ([v57 count] && -[OUPointCloud count](v55, "count"))
  {
    id v4 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "[OR] Offline prediction starts.", (uint8_t *)buf, 2u);
    }

    if (*(void *)(a1 + 48))
    {
      long long v74 = 0;
      uint64_t v73 = 0;
      uint64_t v75 = 0;
      boxesFromObjects(v57, @"rawdetection", (char **)&v73, v72);
      if ((int)((unint64_t)(v74 - (unsigned char *)v73) >> 2) >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v56 = ((unint64_t)(v74 - (unsigned char *)v73) >> 2);
        while (1)
        {
          id v6 = [v57 objectAtIndexedSubscript:*((int *)v73 + v5)];
          long long v71 = [v6 type];
          BOOL v7 = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>(a1 + 16, &v71) == 0;

          if (v7)
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
            {
              int v49 = [v6 type];
              ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(v49, v82, v83, v4);
            }
            goto LABEL_69;
          }
          id v8 = [v6 boxesDict];
          id v9 = [v8 objectForKey:@"rawdetection"];
          BOOL v10 = v9 == 0;

          if (v10) {
            break;
          }
          uint64_t v11 = [v6 embedding2d];
          if (!v11
            || ([v6 embedding2d],
                uint64_t v12 = objc_claimAutoreleasedReturnValue(),
                BOOL v13 = [v12 count] == 0,
                v12,
                v11,
                v13))
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
            {
              int v51 = [v6 type];
              long long v52 = [v6 identifier];
              buf[0].i32[0] = 138412546;
              *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v51;
              buf[0].i16[6] = 2112;
              *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v52;
              _os_log_debug_impl(&dword_237C17000, v4, OS_LOG_TYPE_DEBUG, "[OR] The %@ has no online embedding: %@", (uint8_t *)buf, 0x16u);
            }
LABEL_69:

            goto LABEL_82;
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            char v14 = [v6 type];
            uint64_t v15 = [v6 identifier];
            buf[0].i32[0] = 138412546;
            *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v14;
            buf[0].i16[6] = 2112;
            *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v15;
            _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "😁 [OR] Offline 3DOR runs on %@ of UUID %@.", (uint8_t *)buf, 0x16u);
          }
          uint64_t v16 = [v6 embedding2d];
          id v17 = [v16 objectAtIndexedSubscript:0];
          vectorFromNSArray(v17, v70);

          memset(buf, 0, sizeof(buf));
          uint64_t v18 = [v6 boxesDict];
          float32x4_t v19 = [v18 objectForKey:@"rawdetection"];
          box3dFromNSArray(v19, (uint64_t)buf);

          memset(v69, 0, sizeof(v69));
          box3dEnlarge(buf, 0.1, 0.1, 0.1, v69);
          CollectPointCloudFromBox(v55, v69, v66);
          FarthestPointSample((uint64_t *)v66, v67, v68, 1024, (uint64_t)v64, v20);
          if (v65)
          {
            long long v21 = (OUVizTool *)NormalizePointCloud(v64, (uint64_t)v62);
            if (v63)
            {
              unint64_t v22 = (OUVizTool *)OUVizTool::Get(v21);
              if (!v63 || (OUVizTool::SaveObjectPointCloud(v22, v6, (uint64_t)v62), !v63)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              if (ou3dor::OU3DOROfflineEspressoV2::SetInputs(*(void *)(a1 + 8)))
              {
                ou3dor::OU3DOREspressoV2Interface::Inference(*(ou3dor::OU3DOREspressoV2Interface **)(a1 + 8));
                ou3dor::OU3DOROfflineEspressoV2::GetOutput(*(void *)(a1 + 8), __p);
                if ((_BYTE)v78)
                {
                  if (*(void *)__p)
                  {
                    *(void *)&__p[8] = *(void *)__p;
                    operator delete(*(void **)__p);
                  }
                  long long v23 = *(OU3DORIDTree::Node ***)(a1 + 48);
                  ou3dor::OU3DOROfflineEspressoV2::GetOutput(*(void *)(a1 + 8), __p);
                  if (!(_BYTE)v78) {
                    std::__throw_bad_optional_access[abi:ne180100]();
                  }
                  id v24 = [v6 type];
                  std::string::basic_string[abi:ne180100]<0>(v58, (char *)[v24 UTF8String]);
                  ou3dor::OU3DORParser::ParseNetworkOutput(v23, __p, (unsigned __int8 **)v58, (uint64_t *)&v60);
                  if (v59 < 0) {
                    operator delete(v58[0]);
                  }

                  if ((_BYTE)v78 && *(void *)__p)
                  {
                    *(void *)&__p[8] = *(void *)__p;
                    operator delete(*(void **)__p);
                  }
                  *(_DWORD *)std::string __p = 33;
                  uint64_t v25 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
                  if (!v25) {
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  }
                  id v53 = (id)v25[3];
                  long long v26 = v61;
                  if (v60 != v61)
                  {
                    long long v27 = v60 + 6;
                    do
                    {
                      long long v28 = [v6 type];
                      BOOL v29 = v27 - 6;
                      if (![v28 isEqualToString:@"Table"]) {
                        goto LABEL_42;
                      }
                      uint64_t v30 = *((unsigned __int8 *)v27 - 25);
                      int v31 = (char)v30;
                      if ((v30 & 0x80u) != 0) {
                        uint64_t v30 = *(v27 - 5);
                      }
                      if (v30 == 11
                        && (v31 >= 0 ? (BOOL v32 = v27 - 6) : (BOOL v32 = (uint64_t *)*v29),
                            (uint64_t v33 = *v32, v34 = *(uint64_t *)((char *)v32 + 3), v33 == 0x68735F656C626174)
                          ? (BOOL v35 = v34 == 0x65706168735F656CLL)
                          : (BOOL v35 = 0),
                            v35))
                      {
                        int v43 = [v6 parts];
                        long long v44 = [v43 objectForKey:v53];
                        BOOL v45 = v44 == 0;

                        if (!v45)
                        {
                          char v41 = v4;
                          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
                          {
                            uint64_t v46 = [v6 type];
                            int v47 = (void *)v46;
                            if (*((char *)v27 - 25) < 0) {
                              BOOL v29 = (uint64_t *)*v29;
                            }
                            long long v48 = v27;
                            if (*((char *)v27 + 23) < 0) {
                              long long v48 = (uint64_t *)*v27;
                            }
                            *(_DWORD *)std::string __p = 138412802;
                            *(void *)&__p[4] = v46;
                            *(_WORD *)&__p[12] = 2080;
                            *(void *)&__p[14] = v29;
                            __int16 v77 = 2080;
                            long long v78 = v48;
                            _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "😄 [OR] Offline 3DOR runs on %@, and predict it's with attribute name:%s parts: %s not added due to L shape already detected.", __p, 0x20u);

                            char v41 = v4;
                          }
                          goto LABEL_52;
                        }
                      }
                      else
                      {
LABEL_42:
                      }
                      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v36 = [v6 type];
                        int v37 = (void *)v36;
                        if (*((char *)v27 - 25) < 0) {
                          BOOL v29 = (uint64_t *)*v29;
                        }
                        char v38 = v27;
                        if (*((char *)v27 + 23) < 0) {
                          char v38 = (uint64_t *)*v27;
                        }
                        *(_DWORD *)std::string __p = 138412802;
                        *(void *)&__p[4] = v36;
                        *(_WORD *)&__p[12] = 2080;
                        *(void *)&__p[14] = v29;
                        __int16 v77 = 2080;
                        long long v78 = v38;
                        _os_log_impl(&dword_237C17000, v4, OS_LOG_TYPE_INFO, "😄 [OR] Offline 3DOR runs on %@, and predict it's with attribute name:%s parts: %s.", __p, 0x20u);
                      }
                      id v39 = [NSString alloc];
                      uint64_t v40 = v27;
                      if (*((char *)v27 + 23) < 0) {
                        uint64_t v40 = (uint64_t *)*v27;
                      }
                      char v41 = [v39 initWithUTF8String:v40];
                      [v6 addObjectPartAttribute:v41];
LABEL_52:

                      uint64_t v42 = v27 + 4;
                      v27 += 10;
                    }
                    while (v42 != v26);
                  }

                  *(void *)std::string __p = &v60;
                  std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                }
              }
              if (v63 && v62[0])
              {
                v62[1] = v62[0];
                operator delete(v62[0]);
              }
            }
          }
          _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev((uint64_t)v64);
          if (v68[0])
          {
            v68[1] = v68[0];
            operator delete(v68[0]);
          }
          if (v67[0])
          {
            v67[1] = v67[0];
            operator delete(v67[0]);
          }
          if (v66[0])
          {
            v66[1] = v66[0];
            operator delete(v66[0]);
          }
          if (v70[0])
          {
            v70[1] = v70[0];
            operator delete(v70[0]);
          }
LABEL_82:

          if (++v5 == v56) {
            goto LABEL_83;
          }
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          id v50 = [v6 type];
          ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(v50, v80, &v81, v4);
        }
        goto LABEL_69;
      }
LABEL_83:
      ou3dor::OU3DObjectRepresentation::PostProcess(a1, v57);
      buf[0].i64[0] = (uint64_t)v72;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v73)
      {
        long long v74 = v73;
        operator delete(v73);
      }
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        ou3dor::OU3DObjectRepresentation::AddObjectRepresentation();
      }
    }
  }
}

void sub_237C7ADF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,int a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  STACK[0x260] = (unint64_t)&a33;
  std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (a39 && __p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev((uint64_t)&a41);
  _ZNSt3__15tupleIJNS_6vectorIDv3_fNS_9allocatorIS2_EEEENS1_IDv4_hNS3_IS6_EEEENS1_IDv4_tNS3_IS9_EEEEEED1Ev((uint64_t)&a51);
  id v54 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v54;
    operator delete(v54);
  }

  STACK[0x280] = (unint64_t)&STACK[0x230];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  int v55 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v55;
    operator delete(v55);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(void *a1, int *a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 3;
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv3_fNS_9allocatorIS2_EEEENS1_IDv4_hNS3_IS6_EEEENS1_IDv4_tNS3_IS9_EEEEEED1Ev(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  id v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void ou3dor::OU3DObjectRepresentation::PostProcess(uint64_t a1, void *a2)
{
  id v7 = a2;
  ou3dor::OU3DObjectRepresentation::LshapeSofaPostProcess(a1, v7);
  ou3dor::OU3DObjectRepresentation::AssignCabinetShelfPartAttribute(v3, v7);
  ou3dor::OU3DObjectRepresentation::AssignSingleSeatedSofaAttribute(v4, v7);
  ou3dor::OU3DObjectRepresentation::AssignChairTypeStoolAttribute(a1, v7);
  ou3dor::OU3DObjectRepresentation::RegulateTableTypeDeskAttribute(v5, v7);
  ou3dor::OU3DObjectRepresentation::RegulateTableTypeCoffeeAttribute(a1, v7);
  ou3dor::OU3DObjectRepresentation::ConflictAttributeSetMapping(v6, v7);
}

void sub_237C7B12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignCabinetShelfPartAttribute(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v14 = a2;
  int v21 = 101;
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v21);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v16 = (id)v2[3];
  int v21 = 102;
  uint64_t v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v21);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v15 = (id)v3[3];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = v14;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v9 = [v8 type];
        int v10 = [v9 isEqualToString:@"Cabinet"];

        if (v10)
        {
          [v8 setType:@"Storage"];
          id v11 = v16;
        }
        else
        {
          uint64_t v12 = [v8 type];
          int v13 = [v12 isEqualToString:@"Shelf"];

          if (!v13) {
            continue;
          }
          [v8 setType:@"Storage"];
          id v11 = v15;
        }
        [v8 addObjectPartAttribute:v11];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v5);
  }
}

void sub_237C7B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignSingleSeatedSofaAttribute(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  boxesFromObjects(v2, @"rawdetection", (char **)&v24, v23);
  id v4 = v24;
  uint64_t v3 = v25;
  LODWORD(__p[0]) = 16;
  uint64_t v5 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v6 = (id)v5[3];
  LODWORD(__p[0]) = 18;
  id v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v8 = v3 - v4;
  id v21 = (id)v7[3];
  if ((int)(v8 >> 2) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v8 >> 2);
    do
    {
      id v11 = objc_msgSend(v2, "objectAtIndexedSubscript:", *((int *)v24 + v9), v21);
      uint64_t v12 = [v11 type];
      if ([v12 isEqualToString:@"Sofa"])
      {
        int v13 = [v11 boxesDict];
        id v14 = [v13 objectForKey:@"rawdetection"];

        if (v14)
        {
          id v15 = [v11 parts];
          id v16 = [v15 objectForKey:v6];

          if (v16)
          {
            box3dToCentroidSizeAngle((float32x4_t *)(v23[0] + 224 * v9), (uint64_t *)__p);
            long long v17 = __p[0];
            float v18 = *((float *)__p[0] + 3);
            float v19 = *((float *)__p[0] + 4);
            if (v18 >= v19) {
              float v20 = *((float *)__p[0] + 4);
            }
            else {
              float v20 = *((float *)__p[0] + 3);
            }
            if (v19 >= v18) {
              float v18 = *((float *)__p[0] + 4);
            }
            if ((float)(v20 / v18) <= 0.8
              || ([v11 addObjectPartAttribute:v21],
                  [v11 removeObjectPartAttribute:v6],
                  (long long v17 = __p[0]) != 0))
            {
              __p[1] = v17;
              operator delete(v17);
            }
          }
        }
      }
      else
      {
      }
      ++v9;
    }
    while (v9 != v10);
  }

  __p[0] = v23;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_237C7B608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignChairTypeStoolAttribute(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v16 = a2;
  LODWORD(__p[0]) = 9;
  uint64_t v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v4 = (id)v3[3];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = v16;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v10 = [v9 type];
        char v11 = [v10 isEqualToString:@"Chair"];

        if (v11)
        {
          uint64_t v12 = [v9 parts];
          int v13 = [v12 objectForKey:v4];
          BOOL v14 = v13 == 0;

          if (!v14)
          {
            uint64_t v15 = *(void *)(a1 + 48);
            std::string::basic_string[abi:ne180100]<0>(__p, "chair_type");
            uint64_t AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v15, __p);
            ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 103, v9);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }
}

void sub_237C7B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(uint64_t a1, int *a2, int a3, void *a4)
{
  int v13 = a3;
  id v5 = a4;
  int v6 = *a2;
  if (*a2 > a2[1])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x237E2C1F0](exception, "[3DOR] input range not valid");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  do
  {
    int v12 = v6;
    if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v12))
    {
      int v11 = v6;
      uint64_t v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v11);
      if (!v7) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      [v5 removeObjectPartAttribute:v7[3]];
    }
  }
  while (v6++ < a2[1]);
  uint64_t v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v13);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  [v5 addObjectPartAttribute:v9[3]];
}

void sub_237C7BA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::RegulateTableTypeDeskAttribute(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v20 = a2;
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v28 = 28;
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v28);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v22 = (id)v2[3];
  int v28 = 31;
  uint64_t v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v28);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v21 = (id)v3[3];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  obuint64_t j = v20;
  uint64_t v4 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(obj);
        }
        unint64_t v8 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v9 = [v8 type];
        if ([v9 isEqualToString:@"Table"])
        {
          uint64_t v10 = [v8 boxesDict];
          int v11 = [v10 objectForKey:@"rawdetection"];
          BOOL v12 = v11 == 0;

          if (!v12)
          {
            if ((v5 & 1) == 0) {
            int v13 = [v8 parts];
            }
            if (!v13
              || ([v8 parts],
                  BOOL v14 = objc_claimAutoreleasedReturnValue(),
                  BOOL v15 = [v14 count] == 0,
                  v14,
                  v13,
                  v15))
            {
                [v8 addObjectPartAttribute:v22];
            }
            else
            {
              id v16 = [v8 parts];
              long long v17 = [v16 allKeys];
              int v18 = [v17 containsObject:v22];

              if (v18)
              {
                if (!v19 || v19 >= 3)
                {
                  [v8 removeObjectPartAttribute:v22];
                  [v8 addObjectPartAttribute:v21];
                }
              }
            }
            char v5 = 1;
          }
        }
        else
        {
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v4);
  }

  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
}

void sub_237C7BD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ou3dor::anonymous namespace'::GetRawBoxesFromObjects(void *a1, void *a2, char **a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  a3[1] = *a3;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  obuint64_t j = v5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v58;
    uint64_t v47 = (uint64_t)(a3 + 2);
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v58 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        int v11 = objc_msgSend(v10, "type", v47);
        if ([v11 isEqualToString:v6])
        {
          BOOL v12 = [v10 boxesDict];
          int v13 = [v12 objectForKey:@"rawdetection"];
          BOOL v14 = v13 == 0;

          if (!v14)
          {
            BOOL v15 = [v10 boxesDict];
            id v16 = [v15 objectForKey:@"rawdetection"];
            box3dFromNSArray(v16, (uint64_t)&v49);
            long long v17 = a3[1];
            unint64_t v18 = (unint64_t)a3[2];
            if ((unint64_t)v17 >= v18)
            {
              uint64_t v26 = (v17 - *a3) >> 7;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 57) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v18 - (void)*a3;
              if (v28 >> 6 > v27) {
                unint64_t v27 = v28 >> 6;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFF80) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29) {
                uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v47, v29);
              }
              else {
                uint64_t v30 = 0;
              }
              uint64_t v31 = &v30[128 * v26];
              long long v32 = v49;
              long long v33 = v50;
              long long v34 = v52;
              *((_OWORD *)v31 + 2) = v51;
              *((_OWORD *)v31 + 3) = v34;
              *(_OWORD *)uint64_t v31 = v32;
              *((_OWORD *)v31 + 1) = v33;
              long long v35 = v53;
              long long v36 = v54;
              long long v37 = v56;
              *((_OWORD *)v31 + 6) = v55;
              *((_OWORD *)v31 + 7) = v37;
              *((_OWORD *)v31 + 4) = v35;
              *((_OWORD *)v31 + 5) = v36;
              id v39 = *a3;
              char v38 = a3[1];
              uint64_t v40 = v31;
              if (v38 != *a3)
              {
                do
                {
                  long long v41 = *((_OWORD *)v38 - 8);
                  long long v42 = *((_OWORD *)v38 - 7);
                  long long v43 = *((_OWORD *)v38 - 5);
                  *((_OWORD *)v40 - 6) = *((_OWORD *)v38 - 6);
                  *((_OWORD *)v40 - 5) = v43;
                  *((_OWORD *)v40 - 8) = v41;
                  *((_OWORD *)v40 - 7) = v42;
                  long long v44 = *((_OWORD *)v38 - 4);
                  long long v45 = *((_OWORD *)v38 - 3);
                  long long v46 = *((_OWORD *)v38 - 1);
                  *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
                  *((_OWORD *)v40 - 1) = v46;
                  *((_OWORD *)v40 - 4) = v44;
                  *((_OWORD *)v40 - 3) = v45;
                  v40 -= 128;
                  v38 -= 128;
                }
                while (v38 != v39);
                char v38 = *a3;
              }
              long long v25 = v31 + 128;
              *a3 = v40;
              a3[1] = v31 + 128;
              a3[2] = &v30[128 * v29];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              long long v19 = v49;
              long long v20 = v50;
              long long v21 = v52;
              *((_OWORD *)v17 + 2) = v51;
              *((_OWORD *)v17 + 3) = v21;
              *(_OWORD *)long long v17 = v19;
              *((_OWORD *)v17 + 1) = v20;
              long long v22 = v53;
              long long v23 = v54;
              long long v24 = v56;
              *((_OWORD *)v17 + 6) = v55;
              *((_OWORD *)v17 + 7) = v24;
              *((_OWORD *)v17 + 4) = v22;
              *((_OWORD *)v17 + 5) = v23;
              long long v25 = v17 + 128;
            }
            a3[1] = v25;
          }
        }
        else
        {
        }
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
    }
    while (v7);
  }
}

void sub_237C7C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ou3dor::anonymous namespace'::NumberOfOverlapChairs(void *a1, float32x4_t **a2, int a3)
{
  id v5 = a1;
  id v6 = v5;
  if (*a2 == a2[1])
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v7 = [v5 boxesDict];
    uint64_t v8 = [v7 objectForKey:@"rawdetection"];

    if (!v8) {
      goto LABEL_19;
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    float32x4_t v16 = 0u;
    long long v17 = 0u;
    box3dFromNSArray(v8, (uint64_t)&v16);
    if (a3)
    {
      box3dToCentroidSizeAngle(&v16, (uint64_t *)v24);
      float v9 = 0.3;
      if (*((float *)v24[0] + 3) <= *((float *)v24[0] + 4)) {
        float v10 = 0.5;
      }
      else {
        float v10 = 0.3;
      }
      if (*((float *)v24[0] + 3) > *((float *)v24[0] + 4)) {
        float v9 = 0.5;
      }
      box3dEnlarge(&v16, v10, v9, 0.0, v15);
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      long long v20 = v15[4];
      long long v21 = v15[5];
      long long v22 = v15[6];
      long long v23 = v15[7];
      float32x4_t v16 = (float32x4_t)v15[0];
      long long v17 = v15[1];
      long long v18 = v15[2];
      long long v19 = v15[3];
    }
    int v11 = *a2;
    BOOL v12 = a2[1];
    if (*a2 == v12)
    {
LABEL_19:
      uint64_t v13 = 0;
    }
    else
    {
      LODWORD(v13) = 0;
      do
      {
        box3dIou(&v16, v11, 0, (uint64_t)v15);
        if (*(float *)v15 <= 0.0) {
          uint64_t v13 = v13;
        }
        else {
          uint64_t v13 = (v13 + 1);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
  }
  return v13;
}

void sub_237C7C298(_Unwind_Exception *a1)
{
  id v5 = *(void **)(v3 - 72);
  if (v5)
  {
    *(void *)(v3 - 64) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::RegulateTableTypeCoffeeAttribute(uint64_t a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v24 = a2;
  long long v41 = 0;
  long long v42 = 0;
  uint64_t v43 = 0;
  v32.i32[0] = 29;
  id v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v32);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v26 = (id)v2[3];
  v32.i32[0] = 31;
  uint64_t v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v32);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  id v27 = (id)v3[3];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = v24;
  uint64_t v4 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
  if (v4)
  {
    char v5 = 0;
    uint64_t v6 = *(void *)v38;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v38 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        float v9 = objc_msgSend(v8, "type", v24);
        if ([v9 isEqualToString:@"Table"])
        {
          float v10 = [v8 boxesDict];
          int v11 = [v10 objectForKey:@"rawdetection"];
          BOOL v12 = v11 == 0;

          if (!v12)
          {
            if ((v5 & 1) == 0) {
            long long v35 = 0u;
            }
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            memset(&v32, 0, 64);
            uint64_t v13 = [v8 boxesDict];
            BOOL v14 = [v13 objectForKey:@"rawdetection"];
            box3dFromNSArray(v14, (uint64_t)&v32);

            BOOL v15 = [v8 parts];
            if (!v15
              || ([v8 parts],
                  float32x4_t v16 = objc_claimAutoreleasedReturnValue(),
                  BOOL v17 = [v16 count] == 0,
                  v16,
                  v15,
                  v17))
            {
              {
                if ((float)(*((float *)&v33 + 2) - v32.f32[2]) >= 0.65) {
                  id v23 = v27;
                }
                else {
                  id v23 = v26;
                }
                *(float *)&double v22 = *((float *)&v33 + 2) - v32.f32[2];
                objc_msgSend(v8, "addObjectPartAttribute:", v23, v22);
              }
            }
            else
            {
              long long v18 = [v8 parts];
              long long v19 = [v18 allKeys];
              int v20 = [v19 containsObject:v27];

              if (v20)
              {
                  && (float)(*((float *)&v33 + 2) - v32.f32[2]) < 0.65)
                {
                  uint64_t v21 = *(void *)(a1 + 48);
                  std::string::basic_string[abi:ne180100]<0>(__p, "table_type");
                  uint64_t AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v21, __p);
                  ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 29, v8);
                  if (v30 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
            char v5 = 1;
          }
        }
        else
        {
        }
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v37 objects:v44 count:16];
    }
    while (v4);
  }

  if (v41)
  {
    long long v42 = v41;
    operator delete(v41);
  }
}

void sub_237C7C698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

float ou3dor::anonymous namespace'::MinTableSofasDistance(float32x4_t *a1, float32x4_t **a2)
{
  id v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 3.4028e38;
  }
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  float32x4_t v5 = vmulq_f32(vaddq_f32(*a1, a1[6]), v4);
  float result = 3.4028e38;
  v7.i64[0] = 0xBF000000BF000000;
  v7.i64[1] = 0xBF000000BF000000;
  do
  {
    float32x4_t v8 = vaddq_f32(v5, vmulq_f32(vaddq_f32(*v2, v2[6]), v7));
    if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(vsubq_f32(v2[1], *v2), v8)) >= 0.0)
    {
      float v9 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v8, v8)));
      if (v9 < result) {
        float result = v9;
      }
    }
    v2 += 8;
  }
  while (v2 != v3);
  return result;
}

void ou3dor::OU3DObjectRepresentation::ConflictAttributeSetMapping(uint64_t a1, void *a2)
{
  v40[16] = *(id **)MEMORY[0x263EF8340];
  id v23 = a2;
  v33[0] = 0;
  v33[1] = 0;
  float32x4_t v32 = (uint64_t *)v33;
  for (uint64_t i = qword_26AF276E0; i; uint64_t i = *(void *)i)
  {
    int v3 = *(_DWORD *)(i + 16);
    v40[0] = (id *)(i + 24);
    *((_DWORD *)std::__tree<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(&v32, (void **)(i + 24), (uint64_t)&std::piecewise_construct, v40)+ 10) = v3;
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  obuint64_t j = v23;
  uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v39 count:16];
  if (v4)
  {
    uint64_t v25 = *(void *)v29;
    do
    {
      for (uint64_t j = 0; j != v4; ++j)
      {
        if (*(void *)v29 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v28 + 1) + 8 * j);
        v27[0] = 0;
        v27[1] = 0;
        id v26 = (uint64_t *)v27;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        float32x4_t v7 = objc_msgSend(v6, "parts", v23);
        uint64_t v8 = [v7 countByEnumeratingWithState:&v34 objects:v40 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v35;
          do
          {
            for (uint64_t k = 0; k != v8; ++k)
            {
              if (*(void *)v35 != v9) {
                objc_enumerationMutation(v7);
              }
              long long v38 = *(void **)(*((void *)&v34 + 1) + 8 * k);
              int v11 = (int *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at((uint64_t)&v32, &v38);
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v26, v11, v11);
            }
            uint64_t v8 = [v7 countByEnumeratingWithState:&v34 objects:v40 count:16];
          }
          while (v8);
        }

        {
          if (!v12) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          id v13 = v6;
          BOOL v14 = objc_opt_new();
          BOOL v15 = (void *)v12[5];
          float32x4_t v16 = v12 + 6;
          if (v15 != v12 + 6)
          {
            do
            {
              LODWORD(v40[0]) = *((_DWORD *)v15 + 7);
              id v17 = objc_alloc_init(MEMORY[0x263EFF8C0]);
              long long v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)v40);
              if (!v18) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              [v14 setObject:v17 forKeyedSubscript:v18[3]];

              long long v19 = (void *)v15[1];
              if (v19)
              {
                do
                {
                  int v20 = v19;
                  long long v19 = (void *)*v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  int v20 = (void *)v15[2];
                  BOOL v21 = *v20 == (void)v15;
                  BOOL v15 = v20;
                }
                while (!v21);
              }
              BOOL v15 = v20;
            }
            while (v20 != v16);
          }
          double v22 = (void *)[v14 copy];
          [v13 setParts:v22];
        }
        std::__tree<int>::destroy((uint64_t)&v26, v27[0]);
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v28 objects:v39 count:16];
    }
    while (v4);
  }

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v32, v33[0]);
}

void sub_237C7CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(uint64_t a1, void *a2)
{
  v32[3] = *MEMORY[0x263EF8340];
  id v15 = a2;
  {
    LODWORD(__p[0]) = 19;
    v32[0] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
    LODWORD(AttributeIDRange) = 20;
    v32[1] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&AttributeIDRange);
    int v29 = 21;
    _OWORD v32[2] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, &v29);
    ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(NSArray<OU3DObject *> *)::kLShapeVariants = [MEMORY[0x263EFF8C0] arrayWithObjects:v32 count:3];
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  obuint64_t j = (id)ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(NSArray<OU3DObject *> *)::kLShapeVariants;
  uint64_t v16 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v16)
  {
    uint64_t v14 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v4 = v15;
        uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v30 count:16];
        if (v5)
        {
          uint64_t v6 = *(void *)v22;
          do
          {
            for (uint64_t j = 0; j != v5; ++j)
            {
              if (*(void *)v22 != v6) {
                objc_enumerationMutation(v4);
              }
              uint64_t v8 = *(void **)(*((void *)&v21 + 1) + 8 * j);
              uint64_t v9 = [v8 parts];
              float v10 = [v9 objectForKey:v3];
              BOOL v11 = v10 == 0;

              if (!v11)
              {
                uint64_t v12 = *(void *)(a1 + 48);
                std::string::basic_string[abi:ne180100]<0>(__p, "sofa_type");
                uint64_t AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v12, __p);
                ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 17, v8);
                if (v19 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
            uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v30 count:16];
          }
          while (v5);
        }
      }
      uint64_t v16 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v16);
  }
}

void sub_237C7CEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

id ou3dor::OU3DObjectRepresentation::LShapeSofaExtendOrClip(uint64_t a1, void *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  memset(v62, 0, sizeof(v62));
  int v63 = 1065353216;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  obuint64_t j = a2;
  uint64_t v2 = [obj countByEnumeratingWithState:&v58 objects:v66 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v59;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v59 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v58 + 1) + 8 * i);
        uint64_t v6 = [v5 parts];
        LODWORD(__p[0]) = 17;
        float32x4_t v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
        if (!v7) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v8 = [v6 objectForKey:v7[3]];
        BOOL v9 = v8 == 0;

        if (!v9)
        {
          float v10 = [v5 identifier];
          id v11 = [v10 UUIDString];
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v11 UTF8String]);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v62, (unsigned __int8 *)__p, (uint64_t)__p);
          if (SHIBYTE(v57) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v58 objects:v66 count:16];
    }
    while (v2);
  }

  rawBoxesFromObjects(obj, (uint64_t *)__p);
  ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape((ou3dod::HistoryMergeInfo *)(a1 + 40), (const OUBox3d **)__p, v62, (uint64_t *)v54);
  std::vector<OUBox3d>::__vdeallocate(__p);
  *(_OWORD *)std::string __p = *(_OWORD *)v54;
  uint64_t v57 = v55;
  v54[1] = 0;
  uint64_t v55 = 0;
  v54[0] = 0;
  uint64_t AttributeIDRange = v54;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&AttributeIDRange);
  uint64_t LShapeMergeInfo = ou3dor::OU3DLShapeSofaOfflineMerger::GetLShapeMergeInfo((ou3dor::OU3DLShapeSofaOfflineMerger *)(a1 + 40));
  id v48 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v45 = obj;
  uint64_t v12 = [v45 countByEnumeratingWithState:&v50 objects:v65 count:16];
  if (v12)
  {
    uint64_t v49 = *(void *)v51;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v51 != v49) {
          objc_enumerationMutation(v45);
        }
        uint64_t v14 = *(void **)(*((void *)&v50 + 1) + 8 * v13);
        if ([v14 hasBoxesDict:@"rawdetection"])
        {
          id v15 = [v14 type];
          char v16 = [v15 isEqualToString:@"Sofa"];

          if (v16)
          {
            long long v18 = (id *)__p[0];
            id v17 = (id *)__p[1];
            while (1)
            {
              if (v18 == v17) {
                goto LABEL_25;
              }
              char v19 = [v14 identifier];
              int v20 = [v19 UUIDString];
              long long v21 = [v18[18] UUIDString];
              int v22 = [v20 isEqualToString:v21];

              if (v22) {
                break;
              }
              v18 += 28;
            }
            [v14 addBoxesDict:v18 forDictKey:@"lshaped"];
            for (uint64_t j = *(uint64_t **)(LShapeMergeInfo + 16); j; uint64_t j = (uint64_t *)*j)
            {
              if (!*((unsigned char *)j + 64)) {
                continue;
              }
              long long v24 = [v14 identifier];
              long long v25 = [v24 UUIDString];
              id v26 = [NSString alloc];
              if (*((char *)j + 39) < 0) {
                uint64_t v27 = j[2];
              }
              else {
                uint64_t v27 = (uint64_t)(j + 2);
              }
              long long v28 = (void *)[v26 initWithUTF8String:v27];
              int v29 = [v25 isEqualToString:v28];

              long long v30 = [v14 identifier];
              long long v31 = [v30 UUIDString];
              id v32 = [NSString alloc];
              long long v33 = j + 5;
              if (*((char *)j + 63) < 0) {
                long long v33 = (void *)*v33;
              }
              long long v34 = (void *)[v32 initWithUTF8String:v33];
              int v35 = [v31 isEqualToString:v34];

              if (((v29 | v35) & 1) == 0) {
                continue;
              }
              uint64_t v36 = *(void *)(a1 + 48);
              std::string::basic_string[abi:ne180100]<0>(v54, "sofa_type");
              uint64_t AttributeIDRange = (void **)ou3dor::OU3DORParser::FindAttributeIDRange(v36, v54);
              ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes((uint64_t)AttributeIDRange, (int *)&AttributeIDRange, 17, v14);
              if (SHIBYTE(v55) < 0)
              {
                operator delete(v54[0]);
                if (v35)
                {
LABEL_39:
                  id v37 = objc_alloc(MEMORY[0x263F08C38]);
                  if (*((char *)j + 39) >= 0) {
                    uint64_t v38 = (uint64_t)(j + 2);
                  }
                  else {
                    uint64_t v38 = j[2];
                  }
                  long long v39 = [NSString stringWithUTF8String:v38];
                  long long v40 = (void *)[v37 initWithUUIDString:v39];

                  objc_msgSend(v14, "setParent_id:", v40);
                  uint64_t v41 = *(void *)(a1 + 48);
                  std::string::basic_string[abi:ne180100]<0>(v54, "sofa_type");
                  uint64_t AttributeIDRange = (void **)ou3dor::OU3DORParser::FindAttributeIDRange(v41, v54);
                  ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes((uint64_t)AttributeIDRange, (int *)&AttributeIDRange, 20, v14);
                  if (SHIBYTE(v55) < 0) {
                    operator delete(v54[0]);
                  }
                }
              }
              else if (v35)
              {
                goto LABEL_39;
              }
            }
          }
        }
        [v48 addObject:v14];
LABEL_25:
        ++v13;
      }
      while (v13 != v12);
      uint64_t v42 = [v45 countByEnumeratingWithState:&v50 objects:v65 count:16];
      uint64_t v12 = v42;
    }
    while (v42);
  }

  v54[0] = __p;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v62);

  return v48;
}

void sub_237C7D510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::string __p = &a34;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::LshapeSofaPostProcess(uint64_t a1, void *a2)
{
  id v3 = a2;
  ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(a1, v3);
  ou3dor::OU3DObjectRepresentation::LShapeSofaExtendOrClip(a1, v3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
}

void sub_237C7D700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::set<ou3dor::PartAttributeID>::set[abi:ne180100](a1, a2);
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100](v5 + 3, a3);
  return a1;
}

void sub_237C7D74C(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<ou3dor::PartAttributeID>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_237C7D7A4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

utils::OUImageUtils *utils::OUImageUtils::OUImageUtils(utils::OUImageUtils *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 3) = malloc_type_malloc(0x271000uLL, 0x51AB3EFDuLL);
  return this;
}

void sub_237C7D800(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<ou3dor::OU3DORParser::AttibuteInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<ou3dor::OU3DORParser::AttibuteInfo,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    id v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t std::set<ou3dor::PartAttributeID>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_237C7DA18(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,std::__unordered_map_hasher<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,ou3dor::anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,true>,std::__unordered_map_equal<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,std::equal_to<std::set<ou3dor::PartAttributeID>>,ou3dor::anonymous namespace'::SetHash,true>,std::allocator<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = *v2;
      std::__tree<int>::destroy((uint64_t)(v2 + 5), v2[6]);
      std::__tree<int>::destroy((uint64_t)(v2 + 2), v2[3]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

unint64_t std::__unordered_map_hasher<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,ou3dor::anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,true>::operator()[abi:ne180100](void *a1)
{
  unint64_t result = a1[2];
  uint64_t v5 = (void *)*a1;
  id v3 = a1 + 1;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    do
    {
      uint64_t v6 = (void *)v4[1];
      float32x4_t v7 = v4;
      if (v6)
      {
        do
        {
          uint64_t v8 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v7[2];
          BOOL v9 = *v8 == (void)v7;
          float32x4_t v7 = v8;
        }
        while (!v9);
      }
      result ^= (result << 6) + (result >> 2) + 2654435769u + *((int *)v4 + 7);
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

BOOL std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100](uint64_t a1, void *a2, void *a3)
{
  if (a2[2] != a3[2]) {
    return 0;
  }
  uint64_t v5 = (void *)*a2;
  id v3 = a2 + 1;
  uint64_t v4 = v5;
  if (v5 == v3) {
    return 1;
  }
  uint64_t v6 = (void *)*a3;
  do
  {
    int v7 = *((_DWORD *)v4 + 7);
    int v8 = *((_DWORD *)v6 + 7);
    BOOL result = v7 == v8;
    if (v7 != v8) {
      break;
    }
    float v10 = (void *)v4[1];
    id v11 = v4;
    if (v10)
    {
      do
      {
        uint64_t v4 = v10;
        float v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v11[2];
        BOOL v12 = *v4 == (void)v11;
        id v11 = v4;
      }
      while (!v12);
    }
    uint64_t v13 = (void *)v6[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v6[2];
        BOOL v12 = *v14 == (void)v6;
        uint64_t v6 = v14;
      }
      while (!v12);
    }
    uint64_t v6 = v14;
  }
  while (v4 != v3);
  return result;
}

uint64_t *std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = std::set<ou3dor::PartAttributeID>::set[abi:ne180100](a1, a2);
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100](v4 + 3, a2 + 24);
  return a1;
}

void sub_237C7DC00(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 5), a2[6]);
    std::__tree<int>::destroy((uint64_t)(a2 + 2), a2[3]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::insert[abi:ne180100]<std::__tree_const_iterator<NSString * {__strong},std::__tree_node<NSString * {__strong},void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_237C7DCC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::insert[abi:ne180100]<std::__tree_const_iterator<NSString * {__strong},std::__tree_node<NSString * {__strong},void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!CompareNSString::operator()(v4, *a2, v2[4]))
      {
        if (!CompareNSString::operator()(v4, v2[4], *a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

void *std::__tree<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, id **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v10, a2);
  int v7 = (void *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = operator new(0x30uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 0;
    std::__tree<int>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

void *std::unordered_map<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>,ou3dor::anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,std::allocator<std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>>>::find[abi:ne180100](void *a1)
{
    return 0;
  unint64_t v4 = v2;
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v2;
  }
  else
  {
  }
  if (!v8) {
    return 0;
  }
  BOOL v9 = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = v9[1];
      if (v4 == v10)
      {
        if (std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100]((uint64_t)&dword_26AF27660, v9 + 2, a1))
        {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= v3) {
            v10 %= v3;
          }
        }
        else
        {
          v10 &= v3 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      BOOL v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

uint64_t __cxx_global_var_init_178()
{
  MEMORY[0x270FA5388]();
  v292[6] = *MEMORY[0x263EF8340];
  long long v253 = xmmword_237CB58B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v187, (int *)&v253, 4);
  v186[1] = 0;
  v186[0] = 0;
  long long v185 = v186;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v254, (uint64_t)v187, (uint64_t)&v185);
  long long v252 = xmmword_237CB58C0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v183, (int *)&v252, 4);
  v182[1] = 0;
  v182[0] = 0;
  long long v181 = v182;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v255, (uint64_t)v183, (uint64_t)&v181);
  long long v251 = xmmword_237CB58D0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v179, (int *)&v251, 4);
  v178[1] = 0;
  v178[0] = 0;
  long long v177 = v178;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v256, (uint64_t)v179, (uint64_t)&v177);
  long long v250 = xmmword_237CB58E0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v175, (int *)&v250, 4);
  v174[1] = 0;
  v174[0] = 0;
  long long v173 = v174;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v257, (uint64_t)v175, (uint64_t)&v173);
  long long v249 = xmmword_237CB58F0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v171, (int *)&v249, 4);
  v170[1] = 0;
  v170[0] = 0;
  long long v169 = v170;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v258, (uint64_t)v171, (uint64_t)&v169);
  long long v248 = xmmword_237CB5900;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v167, (int *)&v248, 4);
  v166[1] = 0;
  v166[0] = 0;
  unint64_t v165 = v166;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v259, (uint64_t)v167, (uint64_t)&v165);
  long long v247 = xmmword_237CB5910;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v163, (int *)&v247, 4);
  v162[1] = 0;
  v162[0] = 0;
  long long v161 = v162;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v260, (uint64_t)v163, (uint64_t)&v161);
  long long v246 = xmmword_237CB5920;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v159, (int *)&v246, 4);
  v158[1] = 0;
  v158[0] = 0;
  uint64_t v157 = v158;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v261, (uint64_t)v159, (uint64_t)&v157);
  long long v245 = xmmword_237CB5930;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v155, (int *)&v245, 4);
  v154[1] = 0;
  v154[0] = 0;
  uint64_t v153 = v154;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v262, (uint64_t)v155, (uint64_t)&v153);
  long long v244 = xmmword_237CB5940;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v151, (int *)&v244, 4);
  v150[1] = 0;
  v150[0] = 0;
  long long v149 = v150;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v263, (uint64_t)v151, (uint64_t)&v149);
  long long v243 = xmmword_237CB5950;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v147, (int *)&v243, 4);
  v146[1] = 0;
  v146[0] = 0;
  long long v145 = v146;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v264, (uint64_t)v147, (uint64_t)&v145);
  long long v242 = xmmword_237CB5960;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v143, (int *)&v242, 4);
  v142[1] = 0;
  v142[0] = 0;
  long long v141 = v142;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v265, (uint64_t)v143, (uint64_t)&v141);
  long long v241 = xmmword_237CB5970;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v139, (int *)&v241, 4);
  v138[1] = 0;
  v138[0] = 0;
  id v137 = v138;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v266, (uint64_t)v139, (uint64_t)&v137);
  long long v240 = xmmword_237CB5980;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v135, (int *)&v240, 4);
  v134[1] = 0;
  v134[0] = 0;
  long long v133 = v134;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v267, (uint64_t)v135, (uint64_t)&v133);
  long long v239 = xmmword_237CB5990;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v131, (int *)&v239, 4);
  v130[1] = 0;
  v130[0] = 0;
  float32x4_t v129 = v130;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v268, (uint64_t)v131, (uint64_t)&v129);
  long long v238 = xmmword_237CB59A0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v127, (int *)&v238, 4);
  long long v237 = xmmword_237CB59B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v125, (int *)&v237, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v269, (uint64_t)v127, (uint64_t)v125);
  long long v236 = xmmword_237CB59C0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v123, (int *)&v236, 4);
  long long v235 = xmmword_237CB59D0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v121, (int *)&v235, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v270, (uint64_t)v123, (uint64_t)v121);
  long long v234 = xmmword_237CB59E0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v119, (int *)&v234, 4);
  long long v233 = xmmword_237CB59F0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v117, (int *)&v233, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v271, (uint64_t)v119, (uint64_t)v117);
  long long v232 = xmmword_237CB5A00;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v115, (int *)&v232, 4);
  long long v231 = xmmword_237CB5A10;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v113, (int *)&v231, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v272, (uint64_t)v115, (uint64_t)v113);
  long long v230 = xmmword_237CB5A20;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v111, (int *)&v230, 4);
  long long v229 = xmmword_237CB5A30;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v109, (int *)&v229, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v273, (uint64_t)v111, (uint64_t)v109);
  long long v228 = xmmword_237CB5A40;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v107, (int *)&v228, 4);
  long long v227 = xmmword_237CB5A10;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v105, (int *)&v227, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v274, (uint64_t)v107, (uint64_t)v105);
  long long v226 = xmmword_237CB5A50;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v103, (int *)&v226, 4);
  long long v225 = xmmword_237CB5A60;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v101, (int *)&v225, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v275, (uint64_t)v103, (uint64_t)v101);
  long long v224 = xmmword_237CB5A70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v99, (int *)&v224, 4);
  long long v223 = xmmword_237CB59D0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v97, (int *)&v223, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v276, (uint64_t)v99, (uint64_t)v97);
  long long v222 = xmmword_237CB5A80;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v95, (int *)&v222, 4);
  long long v221 = xmmword_237CB59F0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v93, (int *)&v221, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v277, (uint64_t)v95, (uint64_t)v93);
  long long v220 = xmmword_237CB5A90;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v91, (int *)&v220, 4);
  long long v219 = xmmword_237CB5AA0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v89, (int *)&v219, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v278, (uint64_t)v91, (uint64_t)v89);
  long long v218 = xmmword_237CB5AB0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v87, (int *)&v218, 4);
  long long v217 = xmmword_237CB5AC0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v85, (int *)&v217, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v279, (uint64_t)v87, (uint64_t)v85);
  long long v216 = xmmword_237CB5AD0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v83, (int *)&v216, 4);
  long long v215 = xmmword_237CB5AE0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v81, (int *)&v215, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v280, (uint64_t)v83, (uint64_t)v81);
  long long v214 = xmmword_237CB5AF0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v79, (int *)&v214, 4);
  long long v213 = xmmword_237CB5A60;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v77, (int *)&v213, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v281, (uint64_t)v79, (uint64_t)v77);
  long long v212 = xmmword_237CB5B00;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v75, (int *)&v212, 4);
  long long v211 = xmmword_237CB59B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v73, (int *)&v211, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v282, (uint64_t)v75, (uint64_t)v73);
  long long v210 = xmmword_237CB5B10;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v71, (int *)&v210, 4);
  long long v209 = xmmword_237CB59B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v69, (int *)&v209, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v283, (uint64_t)v71, (uint64_t)v69);
  long long v208 = xmmword_237CB5AC0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v67, (int *)&v208, 4);
  long long v207 = xmmword_237CB5B20;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v65, (int *)&v207, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v284, (uint64_t)v67, (uint64_t)v65);
  long long v206 = xmmword_237CB5B30;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v63, (int *)&v206, 4);
  long long v205 = xmmword_237CB59B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v61, (int *)&v205, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v285, (uint64_t)v63, (uint64_t)v61);
  long long v204 = xmmword_237CB5B40;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v59, (int *)&v204, 4);
  long long v203 = xmmword_237CB59D0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v57, (int *)&v203, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v286, (uint64_t)v59, (uint64_t)v57);
  uint64_t v202 = 0x210000001ELL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v55, (int *)&v202, 2);
  uint64_t v201 = 0x200000001ELL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v53, (int *)&v201, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v287, (uint64_t)v55, (uint64_t)v53);
  uint64_t v200 = 0x200000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v51, (int *)&v200, 2);
  uint64_t v199 = 0x200000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v49, (int *)&v199, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v288, (uint64_t)v51, (uint64_t)v49);
  uint64_t v198 = 0x210000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v47, (int *)&v198, 2);
  uint64_t v197 = 0x210000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v45, (int *)&v197, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v289, (uint64_t)v47, (uint64_t)v45);
  uint64_t v196 = 0x220000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v43, (int *)&v196, 2);
  uint64_t v195 = 0x220000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v41, (int *)&v195, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v290, (uint64_t)v43, (uint64_t)v41);
  uint64_t v194 = 0x230000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v39, (int *)&v194, 2);
  uint64_t v193 = 0x230000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v37, (int *)&v193, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v291, (uint64_t)v39, (uint64_t)v37);
  int v34 = 28;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v35, &v34, 1);
  uint64_t v192 = 0x230000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v32, (int *)&v192, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v292, (uint64_t)v35, (uint64_t)v32);
  uint64_t v1 = 0;
  *(_OWORD *)&qword_26AF27650 = 0u;
  dword_26AF27660 = 1065353216;
  do
  {
    unint64_t v3 = v2;
    {
      v5.i16[0] = vaddlv_u8(v5);
      unint64_t v6 = v5.u32[0];
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v0 = v2;
      }
      else
      {
      }
      if (v7)
      {
        int v8 = (void *)*v7;
        if (*v7)
        {
          do
          {
            unint64_t v9 = v8[1];
            if (v9 == v3)
            {
              if (std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100]((uint64_t)&dword_26AF27660, v8 + 2, &v254[6 * v1]))
              {
                goto LABEL_73;
              }
            }
            else
            {
              if (v6 > 1)
              {
                if (v9 >= v4) {
                  v9 %= v4;
                }
              }
              else
              {
                v9 &= v4 - 1;
              }
              if (v9 != v0) {
                break;
              }
            }
            int v8 = (void *)*v8;
          }
          while (v8);
        }
      }
    }
    unint64_t v10 = operator new(0x40uLL);
    uint64_t v189 = (uint64_t)v10;
    long long v190 = &qword_26AF27650;
    char v191 = 0;
    void *v10 = 0;
    v10[1] = v3;
    std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100](v10 + 2, (uint64_t)&v254[6 * v1]);
    char v191 = 1;
    float v11 = (float)(unint64_t)(qword_26AF27658 + 1);
    if (!v4 || (float)(*(float *)&dword_26AF27660 * (float)v4) < v11)
    {
      BOOL v12 = (v4 & (v4 - 1)) == 0;
      if (v4 < 3) {
        BOOL v12 = 0;
      }
      unint64_t v13 = (2 * v4) | !v12;
      unint64_t v14 = vcvtps_u32_f32(v11 / *(float *)&dword_26AF27660);
      if (v13 <= v14) {
        int8x8_t prime = (int8x8_t)v14;
      }
      else {
        int8x8_t prime = (int8x8_t)v13;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
        goto LABEL_30;
      {
        unint64_t v22 = vcvtps_u32_f32((float)(unint64_t)qword_26AF27658 / *(float *)&dword_26AF27660);
              v23.i16[0] = vaddlv_u8(v23),
              v23.u32[0] > 1uLL))
        {
          unint64_t v22 = std::__next_prime(v22);
        }
        else
        {
          uint64_t v24 = 1 << -(char)__clz(v22 - 1);
          if (v22 >= 2) {
            unint64_t v22 = v24;
          }
        }
        if (*(void *)&prime <= v22) {
          int8x8_t prime = (int8x8_t)v22;
        }
        if (*(void *)&prime >= v4)
        {
        }
        else
        {
          if (prime)
          {
LABEL_30:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v16 = operator new(8 * *(void *)&prime);
            if (v17) {
              operator delete(v17);
            }
            uint64_t v18 = 0;
            do
            while (*(void *)&prime != v18);
            char v19 = (void **)qword_26AF27650;
            if (qword_26AF27650)
            {
              unint64_t v20 = *(void *)(qword_26AF27650 + 8);
              uint8x8_t v21 = (uint8x8_t)vcnt_s8(prime);
              v21.i16[0] = vaddlv_u8(v21);
              if (v21.u32[0] > 1uLL)
              {
                if (v20 >= *(void *)&prime) {
                  v20 %= *(void *)&prime;
                }
              }
              else
              {
                v20 &= *(void *)&prime - 1;
              }
              for (uint64_t i = *v19; i; v20 = v26)
              {
                unint64_t v26 = i[1];
                if (v21.u32[0] > 1uLL)
                {
                  if (v26 >= *(void *)&prime) {
                    v26 %= *(void *)&prime;
                  }
                }
                else
                {
                  v26 &= *(void *)&prime - 1;
                }
                if (v26 != v20)
                {
                  {
                    goto LABEL_55;
                  }
                  *char v19 = (void *)*i;
                  uint64_t i = v19;
                }
                unint64_t v26 = v20;
LABEL_55:
                char v19 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v4 = (unint64_t)prime;
            goto LABEL_59;
          }
          if (v29) {
            operator delete(v29);
          }
          unint64_t v4 = 0;
        }
      }
LABEL_59:
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v3 >= v4) {
          unint64_t v0 = v3 % v4;
        }
        else {
          unint64_t v0 = v3;
        }
      }
      else
      {
        unint64_t v0 = (v4 - 1) & v3;
      }
    }
    if (v27)
    {
      *(void *)uint64_t v189 = *v27;
      *uint64_t v27 = v189;
    }
    else
    {
      *(void *)uint64_t v189 = qword_26AF27650;
      qword_26AF27650 = v189;
      if (*(void *)v189)
      {
        unint64_t v28 = *(void *)(*(void *)v189 + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v28 >= v4) {
            v28 %= v4;
          }
        }
        else
        {
          v28 &= v4 - 1;
        }
      }
    }
    ++qword_26AF27658;
LABEL_73:
    ++v1;
  }
  while (v1 != 39);
  unint64_t v30 = 234;
  do
  {
    std::__tree<int>::destroy((uint64_t)&v254[v30 - 1], (void *)v254[v30]);
    std::__tree<int>::destroy((uint64_t)&v251 + v30 * 8 + 8, *(void **)((char *)&v252 + v30 * 8));
    v30 -= 6;
  }
  while (v30 * 8);
  std::__tree<int>::destroy((uint64_t)v32, v33);
  std::__tree<int>::destroy((uint64_t)v35, v36);
  std::__tree<int>::destroy((uint64_t)v37, v38);
  std::__tree<int>::destroy((uint64_t)v39, v40);
  std::__tree<int>::destroy((uint64_t)v41, v42);
  std::__tree<int>::destroy((uint64_t)v43, v44);
  std::__tree<int>::destroy((uint64_t)v45, v46);
  std::__tree<int>::destroy((uint64_t)v47, v48);
  std::__tree<int>::destroy((uint64_t)v49, v50);
  std::__tree<int>::destroy((uint64_t)v51, v52);
  std::__tree<int>::destroy((uint64_t)v53, v54);
  std::__tree<int>::destroy((uint64_t)v55, v56);
  std::__tree<int>::destroy((uint64_t)v57, v58);
  std::__tree<int>::destroy((uint64_t)v59, v60);
  std::__tree<int>::destroy((uint64_t)v61, v62);
  std::__tree<int>::destroy((uint64_t)v63, v64);
  std::__tree<int>::destroy((uint64_t)v65, v66);
  std::__tree<int>::destroy((uint64_t)v67, v68);
  std::__tree<int>::destroy((uint64_t)v69, v70);
  std::__tree<int>::destroy((uint64_t)v71, v72);
  std::__tree<int>::destroy((uint64_t)v73, v74);
  std::__tree<int>::destroy((uint64_t)v75, v76);
  std::__tree<int>::destroy((uint64_t)v77, v78);
  std::__tree<int>::destroy((uint64_t)v79, v80);
  std::__tree<int>::destroy((uint64_t)v81, v82);
  std::__tree<int>::destroy((uint64_t)v83, v84);
  std::__tree<int>::destroy((uint64_t)v85, v86);
  std::__tree<int>::destroy((uint64_t)v87, v88);
  std::__tree<int>::destroy((uint64_t)v89, v90);
  std::__tree<int>::destroy((uint64_t)v91, v92);
  std::__tree<int>::destroy((uint64_t)v93, v94);
  std::__tree<int>::destroy((uint64_t)v95, v96);
  std::__tree<int>::destroy((uint64_t)v97, v98);
  std::__tree<int>::destroy((uint64_t)v99, v100);
  std::__tree<int>::destroy((uint64_t)v101, v102);
  std::__tree<int>::destroy((uint64_t)v103, v104);
  std::__tree<int>::destroy((uint64_t)v105, v106);
  std::__tree<int>::destroy((uint64_t)v107, v108);
  std::__tree<int>::destroy((uint64_t)v109, v110);
  std::__tree<int>::destroy((uint64_t)v111, v112);
  std::__tree<int>::destroy((uint64_t)v113, v114);
  std::__tree<int>::destroy((uint64_t)v115, v116);
  std::__tree<int>::destroy((uint64_t)v117, v118);
  std::__tree<int>::destroy((uint64_t)v119, v120);
  std::__tree<int>::destroy((uint64_t)v121, v122);
  std::__tree<int>::destroy((uint64_t)v123, v124);
  std::__tree<int>::destroy((uint64_t)v125, v126);
  std::__tree<int>::destroy((uint64_t)v127, v128);
  std::__tree<int>::destroy((uint64_t)&v129, v130[0]);
  std::__tree<int>::destroy((uint64_t)v131, v132);
  std::__tree<int>::destroy((uint64_t)&v133, v134[0]);
  std::__tree<int>::destroy((uint64_t)v135, v136);
  std::__tree<int>::destroy((uint64_t)&v137, v138[0]);
  std::__tree<int>::destroy((uint64_t)v139, v140);
  std::__tree<int>::destroy((uint64_t)&v141, v142[0]);
  std::__tree<int>::destroy((uint64_t)v143, v144);
  std::__tree<int>::destroy((uint64_t)&v145, v146[0]);
  std::__tree<int>::destroy((uint64_t)v147, v148);
  std::__tree<int>::destroy((uint64_t)&v149, v150[0]);
  std::__tree<int>::destroy((uint64_t)v151, v152);
  std::__tree<int>::destroy((uint64_t)&v153, v154[0]);
  std::__tree<int>::destroy((uint64_t)v155, v156);
  std::__tree<int>::destroy((uint64_t)&v157, v158[0]);
  std::__tree<int>::destroy((uint64_t)v159, v160);
  std::__tree<int>::destroy((uint64_t)&v161, v162[0]);
  std::__tree<int>::destroy((uint64_t)v163, v164);
  std::__tree<int>::destroy((uint64_t)&v165, v166[0]);
  std::__tree<int>::destroy((uint64_t)v167, v168);
  std::__tree<int>::destroy((uint64_t)&v169, v170[0]);
  std::__tree<int>::destroy((uint64_t)v171, v172);
  std::__tree<int>::destroy((uint64_t)&v173, v174[0]);
  std::__tree<int>::destroy((uint64_t)v175, v176);
  std::__tree<int>::destroy((uint64_t)&v177, v178[0]);
  std::__tree<int>::destroy((uint64_t)v179, v180);
  std::__tree<int>::destroy((uint64_t)&v181, v182[0]);
  std::__tree<int>::destroy((uint64_t)v183, v184);
  std::__tree<int>::destroy((uint64_t)&v185, v186[0]);
  std::__tree<int>::destroy((uint64_t)v187, v188);
}

void sub_237C7F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__tree<int>::destroy((uint64_t)&a19, a20);
  std::__tree<int>::destroy((uint64_t)&a23, a24);
  std::__tree<int>::destroy((uint64_t)&a27, a28);
  std::__tree<int>::destroy((uint64_t)&a31, a32);
  std::__tree<int>::destroy((uint64_t)&a35, v72[1]);
  std::__tree<int>::destroy((uint64_t)&a39, v72[5]);
  std::__tree<int>::destroy((uint64_t)&a43, v72[9]);
  std::__tree<int>::destroy((uint64_t)&a47, v72[13]);
  std::__tree<int>::destroy((uint64_t)&a51, v72[17]);
  std::__tree<int>::destroy((uint64_t)&a55, v72[21]);
  std::__tree<int>::destroy((uint64_t)&a59, v72[25]);
  std::__tree<int>::destroy((uint64_t)&a63, v72[29]);
  std::__tree<int>::destroy((uint64_t)&a67, v72[33]);
  std::__tree<int>::destroy((uint64_t)&a71, v72[37]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x210], v72[41]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x230], v72[45]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x250], v72[49]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x270], v72[53]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x290], v72[57]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2B0], v72[61]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2D0], v72[65]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2F0], v72[69]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], v72[73]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x330], v72[77]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x350], v72[81]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x370], v72[85]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x390], v72[89]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3B0], v72[93]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3D0], v72[97]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3F0], v72[101]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x410], v72[105]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x430], v72[109]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x450], v72[113]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x470], v72[117]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x490], v72[121]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4B0], v72[125]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4D0], v72[129]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4F0], v72[133]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x510], v72[137]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x530], v72[141]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x550], v72[145]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x570], v72[149]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x590], v72[153]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5B0], v72[157]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5D0], v72[161]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5F0], v72[165]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x610], v72[169]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x630], v72[173]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x648], v72[176]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x668], v72[180]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x680], v72[183]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6A0], v72[187]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6B8], v72[190]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6D8], v72[194]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6F0], v72[197]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x710], v72[201]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x728], v72[204]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x748], v72[208]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x760], v72[211]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x780], v72[215]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x798], v72[218]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7B8], v72[222]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7D0], v72[225]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7F0], v72[229]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x808], v72[232]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x828], v72[236]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x840], v72[239]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x860], v72[243]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x878], v72[246]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x898], v72[250]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8B0], v72[253]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8D0], v72[257]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8E8], v72[260]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x908], v72[264]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x920], v72[267]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x940], v72[271]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x958], v72[274]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x978], v72[278]);
  while (v71 != &STACK[0xD38])
  {
    v71 -= 6;
    std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::~pair((uint64_t)v71);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OU3DObjectRepresentation_mm()
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v26) = 0;
  *((void *)&v26 + 1) = @"Unknown";
  LODWORD(v27) = 1;
  *((void *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 2;
  *((void *)&v28 + 1) = *((id *)&v27 + 1);
  LODWORD(v29) = 3;
  *((void *)&v29 + 1) = *((id *)&v28 + 1);
  LODWORD(v30) = 4;
  *((void *)&v30 + 1) = *((id *)&v29 + 1);
  LODWORD(v31) = 5;
  *((void *)&v31 + 1) = *((id *)&v30 + 1);
  LODWORD(v32) = 6;
  long long v25 = @"Door";
  *((void *)&v32 + 1) = v25;
  LODWORD(v33) = 7;
  uint64_t v24 = @"Window";
  *((void *)&v33 + 1) = v24;
  LODWORD(v34) = 8;
  *((void *)&v34 + 1) = *((id *)&v31 + 1);
  LODWORD(v35) = 9;
  unint64_t v22 = @"Fireplace";
  *((void *)&v35 + 1) = v22;
  LODWORD(v36) = 10;
  *((void *)&v36 + 1) = *((id *)&v34 + 1);
  LODWORD(v37) = 11;
  *((void *)&v37 + 1) = *((id *)&v36 + 1);
  LODWORD(v38) = 12;
  uint8x8_t v23 = @"Stairs";
  *((void *)&v38 + 1) = v23;
  LODWORD(v39) = 13;
  uint64_t v18 = @"Bed";
  *((void *)&v39 + 1) = v18;
  LODWORD(v40) = 14;
  uint64_t v41 = @"Cabinet";
  int v42 = 15;
  uint8x8_t v21 = @"Chair";
  uint64_t v43 = v21;
  int v44 = 16;
  id v45 = v41;
  int v46 = 17;
  uint64_t v47 = v45;
  int v48 = 18;
  unint64_t v20 = @"Sofa";
  uint64_t v49 = v20;
  int v50 = 19;
  char v19 = @"Table";
  long long v51 = v19;
  int v52 = 20;
  id v17 = @"Toilet";
  long long v53 = v17;
  int v54 = 21;
  id v15 = @"Sink";
  uint64_t v55 = v15;
  int v56 = 22;
  char v16 = @"Bathtub";
  uint64_t v57 = v16;
  int v58 = 23;
  long long v59 = (__CFString *)*((id *)&v37 + 1);
  int v60 = 24;
  unint64_t v0 = @"Refrigerator";
  long long v61 = v0;
  int v62 = 25;
  uint64_t v1 = @"Stove";
  int v63 = v1;
  int v64 = 26;
  unint64_t v2 = @"Washer";
  char v65 = v2;
  int v66 = 27;
  unint64_t v3 = @"Oven";
  uint64_t v67 = v3;
  int v68 = 28;
  unint64_t v4 = @"Dishwasher";
  long long v69 = v4;
  int v70 = 29;
  long long v71 = v59;
  int v72 = 30;
  uint8x8_t v5 = v47;
  uint64_t v73 = v5;
  int v74 = 31;
  uint64_t v75 = v71;
  int v76 = 32;
  unint64_t v6 = @"Screen";
  __int16 v77 = v6;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v26, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v36 = xmmword_237CB5C54;
  long long v37 = unk_237CB5C64;
  long long v38 = xmmword_237CB5C74;
  long long v39 = unk_237CB5C84;
  long long v32 = xmmword_237CB5C14;
  long long v33 = unk_237CB5C24;
  long long v34 = xmmword_237CB5C34;
  long long v35 = unk_237CB5C44;
  long long v28 = xmmword_237CB5BD4;
  long long v29 = unk_237CB5BE4;
  long long v30 = xmmword_237CB5BF4;
  long long v31 = unk_237CB5C04;
  long long v26 = *(_OWORD *)"";
  long long v27 = unk_237CB5BC4;
  uint64_t v40 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v26, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v26) = 0;
  *((void *)&v26 + 1) = v5;
  LODWORD(v27) = 1;
  *((void *)&v27 + 1) = v0;
  LODWORD(v28) = 2;
  *((void *)&v28 + 1) = @"Shelf";
  LODWORD(v29) = 3;
  *((void *)&v29 + 1) = v1;
  LODWORD(v30) = 4;
  *((void *)&v30 + 1) = v18;
  LODWORD(v31) = 5;
  *((void *)&v31 + 1) = v15;
  LODWORD(v32) = 6;
  *((void *)&v32 + 1) = v2;
  LODWORD(v33) = 7;
  *((void *)&v33 + 1) = v17;
  LODWORD(v34) = 8;
  *((void *)&v34 + 1) = v16;
  LODWORD(v35) = 9;
  *((void *)&v35 + 1) = v3;
  LODWORD(v36) = 10;
  *((void *)&v36 + 1) = v4;
  LODWORD(v37) = 11;
  *((void *)&v37 + 1) = v22;
  LODWORD(v38) = 12;
  *((void *)&v38 + 1) = @"Stool";
  LODWORD(v39) = 13;
  int v8 = v21;
  *((void *)&v39 + 1) = v8;
  LODWORD(v40) = 14;
  unint64_t v9 = v19;
  uint64_t v41 = v9;
  int v42 = 15;
  uint64_t v43 = v6;
  int v44 = 16;
  unint64_t v10 = v20;
  id v45 = v10;
  int v46 = 17;
  uint64_t v47 = v23;
  int v48 = 18;
  uint64_t v49 = v24;
  int v50 = 19;
  long long v51 = v25;
  int v52 = 20;
  long long v53 = @"BuildInCabinet";
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v26, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
  *((void *)&v26 + 1) = @"Chair-chair_type-dining";
  LODWORD(v27) = 2;
  *((void *)&v27 + 1) = @"Chair-chair_type-swivel";
  LODWORD(v28) = 3;
  *((void *)&v28 + 1) = @"Chair-chair_type-other";
  LODWORD(v29) = 4;
  *((void *)&v29 + 1) = @"Chair-chair_leg_type-four";
  LODWORD(v30) = 5;
  *((void *)&v30 + 1) = @"Chair-chair_leg_type-star";
  LODWORD(v31) = 6;
  *((void *)&v31 + 1) = @"Chair-chair_leg_type-other";
  LODWORD(v32) = 7;
  *((void *)&v32 + 1) = @"Chair-chair_arm_type-missing";
  LODWORD(v33) = 8;
  *((void *)&v33 + 1) = @"Chair-chair_arm_type-existing";
  LODWORD(v34) = 9;
  *((void *)&v34 + 1) = @"Chair-chair_back_type-missing";
  LODWORD(v35) = 10;
  *((void *)&v35 + 1) = @"Chair-chair_back_type-existing";
  LODWORD(v36) = 11;
  *((void *)&v36 + 1) = @"Chair-chair_seat_height-tall_seat";
  LODWORD(v37) = 12;
  *((void *)&v37 + 1) = @"Chair-chair_seat_height-normal/low_seat";
  LODWORD(v38) = 13;
  *((void *)&v38 + 1) = @"Chair-chair_seat_shape-rectangular";
  LODWORD(v39) = 14;
  *((void *)&v39 + 1) = @"Chair-chair_seat_shape-round";
  LODWORD(v40) = 15;
  uint64_t v41 = @"Chair-chair_seat_shape-none";
  int v42 = 16;
  uint64_t v43 = @"Sofa-sofa_type-rectangular";
  int v44 = 17;
  id v45 = @"Sofa-sofa_type-lShaped";
  int v46 = 18;
  uint64_t v47 = @"Sofa-sofa_type-singleSeat";
  int v48 = 19;
  uint64_t v49 = @"Sofa-sofa_type-lShapedMain";
  int v50 = 20;
  long long v51 = @"Sofa-sofa_type-lShapedExtension";
  int v52 = 21;
  long long v53 = @"Sofa-sofa_type-lShapedMiddle";
  int v54 = 22;
  uint64_t v55 = @"Sofa-sofa_type-other";
  int v56 = 23;
  uint64_t v57 = @"Sofa-sofa_arm_type-missing";
  int v58 = 24;
  long long v59 = @"Sofa-sofa_arm_type-two_arms";
  int v60 = 25;
  long long v61 = @"Sofa-sofa_arm_type-none";
  int v62 = 26;
  int v63 = @"Sofa-sofa_back_type-missing";
  int v64 = 27;
  char v65 = @"Sofa-sofa_back_type-existing";
  int v66 = 28;
  uint64_t v67 = @"Table-table_type-desk";
  int v68 = 29;
  long long v69 = @"Table-table_type-coffee";
  int v70 = 30;
  long long v71 = @"Table-table_type-dining";
  int v72 = 31;
  uint64_t v73 = @"Table-table_type-other";
  int v74 = 32;
  uint64_t v75 = @"Table-table_shape-rectangular";
  int v76 = 33;
  __int16 v77 = @"Table-table_shape-lShaped";
  int v78 = 34;
  long long v79 = @"Table-table_shape-circularElliptic";
  int v80 = 35;
  uint64_t v81 = @"Table-table_shape-other";
  int v82 = 36;
  long long v83 = @"Table-table_leg_type-two_leg";
  int v84 = 37;
  long long v85 = @"Table-table_leg_type-four_leg";
  int v86 = 38;
  long long v87 = @"Table-table_leg_type-none";
  int v88 = 39;
  float v89 = @"Table-table_attribute-with_storage";
  int v90 = 40;
  BOOL v91 = @"Table-table_attribute-without_storage";
  int v92 = 41;
  BOOL v93 = @"Cabinet-cabinet_type-standalone_cabinet";
  int v94 = 42;
  id v95 = @"Cabinet-cabinet_type-kitchen_cabinet";
  int v96 = 43;
  uint64_t v97 = @"Cabinet-cabinet_type-nightstand";
  int v98 = 44;
  uint64_t v99 = @"Cabinet-cabinet_type-none";
  int v100 = 45;
  int v101 = @"Cabinet-cabinet_attribute-no_countertop";
  int v102 = 46;
  uint64_t v103 = @"Cabinet-cabinet_attribute-with_countertop";
  int v104 = 100;
  uint64_t v105 = @"Sofa-sofa_arm_type-existing";
  int v106 = 101;
  LODWORD(v26) = 0;
  float v107 = @"Storage-storage_type-cabinet";
  int v108 = 102;
  int v109 = @"Storage-storage_type-shelf";
  int v110 = 103;
  uint64_t v111 = @"Chair-chair_type-stool";
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)&ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v26, 50);
  for (uint64_t k = 792; k != -8; k -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], &ou3dor::k3DORSupportedAttributeTypeMap, &dword_237C17000);
  __cxx_global_var_init_178();
  *(void *)&long long v26 = v8;
  *((void *)&v26 + 1) = v9;
  *(void *)&long long v27 = v10;
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100]((uint64_t)&ou3dor::k3DORTargetClasses, (void **)&v26, 3);
  for (uint64_t m = 16; m != -8; m -= 8)

  __cxa_atexit((void (*)(void *))std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::~set[abi:ne180100], &ou3dor::k3DORTargetClasses, &dword_237C17000);
}

void sub_237C8084C(_Unwind_Exception *a1)
{
  for (uint64_t i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_237C80C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    unint64_t v13 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      -[OUSession runWithConfiguration:].cold.4();
    }

    unint64_t v14 = [v11 delegate];
    char v15 = objc_opt_respondsToSelector();

    if (v15)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        -[OUSession runWithConfiguration:]();
      }

      char v16 = [v11 delegate];
      [v16 session:v11 didFailWithError:-1];
    }
    __cxa_end_catch();
    JUMPOUT(0x237C80BA4);
  }

  _Unwind_Resume(a1);
}

void sub_237C81048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_237C81234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C81634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,id location)
{
  objc_destroyWeak(v31);
  _Block_object_dispose(&a24, 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_237C81890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C81A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C81CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C8200C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C82250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C82394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_2_0(NSObject *a1)
{
  void *v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

float OU::getLineEquation(float32x2_t *a1, float *a2, _DWORD *a3, float *a4)
{
  if (a2 && a3)
  {
    if (a4)
    {
      float32x2_t v4 = *a1;
      float32x2_t v5 = a1[1];
      LODWORD(v6) = HIDWORD(*(unint64_t *)a1);
      *a2 = v5.f32[1] - v6;
      *a3 = vsub_f32(v4, v5).u32[0];
      float result = vmlas_n_f32(vmuls_lane_f32(-v4.f32[0], v5, 1), v6, v5.f32[0]);
      *a4 = result;
    }
  }
  return result;
}

float OU::length(float32x2_t *a1)
{
  float32x2_t v1 = vsub_f32(*a1, a1[1]);
  return sqrtf(vaddv_f32(vmul_f32(v1, v1)));
}

float OU::distance(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2 = a1[1];
  LODWORD(v3) = HIDWORD(*(unint64_t *)a1);
  float v4 = v2.f32[1] - v3;
  float32x2_t v5 = vsub_f32(*a1, v2);
  float v6 = vmlas_n_f32(vmuls_lane_f32(-COERCE_FLOAT(*a1), v2, 1), v3, v2.f32[0]);
  float v7 = vmlas_n_f32(vmul_lane_f32(v5, *a2, 1).f32[0], v2.f32[1] - v3, COERCE_FLOAT(*a2));
  return sqrtf((float)((float)(v6 + v7) * (float)(v6 + v7)) / (float)(vmul_f32(v5, v5).f32[0] + (float)(v4 * v4)));
}

float OU::distance2(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2 = a1[1];
  LODWORD(v3) = HIDWORD(*(unint64_t *)a1);
  float v4 = v2.f32[1] - v3;
  float32x2_t v5 = vsub_f32(*a1, v2);
  float v6 = vmlas_n_f32(vmuls_lane_f32(-COERCE_FLOAT(*a1), v2, 1), v3, v2.f32[0]);
  float v7 = vmlas_n_f32(vmul_lane_f32(v5, *a2, 1).f32[0], v2.f32[1] - v3, COERCE_FLOAT(*a2));
  return (float)((float)(v6 + v7) * (float)(v6 + v7)) / (float)(vmul_f32(v5, v5).f32[0] + (float)(v4 * v4));
}

uint64_t OU::intersect(int32x2_t *a1, int32x2_t *a2, float32x2_t *a3)
{
  if (!a3) {
    return 0;
  }
  v3.i32[0] = (__int32)*a1;
  v3.i32[1] = HIDWORD(*(void *)&a2[1]);
  v4.i32[0] = (__int32)a1[1];
  v4.i32[1] = HIDWORD(*(unint64_t *)a2);
  v5.i32[0] = (__int32)*a2;
  v5.i32[1] = HIDWORD(*(void *)&a1[1]);
  float32x2_t v6 = vsub_f32(v3, v4);
  v4.i32[0] = (__int32)a2[1];
  _D5.i32[1] = HIDWORD(*(unint64_t *)a1);
  _D6 = vsub_f32(v5, _D5);
  float v8 = -(float)((float)((float)-v6.f32[1] * v6.f32[0]) + (float)(_D6.f32[1] * _D6.f32[0]));
  __asm { FMLA            S5, S6, V6.S[1] }
  if (_D5.f32[0] >= 0.0) {
    float v8 = _D5.f32[0];
  }
  if (v8 < 0.00000001) {
    return 0;
  }
  float32x2_t v14 = vmla_f32(vmul_f32((float32x2_t)vzip2_s32(a2[1], a1[1]), vneg_f32((float32x2_t)vzip1_s32(*a2, *a1))), (float32x2_t)vzip2_s32(*a2, *a1), (float32x2_t)vzip1_s32(a2[1], a1[1]));
  *a3 = vdiv_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v14), vneg_f32(_D6)), v14, v6), (float32x2_t)vdup_lane_s32((int32x2_t)_D5, 0));
  return 1;
}

char *OU::Polygon::Polygon(char *a1, char *a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  if (a3)
  {
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(a1, a2, (uint64_t)&a2[8 * a3], a3);
    if (a3 >= 3)
    {
      float32x2_t v5 = *(float32x2_t **)a1;
      float32x2_t v6 = **(float32x2_t **)a1;
      unint64_t v7 = *((void *)a1 + 1) - *(void *)a1;
      if ((int)(v7 >> 3) < 1)
      {
        float32x2_t v9 = **(float32x2_t **)a1;
      }
      else
      {
        uint64_t v8 = (v7 >> 3);
        float32x2_t v9 = **(float32x2_t **)a1;
        do
        {
          float32x2_t v10 = *v5++;
          float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v10), (int8x8_t)v10, (int8x8_t)v9);
          float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v6), (int8x8_t)v10, (int8x8_t)v6);
          --v8;
        }
        while (v8);
      }
      *((float32x2_t *)a1 + 3) = v9;
      *((float32x2_t *)a1 + 4) = v6;
    }
  }
  return a1;
}

void sub_237C8275C(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t **OU::Polygon::Polygon(float32x2_t **this, const CGRect *a2)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)this, 4uLL);
  CGFloat MinX = CGRectGetMinX(*a2);
  CGFloat MinY = CGRectGetMinY(*a2);
  v5.f64[0] = MinX;
  v5.f64[1] = MinY;
  **this = vcvt_f32_f64(v5);
  CGFloat x = a2->origin.x;
  v5.f64[0] = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  CGFloat v29 = CGRectGetMinX(*(CGRect *)((char *)&v5 - 8));
  CGFloat MaxY = CGRectGetMaxY(*a2);
  v10.f64[0] = v29;
  v10.f64[1] = MaxY;
  (*this)[1] = vcvt_f32_f64(v10);
  CGFloat v11 = a2->origin.x;
  v10.f64[0] = a2->origin.y;
  CGFloat v12 = a2->size.width;
  CGFloat v13 = a2->size.height;
  CGFloat MaxX = CGRectGetMaxX(*(CGRect *)((char *)&v10 - 8));
  CGFloat v14 = CGRectGetMaxY(*a2);
  v15.f64[0] = MaxX;
  v15.f64[1] = v14;
  (*this)[2] = vcvt_f32_f64(v15);
  CGFloat v16 = a2->origin.x;
  v15.f64[0] = a2->origin.y;
  CGFloat v17 = a2->size.width;
  CGFloat v18 = a2->size.height;
  CGFloat v31 = CGRectGetMaxX(*(CGRect *)((char *)&v15 - 8));
  CGFloat v19 = CGRectGetMinY(*a2);
  v20.f64[0] = v31;
  v20.f64[1] = v19;
  (*this)[3] = vcvt_f32_f64(v20);
  uint8x8_t v21 = *this;
  float32x2_t v22 = **this;
  unint64_t v23 = (char *)this[1] - (char *)*this;
  if ((int)(v23 >> 3) < 1)
  {
    float32x2_t v25 = **this;
  }
  else
  {
    uint64_t v24 = (v23 >> 3);
    float32x2_t v25 = **this;
    do
    {
      float32x2_t v26 = *v21++;
      float32x2_t v25 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v26), (int8x8_t)v26, (int8x8_t)v25);
      float32x2_t v22 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v26, v22), (int8x8_t)v26, (int8x8_t)v22);
      --v24;
    }
    while (v24);
  }
  this[3] = (float32x2_t *)v25;
  this[4] = (float32x2_t *)v22;
  return this;
}

void sub_237C828C4(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

uint64_t OU::Polygon::PointInsidePolygon(uint64_t a1, float32x2_t *a2)
{
  unint64_t v2 = *(float32x2_t **)a1;
  unint64_t v3 = *(void *)(a1 + 8) - *(void *)a1;
  if ((int)(v3 >> 3) < 3) {
    return 0;
  }
  float32x2_t v4 = *a2;
  float32x2_t v5 = *(float32x2_t *)(a1 + 24);
  if (vmvn_s8((int8x8_t)vcge_f32(*a2, v5)).u8[0]) {
    return 0;
  }
  float32x2_t v6 = *(float32x2_t *)(a1 + 32);
  if (vmvn_s8((int8x8_t)vcge_f32(v6, v4)).u8[0]) {
    return 0;
  }
  int8x8_t v7 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vzip2_s32((int32x2_t)v6, (int32x2_t)v4), (float32x2_t)vzip2_s32((int32x2_t)v4, (int32x2_t)v5)));
  if ((v7.i32[1] | v7.i32[0])) {
    return 0;
  }
  uint64_t v9 = 0;
  char v10 = 0;
  float32x2_t v11 = vsub_f32(vmul_f32(vadd_f32(*v2, v2[1]), (float32x2_t)0x3F0000003F000000), v4);
  float32x2_t v12 = vmul_f32(v11, v11);
  float32x2_t v13 = vsub_f32(v5, v6);
  unsigned __int32 v14 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
  float32x2_t v15 = vrsqrte_f32((float32x2_t)v14);
  float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14, vmul_f32(v15, v15)));
  float32x2_t v17 = vmla_n_f32(v4, vmul_n_f32(v11, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14, vmul_f32(v16, v16))).f32[0]), sqrtf(vaddv_f32(vmul_f32(v13, v13))) + sqrtf(vaddv_f32(v12)));
  v24[0] = (int32x2_t)*a2;
  v24[1] = (int32x2_t)v17;
  float32x2_t v23 = 0;
  uint64_t v18 = (v3 >> 3);
  do
  {
    float32x2_t v19 = v2[v9];
    if (v18 - 1 == v9) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v9 + 1;
    }
    float32x2_t v21 = v2[v20];
    v22[0] = (int32x2_t)v2[v9];
    v22[1] = (int32x2_t)v21;
    if (OU::intersect(v24, v22, &v23)
      && vaddv_f32(vmul_f32(vsub_f32(v23, v19), vsub_f32(v23, v21))) < 0.0
      && vaddv_f32(vmul_f32(vsub_f32(v23, v4), vsub_f32(v23, v17))) < 0.0)
    {
      ++v10;
    }
    ++v9;
  }
  while (v18 != v9);
  return v10 & 1;
}

float OU::area(OU *this, const Polygon *a2)
{
  uint64_t v2 = *((void *)this + 1) - *(void *)this;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    if (v3 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v3;
    }
    unint64_t v5 = 1;
    float32x2_t v6 = *(uint64_t **)this;
    do
    {
      uint64_t v7 = *v6++;
      _V1.S[1] = HIDWORD(v7);
      _D2 = *(void *)(*(void *)this + 8 * v5);
      __asm { FMLS            S0, S2, V1.S[1] }
      unint64_t v5 = (v5 + 1) % v3;
      --v4;
    }
    while (v4);
  }
  else
  {
    _S0 = 0.0;
  }
  return fabsf(_S0) * 0.5;
}

float OU::AngleDifference(OU *this, float a2, float a3)
{
  __float2 v3 = __sincosf_stret(a2 - a3);
  return fabsf(atan2f(v3.__sinval, v3.__cosval));
}

void OU::clip(OU *this@<X0>, const Polygon *a2@<X1>, char *a3@<X8>)
{
  uint64_t v15 = 0;
  float32x2_t v16 = &v15;
  uint64_t v17 = 0x4812000000;
  uint64_t v18 = __Block_byref_object_copy__1;
  float32x2_t v19 = __Block_byref_object_dispose__1;
  uint64_t v20 = "";
  float32x2_t v22 = 0;
  uint64_t v23 = 0;
  std::string __p = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)this, *((void *)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  float32x2_t v12 = ___ZN2OU4clipERKNS_7PolygonES2__block_invoke;
  float32x2_t v13 = &unk_264CFAFE0;
  unsigned __int32 v14 = &v15;
  uint64_t v6 = *(void *)&a2->polyBBox.right - *(void *)&a2->polySize;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6 >> 3;
    }
    unint64_t v10 = 1;
    do
    {
      ((void (*)(void *, double, double))v12)(v11, *(double *)(*(void *)&a2->polySize + 8 * v7++), *(double *)(*(void *)&a2->polySize + 8 * v10));
      unint64_t v10 = (v10 + 1) % v8;
    }
    while (v9 != v7);
  }
  OU::Polygon::Polygon(a3, (char *)v16[6], (v16[7] - v16[6]) >> 3);
  _Block_object_dispose(&v15, 8);
  if (__p)
  {
    float32x2_t v22 = __p;
    operator delete(__p);
  }
}

void sub_237C82CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN2OU4clipERKNS_7PolygonES2__block_invoke(uint64_t a1, int32x2_t a2, float32x2_t a3)
{
  float32x2_t v47 = (float32x2_t)a2;
  float32x2_t v48 = a3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v45 = 0;
  uint64_t v46 = 0;
  int v44 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v44, *(const void **)(v4 + 48), *(void *)(v4 + 56), (uint64_t)(*(void *)(v4 + 56) - *(void *)(v4 + 48)) >> 3);
  uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  unint64_t v5 = 0;
  if (v45 != v44)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (v45 - v44) >> 3;
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v45 - v44) >> 3;
    }
    unint64_t v9 = 1;
    do
    {
      float32x2_t v10 = *(float32x2_t *)&v44[8 * v9];
      v50[0] = *(int32x2_t *)&v44[8 * v6];
      v50[1] = (int32x2_t)v10;
      float v11 = v48.f32[1] - v47.f32[1];
      float32x2_t v12 = vsub_f32(v47, v48);
      float v13 = vmlas_n_f32(vmuls_lane_f32(-v47.f32[0], v48, 1), v47.f32[1], v48.f32[0]);
      float v14 = vmlas_n_f32(vmuls_lane_f32(v12.f32[0], (float32x2_t)v50[0], 1), v48.f32[1] - v47.f32[1], *(float *)v50[0].i32);
      float v15 = vmul_f32(v12, v12).f32[0] + (float)(v11 * v11);
      LODWORD(v16) = vsub_f32(v48, v47).u32[0];
      BOOL v17 = vmlas_n_f32(-(float)(vsub_f32((float32x2_t)v50[0], v47).f32[0] * (float)(v48.f32[1] - v47.f32[1])), *(float *)&v50[0].i32[1] - v47.f32[1], v16) < 0.0;
      if ((float)((float)((float)(v13 + v14) * (float)(v13 + v14)) / v15) < 0.00000001) {
        BOOL v17 = 1;
      }
      float v18 = vmlas_n_f32(vmuls_lane_f32(v12.f32[0], v10, 1), v11, v10.f32[0]);
      if ((float)((float)((float)(v13 + v18) * (float)(v13 + v18)) / v15) >= 0.00000001
        && vmlas_n_f32(-(float)(vsub_f32(v10, v47).f32[0] * v11), v10.f32[1] - v47.f32[1], v16) >= 0.0)
      {
        if (!v17) {
          goto LABEL_50;
        }
        float32x2_t v49 = 0;
        if (!OU::intersect(v50, (int32x2_t *)&v47, &v49)) {
          goto LABEL_50;
        }
        if (v5 >= v43)
        {
          uint64_t v33 = v5 - v41;
          if ((unint64_t)(v33 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v34 = ((char *)v43 - (char *)v41) >> 2;
          if (v34 <= v33 + 1) {
            unint64_t v34 = v33 + 1;
          }
          if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v34;
          }
          if (v28) {
            CGFloat v29 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v28);
          }
          else {
            CGFloat v29 = 0;
          }
          long long v30 = (float32x2_t *)&v29[8 * v33];
          float32x2_t *v30 = v49;
          unint64_t v5 = v30 + 1;
          CGFloat v31 = v42;
          if (v42 != v41)
          {
            do
            {
              float32x2_t v35 = v31[-1];
              --v31;
              v30[-1] = v35;
              --v30;
            }
            while (v31 != v41);
LABEL_46:
            CGFloat v31 = v41;
          }
LABEL_47:
          uint64_t v41 = v30;
          uint64_t v43 = (float32x2_t *)&v29[8 * v28];
          if (v31) {
            operator delete(v31);
          }
          goto LABEL_49;
        }
        *v5++ = v49;
      }
      else
      {
        float32x2_t v40 = v10;
        if (!v17)
        {
          float32x2_t v49 = 0;
          if (OU::intersect(v50, (int32x2_t *)&v47, &v49))
          {
            if (v5 >= v43)
            {
              uint64_t v19 = v5 - v41;
              if ((unint64_t)(v19 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v20 = ((char *)v43 - (char *)v41) >> 2;
              if (v20 <= v19 + 1) {
                unint64_t v20 = v19 + 1;
              }
              if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v20;
              }
              if (v21) {
                float32x2_t v22 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v21);
              }
              else {
                float32x2_t v22 = 0;
              }
              uint64_t v23 = (float32x2_t *)&v22[8 * v19];
              *uint64_t v23 = v49;
              unint64_t v5 = v23 + 1;
              uint64_t v24 = v42;
              if (v42 != v41)
              {
                do
                {
                  float32x2_t v25 = v24[-1];
                  --v24;
                  v23[-1] = v25;
                  --v23;
                }
                while (v24 != v41);
                uint64_t v24 = v41;
              }
              uint64_t v41 = v23;
              uint64_t v43 = (float32x2_t *)&v22[8 * v21];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *v5++ = v49;
            }
            int v42 = v5;
          }
        }
        if (v5 >= v43)
        {
          uint64_t v26 = v5 - v41;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = ((char *)v43 - (char *)v41) >> 2;
          if (v27 <= v26 + 1) {
            unint64_t v27 = v26 + 1;
          }
          if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            CGFloat v29 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v28);
          }
          else {
            CGFloat v29 = 0;
          }
          long long v30 = (float32x2_t *)&v29[8 * v26];
          float32x2_t *v30 = v40;
          unint64_t v5 = v30 + 1;
          CGFloat v31 = v42;
          if (v42 != v41)
          {
            do
            {
              float32x2_t v32 = v31[-1];
              --v31;
              v30[-1] = v32;
              --v30;
            }
            while (v31 != v41);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        *v5++ = v40;
      }
LABEL_49:
      int v42 = v5;
LABEL_50:
      ++v6;
      unint64_t v9 = (v9 + 1) % v7;
    }
    while (v6 != v8);
  }
  long long v36 = *(void **)(*(void *)(a1 + 32) + 8);
  long long v37 = (void *)v36[6];
  if (v37)
  {
    v36[7] = v37;
    operator delete(v37);
    v36[6] = 0;
    v36[7] = 0;
    long long v36[8] = 0;
    unint64_t v5 = v42;
  }
  long long v39 = v43;
  long long v38 = v44;
  v36[6] = v41;
  v36[7] = v5;
  long long v36[8] = v39;
  if (v38)
  {
    id v45 = v38;
    operator delete(v38);
  }
}

void sub_237C83124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void OU::ConvexHull(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1] - *a1;
  unint64_t v6 = v5 >> 3;
  if ((int)(v5 >> 3) >= 3)
  {
    int v9 = 0;
    unint64_t v10 = (v5 >> 3);
    uint64_t v11 = v4 + 4;
    float32x2_t v12 = (float *)(v4 + 12);
    uint64_t v13 = 1;
    do
    {
      float v14 = *v12;
      v12 += 2;
      if (v14 < *(float *)(v11 + 8 * v9)) {
        int v9 = v13;
      }
      ++v13;
    }
    while (v10 != v13);
    std::string __p = 0;
    int v92 = 0;
    v93[0] = 0;
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&__p, v10);
    uint64_t v15 = *a1;
    float v16 = v92;
    if ((unint64_t)v92 >= v93[0])
    {
      uint64_t v18 = (v92 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = (uint64_t)(v93[0] - (void)__p) >> 2;
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      if (v93[0] - (void)__p >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v21 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v93, v20);
      }
      else {
        unint64_t v21 = 0;
      }
      float32x2_t v22 = &v21[8 * v18];
      uint64_t v23 = &v21[8 * v20];
      *(void *)float32x2_t v22 = *(void *)(v15 + 8 * v9);
      BOOL v17 = v22 + 8;
      float32x2_t v25 = (char *)__p;
      uint64_t v24 = v92;
      if (v92 != __p)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)__p;
      }
      std::string __p = v22;
      int v92 = v17;
      v93[0] = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)int v92 = *(void *)(v15 + 8 * v9);
      BOOL v17 = v16 + 8;
    }
    int v92 = v17;
    if (a2)
    {
      unint64_t v27 = *(_DWORD **)a2;
      *(void *)(a2 + 8) = *(void *)a2;
      unint64_t v28 = *(void *)(a2 + 16);
      if ((unint64_t)v27 >= v28)
      {
        uint64_t v30 = v28 - (void)v27;
        uint64_t v31 = v30 >> 1;
        if ((unint64_t)(v30 >> 1) <= 1) {
          uint64_t v31 = 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        uint64_t v33 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v32);
        unint64_t v34 = *(_DWORD **)a2;
        float32x2_t v35 = *(_DWORD **)(a2 + 8);
        long long v37 = &v33[v36];
        *uint64_t v33 = v9;
        CGFloat v29 = v33 + 1;
        while (v35 != v34)
        {
          int v38 = *--v35;
          *--uint64_t v33 = v38;
        }
        *(void *)a2 = v33;
        *(void *)(a2 + 8) = v29;
        *(void *)(a2 + 16) = v37;
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *unint64_t v27 = v9;
        CGFloat v29 = v27 + 1;
      }
      *(void *)(a2 + 8) = v29;
    }
    memset(v89, 0, sizeof(v89));
    int v90 = 1065353216;
    long long v83 = a3;
    while (1)
    {
      long long v39 = (char *)__p;
      uint64_t v40 = (v92 - (unsigned char *)__p) >> 3;
      uint64_t v41 = v40 - 1;
      float32x2_t v42 = (float32x2_t)1065353216;
      if (v92 - (unsigned char *)__p != 8) {
        float32x2_t v42 = vsub_f32(*(float32x2_t *)((char *)__p + 8 * v41), *(float32x2_t *)((char *)__p + 8 * v40 - 16));
      }
      LODWORD(v85) = -1;
      float32x2_t v43 = vmul_f32(v42, v42);
      int v88 = 0;
      float32x2_t v84 = (float32x2_t)vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
      float v44 = 0.0;
      float v45 = -2.0;
      do
      {
        uint64_t v46 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v89, &v88);
        int v47 = v88;
        if (!v46)
        {
          float32x2_t v48 = vsub_f32(*(float32x2_t *)(*a1 + 8 * v88), *(float32x2_t *)&v39[8 * v41]);
          float32x2_t v49 = vrsqrte_f32(v84);
          float32x2_t v50 = vmul_f32(v49, vrsqrts_f32(v84, vmul_f32(v49, v49)));
          float32x2_t v51 = vmul_f32(v48, v48);
          float32x2_t v52 = vmul_n_f32(v42, vmul_f32(v50, vrsqrts_f32(v84, vmul_f32(v50, v50))).f32[0]);
          LODWORD(v53) = vadd_f32(v51, (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1)).u32[0];
          float32x2_t v54 = vrsqrte_f32((float32x2_t)LODWORD(v53));
          float32x2_t v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)LODWORD(v53), vmul_f32(v54, v54)));
          float v56 = vaddv_f32(vmul_f32(v52, vmul_n_f32(v48, vmul_f32(v55, vrsqrts_f32((float32x2_t)LODWORD(v53), vmul_f32(v55, v55))).f32[0])));
          double v57 = (float)(v56 - v45);
          if (v57 >= -0.0001)
          {
            float v58 = sqrtf(v53);
            if (v57 > 0.0001 || v58 > v44)
            {
              LODWORD(v85) = v88;
              float v44 = v58;
              float v45 = v56;
            }
          }
        }
        ++v88;
      }
      while (v47 + 1 < (int)v6);
      if (v85 == -1 || v85 == v9) {
        break;
      }
      uint64_t v60 = (int)v85;
      uint64_t v61 = *a1;
      int v62 = v92;
      if ((unint64_t)v92 >= v93[0])
      {
        uint64_t v64 = (v92 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v64 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v65 = (uint64_t)(v93[0] - (void)__p) >> 2;
        if (v65 <= v64 + 1) {
          unint64_t v65 = v64 + 1;
        }
        if (v93[0] - (void)__p >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66) {
          uint64_t v67 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v93, v66);
        }
        else {
          uint64_t v67 = 0;
        }
        int v68 = &v67[8 * v64];
        *(void *)int v68 = *(void *)(v61 + 8 * v60);
        int v63 = v68 + 8;
        int v70 = (char *)__p;
        long long v69 = v92;
        if (v92 != __p)
        {
          do
          {
            uint64_t v71 = *((void *)v69 - 1);
            v69 -= 8;
            *((void *)v68 - 1) = v71;
            v68 -= 8;
          }
          while (v69 != v70);
          long long v69 = (char *)__p;
        }
        std::string __p = v68;
        int v92 = v63;
        v93[0] = &v67[8 * v66];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *(void *)int v92 = *(void *)(v61 + 8 * (int)v85);
        int v63 = v62 + 8;
      }
      int v92 = v63;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v89, (int *)&v85, &v85);
      if (a2)
      {
        uint64_t v73 = *(_DWORD **)(a2 + 8);
        unint64_t v72 = *(void *)(a2 + 16);
        if ((unint64_t)v73 >= v72)
        {
          uint64_t v75 = *(_DWORD **)a2;
          uint64_t v76 = ((uint64_t)v73 - *(void *)a2) >> 2;
          unint64_t v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v78 = v72 - (void)v75;
          if (v78 >> 1 > v77) {
            unint64_t v77 = v78 >> 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            int v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v79);
            uint64_t v75 = *(_DWORD **)a2;
            uint64_t v73 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            int v80 = 0;
          }
          uint64_t v81 = &v80[4 * v76];
          *(_DWORD *)uint64_t v81 = v85;
          int v74 = v81 + 4;
          while (v73 != v75)
          {
            int v82 = *--v73;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          *(void *)a2 = v81;
          *(void *)(a2 + 8) = v74;
          *(void *)(a2 + 16) = &v80[4 * v79];
          if (v75) {
            operator delete(v75);
          }
        }
        else
        {
          _DWORD *v73 = v85;
          int v74 = v73 + 1;
        }
        *(void *)(a2 + 8) = v74;
      }
    }
    OU::Polygon::Polygon((char *)&v85, (char *)__p, (v92 - (unsigned char *)__p) >> 3);
    *(_OWORD *)long long v83 = v85;
    *((void *)v83 + 2) = v86;
    *(_OWORD *)(v83 + 24) = v87;
    v83[40] = 1;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v89);
    if (__p)
    {
      int v92 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a3 = 0;
    a3[40] = 0;
  }
}

void sub_237C836C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    float v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    float v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    BOOL v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      BOOL v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void OUDnnInferenceInterface::~OUDnnInferenceInterface(OUDnnInferenceInterface *this)
{
  *(void *)this = &unk_26EAD6760;
  for (uint64_t i = (CVPixelBufferRef *)((char *)this + 24); ; CVPixelBufferRelease(i[5]))
  {
    uint64_t i = (CVPixelBufferRef *)*i;
    if (!i) {
      break;
    }
  }
  for (uint64_t j = (CVPixelBufferRef *)((char *)this + 64); ; CVPixelBufferRelease(j[5]))
  {
    uint64_t j = (CVPixelBufferRef *)*j;
    if (!j) {
      break;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table((uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockCVPixelBuffers(CVPixelBufferLockFlags lockFlags, uint64_t a2)
{
  CVPixelBufferLockFlags v2 = lockFlags;
  __float2 v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    __float2 v3 = (uint64_t **)*v3;
    if (!v3) {
      break;
    }
    lockFlags = CVPixelBufferLockBaseAddress((CVPixelBufferRef)v3[5], v2);
    if (lockFlags)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      __n128 v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to lock buffer.", &v6, &v7);
      MEMORY[0x237E2C200](exception, &v7, v5);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return lockFlags;
}

void sub_237C8395C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockCVPixelBuffers(CVPixelBufferLockFlags unlockFlags, uint64_t a2)
{
  CVPixelBufferLockFlags v2 = unlockFlags;
  __float2 v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    __float2 v3 = (uint64_t **)*v3;
    if (!v3) {
      break;
    }
    unlockFlags = CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v3[5], v2);
    if (unlockFlags)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      __n128 v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to unlock buffer.", &v6, &v7);
      MEMORY[0x237E2C200](exception, &v7, v5);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return unlockFlags;
}

void sub_237C83A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockInputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags lockFlags)
{
  return OUDnnInferenceInterface::LockCVPixelBuffers(lockFlags, (uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockInputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags unlockFlags)
{
  return OUDnnInferenceInterface::UnlockCVPixelBuffers(unlockFlags, (uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockOutputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags lockFlags)
{
  return OUDnnInferenceInterface::LockCVPixelBuffers(lockFlags, (uint64_t)this + 48);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockOutputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags unlockFlags)
{
  return OUDnnInferenceInterface::UnlockCVPixelBuffers(unlockFlags, (uint64_t)this + 48);
}

uint64_t OUDnnInferenceInterface::CreateIOBuffer(uint64_t a1, std::string::size_type a2, char **a3, _anonymous_namespace_ *a4, int a5)
{
  uint64_t v8 = 48;
  if (a5) {
    uint64_t v8 = 8;
  }
  uint64_t v9 = a1 + v8;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + v8), (unsigned __int8 *)a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("]: duplicated buffer name - ", &v31, &v32);
    int v22 = *(char *)(a2 + 23);
    if (v22 >= 0) {
      uint64_t v23 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v23 = *(const std::string::value_type **)a2;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(a2 + 8);
    }
    float32x2_t v25 = std::string::append(&v32, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x237E2C200](exception, &v33);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v33.__r_.__value_.__r.__words[0] = a2;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v33);
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)*a3;
  *((void *)v10 + 8) = v12;
  uint64_t v13 = a3[1] - v11;
  if ((unint64_t)v13 >= 9)
  {
    unint64_t v14 = v13 >> 3;
    if (v14 <= 2) {
      unint64_t v14 = 2;
    }
    unint64_t v15 = v14 - 1;
    float v16 = (uint64_t *)(v11 + 8);
    do
    {
      uint64_t v17 = *v16++;
      v12 *= v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBuffer = CreateCVPixelBuffer(0x40u / SizeOf, (v12 + (unint64_t)(0x40u / SizeOf) - 1) / (0x40u / SizeOf));
  *((void *)v10 + 5) = CVPixelBuffer;
  *((_DWORD *)v10 + 12) = a4;
  *((void *)v10 + 8) = v12;
  if (v10 + 72 != (unsigned __int8 *)a3) {
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v10 + 72, *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 3);
  }
  if (CVPixelBufferLockBaseAddress(CVPixelBuffer, 1uLL))
  {
    unint64_t v27 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    __n128 v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to lock buffer.", &v32, &v33);
    MEMORY[0x237E2C200](v27, &v33, v28);
    __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *((void *)v10 + 7) = CVPixelBufferGetBaseAddress(CVPixelBuffer);
  uint64_t result = CVPixelBufferUnlockBaseAddress(CVPixelBuffer, 1uLL);
  if (result)
  {
    CGFloat v29 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    __n128 v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to unlock buffer.", &v32, &v33);
    MEMORY[0x237E2C200](v29, &v33, v30);
    __cxa_throw(v29, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_237C83DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (v27) {
    __cxa_free_exception(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::GetSizeOf(_anonymous_namespace_ *this)
{
  int v1 = (int)this;
  uint64_t result = 4;
  if (v1 > 1278226533)
  {
    if (v1 != 1278226534)
    {
      if (v1 != 1278226536) {
        goto LABEL_9;
      }
      return 2;
    }
  }
  else if (v1 != 1111970369)
  {
    if (v1 == 1278226488) {
      return 1;
    }
LABEL_9:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported OSType.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_237C83F5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDnnInferenceInterface::GetInputSpan<half,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<half,void>(a2, (void *)(a1 + 8));
}

uint64_t OUDnnInferenceInterface::GetSpan<half,void>(unsigned __int8 *a1, void *a2)
{
  CVPixelBufferLockFlags v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, a1);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __float2 v3 = v2;
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] Getting data span using incorrect type.", &v6, &v7);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v3 + 7);
}

void sub_237C84070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t OUDnnInferenceInterface::GetInputSpan<float,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<float,void>(a2, (void *)(a1 + 8));
}

uint64_t OUDnnInferenceInterface::GetSpan<float,void>(unsigned __int8 *a1, void *a2)
{
  CVPixelBufferLockFlags v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, a1);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __float2 v3 = v2;
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] Getting data span using incorrect type.", &v6, &v7);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  return *((void *)v3 + 7);
}

void sub_237C841D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t OUDnnInferenceInterface::GetOutputSpan<half,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<half,void>(a2, (void *)(a1 + 48));
}

uint64_t OUDnnInferenceInterface::GetOutputSpan<float,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<float,void>(a2, (void *)(a1 + 48));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  CVPixelBufferLockFlags v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    CVPixelBufferLockFlags v2 = a2;
    do
    {
      __float2 v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      CVPixelBufferLockFlags v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>(uint64_t a1)
{
  CVPixelBufferLockFlags v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  __float2 v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_237C845BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_237C84670(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CVPixelBufferLockFlags v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void _GLOBAL__sub_I_OUDnnInferenceInterface_mm()
{
  uint64_t v0 = (void *)MEMORY[0x237E2CC70]();
  std::string::basic_string[abi:ne180100]<0>(kClassName, "OUDnnInferenceInterface");
  __cxa_atexit(MEMORY[0x263F8C0B8], kClassName, &dword_237C17000);
}

uint64_t _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEED1B8ne180100Ev(uint64_t a1)
{
  return a1;
}

uint64_t std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::~multimap[abi:ne180100](uint64_t a1)
{
  return a1;
}

void sub_237C84A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C84B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C84C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C85324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  _Unwind_Resume(a1);
}

void ou3dod::OU3DODInterface::GetDetectedBoxes(ou3dod::OU3DODInterface *this@<X0>, NSString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v8 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  __n128 v5 = (const OUBox3d *)*((void *)this + 1);
  std::string v6 = (const OUBox3d *)*((void *)this + 2);
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      if ((NSString *)v5[1].var5.var0 == v8)
      {
        if ((unint64_t)v7 >= a3[2])
        {
          uint64_t v7 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a3, v5);
        }
        else
        {
          OUBox3d::OUBox3d(v7, v5);
          uint64_t v7 = (OUBox3d *)((char *)v7 + 224);
          a3[1] = (uint64_t)v7;
        }
        a3[1] = (uint64_t)v7;
      }
      __n128 v5 = (const OUBox3d *)((char *)v5 + 224);
    }
    while (v5 != v6);
  }
}

void sub_237C855A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void CheckOutputValidation(void *a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  memset(v48, 0, sizeof(v48));
  int v49 = 1065353216;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  obuint64_t j = a1;
  uint64_t v1 = [obj countByEnumeratingWithState:&v44 objects:v64 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v45;
    do
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        if (*(void *)v45 != v2) {
          objc_enumerationMutation(obj);
        }
        unint64_t v4 = [*(id *)(*((void *)&v44 + 1) + 8 * i) identifier];
        id v5 = [v4 UUIDString];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 UTF8String]);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v48, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SBYTE7(v55) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v1 = [obj countByEnumeratingWithState:&v44 objects:v64 count:16];
    }
    while (v1);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v32 = obj;
  uint64_t v6 = [v32 countByEnumeratingWithState:&v40 objects:v63 count:16];
  if (v6)
  {
    uint64_t v33 = *(void *)v41;
    *(void *)&long long v7 = 138412290;
    long long v31 = v7;
    do
    {
      uint64_t v8 = 0;
      uint64_t v34 = v6;
      do
      {
        if (*(void *)v41 != v33) {
          objc_enumerationMutation(v32);
        }
        unint64_t v9 = *(void **)(*((void *)&v40 + 1) + 8 * v8);
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        unint64_t v10 = objc_msgSend(v9, "boxesDict", v31);
        uint64_t v11 = [v10 countByEnumeratingWithState:&v36 objects:v62 count:16];
        if (v11)
        {
          uint64_t v12 = *(void *)v37;
          do
          {
            uint64_t v13 = 0;
            do
            {
              if (*(void *)v37 != v12) {
                objc_enumerationMutation(v10);
              }
              unint64_t v14 = *(void **)(*((void *)&v36 + 1) + 8 * v13);
              unint64_t v15 = [v9 boxesDict];
              unint64_t v16 = [v15 objectForKey:v14];
              BOOL v17 = v16 == 0;

              if (!v17)
              {
                long long v60 = 0u;
                long long v61 = 0u;
                long long v58 = 0u;
                long long v59 = 0u;
                long long v56 = 0u;
                long long v57 = 0u;
                *(_OWORD *)std::string __p = 0u;
                long long v55 = 0u;
                float v18 = [v9 boxesDict];
                BOOL v19 = [v18 objectForKey:v14];
                box3dFromNSArray(v19, (uint64_t)__p);

                if ((isBoxRectangle((float32x4_t *)__p) & 1) == 0)
                {
                  unint64_t v20 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v21 = [v14 UTF8String];
                    id v22 = [v9 type];
                    uint64_t v23 = [v22 UTF8String];
                    *(_DWORD *)uint8_t buf = 136315394;
                    uint64_t v51 = v21;
                    __int16 v52 = 2080;
                    uint64_t v53 = v23;
                    _os_log_debug_impl(&dword_237C17000, v20, OS_LOG_TYPE_DEBUG, "[3DOD] Warning. The output object box is not rectangle for %s of %s", buf, 0x16u);
                  }
                }
              }
              ++v13;
            }
            while (v11 != v13);
            uint64_t v11 = [v10 countByEnumeratingWithState:&v36 objects:v62 count:16];
          }
          while (v11);
        }

        unint64_t v24 = objc_msgSend(v9, "parent_id");
        if (v24)
        {
          float32x2_t v25 = objc_msgSend(v9, "parent_id");
          id v26 = [v25 UUIDString];
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v26 UTF8String]);
          char v27 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v48, (unsigned __int8 *)__p);
          if (SBYTE7(v55) < 0) {
            operator delete(__p[0]);
          }

          if (!v27)
          {
            objc_msgSend(v9, "setParent_id:", 0);
            __n128 v28 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              CGFloat v29 = objc_msgSend(v9, "parent_id");
              __n128 v30 = [v29 UUIDString];
              LODWORD(__p[0]) = v31;
              *(void **)((char *)__p + 4) = v30;
              _os_log_debug_impl(&dword_237C17000, v28, OS_LOG_TYPE_DEBUG, "[3DOD] Warning. The parent id of the object box does not exist, parent id is %@", (uint8_t *)__p, 0xCu);
            }
          }
        }
        ++v8;
      }
      while (v8 != v34);
      uint64_t v6 = [v32 countByEnumeratingWithState:&v40 objects:v63 count:16];
    }
    while (v6);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v48);
}

void sub_237C85A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_237C85FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_237C86560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v41 - 65) < 0) {
    operator delete(*(void **)(v41 - 88));
  }

  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefinerParams::~OU3DObjectRGBSizeRefinerParams(id *this)
{
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void sub_237C8698C(_Unwind_Exception *a1)
{
  MEMORY[0x237E2C510](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_237C87284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  OU3DObjectRGBSizeRefinerParams::~OU3DObjectRGBSizeRefinerParams((id *)&a21);

  _Unwind_Resume(a1);
}

void SmoothRefinedBoxes(void *a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned int a6)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  id v10 = a1;
  id v61 = a2;
  id v71 = a4;
  id v60 = a5;
  id v66 = *(id *)(a3 + 112);
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  obuint64_t j = v10;
  id v64 = (id)[obj countByEnumeratingWithState:&v86 objects:v95 count:16];
  if (v64)
  {
    uint64_t v63 = *(void *)v87;
    do
    {
      for (uint64_t i = 0; i != v64; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v87 != v63) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(OU3DObject **)(*((void *)&v86 + 1) + 8 * i);
        uint64_t v12 = [(OU3DObject *)v11 type];
        char v13 = [v66 containsObject:v12];

        if (v13)
        {
          unint64_t v14 = [(OU3DObject *)v11 identifier];
          char v15 = [v71 containsObject:v14];

          if (v15)
          {
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            id v72 = v61;
            uint64_t v16 = [v72 countByEnumeratingWithState:&v82 objects:v94 count:16];
            if (!v16) {
              goto LABEL_26;
            }
            uint64_t v17 = *(void *)v83;
            while (1)
            {
              for (uint64_t j = 0; j != v16; ++j)
              {
                if (*(void *)v83 != v17) {
                  objc_enumerationMutation(v72);
                }
                BOOL v19 = *(void **)(*((void *)&v82 + 1) + 8 * j);
                unint64_t v20 = [(OU3DObject *)v11 identifier];
                uint64_t v21 = [v19 identifier];
                char v22 = [v20 isEqual:v21];

                if (v22)
                {
                  uint64_t v23 = objc_alloc_init(OU3DObjectRefinedBox);
                  unint64_t v24 = [v19 boxesDict];
                  float32x2_t v25 = [v24 objectForKey:@"rawdetection"];
                  BOOL v26 = v25 == 0;

                  if (!v26)
                  {
                    char v27 = [v19 boxesDict];
                    __n128 v28 = [v27 objectForKey:@"rawdetection"];
                    CGFloat v29 = (void *)[v28 copy];
                    [(OU3DObjectRefinedBox *)v23 setPreRefinedBox:v29];
                  }
                  __n128 v30 = [(OU3DObject *)v11 identifier];
                  if ([v71 containsObject:v30])
                  {
                    long long v31 = [(OU3DObject *)v11 boxesDict];
                    id v32 = [v31 objectForKey:@"rawdetection"];
                    BOOL v33 = v32 == 0;

                    if (!v33)
                    {
                      __n128 v30 = [(OU3DObject *)v11 boxesDict];
                      uint64_t v34 = [v30 objectForKey:@"rawdetection"];
                      float32x2_t v35 = (void *)[v34 copy];
                      [(OU3DObjectRefinedBox *)v23 setRefinedBox:v35];

                      goto LABEL_19;
                    }
                  }
                  else
                  {
LABEL_19:
                  }
                  [(OU3DObjectRefinedBox *)v23 setFrameIndex:a6];
                  long long v36 = objc_msgSend(v19, "refined_box_history");
                  long long v37 = (void *)[v36 mutableCopy];
                  [(OU3DObject *)v11 setRefined_box_history:v37];

                  [(OU3DObject *)v11 addRefinedBoxToHistory:v23];
                  SmoothObjectUponHistory(v11, (uint64_t)v92);
                  if (v93)
                  {
                    long long v38 = [(OU3DObject *)v11 boxesDict];
                    if (!v93) {
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                    long long v39 = box3dToNSArray(v92);
                    long long v40 = (void *)[v39 copy];
                    [v38 setValue:v40 forKey:@"rawdetection"];
                  }
                  continue;
                }
              }
              uint64_t v16 = [v72 countByEnumeratingWithState:&v82 objects:v94 count:16];
              if (!v16)
              {
LABEL_26:

                break;
              }
            }
          }
        }
      }
      id v64 = (id)[obj countByEnumeratingWithState:&v86 objects:v95 count:16];
    }
    while (v64);
  }

  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v65 = obj;
  uint64_t v70 = [v65 countByEnumeratingWithState:&v78 objects:v91 count:16];
  if (v70)
  {
    uint64_t v68 = *(void *)v79;
    do
    {
      for (id k = 0; k != (id)v70; id k = (char *)k + 1)
      {
        if (*(void *)v79 != v68) {
          objc_enumerationMutation(v65);
        }
        uint64_t v41 = *(void **)(*((void *)&v78 + 1) + 8 * (void)k);
        long long v42 = objc_msgSend(v41, "type", v60);
        char v43 = [v66 containsObject:v42];

        if (v43)
        {
          long long v44 = [v41 identifier];
          char v45 = [v71 containsObject:v44];

          if ((v45 & 1) == 0)
          {
            long long v46 = objc_msgSend(v41, "refined_box_history");
            BOOL v47 = [v46 count] == 0;

            if (!v47)
            {
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              id v48 = v60;
              uint64_t v49 = [v48 countByEnumeratingWithState:&v74 objects:v90 count:16];
              if (v49)
              {
                uint64_t v50 = *(void *)v75;
                do
                {
                  for (uint64_t m = 0; m != v49; ++m)
                  {
                    if (*(void *)v75 != v50) {
                      objc_enumerationMutation(v48);
                    }
                    __int16 v52 = *(void **)(*((void *)&v74 + 1) + 8 * m);
                    uint64_t v53 = [v41 identifier];
                    float32x2_t v54 = [v52 identifier];
                    char v55 = [v53 isEqual:v54];

                    if (v55)
                    {
                      long long v56 = [v41 boxesDict];
                      long long v57 = [v52 boxesDict];
                      long long v58 = [v57 objectForKey:@"rawdetection"];
                      long long v59 = (void *)[v58 copy];
                      [v56 setValue:v59 forKey:@"rawdetection"];
                    }
                  }
                  uint64_t v49 = [v48 countByEnumeratingWithState:&v74 objects:v90 count:16];
                }
                while (v49);
              }
            }
          }
        }
      }
      uint64_t v70 = [v65 countByEnumeratingWithState:&v78 objects:v91 count:16];
    }
    while (v70);
  }
}

void sub_237C87AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id OU3DObjectRGBSizeRefiner::GetRefinerParams@<X0>(OU3DObjectRGBSizeRefiner *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)this + 52);
  unint64_t v4 = (std::string *)(a2 + 32);
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    *(void *)(a2 + 48) = *((void *)this + 11);
  }
  *(_OWORD *)(a2 + 56) = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)((char *)this + 108);
  id v5 = (std::string *)(a2 + 88);
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    *(void *)(a2 + 104) = *((void *)this + 18);
  }
  id result = *((id *)this + 19);
  *(void *)(a2 + 112) = result;
  return result;
}

void sub_237C87D44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_237C87E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_237C8862C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_237C88DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void OUPointCloudCpp::Reserve(OUPointCloudCpp *this, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)this + 3, a2);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)this, a2);
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm((void **)this + 6, a2);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm((void **)this + 9, a2);
}

id box3dToNSArray(__n128 *a1)
{
  v12[8] = *MEMORY[0x263EF8340];
  uint64_t v2 = float3ToNSArray(*a1);
  v12[0] = v2;
  __float2 v3 = float3ToNSArray(a1[1]);
  v12[1] = v3;
  unint64_t v4 = float3ToNSArray(a1[2]);
  v12[2] = v4;
  id v5 = float3ToNSArray(a1[3]);
  void v12[3] = v5;
  uint64_t v6 = float3ToNSArray(a1[4]);
  v12[4] = v6;
  long long v7 = float3ToNSArray(a1[5]);
  v12[5] = v7;
  uint64_t v8 = float3ToNSArray(a1[6]);
  v12[6] = v8;
  unint64_t v9 = float3ToNSArray(a1[7]);
  v12[7] = v9;
  id v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:8];

  return v10;
}

void sub_237C891F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void withinClassNMS(void *a1@<X1>, std::vector<int> *a2@<X2>, void *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, unint64_t **a6@<X8>, float a7@<S0>)
{
  long long v7 = a6;
  uint64_t v8 = a1[1];
  if (*a1 == v8)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  unint64_t v9 = a4;
  id v10 = a3;
  if (a3[1] - *a3 != a4[1] - *a4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Original and NMS iou matrix size should be the same.");
    __cxa_throw(exception, (struct type_info *)off_264CFAB20, MEMORY[0x263F8C080]);
  }
  uint64_t v12 = a2;
  unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 5);
  unint64_t v15 = a2->__end_ - a2->__begin_;
  std::vector<int>::size_type v16 = v14 - v15;
  std::vector<float>::vector(v187, v14);
  uint64_t v17 = v187[0];
  if (v14 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v14;
  }
  BOOL v19 = (int *)(*a1 + 136);
  uint64_t v158 = v18;
  do
  {
    int v20 = *v19;
    v19 += 56;
    *v17++ = v20;
    --v18;
  }
  while (v18);
  std::vector<int>::vector(&v186, v16);
  std::vector<int>::pointer begin = (char *)v186.__begin_;
  std::vector<int>::pointer end = (char *)v186.__end_;
  if (v186.__begin_ != v186.__end_)
  {
    int v23 = (*((_DWORD *)v10 + 2) - *(_DWORD *)v10) / 24;
    std::vector<int>::pointer v24 = v186.__begin_;
    do
      *v24++ = v23++;
    while (v24 != (std::vector<int>::pointer)end);
  }
  long long v159 = a5;
  long long v163 = v7;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v12, (uint64_t)v12->__end_, begin, end, (end - begin) >> 2);
  if (v14 != v15)
  {
    do
    {
      unint64_t v25 = 1 - 0x5555555555555555 * ((uint64_t)(v10[1] - *v10) >> 3);
      __x[0] = -1082130432;
      std::vector<float>::vector(__p, v25, __x);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v10, (uint64_t)__p);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      unint64_t v26 = 1 - 0x5555555555555555 * ((v9[1] - *v9) >> 3);
      __x[0] = -1082130432;
      std::vector<float>::vector(__p, v26, __x);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v9, (uint64_t)__p);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      --v16;
    }
    while (v16);
  }
  std::vector<int>::pointer v28 = v12->__begin_;
  std::vector<int>::pointer v27 = v12->__end_;
  unint64_t v165 = v10;
  if (v15 >= v27 - v12->__begin_) {
    goto LABEL_110;
  }
  long long v29 = 0uLL;
  do
  {
    if (!v15) {
      goto LABEL_109;
    }
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    id v32 = a1;
    do
    {
      std::vector<int>::pointer v33 = v12->__begin_;
      if (v15 >= v12->__end_ - v12->__begin_) {
        std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v34 = v33[v15];
      uint64_t v35 = v33[v31];
      if (v34 != v35)
      {
        uint64_t v168 = v35;
        long long v36 = v12;
        long long v37 = v9;
        uint64_t v38 = 3 * v34;
        uint64_t v39 = *(void *)(*v9 + 8 * v38);
        uint64_t v166 = *(void *)(*v10 + 8 * v38);
        uint64_t v40 = *v32;
        uint64_t v41 = (float32x4_t *)(*v32 + 224 * v15);
        long long v42 = (float32x4_t *)(*v32 + v30);
        long long v184 = v29;
        long long v185 = v29;
        long long v183 = v29;
        char v43 = v32;
        box3dIou(v41, v42, 0, (uint64_t)&v183);
        float v44 = *(float *)&v183;
        LODWORD(v45) = DWORD2(v184);
        uint64_t v46 = *v43;
        BOOL v47 = (float32x4_t *)(*v43 + 224 * v15);
        id v48 = (__CFString *)v47[8].i64[0];
        id v32 = v43;
        if (v48 == @"Screen")
        {
          id v32 = a1;
          if (*(__CFString **)(v46 + v30 + 128) == @"Screen")
          {
            memset(__p, 0, sizeof(__p));
            box3dEnlarge(v47, 0.0, 0.5, 0.0, __p);
            unint64_t v9 = v37;
            long long v180 = 0u;
            long long v181 = 0u;
            long long v178 = 0u;
            long long v179 = 0u;
            long long v176 = 0u;
            long long v177 = 0u;
            *(_OWORD *)std::string __x = 0u;
            long long v175 = 0u;
            box3dEnlarge((float32x4_t *)(*a1 + v30), 0.0, 0.5, 0.0, __x);
            uint64_t v12 = v36;
            memset(v173, 0, sizeof(v173));
            *(_OWORD *)long long v172 = 0u;
            box3dIou((float32x4_t *)__p, (float32x4_t *)__x, 0, (uint64_t)v172);
            float v63 = fmaxf(*(float *)v172, *((float *)v173 + 2));
            *(float *)(v166 + 4 * v168) = v63;
            *(float *)(v39 + 4 * v168) = v63;
            id v32 = a1;
LABEL_106:
            id v10 = v165;
            long long v29 = 0uLL;
            goto LABEL_107;
          }
        }
        unint64_t v9 = v37;
        if (v48 == @"Stove" && *(__CFString **)(v46 + v30 + 128) == @"Stove")
        {
          *(_DWORD *)(v166 + 4 * v168) = DWORD2(v184);
          uint64_t v12 = v36;
          if (*(float *)&v45 > 0.0)
          {
            if (v41[6].f32[2] <= *(float *)(v40 + v30 + 104)) {
              unint64_t v64 = v31;
            }
            else {
              unint64_t v64 = v15;
            }
            *((float *)v187[0] + v64) = *((float *)v187[0] + v64) + 0.1;
            LODWORD(v45) = 1.0;
          }
          *(_DWORD *)(v39 + 4 * v168) = LODWORD(v45);
          goto LABEL_106;
        }
        uint64_t v12 = v36;
        if (v48 == @"Sink" && *(__CFString **)(v46 + v30 + 128) == @"Sink")
        {
          if (v41[6].f32[2] <= *(float *)(v40 + v30 + 104)) {
            unint64_t v65 = v31;
          }
          else {
            unint64_t v65 = v15;
          }
          *((float *)v187[0] + v65) = *((float *)v187[0] + v65) + 0.1;
          *(_DWORD *)(v39 + 4 * v168) = LODWORD(v45);
          *(_DWORD *)(v166 + 4 * v168) = LODWORD(v45);
          goto LABEL_106;
        }
        if (v48 == @"Bathtub" && *(__CFString **)(v46 + v30 + 128) == @"Bathtub"
          || v48 == @"Toilet" && *(__CFString **)(v46 + v30 + 128) == @"Toilet")
        {
          uint64_t v61 = v168;
          *(_DWORD *)(v166 + 4 * v168) = DWORD2(v184);
          if (*(float *)&v45 > 0.05) {
            *(float *)&double v45 = 1.0;
          }
          goto LABEL_105;
        }
        if (v48 == @"Table" && *(__CFString **)(v46 + v30 + 128) == @"Table"
          || v48 == @"Shelf" && *(__CFString **)(v46 + v30 + 128) == @"Shelf")
        {
          goto LABEL_83;
        }
        if (v48 == @"Sofa" && *(__CFString **)(v46 + v30 + 128) == @"Sofa")
        {
          uint64_t v61 = v168;
          *(_DWORD *)(v166 + 4 * v168) = v183;
          BOOL v62 = v44 < 0.7;
LABEL_102:
          if (v62) {
            *(float *)&double v45 = 0.0;
          }
          else {
            *(float *)&double v45 = v44;
          }
LABEL_105:
          *(_DWORD *)(v39 + 4 * v61) = LODWORD(v45);
          goto LABEL_106;
        }
        if (v48 != @"Washer" || *(__CFString **)(v46 + v30 + 128) != @"Washer")
        {
          if (v48 == @"Dishwasher" && *(__CFString **)(v46 + v30 + 128) == @"Dishwasher"
            || v48 == @"Oven" && *(__CFString **)(v46 + v30 + 128) == @"Oven")
          {
            uint64_t v61 = v168;
            *(_DWORD *)(v166 + 4 * v168) = v183;
            BOOL v66 = v44 <= 0.0;
LABEL_97:
            if (v66) {
              *(float *)&double v45 = v44;
            }
            else {
              *(float *)&double v45 = 1.0;
            }
            goto LABEL_105;
          }
          if (v48 != @"Chair" || *(__CFString **)(v46 + v30 + 128) != @"Chair")
          {
            if ((v48 != @"Cabinet" || *(__CFString **)(v46 + v30 + 128) != @"Table")
              && (v48 != @"Table" || *(__CFString **)(v46 + v30 + 128) != @"Cabinet"))
            {
              if (v48 == @"Cabinet"
                && ((uint64_t v49 = *(__CFString **)(v46 + v30 + 128), @"Dishwasher" == v49)
                 || @"Oven" == v49
                 || @"Washer" == v49
                 || @"Sink" == v49
                 || @"Stove" == v49
                 || @"Refrigerator" == v49)
                || (v48 == @"Dishwasher"
                 || v48 == @"Oven"
                 || v48 == @"Washer"
                 || v48 == @"Sink"
                 || v48 == @"Stove"
                 || @"Refrigerator" == v48)
                && *(__CFString **)(v46 + v30 + 128) == @"Cabinet"
                || v48 == @"Chair" && *(__CFString **)(v46 + v30 + 128) == @"Table"
                || v48 == @"Table" && *(__CFString **)(v46 + v30 + 128) == @"Chair")
              {
                *(_DWORD *)(v39 + 4 * v168) = 0;
                *(_DWORD *)(v166 + 4 * v168) = 0;
              }
              else
              {
                *(_DWORD *)(v39 + 4 * v168) = v183;
                *(float *)(v166 + 4 * v168) = v44;
                int v50 = [(__CFString *)v48 isEqualToString:@"Cabinet", v45, v158];
                id v32 = a1;
                if (v50)
                {
                  int v51 = [*(id *)(*a1 + v30 + 128) isEqualToString:@"Cabinet"];
                  int v52 = v44 > 0.0 ? v51 : 0;
                  id v32 = a1;
                  if (v52 == 1 && v44 < 0.5)
                  {
                    float32x4_t v161 = *v41;
                    float32x4_t v167 = vsubq_f32(*v41, v41[1]);
                    float v53 = atan2f(v167.f32[0], v167.f32[1]);
                    float32x4_t v160 = *(float32x4_t *)(v40 + v30);
                    float32x4_t v162 = vsubq_f32(v160, *(float32x4_t *)(v40 + v30 + 16));
                    float v54 = atan2f(v162.f32[0], v162.f32[1]);
                    id v32 = a1;
                    if (vabds_f32(v53, v54) < 0.25)
                    {
                      float32x4_t v55 = vmulq_f32(v167, v167);
                      float32x4_t v56 = vmulq_f32(v162, v162);
                      if (vabds_f32(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0])) < 0.1)
                      {
                        float32x4_t v57 = vsubq_f32(v160, *(float32x4_t *)(v40 + v30 + 64));
                        float32x4_t v58 = vmulq_f32(v57, v57);
                        float32x4_t v59 = vsubq_f32(v161, v41[4]);
                        float32x4_t v60 = vmulq_f32(v59, v59);
                        if (vabds_f32(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])) < 0.1&& fabsf(COERCE_FLOAT(vsubq_f32(v161, v160).i32[2])) < 0.1)
                        {
                          *(_DWORD *)(v39 + 4 * v168) = 0;
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_106;
            }
LABEL_83:
            uint64_t v61 = v168;
            *(_DWORD *)(v166 + 4 * v168) = v183;
            BOOL v62 = v44 < 0.85;
            goto LABEL_102;
          }
        }
        uint64_t v61 = v168;
        *(_DWORD *)(v166 + 4 * v168) = v183;
        BOOL v66 = v44 <= 0.3;
        goto LABEL_97;
      }
LABEL_107:
      ++v31;
      v30 += 224;
    }
    while (v15 != v31);
    std::vector<int>::pointer v28 = v12->__begin_;
    std::vector<int>::pointer v27 = v12->__end_;
    long long v7 = v163;
LABEL_109:
    ++v15;
  }
  while (v15 < v27 - v28);
LABEL_110:
  __x[0] = 1;
  std::vector<int>::vector((std::vector<int> *)__p, v14, __x);
  unint64_t v67 = 0;
  uint64_t v68 = *a1;
  uint64_t v69 = *a1 + 128;
  uint64_t v70 = v159;
  do
  {
    if (v67)
    {
      uint64_t v71 = 0;
      uint64_t v72 = *(void *)(v68 + 224 * v67 + 128);
      uint64_t v73 = *(void *)__p;
      long long v74 = (void *)v69;
      do
      {
        if (v72 == *v74)
        {
          if (v67 >= v12->__end_ - v12->__begin_) {
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          }
          if (*(float *)(*(void *)(*v9 + 24 * v12->__begin_[v67]) + 4 * v12->__begin_[v71]) > 0.7)
          {
            ++*(_DWORD *)(v73 + 4 * v67);
            ++*(_DWORD *)(v73 + 4 * v71);
          }
        }
        ++v71;
        v74 += 28;
      }
      while (v67 != v71);
    }
    ++v67;
  }
  while (v67 != v158);
  std::vector<unsigned long>::vector(__x, v14);
  uint64_t v75 = *(void *)__x;
  long long v76 = *(uint64_t **)&__x[2];
  if (*(void *)__x != *(void *)&__x[2])
  {
    uint64_t v77 = 0;
    long long v78 = *(uint64_t **)__x;
    do
      *v78++ = v77++;
    while (v78 != v76);
  }
  unint64_t v79 = 126 - 2 * __clz(((uint64_t)v76 - v75) >> 3);
  *(void *)&long long v183 = v187;
  *((void *)&v183 + 1) = __p;
  if (v76 == (uint64_t *)v75) {
    uint64_t v80 = 0;
  }
  else {
    uint64_t v80 = v79;
  }
  std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(v75, v76, (uint64_t **)&v183, v80, 1);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  long long v81 = *(unint64_t **)__x;
  if (*(void *)&__x[2] != *(void *)__x)
  {
    do
    {
      unint64_t v82 = *v81;
      long long v84 = v163[1];
      unint64_t v83 = (unint64_t)v163[2];
      if ((unint64_t)v84 >= v83)
      {
        long long v86 = *v163;
        uint64_t v87 = v84 - *v163;
        unint64_t v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v89 = v83 - (void)v86;
        if (v89 >> 2 > v88) {
          unint64_t v88 = v89 >> 2;
        }
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v88;
        }
        if (v90)
        {
          BOOL v91 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 2), v90);
          long long v86 = *v163;
          long long v84 = v163[1];
        }
        else
        {
          BOOL v91 = 0;
        }
        int v92 = (unint64_t *)&v91[8 * v87];
        unint64_t *v92 = v82;
        long long v85 = v92 + 1;
        while (v84 != v86)
        {
          unint64_t v93 = *--v84;
          *--int v92 = v93;
        }
        *long long v163 = v92;
        v163[1] = v85;
        v163[2] = (unint64_t *)&v91[8 * v90];
        if (v86) {
          operator delete(v86);
        }
      }
      else
      {
        *long long v84 = v82;
        long long v85 = v84 + 1;
      }
      v163[1] = v85;
      std::vector<float>::vector(&v183, ((uint64_t)(*(void *)&__x[2] - *(void *)__x) >> 3) - 1);
      uint64_t v94 = ((uint64_t)(*(void *)&__x[2] - *(void *)__x) >> 3) - 1;
      if ((uint64_t)(*(void *)&__x[2] - *(void *)__x) >> 3 != 1)
      {
        std::vector<int>::pointer v95 = v12->__begin_;
        unint64_t v96 = v12->__end_ - v12->__begin_;
        if (v96 <= v82) {
          std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v97 = (_DWORD *)v183;
        uint64_t v98 = v95[v82];
        uint64_t v99 = (unint64_t *)(*(void *)__x + 8);
        do
        {
          unint64_t v101 = *v99++;
          unint64_t v100 = v101;
          if (v96 <= v101) {
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v102 = v95[v100];
          if ((int)v98 <= (int)v102)
          {
            uint64_t v103 = (void *)(*v9 + 24 * (int)v102);
            uint64_t v102 = v98;
          }
          else
          {
            uint64_t v103 = (void *)(*v9 + 24 * (int)v98);
          }
          *v97++ = *(_DWORD *)(*v103 + 4 * v102);
          --v94;
        }
        while (v94);
      }
      v172[0] = 0;
      v172[1] = 0;
      *(void *)&v173[0] = 0;
      uint64_t v104 = *((void *)&v183 + 1);
      uint64_t v105 = v183;
      if (*((void *)&v183 + 1) == (void)v183)
      {
        unint64_t v121 = 0;
        long long v169 = 0;
        long long v170 = 0;
        long long v171 = 0;
      }
      else
      {
        int v106 = 0;
        unint64_t v107 = 0;
        do
        {
          if (*(float *)(v105 + 4 * v107) <= a7)
          {
            if ((unint64_t)v106 >= *(void *)&v173[0])
            {
              int v109 = (char *)v172[0];
              uint64_t v110 = (v106 - (char *)v172[0]) >> 3;
              unint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              int64_t v112 = *(void *)&v173[0] - (unint64_t)v172[0];
              if ((uint64_t)(*(void *)&v173[0] - (unint64_t)v172[0]) >> 2 > v111) {
                unint64_t v111 = v112 >> 2;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                long long v114 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v173, v113);
                int v109 = (char *)v172[0];
                int v106 = (char *)v172[1];
              }
              else
              {
                long long v114 = 0;
              }
              int v115 = (unint64_t *)&v114[8 * v110];
              *int v115 = v107;
              int v108 = v115 + 1;
              while (v106 != v109)
              {
                unint64_t v116 = *((void *)v106 - 1);
                v106 -= 8;
                *--int v115 = v116;
              }
              v172[0] = v115;
              v172[1] = v108;
              *(void *)&v173[0] = &v114[8 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(void *)int v106 = v107;
              int v108 = v106 + 8;
            }
            v172[1] = v108;
            int v106 = (char *)v108;
            uint64_t v104 = *((void *)&v183 + 1);
            uint64_t v105 = v183;
          }
          ++v107;
        }
        while (v107 < (v104 - v105) >> 2);
        int64_t v117 = (char *)v172[0];
        long long v169 = 0;
        long long v170 = 0;
        long long v171 = 0;
        if (v172[0] == v106)
        {
          unint64_t v121 = 0;
        }
        else
        {
          int v118 = 0;
          do
          {
            uint64_t v119 = *(void *)v117 + 1;
            uint64_t v120 = *(void *)__x;
            if (v118 >= v171)
            {
              uint64_t v122 = v169;
              uint64_t v123 = (v118 - v169) >> 3;
              unint64_t v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v125 = v171 - v169;
              if ((v171 - v169) >> 2 > v124) {
                unint64_t v124 = v125 >> 2;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v124;
              }
              if (v126)
              {
                long long v127 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v171, v126);
                uint64_t v122 = v169;
                int v118 = v170;
              }
              else
              {
                long long v127 = 0;
              }
              long long v128 = &v127[8 * v123];
              *(void *)long long v128 = *(void *)(v120 + 8 * v119);
              unint64_t v121 = v128 + 8;
              while (v118 != v122)
              {
                uint64_t v129 = *((void *)v118 - 1);
                v118 -= 8;
                *((void *)v128 - 1) = v129;
                v128 -= 8;
              }
              long long v169 = v128;
              long long v171 = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)int v118 = *(void *)(*(void *)__x + 8 * v119);
              unint64_t v121 = v118 + 8;
            }
            long long v170 = v121;
            v117 += 8;
            int v118 = v121;
          }
          while (v117 != v106);
        }
      }
      if (*(void *)__x)
      {
        *(void *)&std::vector<int>::value_type __x[2] = *(void *)__x;
        operator delete(*(void **)__x);
        unint64_t v121 = v170;
      }
      *(void *)std::string __x = v169;
      *(void *)&std::vector<int>::value_type __x[2] = v121;
      *(void *)&long long v175 = v171;
      id v10 = v165;
      if (v172[0])
      {
        v172[1] = v172[0];
        operator delete(v172[0]);
      }
      if ((void)v183)
      {
        *((void *)&v183 + 1) = v183;
        operator delete((void *)v183);
      }
      long long v81 = *(unint64_t **)__x;
    }
    while (*(void *)&__x[2] != *(void *)__x);
    uint64_t v70 = v159;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (v70)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](v70);
    unint64_t v130 = v163[1] - *v163;
    LODWORD(v172[0]) = 0;
    std::vector<float>::vector(&v183, v130, v172);
    std::vector<std::vector<float>>::resize(v70, v130, (uint64_t)&v183);
    if ((void)v183)
    {
      *((void *)&v183 + 1) = v183;
      operator delete((void *)v183);
    }
    long long v131 = *v163;
    uint64_t v132 = (char *)v163[1] - (char *)*v163;
    if (v132)
    {
      uint64_t v133 = 0;
      unint64_t v134 = v132 >> 3;
      uint64_t v135 = *v70;
      if (v134 <= 1) {
        uint64_t v136 = 1;
      }
      else {
        uint64_t v136 = v134;
      }
      id v137 = (uint64_t *)(v135 + 24);
      long long v138 = v131 + 1;
      uint64_t v139 = 1;
      uint64_t v140 = 4;
      do
      {
        uint64_t v141 = *(void *)(v135 + 24 * v133);
        *(_DWORD *)(v141 + 4 * v133) = 1065353216;
        uint64_t v142 = v133 + 1;
        if (v134 > v133 + 1)
        {
          unint64_t v143 = v131[v133];
          std::vector<int>::pointer v144 = v12->__begin_;
          unint64_t v145 = v12->__end_ - v12->__begin_;
          if (v145 <= v143) {
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          }
          long long v146 = (_DWORD *)(v141 + v140);
          unint64_t v147 = v134;
          long long v148 = v138;
          long long v149 = v137;
          do
          {
            unint64_t v151 = *v148++;
            unint64_t v150 = v151;
            if (v145 <= v151) {
              std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
            }
            int v152 = v144[v143];
            int v153 = v144[v150];
            if (v152 <= v153) {
              int v154 = v153;
            }
            else {
              int v154 = v144[v143];
            }
            if (v152 < v153) {
              int v153 = v144[v143];
            }
            int v155 = *(_DWORD *)(*(void *)(*v10 + 24 * v154) + 4 * v153);
            *v146++ = v155;
            uint64_t v156 = *v149;
            v149 += 3;
            *(_DWORD *)(v156 + 4 * v133) = v155;
            --v147;
          }
          while (v139 != v147);
        }
        ++v139;
        v137 += 3;
        v140 += 4;
        ++v138;
        ++v133;
      }
      while (v142 != v136);
    }
  }
  if (*(void *)__x)
  {
    *(void *)&std::vector<int>::value_type __x[2] = *(void *)__x;
    operator delete(*(void **)__x);
  }
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
}

void sub_237C8A370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        id v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void sizeRevision(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    while (1)
    {
      if ([*(id *)(v1 + 128) isEqualToString:@"Stove"])
      {
        box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
        *((_DWORD *)v10[0] + 5) = 1036831949;
        centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
        goto LABEL_8;
      }
      if ([*(id *)(v1 + 128) isEqualToString:@"Sink"]) {
        break;
      }
      if ([*(id *)(v1 + 128) isEqualToString:@"Screen"])
      {
        box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
        *((_DWORD *)v10[0] + 4) = 1036831949;
        centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
LABEL_8:
        long long v3 = v9[0];
        long long v4 = v9[1];
        long long v5 = v9[3];
        *(_OWORD *)(v1 + 32) = v9[2];
        *(_OWORD *)(v1 + 48) = v5;
        *(_OWORD *)uint64_t v1 = v3;
        *(_OWORD *)(v1 + 16) = v4;
        long long v6 = v9[4];
        long long v7 = v9[5];
        long long v8 = v9[7];
        *(_OWORD *)(v1 + 96) = v9[6];
        *(_OWORD *)(v1 + 112) = v8;
        *(_OWORD *)(v1 + 64) = v6;
        *(_OWORD *)(v1 + 80) = v7;
        if (v10[0])
        {
          v10[1] = v10[0];
          operator delete(v10[0]);
        }
      }
      v1 += 224;
      if (v1 == v2) {
        return;
      }
    }
    box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
    *((_DWORD *)v10[0] + 5) = 1050253722;
    centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
    goto LABEL_8;
  }
}

void sub_237C8A6B8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(void *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<OUBox3d>(__n128 *a1, __n128 *a2)
{
  __n128 v41 = a1[4];
  __n128 v42 = a1[5];
  __n128 v43 = a1[6];
  __n128 v44 = a1[7];
  __n128 v37 = *a1;
  __n128 v38 = a1[1];
  __n128 v39 = a1[2];
  __n128 v40 = a1[3];
  unint64_t v4 = a1[8].n128_u64[0];
  a1[8].n128_u64[0] = 0;
  unsigned __int32 v5 = a1[8].n128_u32[2];
  unint64_t v7 = a1[9].n128_u64[0];
  unint64_t v6 = a1[9].n128_u64[1];
  a1[9] = 0u;
  uint64_t v8 = (uint64_t)&a1[10];
  __n128 v33 = a1[10];
  unint64_t v9 = a1[11].n128_u64[0];
  a1[10] = 0u;
  a1[11].n128_u64[0] = 0;
  uint64_t v10 = (uint64_t)&a1[11].n128_i64[1];
  unint64_t v11 = a1[12].n128_u64[0];
  unint64_t v34 = a1[11].n128_u64[1];
  unint64_t v35 = a1[12].n128_u64[1];
  *(__n128 *)((char *)&a1[11] + 8) = 0u;
  unint64_t v12 = a1[13].n128_u64[0];
  *(__n128 *)((char *)&a1[12] + 8) = 0u;
  unsigned __int16 v36 = a1[13].n128_u16[4];
  __n128 v13 = *a2;
  __n128 v14 = a2[1];
  __n128 v15 = a2[3];
  a1[2] = a2[2];
  a1[3] = v15;
  *a1 = v13;
  a1[1] = v14;
  __n128 v16 = a2[4];
  __n128 v17 = a2[5];
  __n128 v18 = a2[7];
  a1[6] = a2[6];
  a1[7] = v18;
  a1[4] = v16;
  a1[5] = v17;
  uint64_t v19 = a2[8].n128_i64[0];
  a2[8].n128_u64[0] = 0;
  int v20 = (void *)a1[8].n128_u64[0];
  a1[8].n128_u64[0] = v19;

  a1[8].n128_u32[2] = a2[8].n128_u32[2];
  uint64_t v21 = a2[9].n128_i64[0];
  a2[9].n128_u64[0] = 0;
  char v22 = (void *)a1[9].n128_u64[0];
  a1[9].n128_u64[0] = v21;

  uint64_t v23 = a2[9].n128_i64[1];
  a2[9].n128_u64[1] = 0;
  std::vector<int>::pointer v24 = (void *)a1[9].n128_u64[1];
  a1[9].n128_u64[1] = v23;

  std::vector<float>::__move_assign(v8, a2 + 10);
  std::vector<BOOL>::__move_assign(v10, &a2[11].n128_u64[1]);
  uint64_t v25 = a2[13].n128_i64[0];
  a2[13].n128_u64[0] = 0;
  unint64_t v26 = (void *)a1[13].n128_u64[0];
  a1[13].n128_u64[0] = v25;

  a1[13].n128_u16[4] = a2[13].n128_u16[4];
  a2[4] = v41;
  a2[5] = v42;
  a2[6] = v43;
  a2[7] = v44;
  *a2 = v37;
  a2[1] = v38;
  a2[2] = v39;
  a2[3] = v40;
  std::vector<int>::pointer v27 = (void *)a2[8].n128_u64[0];
  a2[8].n128_u64[0] = v4;

  a2[8].n128_u32[2] = v5;
  std::vector<int>::pointer v28 = (void *)a2[9].n128_u64[0];
  a2[9].n128_u64[0] = v7;

  long long v29 = (void *)a2[9].n128_u64[1];
  a2[9].n128_u64[1] = v6;

  uint64_t v30 = (void *)a2[10].n128_u64[0];
  if (v30)
  {
    a2[10].n128_u64[1] = (unint64_t)v30;
    operator delete(v30);
  }
  a2[10] = v33;
  a2[11].n128_u64[0] = v9;
  unint64_t v31 = (void *)a2[11].n128_u64[1];
  if (v31) {
    operator delete(v31);
  }
  a2[11].n128_u64[1] = v34;
  a2[12].n128_u64[0] = v11;
  id v32 = (void *)a2[13].n128_u64[0];
  a2[12].n128_u64[1] = v35;
  a2[13].n128_u64[0] = v12;

  a2[13].n128_u16[4] = v36;
}

__n128 *std::vector<OUBox3d>::erase(uint64_t a1, __n128 *a2, long long *a3)
{
  if (a2 != (__n128 *)a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_237C8B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char *__pa, char *a14, OUBox3d *a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a19 = &a23;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__pa)
  {
    a14 = __pa;
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_237C8B48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  _Unwind_Resume(a1);
}

void sub_237C8B788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_237C8BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_237C8BDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char **a16, char **a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16)
  {
    a17 = a16;
    operator delete(a16);
  }

  a16 = &a19;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_237C8C1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a41);

  _Unwind_Resume(a1);
}

void sub_237C8C5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::string __p = (void *)(v20 - 136);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v20 - 112);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_237C8C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  _Unwind_Resume(a1);
}

void sub_237C8D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_237C8E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  std::string __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a70;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x200], (void *)STACK[0x208]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x218], (void *)STACK[0x220]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x230], (void *)STACK[0x238]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v71 - 248, *(void **)(v71 - 240));
  std::string __p = (void *)(v71 - 224);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v71 - 200);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_237C8E888(_Unwind_Exception *a1)
{
  MEMORY[0x237E2C510](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_237C8ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t OUBox3d::OUBox3d(uint64_t a1, long long *a2, id *a3, void *a4, float a5)
{
  id v9 = a4;
  long long v10 = a2[3];
  long long v12 = *a2;
  long long v11 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  long long v13 = a2[7];
  long long v15 = a2[4];
  long long v14 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 128) = *a3;
  *(float *)(a1 + 136) = a5;
  *(void *)(a1 + 144) = [v9 copy];
  *(void *)(a1 + 152) = @"unknown";
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = -1;

  return a1;
}

void sub_237C8ED88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__assign_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  id v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<OUBox3d>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)) >= 0x92492492492492) {
      unint64_t v11 = 0x124924924924924;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<OUBox3d>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    long long v13 = &a2[2 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 224;
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_237C8EF20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_237C8EF28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_237C8F018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  unint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      __n128 v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    }
    else {
      __n128 v18 = 0;
    }
    std::vector<int>::pointer v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    uint64_t v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    std::vector<int>::pointer v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    unint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      unint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_237C8F220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<int>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  long long v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  std::__split_buffer<int>::pointer v11 = (uint64_t *)result;
  while (2)
  {
    int64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          std::__split_buffer<int>::pointer v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = *v12;
                if ((float)(*(float *)(**a3 + 4 * v44) * (float)*(int *)(*a3[1] + 4 * v44)) > (float)(*(float *)(**a3 + 4 * *v12) * (float)*(int *)(*a3[1] + 4 * *v12)))
                {
                  uint64_t *v12 = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                id result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v12, v12 + 1, a2 - 1, a3);
                break;
              case 4uLL:
                id result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
                break;
              case 5uLL:
                uint64_t v46 = v12 + 1;
                BOOL v47 = v12 + 2;
                id v48 = v12 + 3;
                id result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v12, v12 + 1, v12 + 2, v12 + 3, a3);
                uint64_t v49 = *(a2 - 1);
                uint64_t v50 = v12[3];
                int v51 = a3[1];
                uint64_t v52 = **a3;
                uint64_t v53 = *v51;
                if ((float)(*(float *)(v52 + 4 * v49) * (float)*(int *)(*v51 + 4 * v49)) > (float)(*(float *)(v52 + 4 * v50)
                                                                                                  * (float)*(int *)(*v51 + 4 * v50)))
                {
                  *id v48 = v49;
                  *(a2 - 1) = v50;
                  uint64_t v54 = *v48;
                  uint64_t v55 = *v47;
                  float v56 = *(float *)(v52 + 4 * *v48) * (float)*(int *)(v53 + 4 * *v48);
                  if (v56 > (float)(*(float *)(v52 + 4 * *v47) * (float)*(int *)(v53 + 4 * *v47)))
                  {
                    *BOOL v47 = v54;
                    uint64_t v57 = *v46;
                    float v58 = *(float *)(v52 + 4 * *v46);
                    *id v48 = v55;
                    if (v56 > (float)(v58 * (float)*(int *)(v53 + 4 * v57)))
                    {
                      uint64_t v59 = *v12;
                      float v60 = *(float *)(v52 + 4 * *v12);
                      v12[1] = v54;
                      v12[2] = v57;
                      if (v56 > (float)(v60 * (float)*(int *)(v53 + 4 * v59)))
                      {
                        uint64_t *v12 = v54;
                        v12[1] = v59;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v61 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = **a3;
                  uint64_t v64 = *a3[1];
                  unint64_t v65 = v12;
                  do
                  {
                    uint64_t v67 = *v65;
                    uint64_t v66 = v65[1];
                    unint64_t v65 = v61;
                    float v68 = *(float *)(v63 + 4 * v66) * (float)*(int *)(v64 + 4 * v66);
                    if (v68 > (float)(*(float *)(v63 + 4 * v67) * (float)*(int *)(v64 + 4 * v67)))
                    {
                      uint64_t v69 = v62;
                      while (1)
                      {
                        *(uint64_t *)((char *)v12 + v69 + 8) = v67;
                        if (!v69) {
                          break;
                        }
                        uint64_t v67 = *(uint64_t *)((char *)v12 + v69 - 8);
                        v69 -= 8;
                        if (v68 <= (float)(*(float *)(v63 + 4 * v67) * (float)*(int *)(v64 + 4 * v67)))
                        {
                          uint64_t v70 = (uint64_t *)((char *)v12 + v69 + 8);
                          goto LABEL_80;
                        }
                      }
                      uint64_t v70 = v12;
LABEL_80:
                      uint64_t *v70 = v66;
                    }
                    uint64_t v61 = v65 + 1;
                    v62 += 8;
                  }
                  while (v65 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              int v106 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v107 = **a3;
                uint64_t v108 = *a3[1];
                do
                {
                  uint64_t v110 = *v11;
                  uint64_t v109 = v11[1];
                  std::__split_buffer<int>::pointer v11 = v106;
                  float v111 = *(float *)(v107 + 4 * v109) * (float)*(int *)(v108 + 4 * v109);
                  if (v111 > (float)(*(float *)(v107 + 4 * v110) * (float)*(int *)(v108 + 4 * v110)))
                  {
                    do
                    {
                      uint64_t *v106 = v110;
                      uint64_t v110 = *(v106 - 2);
                      --v106;
                    }
                    while (v111 > (float)(*(float *)(v107 + 4 * v110) * (float)*(int *)(v108 + 4 * v110)));
                    uint64_t *v106 = v109;
                  }
                  int v106 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v71 = (v14 - 2) >> 1;
              uint64_t v72 = *a3;
              uint64_t v73 = a3[1];
              int64_t v74 = v71;
              do
              {
                int64_t v75 = v74;
                if (v71 >= v74)
                {
                  uint64_t v76 = (2 * v74) | 1;
                  uint64_t v77 = &v12[v76];
                  uint64_t v78 = 2 * v74 + 2;
                  uint64_t v79 = *v72;
                  if (v78 < (uint64_t)v14)
                  {
                    uint64_t v80 = *v73;
                    if ((float)(*(float *)(v79 + 4 * *v77) * (float)*(int *)(*v73 + 4 * *v77)) > (float)(*(float *)(v79 + 4 * v77[1]) * (float)*(int *)(*v73 + 4 * v77[1])))
                    {
                      ++v77;
                      uint64_t v76 = 2 * v75 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v80 = *v73;
                  }
                  long long v81 = &v12[v75];
                  uint64_t v82 = *v77;
                  id result = *v81;
                  float v83 = *(float *)(v79 + 4 * *v81) * (float)*(int *)(v80 + 4 * *v81);
                  if ((float)(*(float *)(v79 + 4 * *v77) * (float)*(int *)(v80 + 4 * *v77)) <= v83)
                  {
                    do
                    {
                      long long v84 = v77;
                      *long long v81 = v82;
                      if (v71 < v76) {
                        break;
                      }
                      uint64_t v85 = 2 * v76;
                      uint64_t v76 = (2 * v76) | 1;
                      uint64_t v77 = &v12[v76];
                      uint64_t v86 = v85 + 2;
                      if (v86 < (uint64_t)v14
                        && (float)(*(float *)(v79 + 4 * *v77) * (float)*(int *)(v80 + 4 * *v77)) > (float)(*(float *)(v79 + 4 * v77[1]) * (float)*(int *)(v80 + 4 * v77[1])))
                      {
                        ++v77;
                        uint64_t v76 = v86;
                      }
                      uint64_t v82 = *v77;
                      long long v81 = v84;
                    }
                    while ((float)(*(float *)(v79 + 4 * *v77) * (float)*(int *)(v80 + 4 * *v77)) <= v83);
                    *long long v84 = result;
                  }
                }
                int64_t v74 = v75 - 1;
              }
              while (v75);
              uint64_t v87 = (unint64_t)v13 >> 3;
              do
              {
                uint64_t v88 = 0;
                uint64_t v89 = *v12;
                unint64_t v90 = *a3;
                BOOL v91 = a3[1];
                int v92 = v12;
                do
                {
                  unint64_t v93 = v92;
                  v92 += v88 + 1;
                  uint64_t v94 = 2 * v88;
                  uint64_t v88 = (2 * v88) | 1;
                  uint64_t v95 = v94 + 2;
                  if (v95 < v87)
                  {
                    id result = *v92;
                    if ((float)(*(float *)(*v90 + 4 * *v92) * (float)*(int *)(*v91 + 4 * *v92)) > (float)(*(float *)(*v90 + 4 * v92[1]) * (float)*(int *)(*v91 + 4 * v92[1])))
                    {
                      ++v92;
                      uint64_t v88 = v95;
                    }
                  }
                  *unint64_t v93 = *v92;
                }
                while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
                if (v92 == --a2)
                {
                  uint64_t *v92 = v89;
                }
                else
                {
                  uint64_t *v92 = *a2;
                  *a2 = v89;
                  uint64_t v96 = (char *)v92 - (char *)v12 + 8;
                  if (v96 >= 9)
                  {
                    unint64_t v97 = (((unint64_t)v96 >> 3) - 2) >> 1;
                    uint64_t v98 = &v12[v97];
                    uint64_t v99 = *v98;
                    uint64_t v100 = *v92;
                    uint64_t v101 = *v90;
                    uint64_t v102 = *v91;
                    float v103 = *(float *)(v101 + 4 * *v92) * (float)*(int *)(v102 + 4 * *v92);
                    if ((float)(*(float *)(v101 + 4 * *v98) * (float)*(int *)(v102 + 4 * *v98)) > v103)
                    {
                      do
                      {
                        uint64_t v104 = v98;
                        uint64_t *v92 = v99;
                        if (!v97) {
                          break;
                        }
                        unint64_t v97 = (v97 - 1) >> 1;
                        uint64_t v98 = &v12[v97];
                        uint64_t v99 = *v98;
                        int v92 = v104;
                      }
                      while ((float)(*(float *)(v101 + 4 * *v98) * (float)*(int *)(v102 + 4 * *v98)) > v103);
                      uint64_t *v104 = v100;
                    }
                  }
                }
              }
              while (v87-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v11, &v11[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v11 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
            id result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            *std::__split_buffer<int>::pointer v11 = *v16;
            uint64_t *v16 = v17;
          }
          else
          {
            id result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(&v11[v14 >> 1], v11, a2 - 1, a3);
          }
          --a4;
          uint64_t v18 = *v11;
          uint64_t v19 = **a3;
          uint64_t v20 = *a3[1];
          if (a5) {
            break;
          }
          float v21 = *(float *)(v19 + 4 * v18) * (float)*(int *)(v20 + 4 * v18);
          if ((float)(*(float *)(v19 + 4 * *(v11 - 1)) * (float)*(int *)(v20 + 4 * *(v11 - 1))) > v21) {
            goto LABEL_13;
          }
          if (v21 <= (float)(*(float *)(v19 + 4 * *(a2 - 1)) * (float)*(int *)(v20 + 4 * *(a2 - 1))))
          {
            unsigned __int16 v36 = v11 + 1;
            do
            {
              int64_t v12 = v36;
              if (v36 >= a2) {
                break;
              }
              ++v36;
            }
            while (v21 <= (float)(*(float *)(v19 + 4 * *v12) * (float)*(int *)(v20 + 4 * *v12)));
          }
          else
          {
            int64_t v12 = v11;
            do
            {
              uint64_t v35 = v12[1];
              ++v12;
            }
            while (v21 <= (float)(*(float *)(v19 + 4 * v35) * (float)*(int *)(v20 + 4 * v35)));
          }
          __n128 v37 = a2;
          if (v12 < a2)
          {
            __n128 v37 = a2;
            do
              uint64_t v38 = *--v37;
            while (v21 > (float)(*(float *)(v19 + 4 * v38) * (float)*(int *)(v20 + 4 * v38)));
          }
          if (v12 < v37)
          {
            uint64_t v39 = *v12;
            uint64_t v40 = *v37;
            do
            {
              uint64_t *v12 = v40;
              uint64_t *v37 = v39;
              do
              {
                uint64_t v41 = v12[1];
                ++v12;
                uint64_t v39 = v41;
              }
              while (v21 <= (float)(*(float *)(v19 + 4 * v41) * (float)*(int *)(v20 + 4 * v41)));
              do
              {
                uint64_t v42 = *--v37;
                uint64_t v40 = v42;
              }
              while (v21 > (float)(*(float *)(v19 + 4 * v42) * (float)*(int *)(v20 + 4 * v42)));
            }
            while (v12 < v37);
          }
          __n128 v43 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *std::__split_buffer<int>::pointer v11 = *v43;
          }
          a5 = 0;
          uint64_t *v43 = v18;
        }
        float v21 = *(float *)(v19 + 4 * v18) * (float)*(int *)(v20 + 4 * v18);
LABEL_13:
        uint64_t v22 = 0;
        do
          uint64_t v23 = v11[++v22];
        while ((float)(*(float *)(v19 + 4 * v23) * (float)*(int *)(v20 + 4 * v23)) > v21);
        std::vector<int>::pointer v24 = &v11[v22];
        uint64_t v25 = a2;
        if (v22 == 1)
        {
          uint64_t v25 = a2;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v27 = *--v25;
          }
          while ((float)(*(float *)(v19 + 4 * v27) * (float)*(int *)(v20 + 4 * v27)) <= v21);
        }
        else
        {
          do
            uint64_t v26 = *--v25;
          while ((float)(*(float *)(v19 + 4 * v26) * (float)*(int *)(v20 + 4 * v26)) <= v21);
        }
        if (v24 >= v25)
        {
          __n128 v33 = v24 - 1;
        }
        else
        {
          uint64_t v28 = *v25;
          uint64_t v29 = &v11[v22];
          uint64_t v30 = v25;
          do
          {
            uint64_t *v29 = v28;
            uint64_t *v30 = v23;
            do
            {
              uint64_t v31 = v29[1];
              ++v29;
              uint64_t v23 = v31;
            }
            while ((float)(*(float *)(v19 + 4 * v31) * (float)*(int *)(v20 + 4 * v31)) > v21);
            do
            {
              uint64_t v32 = *--v30;
              uint64_t v28 = v32;
            }
            while ((float)(*(float *)(v19 + 4 * v32) * (float)*(int *)(v20 + 4 * v32)) <= v21);
          }
          while (v29 < v30);
          __n128 v33 = v29 - 1;
        }
        if (v33 != v11) {
          *std::__split_buffer<int>::pointer v11 = *v33;
        }
        *__n128 v33 = v18;
        if (v24 >= v25) {
          break;
        }
LABEL_34:
        id result = std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(v11, v33, a3, a4, a5 & 1);
        a5 = 0;
        int64_t v12 = v33 + 1;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v11, v33, a3);
      int64_t v12 = v33 + 1;
      id result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v33 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v33;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = **a4;
  uint64_t v7 = *a4[1];
  float v8 = *(float *)(v6 + 4 * *a2) * (float)*(int *)(v7 + 4 * *a2);
  uint64_t v9 = *a3;
  float v10 = *(float *)(v6 + 4 * *result) * (float)*(int *)(v7 + 4 * *result);
  float v11 = *(float *)(v6 + 4 * *a3) * (float)*(int *)(v7 + 4 * *a3);
  if (v8 <= v10)
  {
    if (v11 > v8)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v12 = *result;
      if ((float)(*(float *)(v6 + 4 * *a2) * (float)*(int *)(v7 + 4 * *a2)) > (float)(*(float *)(v6 + 4 * *result)
                                                                                     * (float)*(int *)(v7 + 4 * *result)))
      {
        void *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 <= v8)
    {
      void *result = v4;
      *a2 = v5;
      if ((float)(*(float *)(v6 + 4 * *a3) * (float)*(int *)(v7 + 4 * *a3)) <= v10) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      void *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if ((float)(*(float *)(**a3 + 4 * v8) * (float)*(int *)(*a3[1] + 4 * v8)) > (float)(*(float *)(**a3 + 4 * *a1)
                                                                                         * (float)*(int *)(*a3[1] + 4 * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v22 = a1 + 1;
      uint64_t v23 = a1 + 2;
      std::vector<int>::pointer v24 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v25 = *(a2 - 1);
      uint64_t v26 = a1[3];
      uint64_t v27 = a3[1];
      uint64_t v28 = **a3;
      uint64_t v29 = *v27;
      if ((float)(*(float *)(v28 + 4 * v25) * (float)*(int *)(*v27 + 4 * v25)) > (float)(*(float *)(v28 + 4 * v26)
                                                                                        * (float)*(int *)(*v27 + 4 * v26)))
      {
        *std::vector<int>::pointer v24 = v25;
        *(a2 - 1) = v26;
        uint64_t v30 = *v24;
        uint64_t v31 = *v23;
        float v32 = *(float *)(v28 + 4 * *v24) * (float)*(int *)(v29 + 4 * *v24);
        if (v32 > (float)(*(float *)(v28 + 4 * *v23) * (float)*(int *)(v29 + 4 * *v23)))
        {
          *uint64_t v23 = v30;
          uint64_t v33 = *v22;
          float v34 = *(float *)(v28 + 4 * *v22);
          *std::vector<int>::pointer v24 = v31;
          if (v32 > (float)(v34 * (float)*(int *)(v29 + 4 * v33)))
          {
            uint64_t v35 = *a1;
            float v36 = *(float *)(v28 + 4 * *a1);
            a1[1] = v30;
            a1[2] = v33;
            if (v32 > (float)(v36 * (float)*(int *)(v29 + 4 * v35)))
            {
              *a1 = v30;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      float v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      float v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = **a3;
      uint64_t v14 = *a3[1];
      uint64_t v15 = 24;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *v10;
    float v18 = *(float *)(v13 + 4 * *v11) * (float)*(int *)(v14 + 4 * *v11);
    if (v18 > (float)(*(float *)(v13 + 4 * *v10) * (float)*(int *)(v14 + 4 * *v10)))
    {
      uint64_t v19 = v15;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        uint64_t v20 = v19 - 8;
        if (v19 == 8) {
          break;
        }
        uint64_t v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v19 -= 8;
        if (v18 <= (float)(*(float *)(v13 + 4 * v17) * (float)*(int *)(v14 + 4 * v17)))
        {
          float v21 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      float v21 = a1;
LABEL_13:
      uint64_t *v21 = v16;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    float v10 = v11;
    v15 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  int v12 = a5[1];
  uint64_t v13 = **a5;
  uint64_t v14 = *v12;
  if ((float)(*(float *)(v13 + 4 * *a4) * (float)*(int *)(*v12 + 4 * *a4)) > (float)(*(float *)(v13 + 4 * *a3)
                                                                                    * (float)*(int *)(*v12 + 4 * *a3)))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v15 = *a2;
    if ((float)(*(float *)(v13 + 4 * *a3) * (float)*(int *)(v14 + 4 * *a3)) > (float)(*(float *)(v13 + 4 * *a2)
                                                                                     * (float)*(int *)(v14 + 4 * *a2)))
    {
      *a2 = *a3;
      *a3 = v15;
      uint64_t v16 = *a1;
      if ((float)(*(float *)(v13 + 4 * *a2) * (float)*(int *)(v14 + 4 * *a2)) > (float)(*(float *)(v13 + 4 * *a1)
                                                                                       * (float)*(int *)(v14 + 4 * *a1)))
      {
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

void *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  BOOL result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        void *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        BOOL result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    float v21 = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v17 = v14;
    float v18 = &v14[24 * v10];
    uint64_t v19 = v18;
    uint64_t v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_237C902DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<std::vector<float>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  long long v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a2)
  {
    uint64_t v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      BOOL result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_237C90378(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>(uint64_t a1, long long *a2, long long *a3, __n128 *a4)
{
  uint64_t v5 = (__n128 *)a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    __n128 v7 = *v5;
    __n128 v8 = v5[1];
    __n128 v9 = v5[3];
    a4[2] = v5[2];
    a4[3] = v9;
    *a4 = v7;
    a4[1] = v8;
    __n128 v10 = v5[4];
    __n128 v11 = v5[5];
    __n128 v12 = v5[7];
    a4[6] = v5[6];
    a4[7] = v12;
    a4[4] = v10;
    a4[5] = v11;
    uint64_t v13 = v5[8].n128_i64[0];
    v5[8].n128_u64[0] = 0;
    uint64_t v14 = (void *)a4[8].n128_u64[0];
    a4[8].n128_u64[0] = v13;

    a4[8].n128_u32[2] = v5[8].n128_u32[2];
    uint64_t v15 = v5[9].n128_i64[0];
    v5[9].n128_u64[0] = 0;
    uint64_t v16 = (void *)a4[9].n128_u64[0];
    a4[9].n128_u64[0] = v15;

    uint64_t v17 = v5[9].n128_i64[1];
    v5[9].n128_u64[1] = 0;
    float v18 = (void *)a4[9].n128_u64[1];
    a4[9].n128_u64[1] = v17;

    std::vector<float>::__move_assign((uint64_t)&a4[10], v5 + 10);
    std::vector<BOOL>::__move_assign((uint64_t)&a4[11].n128_i64[1], &v5[11].n128_u64[1]);
    uint64_t v19 = v5[13].n128_i64[0];
    v5[13].n128_u64[0] = 0;
    uint64_t v20 = (void *)a4[13].n128_u64[0];
    a4[13].n128_u64[0] = v19;

    a4[13].n128_u16[4] = v5[13].n128_u16[4];
    a4 += 14;
    v5 += 14;
  }
  while (v5 != (__n128 *)v6);
  return v6;
}

long long *std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d*>,std::__wrap_iter<OUBox3d*>>(uint64_t *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    __n128 v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 5) >= a5)
      {
        float v21 = &a3[14 * a5];
      }
      else
      {
        float v21 = &a3[2 * ((uint64_t)(v12 - (void)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<OUBox3d>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x92492492492492) {
        unint64_t v18 = 0x124924924924924;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = (OUBox3d *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[224 * v18];
      uint64_t v23 = 224 * a5;
      std::vector<int>::pointer v24 = (OUBox3d *)((char *)v22 + 224 * a5);
      do
      {
        OUBox3d::OUBox3d(v22, (const OUBox3d *)v7);
        uint64_t v22 = (OUBox3d *)((char *)v22 + 224);
        v7 += 14;
        v23 -= 224;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = (long long *)std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_237C90650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  int v5 = *result;
  uint64_t v6 = *a4;
  uint64_t v7 = *(void *)(*a4 + 24 * *((int *)a4 + 6));
  float v8 = *(float *)(v7 + 4 * v4);
  uint64_t v9 = *a3;
  float v10 = *(float *)(v7 + 4 * v9);
  if (v8 <= *(float *)(v7 + 4 * *result))
  {
    if (v10 > v8)
    {
      *a2 = v9;
      *a3 = v4;
      uint64_t v11 = *a2;
      uint64_t v12 = *(void *)(v6 + 24 * *((int *)a4 + 6));
      uint64_t v13 = *result;
      if (*(float *)(v12 + 4 * v11) > *(float *)(v12 + 4 * v13))
      {
        void *result = v11;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (v10 <= v8)
    {
      void *result = v4;
      *a2 = v5;
      uint64_t v14 = *(void *)(v6 + 24 * *((int *)a4 + 6));
      uint64_t v15 = *a3;
      if (*(float *)(v14 + 4 * v15) <= *(float *)(v14 + 4 * v5)) {
        return result;
      }
      *a2 = v15;
    }
    else
    {
      void *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *(void *)(*(void *)a3 + 24 * *(int *)(a3 + 24));
      uint64_t v10 = *a1;
      if (*(float *)(v9 + 4 * v8) > *(float *)(v9 + 4 * v10))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a2 - 1 withOldObjects:(uint64_t *)a3];
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v25 = a1 + 2;
      uint64_t v26 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      uint64_t v27 = *(a2 - 1);
      uint64_t v28 = *(void *)a3;
      uint64_t v29 = *(void *)(*(void *)a3 + 24 * *(int *)(a3 + 24));
      uint64_t v30 = a1[3];
      if (*(float *)(v29 + 4 * v27) > *(float *)(v29 + 4 * v30))
      {
        *uint64_t v26 = v27;
        *(a2 - 1) = v30;
        int v31 = *v26;
        uint64_t v32 = *(void *)(v28 + 24 * *(int *)(a3 + 24));
        uint64_t v33 = *v25;
        if (*(float *)(v32 + 4 * *v26) > *(float *)(v32 + 4 * v33))
        {
          int *v25 = v31;
          *uint64_t v26 = v33;
          uint64_t v34 = *(void *)(v28 + 24 * *(int *)(a3 + 24));
          uint64_t v35 = a1[1];
          if (*(float *)(v34 + 4 * v31) > *(float *)(v34 + 4 * v35))
          {
            a1[1] = v31;
            a1[2] = v35;
            uint64_t v36 = *(void *)(v28 + 24 * *(int *)(a3 + 24));
            uint64_t v37 = *a1;
            if (*(float *)(v36 + 4 * v31) > *(float *)(v36 + 4 * v37))
            {
              *a1 = v31;
              a1[1] = v37;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a1 + 2 withOldObjects:(uint64_t *)a3];
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = 12;
      break;
  }
  while (1)
  {
    int v16 = *v12;
    uint64_t v17 = *(void *)(v14 + 24 * *(int *)(a3 + 24));
    uint64_t v18 = *v11;
    if (*(float *)(v17 + 4 * *v12) > *(float *)(v17 + 4 * v18))
    {
      uint64_t v19 = v15;
      while (1)
      {
        *(int *)((char *)a1 + v19) = v18;
        uint64_t v20 = v19 - 4;
        if (v19 == 4) {
          break;
        }
        uint64_t v18 = *(int *)((char *)a1 + v19 - 8);
        uint64_t v21 = *(void *)(v14 + 24 * *(int *)(a3 + 24));
        float v22 = *(float *)(v21 + 4 * v16);
        float v23 = *(float *)(v21 + 4 * v18);
        uint64_t v19 = v20;
        if (v22 <= v23)
        {
          std::vector<int>::pointer v24 = (int *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      std::vector<int>::pointer v24 = a1;
LABEL_13:
      *std::vector<int>::pointer v24 = v16;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v15 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a3 withOldObjects:(uint64_t *)a5];
  uint64_t v11 = *a4;
  uint64_t v12 = *(void *)a5;
  uint64_t v13 = *(void *)(*(void *)a5 + 24 * *(int *)(a5 + 24));
  uint64_t v14 = *a3;
  if (*(float *)(v13 + 4 * v11) > *(float *)(v13 + 4 * v14))
  {
    *a3 = v11;
    *a4 = v14;
    uint64_t v15 = *a3;
    uint64_t v16 = *(void *)(v12 + 24 * *(int *)(a5 + 24));
    uint64_t v17 = *a2;
    if (*(float *)(v16 + 4 * v15) > *(float *)(v16 + 4 * v17))
    {
      *a2 = v15;
      *a3 = v17;
      uint64_t v18 = *a2;
      uint64_t v19 = *(void *)(v12 + 24 * *(int *)(a5 + 24));
      uint64_t v20 = *a1;
      if (*(float *)(v19 + 4 * v18) > *(float *)(v19 + 4 * v20))
      {
        *a1 = v18;
        *a2 = v20;
      }
    }
  }
  return result;
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    BOOL result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_237C91430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_237C914F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *result, int *a2, int *a3, uint64_t *a4)
{
  int v4 = *a2;
  int v5 = *result;
  uint64_t v6 = *a4;
  uint64_t v7 = *((int *)a4 + 6);
  float v8 = *(float *)(*(void *)(*a4 + 24 * *a2) + 4 * v7);
  uint64_t v9 = *(void *)(*a4 + 24 * *result);
  int v10 = *a3;
  float v11 = *(float *)(*(void *)(*a4 + 24 * *a3) + 4 * v7);
  if (v8 <= *(float *)(v9 + 4 * v7))
  {
    if (v11 > v8)
    {
      *a2 = v10;
      *a3 = v4;
      int v12 = *result;
      if (*(float *)(*(void *)(v6 + 24 * *a2) + 4 * *((int *)a4 + 6)) > *(float *)(*(void *)(v6 + 24 * *result)
                                                                                        + 4 * *((int *)a4 + 6)))
      {
        int *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 <= v8)
    {
      int *result = v4;
      *a2 = v5;
      if (*(float *)(*(void *)(v6 + 24 * *a3) + 4 * *((int *)a4 + 6)) <= *(float *)(v9 + 4 * *((int *)a4 + 6))) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      int *result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 1);
      int v9 = *a1;
      if (*(float *)(*(void *)(*(void *)a3 + 24 * v8) + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(*(void *)a3 + 24 * *a1) + 4 * *(int *)(a3 + 24)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a2 - 1 withOldObjects:(uint64_t *)a3];
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::vector<int>::pointer v24 = a1 + 2;
      uint64_t v25 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      int v26 = *(a2 - 1);
      int v27 = a1[3];
      uint64_t v28 = *(void *)a3;
      if (*(float *)(*(void *)(*(void *)a3 + 24 * v26) + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(*(void *)a3 + 24 * v27) + 4 * *(int *)(a3 + 24)))
      {
        int *v25 = v26;
        *(a2 - 1) = v27;
        int v29 = *v25;
        int v30 = *v24;
        uint64_t v31 = *(void *)(v28 + 24 * *v25);
        if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(v28 + 24 * *v24)
                                                                  + 4 * *(int *)(a3 + 24)))
        {
          *std::vector<int>::pointer v24 = v29;
          int *v25 = v30;
          int v32 = a1[1];
          if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(v28 + 24 * v32)
                                                                    + 4 * *(int *)(a3 + 24)))
          {
            a1[1] = v29;
            a1[2] = v32;
            int v33 = *a1;
            if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(v28 + 24 * *a1)
                                                                      + 4 * *(int *)(a3 + 24)))
            {
              *a1 = v29;
              a1[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      int v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a1 + 2 withOldObjects:(uint64_t *)a3];
      float v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *(void *)a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    int v15 = *v11;
    int v16 = *v10;
    uint64_t v17 = *(void *)(v13 + 24 * *v11);
    if (*(float *)(v17 + 4 * *(int *)(a3 + 24)) > *(float *)(*(void *)(v13 + 24 * *v10) + 4 * *(int *)(a3 + 24)))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        int v16 = *(int *)((char *)a1 + v18 - 8);
        uint64_t v20 = *(int *)(a3 + 24);
        float v21 = *(float *)(v17 + 4 * v20);
        float v22 = *(float *)(*(void *)(v13 + 24 * v16) + 4 * v20);
        uint64_t v18 = v19;
        if (v21 <= v22)
        {
          float v23 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      float v23 = a1;
LABEL_13:
      *float v23 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    int v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,[(OU3DObjectDetector *)a1 assignIdentifiersForNewObjects:a3 withOldObjects:(uint64_t *)a5];
  int v11 = *a3;
  uint64_t v12 = *(void *)a5;
  if (*(float *)(*(void *)(*(void *)a5 + 24 * *a4) + 4 * *(int *)(a5 + 24)) > *(float *)(*(void *)(*(void *)a5 + 24 * *a3)
                                                                                                + 4
                                                                                                * *(int *)(a5 + 24)))
  {
    *a3 = *a4;
    *a4 = v11;
    int v13 = *a2;
    if (*(float *)(*(void *)(v12 + 24 * *a3) + 4 * *(int *)(a5 + 24)) > *(float *)(*(void *)(v12 + 24 * *a2)
                                                                                        + 4 * *(int *)(a5 + 24)))
    {
      *a2 = *a3;
      *a3 = v13;
      int v14 = *a1;
      if (*(float *)(*(void *)(v12 + 24 * *a2) + 4 * *(int *)(a5 + 24)) > *(float *)(*(void *)(v12 + 24 * *a1)
                                                                                          + 4 * *(int *)(a5 + 24)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEEC2B8ne180100ESt16initializer_listIS9_ERKS5_(uint64_t a1, void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      _ZNSt3__16__treeINS_12__value_typeIU8__strongP8NSStringDv3_fEENS_19__map_value_compareIS4_S6_15CompareNSStringLb1EEENS_9allocatorIS6_EEE30__emplace_hint_unique_key_argsIS4_JRKNS_4pairIU8__strongKS3_S5_EEEEENSE_INS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEbEENS_21__tree_const_iteratorIS6_SN_lEERKT_DpOT0_((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_237C923BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *_ZNSt3__16__treeINS_12__value_typeIU8__strongP8NSStringDv3_fEENS_19__map_value_compareIS4_S6_15CompareNSStringLb1EEENS_9allocatorIS6_EEE30__emplace_hint_unique_key_argsIS4_JRKNS_4pairIU8__strongKS3_S5_EEEEENSE_INS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEbEENS_21__tree_const_iteratorIS6_SN_lEERKT_DpOT0_(uint64_t **a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v7[4] = *(id *)a4;
    *((_OWORD *)v7 + 3) = *(_OWORD *)(a4 + 16);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::multimap[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__emplace_hint_multi<std::pair<NSString * const {__strong},SemanticLabelv5> const&>((uint64_t **)a1, v4, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_237C924CC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__emplace_hint_multi<std::pair<NSString * const {__strong},SemanticLabelv5> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 1);
  uint64_t v7 = operator new(0x30uLL);
  v10[2] = v6;
  *((void *)v7 + 4) = *(id *)a3;
  *((unsigned char *)v7 + 40) = *(unsigned char *)(a3 + 8);
  char v11 = 1;
  leaf = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf(a1, a2, v10, (void **)v7 + 4);
  std::__tree<int>::__insert_node_at(a1, v10[0], leaf, (uint64_t *)v7);
  return v7;
}

void sub_237C92588(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},SemanticLabelv5>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf(void *a1, uint64_t a2, void *a3, void **a4)
{
  uint64_t v6 = (void *)a2;
  if (a1 + 1 != (void *)a2 && CompareNSString::operator()((uint64_t)(a1 + 2), *(void **)(a2 + 32), *a4))
  {
    return std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_low((uint64_t)a1, a3, a4);
  }
  if ((void *)*a1 == v6)
  {
    uint64_t v10 = v6;
LABEL_17:
    if (*v6)
    {
      *a3 = v10;
      return v10 + 1;
    }
    else
    {
      *a3 = v6;
    }
    return v6;
  }
  int v9 = (void *)*v6;
  if (*v6)
  {
    do
    {
      uint64_t v10 = v9;
      int v9 = (void *)v9[1];
    }
    while (v9);
  }
  else
  {
    char v11 = v6;
    do
    {
      uint64_t v10 = (void *)v11[2];
      BOOL v12 = *v10 == (void)v11;
      char v11 = v10;
    }
    while (v12);
  }
  if (!CompareNSString::operator()((uint64_t)(a1 + 2), *a4, (void *)v10[4])) {
    goto LABEL_17;
  }
  return std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_high((uint64_t)a1, a3, a4);
}

void *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_high(uint64_t a1, void *a2, void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v5 = (void *)v4;
        if (!CompareNSString::operator()(v7, *a3, *(void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        BOOL result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    BOOL result = v5 + 1;
  }
  else
  {
    BOOL result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_low(uint64_t a1, void *a2, void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v5 = (void *)v4;
        if (CompareNSString::operator()(v7, *(void **)(v4 + 32), *a3)) {
          break;
        }
        uint64_t v4 = *v5;
        BOOL result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    BOOL result = v5 + 1;
  }
  else
  {
    BOOL result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},SemanticLabelv5>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

OU3DObjectRGBSizeRefiner *std::unique_ptr<OU3DObjectRGBSizeRefiner>::reset[abi:ne180100](OU3DObjectRGBSizeRefiner **a1, OU3DObjectRGBSizeRefiner *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    OU3DObjectRGBSizeRefiner::~OU3DObjectRGBSizeRefiner(result);
    JUMPOUT(0x237E2C510);
  }
  return result;
}

void OU3DObjectRGBSizeRefiner::~OU3DObjectRGBSizeRefiner(OU3DObjectRGBSizeRefiner *this)
{
  uint64_t v2 = (void *)*((void *)this + 40);
  if (v2)
  {
    *((void *)this + 41) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 37);
  if (v3)
  {
    *((void *)this + 38) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 34);
  if (v4)
  {
    *((void *)this + 35) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 31);
  if (v5)
  {
    *((void *)this + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 28);
  if (v6)
  {
    *((void *)this + 29) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  uint64_t v7 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }

  int v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *(void **)a1;
}

void *std::__tree<std::__value_type<NSString * {__strong},short>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},short>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},short>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, id **a4)
{
  uint64_t v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x30uLL);
    v7[4] = **a4;
    *((_WORD *)v7 + 20) = 0;
    std::__tree<int>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      int v8 = *(_DWORD **)v4;
      int v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)int v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void _GLOBAL__sub_I_OU3DObjectDetector_mm()
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x237E2CC70]();
  LODWORD(v157) = 0;
  *((void *)&v157 + 1) = @"Unknown";
  LODWORD(v158) = 1;
  *((void *)&v158 + 1) = *((id *)&v157 + 1);
  LODWORD(v159) = 2;
  *((void *)&v159 + 1) = *((id *)&v158 + 1);
  LODWORD(v160) = 3;
  *((void *)&v160 + 1) = *((id *)&v159 + 1);
  LODWORD(v161) = 4;
  *((void *)&v161 + 1) = *((id *)&v160 + 1);
  LODWORD(v162) = 5;
  *((void *)&v162 + 1) = *((id *)&v161 + 1);
  LODWORD(v163) = 6;
  unint64_t v134 = @"Door";
  *((void *)&v163 + 1) = v134;
  LODWORD(v164) = 7;
  uint64_t v123 = @"Window";
  *((void *)&v164 + 1) = v123;
  LODWORD(v165) = 8;
  *((void *)&v165 + 1) = *((id *)&v162 + 1);
  LODWORD(v166) = 9;
  int v153 = @"Fireplace";
  *((void *)&v166 + 1) = v153;
  LODWORD(v167) = 10;
  *((void *)&v167 + 1) = *((id *)&v165 + 1);
  LODWORD(v168) = 11;
  *((void *)&v168 + 1) = *((id *)&v167 + 1);
  LODWORD(v169) = 12;
  unint64_t v113 = @"Stairs";
  *((void *)&v169 + 1) = v113;
  LODWORD(v170) = 13;
  long long v128 = @"Bed";
  *((void *)&v170 + 1) = v128;
  LODWORD(v171) = 14;
  long long v172 = @"Cabinet";
  LODWORD(v173) = 15;
  long long v149 = @"Chair";
  *((void *)&v173 + 1) = v149;
  LODWORD(v174) = 16;
  long long v175 = v172;
  LODWORD(v176) = 17;
  *((void *)&v176 + 1) = v175;
  LODWORD(v177) = 18;
  std::vector<int>::pointer v144 = @"Sofa";
  long long v178 = v144;
  LODWORD(v179) = 19;
  uint64_t v139 = @"Table";
  *((void *)&v179 + 1) = v139;
  LODWORD(v180) = 20;
  int v118 = @"Toilet";
  long long v181 = v118;
  LODWORD(v182) = 21;
  uint64_t v0 = @"Sink";
  *((void *)&v182 + 1) = v0;
  LODWORD(v183) = 22;
  uint64_t v107 = @"Bathtub";
  long long v184 = v107;
  LODWORD(v185) = 23;
  *((void *)&v185 + 1) = *((id *)&v168 + 1);
  LODWORD(v186) = 24;
  uint64_t v1 = @"Refrigerator";
  long long v187 = v1;
  LODWORD(v188) = 25;
  uint64_t v2 = @"Stove";
  *((void *)&v188 + 1) = v2;
  LODWORD(v189) = 26;
  long long v3 = @"Washer";
  long long v190 = v3;
  LODWORD(v191) = 27;
  uint64_t v4 = @"Oven";
  *((void *)&v191 + 1) = v4;
  LODWORD(v192) = 28;
  int v5 = @"Dishwasher";
  uint64_t v193 = v5;
  LODWORD(v194) = 29;
  *((void *)&v194 + 1) = *((id *)&v185 + 1);
  LODWORD(v195) = 30;
  uint64_t v6 = (__CFString *)*((id *)&v176 + 1);
  uint64_t v196 = v6;
  LODWORD(v197) = 31;
  *((void *)&v197 + 1) = *((id *)&v194 + 1);
  LODWORD(v198) = 32;
  uint64_t v7 = @"Screen";
  uint64_t v199 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v157, 33);
  for (uint64_t i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_237C17000);
  long long v167 = xmmword_237CB5EC0;
  long long v168 = unk_237CB5ED0;
  long long v169 = xmmword_237CB5EE0;
  long long v170 = unk_237CB5EF0;
  long long v163 = xmmword_237CB5E80;
  long long v164 = unk_237CB5E90;
  long long v165 = xmmword_237CB5EA0;
  long long v166 = unk_237CB5EB0;
  long long v159 = xmmword_237CB5E40;
  long long v160 = unk_237CB5E50;
  long long v161 = xmmword_237CB5E60;
  long long v162 = unk_237CB5E70;
  long long v157 = xmmword_237CB5E20;
  long long v158 = unk_237CB5E30;
  uint64_t v171 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v157, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_237C17000);
  LODWORD(v157) = 0;
  uint64_t v102 = v6;
  *((void *)&v157 + 1) = v102;
  LODWORD(v158) = 1;
  unint64_t v97 = v1;
  *((void *)&v158 + 1) = v97;
  LODWORD(v159) = 2;
  uint64_t v94 = @"Shelf";
  *((void *)&v159 + 1) = v94;
  LODWORD(v160) = 3;
  int v92 = v2;
  *((void *)&v160 + 1) = v92;
  LODWORD(v161) = 4;
  uint64_t v129 = v128;
  *((void *)&v161 + 1) = v129;
  LODWORD(v162) = 5;
  unint64_t v90 = v0;
  *((void *)&v162 + 1) = v90;
  LODWORD(v163) = 6;
  uint64_t v88 = v3;
  *((void *)&v163 + 1) = v88;
  LODWORD(v164) = 7;
  uint64_t v119 = v118;
  *((void *)&v164 + 1) = v119;
  LODWORD(v165) = 8;
  uint64_t v108 = v107;
  *((void *)&v165 + 1) = v108;
  LODWORD(v166) = 9;
  uint64_t v87 = v4;
  *((void *)&v166 + 1) = v87;
  LODWORD(v167) = 10;
  uint64_t v86 = v5;
  *((void *)&v167 + 1) = v86;
  LODWORD(v168) = 11;
  int v154 = v153;
  *((void *)&v168 + 1) = v154;
  LODWORD(v169) = 12;
  uint64_t v85 = @"Stool";
  *((void *)&v169 + 1) = v85;
  LODWORD(v170) = 13;
  uint64_t v9 = v149;
  *((void *)&v170 + 1) = v9;
  LODWORD(v171) = 14;
  unint64_t v10 = v139;
  long long v172 = v10;
  LODWORD(v173) = 15;
  uint64_t v11 = v7;
  *((void *)&v173 + 1) = v11;
  LODWORD(v174) = 16;
  unint64_t v12 = v144;
  long long v175 = v12;
  LODWORD(v176) = 17;
  int v13 = v113;
  *((void *)&v176 + 1) = v13;
  LODWORD(v177) = 18;
  int v14 = v123;
  long long v178 = v14;
  LODWORD(v179) = 19;
  int v15 = v134;
  *((void *)&v179 + 1) = v15;
  LODWORD(v180) = 20;
  int v16 = @"BuildInCabinet";
  long long v181 = v16;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v157, 21);
  for (uint64_t j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_237C17000);
  uint64_t v18 = v102;
  *(void *)&long long v157 = v18;
  long long v84 = v97;
  *((void *)&v157 + 1) = v84;
  uint64_t v95 = v94;
  *(void *)&long long v158 = v95;
  uint64_t v98 = v92;
  *((void *)&v158 + 1) = v98;
  unint64_t v150 = v129;
  *(void *)&long long v159 = v150;
  float v103 = v90;
  *((void *)&v159 + 1) = v103;
  long long v114 = v88;
  *(void *)&long long v160 = v114;
  unint64_t v124 = v119;
  *((void *)&v160 + 1) = v124;
  uint64_t v19 = v108;
  *(void *)&long long v161 = v19;
  unint64_t v130 = v87;
  *((void *)&v161 + 1) = v130;
  uint64_t v135 = v86;
  *(void *)&long long v162 = v135;
  uint64_t v140 = v154;
  *((void *)&v162 + 1) = v140;
  unint64_t v145 = v85;
  *(void *)&long long v163 = v145;
  uint64_t v120 = v9;
  *((void *)&v163 + 1) = v120;
  uint64_t v20 = v10;
  *(void *)&long long v164 = v20;
  uint64_t v109 = v11;
  *((void *)&v164 + 1) = v109;
  float v21 = v12;
  *(void *)&long long v165 = v21;
  *((void *)&v165 + 1) = v13;
  *(void *)&long long v166 = v14;
  *((void *)&v166 + 1) = v15;
  *(void *)&long long v167 = v16;
  qword_26AF273E0 = 0;
  qword_26AF273E8 = 0;
  ou3dod::kObjectTypesLUT = 0;
  float v22 = (char *)operator new(0xA8uLL);
  uint64_t v23 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v22;
  qword_26AF273E0 = (uint64_t)v22;
  qword_26AF273E8 = (uint64_t)(v22 + 168);
  do
  {
    *(void *)&v22[v23] = *(id *)((char *)&v157 + v23);
    v23 += 8;
  }
  while (v23 != 168);
  qword_26AF273E0 = (uint64_t)(v22 + 168);
  for (uint64_t k = 160; k != -8; k -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_237C17000);
  uint64_t v25 = v18;
  qword_26AF27598 = 0;
  unk_26AF275A0 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  *(void *)&long long v157 = &ou3dod::kAFClassIdToObjectTypeOffline;
  BYTE8(v157) = 0;
  int v26 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v26;
  *int v26 = v25;
  qword_26AF27598 = (uint64_t)(v26 + 1);
  unk_26AF275A0 = v26 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_237C17000);
  int v27 = v25;
  *(void *)&long long v157 = v27;
  uint64_t v28 = v150;
  *((void *)&v157 + 1) = v28;
  int v29 = v19;
  *(void *)&long long v158 = v29;
  int v30 = v20;
  *((void *)&v158 + 1) = v30;
  uint64_t v31 = v21;
  *(void *)&long long v159 = v31;
  qword_26AF27470 = 0;
  qword_26AF27478 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  int v32 = (char *)operator new(0x28uLL);
  uint64_t v33 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v32;
  qword_26AF27470 = (uint64_t)v32;
  qword_26AF27478 = (uint64_t)(v32 + 40);
  do
  {
    *(void *)&v32[v33] = *(id *)((char *)&v157 + v33);
    v33 += 8;
  }
  while (v33 != 40);
  qword_26AF27470 = (uint64_t)(v32 + 40);
  for (uint64_t m = 32; m != -8; m -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_237C17000);
  qword_26AF27508 = 0;
  unk_26AF27510 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  uint64_t v35 = operator new(0x50uLL);
  qword_26AF27508 = (uint64_t)(v35 + 5);
  unk_26AF27510 = v35 + 5;
  v35[2] = xmmword_237CB5F30;
  v35[3] = unk_237CB5F40;
  v35[4] = xmmword_237CB5F50;
  _OWORD *v35 = xmmword_237CB5F10;
  v35[1] = unk_237CB5F20;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v35;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_237C17000);
  uint64_t v36 = v27;
  *(void *)&long long v157 = v36;
  DWORD2(v157) = 1055286886;
  uint64_t v37 = v28;
  *(void *)&long long v158 = v37;
  DWORD2(v158) = 1039516303;
  uint64_t v38 = v29;
  *(void *)&long long v159 = v38;
  DWORD2(v159) = 1045220557;
  uint64_t v39 = v30;
  *(void *)&long long v160 = v39;
  DWORD2(v160) = 1050253722;
  uint64_t v40 = v31;
  *(void *)&long long v161 = v40;
  DWORD2(v161) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v157, 5);
  for (uint64_t n = 64; n != -16; n -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_237C17000);
  *((void *)&v157 + 1) = @"Chair-chair_type-dining";
  LODWORD(v158) = 2;
  *((void *)&v158 + 1) = @"Chair-chair_type-swivel";
  LODWORD(v159) = 3;
  *((void *)&v159 + 1) = @"Chair-chair_type-other";
  LODWORD(v160) = 4;
  *((void *)&v160 + 1) = @"Chair-chair_leg_type-four";
  LODWORD(v161) = 5;
  *((void *)&v161 + 1) = @"Chair-chair_leg_type-star";
  LODWORD(v162) = 6;
  *((void *)&v162 + 1) = @"Chair-chair_leg_type-other";
  LODWORD(v163) = 7;
  *((void *)&v163 + 1) = @"Chair-chair_arm_type-missing";
  LODWORD(v164) = 8;
  *((void *)&v164 + 1) = @"Chair-chair_arm_type-existing";
  LODWORD(v165) = 9;
  *((void *)&v165 + 1) = @"Chair-chair_back_type-missing";
  LODWORD(v166) = 10;
  *((void *)&v166 + 1) = @"Chair-chair_back_type-existing";
  LODWORD(v167) = 11;
  *((void *)&v167 + 1) = @"Chair-chair_seat_height-tall_seat";
  LODWORD(v168) = 12;
  *((void *)&v168 + 1) = @"Chair-chair_seat_height-normal/low_seat";
  LODWORD(v169) = 13;
  *((void *)&v169 + 1) = @"Chair-chair_seat_shape-rectangular";
  LODWORD(v170) = 14;
  *((void *)&v170 + 1) = @"Chair-chair_seat_shape-round";
  LODWORD(v171) = 15;
  long long v172 = @"Chair-chair_seat_shape-none";
  LODWORD(v173) = 16;
  *((void *)&v173 + 1) = @"Sofa-sofa_type-rectangular";
  LODWORD(v174) = 17;
  long long v175 = @"Sofa-sofa_type-lShaped";
  LODWORD(v176) = 18;
  *((void *)&v176 + 1) = @"Sofa-sofa_type-singleSeat";
  LODWORD(v177) = 19;
  long long v178 = @"Sofa-sofa_type-lShapedMain";
  LODWORD(v179) = 20;
  *((void *)&v179 + 1) = @"Sofa-sofa_type-lShapedExtension";
  LODWORD(v180) = 21;
  long long v181 = @"Sofa-sofa_type-lShapedMiddle";
  LODWORD(v182) = 22;
  *((void *)&v182 + 1) = @"Sofa-sofa_type-other";
  LODWORD(v183) = 23;
  long long v184 = @"Sofa-sofa_arm_type-missing";
  LODWORD(v185) = 24;
  *((void *)&v185 + 1) = @"Sofa-sofa_arm_type-two_arms";
  LODWORD(v186) = 25;
  long long v187 = @"Sofa-sofa_arm_type-none";
  LODWORD(v188) = 26;
  *((void *)&v188 + 1) = @"Sofa-sofa_back_type-missing";
  LODWORD(v189) = 27;
  long long v190 = @"Sofa-sofa_back_type-existing";
  LODWORD(v191) = 28;
  *((void *)&v191 + 1) = @"Table-table_type-desk";
  LODWORD(v192) = 29;
  uint64_t v193 = @"Table-table_type-coffee";
  LODWORD(v194) = 30;
  *((void *)&v194 + 1) = @"Table-table_type-dining";
  LODWORD(v195) = 31;
  uint64_t v196 = @"Table-table_type-other";
  LODWORD(v197) = 32;
  *((void *)&v197 + 1) = @"Table-table_shape-rectangular";
  LODWORD(v198) = 33;
  uint64_t v199 = @"Table-table_shape-lShaped";
  LODWORD(v200) = 34;
  *((void *)&v200 + 1) = @"Table-table_shape-circularElliptic";
  int v201 = 35;
  uint64_t v202 = @"Table-table_shape-other";
  int v203 = 36;
  long long v204 = @"Table-table_leg_type-two_leg";
  int v205 = 37;
  long long v206 = @"Table-table_leg_type-four_leg";
  int v207 = 38;
  long long v208 = @"Table-table_leg_type-none";
  int v209 = 39;
  long long v210 = @"Table-table_attribute-with_storage";
  int v211 = 40;
  long long v212 = @"Table-table_attribute-without_storage";
  int v213 = 41;
  long long v214 = @"Cabinet-cabinet_type-standalone_cabinet";
  int v215 = 42;
  long long v216 = @"Cabinet-cabinet_type-kitchen_cabinet";
  int v217 = 43;
  long long v218 = @"Cabinet-cabinet_type-nightstand";
  int v219 = 44;
  long long v220 = @"Cabinet-cabinet_type-none";
  int v221 = 45;
  long long v222 = @"Cabinet-cabinet_attribute-no_countertop";
  int v223 = 46;
  long long v224 = @"Cabinet-cabinet_attribute-with_countertop";
  int v225 = 100;
  long long v226 = @"Sofa-sofa_arm_type-existing";
  int v227 = 101;
  LODWORD(v157) = 0;
  long long v228 = @"Storage-storage_type-cabinet";
  int v229 = 102;
  long long v230 = @"Storage-storage_type-shelf";
  int v231 = 103;
  long long v232 = @"Chair-chair_type-stool";
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v157, 50);
  for (iuint64_t i = 792; ii != -8; ii -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], ou3dor::k3DORSupportedAttributeTypeMap, &dword_237C17000);
  RW_VW = xmmword_237CB4490;
  *(_OWORD *)algn_26AF27830 = xmmword_237CB44C0;
  xmmword_26AF27840 = xmmword_237CB44A0;
  unk_26AF27850 = xmmword_237CB4480;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_2);
  RC_VC = xmmword_237CB4490;
  *(_OWORD *)algn_26AF270B0 = xmmword_237CB44D0;
  xmmword_26AF270C0 = xmmword_237CB44C0;
  unk_26AF270D0 = xmmword_237CB4480;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_445);
  ARKit_VW_RW = xmmword_237CB44D0;
  unk_26AF26940 = xmmword_237CB44B0;
  xmmword_26AF26950 = xmmword_237CB44E0;
  unk_26AF26960 = xmmword_237CB4480;
  ObjectUnderstandingTest::Bundle = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.ObjectUnderstandingTests"];
  __n128 v43 = v36;
  *(void *)&long long v157 = v43;
  DWORD2(v157) = 1065185444;
  uint64_t v44 = v84;
  *(void *)&long long v158 = v44;
  DWORD2(v158) = 1064766013;
  uint64_t v45 = v95;
  *(void *)&long long v159 = v45;
  DWORD2(v159) = 1064011039;
  int v155 = v98;
  *(void *)&long long v160 = v155;
  DWORD2(v160) = 1065017672;
  unint64_t v151 = v37;
  *(void *)&long long v161 = v151;
  DWORD2(v161) = 1065185444;
  uint64_t v104 = v103;
  *(void *)&long long v162 = v104;
  uint64_t v46 = v40;
  DWORD2(v162) = 1065101558;
  int v115 = v114;
  *(void *)&long long v163 = v115;
  DWORD2(v163) = 1065185444;
  BOOL v47 = v124;
  *(void *)&long long v164 = v47;
  DWORD2(v164) = 1065185444;
  id v48 = v38;
  uint64_t v49 = v39;
  uint64_t v50 = v48;
  *(void *)&long long v165 = v48;
  DWORD2(v165) = 1065017672;
  long long v131 = v130;
  *(void *)&long long v166 = v131;
  DWORD2(v166) = 1064178811;
  uint64_t v136 = v135;
  *(void *)&long long v167 = v136;
  DWORD2(v167) = 1065101558;
  int v51 = v140;
  *(void *)&long long v168 = v51;
  DWORD2(v168) = 1064178811;
  long long v146 = v145;
  *(void *)&long long v169 = v146;
  DWORD2(v169) = 1063675494;
  uint64_t v141 = v120;
  *(void *)&long long v170 = v141;
  DWORD2(v170) = 1065185444;
  uint64_t v52 = v49;
  uint64_t v171 = (uint64_t)v52;
  LODWORD(v172) = 1064430469;
  uint64_t v125 = v109;
  *(void *)&long long v173 = v125;
  DWORD2(v173) = 1065185444;
  uint64_t v53 = v46;
  long long v174 = v53;
  LODWORD(v175) = 1064514355;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&kFloorplanConfThresholdMap, (void **)&v157, 17);
  uint64_t v99 = v53;
  uint64_t v110 = v52;
  for (juint64_t j = 256; jj != -16; jj -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &kFloorplanConfThresholdMap, &dword_237C17000);
  uint64_t v55 = v43;
  kFloorplanOU3DObjectTypeLUT = (uint64_t)v55;
  float v56 = v44;
  qword_26AF26EF8 = (uint64_t)v56;
  uint64_t v57 = v45;
  qword_26AF26F00 = (uint64_t)v57;
  float v58 = v155;
  qword_26AF26F08 = (uint64_t)v58;
  uint64_t v59 = v151;
  qword_26AF26F10 = (uint64_t)v59;
  float v60 = v104;
  qword_26AF26F18 = (uint64_t)v60;
  uint64_t v61 = v115;
  qword_26AF26F20 = (uint64_t)v61;
  uint64_t v62 = v47;
  qword_26AF26F28 = (uint64_t)v62;
  uint64_t v63 = v50;
  qword_26AF26F30 = (uint64_t)v63;
  uint64_t v105 = v131;
  qword_26AF26F38 = (uint64_t)v105;
  unint64_t v116 = v136;
  qword_26AF26F40 = (uint64_t)v116;
  unint64_t v121 = v51;
  qword_26AF26F48 = (uint64_t)v121;
  uint64_t v132 = v146;
  qword_26AF26F50 = (uint64_t)v132;
  id v137 = v141;
  qword_26AF26F58 = (uint64_t)v137;
  uint64_t v142 = v110;
  qword_26AF26F60 = (uint64_t)v142;
  unint64_t v147 = v125;
  qword_26AF26F68 = (uint64_t)v147;
  int v152 = v99;
  qword_26AF26F70 = (uint64_t)v152;
  uint64_t v89 = v55;
  *(void *)&long long v157 = v89;
  long long v158 = xmmword_237CB5D80;
  uint64_t v64 = v56;
  *(void *)&long long v159 = v64;
  long long v160 = xmmword_237CB5D90;
  float v111 = v57;
  *(void *)&long long v161 = v111;
  long long v162 = xmmword_237CB5D90;
  unint64_t v126 = v58;
  *(void *)&long long v163 = v126;
  long long v164 = xmmword_237CB5DA0;
  uint64_t v100 = v59;
  *(void *)&long long v165 = v100;
  long long v166 = xmmword_237CB5DB0;
  uint64_t v96 = v60;
  *(void *)&long long v167 = v96;
  long long v168 = xmmword_237CB5DC0;
  BOOL v91 = v61;
  *(void *)&long long v169 = v91;
  long long v170 = xmmword_237CB5D90;
  unint64_t v65 = v62;
  uint64_t v171 = (uint64_t)v65;
  long long v173 = 0u;
  unint64_t v93 = v63;
  long long v174 = v93;
  long long v176 = 0u;
  uint64_t v66 = v105;
  long long v177 = v66;
  long long v179 = xmmword_237CB5D90;
  int64_t v117 = v116;
  long long v180 = v117;
  long long v182 = xmmword_237CB5D90;
  uint64_t v67 = v121;
  long long v183 = v67;
  long long v185 = xmmword_237CB5DD0;
  uint64_t v133 = v132;
  std::vector<int> v186 = v133;
  long long v188 = 0u;
  float v68 = v137;
  uint64_t v189 = v68;
  long long v191 = xmmword_237CB5DE0;
  uint64_t v69 = v142;
  id v192 = v69;
  long long v194 = xmmword_237CB5DF0;
  uint64_t v70 = v147;
  uint64_t v195 = v70;
  long long v197 = xmmword_237CB5DD0;
  int64_t v71 = v152;
  id v198 = v71;
  long long v200 = 0u;
  _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEEC2B8ne180100ESt16initializer_listIS9_ERKS5_((uint64_t)&kFloorplanBoxPaddingMap, (void **)&v157, 17);
  uint64_t v156 = v70;
  for (kuint64_t k = 512; kk != -32; kk -= 32)

  __cxa_atexit((void (*)(void *))_ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEED1B8ne180100Ev, &kFloorplanBoxPaddingMap, &dword_237C17000);
  *(void *)&long long v157 = v89;
  BYTE8(v157) = 14;
  *(void *)&long long v158 = (id)v157;
  BYTE8(v158) = 16;
  *(void *)&long long v159 = (id)v158;
  BYTE8(v159) = 30;
  *(void *)&long long v160 = (id)v159;
  BYTE8(v160) = 21;
  *(void *)&long long v161 = (id)v160;
  BYTE8(v161) = 25;
  id v148 = (id)v161;
  *(void *)&long long v162 = v148;
  BYTE8(v162) = 19;
  unint64_t v143 = v64;
  *(void *)&long long v163 = v143;
  BYTE8(v163) = 24;
  uint64_t v73 = v111;
  *(void *)&long long v164 = v73;
  BYTE8(v164) = 17;
  long long v127 = v126;
  *(void *)&long long v165 = v127;
  BYTE8(v165) = 25;
  uint64_t v122 = v100;
  *(void *)&long long v166 = v122;
  BYTE8(v166) = 13;
  int64_t v112 = v96;
  *(void *)&long long v167 = v112;
  BYTE8(v167) = 21;
  long long v138 = v91;
  *(void *)&long long v168 = v138;
  BYTE8(v168) = 26;
  int v106 = v65;
  *(void *)&long long v169 = v106;
  BYTE8(v169) = 20;
  uint64_t v101 = v93;
  *(void *)&long long v170 = v101;
  BYTE8(v170) = 22;
  uint64_t v171 = v66;
  LOBYTE(v172) = 27;
  *(void *)&long long v173 = (id)v171;
  BYTE8(v173) = 25;
  int64_t v74 = (__CFString *)(id)v173;
  long long v174 = v74;
  LOBYTE(v175) = 28;
  int64_t v75 = v117;
  *(void *)&long long v176 = v75;
  BYTE8(v176) = 28;
  uint64_t v76 = v67;
  long long v177 = v76;
  LOBYTE(v178) = 9;
  uint64_t v77 = v68;
  *(void *)&long long v179 = v77;
  BYTE8(v179) = 15;
  uint64_t v78 = (__CFString *)v69;
  long long v180 = v78;
  LOBYTE(v181) = 19;
  uint64_t v79 = v156;
  *(void *)&long long v182 = v79;
  BYTE8(v182) = 32;
  long long v183 = (__CFString *)v71;
  LOBYTE(v184) = 18;
  uint64_t v80 = v183;
  *(void *)&long long v185 = v80;
  BYTE8(v185) = 15;
  std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::multimap[abi:ne180100]((uint64_t)&kFloorplanClassToSemMap, (uint64_t)&v157, 24);
  for (muint64_t m = 368; mm != -16; mm -= 16)

  __cxa_atexit((void (*)(void *))std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::~multimap[abi:ne180100], &kFloorplanClassToSemMap, &dword_237C17000);
  *(void *)&long long v157 = v148;
  DWORD2(v157) = 1051931443;
  *(void *)&long long v158 = v143;
  DWORD2(v158) = 1051931443;
  *(void *)&long long v159 = v73;
  DWORD2(v159) = 1036831949;
  *(void *)&long long v160 = v127;
  DWORD2(v160) = 1036831949;
  *(void *)&long long v161 = v122;
  DWORD2(v161) = 1041865114;
  *(void *)&long long v162 = v112;
  DWORD2(v162) = 1045220557;
  *(void *)&long long v163 = v138;
  DWORD2(v163) = 1041865114;
  *(void *)&long long v164 = v106;
  DWORD2(v164) = 1048576000;
  *(void *)&long long v165 = v101;
  DWORD2(v165) = 1036831949;
  *(void *)&long long v166 = v74;
  DWORD2(v166) = 1041865114;
  *(void *)&long long v167 = v75;
  DWORD2(v167) = 981668463;
  *(void *)&long long v168 = v76;
  DWORD2(v168) = 1048576000;
  *(void *)&long long v169 = v133;
  DWORD2(v169) = 1036831949;
  *(void *)&long long v170 = v77;
  DWORD2(v170) = 1041865114;
  uint64_t v171 = v78;
  LODWORD(v172) = 1025758986;
  *(void *)&long long v173 = v79;
  DWORD2(v173) = 1048576000;
  long long v174 = v80;
  LODWORD(v175) = 1041865114;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&kFloorplanBoxSemThresholdMap, (void **)&v157, 17);
  for (nuint64_t n = 256; nn != -16; nn -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &kFloorplanBoxSemThresholdMap, &dword_237C17000);
}

void sub_237C944F0(_Unwind_Exception *a1)
{
  for (uint64_t i = 256; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t circularMean(float **a1, char a2)
{
  uint64_t v2 = *a1;
  long long v3 = a1[1];
  if (*a1 == v3)
  {
    uint64_t v12 = 0;
    float v11 = 0.0;
  }
  else
  {
    float v5 = 0.0;
    float v6 = 0.0;
    uint64_t v7 = *a1;
    do
    {
      double v8 = *v7;
      if ((a2 & 1) == 0) {
        double v8 = v8 * 3.14159265 / 180.0;
      }
      float v9 = v8;
      __float2 v10 = __sincosf_stret(v9);
      float v5 = v5 + v10.__sinval;
      float v6 = v6 + v10.__cosval;
      ++v7;
    }
    while (v7 != v3);
    float v11 = atan2f(v5 / (float)(unint64_t)(v3 - v2), v6 / (float)(unint64_t)(v3 - v2));
    if ((a2 & 1) == 0) {
      float v11 = (float)(v11 * 180.0) / 3.14159265;
    }
    uint64_t v12 = 0x100000000;
  }
  return v12 | LODWORD(v11);
}

uint64_t FindLinesIntersect@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  float32x4_t v6 = a3;
  v6.i32[2] = 1.0;
  float32x4_t v7 = a4;
  v7.i32[2] = 1.0;
  float32x4_t v8 = a5;
  v8.i32[2] = 1.0;
  float32x4_t v9 = a6;
  v9.i32[2] = 1.0;
  int32x4_t v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v6)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
  int32x4_t v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v8)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  int8x16_t v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(v11)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  if (fabsf(*(float *)&v14.i32[1]) < 1.0e-10) {
    goto LABEL_35;
  }
  int8x16_t v15 = vextq_s8(v14, v14, 8uLL);
  v15.i32[1] = v14.i32[0];
  *(float32x2_t *)v15.i8 = vdiv_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1));
  int8x16_t v16 = v15;
  v16.i32[2] = 1.0;
  if (result) {
    goto LABEL_3;
  }
  float v18 = (vmovn_s32(vcgtq_f32(a3, a4)).u8[0] & 1) != 0 ? a4.f32[0] : a3.f32[0];
  if (*(float *)v15.i32 < v18) {
    goto LABEL_35;
  }
  float v19 = (vmovn_s32(vcgtq_f32(a5, a6)).u8[0] & 1) != 0 ? a6.f32[0] : a5.f32[0];
  if (*(float *)v15.i32 < v19) {
    goto LABEL_35;
  }
  float v20 = (vmovn_s32(vcgtq_f32(a4, a3)).u8[0] & 1) != 0 ? a4.f32[0] : a3.f32[0];
  if (*(float *)v15.i32 > v20) {
    goto LABEL_35;
  }
  float v21 = (vmovn_s32(vcgtq_f32(a6, a5)).u8[0] & 1) != 0 ? a6.f32[0] : a5.f32[0];
  if (*(float *)v15.i32 > v21) {
    goto LABEL_35;
  }
  a4.i32[0] = a4.i32[1];
  float v22 = a4.f32[1] >= a3.f32[1] ? a3.f32[1] : a4.f32[1];
  if (*(float *)&v15.i32[1] < v22) {
    goto LABEL_35;
  }
  *(float *)v15.i32 = a6.f32[1] >= a5.f32[1] ? a5.f32[1] : a6.f32[1];
  if (*(float *)&v15.i32[1] < *(float *)v15.i32) {
    goto LABEL_35;
  }
  if (a3.f32[1] >= a4.f32[1]) {
    a4.f32[0] = a3.f32[1];
  }
  if (*(float *)&v15.i32[1] <= a4.f32[0]
    && (a5.f32[1] >= a6.f32[1] ? (float v23 = a5.f32[1]) : (float v23 = a6.f32[1]), *(float *)&v15.i32[1] <= v23))
  {
LABEL_3:
    *a2 = v16;
    char v17 = 1;
  }
  else
  {
LABEL_35:
    char v17 = 0;
    a2->i8[0] = 0;
  }
  a2[1].i8[0] = v17;
  return result;
}

void FindSegmentInteractWithLine(int8x16_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, int32x4_t a5@<Q3>)
{
  float32x4_t v5 = a2;
  v5.i32[2] = 1.0;
  float32x4_t v6 = a3;
  v6.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  a5.i32[2] = 1.0;
  int32x4_t v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(v5)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL), vnegq_f32(a4)), (float32x4_t)a5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL));
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
  int8x16_t v11 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v8)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  if (fabsf(*(float *)&v11.i32[1]) < 1.0e-10) {
    goto LABEL_17;
  }
  int8x16_t v12 = vextq_s8(v11, v11, 8uLL);
  v12.i32[1] = v11.i32[0];
  *(float32x2_t *)v12.i8 = vdiv_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1));
  int8x16_t v13 = v12;
  v13.i32[2] = 1.0;
  float v14 = (vmovn_s32(vcgtq_f32(a2, a3)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
  if (*(float *)v12.i32 >= v14)
  {
    float v15 = (vmovn_s32(vcgtq_f32(a3, a2)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
    if (*(float *)v12.i32 <= v15) {
      goto LABEL_18;
    }
  }
  a2.i32[0] = a2.i32[1];
  float v16 = a3.f32[1] >= a2.f32[1] ? a2.f32[1] : a3.f32[1];
  if (*(float *)&v12.i32[1] < v16) {
    goto LABEL_17;
  }
  if (a2.f32[1] < a3.f32[1]) {
    a2.f32[0] = a3.f32[1];
  }
  if (*(float *)&v12.i32[1] <= a2.f32[0])
  {
LABEL_18:
    *a1 = v13;
    a1[1].i8[0] = 1;
  }
  else
  {
LABEL_17:
    a1->i8[0] = 0;
    a1[1].i8[0] = 0;
  }
}

void OUVizTool::OUVizTool(OUVizTool *this)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v2 = (char *)this + 32;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  long long v3 = [MEMORY[0x263EFFA40] standardUserDefaults];
  int v4 = [v3 BOOLForKey:@"com.apple.objectunderstanding.room_dev_dump"];

  float32x4_t v5 = [MEMORY[0x263EFFA40] standardUserDefaults];
  int v6 = [v5 BOOLForKey:@"com.apple.objectunderstanding.room_clt_dump"];

  if ((v4 | v6))
  {
    if (v4) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    *(_DWORD *)this = v7;
    id v8 = objc_alloc_init(MEMORY[0x263F00628]);
    int32x4_t v9 = (void *)*((void *)this + 16);
    *((void *)this + 16) = v8;

    *((_DWORD *)this + 1) = 0;
    id v10 = objc_alloc_init(MEMORY[0x263F08790]);
    [v10 setDateFormat:@"MM_dd_yyyy_HH_mm_ss_SSS"];
    int8x16_t v11 = [MEMORY[0x263EFF910] date];
    int8x16_t v12 = [v10 stringFromDate:v11];

    id v13 = v12;
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)[v13 UTF8String]);
    if (*((char *)this + 55) < 0) {
      operator delete(*(void **)v2);
    }
    *(_OWORD *)uint64_t v2 = v14;
    *((void *)v2 + 2) = v15;
    OUVizTool::MaybeReset(this);
  }
}

void sub_237C94B98(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v4);
  }
  _Unwind_Resume(a1);
}

void OUVizTool::MaybeReset(OUVizTool *this)
{
  void v26[2] = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)this) {
    return;
  }
  if (*(_DWORD *)this == 1)
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "/tmp/viz_tool/");
    int v2 = *((char *)this + 55);
    if (v2 >= 0) {
      long long v3 = (char *)this + 32;
    }
    else {
      long long v3 = (const std::string::value_type *)*((void *)this + 4);
    }
    if (v2 >= 0) {
      std::string::size_type v4 = *((unsigned __int8 *)this + 55);
    }
    else {
      std::string::size_type v4 = *((void *)this + 5);
    }
    float32x4_t v5 = std::string::append(&__p, v3, v4);
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
    v25.__r_.__value_.__r.__words[0] = v5->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 79) < 0) {
      operator delete(*((void **)this + 7));
    }
    std::string::size_type v8 = v25.__r_.__value_.__r.__words[0];
    *((void *)this + 7) = v6;
    *((void *)this + 8) = v8;
    *(void *)((char *)this + 71) = *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7);
    *((unsigned char *)this + 79) = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    OUVizTool::SetOriginalAndOnlineFolder(this);
    return;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "/tmp/cur_scene_id.txt");
  int32x4_t v9 = objc_msgSend(NSString, "stringWithCString:encoding:", &__p, objc_msgSend(NSString, "defaultCStringEncoding"));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  id v10 = [NSString stringWithContentsOfFile:v9 encoding:4 error:0];
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v10 UTF8String]);
  if (!v10) {
    goto LABEL_32;
  }
  uint64_t v11 = *((unsigned __int8 *)this + 31);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *((unsigned __int8 *)this + 31);
  }
  else {
    uint64_t v12 = *((void *)this + 2);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v12 != size) {
    goto LABEL_32;
  }
  uint64_t v15 = (const void **)((char *)this + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v15, p_p, *((void *)this + 2)))
    {
LABEL_32:
      std::string::operator=((std::string *)((char *)this + 8), &__p);
      *((_DWORD *)this + 1) = 0;
      *((unsigned char *)&v25.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v25, "/tmp/viz_tool/");
      int v17 = *((char *)this + 31);
      if (v17 >= 0) {
        float v18 = (char *)this + 8;
      }
      else {
        float v18 = (const std::string::value_type *)*((void *)this + 1);
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *((unsigned __int8 *)this + 31);
      }
      else {
        std::string::size_type v19 = *((void *)this + 2);
      }
      float v20 = std::string::append(&v25, v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v26[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 79) < 0) {
        operator delete(*((void **)this + 7));
      }
      uint64_t v23 = v26[0];
      *((void *)this + 7) = v21;
      *((void *)this + 8) = v23;
      *(void *)((char *)this + 71) = *(void *)((char *)v26 + 7);
      *((unsigned char *)this + 79) = v22;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      OUVizTool::SetOriginalAndOnlineFolder(this);
      char v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    while (*(unsigned __int8 *)v15 == p_p->__r_.__value_.__s.__data_[0])
    {
      uint64_t v15 = (const void **)((char *)v15 + 1);
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v11) {
        goto LABEL_43;
      }
    }
    goto LABEL_32;
  }
LABEL_43:
  if (v14 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_237C94F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }

  _Unwind_Resume(a1);
}

void OUVizTool::SetOriginalAndOnlineFolder(OUVizTool *this)
{
  int v2 = (char *)this + 56;
  if (*((char *)this + 79) >= 0) {
    size_t v3 = *((unsigned __int8 *)this + 79);
  }
  else {
    size_t v3 = *((void *)this + 8);
  }
  std::string::size_type v4 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v3 + 10);
  if (v14 < 0) {
    std::string::size_type v4 = (long long *)v13;
  }
  if (v3)
  {
    if (*((char *)this + 79) >= 0) {
      float32x4_t v5 = v2;
    }
    else {
      float32x4_t v5 = (const void *)*((void *)this + 7);
    }
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, "/original/");
  std::string::size_type v6 = (void **)((char *)this + 80);
  if (*((char *)this + 103) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)std::string::size_type v6 = v13;
  *((void *)this + 12) = v14;
  if (*((char *)this + 79) >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 79);
  }
  else {
    size_t v7 = *((void *)this + 8);
  }
  std::string::size_type v8 = &v13;
  uint64_t v9 = std::string::basic_string[abi:ne180100]((uint64_t)&v13, v7 + 8);
  if (v14 < 0) {
    std::string::size_type v8 = (long long *)v13;
  }
  if (v7)
  {
    if (*((char *)this + 79) >= 0) {
      id v10 = v2;
    }
    else {
      id v10 = (const void *)*((void *)this + 7);
    }
    uint64_t v9 = (uint64_t)memmove(v8, v10, v7);
  }
  strcpy((char *)v8 + v7, "/online/");
  uint64_t v11 = (void **)((char *)this + 104);
  if (*((char *)this + 127) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = v13;
  *((void *)this + 15) = v14;
  OUVizTool::CreateDirectory(v9, (uint64_t *)this + 10);
  OUVizTool::CreateDirectory(v12, (uint64_t *)this + 13);
}

void OUVizTool::CreateDirectory(uint64_t a1, uint64_t *a2)
{
  id v9 = [MEMORY[0x263F08850] defaultManager];
  size_t v3 = NSString;
  int v4 = *((char *)a2 + 23);
  float32x4_t v5 = (uint64_t *)*a2;
  uint64_t v6 = [NSString defaultCStringEncoding];
  if (v4 >= 0) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = v5;
  }
  std::string::size_type v8 = [v3 stringWithCString:v7 encoding:v6];
  [v9 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:0];
}

void sub_237C951C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUVizTool::SaveObjects(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v71[3] = *MEMORY[0x263EF8340];
  id v54 = a3;
  id v7 = a4;
  if (*(_DWORD *)a1 == 1)
  {
    id v53 = v7;
    OUVizTool::MaybeReset((OUVizTool *)a1);
    if (*(char *)(a1 + 79) >= 0) {
      size_t v8 = *(unsigned __int8 *)(a1 + 79);
    }
    else {
      size_t v8 = *(void *)(a1 + 64);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v56, v8 + 1);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v9 = &v56;
    }
    else {
      id v9 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*(char *)(a1 + 79) >= 0) {
        id v10 = (const void *)(a1 + 56);
      }
      else {
        id v10 = *(const void **)(a1 + 56);
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
    std::to_string(&v55, *(_DWORD *)(a1 + 4));
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v55;
    }
    else {
      uint64_t v11 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    long long v13 = std::string::append(&v56, (const std::string::value_type *)v11, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = std::string::append(&v57, "/", 1uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = *(char *)(a2 + 23);
    if (v17 >= 0) {
      float v18 = (const std::string::value_type *)a2;
    }
    else {
      float v18 = *(const std::string::value_type **)a2;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(a2 + 8);
    }
    float v20 = std::string::append(&v58, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    char v22 = std::string::append(&v59, ".json", 5uLL);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v61 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::vector<int>::pointer v24 = NSString;
    int v25 = SHIBYTE(v61);
    int v26 = (void **)__p[0];
    uint64_t v27 = [NSString defaultCStringEncoding];
    if (v25 >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = v26;
    }
    int v51 = [v24 stringWithCString:v28 encoding:v27];
    int v29 = [v54 count];
    uint64_t v52 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v54, "count"));
    if (v29 >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v29;
      do
      {
        int v32 = [v54 objectAtIndexedSubscript:v30];
        if ([v32 hasBoxesDict:v53])
        {
          uint64_t v33 = [v32 boxesDict];
          uint64_t v34 = [v33 objectForKeyedSubscript:v53];

          uint64_t v35 = NSString;
          [v32 confidence];
          uint64_t v37 = objc_msgSend(v35, "stringWithFormat:", @"%.03f", v36);
          v70[0] = @"uuid";
          uint64_t v38 = [v32 identifier];
          uint64_t v39 = [v38 UUIDString];
          v71[0] = v39;
          v71[1] = v37;
          v70[1] = @"confidence";
          v70[2] = @"parts";
          uint64_t v40 = [v32 parts];
          uint64_t v41 = [v40 allKeys];
          v71[2] = v41;
          uint64_t v42 = [NSDictionary dictionaryWithObjects:v71 forKeys:v70 count:3];

          v68[0] = @"id";
          __n128 v43 = [NSNumber numberWithInt:v30];
          v69[0] = v43;
          v69[1] = v34;
          v68[1] = @"bbox";
          _OWORD v68[2] = @"type";
          uint64_t v44 = [v54 objectAtIndexedSubscript:v30];
          uint64_t v45 = [v44 type];
          v68[3] = @"attributes";
          v69[2] = v45;
          v69[3] = v42;
          uint64_t v46 = [NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:4];

          [v52 addObject:v46];
        }

        ++v30;
      }
      while (v31 != v30);
    }
    uint64_t v66 = @"bbox";
    uint64_t v67 = v52;
    BOOL v47 = [NSDictionary dictionaryWithObjects:&v67 forKeys:&v66 count:1];
    uint64_t v64 = @"data";
    unint64_t v65 = v47;
    id v48 = [NSDictionary dictionaryWithObjects:&v65 forKeys:&v64 count:1];
    uint64_t v62 = @"data";
    uint64_t v63 = v48;
    uint64_t v49 = [NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
    uint64_t v50 = [MEMORY[0x263F08900] dataWithJSONObject:v49 options:1 error:0];
    [v50 writeToFile:v51 atomically:1];

    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
    id v7 = v53;
  }
}

void sub_237C9573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void OUVizTool::SaveBoxes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  rawBoxesToObjects(a3, 1u);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  OUVizTool::SaveObjects(a1, a2, v5, @"rawdetection");
}

void sub_237C95954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUVizTool::SaveARFrameImage(OUVizTool *this, __CVBuffer *a2)
{
  if (*(_DWORD *)this)
  {
    std::to_string(&v11, *((_DWORD *)this + 1));
    int v4 = *((char *)this + 103);
    if (v4 >= 0) {
      id v5 = (char *)this + 80;
    }
    else {
      id v5 = (const std::string::value_type *)*((void *)this + 10);
    }
    if (v4 >= 0) {
      std::string::size_type v6 = *((unsigned __int8 *)this + 103);
    }
    else {
      std::string::size_type v6 = *((void *)this + 11);
    }
    id v7 = std::string::insert(&v11, 0, v5, v6);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    id v9 = std::string::append(&v12, ".png", 4uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    OUVizTool::SaveCVPixelBufferInternal(this, (uint64_t *)&v13, (uint64_t)a2);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)v13);
    }
  }
}

void sub_237C95A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

void OUVizTool::SaveCVPixelBufferInternal(OUVizTool *a1, uint64_t *a2, uint64_t a3)
{
  if (*(_DWORD *)a1)
  {
    OUVizTool::MaybeReset(a1);
    uint64_t v6 = *MEMORY[0x263F00868];
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
    long long v8 = (void *)*((void *)a1 + 16);
    utils::WriteToTiff(a3, a2, v6, (uint64_t)DeviceRGB, v8);
  }
}

void OUVizTool::SaveObjectImageCrop(OUVizTool *this, OU3DObject *a2, __CVBuffer *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (*(_DWORD *)this)
  {
    id v7 = [(OU3DObject *)v5 identifier];
    id v8 = [v7 UUIDString];
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v8 UTF8String]);

    std::string::basic_string(&v34, &__str, 0, 8uLL, (std::allocator<char> *)&__p);
    int v9 = *((char *)this + 127);
    if (v9 >= 0) {
      long long v10 = (char *)this + 104;
    }
    else {
      long long v10 = (const std::string::value_type *)*((void *)this + 13);
    }
    if (v9 >= 0) {
      std::string::size_type v11 = *((unsigned __int8 *)this + 127);
    }
    else {
      std::string::size_type v11 = *((void *)this + 14);
    }
    std::string v12 = std::string::insert(&v34, 0, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "_");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::append(&v35, (const std::string::value_type *)p_p, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    id v18 = [(OU3DObject *)v6 type];
    std::string::size_type v19 = (const char *)[v18 UTF8String];
    std::string::size_type v20 = strlen(v19);
    uint64_t v21 = std::string::append(&v36, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v38 = v21->__r_.__value_.__r.__words[2];
    long long v37 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;

    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    OUVizTool::CreateDirectory(v23, (uint64_t *)&v37);
    if (v38 >= 0) {
      size_t v24 = HIBYTE(v38);
    }
    else {
      size_t v24 = *((void *)&v37 + 1);
    }
    int v25 = &v34;
    std::string::basic_string[abi:ne180100]((uint64_t)&v34, v24 + 1);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if (v24)
    {
      if (v38 >= 0) {
        int v26 = &v37;
      }
      else {
        int v26 = (long long *)v37;
      }
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 47;
    std::to_string(&__p, *((_DWORD *)this + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &__p;
    }
    else {
      uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    int v29 = std::string::append(&v34, (const std::string::value_type *)v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = std::string::append(&v35, "_cropped.png", 0xCuLL);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    OUVizTool::SaveCVPixelBufferInternal(this, (uint64_t *)&v36, (uint64_t)a3);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)v37);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_237C95E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }

  _Unwind_Resume(a1);
}

void OUVizTool::SavePointCloudInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    int v4 = (const char *)a2;
  }
  else {
    int v4 = *(const char **)a2;
  }
  id v5 = fopen(v4, "w");
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = *(const void **)a3;
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = v8 - *(void *)a3;
    std::string v59 = 0;
    float v60 = 0;
    uint64_t v61 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v59, v7, v8, v9 >> 4);
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    memset(&v56, 0, sizeof(v56));
    if ((unint64_t)v9 < 0xC3501)
    {
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)&v57, v59, (uint64_t)v60, (v60 - v59) >> 4);
      std::to_string(&v62, v9 >> 4);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      std::string v56 = v62;
    }
    else
    {
      utils::Resample((utils *)(v9 >> 4), 0xC350uLL, (void **)&v53);
      uint64_t v52 = 0;
      long long v51 = 0uLL;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v51, (v54 - v53) >> 3);
      long long v10 = v53;
      std::string::size_type v11 = v54;
      memset(&v62, 0, sizeof(v62));
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v62, v59, (uint64_t)v60, (v60 - v59) >> 4);
      v47[0] = &v51;
      while (v10 != v11)
      {
        *(_OWORD *)uint64_t v49 = *(_OWORD *)(v62.__r_.__value_.__r.__words[0] + 16 * *v10);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)v47, v49);
        ++v10;
      }
      if (v62.__r_.__value_.__r.__words[0])
      {
        v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((void)v57)
      {
        *((void *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
      long long v57 = v51;
      uint64_t v58 = v52;
      std::to_string(&v62, 0xC350uLL);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      std::string v56 = v62;
      if (v53)
      {
        id v54 = v53;
        operator delete(v53);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v62, "ply");
    std::string::basic_string[abi:ne180100]<0>(&v53, "format ascii 1.0");
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v49, "property float x");
    std::string::basic_string[abi:ne180100]<0>(v47, "property float y");
    std::string::basic_string[abi:ne180100]<0>(v45, "property float z");
    std::string::basic_string[abi:ne180100]<0>(v43, "end_header");
    std::string v12 = &v62;
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v12 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    fprintf(v6, "%s\n", (const char *)v12);
    long long v13 = (const char *)&v53;
    if (v55 < 0) {
      long long v13 = v53;
    }
    fprintf(v6, "%s\n", v13);
    std::string::size_type v14 = (const char *)&v51;
    if (v52 < 0) {
      std::string::size_type v14 = (const char *)v51;
    }
    fprintf(v6, "%s\n", v14);
    uint64_t v15 = v49;
    if (v50 < 0) {
      uint64_t v15 = (void **)v49[0];
    }
    fprintf(v6, "%s\n", (const char *)v15);
    long long v16 = v47;
    if (v48 < 0) {
      long long v16 = (void **)v47[0];
    }
    fprintf(v6, "%s\n", (const char *)v16);
    long long v17 = v45;
    if (v46 < 0) {
      long long v17 = (void **)v45[0];
    }
    fprintf(v6, "%s\n", (const char *)v17);
    if (v44 >= 0) {
      id v18 = v43;
    }
    else {
      id v18 = (void **)v43[0];
    }
    fprintf(v6, "%s\n", (const char *)v18);
    uint64_t v19 = v57;
    if (*((void *)&v57 + 1) != (void)v57)
    {
      unint64_t v20 = 0;
      do
      {
        *(_OWORD *)uint64_t v34 = *(_OWORD *)(v19 + 16 * v20);
        std::to_string(&v37, v34[0]);
        uint64_t v21 = std::string::append(&v37, " ", 1uLL);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v36, v34[1]);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v36;
        }
        else {
          uint64_t v23 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v36.__r_.__value_.__l.__size_;
        }
        int v25 = std::string::append(&v38, (const std::string::value_type *)v23, size);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        uint64_t v27 = std::string::append(&v39, " ", 1uLL);
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v35, v34[2]);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v29 = &v35;
        }
        else {
          int v29 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v35.__r_.__value_.__l.__size_;
        }
        uint64_t v31 = std::string::append(&v40, (const std::string::value_type *)v29, v30);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v42 = v31->__r_.__value_.__r.__words[2];
        long long __p = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if (v42 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        fprintf(v6, "%s\n", p_p);
        if (SHIBYTE(v42) < 0) {
          operator delete((void *)__p);
        }
        ++v20;
        uint64_t v19 = v57;
      }
      while (v20 < (uint64_t)(*((void *)&v57 + 1) - v57) >> 4);
    }
    fclose(v6);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    if (v55 < 0) {
      operator delete(v53);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if ((void)v57)
    {
      *((void *)&v57 + 1) = v57;
      operator delete((void *)v57);
    }
    if (v59)
    {
      float v60 = v59;
      operator delete(v59);
    }
  }
}

void sub_237C9650C(_Unwind_Exception *a1)
{
  size_t v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 208) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  int v4 = *(void **)(v1 - 160);
  if (v4)
  {
    *(void *)(v1 - 152) = v4;
    operator delete(v4);
  }
  id v5 = *(void **)(v1 - 128);
  if (v5)
  {
    *(void *)(v1 - 120) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void OUVizTool::SaveObjectPointCloud(OUVizTool *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!*(_DWORD *)a1) {
    goto LABEL_38;
  }
  OUVizTool::MaybeReset(a1);
  uint64_t v6 = [v5 identifier];
  id v7 = [v6 UUIDString];
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v7 UTF8String]);

  std::string::basic_string(&v32, &__str, 0, 8uLL, (std::allocator<char> *)__p);
  long long v10 = (const std::string::value_type *)*((void *)a1 + 13);
  uint64_t v9 = (char *)a1 + 104;
  uint64_t v8 = v10;
  int v11 = v9[23];
  if (v11 >= 0) {
    std::string v12 = v9;
  }
  else {
    std::string v12 = v8;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)v9 + 23);
  }
  else {
    std::string::size_type v13 = *((void *)v9 + 1);
  }
  std::string::size_type v14 = std::string::insert(&v32, 0, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  if ((v31 & 0x80u) == 0) {
    long long v16 = __p;
  }
  else {
    long long v16 = (void **)__p[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v17 = v31;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  id v18 = std::string::append(&v33, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  id v20 = [v5 type];
  uint64_t v21 = (const char *)[v20 UTF8String];
  std::string::size_type v22 = strlen(v21);
  uint64_t v23 = std::string::append(&v34, v21, v22);
  std::string v35 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;

  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  int v24 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  long long v26 = &v33;
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, size + 1);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if (v24 >= 0) {
      uint64_t v27 = &v35;
    }
    else {
      uint64_t v27 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    memmove(v26, v27, size);
  }
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + size) = 47;
  long long v28 = std::string::append(&v33, "obj.ply", 7uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  OUVizTool::SavePointCloudInternal((uint64_t)v28, (uint64_t)&v34, a3);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((v24 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_36:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_38:
}

void sub_237C9696C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (v34 < 0) {
    operator delete(*(void **)(v35 - 96));
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }

  _Unwind_Resume(a1);
}

void OUVizTool::StartNewFrame(OUVizTool *this)
{
  if (*(_DWORD *)this)
  {
    ++*((_DWORD *)this + 1);
    OUVizTool::MaybeReset(this);
    if (*(_DWORD *)this == 1)
    {
      if (*((char *)this + 79) >= 0) {
        size_t v2 = *((unsigned __int8 *)this + 79);
      }
      else {
        size_t v2 = *((void *)this + 8);
      }
      size_t v3 = &v12;
      std::string::basic_string[abi:ne180100]((uint64_t)&v12, v2 + 1);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v3 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if (v2)
      {
        if (*((char *)this + 79) >= 0) {
          int v4 = (char *)this + 56;
        }
        else {
          int v4 = (char *)*((void *)this + 7);
        }
        memmove(v3, v4, v2);
      }
      *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
      std::to_string(&__p, *((_DWORD *)this + 1));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      id v7 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = std::string::append(&v13, "/", 1uLL);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      std::string::size_type v15 = v9->__r_.__value_.__r.__words[2];
      long long v14 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      OUVizTool::CreateDirectory((uint64_t)v9, (uint64_t *)&v14);
      if (SHIBYTE(v15) < 0) {
        operator delete((void *)v14);
      }
    }
  }
}

void sub_237C96BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 41) < 0) {
    operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_237C96CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C97294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_237C974B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_237C97824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id OUPointCloudToDictionary(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [MEMORY[0x263EFF9A0] dictionary];
  size_t v3 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v1, "count"));
  [v2 setObject:v3 forKeyedSubscript:@"count"];

  int v4 = (const void *)[v1 points];
  uint64_t v5 = [v1 points];
  uint64_t v6 = [v1 count];
  uint64_t v45 = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(&v45, v4, v5 + 16 * v6, (v5 + 16 * v6 - (uint64_t)v4) >> 4);
  std::vector<float>::vector(&v43, ((v46 - (unsigned char *)v45) >> 3) + ((v46 - (unsigned char *)v45) >> 4));
  id v7 = (char *)v45;
  if (v46 != v45)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      int v11 = (char *)v43 + v8;
      std::string v12 = &v7[v9];
      uint64_t v13 = *(void *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      *(void *)int v11 = v13;
      ++v10;
      id v7 = (char *)v45;
      v9 += 16;
      v8 += 12;
    }
    while (v10 < (v46 - (unsigned char *)v45) >> 4);
  }
  if (v44 == v43)
  {
    id v14 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    id v14 = [MEMORY[0x263EFF8F8] dataWithBytes:v43 length:v44 - (unsigned char *)v43];
  }
  std::string::size_type v15 = v14;
  [v2 setObject:v14 forKeyedSubscript:@"points"];

  uint64_t v16 = [v1 semanticLabels];
  uint64_t v17 = [v1 count];
  if (v16 && v17)
  {
    id v18 = [MEMORY[0x263EFF8F8] dataWithBytes:v16 length:4 * v17];
  }
  else
  {
    id v18 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  long long v19 = v18;
  [v2 setObject:v18 forKeyedSubscript:@"semanticLabels"];

  uint64_t v20 = [v1 semanticVotes];
  uint64_t v21 = [v1 count];
  if (v20 && v21)
  {
    id v22 = [MEMORY[0x263EFF8F8] dataWithBytes:v20 length:8 * v21];
  }
  else
  {
    id v22 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  uint64_t v23 = v22;
  [v2 setObject:v22 forKeyedSubscript:@"semanticVotes"];

  int v24 = (const void *)[v1 colors];
  uint64_t v25 = [v1 colors];
  uint64_t v26 = [v1 count];
  std::string v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v40, v24, v25 + 16 * v26, (v25 + 16 * v26 - (uint64_t)v24) >> 4);
  std::vector<float>::vector(&__p, ((v41 - (unsigned char *)v40) >> 3) + ((v41 - (unsigned char *)v40) >> 4));
  uint64_t v27 = (char *)v40;
  if (v41 != v40)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      unsigned __int8 v31 = (char *)__p + v28;
      std::string v32 = &v27[v29];
      uint64_t v33 = *(void *)v32;
      *((_DWORD *)v31 + 2) = *((_DWORD *)v32 + 2);
      *(void *)unsigned __int8 v31 = v33;
      ++v30;
      uint64_t v27 = (char *)v40;
      v29 += 16;
      v28 += 12;
    }
    while (v30 < (v41 - (unsigned char *)v40) >> 4);
  }
  if (v39 == __p)
  {
    id v34 = objc_alloc_init(MEMORY[0x263EFF8F8]);
  }
  else
  {
    id v34 = [MEMORY[0x263EFF8F8] dataWithBytes:__p length:v39 - (unsigned char *)__p];
  }
  uint64_t v35 = v34;
  [v2 setObject:v34 forKeyedSubscript:@"colors"];

  id v36 = v2;
  if (__p)
  {
    std::string v39 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    char v44 = v43;
    operator delete(v43);
  }
  if (v45)
  {
    char v46 = v45;
    operator delete(v45);
  }

  return v36;
}

void sub_237C97C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  id v22 = v21;

  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

OUPointCloud *OUPointCloudFromDictionary(void *a1)
{
  id v1 = a1;
  unint64_t v2 = [[OUPointCloud alloc] initWithDictionary:v1];

  return v2;
}

void sub_237C97DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  id v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 2);
    if (v9 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 1 > v9) {
      unint64_t v9 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    id v14 = &v13[4 * v10];
    std::string::size_type v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    uint64_t v16 = &v14[4 * a2];
    id v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_237C9800C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C98178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C981FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_237C98334(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_237C98400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_237C98490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 232))
  {
    size_t v3 = *(__CVBuffer **)(*(void *)(result + 160) + 40);
    size_t Width = CVPixelBufferGetWidth(v3);
    size_t Height = CVPixelBufferGetHeight(v3);
    uint64_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }
    unint64_t v7 = Height * Width;

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v17, v7);
    if (v7)
    {
      unint64_t v9 = (_DWORD *)v17;
      do
      {
        __int16 v10 = *BaseAddress++;
        _H0 = v10;
        __asm { FCVT            S0, H0 }
        *v9++ = _S0;
        --v7;
      }
      while (v7);
    }
    BOOL result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v17;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void sub_237C986A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<float>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 232))
  {
    size_t v3 = *(__CVBuffer **)(*(void *)(result + 160) + 40);
    size_t Width = CVPixelBufferGetWidth(v3);
    size_t Height = CVPixelBufferGetHeight(v3);
    uint64_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }
    unint64_t v7 = Height * Width;

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (int *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v11, v7);
    if (v7)
    {
      unint64_t v9 = (_DWORD *)v11;
      do
      {
        int v10 = *BaseAddress++;
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
    BOOL result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v11;
    *(void *)(a2 + 16) = v12;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void sub_237C98800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 233))
  {
    uint64_t v23 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }

    return 0;
  }
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  uint64_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v24 = 134217984;
    size_t v25 = Width;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image shape w %lu", (uint8_t *)&v24, 0xCu);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v24 = 134217984;
    size_t v25 = Height;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image tensor shape h %lu", (uint8_t *)&v24, 0xCu);
  }

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
    goto LABEL_24;
  }
  if (Width != 224 || Height != 224)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
    goto LABEL_24;
  }
  kdebug_trace();
  unint64_t v7 = *(__CVBuffer **)(*(void *)(a1 + 120) + 40);
  size_t v8 = CVPixelBufferGetHeight(v7);
  if (CVPixelBufferGetWidth(v7) * v8 - 150528 >= 3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
LABEL_24:

    return 0;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v7, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  int v10 = (char *)CVPixelBufferGetBaseAddress(v7);
  uint64_t v14 = 0;
  std::string::size_type v15 = v10 + 200704;
  uint64_t v16 = v10 + 100352;
  do
  {
    uint64_t v17 = 0;
    do
    {
      LOBYTE(_S7) = BaseAddress[2];
      _S7 = (float)((float)((float)LODWORD(_S7) * 0.0039216) + -0.485) * 4.3668;
      LOBYTE(_S16) = BaseAddress[1];
      _S16 = (float)((float)((float)LODWORD(_S16) * 0.0039216) + -0.456) * 4.4643;
      LOBYTE(_S17) = *BaseAddress;
      _S17 = (float)((float)((float)LODWORD(_S17) * 0.0039216) + -0.406) * 4.4444;
      __asm { FCVT            H7, S7 }
      *(_WORD *)&v10[v17] = LOWORD(_S7);
      __asm { FCVT            H7, S16 }
      *(_WORD *)&v16[v17] = LOWORD(_S7);
      __asm { FCVT            H7, S17 }
      *(_WORD *)&v15[v17] = LOWORD(_S7);
      BaseAddress += 4;
      v17 += 2;
    }
    while (v17 != 448);
    ++v14;
    v15 += v17;
    v16 += v17;
    v10 += v17;
  }
  while (v14 != 224);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(v7, 0);
  *(unsigned char *)(a1 + 232) = 1;
  kdebug_trace();
  return *(unsigned char *)(a1 + 232) != 0;
}

BOOL ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<float>(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 233))
  {
    int v19 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }

    return 0;
  }
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  uint64_t v6 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v20 = 134217984;
    size_t v21 = Width;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image shape w %lu", (uint8_t *)&v20, 0xCu);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v20 = 134217984;
    size_t v21 = Height;
    _os_log_impl(&dword_237C17000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image tensor shape h %lu", (uint8_t *)&v20, 0xCu);
  }

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
    goto LABEL_24;
  }
  if (Width != 224 || Height != 224)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
    goto LABEL_24;
  }
  kdebug_trace();
  unint64_t v7 = *(__CVBuffer **)(*(void *)(a1 + 120) + 40);
  size_t v8 = CVPixelBufferGetHeight(v7);
  if (CVPixelBufferGetWidth(v7) * v8 - 150528 >= 3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    }
LABEL_24:

    return 0;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v7, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  int v10 = (char *)CVPixelBufferGetBaseAddress(v7);
  uint64_t v14 = 0;
  std::string::size_type v15 = v10 + 401408;
  uint64_t v16 = v10 + 200704;
  do
  {
    uint64_t v17 = 0;
    do
    {
      LOBYTE(v11) = BaseAddress[v17 + 2];
      float v11 = (float)((float)((float)LODWORD(v11) * 0.0039216) + -0.485) * 4.3668;
      LOBYTE(v12) = BaseAddress[v17 + 1];
      float v12 = (float)((float)((float)LODWORD(v12) * 0.0039216) + -0.456) * 4.4643;
      LOBYTE(v13) = BaseAddress[v17];
      float v13 = (float)((float)((float)LODWORD(v13) * 0.0039216) + -0.406) * 4.4444;
      *(float *)&v10[v17] = v11;
      *(float *)&v16[v17] = v12;
      *(float *)&v15[v17] = v13;
      v17 += 4;
    }
    while (v17 != 896);
    ++v14;
    v15 += v17;
    v16 += v17;
    v10 += v17;
    BaseAddress += v17;
  }
  while (v14 != 224);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(v7, 0);
  *(unsigned char *)(a1 + 232) = 1;
  kdebug_trace();
  return *(unsigned char *)(a1 + 232) != 0;
}

void ou3dor::OU3DOROnlineEspressoV2::~OU3DOROnlineEspressoV2(ou3dor::OU3DOROnlineEspressoV2 *this)
{
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
  JUMPOUT(0x237E2C510);
}

void *ou3dor::OU3DOROnlineEspressoV2::OU3DOROnlineEspressoV2(ou3dor::OU3DOROnlineEspressoV2 *this)
{
  BOOL result = (void *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v2);
  void *result = &unk_26EAD67A8;
  return result;
}

{
  void *result;
  long long v2[3];

  BOOL result = (void *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v2);
  void *result = &unk_26EAD67A8;
  return result;
}

void ou3dor::OU3DOROnlineEspressoV2::SetInput(ou3dor::OU3DOROnlineEspressoV2 *this, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*((void *)this + 15) + 40)) == 1278226536)
  {
    ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
  }
  ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<float>();
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutput@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(this + 232))
  {
    if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(void *)(this + 160) + 40)) == 1278226536)
    {
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    }
    ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<float>();
  }
  *a2 = 0;
  a2[24] = 0;
  return this;
}

uint64_t _OULoggingGetOSLogForCategoryObjectUnderstanding()
{
  if (_OULoggingGetOSLogForCategoryObjectUnderstanding_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryObjectUnderstanding_onceToken, &__block_literal_global);
  }
  return _OULoggingGetOSLogForCategoryObjectUnderstanding_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryKeyframeAccumulation()
{
  if (_OULoggingGetOSLogForCategoryKeyframeAccumulation_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryKeyframeAccumulation_onceToken, &__block_literal_global_5);
  }
  return _OULoggingGetOSLogForCategoryKeyframeAccumulation_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryPointCloud()
{
  if (_OULoggingGetOSLogForCategoryPointCloud_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryPointCloud_onceToken, &__block_literal_global_9);
  }
  return _OULoggingGetOSLogForCategoryPointCloud_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryPostProcess()
{
  if (_OULoggingGetOSLogForCategoryPostProcess_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryPostProcess_onceToken, &__block_literal_global_13);
  }
  return _OULoggingGetOSLogForCategoryPostProcess_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOnlineOD()
{
  if (_OULoggingGetOSLogForCategoryOnlineOD_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryOnlineOD_onceToken, &__block_literal_global_17);
  }
  return _OULoggingGetOSLogForCategoryOnlineOD_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOfflineOD()
{
  if (_OULoggingGetOSLogForCategoryOfflineOD_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryOfflineOD_onceToken, &__block_literal_global_21);
  }
  return _OULoggingGetOSLogForCategoryOfflineOD_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOUSession()
{
  if (_OULoggingGetOSLogForCategoryOUSession_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryOUSession_onceToken, &__block_literal_global_25);
  }
  return _OULoggingGetOSLogForCategoryOUSession_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryRGBRefinement()
{
  if (_OULoggingGetOSLogForCategoryRGBRefinement_onceToken != -1) {
    dispatch_once(&_OULoggingGetOSLogForCategoryRGBRefinement_onceToken, &__block_literal_global_29);
  }
  return _OULoggingGetOSLogForCategoryRGBRefinement_oslog;
}

void OU3DObjectRGBSizeRefiner::OU3DObjectRGBSizeRefiner(OU3DObjectRGBSizeRefiner *this, const OU3DObjectRGBSizeRefinerParams *a2)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  long long v3 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)((char *)this + 40) = v3;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 2);
    *((void *)this + 11) = *((void *)a2 + 6);
    *(_OWORD *)((char *)this + 72) = v4;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 108) = *(_OWORD *)((char *)a2 + 68);
  *((_OWORD *)this + 6) = v5;
  uint64_t v6 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 18) = *((void *)a2 + 13);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  id v8 = *((id *)a2 + 14);
  *((void *)this + 26) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 19) = v8;
  *((void *)this + 20) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = (char *)this + 176;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 27) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = 0;
  *((float32x2_t *)this + 43) = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 12)), vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 20)));
  *((_DWORD *)this + 88) = 2139095039;
  operator new();
}

void sub_237C999DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (*(char *)(a16 + 95) < 0) {
    operator delete(*v16);
  }

  uint64_t v18 = *(void **)(a16 + 8);
  if (v18)
  {
    *(void *)(a16 + 16) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

void CannyEdgeDetectorSemanticParams::~CannyEdgeDetectorSemanticParams(id *this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

float OU3DObjectRGBSizeRefiner::ComputeSemanticRatio(OU3DObjectRGBSizeRefiner *this, const box3d *a2, const simd_float3x3 *a3, const simd_float4x4 *a4)
{
  *(double *)v6.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(this, a3, a4);
  v31.columns[0] = v6;
  v31.columns[1] = v7;
  v31.columns[2] = v8;
  v31.columns[3] = v9;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v31, a2, (uint64_t)v28);
  OU::ConvexHull((uint64_t *)v28, 0, &v21);
  if (!v24) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  *(_OWORD *)std::string __p = v21;
  uint64_t v26 = v22;
  long long v27 = v23;
  *(void *)&long long v21 = (char *)a2 + 128;
  int v10 = *(__CVBuffer **)(std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)a2 + 16, (uint64_t)&std::piecewise_construct, (id **)&v21)[5]+ 144);
  CVPixelBufferLockBaseAddress(v10, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v10);
  float v13 = OU::area((OU *)__p, v12);
  float v14 = 0.0;
  if (v13 >= 0.001)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = BaseAddress;
      do
      {
        *(float *)&uint64_t v19 = (float)(int)v15;
        *((float *)&v19 + 1) = (float)(int)v17;
        *(void *)&long long v21 = v19;
        if ((OU::Polygon::PointInsidePolygon((uint64_t)__p, (float32x2_t *)&v21) & 1) != 0 && *v18) {
          ++v16;
        }
        ++v17;
        v18 += 256;
      }
      while (v17 != 192);
      ++v15;
      ++BaseAddress;
    }
    while (v15 != 256);
    CVPixelBufferUnlockBaseAddress(v10, 0);
    float v14 = (float)v16 / v13;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  return v14;
}

void sub_237C99DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a23);
  _Unwind_Resume(a1);
}

double OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3)
{
  uint64_t v3 = 0;
  float32x4_t v4 = (float32x4_t)a2->columns[0];
  float32x4_t v5 = (float32x4_t)a2->columns[1];
  v4.i32[3] = 0;
  v5.i32[3] = 0;
  float32x4_t v6 = (float32x4_t)a2->columns[2];
  v6.i32[3] = 0;
  simd_float4 v7 = a3->columns[3];
  v9[2] = a3->columns[2];
  v9[3] = v7;
  do
  {
    *(long long *)((char *)&v10 + v3 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v9[v3])), v5, *(float32x2_t *)&v9[v3], 1), v6, (float32x4_t)v9[v3], 2), (float32x4_t)xmmword_237CB4480, (float32x4_t)v9[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  return *(double *)&v10;
}

void OU3DObjectRGBSizeRefiner::ProjectToImage(OU3DObjectRGBSizeRefiner *this@<X0>, const simd_float4x4 *a2@<X1>, const box3d *a3@<X2>, uint64_t a4@<X8>)
{
  simd_float4x4 v31 = 0;
  std::string v32 = 0;
  uint64_t v33 = 0;
  uint64_t v29 = 0;
  long long v30 = 0uLL;
  BOOL v27 = 0;
  std::vector<BOOL>::vector(__p, 8uLL, (unsigned __int8 *)&v27);
  uint64_t v24 = a4;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&v31, 8uLL);
  std::vector<BOOL>::reserve((char **)&v29, 8uLL);
  unint64_t v8 = 0;
  char v9 = 0;
  do
  {
    int32x4_t v25 = (int32x4_t)vaddq_f32((float32x4_t)a2->columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a2->columns[0], COERCE_FLOAT(*((_OWORD *)a3 + v8))), (float32x4_t)a2->columns[1], *(float32x2_t *)((char *)a3 + 16 * v8), 1), (float32x4_t)a2->columns[2], *((float32x4_t *)a3 + v8), 2));
    BOOL v27 = *(float *)&v25.i32[2] <= 0.0;
    std::vector<BOOL>::push_back((uint64_t)&v29, &v27);
    *(float32x2_t *)v10.f32 = vdiv_f32(vdiv_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2)), *(float32x2_t *)((char *)this + 344));
    uint64_t v26 = v10.i64[0];
    v10.i64[1] = v10.i64[0];
    v11.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_237CB6130, v10)).u32[0];
    v11.i32[1] = vmovn_s32(vcgeq_f32(v10, (float32x4_t)xmmword_237CB6130)).i32[1];
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v11, 0xFuLL))) & 1) != 0
      && ((*(void *)((char *)v29 + (((unint64_t)(v30 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v30 - 1)) & 1) == 0)
    {
      char v9 = 1;
      *(void *)((char *)__p[0] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    }
    float v12 = v32;
    if (v32 >= v33)
    {
      uint64_t v14 = (v32 - (unsigned char *)v31) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = (v33 - (unsigned char *)v31) >> 2;
      if (v15 <= v14 + 1) {
        unint64_t v15 = v14 + 1;
      }
      if ((unint64_t)(v33 - (unsigned char *)v31) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        uint64_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v33, v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (uint64_t *)&v17[8 * v14];
      *uint64_t v18 = v26;
      float v13 = (char *)(v18 + 1);
      int v20 = (char *)v31;
      uint64_t v19 = v32;
      if (v32 != v31)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *--uint64_t v18 = v21;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)v31;
      }
      simd_float4x4 v31 = v18;
      std::string v32 = v13;
      uint64_t v33 = &v17[8 * v16];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)std::string v32 = v10.i64[0];
      float v13 = v12 + 8;
    }
    std::string v32 = v13;
    ++v8;
  }
  while (v8 != 8);
  uint64_t v22 = v33;
  *(void *)uint64_t v24 = v31;
  *(void *)(v24 + 8) = v13;
  std::string v32 = 0;
  uint64_t v33 = 0;
  long long v23 = v29;
  *(void *)(v24 + 16) = v22;
  *(void *)(v24 + 24) = v23;
  *(_OWORD *)(v24 + 32) = v30;
  uint64_t v29 = 0;
  long long v30 = 0uLL;
  simd_float4x4 v31 = 0;
  *(unsigned char *)(v24 + 48) = v9 & 1;
  std::vector<BOOL>::vector((void *)(v24 + 56), (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v31)
  {
    std::string v32 = (char *)v31;
    operator delete(v31);
  }
}

void sub_237C9A148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  int32x4_t v25 = *(void **)(v23 + 24);
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v26;
    operator delete(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult(OU3DObjectRGBSizeRefiner::ProjectionResult *this)
{
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3) {
    operator delete(v3);
  }
  float32x4_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

OU3DObjectRGBSizeRefiner *OU3DObjectRGBSizeRefiner::ComputeWeightedRGBBuffer(OU3DObjectRGBSizeRefiner *this, double a2, double a3, float a4, float a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 28);
  uint64_t v7 = *((void *)this + 34);
  uint64_t v8 = *((void *)this + 37);
  do
  {
    LOBYTE(a4) = *(unsigned char *)(v6 + v5);
    LOBYTE(a5) = *(unsigned char *)(v7 + v5);
    a5 = (float)LODWORD(a5) * 7.0;
    a4 = a5 + (float)((float)LODWORD(a4) * 0.35);
    *(float *)(v8 + 4 * v5++) = a4;
  }
  while (v5 != 49152);
  return this;
}

void OU3DObjectRGBSizeRefiner::InsideFovSides(OU3DObjectRGBSizeRefiner *this@<X0>, const OU3DObjectRGBSizeRefiner::ProjectionResult *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = operator new(0x20uLL);
  _OWORD *v5 = xmmword_237CB6310;
  v5[1] = unk_237CB6320;
  id v36 = (void **)v5;
  std::string v37 = v5 + 2;
  std::string v38 = v5 + 2;
  uint64_t v6 = operator new(0x20uLL);
  _OWORD *v6 = xmmword_237CB6330;
  v6[1] = unk_237CB6340;
  std::string v39 = v6;
  std::string v40 = v6 + 2;
  uint64_t v41 = v6 + 2;
  uint64_t v7 = operator new(0x20uLL);
  _OWORD *v7 = xmmword_237CB6350;
  v7[1] = unk_237CB6360;
  uint64_t v42 = v7;
  __n128 v43 = v7 + 2;
  char v44 = v7 + 2;
  uint64_t v8 = operator new(0x20uLL);
  _OWORD *v8 = xmmword_237CB6370;
  v8[1] = unk_237CB6380;
  uint64_t v45 = v8;
  char v46 = v8 + 2;
  uint64_t v47 = v8 + 2;
  char v9 = operator new(0x20uLL);
  _OWORD *v9 = xmmword_237CB6390;
  v9[1] = unk_237CB63A0;
  char v48 = v9;
  uint64_t v49 = v9 + 2;
  char v50 = v9 + 2;
  float32x4_t v10 = operator new(0x20uLL);
  v52[0] = v10 + 2;
  v52[1] = v10 + 2;
  _OWORD *v10 = xmmword_237CB63B0;
  v10[1] = unk_237CB63C0;
  long long v51 = v10;
  std::string v32 = 0;
  uint64_t v33 = 0;
  simd_float4x4 v31 = 0;
  uint64_t v34 = (uint64_t)&v31;
  LOBYTE(v35) = 0;
  simd_float4x4 v31 = operator new(0x90uLL);
  std::string v32 = v31;
  uint64_t v33 = v31 + 18;
  uint64_t v11 = 0;
  std::string v32 = _ZNSt3__135__uninitialized_allocator_copy_implB8ne180100INS_9allocatorINS_6vectorIDv2_iNS1_IS3_EEEEEEPKS5_S8_PS5_EET2_RT_T0_T1_SA_((uint64_t)&v33, (uint64_t)&v36, (uint64_t)&v53, v31);
  do
  {
    float v12 = (void *)v52[v11 - 1];
    if (v12)
    {
      v52[v11] = v12;
      operator delete(v12);
    }
    v11 -= 3;
  }
  while (v11 != -18);
  int v13 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int v30 = 0;
  do
  {
    uint64_t v14 = (uint64_t **)&v31[3 * v13];
    unint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    if (*v14 != v16)
    {
      char v17 = 0;
      do
      {
        uint64_t v18 = *v15;
        unint64_t v19 = (int)*v15;
        uint64_t v20 = *((void *)a2 + 3);
        uint64_t v21 = 1 << *v15;
        if ((v21 & *(void *)(v20 + 8 * (v19 >> 6))) == 0
          || ((*(void *)(v20 + (((unint64_t)SHIDWORD(v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE4(v18)) & 1) == 0)
        {
          uint64_t v22 = *((void *)a2 + 7);
          if ((*(void *)(v22 + 8 * (v19 >> 6)) & v21) != 0
            || ((*(void *)(v22 + (((unint64_t)SHIDWORD(v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE4(v18)) & 1) != 0)
          {
            goto LABEL_34;
          }
          uint64_t v23 = *(void *)a2;
          id v36 = 0;
          std::string v37 = 0;
          id v36 = *(void ***)(v23 + 8 * v19);
          std::string v37 = *(_OWORD **)(v23 + 8 * SHIDWORD(v18));
          float32x2_t v29 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 1132462080;
          int v24 = OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29);
          if (v29.f32[0] >= 0.0) {
            int v25 = v24;
          }
          else {
            int v25 = 0;
          }
          if (v25 == 1 && v29.f32[0] <= 256.0) {
            char v17 = 1;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0x4340000000000000;
          if (OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29)
            && v29.f32[1] >= 0.0
            && v29.f32[1] <= 192.0)
          {
            char v17 = 1;
          }
          uint64_t v34 = 0x4340000000000000;
          uint64_t v35 = 0x4340000043800000;
          int v26 = OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29);
          if (v29.f32[0] >= 0.0) {
            int v27 = v26;
          }
          else {
            int v27 = 0;
          }
          if (v27 == 1 && v29.f32[0] <= 256.0) {
            char v17 = 1;
          }
          uint64_t v34 = 1132462080;
          uint64_t v35 = 0x4340000043800000;
          if (OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29)
            && v29.f32[1] >= 0.0
            && v29.f32[1] <= 192.0)
          {
            char v17 = 1;
          }
        }
        ++v15;
      }
      while (v15 != v16);
      if ((v17 & 1) == 0) {
        goto LABEL_35;
      }
LABEL_34:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a3, &v30, &v30);
    }
LABEL_35:
    int v28 = v30;
    int v13 = ++v30;
  }
  while (v28 < 5);
  id v36 = &v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_237C9A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  uint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = *(void **)((char *)&a16 + v17 + 120);
    if (v18)
    {
      *(uint64_t *)((char *)&a16 + v17 + 128) = (uint64_t)v18;
      operator delete(v18);
    }
    v17 -= 24;
    if (v17 == -144) {
      _Unwind_Resume(a1);
    }
  }
}

void OU3DObjectRGBSizeRefiner::GetSidesEdgesOfInterest(OU3DObjectRGBSizeRefiner *this@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  v110[5] = *MEMORY[0x263EF8340];
  float v5 = *((float *)this + 88);
  float v6 = *((float *)a2 + 2);
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, (const simd_float4x4 *)((char *)this + 480), a2, (uint64_t)v101);
  OU3DObjectRGBSizeRefiner::InsideFovSides(v7, (const OU3DObjectRGBSizeRefiner::ProjectionResult *)v101, (uint64_t)v100);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = operator new(0xC0uLL);
  *(void *)(a3 + 16) = v8 + 12;
  _OWORD *v8 = xmmword_237CB6140;
  v8[1] = xmmword_237CB6150;
  v8[2] = xmmword_237CB6160;
  void v8[3] = xmmword_237CB6170;
  void v8[4] = xmmword_237CB6180;
  v8[5] = xmmword_237CB6190;
  v8[6] = xmmword_237CB61A0;
  v8[7] = xmmword_237CB61B0;
  v8[8] = xmmword_237CB61C0;
  v8[9] = xmmword_237CB61D0;
  v8[10] = xmmword_237CB61E0;
  v8[11] = xmmword_237CB61F0;
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v8 + 12;
  *(void *)(a3 + 24) = 0;
  char v9 = (void **)(a3 + 24);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  float32x4_t v10 = operator new(0x18uLL);
  *(void *)(a3 + 32) = v10 + 3;
  *(void *)(a3 + 40) = v10 + 3;
  v10[2] = 0x500000004;
  *(_OWORD *)float32x4_t v10 = xmmword_237CB63D0;
  *(void *)(a3 + 24) = v10;
  uint64_t v11 = (float *)*((void *)a2 + 16);
  float v12 = @"Table";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  int v13 = operator new(8uLL);
  std::string __p = v13;
  uint64_t v98 = v13;
  unint64_t v99 = (unint64_t)(v13 + 1);
  uint64_t v14 = v12;
  *int v13 = v14;
  uint64_t v98 = v13 + 1;
  LODWORD(v11) = IsObjectBelongType(v11, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if (v11)
  {
    unint64_t v15 = operator new(0x20uLL);
    *unint64_t v15 = xmmword_237CB6160;
    v15[1] = xmmword_237CB6170;
    unint64_t v16 = operator new(0x14uLL);
    uint64_t v17 = v15 + 2;
    uint64_t v18 = (char *)(v16 + 5);
    v16[4] = 5;
    *(_OWORD *)unint64_t v16 = xmmword_237CB63FC;
    unint64_t v19 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v19;
      operator delete(v19);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v17;
    *(void *)(a3 + 16) = v17;
    uint64_t v20 = *(void **)(a3 + 24);
    if (v20)
    {
      *(void *)(a3 + 32) = v20;
      operator delete(v20);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v18;
    *(void *)(a3 + 40) = v18;
  }
  uint64_t v21 = (float *)*((void *)a2 + 16);
  v110[0] = @"Cabinet";
  v110[1] = @"Refrigerator";
  v110[2] = @"Oven";
  v110[3] = @"Dishwasher";
  v110[4] = @"Washer";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  uint64_t v22 = operator new(0x28uLL);
  unint64_t v23 = 0;
  float v24 = vabds_f32(v6, v5);
  std::string __p = v22;
  uint64_t v98 = v22;
  unint64_t v99 = (unint64_t)(v22 + 10);
  do
  {
    *(void *)&v22[v23 / 4] = (id)v110[v23 / 8];
    v23 += 8;
  }
  while (v23 != 40);
  uint64_t v98 = v22 + 10;
  BOOL v25 = IsObjectBelongType(v21, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (uint64_t i = 4; i != -1; --i)

  if (v25)
  {
    int v27 = operator new(0x78uLL);
    *int v27 = xmmword_237CB6160;
    v27[1] = xmmword_237CB6200;
    _OWORD v27[2] = xmmword_237CB6210;
    _OWORD v27[3] = xmmword_237CB6220;
    v27[4] = xmmword_237CB6230;
    v27[5] = xmmword_237CB6240;
    v27[6] = xmmword_237CB6250;
    *((void *)v27 + 14) = 0x200000006;
    int v28 = operator new(0x14uLL);
    float32x2_t v29 = (char *)v27 + 120;
    int v30 = (char *)(v28 + 5);
    v28[4] = 4;
    *(_OWORD *)int v28 = xmmword_237CB63E8;
    simd_float4x4 v31 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v31;
      operator delete(v31);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v27;
    *(void *)(a3 + 8) = v29;
    *(void *)(a3 + 16) = v29;
    std::string v32 = *(void **)(a3 + 24);
    if (v32)
    {
      *(void *)(a3 + 32) = v32;
      operator delete(v32);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v28;
    *(void *)(a3 + 32) = v30;
    *(void *)(a3 + 40) = v30;
  }
  uint64_t v33 = (float *)*((void *)a2 + 16);
  v109[0] = @"Shelf";
  v109[1] = @"Stove";
  void v109[2] = @"Sink";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  uint64_t v34 = operator new(0x18uLL);
  unint64_t v35 = 0;
  std::string __p = v34;
  uint64_t v98 = v34;
  unint64_t v99 = (unint64_t)(v34 + 6);
  do
  {
    *(void *)&v34[v35 / 4] = (id)v109[v35 / 8];
    v35 += 8;
  }
  while (v35 != 24);
  uint64_t v98 = v34 + 6;
  BOOL v36 = IsObjectBelongType(v33, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (uint64_t j = 2; j != -1; --j)

  if (v36)
  {
    std::string v38 = operator new(0x80uLL);
    _OWORD *v38 = xmmword_237CB6160;
    v38[1] = xmmword_237CB6170;
    v38[2] = xmmword_237CB6180;
    v38[3] = xmmword_237CB6190;
    v38[4] = xmmword_237CB61A0;
    v38[5] = xmmword_237CB61B0;
    v38[6] = xmmword_237CB61C0;
    v38[7] = xmmword_237CB61D0;
    std::string v39 = operator new(0x14uLL);
    std::string v40 = v38 + 8;
    uint64_t v41 = (char *)(v39 + 5);
    v39[4] = 4;
    *(_OWORD *)std::string v39 = xmmword_237CB63E8;
    uint64_t v42 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v42;
      operator delete(v42);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v38;
    *(void *)(a3 + 8) = v40;
    *(void *)(a3 + 16) = v40;
    __n128 v43 = *(void **)(a3 + 24);
    if (v43)
    {
      *(void *)(a3 + 32) = v43;
      operator delete(v43);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v39;
    *(void *)(a3 + 32) = v41;
    *(void *)(a3 + 40) = v41;
  }
  char v44 = (float *)*((void *)a2 + 16);
  uint64_t v107 = @"Screen";
  uint64_t v108 = @"Fireplace";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  uint64_t v45 = operator new(0x10uLL);
  std::string __p = v45;
  uint64_t v98 = v45;
  unint64_t v99 = (unint64_t)(v45 + 2);
  void *v45 = v107;
  v45[1] = v108;
  uint64_t v98 = v45 + 2;
  BOOL v46 = IsObjectBelongType(v44, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (uint64_t k = 8; k != -8; k -= 8)

  if (v46)
  {
    char v48 = operator new(0x20uLL);
    *char v48 = xmmword_237CB61A0;
    v48[1] = xmmword_237CB61B0;
    uint64_t v49 = operator new(0x14uLL);
    char v50 = v48 + 2;
    long long v51 = (char *)(v49 + 5);
    v49[4] = 4;
    *(_OWORD *)uint64_t v49 = xmmword_237CB63E8;
    uint64_t v52 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v52;
      operator delete(v52);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v48;
    *(void *)(a3 + 8) = v50;
    *(void *)(a3 + 16) = v50;
    uint64_t v53 = *(void **)(a3 + 24);
    if (v53)
    {
      *(void *)(a3 + 32) = v53;
      operator delete(v53);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v49;
    *(void *)(a3 + 32) = v51;
    *(void *)(a3 + 40) = v51;
  }
  id v54 = (float *)*((void *)a2 + 16);
  char v55 = @"Sofa";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  std::string v56 = operator new(8uLL);
  std::string __p = v56;
  uint64_t v98 = v56;
  unint64_t v99 = (unint64_t)(v56 + 1);
  long long v57 = v55;
  void *v56 = v57;
  uint64_t v98 = v56 + 1;
  LODWORD(v54) = IsObjectBelongType(v54, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if (v54)
  {
    uint64_t v58 = operator new(0x50uLL);
    *uint64_t v58 = xmmword_237CB6140;
    v58[1] = xmmword_237CB6150;
    v58[2] = xmmword_237CB6180;
    v58[3] = xmmword_237CB6260;
    v58[4] = xmmword_237CB6270;
    std::string v59 = operator new(0x10uLL);
    float v60 = v58 + 5;
    *std::string v59 = xmmword_237CB6280;
    uint64_t v61 = v59 + 1;
    std::string v62 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v62;
      operator delete(v62);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v58;
    *(void *)(a3 + 8) = v60;
    *(void *)(a3 + 16) = v60;
    uint64_t v63 = *(void **)(a3 + 24);
    if (v63)
    {
      *(void *)(a3 + 32) = v63;
      operator delete(v63);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v59;
    *(void *)(a3 + 32) = v61;
    *(void *)(a3 + 40) = v61;
  }
  uint64_t v64 = (float *)*((void *)a2 + 16);
  unint64_t v65 = @"Bed";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  uint64_t v66 = operator new(8uLL);
  std::string __p = v66;
  uint64_t v98 = v66;
  unint64_t v99 = (unint64_t)(v66 + 1);
  uint64_t v67 = v65;
  void *v66 = v67;
  uint64_t v98 = v66 + 1;
  LODWORD(v64) = IsObjectBelongType(v64, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if (v64)
  {
    float v68 = operator new(0x58uLL);
    _OWORD *v68 = xmmword_237CB6140;
    v68[1] = xmmword_237CB6150;
    _OWORD v68[2] = xmmword_237CB6290;
    v68[3] = xmmword_237CB62A0;
    void v68[4] = xmmword_237CB61C0;
    *((void *)v68 + 10) = 0x200000006;
    uint64_t v69 = operator new(0x14uLL);
    uint64_t v70 = (char *)v68 + 88;
    int64_t v71 = (char *)(v69 + 5);
    void v69[4] = 5;
    *(_OWORD *)uint64_t v69 = xmmword_237CB63FC;
    uint64_t v72 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v72;
      operator delete(v72);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v68;
    *(void *)(a3 + 8) = v70;
    *(void *)(a3 + 16) = v70;
    uint64_t v73 = *(void **)(a3 + 24);
    if (v73)
    {
      *(void *)(a3 + 32) = v73;
      operator delete(v73);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v69;
    *(void *)(a3 + 32) = v71;
    *(void *)(a3 + 40) = v71;
  }
  int64_t v74 = (float *)*((void *)a2 + 16);
  v106[0] = @"Toilet";
  v106[1] = @"Bathtub";
  v106[2] = @"Stool";
  v106[3] = @"Chair";
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  std::string __p = 0;
  p_p = &__p;
  char v105 = 0;
  int64_t v75 = operator new(0x20uLL);
  unint64_t v76 = 0;
  std::string __p = v75;
  uint64_t v98 = v75;
  unint64_t v99 = (unint64_t)(v75 + 8);
  do
  {
    *(void *)&v75[v76 / 4] = (id)v106[v76 / 8];
    v76 += 8;
  }
  while (v76 != 32);
  uint64_t v98 = v75 + 8;
  BOOL v77 = IsObjectBelongType(v74, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (uint64_t m = 3; m != -1; --m)

  if (v77)
  {
    uint64_t v79 = operator new(0x38uLL);
    *uint64_t v79 = xmmword_237CB6290;
    v79[1] = xmmword_237CB62A0;
    v79[2] = xmmword_237CB61C0;
    *((void *)v79 + 6) = 0x200000006;
    uint64_t v80 = (char *)operator new(0x14uLL);
    long long v81 = (char *)v79 + 56;
    uint64_t v82 = v80 + 20;
    *((_DWORD *)v80 + 4) = 5;
    *(_OWORD *)uint64_t v80 = xmmword_237CB63FC;
    float v83 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v83;
      operator delete(v83);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v79;
    *(void *)(a3 + 8) = v81;
    *(void *)(a3 + 16) = v81;
    long long v84 = *(void **)(a3 + 24);
    if (v84)
    {
      *(void *)(a3 + 32) = v84;
      operator delete(v84);
      _OWORD *v9 = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
    }
    *(void *)(a3 + 24) = v80;
    *(void *)(a3 + 32) = v82;
    *(void *)(a3 + 40) = v82;
    std::string __p = 0;
    uint64_t v98 = 0;
    unint64_t v99 = 0;
  }
  else
  {
    uint64_t v80 = *(char **)(a3 + 24);
    uint64_t v82 = *(char **)(a3 + 32);
    std::string __p = 0;
    uint64_t v98 = 0;
    unint64_t v99 = 0;
    if (v80 == v82) {
      goto LABEL_77;
    }
  }
  do
  {
    LODWORD(p_p) = *(_DWORD *)v80;
    if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v100, (int *)&p_p))
    {
      uint64_t v85 = v98;
      if ((unint64_t)v98 >= v99)
      {
        uint64_t v87 = __p;
        uint64_t v88 = ((char *)v98 - (unsigned char *)__p) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v99 - (void)__p;
        if ((uint64_t)(v99 - (void)__p) >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          int v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v99, v91);
          uint64_t v87 = __p;
          uint64_t v85 = v98;
        }
        else
        {
          int v92 = 0;
        }
        unint64_t v93 = &v92[4 * v88];
        *(_DWORD *)unint64_t v93 = p_p;
        uint64_t v86 = v93 + 4;
        while (v85 != v87)
        {
          int v94 = *--v85;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        std::string __p = v93;
        uint64_t v98 = v86;
        unint64_t v99 = (unint64_t)&v92[4 * v91];
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *uint64_t v98 = p_p;
        uint64_t v86 = v85 + 1;
      }
      uint64_t v98 = v86;
    }
    v80 += 4;
  }
  while (v80 != v82);
LABEL_77:
  if (v9 != &__p) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a3 + 24), (char *)__p, (uint64_t)v98, ((char *)v98 - (unsigned char *)__p) >> 2);
  }
  if (v24 < 0.3 && !*(_DWORD *)*v9)
  {
    uint64_t v95 = *(_DWORD **)(a3 + 32);
    int v96 = *--v95;
    *(_DWORD *)_OWORD *v9 = v96;
    *uint64_t v95 = 0;
    *(void *)(a3 + 32) = v95;
  }
  if (__p)
  {
    uint64_t v98 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v100);
  if (v103) {
    operator delete(v103);
  }
  if (v102) {
    operator delete(v102);
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
}

void sub_237C9B368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  operator delete(v39);
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev(v38);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a33);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a38);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::GenerateRgbFilterdBuffer(OU3DObjectRGBSizeRefiner *this, NSString *a2)
{
  int v13 = a2;
  uint64_t v14 = &v13;
  uint64_t v3 = *(__CVBuffer **)(std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)&v13, (uint64_t)&std::piecewise_construct, (id **)&v14)[5]+ 144);
  CVPixelBufferLockBaseAddress(v3, 0);
  int Height = CVPixelBufferGetHeight(v3);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v3);
  size_t v7 = BytesPerRow * Height;
  if (v7)
  {
    uint64_t v8 = (unsigned char *)*((void *)this + 34);
    char v9 = (char *)*((void *)this + 28);
    do
    {
      char v11 = *BaseAddress++;
      char v10 = v11;
      char v12 = *v9++;
      *v8++ = v12 * v10;
      --v7;
    }
    while (v7);
  }
}

void sub_237C9B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::ShouldRefineObjects(uint64_t a1@<X0>, void *a2@<X1>, const simd_float3x3 *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v9 = a2;
  id v48 = a5;
  uint64_t v58 = 0;
  std::string v59 = 0;
  uint64_t v60 = 0;
  boxesFromObjects(v9, @"rawdetection", &v58, v57);
  int v10 = -1227133513 * ((v57[1] - v57[0]) >> 5);
  LOBYTE(v52) = 0;
  std::vector<BOOL>::vector(&__p, v10, (unsigned __int8 *)&v52);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = (uint64_t *)&v53;
  if (v10 < 1)
  {
    int v13 = 0;
  }
  else
  {
    uint64_t v44 = a6;
    uint64_t v49 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    id v45 = v9;
    uint64_t v46 = v10;
    do
    {
      unint64_t ShouldRefineObject = OU3DObjectRGBSizeRefiner::ShouldRefineObject(a1, v57[0] + 224 * v12, a3, a4, v48);
      int v15 = ShouldRefineObject;
      if ((ShouldRefineObject & 0xFF00000000) != 0)
      {
        unint64_t v16 = [v9 objectAtIndexedSubscript:*(int *)&v58[4 * v12]];
        uint64_t v17 = objc_msgSend(v16, "refined_box_history");
        if ([v17 count]) {
          int v18 = 1;
        }
        else {
          int v18 = 2;
        }

        unint64_t v19 = [v9 objectAtIndexedSubscript:*(int *)&v58[4 * v12]];
        int v20 = [v19 getFrameIndexOfLastRefine];

        if (v20 == -1)
        {
          if (v11 >= (int *)v49)
          {
            uint64_t v32 = ((char *)v11 - (char *)v13) >> 4;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((v49 - (char *)v13) >> 3 > v33) {
              unint64_t v33 = (v49 - (char *)v13) >> 3;
            }
            if ((unint64_t)(v49 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v35 = (char *)operator new(16 * v34);
            int v36 = *(_DWORD *)(a1 + 196);
            std::string v37 = (int *)&v35[16 * v32];
            int *v37 = v18;
            v37[1] = v36;
            std::string v37[2] = v15;
            v37[3] = v12;
            if (v11 == v13)
            {
              std::string v39 = (int *)&v35[16 * v32];
            }
            else
            {
              uint64_t v38 = &v35[16 * v32];
              do
              {
                std::string v39 = (int *)(v38 - 16);
                *((_OWORD *)v38 - 1) = *((_OWORD *)v11 - 1);
                v11 -= 4;
                v38 -= 16;
              }
              while (v11 != v13);
            }
            uint64_t v49 = &v35[16 * v34];
            char v11 = v37 + 4;
            if (v13) {
              operator delete(v13);
            }
            int v13 = v39;
          }
          else
          {
            int v24 = *(_DWORD *)(a1 + 196);
            *char v11 = v18;
            v11[1] = v24;
            void v11[2] = v15;
            void v11[3] = v12;
            v11 += 4;
          }
        }
        else
        {
          int v21 = *(_DWORD *)(a1 + 196);
          uint64_t v22 = [v9 objectAtIndexedSubscript:*(int *)&v58[4 * v12]];
          int v23 = v21 - [v22 getFrameIndexOfLastRefine];
          if (v11 >= (int *)v49)
          {
            uint64_t v25 = ((char *)v11 - (char *)v13) >> 4;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((v49 - (char *)v13) >> 3 > v26) {
              unint64_t v26 = (v49 - (char *)v13) >> 3;
            }
            if ((unint64_t)(v49 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v28 = (char *)operator new(16 * v27);
            float32x2_t v29 = (int *)&v28[16 * v25];
            int *v29 = v18;
            v29[1] = v23;
            void v29[2] = v15;
            v29[3] = v12;
            if (v11 == v13)
            {
              simd_float4x4 v31 = (int *)&v28[16 * v25];
            }
            else
            {
              int v30 = &v28[16 * v25];
              do
              {
                simd_float4x4 v31 = (int *)(v30 - 16);
                *((_OWORD *)v30 - 1) = *((_OWORD *)v11 - 1);
                v11 -= 4;
                v30 -= 16;
              }
              while (v11 != v13);
            }
            uint64_t v49 = &v28[16 * v27];
            char v11 = v29 + 4;
            id v9 = v45;
            if (v13) {
              operator delete(v13);
            }
            int v13 = v31;
          }
          else
          {
            *char v11 = v18;
            v11[1] = v23;
            void v11[2] = v15;
            void v11[3] = v12;
            v11 += 4;
            id v9 = v45;
          }
        }
      }
      ++v12;
    }
    while (v12 != v46);
    if (v13 == v11)
    {
      a6 = v44;
    }
    else
    {
      unint64_t v40 = v13[3];
      *(void *)((char *)__p + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      ObjectTypeConversion(*(NSString **)(v57[0] + 224 * (int)v40 + 128));
      id v51 = (id)objc_claimAutoreleasedReturnValue();
      std::__tree<NSString * {__strong}>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}>(&v52, (unint64_t *)&v51, (uint64_t *)&v51);
      a6 = v44;
    }
  }
  uint64_t v41 = v54;
  *(void *)a6 = __p;
  *(_OWORD *)(a6 + 8) = v56;
  long long v56 = 0uLL;
  std::string __p = 0;
  uint64_t v42 = v53;
  *(void *)(a6 + 24) = v52;
  *(void *)(a6 + 32) = v42;
  uint64_t v43 = a6 + 32;
  *(void *)(a6 + 40) = v41;
  if (v41)
  {
    v42[2] = v43;
    uint64_t v52 = (uint64_t *)&v53;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v42 = 0;
    if (!v13) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  *(void *)(a6 + 24) = v43;
  if (v13)
  {
LABEL_50:
    operator delete(v13);
    uint64_t v42 = v53;
  }
LABEL_51:
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v52, v42);
  if (__p) {
    operator delete(__p);
  }
  std::string __p = v57;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v58)
  {
    std::string v59 = v58;
    operator delete(v58);
  }
}

void sub_237C9BAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,char *__p,uint64_t a22,uint64_t a23,char a24)
{
  if (v24) {
    operator delete(v24);
  }
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a18, a19);
  if (__p) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(void *)(v25 - 104) = v27;
    operator delete(v27);
  }

  _Unwind_Resume(a1);
}

unint64_t OU3DObjectRGBSizeRefiner::ShouldRefineObject(uint64_t a1, uint64_t a2, const simd_float3x3 *a3, uint64_t a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v9 = a5;
  unint64_t v10 = ObjectTypeConversion(*(NSString **)(a2 + 128));
  char v11 = (void *)v10;
  uint64_t v12 = *(void **)(a1 + 176);
  if (!v12) {
    goto LABEL_12;
  }
  int v13 = (void *)(a1 + 176);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= v10;
    if (v14 >= v10) {
      unint64_t v16 = v12;
    }
    else {
      unint64_t v16 = v12 + 1;
    }
    if (v15) {
      int v13 = v12;
    }
    uint64_t v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 == (void *)(a1 + 176) || v10 < v13[4])
  {
LABEL_12:
    uint64_t v17 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(a2 + 144) UUIDString];
      objc_claimAutoreleasedReturnValue();
      [v11 UTF8String];
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
LABEL_14:

    goto LABEL_15;
  }
  if (v9 && ([v9 containsObject:*(void *)(a2 + 144)] & 1) == 0)
  {
    uint64_t v17 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(a2 + 144) UUIDString];
      objc_claimAutoreleasedReturnValue();
      [v11 UTF8String];
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
    goto LABEL_14;
  }
  uint64_t v23 = 0;
  float v24 = 3.4028e38;
  do
  {
    float32x4_t v25 = vsubq_f32(*(float32x4_t *)(a4 + 48), *(float32x4_t *)(a2 + v23));
    float32x4_t v26 = vmulq_f32(v25, v25);
    float v27 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
    if (v27 < v24) {
      float v24 = v27;
    }
    v23 += 16;
  }
  while (v23 != 128);
  if (v24 > 5.0)
  {
    int v28 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      float32x2_t v29 = [*(id *)(a2 + 144) UUIDString];
      OU3DObjectRGBSizeRefiner::ShouldRefineObject(v29, v31, v28, v24);
    }

    goto LABEL_15;
  }
  uint64_t IsBoxInFOVLine = OU3DObjectRGBSizeRefiner::IsBoxInFOVLine((OU3DObjectRGBSizeRefiner *)a1, a3, (const simd_float4x4 *)a4, (const box3d *)a2);
  uint64_t v19 = IsBoxInFOVLine & 0xFF00000000;
  if ((IsBoxInFOVLine & 0xFF00000000) == 0)
  {
    uint64_t v17 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(a2 + 144) UUIDString];
      objc_claimAutoreleasedReturnValue();
      [v11 UTF8String];
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
    goto LABEL_14;
  }
  if (![*(id *)(a2 + 128) isEqualToString:@"Screen"]
    || (OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner((OU3DObjectRGBSizeRefiner *)a1, a3, (const simd_float4x4 *)a4, (const box3d *)a2) & 0xFF00000000) != 0)
  {
    unint64_t v20 = IsBoxInFOVLine & 0xFFFFFF0000000000;
    uint64_t v21 = IsBoxInFOVLine & 0xFFFFFF00;
    uint64_t v18 = IsBoxInFOVLine;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
LABEL_16:

  return v19 | v18 | v20 | v21;
}

void sub_237C9BE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3, const box3d *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v36.columns[2] = a3->columns[2];
  float32x4_t v33 = (float32x4_t)a3->columns[3];
  v36.columns[3] = (simd_float4)v33;
  v36.columns[0] = a3->columns[0];
  v36.columns[1] = a3->columns[1];
  simd_float4x4 v31 = __invert_f4(v36);
  *(double *)v8.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v7, a2, &v31);
  v32.columns[0] = v8;
  v32.columns[1] = v9;
  v32.columns[2] = v10;
  v32.columns[3] = v11;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v32, a4, (uint64_t)&v31);
  OU3DObjectRGBSizeRefiner::GetCornerVisibility((uint64_t)a4, &v33, v29);
  std::vector<BOOL>::vector(&v28, (uint64_t)v29);
  std::vector<BOOL>::vector(&v27, (uint64_t)&v30);
  buf[0] = 0;
  std::vector<BOOL>::vector(&__p, 8uLL, buf);
  unint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = v31.columns[1].i64[1];
  uint64_t v15 = v31.columns[3].i64[1];
  unint64_t v16 = (char *)__p;
  uint64_t v17 = v28;
  do
  {
    unint64_t v18 = v12 >> 6;
    uint64_t v19 = 1 << v12;
    if ((*(void *)(v14 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v20 = (uint64_t *)&v16[8 * v18];
LABEL_4:
      uint64_t v21 = *v20 | v19;
      goto LABEL_7;
    }
    unint64_t v20 = (uint64_t *)&v16[8 * v18];
    if ((v17[v18] & v19) == 0) {
      goto LABEL_4;
    }
    uint64_t v21 = *v20 & ~v19;
LABEL_7:
    *unint64_t v20 = v21;
    if ((*(void *)(v15 + 8 * v18) & v19) != 0) {
      ++v13;
    }
    ++v12;
  }
  while (v12 != 8);
  if (v13 >= 5)
  {
    int v24 = v13 & 0x7FFFFF00;
    unsigned int v13 = v13;
    uint64_t v23 = 0x100000000;
  }
  else
  {
    uint64_t v22 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner([*((id *)a4 + 16) UTF8String], buf, v13, v22);
    }

    uint64_t v23 = 0;
    unsigned int v13 = 0;
    int v24 = 0;
  }
  if (__p) {
    operator delete(__p);
  }
  if (v27) {
    operator delete(v27);
  }
  if (v28) {
    operator delete(v28);
  }
  if (v30) {
    operator delete(v30);
  }
  if (v29[0]) {
    operator delete(v29[0]);
  }
  if (v31.columns[3].i64[1]) {
    operator delete((void *)v31.columns[3].i64[1]);
  }
  if (v31.columns[1].i64[1]) {
    operator delete((void *)v31.columns[1].i64[1]);
  }
  if (v31.columns[0].i64[0])
  {
    v31.columns[0].i64[1] = v31.columns[0].i64[0];
    operator delete((void *)v31.columns[0].i64[0]);
  }
  return v23 | v24 | v13;
}

void sub_237C9C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo((OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *)&a19);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a25);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::GetCornerVisibility(uint64_t a1@<X1>, float32x4_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  LOBYTE(v48[0]) = 0;
  std::vector<BOOL>::vector(v46, 8uLL, (unsigned __int8 *)v48);
  LOBYTE(v48[0]) = 0;
  std::vector<BOOL>::vector(__p, 8uLL, (unsigned __int8 *)v48);
  float v6 = (void **)operator new(0x10uLL);
  v48[0] = v6;
  *(_OWORD *)float v6 = xmmword_237CB4900;
  v48[1] = v6 + 2;
  _OWORD v48[2] = v6 + 2;
  uint64_t v49 = 0;
  char v50 = 0;
  id v51 = 0;
  size_t v7 = operator new(0x10uLL);
  uint64_t v49 = v7;
  _OWORD *v7 = xmmword_237CB4910;
  char v50 = v7 + 1;
  id v51 = v7 + 1;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  simd_float4 v8 = operator new(0x10uLL);
  uint64_t v52 = v8;
  _OWORD *v8 = xmmword_237CB4920;
  uint64_t v53 = v8 + 1;
  uint64_t v54 = v8 + 1;
  char v55 = 0;
  long long v56 = 0;
  long long v57 = 0;
  simd_float4 v9 = operator new(0x10uLL);
  char v55 = v9;
  _OWORD *v9 = xmmword_237CB4930;
  long long v56 = v9 + 1;
  long long v57 = v9 + 1;
  uint64_t v58 = 0;
  std::string v59 = 0;
  uint64_t v60 = 0;
  simd_float4 v10 = operator new(0x10uLL);
  uint64_t v58 = v10;
  _OWORD *v10 = xmmword_237CB4940;
  std::string v59 = v10 + 1;
  uint64_t v60 = v10 + 1;
  uint64_t v61 = 0;
  std::string v62 = 0;
  uint64_t v63 = 0;
  simd_float4 v11 = operator new(0x10uLL);
  uint64_t v61 = v11;
  *simd_float4 v11 = xmmword_237CB48F0;
  std::string v62 = v11 + 1;
  uint64_t v63 = v11 + 1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  _OWORD v46[3] = &v42;
  char v47 = 0;
  uint64_t v42 = (int **)operator new(0x90uLL);
  uint64_t v43 = v42;
  uint64_t v44 = v42 + 18;
  uint64_t v12 = 0;
  uint64_t v43 = (int **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v44, (uint64_t)v48, (uint64_t)&v64, v42);
  do
  {
    unsigned int v13 = *(_OWORD **)((char *)&v61 + v12);
    if (v13)
    {
      *(_OWORD **)((char *)&v62 + v12) = v13;
      operator delete(v13);
    }
    v12 -= 24;
  }
  while (v12 != -144);
  uint64_t v14 = v42;
  uint64_t v15 = v43;
  if (v42 != v43)
  {
    unint64_t v16 = v46[0];
    __asm { FMOV            V0.4S, #-0.25 }
    do
    {
      uint64_t v22 = *v14;
      float32x4_t v23 = *(float32x4_t *)(a1 + 16 * **v14);
      float32x4_t v24 = *(float32x4_t *)(a1 + 16 * (*v14)[1]);
      float32x4_t v25 = *(float32x4_t *)(a1 + 16 * (*v14)[2]);
      float32x4_t v26 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v23, v24), v25), *(float32x4_t *)(a1 + 16 * (*v14)[3])), _Q0);
      float32x4_t v27 = vsubq_f32(v23, v24);
      float32x4_t v28 = vsubq_f32(v25, v24);
      float32x4_t v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
      float32x4_t v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
      int32x4_t v31 = (int32x4_t)vmulq_f32(v29, v29);
      v31.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), *(float32x2_t *)v31.i8)).u32[0];
      *(float32x2_t *)v25.f32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
      *(float32x2_t *)v25.f32 = vmul_f32(*(float32x2_t *)v25.f32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32)));
      v31.i32[0] = vmul_f32(*(float32x2_t *)v25.f32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32))).u32[0];
      float32x4_t v32 = vaddq_f32(*a2, v26);
      int32x4_t v33 = (int32x4_t)vmulq_f32(v32, v32);
      v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
      float32x4_t v34 = vmulq_n_f32(v30, *(float *)v31.i32);
      *(float32x2_t *)v30.f32 = vrsqrte_f32((float32x2_t)v33.u32[0]);
      *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)));
      float32x4_t v35 = vmulq_f32(v34, vmulq_n_f32(v32, vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32))).f32[0]));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0] > 0.0)
      {
        simd_float4x4 v36 = v14[1];
        if (v22 != v36)
        {
          std::string v37 = __p[0];
          do
          {
            unint64_t v38 = *v22;
            unint64_t v39 = v38 >> 6;
            uint64_t v40 = 1 << v38;
            uint64_t v41 = v16[v39];
            if ((v40 & v41) != 0)
            {
              v37[v39] |= v40;
              uint64_t v41 = v16[v39];
            }
            v16[v39] = v41 | v40;
            ++v22;
          }
          while (v22 != v36);
        }
      }
      v14 += 3;
    }
    while (v14 != v15);
  }
  std::vector<BOOL>::vector(a3, (uint64_t)v46);
  std::vector<BOOL>::vector(a3 + 3, (uint64_t)__p);
  v48[0] = (void **)&v42;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v48);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v46[0]) {
    operator delete(v46[0]);
  }
}

void sub_237C9C518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t *a20)
{
  if (*v20) {
    operator delete(*v20);
  }
  a20 = &a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_237C9C5E0()
{
}

void sub_237C9C5E8()
{
}

void sub_237C9C5F0()
{
}

void OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo(OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *this)
{
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2) {
    operator delete(v2);
  }
  if (*(void *)this) {
    operator delete(*(void **)this);
  }
}

uint64_t OU3DObjectRGBSizeRefiner::IsBoxInFOVLine(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3, const box3d *a4)
{
  simd_float4x4 v38 = __invert_f4(*a3);
  *(double *)v8.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v7, a2, &v38);
  v39.columns[0] = v8;
  v39.columns[1] = v9;
  v39.columns[2] = v10;
  v39.columns[3] = v11;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v39, a4, (uint64_t)&v38);
  float32x4_t v35 = 0;
  simd_float4x4 v36 = 0;
  uint64_t v37 = 0;
  OU::ConvexHull((uint64_t *)&v38, (uint64_t)&v35, __p);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = v35;
  unint64_t v15 = (v36 - (unsigned char *)v35) >> 2;
  while (v12 != v15)
  {
    uint64_t v16 = v12 + 1;
    float32x2_t v17 = *(float32x2_t *)(v38.columns[0].i64[0] + 8 * *((int *)v35 + v12));
    float32x2_t v18 = *(float32x2_t *)(v38.columns[0].i64[0] + 8 * *((int *)v35 + (v12 + 1) % v15));
    float32x2_t v19 = vsub_f32(v17, v18);
    int v20 = (int)sqrtf(vaddv_f32(vmul_f32(v19, v19)));
    if ((v20 & 0x80000000) == 0)
    {
      int v21 = 0;
      float32x2_t v22 = vsub_f32(v18, v17);
      float32x2_t v23 = vmul_f32(v22, v22);
      v23.i32[0] = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
      float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
      float32x2_t v26 = vmul_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
      int v27 = v20 + 1;
      do
      {
        uint32x2_t v28 = vcgt_u32((uint32x2_t)0xC000000100, (uint32x2_t)vcvt_s32_f32(vmla_n_f32(v17, v26, (float)v21)));
        v13 -= v28.i32[0] & v28.i32[1];
        ++v21;
      }
      while (v27 != v21);
    }
    uint64_t v12 = v16;
    if (v13 >= 101)
    {
      int v29 = v13 & 0x7FFFFF00;
      unsigned int v30 = v13;
      uint64_t v31 = 0x100000000;
      goto LABEL_9;
    }
  }
  unsigned int v30 = 0;
  int v29 = 0;
  uint64_t v31 = 0;
LABEL_9:
  if (v34 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    uint64_t v14 = v35;
  }
  if (v14)
  {
    simd_float4x4 v36 = v14;
    operator delete(v14);
  }
  if (v38.columns[3].i64[1]) {
    operator delete((void *)v38.columns[3].i64[1]);
  }
  if (v38.columns[1].i64[1]) {
    operator delete((void *)v38.columns[1].i64[1]);
  }
  if (v38.columns[0].i64[0])
  {
    v38.columns[0].i64[1] = v38.columns[0].i64[0];
    operator delete((void *)v38.columns[0].i64[0]);
  }
  return v31 | v29 | v30;
}

void sub_237C9C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a19);
  _Unwind_Resume(a1);
}

float OU3DObjectRGBSizeRefiner::ComputeSearchGranularity(OU3DObjectRGBSizeRefiner *this, const box3d *a2, const simd_float4x4 *a3)
{
  uint64_t v3 = 0;
  float v4 = 3.4028e38;
  do
  {
    float32x4_t v5 = vsubq_f32((float32x4_t)a3->columns[3], *(float32x4_t *)((char *)a2 + v3));
    float32x4_t v6 = vmulq_f32(v5, v5);
    float v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
    if (v7 < v4) {
      float v4 = v7;
    }
    v3 += 16;
  }
  while (v3 != 128);
  float v8 = round(v4 + -1.0);
  return fminf(fmaxf(v8, 2.0), 4.0);
}

id OU3DObjectRGBSizeRefiner::RefineObjects(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v261 = *MEMORY[0x263EF8340];
  id v170 = a2;
  int v13 = a3;
  id v162 = a6;
  id v163 = a7;
  id v164 = a8;
  long long v173 = v13;
  if (OU3DObjectRGBSizeRefiner::IsOUFrameValid(v13, v14))
  {
    kdebug_trace();
    unint64_t v15 = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.var1) = 0;
      _os_log_impl(&dword_237C17000, v15, OS_LOG_TYPE_INFO, "[3DOD RGB Refine] Edge Alignment Start", (uint8_t *)&buf, 2u);
    }
    oslog = v15;

    ++*(_DWORD *)(a1 + 196);
    rawBoxesFromObjects(v170, v232);
    int v16 = -1227133513 * ((v232[1] - v232[0]) >> 5);
    long long v230 = 0;
    uint64_t v229 = 0;
    unint64_t v231 = 0;
    std::vector<OUBox3d>::reserve(&v229, v16);
    float32x2_t v17 = [(OU3DObjectRGBSizeRefiner *)v13 camera];
    [v17 intrinsics];
    buf.var2 = v18;
    LODWORD(buf.var4) = v19;
    buf.id var1 = v20;
    buf.id var3 = v21;
    LODWORD(buf.var5.var1) = v22;
    buf.var5.var0 = v23;
    OU3DObjectRGBSizeRefiner::ShouldRefineObjects(a1, v170, (const simd_float3x3 *)&buf, a4, v163, (uint64_t)&v225);

    kdebug_trace();
    if (v228)
    {
      kdebug_trace();
      -[OU3DObjectRGBSizeRefiner setSemanticLabelBufferOnWideCamera:](v13, "setSemanticLabelBufferOnWideCamera:", CVPixelBufferRetain((CVPixelBufferRef)[*(id *)a1 generateSemanticOnWideCameraWithFrame:v13]));
      kdebug_trace();
      float32x2_t v24 = OUCannyEdgeDetectorInterface::DetectEdges(*(id **)(a1 + 160), v13);
      float32x2_t v25 = v226;
      if (v226 != &v227)
      {
        do
        {
          v214.i64[0] = (uint64_t)(v25 + 4);
          float32x2_t v26 = std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 168), v25 + 4, (uint64_t)&std::piecewise_construct, (id **)&v214);
          uint64_t v27 = OUCannyEdgeDetectorInterface::DetectEdges((id *)v26[5], v13);
          v214.i64[0] = (uint64_t)(v25 + 4);
          uint32x2_t v28 = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 200), v25 + 4, (uint64_t)&std::piecewise_construct, (id **)&v214);
          int v29 = (void *)v28[5];
          v28[5] = v27;

          unsigned int v30 = (void *)v25[1];
          if (v30)
          {
            do
            {
              uint64_t v31 = (void **)v30;
              unsigned int v30 = (void *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              uint64_t v31 = (void **)v25[2];
              BOOL v135 = *v31 == v25;
              float32x2_t v25 = v31;
            }
            while (!v135);
          }
          float32x2_t v25 = v31;
        }
        while (v31 != &v227);
      }
      DownloadMTLTexture(v24, (uint64_t *)(a1 + 224));
      int32x4_t v33 = OUVizTool::Get(v32);
      std::string::basic_string[abi:ne180100]<0>(&buf, "pre_rgb_refine");
      OUVizTool::SaveBoxes((uint64_t)v33, (uint64_t)&buf, v232);
      if (SHIBYTE(buf.var3) < 0) {
        operator delete(buf.var1);
      }
      float32x4_t v35 = (OUVizTool *)OUVizTool::Get(v34);
      OUVizTool::SaveARFrameImage(v35, (__CVBuffer *)[(OU3DObjectRGBSizeRefiner *)v13 sceneColorBuffer]);

      kdebug_trace();
      kdebug_trace();
      rawBoxesFromObjects(v162, &v223);
      if (v16 < 1) {
        goto LABEL_148;
      }
      unint64_t v36 = 0;
      uint64_t v167 = v16;
      float v37 = 7.0;
      while (1)
      {
        uint64_t v168 = v232[0];
        long long v179 = (NSString **)(v232[0] + 224 * v36);
        ObjectTypeConversion(v179[16]);
        id v222 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v177 = v36;
        if ((*(void *)((char *)v225 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36))
        {
          simd_float4x4 v38 = [(OU3DObjectRGBSizeRefiner *)v13 camera];
          [v38 intrinsics];
          *(_DWORD *)(a1 + 376) = v39;
          *(_DWORD *)(a1 + 392) = v40;
          *(void *)(a1 + 368) = v41;
          *(void *)(a1 + 384) = v42;
          *(_DWORD *)(a1 + 408) = v43;
          *(void *)(a1 + 400) = v44;

          *(simd_float4x4 *)(a1 + 416) = __invert_f4(*(simd_float4x4 *)a4);
          *(double *)&long long v46 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v45, (const simd_float3x3 *)(a1 + 368), (const simd_float4x4 *)(a1 + 416));
          *(_OWORD *)(a1 + 480) = v46;
          *(_OWORD *)(a1 + 496) = v47;
          *(_OWORD *)(a1 + 512) = v48;
          *(_OWORD *)(a1 + 528) = v49;
          float32x4_t v50 = *(float32x4_t *)v179;
          long long v51 = *((_OWORD *)v179 + 1);
          long long v52 = *((_OWORD *)v179 + 3);
          long long v216 = *((_OWORD *)v179 + 2);
          long long v217 = v52;
          float32x4_t v214 = v50;
          long long v215 = v51;
          long long v53 = *((_OWORD *)v179 + 4);
          long long v54 = *((_OWORD *)v179 + 5);
          long long v55 = *((_OWORD *)v179 + 7);
          long long v220 = *((_OWORD *)v179 + 6);
          long long v221 = v55;
          long long v218 = v53;
          long long v219 = v54;
          OU3DObjectRGBSizeRefiner::GetSidesEdgesOfInterest((OU3DObjectRGBSizeRefiner *)a1, (const box3d *)v179, (uint64_t)v211);
          v244.id var1 = &v222;
          long long v56 = std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 200), (unint64_t *)&v222, (uint64_t)&std::piecewise_construct, (id **)&v244);
          DownloadMTLTexture((void *)v56[5], (uint64_t *)(a1 + 248));
          OU3DObjectRGBSizeRefiner::GenerateRgbFilterdBuffer((OU3DObjectRGBSizeRefiner *)a1, (NSString *)v222);
          uint64_t v59 = 0;
          uint64_t v60 = *(void *)(a1 + 224);
          uint64_t v61 = *(void *)(a1 + 272);
          uint64_t v62 = *(void *)(a1 + 296);
          do
          {
            LOBYTE(v57) = *(unsigned char *)(v60 + v59);
            LOBYTE(v58) = *(unsigned char *)(v61 + v59);
            float v58 = (float)LODWORD(v58) * v37;
            float v57 = v58 + (float)((float)LODWORD(v57) * 0.35);
            *(float *)(v62 + 4 * v59++) = v57;
          }
          while (v59 != 49152);
          if (OU3DObjectRGBSizeRefiner::ComputeSemanticRatio((OU3DObjectRGBSizeRefiner *)a1, (const box3d *)v179, (const simd_float3x3 *)(a1 + 368), (const simd_float4x4 *)(a1 + 416)) < 0.15)
          {
            uint64_t v63 = oslog;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
            {
              id v125 = [*(id *)(v168 + 224 * v177 + 144) UUIDString];
              uint64_t v126 = [v222 UTF8String];
              LODWORD(buf.var1) = 138412546;
              *(id *)((char *)&buf.var1 + 4) = v125;
              *((_WORD *)&buf.var2 + 2) = 2080;
              *(void *)((char *)&buf.var2 + 6) = v126;
              _os_log_debug_impl(&dword_237C17000, oslog, OS_LOG_TYPE_DEBUG, "[3DOD RGB Refine Debug] Object uuid: %@ box type: %s does not meet semantic ratio ", (uint8_t *)&buf, 0x16u);

              uint64_t v63 = oslog;
            }

            uint64_t v64 = [v170 objectAtIndexedSubscript:v177];
            unint64_t v65 = objc_msgSend(v64, "refined_box_history");
            BOOL v66 = [v65 count] == 0;

            if (!v66)
            {
              OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
              uint64_t v67 = v223;
              uint64_t v68 = v224;
              if (v223 != v224)
              {
                while (![*(id *)(v67 + 144) isEqual:*(void *)(v168 + 224 * v177 + 144)])
                {
                  v67 += 224;
                  if (v67 == v68) {
                    goto LABEL_92;
                  }
                }
                OUBox3d::operator=((uint64_t)&buf, (long long *)v67);
              }
LABEL_92:
              unint64_t v121 = v230;
              if ((unint64_t)v230 >= v231)
              {
                uint64_t v122 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
              }
              else
              {
                OUBox3d::OUBox3d(v230, &buf);
                uint64_t v122 = (OUBox3d *)((char *)v121 + 224);
              }
              long long v230 = v122;

              if (__p) {
                operator delete(__p);
              }
              if (v254)
              {
                long long v255 = v254;
                operator delete(v254);
              }

LABEL_102:
              if (v212)
              {
                int v213 = v212;
                operator delete(v212);
              }
              if (v211[0])
              {
                v211[1] = v211[0];
                operator delete(v211[0]);
              }
              goto LABEL_106;
            }
            uint64_t v78 = v230;
            if ((unint64_t)v230 < v231)
            {
LABEL_87:
              OUBox3d::OUBox3d(v230, (const OUBox3d *)v179);
              uint64_t v120 = (OUBox3d *)((char *)v78 + 224);
LABEL_101:
              long long v230 = v120;
              goto LABEL_102;
            }
LABEL_100:
            uint64_t v120 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, (const OUBox3d *)v179);
            goto LABEL_101;
          }
          OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v214, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 0);
          float v76 = OU3DObjectRGBSizeRefiner::ComputeOverlapScore<float>(a1, (void *)(a1 + 296), (uint64_t *)(a1 + 320), (box3d *)&v214);
          OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v214, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 1);
          float v77 = v76
              + (float)(OU3DObjectRGBSizeRefiner::ComputeOverlapScore<unsigned char>(a1, (void *)(a1 + 248), (uint64_t *)(a1 + 320), (box3d *)&v214)* 8.0);
          if (v77 == 0.0)
          {
            uint64_t v78 = v230;
            if ((unint64_t)v230 < v231) {
              goto LABEL_87;
            }
            goto LABEL_100;
          }
          uint64_t v81 = 0;
          float v82 = 3.4028e38;
          do
          {
            float32x4_t v83 = vsubq_f32(*(float32x4_t *)(a4 + 48), *(float32x4_t *)((char *)&v214 + v81));
            float32x4_t v84 = vmulq_f32(v83, v83);
            float v85 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).f32[0]);
            if (v85 < v82) {
              float v82 = v85;
            }
            v81 += 16;
          }
          while (v81 != 128);
          box3dToCentroidSizeAngle(&v214, (uint64_t *)v210);
          *(_OWORD *)&v244.var6.id var1 = v218;
          *(_OWORD *)&v244.var7 = v219;
          long long v245 = v220;
          long long v246 = v221;
          *(float32x4_t *)&v244.id var1 = v214;
          *(_OWORD *)&v244.id var3 = v215;
          *(_OWORD *)&v244.var5.var0 = v216;
          *(_OWORD *)&v244.var5.var2.var0 = v217;
          uint64_t v86 = *(void *)((char *)v210[0] + 12);
          int v87 = *((_DWORD *)v210[0] + 5);
          uint64_t v88 = (float *)operator new(0xCuLL);
          uint64_t v89 = 0;
          float v90 = round(v82 + -1.0);
          float v91 = fminf(fmaxf(v90, 2.0), 4.0);
          long long v181 = v88 + 1;
          long long v183 = v88;
          *(void *)uint64_t v88 = v86;
          *((_DWORD *)v88 + 2) = v87;
          long long v185 = v88 + 2;
          float v92 = 10.0;
          if (@"Screen" == v222) {
            float v92 = 15.0;
          }
          do
          {
            v88[v89] = (float)(v88[v89] * v92) / v91;
            ++v89;
          }
          while (v89 != 3);
          long long v208 = 0;
          int v207 = 0;
          unint64_t v209 = 0;
          std::vector<std::vector<int>>::reserve((uint64_t *)&v207, 6uLL);
          memset(&v241, 0, 24);
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v241, v212, (uint64_t)v213, (v213 - (unsigned char *)v212) >> 2);
          unint64_t v93 = v213;
          int v94 = v212;
          uint64_t v95 = operator new(0x18uLL);
          buf.id var3 = v95 + 3;
          v95[2] = 0x500000003;
          *(_OWORD *)uint64_t v95 = xmmword_237CB6410;
          buf.id var1 = v95;
          *(void *)&buf.var2 = v95 + 3;
          memset(&buf.var4, 0, 24);
          int v96 = (float *)operator new(0x18uLL);
          buf.var5.id var1 = v96 + 6;
          *((void *)v96 + 2) = 0x400000002;
          *(_OWORD *)int v96 = xmmword_237CB6428;
          buf.var4 = v96;
          buf.var5.var0 = v96 + 6;
          memset(&buf.var5.var2, 0, 24);
          unint64_t v97 = operator new(0x18uLL);
          buf.var6.id var1 = (unint64_t)(v97 + 3);
          v97[2] = 0x500000003;
          *(_OWORD *)unint64_t v97 = xmmword_237CB6440;
          buf.var5.var2.var0 = (float *)v97;
          buf.var6.var0 = v97 + 3;
          memset(&buf.var6.var2, 0, 24);
          uint64_t v98 = operator new(0x18uLL);
          *(void *)&buf.var8 = v98 + 3;
          v98[2] = 0x100000000;
          *(_OWORD *)uint64_t v98 = xmmword_237CB6458;
          buf.var6.var2.var0 = (unint64_t)v98;
          buf.var7 = v98 + 3;
          *(void *)&long long v249 = 0;
          long long v248 = 0uLL;
          unint64_t v99 = operator new(0x18uLL);
          *(void *)&long long v249 = v99 + 3;
          v99[2] = 0x400000002;
          *(_OWORD *)unint64_t v99 = xmmword_237CB6470;
          *(void *)&long long v248 = v99;
          *((void *)&v248 + 1) = v99 + 3;
          id v250 = 0;
          long long v251 = 0;
          *((void *)&v249 + 1) = 0;
          uint64_t v100 = operator new(0x18uLL);
          long long v251 = (char *)(v100 + 3);
          void v100[2] = 0x100000000;
          *(_OWORD *)uint64_t v100 = xmmword_237CB6488;
          *((void *)&v249 + 1) = v100;
          id v250 = v100 + 3;
          *(void *)&long long v200 = 0;
          float32x4_t v199 = 0uLL;
          uint64_t v233 = &v199;
          LOBYTE(v234) = 0;
          v199.i64[0] = (uint64_t)operator new(0x90uLL);
          v199.i64[1] = v199.i64[0];
          *(void *)&long long v200 = v199.i64[0] + 144;
          uint64_t v101 = 0;
          unint64_t v102 = v93 - v94;
          v199.i64[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v200, (uint64_t)&buf, (uint64_t)&v252, v199.i64[0]);
          do
          {
            float v103 = *(void **)((char *)&v249 + v101 + 8);
            if (v103)
            {
              *(id *)((char *)&v250 + v101) = v103;
              operator delete(v103);
            }
            v101 -= 24;
          }
          while (v101 != -144);
          long long v260 = xmmword_237CB6280;
          std::unordered_set<int>::unordered_set((uint64_t)&buf, (int *)&v260, 4);
          long long v259 = xmmword_237CB62B0;
          std::unordered_set<int>::unordered_set((uint64_t)&buf.var5.var1, (int *)&v259, 4);
          long long v258 = xmmword_237CB62C0;
          std::unordered_set<int>::unordered_set((uint64_t)&buf.var7, (int *)&v258, 4);
          obuint64_t j = v102;
          uint64_t v234 = 0;
          uint64_t v233 = 0;
          long long v235 = 0;
          long long v236 = &v233;
          LOBYTE(v237) = 0;
          unint64_t v104 = v102 >> 2;
          uint64_t v233 = (float32x4_t *)operator new(0x78uLL);
          uint64_t v234 = (uint64_t)v233;
          long long v235 = &v233[7].i8[8];
          uint64_t v234 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int> const*,std::unordered_set<int> const*,std::unordered_set<int>*>((uint64_t)&v235, (uint64_t)&buf, (uint64_t)&v249 + 8, (uint64_t)v233);
          for (uint64_t i = 80; i != -40; i -= 40)
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&buf + i);
          LOBYTE(v236) = 0;
          std::vector<BOOL>::vector(&buf, 3uLL, (unsigned __int8 *)&v236);
          if ((int)v104 >= 1)
          {
            id var1 = (unsigned int *)v241.var1;
            uint64_t v107 = buf.var1;
            for (uint64_t j = (obj >> 2); j; --j)
            {
              unsigned int v110 = *var1++;
              unsigned int v109 = v110;
              if (v110 <= 5)
              {
                if (((1 << v109) & 3) != 0)
                {
                  uint64_t v111 = 1;
                }
                else
                {
                  if (((1 << v109) & 0x14) != 0)
                  {
                    *v107 |= 2uLL;
                    if (v109 != 3) {
                      continue;
                    }
                  }
                  uint64_t v111 = 4;
                }
                *v107 |= v111;
              }
            }
          }
          unint64_t v112 = 0;
          LODWORD(v260) = 0;
          while (1)
          {
            if (((*(void *)((char *)buf.var1 + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) != 0
              || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v233->i64[5 * v112], (int *)&v260))
            {
              if (++v112 != 3) {
                continue;
              }
              unint64_t v113 = 126 - 2 * __clz((uint64_t)(*(void *)&v241.var2 - (unint64_t)v241.var1) >> 2);
              long long v236 = (float32x4_t **)&v199;
              long long v237 = &v260;
              if (*(id *)&v241.var2 == v241.var1) {
                uint64_t v114 = 0;
              }
              else {
                uint64_t v114 = v113;
              }
              int v115 = v208;
              if ((unint64_t)v208 >= v209)
              {
                uint64_t v116 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v207, (uint64_t)&v241);
              }
              else
              {
                *long long v208 = 0;
                v115[1] = 0;
                v115[2] = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v115, v241.var1, *(uint64_t *)&v241.var2, (uint64_t)(*(void *)&v241.var2 - (unint64_t)v241.var1) >> 2);
                uint64_t v116 = (uint64_t)(v115 + 3);
              }
              long long v208 = (void *)v116;
            }
            unint64_t v112 = 0;
            int v117 = v260;
            LODWORD(v260) = v260 + 1;
            if (v117 >= 5)
            {
              int v118 = v207;
              if (v207 == v208 && v212 != v213)
              {
                if ((unint64_t)v207 >= v209)
                {
                  uint64_t v119 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v207, (uint64_t)&v212);
                }
                else
                {
                  *int v207 = 0;
                  v118[1] = 0;
                  v118[2] = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v118, v212, (uint64_t)v213, (v213 - (unsigned char *)v212) >> 2);
                  uint64_t v119 = (uint64_t)(v118 + 3);
                }
                long long v208 = (void *)v119;
              }
              if (buf.var1) {
                operator delete(buf.var1);
              }
              float obja = v77;
              buf.id var1 = &v233;
              std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              buf.id var1 = &v199;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              if (v241.var1)
              {
                *(void *)&v241.var2 = v241.var1;
                operator delete(v241.var1);
              }
              long long v127 = (int **)v207;
              uint64_t v171 = (int **)v208;
              if (v207 != v208)
              {
                double v128 = v91;
                float v129 = obja;
                do
                {
                  *(_OWORD *)&buf.var6.id var1 = v218;
                  *(_OWORD *)&buf.var7 = v219;
                  long long v248 = v220;
                  long long v249 = v221;
                  *(float32x4_t *)&buf.id var1 = v214;
                  *(_OWORD *)&buf.id var3 = v215;
                  *(_OWORD *)&buf.var5.var0 = v216;
                  *(_OWORD *)&buf.var5.var2.var0 = v217;
                  *(_OWORD *)&v241.var6.id var1 = v218;
                  *(_OWORD *)&v241.var7 = v219;
                  long long v242 = v220;
                  long long v243 = v221;
                  *(float32x4_t *)&v241.id var1 = v214;
                  *(_OWORD *)&v241.id var3 = v215;
                  *(_OWORD *)&v241.var5.var0 = v216;
                  *(_OWORD *)&v241.var5.var2.var0 = v217;
                  float v130 = obja;
                  long long v131 = *v127;
                  uint64_t v132 = v127[1];
                  while (v131 != v132)
                  {
                    int v133 = *v131;
                    unint64_t v134 = v185;
                    if (*v131 >= 2)
                    {
                      BOOL v135 = v133 == 2 || v133 == 4;
                      unint64_t v134 = v183;
                      if (!v135) {
                        unint64_t v134 = v181;
                      }
                    }
                    float v136 = *v134;
                    if (*v134 > 0.0)
                    {
                      float v137 = -v136;
                      do
                      {
                        long long v205 = 0u;
                        long long v206 = 0u;
                        long long v203 = 0u;
                        long long v204 = 0u;
                        long long v201 = 0u;
                        long long v202 = 0u;
                        float32x4_t v199 = 0u;
                        long long v200 = 0u;
                        double v138 = v137 / 100.0 * v128;
                        *(float *)&double v138 = v138;
                        Box3dEnlarge(*(int32x2_t *)&v138, (float32x4_t *)&buf, *v131, &v199);
                        OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v199, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 0);
                        float v139 = OU3DObjectRGBSizeRefiner::ComputeOverlapScore<float>(a1, (void *)(a1 + 296), (uint64_t *)(a1 + 320), (box3d *)&v199);
                        OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v199, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 1);
                        float v140 = v139
                             + (float)(OU3DObjectRGBSizeRefiner::ComputeOverlapScore<unsigned char>(a1, (void *)(a1 + 248), (uint64_t *)(a1 + 320), (box3d *)&v199)* 8.0);
                        if (v140 > v130)
                        {
                          *(_OWORD *)&v241.var6.id var1 = v203;
                          *(_OWORD *)&v241.var7 = v204;
                          long long v242 = v205;
                          long long v243 = v206;
                          *(float32x4_t *)&v241.id var1 = v199;
                          *(_OWORD *)&v241.id var3 = v200;
                          float v130 = v140;
                          *(_OWORD *)&v241.var5.var0 = v201;
                          *(_OWORD *)&v241.var5.var2.var0 = v202;
                        }
                        float v137 = v137 + 1.0;
                      }
                      while (v137 < v136);
                    }
                    OUBox3d buf = v241;
                    long long v248 = v242;
                    long long v249 = v243;
                    ++v131;
                  }
                  if (v130 > v129)
                  {
                    OUBox3d v244 = v241;
                    long long v245 = v242;
                    long long v246 = v243;
                    float v129 = v130;
                  }
                  v127 += 3;
                }
                while (v127 != v171);
              }
              OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
              OUBox3d buf = v244;
              long long v248 = v245;
              long long v249 = v246;
              [v164 addObject:*(void *)(v168 + 224 * v177 + 144)];
              float v37 = 7.0;
              uint64_t v141 = v230;
              if ((unint64_t)v230 >= v231)
              {
                uint64_t v142 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
              }
              else
              {
                OUBox3d::OUBox3d(v230, &buf);
                uint64_t v142 = (OUBox3d *)((char *)v141 + 224);
              }
              long long v230 = v142;

              if (__p) {
                operator delete(__p);
              }
              if (v254)
              {
                long long v255 = v254;
                operator delete(v254);
              }

              buf.id var1 = &v207;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              operator delete(v183);
              if (v210[0])
              {
                v210[1] = v210[0];
                operator delete(v210[0]);
              }
              goto LABEL_102;
            }
          }
        }
        uint64_t v69 = [v170 objectAtIndexedSubscript:v36];
        uint64_t v70 = objc_msgSend(v69, "refined_box_history");
        BOOL v71 = [v70 count] == 0;

        if (v71)
        {
          uint64_t v79 = v230;
          if ((unint64_t)v230 >= v231)
          {
            uint64_t v80 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, (const OUBox3d *)v179);
          }
          else
          {
            OUBox3d::OUBox3d(v230, (const OUBox3d *)v179);
            uint64_t v80 = (OUBox3d *)((char *)v79 + 224);
          }
          long long v230 = v80;
          goto LABEL_106;
        }
        OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
        uint64_t v72 = *(void **)(a1 + 176);
        if (!v72) {
          goto LABEL_33;
        }
        while (1)
        {
          unint64_t v73 = v72[4];
          if ((unint64_t)v222 >= v73) {
            break;
          }
LABEL_32:
          uint64_t v72 = (void *)*v72;
          if (!v72) {
            goto LABEL_33;
          }
        }
        if (v73 < (unint64_t)v222) {
          break;
        }
        uint64_t v123 = v223;
        uint64_t v124 = v224;
        if (v223 != v224)
        {
          while (![*(id *)(v123 + 144) isEqual:*(void *)(v168 + 224 * v177 + 144)])
          {
            v123 += 224;
            if (v123 == v124) {
              goto LABEL_33;
            }
          }
          OUBox3d::operator=((uint64_t)&buf, (long long *)v123);
        }
LABEL_33:
        int64_t v74 = v230;
        if ((unint64_t)v230 >= v231)
        {
          int64_t v75 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
        }
        else
        {
          OUBox3d::OUBox3d(v230, &buf);
          int64_t v75 = (OUBox3d *)((char *)v74 + 224);
        }
        long long v230 = v75;

        if (__p) {
          operator delete(__p);
        }
        if (v254)
        {
          long long v255 = v254;
          operator delete(v254);
        }

LABEL_106:
        unint64_t v36 = v177 + 1;
        if (v177 + 1 == v167)
        {
LABEL_148:
          *(_DWORD *)(a1 + 192) = 0;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
          {
            LOWORD(buf.var1) = 0;
            _os_log_impl(&dword_237C17000, oslog, OS_LOG_TYPE_INFO, "Refine Ends", (uint8_t *)&buf, 2u);
          }

          kdebug_trace();
          std::vector<int>::pointer v144 = (OUVizTool *)kdebug_trace();
          if (v228)
          {
            unint64_t v145 = OUVizTool::Get(v144);
            std::string::basic_string[abi:ne180100]<0>(&buf, "rgb_refine");
            OUVizTool::SaveBoxes((uint64_t)v145, (uint64_t)&buf, &v229);
            if (SHIBYTE(buf.var3) < 0) {
              operator delete(buf.var1);
            }
          }
          boxesToObjects(&v229, @"rawdetection", 1u);
          long long v197 = 0u;
          long long v198 = 0u;
          long long v195 = 0u;
          long long v196 = 0u;
          id objb = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v169 = [objb countByEnumeratingWithState:&v195 objects:v240 count:16];
          if (v169)
          {
            uint64_t v172 = *(void *)v196;
            do
            {
              for (uint64_t k = 0; k != v169; ++k)
              {
                if (*(void *)v196 != v172) {
                  objc_enumerationMutation(objb);
                }
                long long v146 = *(void **)(*((void *)&v195 + 1) + 8 * k);
                long long v191 = 0u;
                long long v192 = 0u;
                long long v193 = 0u;
                long long v194 = 0u;
                id v180 = v170;
                long long v184 = (void *)[v180 countByEnumeratingWithState:&v191 objects:v239 count:16];
                if (v184)
                {
                  uint64_t v182 = *(void *)v192;
                  do
                  {
                    for (uint64_t m = 0; m != v184; uint64_t m = (char *)m + 1)
                    {
                      if (*(void *)v192 != v182) {
                        objc_enumerationMutation(v180);
                      }
                      unint64_t v147 = *(void **)(*((void *)&v191 + 1) + 8 * (void)m);
                      id v148 = [v146 identifier];
                      long long v149 = [v147 identifier];
                      int v150 = [v148 isEqual:v149];

                      if (v150)
                      {
                        long long v189 = 0u;
                        long long v190 = 0u;
                        long long v187 = 0u;
                        long long v188 = 0u;
                        unint64_t v151 = [v147 boxesDict];
                        int v152 = [v151 allKeys];

                        uint64_t v153 = [v152 countByEnumeratingWithState:&v187 objects:v238 count:16];
                        if (v153)
                        {
                          uint64_t v154 = *(void *)v188;
                          do
                          {
                            for (uint64_t n = 0; n != v153; ++n)
                            {
                              if (*(void *)v188 != v154) {
                                objc_enumerationMutation(v152);
                              }
                              uint64_t v156 = *(void **)(*((void *)&v187 + 1) + 8 * n);
                              if (([v156 isEqualToString:@"rawdetection"] & 1) == 0)
                              {
                                long long v249 = 0u;
                                long long v248 = 0u;
                                memset(&buf, 0, sizeof(buf));
                                long long v157 = [v147 boxesDict];
                                long long v158 = [v157 objectForKey:v156];
                                box3dFromNSArray(v158, (uint64_t)&buf);

                                [v146 addBoxesDict:&buf forDictKey:v156];
                              }
                            }
                            uint64_t v153 = [v152 countByEnumeratingWithState:&v187 objects:v238 count:16];
                          }
                          while (v153);
                        }

                        long long v159 = objc_msgSend(v147, "refined_box_history");
                        long long v160 = (void *)[v159 copy];
                        objc_msgSend(v146, "setRefined_box_history:", v160);
                      }
                    }
                    long long v184 = (void *)[v180 countByEnumeratingWithState:&v191 objects:v239 count:16];
                  }
                  while (v184);
                }
              }
              uint64_t v169 = [objb countByEnumeratingWithState:&v195 objects:v240 count:16];
            }
            while (v169);
          }

          id v143 = objb;
          buf.id var1 = &v223;
          std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          goto LABEL_182;
        }
      }
      ++v72;
      goto LABEL_32;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
      OU3DObjectRGBSizeRefiner::RefineObjects(v15);
    }

    id v143 = v170;
LABEL_182:
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v226, v227);
    if (v225) {
      operator delete(v225);
    }
    buf.id var1 = &v229;
    std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.id var1 = v232;
    std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else
  {
    id v143 = v170;
  }

  return v143;
}

void sub_237C9E0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,void *a45)
{
  STACK[0x6A0] = (unint64_t)&STACK[0x380];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a14, (void *)STACK[0x3B8]);
  if (STACK[0x398]) {
    operator delete((void *)STACK[0x398]);
  }
  STACK[0x6A0] = (unint64_t)&STACK[0x3C8];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);
  STACK[0x6A0] = (unint64_t)&STACK[0x3E0];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);

  _Unwind_Resume(a1);
}

uint64_t OU3DObjectRGBSizeRefiner::IsOUFrameValid(OU3DObjectRGBSizeRefiner *this, _OUFrame *a2)
{
  unint64_t v2 = this;
  uint64_t v3 = (__CVBuffer *)[(OU3DObjectRGBSizeRefiner *)v2 sceneColorBuffer];
  if (CVPixelBufferGetDataSize((CVPixelBufferRef)[(OU3DObjectRGBSizeRefiner *)v2 semanticLabelBufferOnWideCamera]))uint64_t v4 = [(OU3DObjectRGBSizeRefiner *)v2 semanticLabelBufferOnWideCamera]; {
  else
  }
    uint64_t v4 = [(OU3DObjectRGBSizeRefiner *)v2 semanticLabelBuffer];
  float32x4_t v5 = (__CVBuffer *)v4;
  size_t Width = CVPixelBufferGetWidth(v3);
  size_t Height = CVPixelBufferGetHeight(v3);
  size_t v8 = CVPixelBufferGetWidth(v5);
  size_t v9 = CVPixelBufferGetHeight(v5);
  if (Width) {
    BOOL v10 = Height == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v13 = !v10 && v8 != 0 && v9 != 0;

  return v13;
}

void sub_237C9E63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL OU3DObjectRGBSizeRefiner::ShouldDrawEdge(uint64_t a1, int a2, int *a3, void *a4, uint64_t a5)
{
  float32x4_t v5 = *(void **)a5;
  float32x4_t v6 = *(void **)(a5 + 8);
  if (*(void **)a5 == v6) {
    return 0;
  }
  unint64_t v8 = *a3;
  unint64_t v7 = a3[1];
  while (*v5 != __PAIR64__(v7, v8) && *v5 != __PAIR64__(v8, v7))
  {
    if (++v5 == v6) {
      return 0;
    }
  }
  return !a2
      || ((*(void *)(*a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0
      || ((*(void *)(*a4 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0;
}

void OU3DObjectRGBSizeRefiner::DrawBoxImage(uint64_t a1, const box3d *a2, uint64_t a3, const simd_float3x3 *a4, simd_float4x4 *a5, int a6)
{
  bzero(*(void **)(a1 + 320), 0xC000uLL);
  *(double *)v13.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v12, a4, a5);
  v44.columns[0] = v13;
  v44.columns[1] = v14;
  v44.columns[2] = v15;
  v44.columns[3] = v16;
  OU3DObjectRGBSizeRefiner::ProjectToImage((OU3DObjectRGBSizeRefiner *)a1, &v44, a2, (uint64_t)v40);
  if (!v42) {
    goto LABEL_25;
  }
  simd_float4x4 v45 = __invert_f4(*a5);
  float32x4_t v39 = (float32x4_t)v45.columns[3];
  OU3DObjectRGBSizeRefiner::GetCornerVisibility((uint64_t)a2, &v39, v37);
  std::vector<BOOL>::vector(&v36, (uint64_t)v37);
  std::vector<BOOL>::vector(v35, (uint64_t)&v38);
  unsigned __int8 v33 = 0;
  std::vector<BOOL>::vector(&__p, 8uLL, &v33);
  unint64_t v17 = 0;
  float v18 = (void *)(a1 + 320);
  int v19 = v41;
  int v20 = (char *)__p;
  int v21 = v36;
  do
  {
    unint64_t v22 = v17 >> 6;
    uint64_t v23 = 1 << v17;
    if ((v19[v17 >> 6] & (1 << v17)) != 0)
    {
      float32x2_t v24 = (uint64_t *)&v20[8 * v22];
LABEL_5:
      uint64_t v25 = *v24 | v23;
      goto LABEL_8;
    }
    uint64_t v26 = v21[v22];
    float32x2_t v24 = (uint64_t *)&v20[8 * v22];
    if ((v26 & v23) == 0) {
      goto LABEL_5;
    }
    uint64_t v25 = *v24 & ~v23;
LABEL_8:
    *float32x2_t v24 = v25;
    ++v17;
  }
  while (v17 != 8);
  uint64_t ShouldDrawEdge = (uint64_t)operator new(0x60uLL);
  uint32x2_t v28 = (char *)ShouldDrawEdge;
  uint64_t v29 = 0;
  *(_OWORD *)uint64_t ShouldDrawEdge = xmmword_237CB62D0;
  *(_OWORD *)(ShouldDrawEdge + 16) = xmmword_237CB62E0;
  *(_OWORD *)(ShouldDrawEdge + 32) = xmmword_237CB62F0;
  *(_OWORD *)(ShouldDrawEdge + 48) = xmmword_237CB6300;
  *(_OWORD *)(ShouldDrawEdge + 64) = xmmword_237CB6160;
  *(_OWORD *)(ShouldDrawEdge + 80) = xmmword_237CB6170;
  do
  {
    unsigned int v30 = (int *)&v28[v29];
    unint64_t v31 = *(int *)&v28[v29];
    if (((*(void *)((char *)__p + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
      unint64_t v32 = v30[1];
      if (((*(void *)((char *)__p + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        uint64_t ShouldDrawEdge = OU3DObjectRGBSizeRefiner::ShouldDrawEdge(ShouldDrawEdge, a6, v30, v35, a3);
        if (ShouldDrawEdge) {
          OU3DObjectRGBSizeRefiner::DrawEdge(*(float32x2_t *)((char *)v40[0] + 8 * v31), *(float32x2_t *)((char *)v40[0] + 8 * v32), ShouldDrawEdge, v18);
        }
      }
    }
    v29 += 8;
  }
  while (v29 != 96);
  operator delete(v28);
  if (__p) {
    operator delete(__p);
  }
  if (v35[0]) {
    operator delete(v35[0]);
  }
  if (v36) {
    operator delete(v36);
  }
  if (v38) {
    operator delete(v38);
  }
  if (v37[0]) {
    operator delete(v37[0]);
  }
LABEL_25:
  if (v43) {
    operator delete(v43);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_237C9E964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo((OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *)&a19);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a27);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::DrawEdge(float32x2_t a1, float32x2_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    float32x2_t v4 = vsub_f32(a1, a2);
    int v5 = (int)sqrtf(vaddv_f32(vmul_f32(v4, v4)));
    if ((v5 & 0x80000000) == 0)
    {
      unint64_t v6 = 0;
      int v7 = 0;
      float32x2_t v8 = vsub_f32(a2, a1);
      float32x2_t v9 = vmul_f32(v8, v8);
      v9.i32[0] = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1)).u32[0];
      float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
      float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
      float32x2_t v12 = vmul_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
      int v13 = v5 + 1;
      do
      {
        float32x2_t v14 = vmla_n_f32(a1, v12, (float)v7);
        if ((int)v14.f32[0] <= 0xFF)
        {
          unint64_t v15 = ((int)v14.f32[1] << 8) + (unint64_t)(int)v14.f32[0];
          if ((int)v14.f32[1] <= 0xBF && v6 != v15)
          {
            *(unsigned char *)(*a4 + v15) = -1;
            unint64_t v6 = ((int)v14.f32[1] << 8) + (unint64_t)(int)v14.f32[0];
          }
        }
        ++v7;
      }
      while (v13 != v7);
    }
  }
}

id OU3DObjectRGBSizeRefiner::GenerateEmptyMTLTexture(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  void v16[5] = *MEMORY[0x263EF8340];
  v15[0] = *MEMORY[0x263F0EF50];
  unint64_t v6 = [NSNumber numberWithInt:*a2];
  v16[0] = v6;
  v15[1] = *MEMORY[0x263F0EDF8];
  int v7 = [NSNumber numberWithInt:a2[1]];
  uint64_t v8 = *MEMORY[0x263F0ED48];
  v16[1] = v7;
  v16[2] = &unk_26EADC980;
  uint64_t v9 = *MEMORY[0x263F0EE48];
  _OWORD v15[2] = v8;
  v15[3] = v9;
  v15[4] = *MEMORY[0x263F0EE38];
  void v16[3] = &unk_26EADC998;
  v16[4] = &unk_26EADC9B0;
  CFDictionaryRef v10 = [NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:5];

  IOSurfaceRef v11 = IOSurfaceCreate(v10);
  float32x2_t v12 = [MEMORY[0x263F12A50] texture2DDescriptorWithPixelFormat:a3 width:(int)*a2 height:(int)a2[1] mipmapped:0];
  [v12 setUsage:3];
  int v13 = (void *)[*(id *)(a1 + 32) newTextureWithDescriptor:v12 iosurface:v11 plane:0];
  CFRelease(v11);

  return v13;
}

void sub_237C9EC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  float32x2_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    float32x2_t v12 = &v7[v11];
    int v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      float32x2_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *_ZNSt3__135__uninitialized_allocator_copy_implB8ne180100INS_9allocatorINS_6vectorIDv2_iNS1_IS3_EEEEEEPKS5_S8_PS5_EET2_RT_T0_T1_SA_(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  float32x2_t v4 = a4;
  size_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      _ZNSt3__16vectorIDv2_iNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      float32x2_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorINS_6vectorIDv2_iNS2_IS4_EEEEEEPS6_EEED2B8ne180100Ev((uint64_t)v8);
  return v4;
}

void sub_237C9EE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *_ZNSt3__16vectorIDv2_iNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_237C9EEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorINS_6vectorIDv2_iNS2_IS4_EEEEEEPS6_EEED2B8ne180100Ev(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,anonymous namespace'::RefinePriority *,false>(int *a1, int *a2, uint64_t a3, char a4)
{
LABEL_1:
  uint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v11 = (char *)a2 - (char *)i;
    unint64_t v12 = ((char *)a2 - (char *)i) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          float v57 = a2 - 4;
          int v58 = *(a2 - 4);
          BOOL v59 = v58 <= *i;
          if (v58 == *i)
          {
            int v60 = *(a2 - 3);
            int v61 = i[1];
            BOOL v59 = v60 <= v61;
            if (v60 == v61) {
              BOOL v59 = *(a2 - 2) <= i[2];
            }
          }
          if (!v59)
          {
            long long v144 = *(_OWORD *)i;
            *(_OWORD *)uint64_t i = *(_OWORD *)v57;
            *(_OWORD *)float v57 = v144;
          }
          break;
        case 3uLL:
          break;
        case 4uLL:
          break;
        case 5uLL:
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (i == a2) {
        return;
      }
      int64_t v79 = (v12 - 2) >> 1;
      int64_t v80 = v79;
      while (1)
      {
        int64_t v81 = v80;
        if (v79 >= v80)
        {
          uint64_t v82 = (2 * v80) | 1;
          float32x4_t v83 = &i[4 * v82];
          if (2 * v81 + 2 < (uint64_t)v12)
          {
            int v84 = v83[4];
            BOOL v85 = *v83 <= v84;
            if (*v83 == v84)
            {
              uint64_t v86 = &i[4 * v82];
              int v87 = v86[1];
              int v88 = v83[5];
              BOOL v85 = v87 <= v88;
              if (v87 == v88) {
                BOOL v85 = v86[2] <= v83[6];
              }
            }
            if (!v85)
            {
              v83 += 4;
              uint64_t v82 = 2 * v81 + 2;
            }
          }
          uint64_t v89 = &i[4 * v81];
          int v90 = *v89;
          if (*v83 == *v89)
          {
            int v91 = v83[1];
            float v92 = &i[4 * v81];
            int v93 = v92[1];
            BOOL v94 = v91 <= v93;
            if (v91 == v93)
            {
              int v93 = v83[1];
              BOOL v94 = v83[2] <= v92[2];
            }
            if (v94) {
              goto LABEL_170;
            }
          }
          else if (*v83 <= v90)
          {
            int v93 = v89[1];
LABEL_170:
            uint64_t v95 = *((void *)v89 + 1);
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v83;
            if (v79 >= v82)
            {
              while (1)
              {
                int v96 = v83;
                uint64_t v97 = 2 * v82;
                uint64_t v82 = (2 * v82) | 1;
                float32x4_t v83 = &i[4 * v82];
                uint64_t v98 = v97 + 2;
                if (v98 < (uint64_t)v12)
                {
                  int v99 = v83[4];
                  BOOL v100 = *v83 <= v99;
                  if (*v83 == v99)
                  {
                    uint64_t v101 = &i[4 * v82];
                    int v102 = v101[1];
                    int v103 = v83[5];
                    BOOL v100 = v102 <= v103;
                    if (v102 == v103) {
                      BOOL v100 = v101[2] <= v83[6];
                    }
                  }
                  if (!v100)
                  {
                    v83 += 4;
                    uint64_t v82 = v98;
                  }
                }
                BOOL v104 = *v83 <= v90;
                if (*v83 == v90)
                {
                  int v105 = v83[1];
                  BOOL v104 = v105 <= v93;
                  if (v105 == v93) {
                    BOOL v104 = v83[2] <= (int)v95;
                  }
                }
                if (!v104) {
                  break;
                }
                *(_OWORD *)int v96 = *(_OWORD *)v83;
                if (v79 < v82) {
                  goto LABEL_183;
                }
              }
              float32x4_t v83 = v96;
            }
LABEL_183:
            *float32x4_t v83 = v90;
            v83[1] = v93;
            *((void *)v83 + 1) = v95;
          }
        }
        int64_t v80 = v81 - 1;
        if (!v81)
        {
          uint64_t v106 = (unint64_t)v11 >> 4;
          while (1)
          {
            uint64_t v107 = 0;
            long long v145 = *(_OWORD *)i;
            uint64_t v108 = i;
            do
            {
              unsigned int v109 = v108;
              uint64_t v110 = v107 + 1;
              v108 += 4 * v107 + 4;
              uint64_t v111 = 2 * v107;
              uint64_t v107 = (2 * v107) | 1;
              uint64_t v112 = v111 + 2;
              if (v112 < v106)
              {
                int v113 = v108[4];
                BOOL v114 = *v108 <= v113;
                if (*v108 == v113)
                {
                  int v115 = &v109[4 * v110];
                  int v116 = v115[1];
                  int v117 = v108[5];
                  BOOL v114 = v116 <= v117;
                  if (v116 == v117) {
                    BOOL v114 = v115[2] <= v108[6];
                  }
                }
                if (!v114)
                {
                  v108 += 4;
                  uint64_t v107 = v112;
                }
              }
              *(_OWORD *)unsigned int v109 = *(_OWORD *)v108;
            }
            while (v107 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
            a2 -= 4;
            if (v108 == a2)
            {
              *(_OWORD *)uint64_t v108 = v145;
            }
            else
            {
              *(_OWORD *)uint64_t v108 = *(_OWORD *)a2;
              *(_OWORD *)a2 = v145;
              uint64_t v118 = (char *)v108 - (char *)i + 16;
              if (v118 >= 17)
              {
                unint64_t v119 = ((unint64_t)v118 >> 4) - 2;
                unint64_t v120 = v119 >> 1;
                unint64_t v121 = &i[4 * (v119 >> 1)];
                int v122 = *v108;
                if (*v121 == *v108)
                {
                  int v123 = v121[1];
                  int v124 = v108[1];
                  BOOL v125 = v123 <= v124;
                  if (v123 == v124)
                  {
                    int v124 = v121[1];
                    BOOL v125 = i[4 * v120 + 2] <= v108[2];
                  }
                  if (!v125) {
                    goto LABEL_205;
                  }
                }
                else if (*v121 > v122)
                {
                  int v124 = v108[1];
LABEL_205:
                  uint64_t v126 = *((void *)v108 + 1);
                  *(_OWORD *)uint64_t v108 = *(_OWORD *)v121;
                  if (v119 >= 2)
                  {
                    while (1)
                    {
                      unint64_t v128 = v120 - 1;
                      unint64_t v120 = (v120 - 1) >> 1;
                      long long v127 = &i[4 * v120];
                      BOOL v129 = *v127 <= v122;
                      if (*v127 == v122)
                      {
                        int v130 = v127[1];
                        BOOL v129 = v130 <= v124;
                        if (v130 == v124) {
                          BOOL v129 = i[4 * v120 + 2] <= (int)v126;
                        }
                      }
                      if (v129) {
                        break;
                      }
                      *(_OWORD *)unint64_t v121 = *(_OWORD *)v127;
                      unint64_t v121 = &i[4 * v120];
                      if (v128 <= 1) {
                        goto LABEL_212;
                      }
                    }
                  }
                  long long v127 = v121;
LABEL_212:
                  *long long v127 = v122;
                  v127[1] = v124;
                  *((void *)v127 + 1) = v126;
                }
              }
            }
            BOOL v23 = v106-- <= 2;
            if (v23) {
              return;
            }
          }
        }
      }
    }
    unint64_t v13 = v12 >> 1;
    float32x2_t v14 = &i[4 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x801)
    {
      long long v141 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v14;
      *(_OWORD *)float32x2_t v14 = v141;
    }
    else
    {
    }
    --a3;
    int v15 = *a1;
    if (a4) {
      goto LABEL_17;
    }
    int v16 = *(a1 - 4);
    if (v16 == v15)
    {
      int v17 = *(a1 - 3);
      int v18 = a1[1];
      if (v17 != v18)
      {
        if (v17 <= v18) {
          goto LABEL_65;
        }
        goto LABEL_17;
      }
      if (*(a1 - 2) > a1[2]) {
        goto LABEL_17;
      }
      int v18 = *(a1 - 3);
LABEL_65:
      uint64_t v39 = *((void *)a1 + 1);
      int v40 = *(a2 - 4);
      BOOL v41 = v15 <= v40;
      if (v15 == v40)
      {
        int v42 = *(a2 - 3);
        BOOL v41 = v18 <= v42;
        if (v18 == v42) {
          BOOL v41 = (int)v39 <= *(a2 - 2);
        }
      }
      if (v41)
      {
        for (uint64_t i = a1 + 4; i < a2; i += 4)
        {
          BOOL v45 = v15 <= *i;
          if (v15 == *i)
          {
            int v46 = i[1];
            BOOL v45 = v18 <= v46;
            if (v18 == v46) {
              BOOL v45 = (int)v39 <= i[2];
            }
          }
          if (!v45) {
            break;
          }
        }
      }
      else
      {
        for (uint64_t i = a1 + 4; ; i += 4)
        {
          BOOL v43 = v15 <= *i;
          if (v15 == *i)
          {
            int v44 = i[1];
            BOOL v43 = v18 <= v44;
            if (v18 == v44) {
              BOOL v43 = (int)v39 <= i[2];
            }
          }
          if (!v43) {
            break;
          }
        }
      }
      uint64_t j = a2;
      if (i < a2)
      {
        for (uint64_t j = a2 - 4; ; j -= 4)
        {
          BOOL v48 = v15 <= v40;
          if (v15 == v40)
          {
            int v49 = j[1];
            BOOL v48 = v18 <= v49;
            if (v18 == v49) {
              BOOL v48 = (int)v39 <= j[2];
            }
          }
          if (v48) {
            break;
          }
          int v50 = *(j - 4);
          int v40 = v50;
        }
      }
      while (i < j)
      {
        long long v143 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = *(_OWORD *)j;
        *(_OWORD *)uint64_t j = v143;
        do
        {
          int v51 = i[4];
          i += 4;
          BOOL v52 = v15 <= v51;
          if (v15 == v51)
          {
            int v53 = i[1];
            BOOL v52 = v18 <= v53;
            if (v18 == v53) {
              BOOL v52 = (int)v39 <= i[2];
            }
          }
        }
        while (v52);
        do
        {
          int v54 = *(j - 4);
          j -= 4;
          BOOL v55 = v15 <= v54;
          if (v15 == v54)
          {
            int v56 = j[1];
            BOOL v55 = v18 <= v56;
            if (v18 == v56) {
              BOOL v55 = (int)v39 <= j[2];
            }
          }
        }
        while (!v55);
      }
      BOOL v4 = i - 4 >= a1;
      BOOL v5 = i - 4 == a1;
      if (i - 4 != a1) {
        *(_OWORD *)a1 = *((_OWORD *)i - 1);
      }
      a4 = 0;
      *(i - 4) = v15;
      *(i - 3) = v18;
      *((void *)i - 1) = v39;
    }
    else
    {
      if (v16 <= v15)
      {
        int v18 = a1[1];
        goto LABEL_65;
      }
LABEL_17:
      uint64_t v19 = 0;
      int v20 = a1[1];
      uint64_t v21 = *((void *)a1 + 1);
      while (1)
      {
        int v22 = a1[v19 + 4];
        BOOL v23 = v22 <= v15;
        if (v22 == v15)
        {
          int v24 = a1[v19 + 5];
          BOOL v23 = v24 <= v20;
          if (v24 == v20) {
            BOOL v23 = a1[v19 + 6] <= (int)v21;
          }
        }
        if (v23) {
          break;
        }
        v19 += 4;
      }
      unint64_t v25 = (unint64_t)&a1[v19 + 4];
      uint64_t k = a2 - 4;
      if (v19 * 4)
      {
        while (1)
        {
          BOOL v27 = *k <= v15;
          if (*k == v15)
          {
            int v28 = k[1];
            BOOL v27 = v28 <= v20;
            if (v28 == v20) {
              BOOL v27 = k[2] <= (int)v21;
            }
          }
          if (!v27) {
            break;
          }
          k -= 4;
        }
      }
      else
      {
        uint64_t k = a2;
        if (v25 < (unint64_t)a2)
        {
          for (uint64_t k = a2 - 4; ; k -= 4)
          {
            if (*k == v15)
            {
              int v29 = k[1];
              if (v29 == v20)
              {
                if (v25 >= (unint64_t)k || k[2] > (int)v21) {
                  break;
                }
              }
              else if (v25 >= (unint64_t)k || v29 > v20)
              {
                break;
              }
            }
            else if (*k > v15 || v25 >= (unint64_t)k)
            {
              break;
            }
          }
        }
      }
      uint64_t i = (int *)v25;
      if (v25 < (unint64_t)k)
      {
        unint64_t v31 = k;
        do
        {
          long long v142 = *(_OWORD *)i;
          *(_OWORD *)uint64_t i = *(_OWORD *)v31;
          *(_OWORD *)unint64_t v31 = v142;
          do
          {
            int v32 = i[4];
            i += 4;
            BOOL v33 = v32 <= v15;
            if (v32 == v15)
            {
              int v34 = i[1];
              BOOL v33 = v34 <= v20;
              if (v34 == v20) {
                BOOL v33 = i[2] <= (int)v21;
              }
            }
          }
          while (!v33);
          do
          {
            int v35 = *(v31 - 4);
            v31 -= 4;
            BOOL v36 = v35 <= v15;
            if (v35 == v15)
            {
              int v37 = v31[1];
              BOOL v36 = v37 <= v20;
              if (v37 == v20) {
                BOOL v36 = v31[2] <= (int)v21;
              }
            }
          }
          while (v36);
        }
        while (i < v31);
      }
      if (i - 4 != a1) {
        *(_OWORD *)a1 = *((_OWORD *)i - 1);
      }
      *(i - 4) = v15;
      *(i - 3) = v20;
      *((void *)i - 1) = v21;
      if (v25 < (unint64_t)k)
      {
LABEL_64:
        a4 = 0;
      }
      else
      {
        {
          a2 = i - 4;
          if (v38) {
            return;
          }
          goto LABEL_1;
        }
        if (!v38) {
          goto LABEL_64;
        }
      }
    }
  }
  uint64_t v62 = i + 4;
  BOOL v64 = i == a2 || v62 == a2;
  if ((a4 & 1) == 0)
  {
    if (v64) {
      return;
    }
    while (1)
    {
      long long v131 = a1;
      a1 = v62;
      int v132 = v131[4];
      if (v132 == *v131) {
        break;
      }
      if (v132 > *v131)
      {
        int v133 = v131[5];
LABEL_225:
        uint64_t v136 = *((void *)v131 + 3);
        do
        {
          float v137 = v131;
          *((_OWORD *)v131 + 1) = *(_OWORD *)v131;
          int v138 = *(v131 - 4);
          v131 -= 4;
          BOOL v139 = v132 <= v138;
          if (v132 == v138)
          {
            int v140 = *(v137 - 3);
            BOOL v139 = v133 <= v140;
            if (v133 == v140) {
              BOOL v139 = (int)v136 <= *(v137 - 2);
            }
          }
        }
        while (!v139);
        *float v137 = v132;
        v137[1] = v133;
        *((void *)v137 + 1) = v136;
      }
LABEL_232:
      uint64_t v62 = a1 + 4;
      if (a1 + 4 == a2) {
        return;
      }
    }
    int v133 = v131[5];
    int v134 = v131[1];
    BOOL v135 = v133 <= v134;
    if (v133 == v134) {
      BOOL v135 = v131[6] <= v131[2];
    }
    if (v135) {
      goto LABEL_232;
    }
    goto LABEL_225;
  }
  if (v64) {
    return;
  }
  uint64_t v65 = 0;
  BOOL v66 = i;
  while (2)
  {
    uint64_t v67 = v66;
    BOOL v66 = v62;
    int v68 = v67[4];
    if (v68 == *v67)
    {
      int v69 = v67[5];
      int v70 = v67[1];
      BOOL v71 = v69 <= v70;
      if (v69 == v70) {
        BOOL v71 = v67[6] <= v67[2];
      }
      if (v71) {
        goto LABEL_152;
      }
    }
    else
    {
      if (v68 <= *v67) {
        goto LABEL_152;
      }
      int v69 = v67[5];
    }
    uint64_t v72 = *((void *)v67 + 3);
    *(_OWORD *)BOOL v66 = *(_OWORD *)v67;
    unint64_t v73 = i;
    if (v67 == i) {
      goto LABEL_151;
    }
    uint64_t v74 = v65;
    while (2)
    {
      int64_t v75 = (_OWORD *)((char *)i + v74);
      int v76 = *(int *)((char *)i + v74 - 16);
      BOOL v77 = v68 <= v76;
      if (v68 != v76)
      {
LABEL_144:
        if (v77)
        {
          unint64_t v73 = v67;
          goto LABEL_151;
        }
        goto LABEL_148;
      }
      int v78 = *((_DWORD *)v75 - 3);
      if (v69 == v78)
      {
        BOOL v77 = (int)v72 <= *(int *)((char *)i + v74 - 8);
        goto LABEL_144;
      }
      if (v69 > v78)
      {
LABEL_148:
        v67 -= 4;
        *int64_t v75 = *(_OWORD *)((char *)i + v74 - 16);
        v74 -= 16;
        if (!v74)
        {
          unint64_t v73 = i;
          goto LABEL_151;
        }
        continue;
      }
      break;
    }
    unint64_t v73 = (int *)((char *)i + v74);
LABEL_151:
    int *v73 = v68;
    v73[1] = v69;
    *((void *)v73 + 1) = v72;
LABEL_152:
    uint64_t v62 = v66 + 4;
    v65 += 16;
    if (v66 + 4 != a2) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,anonymous namespace'::RefinePriority *,0>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  BOOL v11 = *a5 <= *a4;
  if (*a5 == *a4)
  {
    int v12 = a5[1];
    int v13 = a4[1];
    BOOL v11 = v12 <= v13;
    if (v12 == v13) {
      BOOL v11 = a5[2] <= a4[2];
    }
  }
  if (!v11)
  {
    __n128 result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    BOOL v14 = *a4 <= *a3;
    if (*a4 == *a3)
    {
      int v15 = a4[1];
      int v16 = a3[1];
      BOOL v14 = v15 <= v16;
      if (v15 == v16) {
        BOOL v14 = a4[2] <= a3[2];
      }
    }
    if (!v14)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      BOOL v17 = *a3 <= *a2;
      if (*a3 == *a2)
      {
        int v18 = a3[1];
        int v19 = a2[1];
        BOOL v17 = v18 <= v19;
        if (v18 == v19) {
          BOOL v17 = a3[2] <= a2[2];
        }
      }
      if (!v17)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        BOOL v20 = *a2 <= *a1;
        if (*a2 == *a1)
        {
          int v21 = a2[1];
          int v22 = a1[1];
          BOOL v20 = v21 <= v22;
          if (v21 == v22) {
            BOOL v20 = a2[2] <= a1[2];
          }
        }
        if (!v20)
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,anonymous namespace'::RefinePriority *>(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  BOOL v4 = *a2 <= *result;
  if (*a2 == *result)
  {
    int v5 = a2[1];
    int v6 = result[1];
    BOOL v4 = v5 <= v6;
    if (v5 == v6) {
      BOOL v4 = a2[2] <= result[2];
    }
  }
  if (v4)
  {
    BOOL v11 = *a3 <= v3;
    if (*a3 == v3)
    {
      int v12 = a3[1];
      int v13 = a2[1];
      BOOL v11 = v12 <= v13;
      if (v12 == v13) {
        BOOL v11 = a3[2] <= a2[2];
      }
    }
    if (!v11)
    {
      long long v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      BOOL v15 = *a2 <= *result;
      if (*a2 == *result)
      {
        int v16 = a2[1];
        int v17 = result[1];
        BOOL v15 = v16 <= v17;
        if (v16 == v17) {
          BOOL v15 = a2[2] <= result[2];
        }
      }
      if (!v15)
      {
        long long v18 = *(_OWORD *)result;
        *(_OWORD *)__n128 result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v18;
      }
    }
  }
  else
  {
    BOOL v7 = *a3 <= v3;
    if (*a3 == v3)
    {
      int v8 = a3[1];
      int v9 = a2[1];
      BOOL v7 = v8 <= v9;
      if (v8 == v9) {
        BOOL v7 = a3[2] <= a2[2];
      }
    }
    if (!v7)
    {
      long long v10 = *(_OWORD *)result;
      *(_OWORD *)__n128 result = *(_OWORD *)a3;
LABEL_24:
      *(_OWORD *)a3 = v10;
      return result;
    }
    long long v19 = *(_OWORD *)result;
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    BOOL v20 = *a3 <= *a2;
    if (*a3 == *a2)
    {
      int v21 = a3[1];
      int v22 = a2[1];
      BOOL v20 = v21 <= v22;
      if (v21 == v22) {
        BOOL v20 = a3[2] <= a2[2];
      }
    }
    if (!v20)
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_24;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,anonymous namespace'::RefinePriority *>(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 4;
      int v7 = *(a2 - 4);
      BOOL v8 = v7 <= *a1;
      if (v7 == *a1)
      {
        int v9 = *(a2 - 3);
        int v10 = a1[1];
        BOOL v8 = v9 <= v10;
        if (v9 == v10) {
          BOOL v8 = *(a2 - 2) <= a1[2];
        }
      }
      if (!v8)
      {
        long long v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)int v6 = v11;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      int v12 = a1 + 8;
      int v13 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  do
  {
    int v16 = *v13;
    if (*v13 == *v12)
    {
      int v17 = v13[1];
      int v18 = v12[1];
      if (v17 == v18)
      {
        if (v13[2] <= v12[2]) {
          goto LABEL_27;
        }
      }
      else if (v17 <= v18)
      {
        goto LABEL_27;
      }
    }
    else
    {
      if (v16 <= *v12) {
        goto LABEL_27;
      }
      int v17 = v13[1];
    }
    uint64_t v19 = *((void *)v13 + 1);
    *(_OWORD *)int v13 = *(_OWORD *)v12;
    uint64_t v20 = (uint64_t)a1;
    if (v12 == a1) {
      goto LABEL_26;
    }
    uint64_t v21 = v14;
    while (1)
    {
      int v22 = *(int *)((char *)a1 + v21 + 16);
      BOOL v23 = v16 <= v22;
      if (v16 == v22)
      {
        int v24 = *(int *)((char *)a1 + v21 + 20);
        BOOL v23 = v17 <= v24;
        if (v17 == v24)
        {
          if ((int)v19 <= *(int *)((char *)a1 + v21 + 24))
          {
            uint64_t v20 = (uint64_t)a1 + v21 + 32;
            goto LABEL_26;
          }
          goto LABEL_23;
        }
      }
      if (v23) {
        break;
      }
LABEL_23:
      v12 -= 4;
      *(_OWORD *)((char *)a1 + v21 + 32) = *(_OWORD *)((char *)a1 + v21 + 16);
      v21 -= 16;
      if (v21 == -32)
      {
        uint64_t v20 = (uint64_t)a1;
        goto LABEL_26;
      }
    }
    uint64_t v20 = (uint64_t)v12;
LABEL_26:
    *(_DWORD *)uint64_t v20 = v16;
    *(_DWORD *)(v20 + 4) = v17;
    *(void *)(v20 + 8) = v19;
    if (++v15 == 8) {
      return v13 + 4 == a2;
    }
LABEL_27:
    int v12 = v13;
    v14 += 16;
    v13 += 4;
  }
  while (v13 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,anonymous namespace'::RefinePriority *>(int *a1, int *a2, int *a3, int *a4)
{
  BOOL v9 = *a4 <= *a3;
  if (*a4 == *a3)
  {
    int v10 = a4[1];
    int v11 = a3[1];
    BOOL v9 = v10 <= v11;
    if (v10 == v11) {
      BOOL v9 = a4[2] <= a3[2];
    }
  }
  if (!v9)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    BOOL v12 = *a3 <= *a2;
    if (*a3 == *a2)
    {
      int v13 = a3[1];
      int v14 = a2[1];
      BOOL v12 = v13 <= v14;
      if (v13 == v14) {
        BOOL v12 = a3[2] <= a2[2];
      }
    }
    if (!v12)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      BOOL v15 = *a2 <= *a1;
      if (*a2 == *a1)
      {
        int v16 = a2[1];
        int v17 = a1[1];
        BOOL v15 = v16 <= v17;
        if (v16 == v17) {
          BOOL v15 = a2[2] <= a1[2];
        }
      }
      if (!v15)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_237CA002C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int> const*,std::unordered_set<int> const*,std::unordered_set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::unordered_set<int>::unordered_set(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_237CA00A0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 40;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_237CA0124(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int v11 = (int *)result;
  while (2)
  {
    long long v192 = a2 - 1;
    BOOL v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v97 = 0;
                int v98 = 0;
                int v99 = 0;
                int v100 = *(a2 - 1);
                int v101 = *v12;
                do
                {
                  int v102 = *(_DWORD *)(*(void *)(**a3 + 24 * *(int *)a3[1]) + 4 * v97);
                  if (v102 == v100) {
                    int v99 = v97;
                  }
                  if (v102 == v101) {
                    int v98 = v97;
                  }
                  ++v97;
                }
                while (v97 != 6);
                if (v99 < v98)
                {
                  int *v12 = v100;
                  *(a2 - 1) = v101;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                int v103 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  BOOL v104 = a3[1];
                  uint64_t v105 = **a3;
                  uint64_t v106 = v12;
                  do
                  {
                    uint64_t v107 = 0;
                    int v108 = 0;
                    int v109 = 0;
                    uint64_t v110 = v106;
                    uint64_t v106 = v103;
                    int v112 = *v110;
                    int v111 = v110[1];
                    uint64_t result = *(void *)(v105 + 24 * *(int *)v104);
                    do
                    {
                      int v113 = *(_DWORD *)(result + 4 * v107);
                      if (v113 == v111) {
                        int v109 = v107;
                      }
                      if (v113 == v112) {
                        int v108 = v107;
                      }
                      ++v107;
                    }
                    while (v107 != 6);
                    if (v109 < v108)
                    {
                      BOOL v114 = v106;
                      while (1)
                      {
                        *BOOL v114 = v112;
                        if (v110 == v12) {
                          break;
                        }
                        BOOL v114 = v110;
                        uint64_t result = 0;
                        int v115 = 0;
                        int v116 = 0;
                        int v117 = *--v110;
                        int v112 = v117;
                        do
                        {
                          int v118 = *(_DWORD *)(*(void *)(v105 + 24 * *(int *)v104) + 4 * result);
                          if (v118 == v111) {
                            int v116 = result;
                          }
                          if (v118 == v112) {
                            int v115 = result;
                          }
                          ++result;
                        }
                        while (result != 6);
                        if (v116 >= v115) {
                          goto LABEL_165;
                        }
                      }
                      BOOL v114 = v12;
LABEL_165:
                      *BOOL v114 = v111;
                    }
                    int v103 = v106 + 1;
                  }
                  while (v106 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v177 = v12 + 1;
              if (v12 + 1 != a2)
              {
                long long v178 = a3[1];
                uint64_t v179 = **a3;
                do
                {
                  uint64_t v180 = 0;
                  int v181 = 0;
                  int v182 = 0;
                  long long v183 = v11;
                  int v11 = v177;
                  int v185 = *v183;
                  int v184 = v183[1];
                  do
                  {
                    uint64_t result = *(unsigned int *)(*(void *)(v179 + 24 * *(int *)v178) + 4 * v180);
                    if (result == v184) {
                      int v182 = v180;
                    }
                    if (result == v185) {
                      int v181 = v180;
                    }
                    ++v180;
                  }
                  while (v180 != 6);
                  if (v182 < v181)
                  {
                    std::vector<int> v186 = v11;
                    do
                    {
                      uint64_t v187 = 0;
                      int v188 = 0;
                      int v189 = 0;
                      *std::vector<int> v186 = v185;
                      std::vector<int> v186 = v183;
                      int v190 = *--v183;
                      int v185 = v190;
                      uint64_t result = *(void *)(v179 + 24 * *(int *)v178);
                      do
                      {
                        int v191 = *(_DWORD *)(result + 4 * v187);
                        if (v191 == v184) {
                          int v189 = v187;
                        }
                        if (v191 == v185) {
                          int v188 = v187;
                        }
                        ++v187;
                      }
                      while (v187 != 6);
                    }
                    while (v189 < v188);
                    *std::vector<int> v186 = v184;
                  }
                  uint64_t v177 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v119 = (v14 - 2) >> 1;
              unint64_t v120 = *a3;
              unint64_t v121 = a3[1];
              int64_t v122 = v119;
              do
              {
                int64_t v123 = v122;
                if (v119 >= v122)
                {
                  uint64_t v124 = (2 * v122) | 1;
                  BOOL v125 = &v12[v124];
                  if (2 * v123 + 2 < (uint64_t)v14)
                  {
                    uint64_t v126 = 0;
                    int v127 = 0;
                    int v128 = 0;
                    uint64_t v130 = *v120;
                    uint64_t v131 = *(void *)(*v120 + 24 * *(int *)v121);
                    do
                    {
                      int v129 = *(_DWORD *)(v131 + 4 * v126);
                      if (v129 == *v125) {
                        int v128 = v126;
                      }
                      if (v129 == v125[1]) {
                        int v127 = v126;
                      }
                      ++v126;
                    }
                    while (v126 != 6);
                    if (v128 < v127)
                    {
                      ++v125;
                      uint64_t v124 = 2 * v123 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v130 = *v120;
                    uint64_t v131 = *(void *)(*v120 + 24 * *(int *)v121);
                  }
                  uint64_t v132 = 0;
                  int v133 = 0;
                  int v134 = 0;
                  BOOL v135 = &v12[v123];
                  int v136 = *v125;
                  int v137 = *v135;
                  do
                  {
                    int v138 = *(_DWORD *)(v131 + 4 * v132);
                    if (v138 == v136) {
                      int v134 = v132;
                    }
                    if (v138 == v137) {
                      int v133 = v132;
                    }
                    ++v132;
                  }
                  while (v132 != 6);
                  if (v134 >= v133)
                  {
                    do
                    {
                      BOOL v139 = v125;
                      *BOOL v135 = v136;
                      if (v119 < v124) {
                        break;
                      }
                      uint64_t v140 = (2 * v124) | 1;
                      BOOL v125 = &v12[v140];
                      uint64_t v124 = 2 * v124 + 2;
                      int v141 = *(_DWORD *)v121;
                      if (v124 < (uint64_t)v14)
                      {
                        uint64_t v142 = 0;
                        int v143 = 0;
                        int v144 = 0;
                        uint64_t v146 = *(void *)(v130 + 24 * v141);
                        do
                        {
                          int v145 = *(_DWORD *)(v146 + 4 * v142);
                          if (v145 == *v125) {
                            int v144 = v142;
                          }
                          if (v145 == v125[1]) {
                            int v143 = v142;
                          }
                          ++v142;
                        }
                        while (v142 != 6);
                        if (v144 >= v143) {
                          uint64_t v124 = v140;
                        }
                        else {
                          ++v125;
                        }
                      }
                      else
                      {
                        uint64_t v146 = *(void *)(v130 + 24 * v141);
                        uint64_t v124 = v140;
                      }
                      uint64_t v147 = 0;
                      int v148 = 0;
                      int v149 = 0;
                      int v136 = *v125;
                      do
                      {
                        int v150 = *(_DWORD *)(v146 + 4 * v147);
                        if (v150 == v136) {
                          int v149 = v147;
                        }
                        if (v150 == v137) {
                          int v148 = v147;
                        }
                        ++v147;
                      }
                      while (v147 != 6);
                      BOOL v135 = v139;
                    }
                    while (v149 >= v148);
                    *BOOL v139 = v137;
                  }
                }
                int64_t v122 = v123 - 1;
              }
              while (v123);
              uint64_t v151 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v152 = 0;
                int v153 = *v12;
                int v155 = *a3;
                uint64_t v154 = a3[1];
                uint64_t v156 = v12;
                do
                {
                  long long v157 = &v156[v152 + 1];
                  uint64_t result = 2 * v152;
                  uint64_t v158 = (2 * v152) | 1;
                  uint64_t v159 = 2 * v152 + 2;
                  if (v159 < v151)
                  {
                    uint64_t v160 = 0;
                    LODWORD(result) = 0;
                    int v161 = 0;
                    do
                    {
                      int v162 = *(_DWORD *)(*(void *)(*v155 + 24 * *(int *)v154) + 4 * v160);
                      if (v162 == *v157) {
                        int v161 = v160;
                      }
                      if (v162 == v157[1]) {
                        uint64_t result = v160;
                      }
                      else {
                        uint64_t result = result;
                      }
                      ++v160;
                    }
                    while (v160 != 6);
                    if (v161 < (int)result)
                    {
                      ++v157;
                      uint64_t v158 = v159;
                    }
                  }
                  *uint64_t v156 = *v157;
                  uint64_t v156 = v157;
                  uint64_t v152 = v158;
                }
                while (v158 <= (uint64_t)((unint64_t)(v151 - 2) >> 1));
                if (v157 == --a2)
                {
                  int *v157 = v153;
                }
                else
                {
                  int *v157 = *a2;
                  *a2 = v153;
                  uint64_t v163 = (char *)v157 - (char *)v12 + 4;
                  if (v163 >= 5)
                  {
                    uint64_t v164 = 0;
                    int v165 = 0;
                    LODWORD(result) = 0;
                    unint64_t v166 = (((unint64_t)v163 >> 2) - 2) >> 1;
                    uint64_t v167 = &v12[v166];
                    int v168 = *v167;
                    int v169 = *v157;
                    uint64_t v170 = *v155;
                    do
                    {
                      int v171 = *(_DWORD *)(*(void *)(v170 + 24 * *(int *)v154) + 4 * v164);
                      if (v171 == v168) {
                        uint64_t result = v164;
                      }
                      else {
                        uint64_t result = result;
                      }
                      if (v171 == v169) {
                        int v165 = v164;
                      }
                      ++v164;
                    }
                    while (v164 != 6);
                    if ((int)result < v165)
                    {
                      do
                      {
                        uint64_t v172 = v167;
                        int *v157 = v168;
                        if (!v166) {
                          break;
                        }
                        uint64_t v173 = 0;
                        LODWORD(result) = 0;
                        int v174 = 0;
                        unint64_t v166 = (v166 - 1) >> 1;
                        uint64_t v167 = &v12[v166];
                        int v168 = *v167;
                        do
                        {
                          int v175 = *(_DWORD *)(*(void *)(v170 + 24 * *(int *)v154) + 4 * v173);
                          if (v175 == v168) {
                            int v174 = v173;
                          }
                          if (v175 == v169) {
                            uint64_t result = v173;
                          }
                          else {
                            uint64_t result = result;
                          }
                          ++v173;
                        }
                        while (v173 != 6);
                        long long v157 = v172;
                      }
                      while (v174 < (int)result);
                      *uint64_t v172 = v169;
                    }
                  }
                }
              }
              while (v151-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          int v16 = &v12[v14 >> 1];
          if ((unint64_t)v13 >= 0x201)
          {
            int v17 = *v11;
            *int v11 = *v16;
            int *v16 = v17;
          }
          else
          {
          }
          --a4;
          int v18 = *v11;
          uint64_t v19 = a3[1];
          int v20 = *(_DWORD *)v19;
          uint64_t v21 = **a3;
          if (a5)
          {
            uint64_t v22 = *(void *)(v21 + 24 * v20);
            break;
          }
          uint64_t v23 = 0;
          int v24 = 0;
          int v25 = 0;
          uint64_t v22 = *(void *)(v21 + 24 * v20);
          do
          {
            int v26 = *(_DWORD *)(v22 + 4 * v23);
            if (v26 == *(v11 - 1)) {
              int v25 = v23;
            }
            if (v26 == v18) {
              int v24 = v23;
            }
            ++v23;
          }
          while (v23 != 6);
          if (v25 < v24) {
            break;
          }
          uint64_t v63 = 0;
          int v64 = 0;
          int v65 = 0;
          do
          {
            int v66 = *(_DWORD *)(v22 + 4 * v63);
            if (v66 == v18) {
              int v65 = v63;
            }
            if (v66 == *v192) {
              int v64 = v63;
            }
            ++v63;
          }
          while (v63 != 6);
          BOOL v12 = v11;
          if (v65 >= v64)
          {
            do
            {
              if (++v12 >= a2) {
                break;
              }
              uint64_t v73 = 0;
              int v74 = 0;
              int v75 = 0;
              do
              {
                int v76 = *(_DWORD *)(v22 + 4 * v73);
                if (v76 == v18) {
                  int v75 = v73;
                }
                if (v76 == *v12) {
                  int v74 = v73;
                }
                ++v73;
              }
              while (v73 != 6);
            }
            while (v75 >= v74);
          }
          else
          {
            BOOL v12 = v11;
            do
            {
              uint64_t v67 = 0;
              int v68 = 0;
              int v69 = 0;
              int v71 = v12[1];
              ++v12;
              int v70 = v71;
              do
              {
                int v72 = *(_DWORD *)(v22 + 4 * v67);
                if (v72 == v18) {
                  int v69 = v67;
                }
                if (v72 == v70) {
                  int v68 = v67;
                }
                ++v67;
              }
              while (v67 != 6);
            }
            while (v69 >= v68);
          }
          BOOL v77 = a2;
          if (v12 < a2)
          {
            BOOL v77 = a2;
            do
            {
              uint64_t v78 = 0;
              int v79 = 0;
              int v80 = 0;
              int v82 = *--v77;
              int v81 = v82;
              do
              {
                int v83 = *(_DWORD *)(v22 + 4 * v78);
                if (v83 == v18) {
                  int v80 = v78;
                }
                if (v83 == v81) {
                  int v79 = v78;
                }
                ++v78;
              }
              while (v78 != 6);
            }
            while (v80 < v79);
          }
          if (v12 < v77)
          {
            int v84 = *v12;
            int v85 = *v77;
            do
            {
              int *v12 = v85;
              *BOOL v77 = v84;
              uint64_t v86 = *(void *)(v21 + 24 * *(int *)v19);
              do
              {
                uint64_t v87 = 0;
                int v88 = 0;
                int v89 = 0;
                int v90 = v12[1];
                ++v12;
                int v84 = v90;
                do
                {
                  int v91 = *(_DWORD *)(v86 + 4 * v87);
                  if (v91 == v18) {
                    int v89 = v87;
                  }
                  if (v91 == v84) {
                    int v88 = v87;
                  }
                  ++v87;
                }
                while (v87 != 6);
              }
              while (v89 >= v88);
              do
              {
                uint64_t v92 = 0;
                int v93 = 0;
                int v94 = 0;
                int v95 = *--v77;
                int v85 = v95;
                do
                {
                  uint64_t result = *(unsigned int *)(v86 + 4 * v92);
                  if (result == v18) {
                    int v94 = v92;
                  }
                  if (result == v85) {
                    int v93 = v92;
                  }
                  ++v92;
                }
                while (v92 != 6);
              }
              while (v94 < v93);
            }
            while (v12 < v77);
          }
          int v96 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *int v11 = *v96;
          }
          a5 = 0;
          *int v96 = v18;
        }
        BOOL v27 = v11;
        do
        {
          uint64_t v28 = 0;
          int v29 = 0;
          int v30 = 0;
          unint64_t v31 = v27;
          int v33 = v27[1];
          ++v27;
          int v32 = v33;
          do
          {
            int v34 = *(_DWORD *)(v22 + 4 * v28);
            if (v34 == v32) {
              int v30 = v28;
            }
            if (v34 == v18) {
              int v29 = v28;
            }
            ++v28;
          }
          while (v28 != 6);
        }
        while (v30 < v29);
        int v35 = a2;
        if (v31 == v11)
        {
          int v35 = a2;
          do
          {
            if (v27 >= v35) {
              break;
            }
            uint64_t v42 = 0;
            int v43 = 0;
            int v44 = 0;
            int v46 = *--v35;
            int v45 = v46;
            do
            {
              int v47 = *(_DWORD *)(v22 + 4 * v42);
              if (v47 == v45) {
                int v44 = v42;
              }
              if (v47 == v18) {
                int v43 = v42;
              }
              ++v42;
            }
            while (v42 != 6);
          }
          while (v44 >= v43);
        }
        else
        {
          do
          {
            uint64_t v36 = 0;
            int v37 = 0;
            int v38 = 0;
            int v40 = *--v35;
            int v39 = v40;
            do
            {
              int v41 = *(_DWORD *)(v22 + 4 * v36);
              if (v41 == v39) {
                int v38 = v36;
              }
              if (v41 == v18) {
                int v37 = v36;
              }
              ++v36;
            }
            while (v36 != 6);
          }
          while (v38 >= v37);
        }
        if (v27 < v35)
        {
          int v48 = *v35;
          int v49 = v27;
          int v50 = v35;
          do
          {
            int *v49 = v48;
            int *v50 = v32;
            uint64_t v51 = *(void *)(v21 + 24 * *(int *)v19);
            do
            {
              uint64_t v52 = 0;
              int v53 = 0;
              int v54 = 0;
              unint64_t v31 = v49;
              int v55 = v49[1];
              ++v49;
              int v32 = v55;
              do
              {
                int v56 = *(_DWORD *)(v51 + 4 * v52);
                if (v56 == v32) {
                  int v54 = v52;
                }
                if (v56 == v18) {
                  int v53 = v52;
                }
                ++v52;
              }
              while (v52 != 6);
            }
            while (v54 < v53);
            do
            {
              uint64_t v57 = 0;
              int v58 = 0;
              int v59 = 0;
              int v60 = *--v50;
              int v48 = v60;
              do
              {
                int v61 = *(_DWORD *)(v51 + 4 * v57);
                if (v61 == v48) {
                  int v59 = v57;
                }
                if (v61 == v18) {
                  int v58 = v57;
                }
                ++v57;
              }
              while (v57 != 6);
            }
            while (v59 >= v58);
          }
          while (v49 < v50);
        }
        if (v31 != v11) {
          *int v11 = *v31;
        }
        int *v31 = v18;
        if (v27 >= v35) {
          break;
        }
LABEL_68:
        a5 = 0;
        BOOL v12 = v31 + 1;
      }
      BOOL v12 = v31 + 1;
      if (result) {
        break;
      }
      if (!v62) {
        goto LABEL_68;
      }
    }
    a2 = v31;
    if (!v62) {
      continue;
    }
    return result;
  }
}

int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t **a6)
{
  uint64_t v13 = 0;
  int v14 = 0;
  int v15 = 0;
  int v16 = *a5;
  int v17 = *a4;
  int v18 = a6[1];
  uint64_t v19 = **a6;
  do
  {
    int v20 = *(_DWORD *)(*(void *)(v19 + 24 * *(int *)v18) + 4 * v13);
    if (v20 == v16) {
      int v15 = v13;
    }
    if (v20 == v17) {
      int v14 = v13;
    }
    ++v13;
  }
  while (v13 != 6);
  if (v15 < v14)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    int v23 = 0;
    *a4 = v16;
    *a5 = v17;
    int v24 = *a4;
    int v25 = *a3;
    do
    {
      int v26 = *(_DWORD *)(*(void *)(v19 + 24 * *(int *)v18) + 4 * v21);
      if (v26 == v24) {
        int v23 = v21;
      }
      if (v26 == v25) {
        int v22 = v21;
      }
      ++v21;
    }
    while (v21 != 6);
    if (v23 < v22)
    {
      uint64_t v27 = 0;
      int v28 = 0;
      int v29 = 0;
      *a3 = v24;
      *a4 = v25;
      int v30 = *a3;
      int v31 = *a2;
      do
      {
        int v32 = *(_DWORD *)(*(void *)(v19 + 24 * *(int *)v18) + 4 * v27);
        if (v32 == v30) {
          int v29 = v27;
        }
        if (v32 == v31) {
          int v28 = v27;
        }
        ++v27;
      }
      while (v27 != 6);
      if (v29 < v28)
      {
        uint64_t v33 = 0;
        int v34 = 0;
        int v35 = 0;
        *a2 = v30;
        *a3 = v31;
        int v36 = *a2;
        int v37 = *a1;
        uint64_t v38 = *(void *)(v19 + 24 * *(int *)v18);
        do
        {
          int v39 = *(_DWORD *)(v38 + 4 * v33);
          if (v39 == v36) {
            int v35 = v33;
          }
          if (v39 == v37) {
            int v34 = v33;
          }
          ++v33;
        }
        while (v33 != 6);
        if (v35 < v34)
        {
          *a1 = v36;
          *a2 = v37;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = *a2;
  BOOL v8 = a4[1];
  int v9 = *result;
  uint64_t v10 = **a4;
  uint64_t v11 = *(void *)(v10 + 24 * *(int *)v8);
  do
  {
    int v12 = *(_DWORD *)(v11 + 4 * v4);
    if (v12 == v7) {
      int v6 = v4;
    }
    if (v12 == v9) {
      int v5 = v4;
    }
    ++v4;
  }
  while (v4 != 6);
  int v13 = *a3;
  if (v6 >= v5)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    int v20 = 0;
    do
    {
      int v21 = *(_DWORD *)(v11 + 4 * v18);
      if (v21 == v13) {
        int v20 = v18;
      }
      if (v21 == v7) {
        int v19 = v18;
      }
      ++v18;
    }
    while (v18 != 6);
    if (v20 < v19)
    {
      uint64_t v22 = 0;
      int v23 = 0;
      int v24 = 0;
      *a2 = v13;
      *a3 = v7;
      int v25 = *a2;
      int v26 = *result;
      uint64_t v27 = *(void *)(v10 + 24 * *(int *)v8);
      do
      {
        int v28 = *(_DWORD *)(v27 + 4 * v22);
        if (v28 == v25) {
          int v24 = v22;
        }
        if (v28 == v26) {
          int v23 = v22;
        }
        ++v22;
      }
      while (v22 != 6);
      if (v24 < v23)
      {
        int *result = v25;
        *a2 = v26;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    do
    {
      int v17 = *(_DWORD *)(v11 + 4 * v14);
      if (v17 == v13) {
        int v16 = v14;
      }
      if (v17 == v7) {
        int v15 = v14;
      }
      ++v14;
    }
    while (v14 != 6);
    if (v16 < v15)
    {
      int *result = v13;
LABEL_39:
      *a3 = v9;
      return result;
    }
    uint64_t v29 = 0;
    int v30 = 0;
    int v31 = 0;
    int *result = v7;
    *a2 = v9;
    int v32 = *a3;
    uint64_t v33 = *(void *)(v10 + 24 * *(int *)v8);
    do
    {
      int v34 = *(_DWORD *)(v33 + 4 * v29);
      if (v34 == v32) {
        int v31 = v29;
      }
      if (v34 == v9) {
        int v30 = v29;
      }
      ++v29;
    }
    while (v29 != 6);
    if (v31 < v30)
    {
      *a2 = v32;
      goto LABEL_39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = *(a2 - 1);
      int v12 = *a1;
      do
      {
        int v13 = *(_DWORD *)(*(void *)(**a3 + 24 * *(int *)a3[1]) + 4 * v8);
        if (v13 == v11) {
          int v10 = v8;
        }
        if (v13 == v12) {
          int v9 = v8;
        }
        ++v8;
      }
      while (v8 != 6);
      if (v10 < v9)
      {
        *a1 = v11;
        *(a2 - 1) = v12;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      uint64_t v14 = a1 + 2;
      int v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v16 = 0;
      int v17 = a3[1];
      uint64_t v18 = **a3;
      break;
  }
  while (1)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = *v15;
    int v23 = *v14;
    do
    {
      int v24 = *(_DWORD *)(*(void *)(v18 + 24 * *(int *)v17) + 4 * v19);
      if (v24 == v22) {
        int v21 = v19;
      }
      if (v24 == v23) {
        int v20 = v19;
      }
      ++v19;
    }
    while (v19 != 6);
    if (v21 < v20)
    {
      int v25 = v15;
      while (1)
      {
        int *v25 = v23;
        if (v14 == a1) {
          break;
        }
        int v25 = v14;
        uint64_t v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = *--v14;
        int v23 = v29;
        do
        {
          int v30 = *(_DWORD *)(*(void *)(v18 + 24 * *(int *)v17) + 4 * v26);
          if (v30 == v22) {
            int v28 = v26;
          }
          if (v30 == v23) {
            int v27 = v26;
          }
          ++v26;
        }
        while (v26 != 6);
        if (v28 >= v27) {
          goto LABEL_30;
        }
      }
      int v25 = a1;
LABEL_30:
      int *v25 = v22;
      if (++v16 == 8) {
        return v15 + 1 == a2;
      }
    }
    uint64_t v14 = v15++;
    if (v15 == a2) {
      return 1;
    }
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  uint64_t v11 = 0;
  int v12 = 0;
  int v13 = 0;
  int v14 = *a4;
  int v15 = *a3;
  int v16 = a5[1];
  uint64_t v17 = **a5;
  do
  {
    int v18 = *(_DWORD *)(*(void *)(v17 + 24 * *(int *)v16) + 4 * v11);
    if (v18 == v14) {
      int v13 = v11;
    }
    if (v18 == v15) {
      int v12 = v11;
    }
    ++v11;
  }
  while (v11 != 6);
  if (v13 < v12)
  {
    uint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    *a3 = v14;
    *a4 = v15;
    int v22 = *a3;
    int v23 = *a2;
    do
    {
      int v24 = *(_DWORD *)(*(void *)(v17 + 24 * *(int *)v16) + 4 * v19);
      if (v24 == v22) {
        int v21 = v19;
      }
      if (v24 == v23) {
        int v20 = v19;
      }
      ++v19;
    }
    while (v19 != 6);
    if (v21 < v20)
    {
      uint64_t v25 = 0;
      int v26 = 0;
      int v27 = 0;
      *a2 = v22;
      *a3 = v23;
      int v28 = *a2;
      int v29 = *a1;
      uint64_t v30 = *(void *)(v17 + 24 * *(int *)v16);
      do
      {
        int v31 = *(_DWORD *)(v30 + 4 * v25);
        if (v31 == v28) {
          int v27 = v25;
        }
        if (v31 == v29) {
          int v26 = v25;
        }
        ++v25;
      }
      while (v25 != 6);
      if (v27 < v26)
      {
        *a1 = v28;
        *a2 = v29;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_237CA1540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    v12[4] = (uint64_t)**a4;
    v12[5] = 0;
    char v15 = 1;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<NSString * {__strong}>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    uint64_t v11 = *a3;
    *a3 = 0;
    v10[4] = v11;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}