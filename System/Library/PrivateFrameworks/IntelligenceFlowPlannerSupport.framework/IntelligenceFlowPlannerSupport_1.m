uint64_t *assignWithCopy for Expression(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t updated;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != (uint64_t *)a2)
  {
    sub_2534DC568();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = *(void *)a2;
        v7 = *((void *)a2 + 1);
        v8 = a2[16];
        sub_2534E4408(v6, v7, v8);
        *a1 = v6;
        a1[1] = v7;
        *((unsigned char *)a1 + 16) = v8;
        goto LABEL_17;
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        v28 = sub_253B059D0();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
        goto LABEL_17;
      case 2u:
        *(unsigned char *)a1 = *a2;
        v9 = *(int *)(type metadata accessor for PrefixExpression(0) + 20);
        v10 = (char *)a1 + v9;
        v11 = &a2[v9];
        v12 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        goto LABEL_17;
      case 3u:
        *(unsigned char *)a1 = *a2;
        v13 = type metadata accessor for InfixExpression(0);
        v14 = *(int *)(v13 + 20);
        v15 = (char *)a1 + v14;
        v16 = &a2[v14];
        v17 = sub_253B059D0();
        v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
        v18(v15, v16, v17);
        v18((char *)a1 + *(int *)(v13 + 24), &a2[*(int *)(v13 + 24)], v17);
        goto LABEL_17;
      case 4u:
        v19 = sub_253B059D0();
        v20 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        v20(a1, a2, v19);
        v21 = type metadata accessor for IndexExpression(0);
        v20((uint64_t *)((char *)a1 + *(int *)(v21 + 20)), &a2[*(int *)(v21 + 20)], v19);
        goto LABEL_17;
      case 5u:
        v22 = sub_253B059D0();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        updated = type metadata accessor for UpdateParametersExpression(0);
        *(uint64_t *)((char *)a1 + *(int *)(updated + 20)) = *(void *)&a2[*(int *)(updated + 20)];
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 6u:
        *a1 = *(void *)a2;
        a1[1] = *((void *)a2 + 1);
        a1[2] = *((void *)a2 + 2);
        a1[3] = *((void *)a2 + 3);
        a1[4] = *((void *)a2 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 7u:
      case 0xBu:
      case 0xDu:
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 8u:
        v24 = sub_253B059D0();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = type metadata accessor for PickExpression(0);
        *(uint64_t *)((char *)a1 + *(int *)(v25 + 20)) = *(void *)&a2[*(int *)(v25 + 20)];
        goto LABEL_17;
      case 0xAu:
        *a1 = *(void *)a2;
        a1[1] = *((void *)a2 + 1);
        *((unsigned char *)a1 + 16) = a2[16];
        *((unsigned char *)a1 + 17) = a2[17];
        *((unsigned char *)a1 + 18) = a2[18];
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 0xEu:
        v26 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v26))
        {
          v27 = sub_253462A5C(&qword_269CDB460);
          memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v26);
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

unsigned char *initializeWithTake for Expression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 9u:
    case 0xCu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      uint64_t v6 = sub_253B059D0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      goto LABEL_12;
    case 2u:
      *a1 = *a2;
      uint64_t v7 = *(int *)(type metadata accessor for PrefixExpression(0) + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      uint64_t v10 = sub_253B059D0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      goto LABEL_12;
    case 3u:
      *a1 = *a2;
      uint64_t v11 = type metadata accessor for InfixExpression(0);
      uint64_t v12 = *(int *)(v11 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      uint64_t v15 = sub_253B059D0();
      v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v13, v14, v15);
      v16(&a1[*(int *)(v11 + 24)], &a2[*(int *)(v11 + 24)], v15);
      goto LABEL_12;
    case 4u:
      uint64_t v17 = sub_253B059D0();
      v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 32);
      v18(a1, a2, v17);
      uint64_t v19 = type metadata accessor for IndexExpression(0);
      v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
      goto LABEL_12;
    case 5u:
      uint64_t v20 = sub_253B059D0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
      uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
      *(void *)&a1[*(int *)(updated + 20)] = *(void *)&a2[*(int *)(updated + 20)];
      goto LABEL_12;
    case 8u:
      uint64_t v22 = sub_253B059D0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
      uint64_t v23 = type metadata accessor for PickExpression(0);
      *(void *)&a1[*(int *)(v23 + 20)] = *(void *)&a2[*(int *)(v23 + 20)];
      goto LABEL_12;
    case 0xEu:
      uint64_t v24 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v24))
      {
        uint64_t v25 = sub_253462A5C(&qword_269CDB460);
        memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v24);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *assignWithTake for Expression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2534DC568();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        uint64_t v6 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        goto LABEL_13;
      case 2u:
        *a1 = *a2;
        uint64_t v7 = *(int *)(type metadata accessor for PrefixExpression(0) + 20);
        v8 = &a1[v7];
        v9 = &a2[v7];
        uint64_t v10 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        goto LABEL_13;
      case 3u:
        *a1 = *a2;
        uint64_t v11 = type metadata accessor for InfixExpression(0);
        uint64_t v12 = *(int *)(v11 + 20);
        v13 = &a1[v12];
        v14 = &a2[v12];
        uint64_t v15 = sub_253B059D0();
        v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 32);
        v16(v13, v14, v15);
        v16(&a1[*(int *)(v11 + 24)], &a2[*(int *)(v11 + 24)], v15);
        goto LABEL_13;
      case 4u:
        uint64_t v17 = sub_253B059D0();
        v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 32);
        v18(a1, a2, v17);
        uint64_t v19 = type metadata accessor for IndexExpression(0);
        v18(&a1[*(int *)(v19 + 20)], &a2[*(int *)(v19 + 20)], v17);
        goto LABEL_13;
      case 5u:
        uint64_t v20 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
        uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
        *(void *)&a1[*(int *)(updated + 20)] = *(void *)&a2[*(int *)(updated + 20)];
        goto LABEL_13;
      case 8u:
        uint64_t v22 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
        uint64_t v23 = type metadata accessor for PickExpression(0);
        *(void *)&a1[*(int *)(v23 + 20)] = *(void *)&a2[*(int *)(v23 + 20)];
        goto LABEL_13;
      case 0xEu:
        uint64_t v24 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v24))
        {
          uint64_t v25 = sub_253462A5C(&qword_269CDB460);
          memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v24);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_2534F0ADC()
{
  sub_253B059D0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PrefixExpression(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for InfixExpression(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for IndexExpression(319);
        if (v3 <= 0x3F)
        {
          type metadata accessor for UpdateParametersExpression(319);
          if (v4 <= 0x3F)
          {
            type metadata accessor for PickExpression(319);
            if (v5 <= 0x3F)
            {
              sub_2534F0D0C();
              if (v6 <= 0x3F) {
                swift_initEnumMetadataMultiPayload();
              }
            }
          }
        }
      }
    }
  }
}

void sub_2534F0D0C()
{
  if (!qword_26B2411C8)
  {
    sub_253B059D0();
    unint64_t v0 = sub_253B09E00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2411C8);
    }
  }
}

uint64_t destroy for ValueExpression(uint64_t a1)
{
  return sub_2534E43E0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s30IntelligenceFlowPlannerSupport15ValueExpressionOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_2534E4408(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ValueExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_2534E4408(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_2534E43E0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ValueExpression(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_2534E43E0(v4, v5, v6);
  return a1;
}

void type metadata accessor for ValueExpression()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PrefixExpression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    char v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_253B059D0();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PrefixExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_253B059D0();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

unsigned char *initializeWithCopy for PrefixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  char v6 = &a2[v4];
  uint64_t v7 = sub_253B059D0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithCopy for PrefixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  char v6 = &a2[v4];
  uint64_t v7 = sub_253B059D0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *initializeWithTake for PrefixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  char v6 = &a2[v4];
  uint64_t v7 = sub_253B059D0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *assignWithTake for PrefixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  char v6 = &a2[v4];
  uint64_t v7 = sub_253B059D0();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F11A8);
}

uint64_t sub_2534F11A8(unsigned __int8 *a1, int a2)
{
  if (a2 == 253)
  {
    unsigned int v2 = *a1;
    if (v2 >= 3) {
      return v2 - 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_2534F8848();
    uint64_t v4 = sub_2534F8890();
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for PrefixExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F1224);
}

void sub_2534F1224()
{
  sub_2534DA0C4();
  if (v2 == 253)
  {
    *uint64_t v1 = v0 + 2;
  }
  else
  {
    sub_253B059D0();
    uint64_t v3 = sub_2534F86B4();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, v4, v5, v6);
  }
}

uint64_t sub_2534F128C()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for PrefixExpression.PrefixOp()
{
}

char *initializeBufferWithCopyOfBuffer for InfixExpression(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = sub_253B059D0();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v10);
  }
  return v4;
}

uint64_t destroy for InfixExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B059D0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  return v8(v6, v5);
}

unsigned char *initializeWithCopy for InfixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_253B059D0();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

unsigned char *assignWithCopy for InfixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_253B059D0();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

unsigned char *initializeWithTake for InfixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_253B059D0();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

unsigned char *assignWithTake for InfixExpression(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_253B059D0();
  uint64_t v10 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InfixExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F17C4);
}

uint64_t sub_2534F17C4(unsigned __int8 *a1, int a2)
{
  if (a2 == 237)
  {
    unsigned int v2 = *a1;
    if (v2 >= 0x13) {
      return v2 - 18;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_2534F8848();
    uint64_t v4 = sub_2534F8890();
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for InfixExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F1840);
}

void sub_2534F1840()
{
  sub_2534DA0C4();
  if (v2 == 237)
  {
    *unint64_t v1 = v0 + 18;
  }
  else
  {
    sub_253B059D0();
    uint64_t v3 = sub_2534F86B4();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, v4, v5, v6);
  }
}

uint64_t sub_2534F18A8()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for InfixExpression.InfixOp()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexExpression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t destroy for IndexExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B059D0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  return v7(v5, v4);
}

uint64_t initializeWithCopy for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F1D4C);
}

uint64_t sub_2534F1D4C()
{
  sub_2534F84F4();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for IndexExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F1D98);
}

uint64_t sub_2534F1D98()
{
  sub_2534F84F4();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_2534F1DD0()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UpdateParametersExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F1E74);
}

uint64_t sub_2534F1E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253B059D0();
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return sub_2534F89A0(*(void *)(a1 + *(int *)(a3 + 20)));
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for UpdateParametersExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F1F08);
}

void sub_2534F1F08(uint64_t a1, int a2, int a3, uint64_t a4)
{
  sub_2534F84F4();
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_253498918();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(v4 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_2534F1F7C()
{
  return sub_2534F2B00();
}

void *initializeBufferWithCopyOfBuffer for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
    uint64_t v9 = sub_253B059D0();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_253B059D0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_253B059D0();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F23B4);
}

uint64_t sub_2534F23B4(uint64_t a1, int a2)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_2534F89A0(*(void *)(a1 + 8));
  }
  uint64_t v6 = sub_2534F8848();
  uint64_t v7 = a1 + *(int *)(v3 + 28);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v2, v6);
}

uint64_t storeEnumTagSinglePayload for UpdateParametersExpression.UpdateParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F2438);
}

void sub_2534F2438()
{
  sub_2534DA0C4();
  if (v3 == 0x7FFFFFFF)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_253B059D0();
    uint64_t v6 = v1 + *(int *)(v4 + 28);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v6, v0, v0, v5);
  }
}

uint64_t sub_2534F24B4()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for UpdateParametersExpression.UpdateKind()
{
}

uint64_t destroy for CallExpression()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CallExpression(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CallExpression(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CallExpression(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CallExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CallExpression(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CallExpression()
{
}

void type metadata accessor for SayExpression()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for PickExpression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for PickExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for PickExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s30IntelligenceFlowPlannerSupport26UpdateParametersExpressionVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253B059D0();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a1, a2);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PickExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PickExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F2A6C);
}

uint64_t sub_2534F2A6C()
{
  sub_2534F84F4();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for PickExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F2AB8);
}

uint64_t sub_2534F2AB8()
{
  sub_2534F84F4();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_2534F2AF0()
{
  return sub_2534F2B00();
}

uint64_t sub_2534F2B00()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConfirmExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F812C);
}

uint64_t storeEnumTagSinglePayload for ConfirmExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F8118);
}

uint64_t sub_2534F2BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2534F368C(a1, a2, a3, MEMORY[0x263F4BF98]);
}

uint64_t sub_2534F2BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SearchExpression(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

__n128 initializeWithTake for SearchExpression(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SearchExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchExpression(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 19))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 19) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SearchExpression()
{
}

void type metadata accessor for StructuredSearchExpression()
{
}

uint64_t getEnumTagSinglePayload for PickOneExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F8130);
}

uint64_t storeEnumTagSinglePayload for PickOneExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F811C);
}

void type metadata accessor for ResolveToolExpression()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for UndoExpression(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_253462A5C(&qword_269CDB460) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_253B059D0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for UndoExpression(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for UndoExpression(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B059D0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for UndoExpression(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B059D0();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for UndoExpression(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B059D0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for UndoExpression(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B059D0();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UndoExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F3388);
}

uint64_t sub_2534F3388()
{
  sub_2534DA0C4();
  sub_253462A5C(&qword_269CDB460);
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for UndoExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F33DC);
}

uint64_t sub_2534F33DC()
{
  sub_2534DA0C4();
  sub_253462A5C(&qword_269CDB460);
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_2534F341C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2534F368C(a1, a2, a3, (uint64_t (*)(uint64_t))sub_2534F0D0C);
}

uint64_t getEnumTagSinglePayload for RejectExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F8134);
}

uint64_t storeEnumTagSinglePayload for RejectExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F8120);
}

uint64_t getEnumTagSinglePayload for CancelExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F8138);
}

uint64_t storeEnumTagSinglePayload for CancelExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F8124);
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionVwCP_0()
{
  sub_2534F84F4();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t _s30IntelligenceFlowPlannerSupport14PickExpressionVwxx_0(uint64_t a1)
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  return v4(a1, v2);
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionVwcp_0()
{
  sub_2534F84F4();
  sub_25346CAF4();
  uint64_t v1 = sub_25349C5B8();
  v2(v1);
  return v0;
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionVwca_0()
{
  sub_2534F84F4();
  sub_25346CAF4();
  uint64_t v1 = sub_25349C5B8();
  v2(v1);
  return v0;
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionVwtk_0()
{
  sub_2534F84F4();
  sub_25346CAF4();
  uint64_t v1 = sub_25349C5B8();
  v2(v1);
  return v0;
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionVwta_0()
{
  sub_2534F84F4();
  sub_25346CAF4();
  uint64_t v1 = sub_25349C5B8();
  v2(v1);
  return v0;
}

uint64_t getEnumTagSinglePayload for OpenExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534F813C);
}

uint64_t storeEnumTagSinglePayload for OpenExpression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534F8128);
}

uint64_t sub_2534F368C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenExpression.CodingKeys()
{
  return &type metadata for OpenExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for CancelExpression.CodingKeys()
{
  return &type metadata for CancelExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for RejectExpression.CodingKeys()
{
  return &type metadata for RejectExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for UndoExpression.CodingKeys()
{
  return &type metadata for UndoExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for ResolveToolExpression.CodingKeys()
{
  return &type metadata for ResolveToolExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for PickOneExpression.CodingKeys()
{
  return &type metadata for PickOneExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for StructuredSearchExpression.CodingKeys()
{
  return &type metadata for StructuredSearchExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for SearchExpression.CodingKeys()
{
  return &type metadata for SearchExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for ConfirmExpression.CodingKeys()
{
  return &type metadata for ConfirmExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for PickExpression.CodingKeys()
{
  return &type metadata for PickExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for SayExpression.CodingKeys()
{
  return &type metadata for SayExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for CallExpression.CodingKeys()
{
  return &type metadata for CallExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for UpdateParametersExpression.CodingKeys()
{
  return &type metadata for UpdateParametersExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for UpdateParametersExpression.UpdateKind.CodingKeys()
{
  return &type metadata for UpdateParametersExpression.UpdateKind.CodingKeys;
}

ValueMetadata *type metadata accessor for UpdateParametersExpression.UpdateKind.AppendCodingKeys()
{
  return &type metadata for UpdateParametersExpression.UpdateKind.AppendCodingKeys;
}

ValueMetadata *type metadata accessor for UpdateParametersExpression.UpdateKind.ReplaceCodingKeys()
{
  return &type metadata for UpdateParametersExpression.UpdateKind.ReplaceCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport16SearchExpressionV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 4);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 4);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 4);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s30IntelligenceFlowPlannerSupport16SearchExpressionV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F3968);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 3);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateParametersExpression.UpdateParameter.CodingKeys()
{
  return &type metadata for UpdateParametersExpression.UpdateParameter.CodingKeys;
}

ValueMetadata *type metadata accessor for IndexExpression.CodingKeys()
{
  return &type metadata for IndexExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.CodingKeys()
{
  return &type metadata for InfixExpression.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport15InfixExpressionV7InfixOpOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *uint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F3A7CLL);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 18);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.CodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.CodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AddCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AddCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AddAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AddAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.SubtractCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.SubtractCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.SubtractAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.SubtractAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.DivideCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.DivideCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.DivideAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.DivideAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.MultiplyCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.MultiplyCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.MultiplyAssignCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.MultiplyAssignCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.ExponentCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.ExponentCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.EqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.EqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.NotEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.NotEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.InCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.InCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.GreaterThanEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.GreaterThanEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.GreaterThanCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.GreaterThanCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.LessThanEqualCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.LessThanEqualCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.LessThanCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.LessThanCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.AndCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.AndCodingKeys;
}

ValueMetadata *type metadata accessor for InfixExpression.InfixOp.OrCodingKeys()
{
  return &type metadata for InfixExpression.InfixOp.OrCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport26UpdateParametersExpressionV10UpdateKindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F3CA0);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixExpression.CodingKeys()
{
  return &type metadata for PrefixExpression.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport16PrefixExpressionV8PrefixOpOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F3D94);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.CodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.CodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.PlusCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.PlusCodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.MinusCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.MinusCodingKeys;
}

ValueMetadata *type metadata accessor for PrefixExpression.PrefixOp.NotCodingKeys()
{
  return &type metadata for PrefixExpression.PrefixOp.NotCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ValueExpression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F3EC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueExpression.CodingKeys()
{
  return &type metadata for ValueExpression.CodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.NullCodingKeys()
{
  return &type metadata for ValueExpression.NullCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.BoolCodingKeys()
{
  return &type metadata for ValueExpression.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.IntCodingKeys()
{
  return &type metadata for ValueExpression.IntCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.DoubleCodingKeys()
{
  return &type metadata for ValueExpression.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.StringCodingKeys()
{
  return &type metadata for ValueExpression.StringCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.ArrayCodingKeys()
{
  return &type metadata for ValueExpression.ArrayCodingKeys;
}

ValueMetadata *type metadata accessor for ValueExpression.SymbolCodingKeys()
{
  return &type metadata for ValueExpression.SymbolCodingKeys;
}

uint64_t getEnumTagSinglePayload for Expression.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEA)
  {
    if (a2 + 22 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 22) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 23;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v5 = v6 - 23;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Expression.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *uint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534F40C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Expression.CodingKeys()
{
  return &type metadata for Expression.CodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ValueCodingKeys()
{
  return &type metadata for Expression.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.StatementIdCodingKeys()
{
  return &type metadata for Expression.StatementIdCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PrefixCodingKeys()
{
  return &type metadata for Expression.PrefixCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.InfixCodingKeys()
{
  return &type metadata for Expression.InfixCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.IndexCodingKeys()
{
  return &type metadata for Expression.IndexCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.UpdateParametersCodingKeys()
{
  return &type metadata for Expression.UpdateParametersCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.CallCodingKeys()
{
  return &type metadata for Expression.CallCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.SayCodingKeys()
{
  return &type metadata for Expression.SayCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PickCodingKeys()
{
  return &type metadata for Expression.PickCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ConfirmCodingKeys()
{
  return &type metadata for Expression.ConfirmCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.SearchCodingKeys()
{
  return &type metadata for Expression.SearchCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.StructuredSearchCodingKeys()
{
  return &type metadata for Expression.StructuredSearchCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.PickOneCodingKeys()
{
  return &type metadata for Expression.PickOneCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ResolveToolCodingKeys()
{
  return &type metadata for Expression.ResolveToolCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.UndoCodingKeys()
{
  return &type metadata for Expression.UndoCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.RejectCodingKeys()
{
  return &type metadata for Expression.RejectCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.CancelCodingKeys()
{
  return &type metadata for Expression.CancelCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.GetMentionedAppsCodingKeys()
{
  return &type metadata for Expression.GetMentionedAppsCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.NoMatchingToolCodingKeys()
{
  return &type metadata for Expression.NoMatchingToolCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ContinuePlanningCodingKeys()
{
  return &type metadata for Expression.ContinuePlanningCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.EndOfPlanCodingKeys()
{
  return &type metadata for Expression.EndOfPlanCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport14OpenExpressionV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2534F42E8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Expression.OpenCodingKeys()
{
  return &type metadata for Expression.OpenCodingKeys;
}

ValueMetadata *type metadata accessor for Expression.ExplicitResolutionRequestCodingKeys()
{
  return &type metadata for Expression.ExplicitResolutionRequestCodingKeys;
}

unint64_t sub_2534F4334()
{
  unint64_t result = qword_269CDD658;
  if (!qword_269CDD658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD658);
  }
  return result;
}

unint64_t sub_2534F4384()
{
  unint64_t result = qword_269CDD660;
  if (!qword_269CDD660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD660);
  }
  return result;
}

unint64_t sub_2534F43D4()
{
  unint64_t result = qword_269CDD668;
  if (!qword_269CDD668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD668);
  }
  return result;
}

unint64_t sub_2534F4424()
{
  unint64_t result = qword_269CDD670;
  if (!qword_269CDD670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD670);
  }
  return result;
}

unint64_t sub_2534F4474()
{
  unint64_t result = qword_269CDD678;
  if (!qword_269CDD678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD678);
  }
  return result;
}

unint64_t sub_2534F44C4()
{
  unint64_t result = qword_269CDD680;
  if (!qword_269CDD680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD680);
  }
  return result;
}

unint64_t sub_2534F4514()
{
  unint64_t result = qword_269CDD688;
  if (!qword_269CDD688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD688);
  }
  return result;
}

unint64_t sub_2534F4564()
{
  unint64_t result = qword_269CDD690;
  if (!qword_269CDD690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD690);
  }
  return result;
}

unint64_t sub_2534F45B4()
{
  unint64_t result = qword_269CDD698;
  if (!qword_269CDD698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD698);
  }
  return result;
}

unint64_t sub_2534F4604()
{
  unint64_t result = qword_269CDD6A0;
  if (!qword_269CDD6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6A0);
  }
  return result;
}

unint64_t sub_2534F4654()
{
  unint64_t result = qword_269CDD6A8;
  if (!qword_269CDD6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6A8);
  }
  return result;
}

unint64_t sub_2534F46A4()
{
  unint64_t result = qword_269CDD6B0;
  if (!qword_269CDD6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6B0);
  }
  return result;
}

unint64_t sub_2534F46F4()
{
  unint64_t result = qword_269CDD6B8;
  if (!qword_269CDD6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6B8);
  }
  return result;
}

unint64_t sub_2534F4744()
{
  unint64_t result = qword_269CDD6C0;
  if (!qword_269CDD6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6C0);
  }
  return result;
}

unint64_t sub_2534F4794()
{
  unint64_t result = qword_269CDD6C8;
  if (!qword_269CDD6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6C8);
  }
  return result;
}

unint64_t sub_2534F47E4()
{
  unint64_t result = qword_269CDD6D0;
  if (!qword_269CDD6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6D0);
  }
  return result;
}

unint64_t sub_2534F4834()
{
  unint64_t result = qword_269CDD6D8;
  if (!qword_269CDD6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6D8);
  }
  return result;
}

unint64_t sub_2534F4884()
{
  unint64_t result = qword_269CDD6E0;
  if (!qword_269CDD6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6E0);
  }
  return result;
}

unint64_t sub_2534F48D4()
{
  unint64_t result = qword_269CDD6E8;
  if (!qword_269CDD6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6E8);
  }
  return result;
}

unint64_t sub_2534F4924()
{
  unint64_t result = qword_269CDD6F0;
  if (!qword_269CDD6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6F0);
  }
  return result;
}

unint64_t sub_2534F4974()
{
  unint64_t result = qword_269CDD6F8;
  if (!qword_269CDD6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD6F8);
  }
  return result;
}

unint64_t sub_2534F49C4()
{
  unint64_t result = qword_269CDD700;
  if (!qword_269CDD700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD700);
  }
  return result;
}

unint64_t sub_2534F4A14()
{
  unint64_t result = qword_269CDD708;
  if (!qword_269CDD708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD708);
  }
  return result;
}

unint64_t sub_2534F4A64()
{
  unint64_t result = qword_269CDD710;
  if (!qword_269CDD710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD710);
  }
  return result;
}

unint64_t sub_2534F4AB4()
{
  unint64_t result = qword_269CDD718;
  if (!qword_269CDD718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD718);
  }
  return result;
}

unint64_t sub_2534F4B04()
{
  unint64_t result = qword_269CDD720;
  if (!qword_269CDD720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD720);
  }
  return result;
}

unint64_t sub_2534F4B54()
{
  unint64_t result = qword_269CDD728;
  if (!qword_269CDD728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD728);
  }
  return result;
}

unint64_t sub_2534F4BA4()
{
  unint64_t result = qword_269CDD730;
  if (!qword_269CDD730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD730);
  }
  return result;
}

unint64_t sub_2534F4BF4()
{
  unint64_t result = qword_269CDD738;
  if (!qword_269CDD738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD738);
  }
  return result;
}

unint64_t sub_2534F4C44()
{
  unint64_t result = qword_269CDD740;
  if (!qword_269CDD740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD740);
  }
  return result;
}

unint64_t sub_2534F4C94()
{
  unint64_t result = qword_269CDD748;
  if (!qword_269CDD748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD748);
  }
  return result;
}

unint64_t sub_2534F4CE4()
{
  unint64_t result = qword_269CDD750;
  if (!qword_269CDD750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD750);
  }
  return result;
}

unint64_t sub_2534F4D34()
{
  unint64_t result = qword_269CDD758;
  if (!qword_269CDD758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD758);
  }
  return result;
}

unint64_t sub_2534F4D84()
{
  unint64_t result = qword_269CDD760;
  if (!qword_269CDD760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD760);
  }
  return result;
}

unint64_t sub_2534F4DD4()
{
  unint64_t result = qword_269CDD768;
  if (!qword_269CDD768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD768);
  }
  return result;
}

unint64_t sub_2534F4E24()
{
  unint64_t result = qword_269CDD770;
  if (!qword_269CDD770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD770);
  }
  return result;
}

unint64_t sub_2534F4E74()
{
  unint64_t result = qword_269CDD778;
  if (!qword_269CDD778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD778);
  }
  return result;
}

unint64_t sub_2534F4EC4()
{
  unint64_t result = qword_269CDD780;
  if (!qword_269CDD780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD780);
  }
  return result;
}

unint64_t sub_2534F4F14()
{
  unint64_t result = qword_269CDD788;
  if (!qword_269CDD788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD788);
  }
  return result;
}

unint64_t sub_2534F4F64()
{
  unint64_t result = qword_269CDD790;
  if (!qword_269CDD790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD790);
  }
  return result;
}

unint64_t sub_2534F4FB4()
{
  unint64_t result = qword_269CDD798;
  if (!qword_269CDD798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD798);
  }
  return result;
}

unint64_t sub_2534F5004()
{
  unint64_t result = qword_269CDD7A0;
  if (!qword_269CDD7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7A0);
  }
  return result;
}

unint64_t sub_2534F5054()
{
  unint64_t result = qword_269CDD7A8;
  if (!qword_269CDD7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7A8);
  }
  return result;
}

unint64_t sub_2534F50A4()
{
  unint64_t result = qword_269CDD7B0;
  if (!qword_269CDD7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7B0);
  }
  return result;
}

unint64_t sub_2534F50F4()
{
  unint64_t result = qword_269CDD7B8;
  if (!qword_269CDD7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7B8);
  }
  return result;
}

unint64_t sub_2534F5144()
{
  unint64_t result = qword_269CDD7C0;
  if (!qword_269CDD7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7C0);
  }
  return result;
}

unint64_t sub_2534F5194()
{
  unint64_t result = qword_269CDD7C8;
  if (!qword_269CDD7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7C8);
  }
  return result;
}

unint64_t sub_2534F51E4()
{
  unint64_t result = qword_269CDD7D0;
  if (!qword_269CDD7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7D0);
  }
  return result;
}

unint64_t sub_2534F5234()
{
  unint64_t result = qword_269CDD7D8;
  if (!qword_269CDD7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7D8);
  }
  return result;
}

unint64_t sub_2534F5284()
{
  unint64_t result = qword_269CDD7E0;
  if (!qword_269CDD7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7E0);
  }
  return result;
}

unint64_t sub_2534F52D4()
{
  unint64_t result = qword_269CDD7E8;
  if (!qword_269CDD7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7E8);
  }
  return result;
}

unint64_t sub_2534F5324()
{
  unint64_t result = qword_269CDD7F0;
  if (!qword_269CDD7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7F0);
  }
  return result;
}

unint64_t sub_2534F5374()
{
  unint64_t result = qword_269CDD7F8;
  if (!qword_269CDD7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD7F8);
  }
  return result;
}

unint64_t sub_2534F53C4()
{
  unint64_t result = qword_269CDD800;
  if (!qword_269CDD800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD800);
  }
  return result;
}

unint64_t sub_2534F5414()
{
  unint64_t result = qword_269CDD808;
  if (!qword_269CDD808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD808);
  }
  return result;
}

unint64_t sub_2534F5464()
{
  unint64_t result = qword_269CDD810;
  if (!qword_269CDD810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD810);
  }
  return result;
}

unint64_t sub_2534F54B4()
{
  unint64_t result = qword_269CDD818;
  if (!qword_269CDD818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD818);
  }
  return result;
}

unint64_t sub_2534F5504()
{
  unint64_t result = qword_269CDD820;
  if (!qword_269CDD820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD820);
  }
  return result;
}

unint64_t sub_2534F5554()
{
  unint64_t result = qword_269CDD828;
  if (!qword_269CDD828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD828);
  }
  return result;
}

unint64_t sub_2534F55A4()
{
  unint64_t result = qword_269CDD830;
  if (!qword_269CDD830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD830);
  }
  return result;
}

unint64_t sub_2534F55F4()
{
  unint64_t result = qword_269CDD838;
  if (!qword_269CDD838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD838);
  }
  return result;
}

unint64_t sub_2534F5644()
{
  unint64_t result = qword_269CDD840;
  if (!qword_269CDD840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD840);
  }
  return result;
}

unint64_t sub_2534F5694()
{
  unint64_t result = qword_269CDD848;
  if (!qword_269CDD848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD848);
  }
  return result;
}

unint64_t sub_2534F56E4()
{
  unint64_t result = qword_269CDD850;
  if (!qword_269CDD850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD850);
  }
  return result;
}

unint64_t sub_2534F5734()
{
  unint64_t result = qword_269CDD858;
  if (!qword_269CDD858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD858);
  }
  return result;
}

unint64_t sub_2534F5784()
{
  unint64_t result = qword_269CDD860;
  if (!qword_269CDD860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD860);
  }
  return result;
}

unint64_t sub_2534F57D4()
{
  unint64_t result = qword_269CDD868;
  if (!qword_269CDD868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD868);
  }
  return result;
}

unint64_t sub_2534F5824()
{
  unint64_t result = qword_269CDD870;
  if (!qword_269CDD870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD870);
  }
  return result;
}

unint64_t sub_2534F5874()
{
  unint64_t result = qword_269CDD878;
  if (!qword_269CDD878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD878);
  }
  return result;
}

unint64_t sub_2534F58C4()
{
  unint64_t result = qword_269CDD880;
  if (!qword_269CDD880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD880);
  }
  return result;
}

unint64_t sub_2534F5914()
{
  unint64_t result = qword_269CDD888;
  if (!qword_269CDD888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD888);
  }
  return result;
}

unint64_t sub_2534F5964()
{
  unint64_t result = qword_269CDD890;
  if (!qword_269CDD890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD890);
  }
  return result;
}

unint64_t sub_2534F59B4()
{
  unint64_t result = qword_269CDD898;
  if (!qword_269CDD898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD898);
  }
  return result;
}

unint64_t sub_2534F5A04()
{
  unint64_t result = qword_269CDD8A0;
  if (!qword_269CDD8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8A0);
  }
  return result;
}

unint64_t sub_2534F5A54()
{
  unint64_t result = qword_269CDD8A8;
  if (!qword_269CDD8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8A8);
  }
  return result;
}

unint64_t sub_2534F5AA4()
{
  unint64_t result = qword_269CDD8B0;
  if (!qword_269CDD8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8B0);
  }
  return result;
}

unint64_t sub_2534F5AF4()
{
  unint64_t result = qword_269CDD8B8;
  if (!qword_269CDD8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8B8);
  }
  return result;
}

unint64_t sub_2534F5B44()
{
  unint64_t result = qword_269CDD8C0;
  if (!qword_269CDD8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8C0);
  }
  return result;
}

unint64_t sub_2534F5B94()
{
  unint64_t result = qword_269CDD8C8;
  if (!qword_269CDD8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8C8);
  }
  return result;
}

unint64_t sub_2534F5BE4()
{
  unint64_t result = qword_269CDD8D0;
  if (!qword_269CDD8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8D0);
  }
  return result;
}

unint64_t sub_2534F5C34()
{
  unint64_t result = qword_269CDD8D8;
  if (!qword_269CDD8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8D8);
  }
  return result;
}

unint64_t sub_2534F5C84()
{
  unint64_t result = qword_269CDD8E0;
  if (!qword_269CDD8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8E0);
  }
  return result;
}

unint64_t sub_2534F5CD4()
{
  unint64_t result = qword_269CDD8E8;
  if (!qword_269CDD8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8E8);
  }
  return result;
}

unint64_t sub_2534F5D24()
{
  unint64_t result = qword_269CDD8F0;
  if (!qword_269CDD8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8F0);
  }
  return result;
}

unint64_t sub_2534F5D74()
{
  unint64_t result = qword_269CDD8F8;
  if (!qword_269CDD8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD8F8);
  }
  return result;
}

unint64_t sub_2534F5DC4()
{
  unint64_t result = qword_269CDD900;
  if (!qword_269CDD900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD900);
  }
  return result;
}

unint64_t sub_2534F5E14()
{
  unint64_t result = qword_269CDD908;
  if (!qword_269CDD908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD908);
  }
  return result;
}

unint64_t sub_2534F5E64()
{
  unint64_t result = qword_269CDD910;
  if (!qword_269CDD910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD910);
  }
  return result;
}

unint64_t sub_2534F5EB4()
{
  unint64_t result = qword_269CDD918;
  if (!qword_269CDD918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD918);
  }
  return result;
}

unint64_t sub_2534F5F04()
{
  unint64_t result = qword_269CDD920;
  if (!qword_269CDD920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD920);
  }
  return result;
}

unint64_t sub_2534F5F54()
{
  unint64_t result = qword_269CDD928;
  if (!qword_269CDD928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD928);
  }
  return result;
}

unint64_t sub_2534F5FA4()
{
  unint64_t result = qword_269CDD930;
  if (!qword_269CDD930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD930);
  }
  return result;
}

unint64_t sub_2534F5FF4()
{
  unint64_t result = qword_269CDD938;
  if (!qword_269CDD938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD938);
  }
  return result;
}

unint64_t sub_2534F6044()
{
  unint64_t result = qword_269CDD940;
  if (!qword_269CDD940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD940);
  }
  return result;
}

unint64_t sub_2534F6094()
{
  unint64_t result = qword_269CDD948;
  if (!qword_269CDD948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD948);
  }
  return result;
}

unint64_t sub_2534F60E4()
{
  unint64_t result = qword_269CDD950;
  if (!qword_269CDD950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD950);
  }
  return result;
}

unint64_t sub_2534F6134()
{
  unint64_t result = qword_269CDD958;
  if (!qword_269CDD958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD958);
  }
  return result;
}

unint64_t sub_2534F6184()
{
  unint64_t result = qword_269CDD960;
  if (!qword_269CDD960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD960);
  }
  return result;
}

unint64_t sub_2534F61D4()
{
  unint64_t result = qword_269CDD968;
  if (!qword_269CDD968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD968);
  }
  return result;
}

unint64_t sub_2534F6224()
{
  unint64_t result = qword_269CDD970;
  if (!qword_269CDD970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD970);
  }
  return result;
}

unint64_t sub_2534F6274()
{
  unint64_t result = qword_269CDD978;
  if (!qword_269CDD978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD978);
  }
  return result;
}

unint64_t sub_2534F62C4()
{
  unint64_t result = qword_269CDD980;
  if (!qword_269CDD980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD980);
  }
  return result;
}

unint64_t sub_2534F6314()
{
  unint64_t result = qword_269CDD988;
  if (!qword_269CDD988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD988);
  }
  return result;
}

unint64_t sub_2534F6364()
{
  unint64_t result = qword_269CDD990;
  if (!qword_269CDD990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD990);
  }
  return result;
}

unint64_t sub_2534F63B4()
{
  unint64_t result = qword_269CDD998;
  if (!qword_269CDD998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD998);
  }
  return result;
}

unint64_t sub_2534F6404()
{
  unint64_t result = qword_269CDD9A0;
  if (!qword_269CDD9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9A0);
  }
  return result;
}

unint64_t sub_2534F6454()
{
  unint64_t result = qword_269CDD9A8;
  if (!qword_269CDD9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9A8);
  }
  return result;
}

unint64_t sub_2534F64A4()
{
  unint64_t result = qword_269CDD9B0;
  if (!qword_269CDD9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9B0);
  }
  return result;
}

unint64_t sub_2534F64F4()
{
  unint64_t result = qword_269CDD9B8;
  if (!qword_269CDD9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9B8);
  }
  return result;
}

unint64_t sub_2534F6544()
{
  unint64_t result = qword_269CDD9C0;
  if (!qword_269CDD9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9C0);
  }
  return result;
}

unint64_t sub_2534F6594()
{
  unint64_t result = qword_269CDD9C8;
  if (!qword_269CDD9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9C8);
  }
  return result;
}

unint64_t sub_2534F65E4()
{
  unint64_t result = qword_269CDD9D0;
  if (!qword_269CDD9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9D0);
  }
  return result;
}

unint64_t sub_2534F6634()
{
  unint64_t result = qword_269CDD9D8;
  if (!qword_269CDD9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9D8);
  }
  return result;
}

unint64_t sub_2534F6684()
{
  unint64_t result = qword_269CDD9E0;
  if (!qword_269CDD9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9E0);
  }
  return result;
}

unint64_t sub_2534F66D4()
{
  unint64_t result = qword_269CDD9E8;
  if (!qword_269CDD9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9E8);
  }
  return result;
}

unint64_t sub_2534F6724()
{
  unint64_t result = qword_269CDD9F0;
  if (!qword_269CDD9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9F0);
  }
  return result;
}

unint64_t sub_2534F6774()
{
  unint64_t result = qword_269CDD9F8;
  if (!qword_269CDD9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD9F8);
  }
  return result;
}

unint64_t sub_2534F67C4()
{
  unint64_t result = qword_269CDDA00;
  if (!qword_269CDDA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA00);
  }
  return result;
}

unint64_t sub_2534F6814()
{
  unint64_t result = qword_269CDDA08;
  if (!qword_269CDDA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA08);
  }
  return result;
}

unint64_t sub_2534F6864()
{
  unint64_t result = qword_269CDDA10;
  if (!qword_269CDDA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA10);
  }
  return result;
}

unint64_t sub_2534F68B4()
{
  unint64_t result = qword_269CDDA18;
  if (!qword_269CDDA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA18);
  }
  return result;
}

unint64_t sub_2534F6904()
{
  unint64_t result = qword_269CDDA20;
  if (!qword_269CDDA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA20);
  }
  return result;
}

unint64_t sub_2534F6954()
{
  unint64_t result = qword_269CDDA28;
  if (!qword_269CDDA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA28);
  }
  return result;
}

unint64_t sub_2534F69A4()
{
  unint64_t result = qword_269CDDA30;
  if (!qword_269CDDA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA30);
  }
  return result;
}

unint64_t sub_2534F69F4()
{
  unint64_t result = qword_269CDDA38;
  if (!qword_269CDDA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA38);
  }
  return result;
}

unint64_t sub_2534F6A44()
{
  unint64_t result = qword_269CDDA40;
  if (!qword_269CDDA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA40);
  }
  return result;
}

unint64_t sub_2534F6A94()
{
  unint64_t result = qword_269CDDA48;
  if (!qword_269CDDA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA48);
  }
  return result;
}

unint64_t sub_2534F6AE4()
{
  unint64_t result = qword_269CDDA50;
  if (!qword_269CDDA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA50);
  }
  return result;
}

unint64_t sub_2534F6B34()
{
  unint64_t result = qword_269CDDA58;
  if (!qword_269CDDA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA58);
  }
  return result;
}

unint64_t sub_2534F6B84()
{
  unint64_t result = qword_269CDDA60;
  if (!qword_269CDDA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA60);
  }
  return result;
}

unint64_t sub_2534F6BD4()
{
  unint64_t result = qword_269CDDA68;
  if (!qword_269CDDA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA68);
  }
  return result;
}

unint64_t sub_2534F6C24()
{
  unint64_t result = qword_269CDDA70;
  if (!qword_269CDDA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA70);
  }
  return result;
}

unint64_t sub_2534F6C74()
{
  unint64_t result = qword_269CDDA78;
  if (!qword_269CDDA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA78);
  }
  return result;
}

unint64_t sub_2534F6CC4()
{
  unint64_t result = qword_269CDDA80;
  if (!qword_269CDDA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA80);
  }
  return result;
}

unint64_t sub_2534F6D14()
{
  unint64_t result = qword_269CDDA88;
  if (!qword_269CDDA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA88);
  }
  return result;
}

unint64_t sub_2534F6D64()
{
  unint64_t result = qword_269CDDA90;
  if (!qword_269CDDA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA90);
  }
  return result;
}

unint64_t sub_2534F6DB4()
{
  unint64_t result = qword_269CDDA98;
  if (!qword_269CDDA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDA98);
  }
  return result;
}

unint64_t sub_2534F6E04()
{
  unint64_t result = qword_269CDDAA0;
  if (!qword_269CDDAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAA0);
  }
  return result;
}

unint64_t sub_2534F6E54()
{
  unint64_t result = qword_269CDDAA8;
  if (!qword_269CDDAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAA8);
  }
  return result;
}

unint64_t sub_2534F6EA4()
{
  unint64_t result = qword_269CDDAB0;
  if (!qword_269CDDAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAB0);
  }
  return result;
}

unint64_t sub_2534F6EF4()
{
  unint64_t result = qword_269CDDAB8;
  if (!qword_269CDDAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAB8);
  }
  return result;
}

unint64_t sub_2534F6F44()
{
  unint64_t result = qword_269CDDAC0;
  if (!qword_269CDDAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAC0);
  }
  return result;
}

unint64_t sub_2534F6F94()
{
  unint64_t result = qword_269CDDAC8;
  if (!qword_269CDDAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAC8);
  }
  return result;
}

unint64_t sub_2534F6FE4()
{
  unint64_t result = qword_269CDDAD0;
  if (!qword_269CDDAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAD0);
  }
  return result;
}

unint64_t sub_2534F7034()
{
  unint64_t result = qword_269CDDAD8;
  if (!qword_269CDDAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAD8);
  }
  return result;
}

unint64_t sub_2534F7084()
{
  unint64_t result = qword_269CDDAE0;
  if (!qword_269CDDAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAE0);
  }
  return result;
}

unint64_t sub_2534F70D4()
{
  unint64_t result = qword_269CDDAE8;
  if (!qword_269CDDAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAE8);
  }
  return result;
}

unint64_t sub_2534F7124()
{
  unint64_t result = qword_269CDDAF0;
  if (!qword_269CDDAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAF0);
  }
  return result;
}

unint64_t sub_2534F7174()
{
  unint64_t result = qword_269CDDAF8;
  if (!qword_269CDDAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDAF8);
  }
  return result;
}

unint64_t sub_2534F71C4()
{
  unint64_t result = qword_269CDDB00;
  if (!qword_269CDDB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB00);
  }
  return result;
}

unint64_t sub_2534F7214()
{
  unint64_t result = qword_269CDDB08;
  if (!qword_269CDDB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB08);
  }
  return result;
}

unint64_t sub_2534F7264()
{
  unint64_t result = qword_269CDDB10;
  if (!qword_269CDDB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB10);
  }
  return result;
}

unint64_t sub_2534F72B4()
{
  unint64_t result = qword_269CDDB18;
  if (!qword_269CDDB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB18);
  }
  return result;
}

unint64_t sub_2534F7304()
{
  unint64_t result = qword_269CDDB20;
  if (!qword_269CDDB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB20);
  }
  return result;
}

unint64_t sub_2534F7354()
{
  unint64_t result = qword_269CDDB28;
  if (!qword_269CDDB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB28);
  }
  return result;
}

unint64_t sub_2534F73A4()
{
  unint64_t result = qword_269CDDB30;
  if (!qword_269CDDB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB30);
  }
  return result;
}

unint64_t sub_2534F73F4()
{
  unint64_t result = qword_269CDDB38;
  if (!qword_269CDDB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB38);
  }
  return result;
}

unint64_t sub_2534F7444()
{
  unint64_t result = qword_269CDDB40;
  if (!qword_269CDDB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB40);
  }
  return result;
}

unint64_t sub_2534F7494()
{
  unint64_t result = qword_269CDDB48;
  if (!qword_269CDDB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB48);
  }
  return result;
}

unint64_t sub_2534F74E4()
{
  unint64_t result = qword_269CDDB50;
  if (!qword_269CDDB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB50);
  }
  return result;
}

unint64_t sub_2534F7534()
{
  unint64_t result = qword_269CDDB58;
  if (!qword_269CDDB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB58);
  }
  return result;
}

unint64_t sub_2534F7584()
{
  unint64_t result = qword_269CDDB60;
  if (!qword_269CDDB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB60);
  }
  return result;
}

unint64_t sub_2534F75D4()
{
  unint64_t result = qword_269CDDB68;
  if (!qword_269CDDB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB68);
  }
  return result;
}

unint64_t sub_2534F7624()
{
  unint64_t result = qword_269CDDB70;
  if (!qword_269CDDB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB70);
  }
  return result;
}

unint64_t sub_2534F7674()
{
  unint64_t result = qword_269CDDB78;
  if (!qword_269CDDB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB78);
  }
  return result;
}

unint64_t sub_2534F76C4()
{
  unint64_t result = qword_269CDDB80;
  if (!qword_269CDDB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB80);
  }
  return result;
}

unint64_t sub_2534F7714()
{
  unint64_t result = qword_269CDDB88;
  if (!qword_269CDDB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB88);
  }
  return result;
}

unint64_t sub_2534F7764()
{
  unint64_t result = qword_269CDDB90;
  if (!qword_269CDDB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB90);
  }
  return result;
}

unint64_t sub_2534F77B4()
{
  unint64_t result = qword_269CDDB98;
  if (!qword_269CDDB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDB98);
  }
  return result;
}

unint64_t sub_2534F7804()
{
  unint64_t result = qword_269CDDBA0;
  if (!qword_269CDDBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBA0);
  }
  return result;
}

unint64_t sub_2534F7854()
{
  unint64_t result = qword_269CDDBA8;
  if (!qword_269CDDBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBA8);
  }
  return result;
}

unint64_t sub_2534F78A4()
{
  unint64_t result = qword_269CDDBB0;
  if (!qword_269CDDBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBB0);
  }
  return result;
}

unint64_t sub_2534F78F4()
{
  unint64_t result = qword_269CDDBB8;
  if (!qword_269CDDBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBB8);
  }
  return result;
}

unint64_t sub_2534F7944()
{
  unint64_t result = qword_269CDDBC0;
  if (!qword_269CDDBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBC0);
  }
  return result;
}

unint64_t sub_2534F7994()
{
  unint64_t result = qword_269CDDBC8;
  if (!qword_269CDDBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBC8);
  }
  return result;
}

unint64_t sub_2534F79E4()
{
  unint64_t result = qword_269CDDBD0;
  if (!qword_269CDDBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBD0);
  }
  return result;
}

unint64_t sub_2534F7A34()
{
  unint64_t result = qword_269CDDBD8;
  if (!qword_269CDDBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBD8);
  }
  return result;
}

unint64_t sub_2534F7A84()
{
  unint64_t result = qword_269CDDBE0;
  if (!qword_269CDDBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBE0);
  }
  return result;
}

unint64_t sub_2534F7AD4()
{
  unint64_t result = qword_269CDDBE8;
  if (!qword_269CDDBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBE8);
  }
  return result;
}

unint64_t sub_2534F7B24()
{
  unint64_t result = qword_269CDDBF0;
  if (!qword_269CDDBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBF0);
  }
  return result;
}

unint64_t sub_2534F7B74()
{
  unint64_t result = qword_269CDDBF8;
  if (!qword_269CDDBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDBF8);
  }
  return result;
}

unint64_t sub_2534F7BC4()
{
  unint64_t result = qword_269CDDC00;
  if (!qword_269CDDC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC00);
  }
  return result;
}

unint64_t sub_2534F7C14()
{
  unint64_t result = qword_269CDDC08;
  if (!qword_269CDDC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC08);
  }
  return result;
}

unint64_t sub_2534F7C64()
{
  unint64_t result = qword_269CDDC10;
  if (!qword_269CDDC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC10);
  }
  return result;
}

unint64_t sub_2534F7CB4()
{
  unint64_t result = qword_269CDDC18;
  if (!qword_269CDDC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC18);
  }
  return result;
}

unint64_t sub_2534F7D04()
{
  unint64_t result = qword_269CDDC20;
  if (!qword_269CDDC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC20);
  }
  return result;
}

unint64_t sub_2534F7D54()
{
  unint64_t result = qword_269CDDC28;
  if (!qword_269CDDC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC28);
  }
  return result;
}

unint64_t sub_2534F7DA4()
{
  unint64_t result = qword_269CDDC30;
  if (!qword_269CDDC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC30);
  }
  return result;
}

unint64_t sub_2534F7DF4()
{
  unint64_t result = qword_269CDDC38;
  if (!qword_269CDDC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC38);
  }
  return result;
}

unint64_t sub_2534F7E44()
{
  unint64_t result = qword_269CDDC40;
  if (!qword_269CDDC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC40);
  }
  return result;
}

unint64_t sub_2534F7E94()
{
  unint64_t result = qword_269CDDC48;
  if (!qword_269CDDC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC48);
  }
  return result;
}

unint64_t sub_2534F7EE4()
{
  unint64_t result = qword_269CDDC50;
  if (!qword_269CDDC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC50);
  }
  return result;
}

unint64_t sub_2534F7F34()
{
  unint64_t result = qword_269CDDC58;
  if (!qword_269CDDC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC58);
  }
  return result;
}

unint64_t sub_2534F7F84()
{
  unint64_t result = qword_269CDDC60;
  if (!qword_269CDDC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC60);
  }
  return result;
}

unint64_t sub_2534F7FD4()
{
  unint64_t result = qword_269CDDC68;
  if (!qword_269CDDC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC68);
  }
  return result;
}

unint64_t sub_2534F8024()
{
  unint64_t result = qword_269CDDC70;
  if (!qword_269CDDC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC70);
  }
  return result;
}

unint64_t sub_2534F8074()
{
  unint64_t result = qword_269CDDC78;
  if (!qword_269CDDC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC78);
  }
  return result;
}

unint64_t sub_2534F80C4()
{
  unint64_t result = qword_269CDDC80;
  if (!qword_269CDDC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC80);
  }
  return result;
}

uint64_t sub_2534F817C()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534F819C()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534F81C0()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534F81E0()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534F8208@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_2534F8218()
{
  return sub_253B0A370();
}

void sub_2534F823C()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_2534F824C()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534F8274()
{
  return v0;
}

uint64_t sub_2534F828C()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534F82A4()
{
  return v0;
}

uint64_t sub_2534F82BC()
{
  return sub_253B0A680();
}

uint64_t sub_2534F82D8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_2534F8304()
{
  return sub_253B0A370();
}

void *sub_2534F8328(void *a1)
{
  return sub_253472068(a1, v1);
}

uint64_t sub_2534F8344()
{
  return sub_253B0A440();
}

uint64_t sub_2534F8360()
{
  return v0;
}

uint64_t sub_2534F8370()
{
  return sub_253B0A2C0();
}

void *sub_2534F83A0()
{
  return sub_253472068(v0, v1);
}

uint64_t sub_2534F83C0()
{
  return v0;
}

void *sub_2534F83CC()
{
  return sub_253472068(v0, v0[3]);
}

uint64_t sub_2534F83F0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B059D0();
}

uint64_t sub_2534F8410()
{
  return sub_253B0A370();
}

uint64_t sub_2534F843C()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534F8464()
{
  return sub_253B0A080();
}

uint64_t sub_2534F848C()
{
  return v0;
}

uint64_t sub_2534F84A8()
{
  return v0;
}

uint64_t sub_2534F84B4(uint64_t a1, uint64_t a2, char a3)
{
  sub_2534E43E0(a1, a2, a3);
  return v3;
}

uint64_t sub_2534F84DC()
{
  return sub_253B0A440();
}

uint64_t sub_2534F84F4()
{
  return sub_253B059D0();
}

uint64_t sub_2534F850C()
{
  return sub_2534DC8C0();
}

uint64_t sub_2534F8524()
{
  return v0;
}

uint64_t sub_2534F8540()
{
  return *(void *)(v0 - 136);
}

uint64_t sub_2534F8550()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_2534F8578()
{
  return sub_253B059D0();
}

uint64_t sub_2534F859C()
{
  return v0;
}

uint64_t sub_2534F85B0()
{
  return sub_2534DC8C0();
}

uint64_t sub_2534F85C8()
{
  return v0;
}

uint64_t sub_2534F85E0()
{
  return sub_253B0A440();
}

uint64_t sub_2534F8610()
{
  return sub_253B0A3A0();
}

void *sub_2534F8630(void *a1)
{
  return sub_253472068(a1, v1);
}

uint64_t sub_2534F8658()
{
  return sub_253B0A440();
}

uint64_t sub_2534F869C()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_2534F86B4()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t sub_2534F86CC()
{
  return v0;
}

uint64_t sub_2534F86E4()
{
  return v0;
}

uint64_t sub_2534F86FC()
{
  return v0;
}

uint64_t sub_2534F8714()
{
  return sub_253B0A4C0();
}

uint64_t sub_2534F8738()
{
  return sub_253B0A660();
}

uint64_t sub_2534F875C()
{
  return sub_2534DC8C0();
}

uint64_t sub_2534F8774@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_2534F8780()
{
  *(unsigned char *)(v0 - 67) = 1;
  return sub_253B059D0();
}

uint64_t sub_2534F87B0()
{
  return sub_253B0A400();
}

uint64_t sub_2534F87CC()
{
  return sub_253B0A330();
}

uint64_t sub_2534F87E8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_2534F8800()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534F8848()
{
  return sub_253B059D0();
}

uint64_t sub_2534F8870()
{
  return swift_getWitnessTable();
}

uint64_t sub_2534F8890()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t sub_2534F88A4()
{
  return v0;
}

uint64_t sub_2534F88B8(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v1);
}

uint64_t sub_2534F88F0()
{
  return sub_2534DC8C0();
}

uint64_t sub_2534F8908()
{
  return sub_253B0A370();
}

uint64_t sub_2534F8920()
{
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_2534F8940()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534F8958()
{
  return v0;
}

uint64_t sub_2534F8964()
{
  return v0;
}

uint64_t sub_2534F8978()
{
  return v0;
}

uint64_t sub_2534F898C()
{
  return v0;
}

uint64_t sub_2534F89A0@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

void sub_2534F89B4()
{
  *(unsigned char *)(v0 - 66) = 1;
}

uint64_t sub_2534F89C8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 128) = a1;
  return sub_253B059D0();
}

uint64_t sub_2534F89E8()
{
  return v0;
}

uint64_t sub_2534F8A1C()
{
  return 0;
}

uint64_t sub_2534F8A28(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v15 = sub_253B059D0();
  uint64_t v4 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_2539E7ADC();
    uint64_t v8 = v18;
    uint64_t v9 = (unint64_t *)(a1 + 32);
    uint64_t v14 = v4 + 32;
    while (1)
    {
      unint64_t v10 = *v9++;
      unint64_t v17 = v10;
      sub_2534C1C84(v10);
      sub_2534F9324(&v17);
      unint64_t v11 = v10;
      if (v2) {
        break;
      }
      sub_25346CA4C(v11);
      uint64_t v18 = v8;
      unint64_t v12 = *(void *)(v8 + 16);
      if (v12 >= *(void *)(v8 + 24) >> 1)
      {
        sub_2539E7ADC();
        uint64_t v8 = v18;
      }
      *(void *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v15);
      if (!--v7) {
        return v8;
      }
    }
    sub_25346CA4C(v11);
    swift_release();
  }
  return v8;
}

void sub_2534F8BE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v4 = sub_253A71D6C(a1);
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t v6 = v4;
      if (v4 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          int v17 = v5;
          unint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8 * v6);
          swift_bridgeObjectRetain();
          sub_2534C1C84(v8);
          swift_bridgeObjectRetain();
          sub_2534C1C84(v8);
          swift_bridgeObjectRelease();
          sub_25346CA4C(v8);
          if (v8 >> 60)
          {
            sub_2534F92D8();
            swift_allocError();
            *(void *)(v14 + 8) = 0;
            *(void *)(v14 + 16) = 0;
            *(void *)uint64_t v14 = a2;
            *(unsigned char *)(v14 + 24) = 0x80;
            sub_2534C1C84(a2);
            swift_willThrow();
            swift_bridgeObjectRelease();
            sub_25346CA4C(v8);
            swift_release();
            sub_25346CA4C(a2);
            return;
          }
          uint64_t v16 = v2;
          uint64_t v10 = *(void *)(v8 + 16);
          uint64_t v9 = *(void *)(v8 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_25346CA4C(v8);
          unint64_t v11 = *(void *)(v18 + 16);
          if (v11 >= *(void *)(v18 + 24) >> 1) {
            sub_2539E6C84();
          }
          *(void *)(v18 + 16) = v11 + 1;
          uint64_t v12 = v18 + 16 * v11;
          *(void *)(v12 + 32) = v10;
          *(void *)(v12 + 40) = v9;
          if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_22;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_23;
          }
          if (v17 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_24;
          }
          uint64_t v13 = sub_253B09F70();
          uint64_t v2 = v16 - 1;
          if (v16 == 1)
          {
            sub_25346CA4C(a2);
            return;
          }
          unint64_t v6 = v13;
          if ((v13 & 0x8000000000000000) == 0)
          {
            int v5 = *(_DWORD *)(a1 + 36);
            if (v13 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
LABEL_25:
    __break(1u);
  }
  else
  {
    sub_25346CA4C(a2);
  }
}

uint64_t ExpressionFlattener.init(statementIdCounter:allowUnresolvedTools:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = MEMORY[0x263F8EE80];
  *(void *)a3 = MEMORY[0x263F8EE78];
  *(void *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 24) = a2;
  return result;
}

unint64_t static ExpressionFlattener.flatten(statementIdCounter:program:allowUnresolvedTools:)(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3 = *a2;
  v6[1] = MEMORY[0x263F8EE78];
  v6[2] = MEMORY[0x263F8EE80];
  v6[3] = a1;
  char v7 = a3;
  v6[0] = v3;
  swift_retain();
  unint64_t v4 = ExpressionFlattener.flatten(program:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t ExpressionFlattener.flatten(program:)(uint64_t *a1)
{
  uint64_t v4 = sub_253B089F0();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_253B059D0();
  MEMORY[0x270FA5388](v33);
  unint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(*a1 + 16);
  if (v13)
  {
    uint64_t v30 = v6;
    uint64_t v31 = v4;
    uint64_t v14 = (void (**)(char *, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)(v12 + 8 * v15 + 32);
      if (v16 >> 62) {
        break;
      }
      unint64_t v35 = *(void *)(v16 + 16);
      unint64_t v17 = v35;
      swift_retain();
      sub_2534C1C84(v17);
      sub_2534F9324((uint64_t *)&v35, (uint64_t)v11);
      if (v2)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return sub_25346CA4C(v17);
      }
      ++v15;
      (*v14)(v11, v33);
      swift_release();
      sub_25346CA4C(v17);
      if (v13 == v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v19 = v32;
    sub_253B08390();
    swift_retain_n();
    uint64_t v20 = sub_253B089D0();
    os_log_type_t v21 = sub_253B09D80();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      unint64_t v35 = v33;
      *(_DWORD *)uint64_t v22 = 136315138;
      v29 = v22 + 4;
      uint64_t v23 = v22;
      swift_retain();
      uint64_t v24 = sub_2534CEAEC(0, v16);
      unint64_t v26 = v25;
      swift_release();
      uint64_t v34 = sub_253464DF8(v24, v26, (uint64_t *)&v35);
      sub_253B09E80();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_253460000, v20, v21, "cannot flatten non-expr statement: %s", v23, 0xCu);
      uint64_t v27 = v33;
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v27, -1, -1);
      MEMORY[0x25A269E60](v23, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
    sub_2534F92D8();
    swift_allocError();
    *(void *)(v28 + 8) = 0;
    *(void *)(v28 + 16) = 0;
    *(void *)uint64_t v28 = v16;
    *(unsigned char *)(v28 + 24) = 32;
    return swift_willThrow();
  }
  else
  {
LABEL_7:
    unint64_t result = *v1;
    *uint64_t v1 = MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t sub_2534F92D8()
{
  unint64_t result = qword_269CDDC88;
  if (!qword_269CDDC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC88);
  }
  return result;
}

uint64_t sub_2534F9324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v293 = a1;
  uint64_t v291 = a2;
  uint64_t v2 = sub_253B089F0();
  uint64_t v283 = *(void *)(v2 - 8);
  uint64_t v284 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  v278 = (char *)&v267 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v282 = (uint64_t)&v267 - v5;
  uint64_t updated = type metadata accessor for AST.UpdateParameters();
  MEMORY[0x270FA5388](updated - 8);
  uint64_t v287 = (uint64_t)&v267 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UndoExpression(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v275 = (uint64_t)&v267 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253462A5C(&qword_269CDB460);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v274 = (uint64_t)&v267 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v280 = (uint64_t)&v267 - v13;
  uint64_t v14 = sub_253B059D0();
  uint64_t v289 = *(void *)(v14 - 8);
  uint64_t v290 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  v271 = (char *)&v267 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v270 = (char *)&v267 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v272 = (char *)&v267 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v273 = (char *)&v267 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v276 = (char *)&v267 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v279 = (char *)&v267 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v277 = (char *)&v267 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  v288 = (uint64_t (*)(uint64_t))((char *)&v267 - v30);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v285 = (char *)&v267 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  unint64_t v35 = (char *)&v267 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  v38 = (char *)&v267 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  v41 = (char *)&v267 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39);
  v44 = (char *)&v267 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42);
  v47 = (char *)&v267 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  v281 = (char *)&v267 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  v52 = (char *)&v267 - v51;
  uint64_t v53 = MEMORY[0x270FA5388](v50);
  uint64_t v286 = (uint64_t)&v267 - v54;
  MEMORY[0x270FA5388](v53);
  v56 = (char *)&v267 - v55;
  uint64_t v57 = type metadata accessor for Expression(0);
  uint64_t v58 = MEMORY[0x270FA5388](v57);
  v60 = (char *)&v267 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = MEMORY[0x270FA5388](v58);
  v63 = (char *)&v267 - v62;
  MEMORY[0x270FA5388](v61);
  v66 = (char *)&v267 - v65;
  unint64_t v67 = *v293;
  switch((unint64_t)*v293 >> 60)
  {
    case 1uLL:
      uint64_t v103 = swift_projectBox();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v289 + 16))(v291, v103, v290);
    case 2uLL:
      uint64_t v84 = v291;
      uint64_t v85 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v86 = v294;
      switch(*(unsigned char *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
      {
        case 1:
          *(void *)v66 = v85;
          *((void *)v66 + 1) = 0;
          char v160 = 1;
          goto LABEL_86;
        case 2:
          *(void *)v66 = v85;
          *((void *)v66 + 1) = 0;
          char v160 = 2;
          goto LABEL_86;
        case 3:
          uint64_t v161 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          *(void *)v66 = v85;
          *((void *)v66 + 1) = v161;
          v66[16] = 3;
          v162 = (char *)&v267 - v65;
          swift_storeEnumTagMultiPayload();
          swift_bridgeObjectRetain();
          sub_2534FBA30((uint64_t)v162, v84);
          v163 = type metadata accessor for Expression;
          uint64_t v164 = (uint64_t)v162;
          return sub_2534FDFA0(v164, v163);
        case 4:
          v115 = (uint64_t *)((char *)&v267 - v65);
          uint64_t result = sub_2534F8A28(v85, v292);
          if (v86) {
            return result;
          }
          uint64_t *v115 = result;
          v115[1] = 0;
          *((unsigned char *)v115 + 16) = 4;
          goto LABEL_88;
        case 5:
          uint64_t v165 = *v293;
          sub_2534F92D8();
          swift_allocError();
          *(void *)(v166 + 8) = 0;
          *(void *)(v166 + 16) = 0;
          *(void *)uint64_t v166 = v165;
          *(unsigned char *)(v166 + 24) = 96;
          goto LABEL_83;
        case 6:
          *(void *)v66 = 0;
          *((void *)v66 + 1) = 0;
          char v160 = 6;
LABEL_86:
          v66[16] = v160;
          goto LABEL_87;
        default:
          *(void *)v66 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10) & 1;
          *((void *)v66 + 1) = 0;
          v66[16] = 0;
LABEL_87:
          v115 = (uint64_t *)((char *)&v267 - v65);
LABEL_88:
          swift_storeEnumTagMultiPayload();
          uint64_t v167 = v84;
          break;
      }
      goto LABEL_89;
    case 3uLL:
      char v87 = *(unsigned char *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v88 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      v295[0] = v88;
      sub_2534C1C84(v88);
      unint64_t v89 = v294;
      sub_2534F9324(v295);
      if (v89) {
        goto LABEL_27;
      }
      uint64_t v90 = type metadata accessor for PrefixExpression(0);
      uint64_t v92 = v289;
      uint64_t v91 = v290;
      (*(void (**)(unsigned char *, char *, uint64_t))(v289 + 16))(&v63[*(int *)(v90 + 20)], v44, v290);
      unsigned char *v63 = v87;
      swift_storeEnumTagMultiPayload();
      sub_2534FBA30((uint64_t)v63, v291);
      sub_25346CA4C(v88);
      sub_2534FDFA0((uint64_t)v63, type metadata accessor for Expression);
      return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v44, v91);
    case 4uLL:
      uint64_t v73 = *(unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v74 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v75 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      switch(*(unsigned char *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10))
      {
        case 0:
          uint64_t v76 = v291;
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v298 = v75;
          sub_2534C1C84(v74);
          sub_2534C1C84(v75);
          unint64_t v77 = v294;
          sub_2534F9324(&v298);
          if (!v77)
          {
            sub_2534FBC70(v295, v52, v76);
            (*(void (**)(char *, uint64_t))(v289 + 8))(v52, v290);
          }
          goto LABEL_70;
        case 2:
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v298 = v75;
          uint64_t v158 = v291;
          unsigned int v159 = 1;
          return sub_2534FC010(v159, v295, &v298, v158);
        case 4:
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v298 = v75;
          uint64_t v158 = v291;
          unsigned int v159 = 3;
          return sub_2534FC010(v159, v295, &v298, v158);
        case 6:
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v298 = v75;
          uint64_t v158 = v291;
          unsigned int v159 = 5;
          return sub_2534FC010(v159, v295, &v298, v158);
        case 8:
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          unint64_t v298 = v75;
          uint64_t v158 = v291;
          unsigned int v159 = 7;
          return sub_2534FC010(v159, v295, &v298, v158);
        default:
          v156 = (char *)&v267 - v65;
          v295[0] = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          sub_2534C1C84(v74);
          sub_2534C1C84(v75);
          unint64_t v157 = v294;
          sub_2534F9324(v295);
          if (v157)
          {
LABEL_70:
            sub_25346CA4C(v75);
            unint64_t v113 = v74;
            return sub_25346CA4C(v113);
          }
          v295[0] = v75;
          sub_2534F9324(v295);
          AST.InfixOp.toInfixOp.getter(v73, v295);
          LODWORD(v293) = LOBYTE(v295[0]);
          uint64_t v187 = type metadata accessor for InfixExpression(0);
          unint64_t v294 = 0;
          uint64_t v188 = v187;
          uint64_t v189 = v290;
          v190 = *(void (**)(unsigned char *, char *, uint64_t))(v289 + 16);
          v190(&v156[*(int *)(v187 + 20)], v281, v290);
          v190(&v156[*(int *)(v188 + 24)], v47, v189);
          unsigned char *v156 = (_BYTE)v293;
          swift_storeEnumTagMultiPayload();
          sub_2534FBA30((uint64_t)v156, v291);
          sub_25346CA4C(v75);
          sub_25346CA4C(v74);
          sub_2534FDFA0((uint64_t)v156, type metadata accessor for Expression);
          v191 = *(void (**)(char *, uint64_t))(v289 + 8);
          v192 = v47;
          uint64_t v193 = v290;
          v191(v192, v290);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v191)(v281, v193);
          break;
      }
      return result;
    case 5uLL:
      uint64_t v104 = v64;
      v293 = (uint64_t *)((char *)&v267 - v65);
      unint64_t v105 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v106 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v107 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v295[0] = v105;
      sub_2534C1C84(v105);
      swift_bridgeObjectRetain();
      unint64_t v108 = v294;
      sub_2534F9324(v295);
      unint64_t v294 = v108;
      if (v108)
      {
        swift_bridgeObjectRelease();
        return sub_25346CA4C(v105);
      }
      else
      {
        uint64_t v124 = v289;
        (*(void (**)(uint64_t, char *, uint64_t))(v289 + 16))(v286, v41, v290);
        *(void *)v60 = v106;
        *((void *)v60 + 1) = v107;
        v60[16] = 3;
        uint64_t v269 = v104;
        swift_storeEnumTagMultiPayload();
        sub_2534FBA30((uint64_t)v60, (uint64_t)v38);
        v288 = type metadata accessor for Expression;
        sub_2534FDFA0((uint64_t)v60, type metadata accessor for Expression);
        v125 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v124 + 32);
        v126 = v293;
        uint64_t v127 = v290;
        v125(v293, v286, v290);
        uint64_t v128 = type metadata accessor for IndexExpression(0);
        v125((uint64_t *)((char *)v126 + *(int *)(v128 + 20)), (uint64_t)v38, v127);
        swift_storeEnumTagMultiPayload();
        sub_2534FBA30((uint64_t)v126, v291);
        sub_25346CA4C(v105);
        sub_2534FDFA0((uint64_t)v126, v288);
        return (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v41, v127);
      }
    case 6uLL:
      v109 = (char *)&v267 - v65;
      uint64_t v110 = v291;
      unint64_t v88 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v111 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      v295[0] = v88;
      sub_2534C1C84(v88);
      sub_2534C1C84(v111);
      unint64_t v112 = v294;
      sub_2534F9324(v295);
      if (v112)
      {
        sub_25346CA4C(v111);
        goto LABEL_27;
      }
      v295[0] = v111;
      sub_2534F9324(v295);
      unint64_t v294 = 0;
      v268 = v35;
      v169 = *(void (**)(char *, char *, uint64_t))(v289 + 16);
      uint64_t v170 = v290;
      v169(v109, v35, v290);
      uint64_t v171 = type metadata accessor for IndexExpression(0);
      v169(&v109[*(int *)(v171 + 20)], v285, v170);
      swift_storeEnumTagMultiPayload();
      sub_2534FBA30((uint64_t)v109, v110);
      sub_25346CA4C(v111);
      sub_25346CA4C(v88);
      sub_2534FDFA0((uint64_t)v109, type metadata accessor for Expression);
      v172 = *(void (**)(char *, uint64_t))(v289 + 8);
      v172(v285, v170);
      return ((uint64_t (*)(char *, uint64_t))v172)(v268, v170);
    case 7uLL:
      uint64_t v269 = v64;
      v293 = (uint64_t *)((char *)&v267 - v65);
      uint64_t v94 = v67 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v95 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v96 = *(char **)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v285 = *(char **)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v286 = v95;
      unint64_t v97 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      LODWORD(v287) = *(unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v98 = *(void *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      unint64_t v99 = v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v100 = v98;
      unint64_t v101 = v294;
      uint64_t v102 = sub_2534FC2F0(v100);
      if (v101)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v281 = v96;
      uint64_t v282 = v102;
      unint64_t v294 = v97;
      uint64_t v280 = v94;
      v268 = (char *)v99;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v118 = v287;
      if (v287) {
        goto LABEL_32;
      }
      unint64_t v88 = (unint64_t)v285;
      uint64_t v134 = v286;
      BOOL v135 = v286 == 7954803 && v285 == (char *)0xE300000000000000;
      unint64_t v136 = 0;
      if (!v135 && (sub_253B0A4C0() & 1) == 0)
      {
        BOOL v178 = v134 == 1801677168 && v88 == 0xE400000000000000;
        uint64_t v179 = v290;
        if (v178 || (sub_253B0A4C0() & 1) != 0)
        {
          if (*(void *)(v282 + 16) != 1) {
            goto LABEL_110;
          }
          uint64_t v180 = v282;
          uint64_t v181 = sub_253A71D6C(v282);
          if ((v183 & 1) == 0)
          {
            if (*(_DWORD *)(v180 + 36) == v182)
            {
              if (v181 != 1 << *(unsigned char *)(v180 + 32))
              {
                sub_253A72F10(v296, v181, v182, 0, v180);
                unint64_t v137 = v296[0];
                swift_bridgeObjectRetain();
                sub_2534C1C84(v137);
                swift_bridgeObjectRelease();
                sub_25346CA4C(v137);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                sub_2534C1C84(v137);
                swift_bridgeObjectRelease();
                if (v137 >> 60 == 6)
                {
                  unint64_t v142 = *(void *)((v137 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
                  int64_t v139 = *(void *)((v137 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                  sub_2534C1C84(v142);
                  sub_2534C1C84(v139);
                  sub_25346CA4C(v137);
                  if ((unint64_t)v139 >> 60 == 2 && *(unsigned char *)((v139 & 0xFFFFFFFFFFFFFFFLL) + 0x20) == 1)
                  {
                    v140 = *(void (***)(uint64_t (*)(uint64_t), uint64_t, unint64_t))((v139 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
                    v295[0] = v142;
                    v138 = v277;
                    sub_2534F9324(v295);
LABEL_163:
                    uint64_t v238 = v289;
                    v239 = *(void (**)(uint64_t *, char *, uint64_t))(v289 + 16);
                    unint64_t v294 = v136;
                    v240 = v293;
                    v239(v293, v138, v290);
                    *(uint64_t *)((char *)v240 + *(int *)(type metadata accessor for PickExpression(0) + 20)) = (uint64_t)v140;
                    swift_storeEnumTagMultiPayload();
                    sub_2534FBA30((uint64_t)v240, v291);
                    sub_25346CA4C(v142);
                    sub_25346CA4C(v139);
                    swift_bridgeObjectRelease();
                    sub_25346CA4C(v137);
                    sub_2534FDFA0((uint64_t)v240, type metadata accessor for Expression);
                    return (*(uint64_t (**)(char *, uint64_t))(v238 + 8))(v138, v290);
                  }
                  sub_25346CA4C(v139);
                  sub_25346CA4C(v142);
                  swift_bridgeObjectRelease();
                  sub_25346CA4C(v137);
                }
                else
                {
                  sub_25346CA4C(v137);
                  swift_bridgeObjectRelease();
                  sub_25346CA4C(v137);
                }
                goto LABEL_111;
              }
LABEL_110:
              swift_bridgeObjectRelease();
LABEL_111:
              sub_2534F92D8();
              swift_allocError();
              *(void *)(v184 + 8) = 0;
              *(void *)(v184 + 16) = 0;
              *(void *)uint64_t v184 = v268;
              *(unsigned char *)(v184 + 24) = 0x80;
LABEL_83:
              swift_retain();
              return swift_willThrow();
            }
            __break(1u);
LABEL_194:
            sub_2534F92D8();
            swift_allocError();
            *(void *)(v258 + 8) = 0;
            *(void *)(v258 + 16) = 0;
            *(void *)uint64_t v258 = v268;
            *(unsigned char *)(v258 + 24) = 0x80;
            swift_retain();
            swift_willThrow();
            swift_bridgeObjectRelease();
LABEL_27:
            unint64_t v113 = v88;
            return sub_25346CA4C(v113);
          }
          goto LABEL_227;
        }
        BOOL v195 = v134 == 0x6D7269666E6F63 && v88 == 0xE700000000000000;
        if (v195 || (sub_253B0A4C0() & 1) != 0)
        {
          uint64_t v196 = v282;
          v197 = v279;
          if (*(void *)(v282 + 16) != 1) {
            goto LABEL_124;
          }
          uint64_t v198 = sub_253A71D6C(v282);
          if (v200)
          {
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
            goto LABEL_231;
          }
          if (*(_DWORD *)(v196 + 36) == v199)
          {
            if (v198 != 1 << *(unsigned char *)(v196 + 32))
            {
              sub_253A72F10(v296, v198, v199, 0, v196);
              unint64_t v217 = v296[0];
              swift_bridgeObjectRetain();
              sub_2534C1C84(v217);
              swift_bridgeObjectRelease();
              sub_25346CA4C(v217);
              swift_bridgeObjectRelease();
              v295[0] = v217;
              sub_2534F9324(v295);
              uint64_t v225 = v289;
              v226 = v293;
              (*(void (**)(uint64_t *, char *, uint64_t))(v289 + 16))(v293, v197, v179);
              swift_storeEnumTagMultiPayload();
              sub_2534FBA30((uint64_t)v226, v291);
              swift_bridgeObjectRelease();
              sub_25346CA4C(v217);
              sub_2534FDFA0((uint64_t)v226, type metadata accessor for Expression);
              return (*(uint64_t (**)(char *, uint64_t))(v225 + 8))(v197, v179);
            }
            goto LABEL_124;
          }
          __break(1u);
          goto LABEL_206;
        }
        BOOL v202 = v134 == 0x686372616573 && v88 == 0xE600000000000000;
        if (v202 || (sub_253B0A4C0() & 1) != 0)
        {
          uint64_t v203 = sub_25353CEDC((uint64_t)&unk_270340B10);
          uint64_t v204 = v282;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v205 = sub_2534FC8D8(v204, v203);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v205 & 1) != 0 && *(void *)(v204 + 16))
          {
            unint64_t v206 = sub_25396E0AC();
            if ((v207 & 1) != 0
              && (unint64_t v208 = *(void *)(*(void *)(v204 + 56) + 8 * v206), v208 >> 60 == 2)
              && (uint64_t v209 = v208 & 0xFFFFFFFFFFFFFFFLL, !*(unsigned char *)(v209 + 32)))
            {
              char v210 = *(unsigned char *)(v209 + 16) & 1;
            }
            else
            {
              char v210 = 0;
            }
            if (*(void *)(v204 + 16))
            {
              unint64_t v211 = sub_25396E0AC();
              if (v212)
              {
                unint64_t v213 = *(void *)(*(void *)(v204 + 56) + 8 * v211);
                if (v213 >> 60 == 2 && *(unsigned char *)((v213 & 0xFFFFFFFFFFFFFFFLL) + 0x20) == 3)
                {
                  uint64_t v214 = *(void *)((v213 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
                  uint64_t v215 = *(void *)((v213 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                  sub_2534C1C84(*(void *)(*(void *)(v204 + 56) + 8 * v211));
                  sub_2534D363C(v214, v215, 3);
                  swift_bridgeObjectRelease();
                  v216 = v293;
                  uint64_t *v293 = v214;
                  v216[1] = v215;
                  *((unsigned char *)v216 + 16) = 0;
                  *((unsigned char *)v216 + 17) = v210;
                  *((unsigned char *)v216 + 18) = 0;
                  swift_storeEnumTagMultiPayload();
                  sub_2534FBA30((uint64_t)v216, v291);
                  sub_25346CA4C(v213);
                  v163 = type metadata accessor for Expression;
                  uint64_t v164 = (uint64_t)v216;
                  return sub_2534FDFA0(v164, v163);
                }
              }
            }
          }
          uint64_t v218 = v204;
          sub_2534F92D8();
          v219 = (void *)swift_allocError();
          *(void *)(v220 + 8) = 0;
          *(void *)(v220 + 16) = 0;
          *(void *)uint64_t v220 = v268;
          *(unsigned char *)(v220 + 24) = 0x80;
          swift_retain();
          swift_willThrow();
          v221 = v278;
          sub_253B08390();
          v222 = sub_253B089D0();
          os_log_type_t v223 = sub_253B09D80();
          if (os_log_type_enabled(v222, v223))
          {
            v224 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v224 = 0;
            MEMORY[0x25A269E60](v224, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v283 + 8))(v221, v284);
          uint64_t v227 = sub_2534FDC70(v218, v292);
          swift_bridgeObjectRelease();
          v176 = v293;
          uint64_t *v293 = v227;
          swift_storeEnumTagMultiPayload();
          sub_2534FBA30((uint64_t)v176, v291);

LABEL_98:
          v163 = type metadata accessor for Expression;
          uint64_t v164 = (uint64_t)v176;
          return sub_2534FDFA0(v164, v163);
        }
        BOOL v228 = v134 == 0x656E6F5F6B636970 && v88 == 0xE800000000000000;
        if (v228 || (LODWORD(v94) = v118, (sub_253B0A4C0() & 1) != 0))
        {
          uint64_t v229 = v282;
          if (*(void *)(v282 + 16) != 1) {
            goto LABEL_124;
          }
          uint64_t v230 = v282;
          uint64_t v231 = sub_253A71D6C(v282);
          if (v233)
          {
LABEL_231:
            __break(1u);
            goto LABEL_232;
          }
          if (*(_DWORD *)(v229 + 36) != v232)
          {
            __break(1u);
LABEL_216:
            BOOL v263 = v286 == 1852141679 && v285 == (char *)0xE400000000000000;
            if (v263 || (int v118 = v94, (sub_253B0A4C0() & 1) != 0))
            {
              if (*(void *)(v282 + 16) == 1)
              {
                uint64_t v264 = sub_253A71D6C(v179);
                if (v266)
                {
LABEL_236:
                  __break(1u);
                  JUMPOUT(0x2534FB9C8);
                }
                if (*(_DWORD *)(v179 + 36) != v265) {
                  goto LABEL_233;
                }
                if (v264 != 1 << *(unsigned char *)(v179 + 32))
                {
                  sub_253A72F10(v296, v264, v265, 0, v179);
                  unint64_t v88 = v296[0];
                  swift_bridgeObjectRetain();
                  sub_2534C1C84(v88);
                  swift_bridgeObjectRelease();
                  sub_25346CA4C(v88);
                  swift_bridgeObjectRelease();
                  v295[0] = v88;
                  sub_2534F9324(v295);
                  uint64_t v235 = v289;
                  uint64_t v234 = v290;
                  v236 = v293;
                  v237 = v271;
                  (*(void (**)(uint64_t *, char *, uint64_t))(v289 + 16))(v293, v271, v290);
                  goto LABEL_161;
                }
              }
LABEL_124:
              swift_bridgeObjectRelease();
              sub_2534F92D8();
              swift_allocError();
              *(void *)(v201 + 8) = 0;
              *(void *)(v201 + 16) = 0;
              *(void *)uint64_t v201 = v268;
              *(unsigned char *)(v201 + 24) = 0x80;
              goto LABEL_83;
            }
LABEL_32:
            uint64_t v119 = v292;
            uint64_t v120 = sub_2534FDC70(v282, v292);
            uint64_t v121 = v291;
            unint64_t v122 = v294;
            v123 = v281;
            uint64_t v175 = v120;
            swift_bridgeObjectRelease();
            if (!v118)
            {
              v185 = v293;
              if ((*(unsigned char *)(v119 + 24) & 1) == 0)
              {
                v194 = v285;
                swift_bridgeObjectRetain();
                swift_release();
                sub_2534F92D8();
                swift_allocError();
                *(void *)uint64_t v82 = v286;
                *(void *)(v82 + 8) = v194;
                *(void *)(v82 + 16) = 0;
                char v83 = -64;
LABEL_15:
                *(unsigned char *)(v82 + 24) = v83;
                return swift_willThrow();
              }
              v186 = v285;
              uint64_t *v293 = v286;
              v185[1] = (uint64_t)v186;
              v185[2] = 0;
              v185[3] = 0;
              v185[4] = v175;
              v115 = v185;
              swift_storeEnumTagMultiPayload();
              swift_bridgeObjectRetain();
              uint64_t v167 = v121;
              uint64_t v168 = (uint64_t)v115;
              goto LABEL_90;
            }
            v176 = v293;
            v177 = v285;
            uint64_t *v293 = v286;
            v176[1] = (uint64_t)v177;
            v176[2] = (uint64_t)v123;
            v176[3] = v122;
            v176[4] = v175;
            swift_storeEnumTagMultiPayload();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_2534FBA30((uint64_t)v176, v121);
            goto LABEL_98;
          }
          if (v231 == 1 << *(unsigned char *)(v229 + 32)) {
            goto LABEL_124;
          }
          sub_253A72F10(v296, v231, v232, 0, v230);
          unint64_t v88 = v296[0];
          swift_bridgeObjectRetain();
          sub_2534C1C84(v88);
          swift_bridgeObjectRelease();
          sub_25346CA4C(v88);
          swift_bridgeObjectRelease();
          v295[0] = v88;
          sub_2534F9324(v295);
          uint64_t v235 = v289;
          uint64_t v234 = v290;
          v236 = v293;
          v237 = v276;
          (*(void (**)(uint64_t *, char *, uint64_t))(v289 + 16))(v293, v276, v290);
        }
        else
        {
          uint64_t v179 = v282;
          BOOL v241 = v134 == 0x5F65766C6F736572 && v88 == 0xEC0000006C6F6F74;
          if (v241 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_retain();
            sub_2534F8BE4(v179, (unint64_t)v268);
            v243._rawValue = v242;
            swift_bridgeObjectRelease();
            ResolveToolExpression.init(toolIds:)(v243);
            v115 = v293;
            uint64_t *v293 = v295[0];
            goto LABEL_180;
          }
          BOOL v244 = v286 == 1868852853 && v285 == (char *)0xE400000000000000;
          if (v244 || (sub_253B0A4C0() & 1) != 0)
          {
            uint64_t v245 = sub_253A71D6C(v179);
            if (v247)
            {
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
              goto LABEL_234;
            }
            if (*(_DWORD *)(v179 + 36) != v246)
            {
              __break(1u);
LABEL_227:
              __break(1u);
              goto LABEL_228;
            }
            if (v245 == 1 << *(unsigned char *)(v179 + 32))
            {
              swift_bridgeObjectRelease();
              uint64_t v248 = v274;
              uint64_t v249 = v290;
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v274, 1, 1, v290);
              uint64_t v250 = v275;
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v275, 1, 1, v249);
              sub_2534FE054(v248, v250, &qword_269CDB460);
              v115 = v293;
              sub_2534FE0A4(v250, (uint64_t)v293, (void (*)(void))type metadata accessor for UndoExpression);
              goto LABEL_180;
            }
            sub_253A72F10(v296, v245, v246, 0, v179);
            unint64_t v88 = v296[0];
            swift_bridgeObjectRetain();
            sub_2534C1C84(v88);
            swift_bridgeObjectRelease();
            sub_25346CA4C(v88);
            uint64_t v251 = *(void *)(v179 + 16);
            swift_bridgeObjectRelease();
            if (v251 != 1) {
              goto LABEL_194;
            }
            v295[0] = v88;
            sub_2534F9324(v295);
            uint64_t v235 = v289;
            uint64_t v234 = v290;
            uint64_t v252 = v274;
            v237 = v273;
            (*(void (**)(uint64_t, char *, uint64_t))(v289 + 16))(v274, v273, v290);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v252, 0, 1, v234);
            uint64_t v253 = v275;
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v275, 1, 1, v234);
            sub_2534FE054(v252, v253, &qword_269CDB460);
            v236 = v293;
            sub_2534FE0A4(v253, (uint64_t)v293, (void (*)(void))type metadata accessor for UndoExpression);
          }
          else
          {
            BOOL v254 = v286 == 0x7463656A6572 && v285 == (char *)0xE600000000000000;
            if (v254 || (sub_253B0A4C0() & 1) != 0)
            {
              if (*(void *)(v179 + 16) != 1) {
                goto LABEL_124;
              }
              uint64_t v255 = sub_253A71D6C(v179);
              if (v257)
              {
LABEL_234:
                __break(1u);
                goto LABEL_235;
              }
              if (*(_DWORD *)(v179 + 36) != v256) {
                goto LABEL_229;
              }
              if (v255 == 1 << *(unsigned char *)(v179 + 32)) {
                goto LABEL_124;
              }
              sub_253A72F10(v296, v255, v256, 0, v179);
              unint64_t v88 = v296[0];
              swift_bridgeObjectRetain();
              sub_2534C1C84(v88);
              swift_bridgeObjectRelease();
              sub_25346CA4C(v88);
              swift_bridgeObjectRelease();
              v295[0] = v88;
              sub_2534F9324(v295);
              uint64_t v235 = v289;
              uint64_t v234 = v290;
              v236 = v293;
              v237 = v272;
              (*(void (**)(uint64_t *, char *, uint64_t))(v289 + 16))(v293, v272, v290);
            }
            else
            {
              BOOL v259 = v286 == 0x6C65636E6163 && v285 == (char *)0xE600000000000000;
              if (!v259 && (sub_253B0A4C0() & 1) == 0)
              {
LABEL_206:
                if (v286 == 0xD000000000000010 && v285 == (char *)0x8000000253B0B250
                  || (sub_253B0A4C0() & 1) != 0
                  || v286 == 0xD000000000000012 && v285 == (char *)0x8000000253B0B280
                  || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  v115 = v293;
LABEL_180:
                  swift_storeEnumTagMultiPayload();
                  uint64_t v167 = v291;
LABEL_89:
                  uint64_t v168 = (uint64_t)v115;
LABEL_90:
                  sub_2534FBA30(v168, v167);
                  v116 = type metadata accessor for Expression;
LABEL_91:
                  v163 = v116;
                  uint64_t v164 = (uint64_t)v115;
                  return sub_2534FDFA0(v164, v163);
                }
                goto LABEL_216;
              }
              if (*(void *)(v179 + 16) != 1) {
                goto LABEL_124;
              }
              uint64_t v260 = sub_253A71D6C(v179);
              if (v262)
              {
LABEL_235:
                __break(1u);
                goto LABEL_236;
              }
              if (*(_DWORD *)(v179 + 36) != v261) {
                goto LABEL_230;
              }
              if (v260 == 1 << *(unsigned char *)(v179 + 32)) {
                goto LABEL_124;
              }
              sub_253A72F10(v296, v260, v261, 0, v179);
              unint64_t v88 = v296[0];
              swift_bridgeObjectRetain();
              sub_2534C1C84(v88);
              swift_bridgeObjectRelease();
              sub_25346CA4C(v88);
              swift_bridgeObjectRelease();
              v295[0] = v88;
              sub_2534F9324(v295);
              uint64_t v235 = v289;
              uint64_t v234 = v290;
              v236 = v293;
              v237 = v270;
              (*(void (**)(uint64_t *, char *, uint64_t))(v289 + 16))(v293, v270, v290);
            }
          }
        }
LABEL_161:
        swift_storeEnumTagMultiPayload();
        sub_2534FBA30((uint64_t)v236, v291);
        swift_bridgeObjectRelease();
        sub_25346CA4C(v88);
        sub_2534FDFA0((uint64_t)v236, type metadata accessor for Expression);
        return (*(uint64_t (**)(char *, uint64_t))(v235 + 8))(v237, v234);
      }
      unint64_t v294 = 0;
      sub_25397174C(v282, v297);
      unint64_t v137 = v297[0];
      uint64_t v287 = v297[1];
      v138 = (char *)v297[3];
      unint64_t v136 = v297[4];
      int64_t v139 = (unint64_t)(v297[2] + 64) >> 6;
      v140 = (void (**)(uint64_t (*)(uint64_t), uint64_t, unint64_t))(v289 + 16);
      swift_bridgeObjectRetain();
      uint64_t v141 = MEMORY[0x263F8EE78];
      unint64_t v142 = v290;
      if (!v136) {
        goto LABEL_44;
      }
LABEL_43:
      unint64_t v143 = __clz(__rbit64(v136));
      v136 &= v136 - 1;
      unint64_t v144 = v143 | ((void)v138 << 6);
      while (1)
      {
        unint64_t v149 = *(void *)(*(void *)(v137 + 56) + 8 * v144);
        if (v149 >> 60 != 1)
        {
          sub_2534F92D8();
          swift_allocError();
          *(void *)(v174 + 8) = 0;
          *(void *)(v174 + 16) = 0;
          *(void *)uint64_t v174 = v149;
          *(unsigned char *)(v174 + 24) = 96;
          sub_2534C1C84(v149);
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        uint64_t v150 = swift_projectBox();
        (*v140)(v288, v150, v142);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253522EC4(0, *(void *)(v141 + 16) + 1, 1, v141);
          uint64_t v141 = v154;
        }
        unint64_t v152 = *(void *)(v141 + 16);
        unint64_t v151 = *(void *)(v141 + 24);
        if (v152 >= v151 >> 1)
        {
          sub_253522EC4(v151 > 1, v152 + 1, 1, v141);
          uint64_t v141 = v155;
        }
        *(void *)(v141 + 16) = v152 + 1;
        unint64_t v153 = v141
             + ((*(unsigned __int8 *)(v289 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80))
             + *(void *)(v289 + 72) * v152;
        unint64_t v142 = v290;
        (*(void (**)(unint64_t, uint64_t (*)(uint64_t), uint64_t))(v289 + 32))(v153, v288, v290);
        if (v136) {
          goto LABEL_43;
        }
LABEL_44:
        int64_t v145 = (int64_t)(v138 + 1);
        if (__OFADD__(v138, 1))
        {
          __break(1u);
          goto LABEL_163;
        }
        if (v145 >= v139) {
          break;
        }
        unint64_t v146 = *(void *)(v287 + 8 * v145);
        v147 = v138 + 1;
        if (!v146)
        {
          v147 = v138 + 2;
          if ((uint64_t)(v138 + 2) >= v139) {
            break;
          }
          unint64_t v146 = *(void *)(v287 + 8 * (void)v147);
          if (!v146)
          {
            v147 = v138 + 3;
            if ((uint64_t)(v138 + 3) >= v139) {
              break;
            }
            unint64_t v146 = *(void *)(v287 + 8 * (void)v147);
            if (!v146)
            {
              v147 = v138 + 4;
              if ((uint64_t)(v138 + 4) >= v139) {
                break;
              }
              unint64_t v146 = *(void *)(v287 + 8 * (void)v147);
              if (!v146)
              {
                v147 = v138 + 5;
                if ((uint64_t)(v138 + 5) >= v139) {
                  break;
                }
                unint64_t v146 = *(void *)(v287 + 8 * (void)v147);
                if (!v146)
                {
                  v147 = v138 + 6;
                  if ((uint64_t)(v138 + 6) >= v139) {
                    break;
                  }
                  unint64_t v146 = *(void *)(v287 + 8 * (void)v147);
                  if (!v146)
                  {
                    int64_t v148 = (int64_t)(v138 + 7);
                    while (v148 < v139)
                    {
                      unint64_t v146 = *(void *)(v287 + 8 * v148++);
                      if (v146)
                      {
                        v147 = (char *)(v148 - 1);
                        goto LABEL_61;
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_61:
        unint64_t v136 = (v146 - 1) & v146;
        unint64_t v144 = __clz(__rbit64(v146)) + ((void)v147 << 6);
        v138 = v147;
      }
      swift_bridgeObjectRelease();
      swift_release();
      v117 = v293;
      uint64_t *v293 = v141;
LABEL_30:
      swift_storeEnumTagMultiPayload();
      sub_2534FBA30((uint64_t)v117, v291);
      return sub_2534FDFA0((uint64_t)v117, type metadata accessor for Expression);
    case 8uLL:
      uint64_t v114 = swift_projectBox();
      v115 = (uint64_t *)v287;
      sub_2534FE000(v114, v287, (void (*)(void))type metadata accessor for AST.UpdateParameters);
      sub_2534FCA70((char *)v115, v291);
      v116 = (uint64_t (*)(uint64_t))type metadata accessor for AST.UpdateParameters;
      goto LABEL_91;
    case 9uLL:
      if (v67 != 0x9000000000000000) {
        goto LABEL_29;
      }
      uint64_t v78 = v282;
      sub_253B082E0();
      v79 = sub_253B089D0();
      os_log_type_t v80 = sub_253B09D80();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v81 = 0;
        MEMORY[0x25A269E60](v81, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v78, v284);
      sub_2534F92D8();
      swift_allocError();
      *(void *)(v82 + 8) = 0;
      *(void *)(v82 + 16) = 0;
      *(void *)uint64_t v82 = 0x9000000000000000;
      char v83 = 64;
      goto LABEL_15;
    default:
      uint64_t v69 = *(void *)(v67 + 16);
      uint64_t v68 = *(void *)(v67 + 24);
      BOOL v70 = v69 == 4935253 && v68 == 0xE300000000000000;
      if (v70 || (v71 = (char *)&v267 - v65, char v72 = sub_253B0A4C0(), v66 = v71, (v72 & 1) != 0))
      {
LABEL_29:
        v117 = (uint64_t *)v66;
        goto LABEL_30;
      }
      uint64_t v129 = v291;
      uint64_t v130 = *(void *)(v292 + 8);
      swift_bridgeObjectRetain_n();
      uint64_t v131 = v280;
      sub_253466A74(v130, v280);
      swift_bridgeObjectRelease();
      uint64_t v132 = v290;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v131, 1, v290) == 1)
      {
        sub_2534FDF40(v131);
        *(void *)v71 = v69;
        *((void *)v71 + 1) = v68;
        v71[16] = 5;
        swift_storeEnumTagMultiPayload();
        uint64_t v133 = v286;
        sub_2534FBA30((uint64_t)v71, v286);
        sub_2534FDFA0((uint64_t)v71, type metadata accessor for Expression);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v289 + 32))(v129, v133, v132);
      }
      else
      {
        swift_bridgeObjectRelease();
        v173 = *(void (**)(char *, uint64_t, uint64_t))(v289 + 32);
        v173(v56, v131, v132);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v173)(v129, v56, v132);
      }
  }
}

uint64_t sub_2534FBA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_253462A5C(&qword_269CDCB30);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ProgramStatement(0);
  uint64_t v9 = (int *)(v8 - 8);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  atomic_fetch_add_explicit((atomic_uint *volatile)(v2[2] + 16), 1u, memory_order_relaxed);
  sub_253B059B0();
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a2, v14);
  sub_2534FE000(a1, (uint64_t)&v13[v9[7]], (void (*)(void))type metadata accessor for Expression);
  uint64_t v15 = sub_253B09150();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 1, 1, v15);
  uint64_t v16 = v9[8];
  uint64_t v17 = (uint64_t)&v13[v9[9]];
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v17, 1, 1, v15);
  v13[v16] = 0;
  sub_2534FE054((uint64_t)v7, v17, &qword_269CDCB30);
  sub_2539DFA64();
  uint64_t v18 = *(void *)(*v2 + 16);
  sub_2539DFB38(v18);
  uint64_t v19 = v10;
  uint64_t v20 = *v2;
  *(void *)(v20 + 16) = v18 + 1;
  uint64_t result = sub_2534FE0A4((uint64_t)v13, v20+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v19 + 72) * v18, (void (*)(void))type metadata accessor for ProgramStatement);
  *uint64_t v2 = v20;
  return result;
}

uint64_t sub_2534FBC70@<X0>(unint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v37 = type metadata accessor for Expression(0);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_253B059D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = sub_253462A5C(&qword_269CDB460);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 >> 60)
  {
    unint64_t v40 = *a1;
    uint64_t v36 = v3;
    uint64_t v20 = v39;
    uint64_t result = sub_2534FD198((uint64_t)v12, &v40);
    if (!v20)
    {
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v34 = v21;
      uint64_t v35 = result;
      uint64_t v33 = v22;
      uint64_t v39 = 0;
      int v32 = v23;
      v24(v14, v12, v8);
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v31(v7, v14, v8);
      sub_253462A5C(&qword_269CDDC98);
      uint64_t v25 = (int *)(type metadata accessor for UpdateParametersExpression.UpdateParameter(0) - 8);
      unint64_t v26 = (*(unsigned __int8 *)(*(void *)v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v25 + 80);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_253B22680;
      unint64_t v28 = v27 + v26;
      v31((char *)(v28 + v25[9]), a2, v8);
      uint64_t v29 = v34;
      *(void *)unint64_t v28 = v35;
      *(void *)(v28 + 8) = v29;
      *(void *)(v28 + 16) = v33;
      *(unsigned char *)(v28 + 24) = v32 & 1;
      *(unsigned char *)(v28 + 25) = 1;
      *(void *)&v7[*(int *)(type metadata accessor for UpdateParametersExpression(0) + 20)] = v27;
      swift_storeEnumTagMultiPayload();
      sub_2534FBA30((uint64_t)v7, v38);
      sub_2534FDFA0((uint64_t)v7, type metadata accessor for Expression);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v18(v17, (uint64_t)a2, v8);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v8);
    swift_bridgeObjectRetain();
    sub_253469170();
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v38, a2, v8);
  }
  return result;
}

uint64_t sub_2534FC010@<X0>(unsigned int a1@<W0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v37 = a1;
  uint64_t v38 = a4;
  uint64_t v7 = type metadata accessor for Expression(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253B059D0();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  unint64_t v40 = (char *)&v31 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v31 - v16;
  unint64_t v18 = *a2;
  unint64_t v41 = *a3;
  uint64_t result = sub_2534F9324(&v41);
  if (!v4)
  {
    uint64_t v33 = v7;
    uint64_t v34 = v13;
    uint64_t v35 = v17;
    uint64_t v36 = v10;
    uint64_t v20 = v39;
    uint64_t v21 = v40;
    unint64_t v41 = v18;
    sub_2534F9324(&v41);
    AST.InfixOp.toInfixOp.getter(v37, &v41);
    unsigned int v37 = v41;
    uint64_t v32 = type metadata accessor for InfixExpression(0);
    uint64_t v22 = v9;
    int v23 = &v9[*(int *)(v32 + 20)];
    uint64_t v24 = v20;
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v26 = v36;
    v25(v23, v21, v36);
    uint64_t v27 = v25;
    unint64_t v28 = v35;
    v27(&v22[*(int *)(v32 + 24)], v35, v26);
    *uint64_t v22 = v37;
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = v34;
    sub_2534FBA30((uint64_t)v22, (uint64_t)v34);
    sub_2534FDFA0((uint64_t)v22, type metadata accessor for Expression);
    unint64_t v41 = v18;
    sub_2534FBC70(&v41, v29, v38);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v24 + 8);
    v30(v29, v26);
    v30(v21, v26);
    return ((uint64_t (*)(char *, uint64_t))v30)(v28, v26);
  }
  return result;
}

uint64_t sub_2534FC2F0(uint64_t a1)
{
  sub_25397174C(a1, v36);
  uint64_t v33 = v36[0];
  int64_t v34 = v36[3];
  unint64_t v1 = v36[4];
  uint64_t v31 = v36[1];
  int64_t v32 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  if (!v1) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v3 = __clz(__rbit64(v1));
  v1 &= v1 - 1;
  unint64_t v4 = v3 | (v34 << 6);
  while (1)
  {
    uint64_t v9 = *(void *)(v33 + 48) + 32 * v4;
    uint64_t v11 = *(void *)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v12 = *(void *)(v9 + 16);
    int v13 = *(unsigned __int8 *)(v9 + 24);
    unint64_t v14 = *(void *)(*(void *)(v33 + 56) + 8 * v4);
    if (*(unsigned char *)(v9 + 24))
    {
      if (v13 != 2)
      {
        sub_2534F92D8();
        swift_allocError();
        *(void *)uint64_t v29 = v11;
        *(void *)(v29 + 8) = v10;
        *(void *)(v29 + 16) = v12;
        *(unsigned char *)(v29 + 24) = -95;
        sub_25346CA34(v11, v10, v12, 1u);
        sub_25346CA34(v11, v10, v12, 1u);
        sub_2534C1C84(v14);
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_2534D2608(v11, v10, v12, 1u);
        sub_25346CA4C(v14);
LABEL_36:
        swift_release();
        return (uint64_t)v2;
      }
      v36[6] = *(void *)v9;
      sub_25346CA34(v11, v10, v12, 2u);
      sub_2534C1C84(v14);
      sub_253B0A480();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      uint64_t v16 = 91;
      unint64_t v15 = 0xE100000000000000;
    }
    else
    {
      sub_25346CA34(v11, v10, v12, 0);
      sub_25346CA34(v11, v10, v12, 0);
      sub_2534C1C84(v14);
      uint64_t v16 = v11;
      unint64_t v15 = v10;
    }
    sub_25346CA34(v11, v10, v12, v13);
    unint64_t v17 = v14;
    sub_2534C1C84(v14);
    uint64_t v35 = v12;
    sub_2534D2608(v11, v10, v12, v13);
    swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = sub_25396E0AC();
    if (__OFADD__(v2[2], (v19 & 1) == 0)) {
      break;
    }
    unint64_t v20 = v18;
    char v21 = v19;
    sub_253462A5C(&qword_269CDCD08);
    if (sub_253B0A190())
    {
      unint64_t v22 = sub_25396E0AC();
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_40;
      }
      unint64_t v20 = v22;
    }
    if (v21)
    {
      uint64_t v24 = v2[7];
      sub_25346CA4C(*(void *)(v24 + 8 * v20));
      *(void *)(v24 + 8 * v20) = v17;
    }
    else
    {
      v2[(v20 >> 6) + 8] |= 1 << v20;
      uint64_t v25 = (uint64_t *)(v2[6] + 16 * v20);
      *uint64_t v25 = v16;
      v25[1] = v15;
      *(void *)(v2[7] + 8 * v20) = v17;
      uint64_t v26 = v2[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_38;
      }
      v2[2] = v28;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2534D2608(v11, v10, v35, v13);
    sub_25346CA4C(v17);
    if (v1) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v5 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      goto LABEL_39;
    }
    if (v5 >= v32) {
      goto LABEL_36;
    }
    unint64_t v6 = *(void *)(v31 + 8 * v5);
    int64_t v7 = v34 + 1;
    if (!v6)
    {
      int64_t v7 = v34 + 2;
      if (v34 + 2 >= v32) {
        goto LABEL_36;
      }
      unint64_t v6 = *(void *)(v31 + 8 * v7);
      if (!v6)
      {
        int64_t v7 = v34 + 3;
        if (v34 + 3 >= v32) {
          goto LABEL_36;
        }
        unint64_t v6 = *(void *)(v31 + 8 * v7);
        if (!v6)
        {
          int64_t v7 = v34 + 4;
          if (v34 + 4 >= v32) {
            goto LABEL_36;
          }
          unint64_t v6 = *(void *)(v31 + 8 * v7);
          if (!v6)
          {
            int64_t v7 = v34 + 5;
            if (v34 + 5 >= v32) {
              goto LABEL_36;
            }
            unint64_t v6 = *(void *)(v31 + 8 * v7);
            if (!v6)
            {
              int64_t v7 = v34 + 6;
              if (v34 + 6 >= v32) {
                goto LABEL_36;
              }
              unint64_t v6 = *(void *)(v31 + 8 * v7);
              if (!v6)
              {
                int64_t v8 = v34 + 7;
                while (v8 < v32)
                {
                  unint64_t v6 = *(void *)(v31 + 8 * v8++);
                  if (v6)
                  {
                    int64_t v7 = v8 - 1;
                    goto LABEL_20;
                  }
                }
                goto LABEL_36;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v1 = (v6 - 1) & v6;
    unint64_t v4 = __clz(__rbit64(v6)) + (v7 << 6);
    int64_t v34 = v7;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = sub_253B0A550();
  __break(1u);
  return result;
}

unint64_t ExpressionFlattener.BuiltinIdentifiers.rawValue.getter()
{
  unint64_t result = 7954803;
  switch(*v0)
  {
    case 1:
      unint64_t result = 1801677168;
      break;
    case 2:
      unint64_t result = 0x6D7269666E6F63;
      break;
    case 3:
      unint64_t result = 0x686372616573;
      break;
    case 4:
      unint64_t result = 0x656E6F5F6B636970;
      break;
    case 5:
      unint64_t result = 0x5F65766C6F736572;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 1868852853;
      break;
    case 8:
      unint64_t result = 0x7463656A6572;
      break;
    case 9:
      unint64_t result = 0x6C65636E6163;
      break;
    case 0xA:
      unint64_t result = 0xD000000000000012;
      break;
    case 0xB:
      unint64_t result = 1852141679;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534FC8D8(uint64_t a1, uint64_t a2)
{
  sub_25397174C(a1, v20);
  uint64_t v3 = v20[0];
  uint64_t v4 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v20[4];
  int64_t v7 = (unint64_t)(v20[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      goto LABEL_22;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_22;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_22;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_22;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_22;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_19;
                }
              }
LABEL_22:
              swift_bridgeObjectRelease();
              swift_release();
              return 1;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
LABEL_20:
    unint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_253B0167C(v16, v17, a2);
    char v19 = v18;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2534FCA70@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v46 = a2;
  uint64_t v44 = type metadata accessor for Expression(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  uint64_t v51 = *(void *)(updated - 8);
  uint64_t v52 = updated;
  uint64_t v7 = MEMORY[0x270FA5388](updated);
  uint64_t v50 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v61 = (uint64_t)&v42 - v9;
  uint64_t v62 = sub_253B059D0();
  uint64_t v10 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  v63 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for AST.UpdateParameters() + 20);
  uint64_t v43 = a1;
  uint64_t v13 = *(void *)&a1[v12];
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v47 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v53 = (void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  int64_t v48 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v49 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v54 = v13;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v20 = MEMORY[0x263F8EE78];
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v60 = (v17 - 1) & v17;
  for (unint64_t i = __clz(__rbit64(v17)) | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    uint64_t v25 = *(void *)(v54 + 48) + 32 * i;
    uint64_t v27 = *(void *)v25;
    uint64_t v26 = *(void *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    int v29 = *(unsigned __int8 *)(v25 + 24);
    uint64_t v30 = (unsigned __int8 *)(*(void *)(v54 + 56) + 16 * i);
    int v59 = *v30;
    unint64_t v31 = *((void *)v30 + 1);
    uint64_t v64 = v31;
    sub_2534C1C84(v31);
    sub_25346CA34(v27, v26, v28, v29);
    sub_2534C1C84(v31);
    sub_2534F9324(&v64);
    if (v3)
    {
      sub_2534D2608(v27, v26, v28, v29);
      sub_25346CA4C(v31);
      sub_25346CA4C(v31);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    sub_25346CA4C(v31);
    sub_25346CA34(v27, v26, v28, v29);
    sub_2534C1C84(v31);
    sub_25346CA4C(v31);
    uint64_t v57 = v20;
    uint64_t v58 = 0;
    int64_t v56 = v19;
    if (!v29)
    {
      sub_25346CA34(v27, v26, v28, 0);
      sub_2534C1C84(v31);
      sub_25346CA4C(v31);
      sub_2534D2608(v27, v26, v28, 0);
      uint64_t v33 = 0;
      char v32 = 1;
      goto LABEL_21;
    }
    if (v29 == 1)
    {
      sub_25346CA34(v27, v26, v28, 1u);
      sub_2534C1C84(v31);
      sub_25346CA4C(v31);
      sub_2534D2608(v27, v26, v28, 1u);
      char v32 = 0;
      uint64_t v33 = v28;
LABEL_21:
      uint64_t v55 = v27;
      unint64_t v34 = v26;
      goto LABEL_23;
    }
    uint64_t v64 = 91;
    unint64_t v65 = 0xE100000000000000;
    uint64_t v66 = v27;
    sub_253B0A480();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253B09860();
    unint64_t v34 = v65;
    uint64_t v55 = v64;
    sub_25346CA34(v27, v26, v28, 2u);
    sub_2534C1C84(v31);
    sub_25346CA4C(v31);
    uint64_t v33 = 0;
    char v32 = 1;
LABEL_23:
    sub_25346CA34(v27, v26, v28, v29);
    sub_2534C1C84(v31);
    sub_2534D2608(v27, v26, v28, v29);
    sub_25346CA4C(v31);
    uint64_t v35 = v61;
    (*v53)(v61 + *(int *)(v52 + 28), v63, v62);
    *(void *)uint64_t v35 = v55;
    *(void *)(v35 + 8) = v34;
    *(void *)(v35 + 16) = v33;
    *(unsigned char *)(v35 + 24) = v32;
    *(unsigned char *)(v35 + 25) = v59;
    uint64_t v36 = v50;
    sub_2534FE000(v35, v50, (void (*)(void))type metadata accessor for UpdateParametersExpression.UpdateParameter);
    uint64_t v20 = v57;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253522E7C(0, *(void *)(v20 + 16) + 1, 1, v20);
      uint64_t v20 = v39;
    }
    unint64_t v38 = *(void *)(v20 + 16);
    unint64_t v37 = *(void *)(v20 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_253522E7C(v37 > 1, v38 + 1, 1, v20);
      uint64_t v20 = v40;
    }
    *(void *)(v20 + 16) = v38 + 1;
    sub_2534FE0A4(v36, v20+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v51 + 72) * v38, (void (*)(void))type metadata accessor for UpdateParametersExpression.UpdateParameter);
    sub_2534D2608(v27, v26, v28, v29);
    sub_25346CA4C(v31);
    sub_2534FDFA0(v61, type metadata accessor for UpdateParametersExpression.UpdateParameter);
    uint64_t result = (*v49)(v63, v62);
    uint64_t v3 = v58;
    int64_t v19 = v56;
    unint64_t v17 = v60;
    if (v60) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v19 >= v48) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v47 + 8 * v19);
    if (!v23) {
      break;
    }
LABEL_15:
    uint64_t v60 = (v23 - 1) & v23;
  }
  int64_t v24 = v19 + 1;
  if (v19 + 1 >= v48) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v47 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v19 + 2;
  if (v19 + 2 >= v48) {
    goto LABEL_34;
  }
  unint64_t v23 = *(void *)(v47 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v24 = v19 + 3;
  if (v19 + 3 >= v48)
  {
LABEL_34:
    swift_release();
    uint64_t v41 = (uint64_t)v45;
    (*v53)((uint64_t)v45, v43, v62);
    *(void *)(v41 + *(int *)(type metadata accessor for UpdateParametersExpression(0) + 20)) = v20;
    swift_storeEnumTagMultiPayload();
    sub_2534FBA30(v41, v46);
    return sub_2534FDFA0(v41, type metadata accessor for Expression);
  }
  unint64_t v23 = *(void *)(v47 + 8 * v24);
  if (v23)
  {
LABEL_14:
    int64_t v19 = v24;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v48) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v47 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_15;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_2534FD198(uint64_t a1, unint64_t *a2)
{
  uint64_t v5 = sub_253B059D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v27 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v27 - v13;
  unint64_t v15 = *a2;
  if (((1 << (v15 >> 60)) & 0x39F) != 0)
  {
    sub_2534F92D8();
    swift_allocError();
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = v15;
    *(unsigned char *)(v16 + 24) = 0;
    sub_2534C1C84(v15);
    swift_willThrow();
    return a1;
  }
  uint64_t v30 = a1;
  if (v15 >> 60 == 5)
  {
    unint64_t v18 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    a1 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
    unint64_t v31 = v18;
    sub_2534C1C84(v18);
    swift_bridgeObjectRetain();
    sub_2534F9324(&v31);
    if (!v2)
    {
      sub_25346CA4C(v18);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v30, v14, v5);
      return a1;
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = v18;
    goto LABEL_9;
  }
  unint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  unint64_t v31 = v21;
  sub_2534C1C84(v21);
  unint64_t v29 = v20;
  sub_2534C1C84(v20);
  uint64_t v22 = sub_2534FD198(v9, &v31);
  if (v2)
  {
    sub_25346CA4C(v29);
    unint64_t v19 = v21;
LABEL_9:
    sub_25346CA4C(v19);
    return a1;
  }
  a1 = v22;
  unint64_t v28 = v21;
  unint64_t v23 = v9;
  int64_t v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v24(v12, v23, v5);
  unint64_t v25 = v29;
  if (v29 >> 60 == 2 && *(unsigned char *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 0x20) == 1)
  {
    sub_25346CA4C(v28);
    sub_25346CA4C(v25);
    v24((char *)v30, v12, v5);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_2534F92D8();
    swift_allocError();
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0;
    *(void *)uint64_t v26 = v25;
    *(unsigned char *)(v26 + 24) = 96;
    sub_2534C1C84(v25);
    swift_willThrow();
    sub_25346CA4C(v28);
    sub_25346CA4C(v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  return a1;
}

IntelligenceFlowPlannerSupport::ExpressionFlattener::BuiltinIdentifiers_optional __swiftcall ExpressionFlattener.BuiltinIdentifiers.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_253B0A2A0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 12;
  if (v3 < 0xC) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_2534FD530(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_25357B8E0(*a1, *a2);
}

uint64_t sub_2534FD53C()
{
  return sub_25397F888(*v0);
}

uint64_t sub_2534FD544(uint64_t a1)
{
  return sub_2539801AC(a1, *v1);
}

uint64_t sub_2534FD54C(uint64_t a1)
{
  return sub_253980CB4(a1, *v1);
}

IntelligenceFlowPlannerSupport::ExpressionFlattener::BuiltinIdentifiers_optional sub_2534FD554(Swift::String *a1)
{
  return ExpressionFlattener.BuiltinIdentifiers.init(rawValue:)(*a1);
}

unint64_t sub_2534FD560@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExpressionFlattener.BuiltinIdentifiers.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static ExpressionFlattener.OtherConstants.explicitResolutionRequest.getter()
{
  return 4935253;
}

unint64_t sub_2534FD5A4()
{
  unint64_t result = qword_269CDDC90;
  if (!qword_269CDDC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDC90);
  }
  return result;
}

uint64_t destroy for ExpressionFlattener()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ExpressionFlattener(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExpressionFlattener(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ExpressionFlattener(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionFlattener(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionFlattener(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ExpressionFlattener()
{
}

uint64_t getEnumTagSinglePayload for ExpressionFlattener.BuiltinIdentifiers(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExpressionFlattener.BuiltinIdentifiers(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534FD948);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void type metadata accessor for ExpressionFlattener.BuiltinIdentifiers()
{
}

void type metadata accessor for ExpressionFlattener.OtherConstants()
{
}

unint64_t sub_2534FD988(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 5)
  {
    case 0:
    case 2:
    case 3:
    case 4:
      unint64_t result = sub_2534C1C84(result);
      break;
    case 1:
      unint64_t result = swift_retain();
      break;
    case 5:
      unint64_t result = sub_25346CA34(result, a2, a3, a4 & 0x1F);
      break;
    case 6:
      unint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2534FD9F0(uint64_t a1)
{
  return sub_2534FDA04(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

unint64_t sub_2534FDA04(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a4 >> 5)
  {
    case 0:
    case 2:
    case 3:
    case 4:
      unint64_t result = sub_25346CA4C(result);
      break;
    case 1:
      unint64_t result = swift_release();
      break;
    case 5:
      unint64_t result = sub_2534D2608(result, a2, a3, a4 & 0x1F);
      break;
    case 6:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534FDA6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_2534FD988(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_2534FDACC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_2534FD988(*(void *)a2, v4, v5, v6);
  unint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_2534FDA04(v7, v8, v9, v10);
  return a1;
}

uint64_t sub_2534FDB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_2534FDA04(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_2534FDB8C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3A && *(unsigned char *)(a1 + 25))
    {
      unsigned int v2 = *(_DWORD *)a1 + 57;
    }
    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 24) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 24) >> 2) & 7))) ^ 0x3F;
      if (v2 >= 0x39) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t sub_2534FDBD8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x39)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 58;
    if (a3 >= 0x3A) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3A) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_2534FDC34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 5;
}

uint64_t sub_2534FDC40(uint64_t result)
{
  *(unsigned char *)(result + 24) &= 0x1Fu;
  return result;
}

uint64_t sub_2534FDC50(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = *(unsigned char *)(result + 24) & 3 | (32 * a2);
  return result;
}

void type metadata accessor for ExpressionFlattenerError()
{
}

uint64_t sub_2534FDC70(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v34 = sub_253B059D0();
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  unsigned __int8 v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDDCA0);
  uint64_t result = sub_253B0A230();
  uint64_t v10 = result;
  int64_t v11 = 0;
  uint64_t v35 = a1;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v29 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v32 = result + 64;
  uint64_t v33 = v5;
  int64_t v30 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v31 = v5 + 32;
  uint64_t v37 = result;
  if ((v14 & v12) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v16 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v11 << 6))
  {
    unint64_t v21 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    unint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8 * i);
    unint64_t v24 = v38;
    swift_bridgeObjectRetain();
    sub_2534C1C84(v24);
    sub_2534F9324(&v38);
    if (v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v37;
      swift_release();
      sub_25346CA4C(v24);
      return v10;
    }
    sub_25346CA4C(v24);
    *(void *)(v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v10 = v37;
    unint64_t v25 = (void *)(*(void *)(v37 + 48) + 16 * i);
    *unint64_t v25 = v22;
    v25[1] = v23;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v33 + 32))(*(void *)(v10 + 56) + *(void *)(v33 + 72) * i, v8, v34);
    uint64_t v26 = *(void *)(v10 + 16);
    BOOL v18 = __OFADD__(v26, 1);
    uint64_t v27 = v26 + 1;
    if (v18)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(void *)(v10 + 16) = v27;
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v18 = __OFADD__(v11++, 1);
    if (v18) {
      goto LABEL_28;
    }
    if (v11 >= v30) {
      return v10;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v11);
    if (!v19) {
      break;
    }
LABEL_15:
    unint64_t v15 = (v19 - 1) & v19;
  }
  int64_t v20 = v11 + 1;
  if (v11 + 1 >= v30) {
    return v10;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_14;
  }
  int64_t v20 = v11 + 2;
  if (v11 + 2 >= v30) {
    return v10;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_14;
  }
  int64_t v20 = v11 + 3;
  if (v11 + 3 >= v30) {
    return v10;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_14:
    int64_t v11 = v20;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v30) {
      return v37;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_15;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2534FDF40(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDB460);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2534FDFA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2534FE000(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_2534FE0F8();
  uint64_t v4 = sub_2534FE10C();
  v5(v4);
  return a2;
}

uint64_t sub_2534FE054(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_2534FE0F8();
  uint64_t v4 = sub_2534FE10C();
  v5(v4);
  return a2;
}

uint64_t sub_2534FE0A4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_2534FE0F8();
  uint64_t v4 = sub_2534FE10C();
  v5(v4);
  return a2;
}

uint64_t sub_2534FE10C()
{
  return v0;
}

uint64_t sub_2534FE11C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(sub_253462A5C(&qword_269CDCCE0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_2539717F8();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v7[1] = v5;
  uint64_t result = sub_25350AE7C(v7);
  *a1 = v3;
  return result;
}

uint64_t sub_2534FE1C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v2 = v16;
    uint64_t v4 = type metadata accessor for AST.FlatValue(0);
    sub_25346CB34(v4);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v8 = *(void *)(v7 + 72);
    do
    {
      AST.FlatValue.description.getter();
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      unint64_t v13 = *(void *)(v16 + 16);
      if (v13 >= *(void *)(v16 + 24) >> 1) {
        sub_2539E6C84();
      }
      *(void *)(v16 + 16) = v13 + 1;
      uint64_t v14 = v16 + 16 * v13;
      *(void *)(v14 + 32) = v10;
      *(void *)(v14 + 40) = v12;
      v6 += v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2534FE2DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v2 = v13;
    uint64_t v10 = sub_253462A5C(&qword_269CDCCE0);
    uint64_t v4 = (uint64_t *)(a1
                   + ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80)));
    uint64_t v5 = *(void *)(*(void *)(v10 - 8) + 72);
    do
    {
      uint64_t v11 = *v4;
      uint64_t v12 = v4[1];
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_253B09860();
      AST.FlatValue.description.getter(v6);
      sub_253B09860();
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v13 + 16);
      if (v7 >= *(void *)(v13 + 24) >> 1) {
        sub_2539E6C84();
      }
      uint64_t v4 = (uint64_t *)((char *)v4 + v5);
      *(void *)(v13 + 16) = v7 + 1;
      uint64_t v8 = v13 + 16 * v7;
      *(void *)(v8 + 32) = v11;
      *(void *)(v8 + 40) = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AST.FlatAssignExpr.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AST.FlatAssignExpr.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AST.FlatAssignExpr.name.modify())()
{
  return nullsub_1;
}

uint64_t AST.FlatAssignExpr.expr.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AST.FlatAssignExpr(0);
  return sub_253509FDC(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for AST.FlatExpr);
}

uint64_t type metadata accessor for AST.FlatAssignExpr(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDE130);
}

uint64_t type metadata accessor for AST.FlatExpr(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDE150);
}

uint64_t AST.FlatAssignExpr.expr.setter()
{
  return sub_25350D780();
}

uint64_t (*AST.FlatAssignExpr.expr.modify())()
{
  return nullsub_1;
}

uint64_t AST.FlatAssignExpr.init(name:expr:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for AST.FlatAssignExpr(0);
  sub_2534F87A4();
  return sub_253509F00();
}

uint64_t AST.FlatAssignExpr.description.getter()
{
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain();
  sub_253B09860();
  type metadata accessor for AST.FlatAssignExpr(0);
  AST.FlatExpr.description.getter();
  sub_253B09860();
  swift_bridgeObjectRelease();
  return v2;
}

void static AST.FlatAssignExpr.== infix(_:_:)()
{
  sub_2534DA0C4();
  BOOL v3 = *v2 == *v0 && *(void *)(v1 + 8) == v0[1];
  if (v3 || (sub_253B0A4C0() & 1) != 0)
  {
    type metadata accessor for AST.FlatAssignExpr(0);
    static AST.FlatExpr.== infix(_:_:)();
  }
}

void static AST.FlatExpr.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v195 = v4;
  uint64_t v196 = v5;
  uint64_t v171 = sub_253462A5C(&qword_269CDDCC0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534D8F5C((uint64_t)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v10);
  sub_2534F8208((uint64_t)&v166 - v11);
  sub_253B055C0();
  sub_253465998();
  uint64_t v193 = v13;
  uint64_t v194 = v12;
  MEMORY[0x270FA5388](v12);
  sub_2534659D8();
  uint64_t v182 = v14;
  sub_2534B324C();
  MEMORY[0x270FA5388](v15);
  sub_2534B3318();
  uint64_t v181 = v16;
  sub_2534B324C();
  MEMORY[0x270FA5388](v17);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v18);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v19);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = sub_2534F8208((uint64_t)&v166 - v21);
  uint64_t v23 = type metadata accessor for AST.FlatValue(v22);
  uint64_t v24 = sub_25346CB4C(v23);
  MEMORY[0x270FA5388](v24);
  sub_2534659D8();
  uint64_t v177 = v25;
  sub_2534B324C();
  MEMORY[0x270FA5388](v26);
  sub_2534B3318();
  uint64_t v178 = v27;
  sub_2534B324C();
  MEMORY[0x270FA5388](v28);
  sub_2534B3318();
  uint64_t v180 = v29;
  sub_2534B324C();
  MEMORY[0x270FA5388](v30);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v31);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v32);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v33);
  sub_2534B3318();
  uint64_t v176 = v34;
  sub_2534B324C();
  MEMORY[0x270FA5388](v35);
  sub_2534B3318();
  uint64_t v179 = v36;
  sub_2534B324C();
  MEMORY[0x270FA5388](v37);
  sub_2534F823C();
  MEMORY[0x270FA5388](v38);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = sub_2534F8208((uint64_t)&v166 - v40);
  type metadata accessor for AST.FlatExpr(v41);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v42);
  sub_2534659D8();
  uint64_t v192 = v43;
  sub_2534B324C();
  MEMORY[0x270FA5388](v44);
  uint64_t v191 = (uint64_t)&v166 - v45;
  sub_2534B324C();
  MEMORY[0x270FA5388](v46);
  sub_2534B3318();
  uint64_t v186 = v47;
  sub_2534B324C();
  MEMORY[0x270FA5388](v48);
  sub_2534B3318();
  uint64_t v188 = v49;
  sub_2534B324C();
  MEMORY[0x270FA5388](v50);
  uint64_t v190 = (uint64_t)&v166 - v51;
  sub_2534B324C();
  MEMORY[0x270FA5388](v52);
  sub_2534B3318();
  uint64_t v184 = v53;
  sub_2534B324C();
  MEMORY[0x270FA5388](v54);
  sub_2534B3318();
  uint64_t v189 = v55;
  sub_2534B324C();
  MEMORY[0x270FA5388](v56);
  uint64_t v185 = (uint64_t)&v166 - v57;
  sub_2534B324C();
  MEMORY[0x270FA5388](v58);
  sub_25351C9B0();
  MEMORY[0x270FA5388](v59);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v60);
  sub_2534836BC();
  MEMORY[0x270FA5388](v61);
  sub_2534B3318();
  uint64_t v187 = v62;
  sub_2534B324C();
  MEMORY[0x270FA5388](v63);
  sub_2534B3318();
  uint64_t v183 = v64;
  sub_2534B324C();
  MEMORY[0x270FA5388](v65);
  sub_25351C4B4();
  uint64_t v67 = MEMORY[0x270FA5388](v66);
  uint64_t v69 = (unsigned __int8 *)&v166 - v68;
  MEMORY[0x270FA5388](v67);
  v71 = (char *)&v166 - v70;
  uint64_t v72 = sub_253462A5C(&qword_269CDDCC8);
  uint64_t v73 = sub_25346CB4C(v72);
  MEMORY[0x270FA5388](v73);
  sub_25346CC54();
  uint64_t v75 = v1 + *(int *)(v74 + 56);
  sub_253509FDC(v195, v1, (void (*)(void))type metadata accessor for AST.FlatExpr);
  uint64_t v76 = (uint64_t)v196;
  uint64_t v196 = (unsigned __int8 *)v75;
  sub_253509FDC(v76, v75, (void (*)(void))type metadata accessor for AST.FlatExpr);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v101 = v1;
      sub_253509FDC(v1, (uint64_t)v69, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v102 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      uint64_t v103 = v196;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v156 = (uint64_t)&v69[v102];
        goto LABEL_75;
      }
      int v104 = *v69;
      int v105 = *v103;
      sub_253509F00();
      uint64_t v106 = v169;
      sub_253509F00();
      if (v104 == v105)
      {
        static AST.FlatValue.== infix(_:_:)();
        sub_253509EAC(v106, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_25351CA88();
        goto LABEL_91;
      }
      sub_253509EAC(v106, (void (*)(void))type metadata accessor for AST.FlatValue);
      sub_25351CA88();
      goto LABEL_88;
    case 2u:
      uint64_t v77 = v1;
      sub_253509FDC(v1, (uint64_t)v3, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v78 = *(int *)(sub_253462A5C(&qword_269CDDCE8) + 64);
      if (sub_25351C68C() != 2)
      {
        sub_253509EAC((uint64_t)&v3[v78], (void (*)(void))type metadata accessor for AST.FlatValue);
        uint64_t v154 = sub_2534D970C();
        sub_253509EAC(v154, v155);
        goto LABEL_78;
      }
      int v79 = *v3;
      int v80 = *v69;
      uint64_t v81 = v179;
      sub_253509F00();
      uint64_t v82 = v176;
      sub_253509F00();
      uint64_t v83 = v175;
      sub_253509F00();
      uint64_t v84 = v174;
      sub_253509F00();
      if (v79 == v80 && (static AST.FlatValue.== infix(_:_:)(), (v85 & 1) != 0))
      {
        static AST.FlatValue.== infix(_:_:)();
        sub_253509EAC(v84, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v83, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v82, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v81, (void (*)(void))type metadata accessor for AST.FlatValue);
        uint64_t v86 = v77;
      }
      else
      {
        sub_253509EAC(v84, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v83, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v82, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v81, (void (*)(void))type metadata accessor for AST.FlatValue);
        uint64_t v86 = v77;
      }
      goto LABEL_92;
    case 3u:
      uint64_t v101 = v1;
      uint64_t v107 = v183;
      sub_253509FDC(v1, v183, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v108 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
      uint64_t v110 = *(void *)(v107 + v108);
      uint64_t v109 = *(void *)(v107 + v108 + 8);
      if (sub_25351C68C() != 3)
      {
        swift_bridgeObjectRelease();
        uint64_t v156 = v107;
LABEL_75:
        sub_253509EAC(v156, (void (*)(void))type metadata accessor for AST.FlatValue);
        uint64_t v1 = v101;
        goto LABEL_78;
      }
      uint64_t v112 = *(void *)&v69[v108];
      uint64_t v111 = *(void *)&v69[v108 + 8];
      uint64_t v113 = v170;
      sub_253509F00();
      static AST.FlatValue.== infix(_:_:)();
      char v115 = v114;
      sub_253509EAC(v107, (void (*)(void))type metadata accessor for AST.FlatValue);
      if ((v115 & 1) == 0)
      {
        sub_253509EAC(v113, (void (*)(void))type metadata accessor for AST.FlatValue);
        swift_bridgeObjectRelease();
        goto LABEL_87;
      }
      if (v110 == v112 && v109 == v111)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_25351C5CC();
        sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_253509EAC(v113, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v86 = v101;
      goto LABEL_92;
    case 4u:
      uint64_t v87 = v1;
      uint64_t v88 = v187;
      sub_253509FDC(v1, v187, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v89 = v88 + *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      if (sub_25351C5A4() != 4)
      {
        sub_253509EAC(v89, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v88, (void (*)(void))type metadata accessor for AST.FlatValue);
        goto LABEL_78;
      }
      uint64_t v90 = v180;
      sub_253509F00();
      sub_253509F00();
      uint64_t v91 = v177;
      sub_253509F00();
      static AST.FlatValue.== infix(_:_:)();
      char v93 = v92;
      sub_253509EAC(v88, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (v93) {
        static AST.FlatValue.== infix(_:_:)();
      }
      sub_253509EAC(v91, (void (*)(void))type metadata accessor for AST.FlatValue);
      sub_25351CA88();
      sub_253509EAC(v90, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v86 = v87;
      goto LABEL_92;
    case 5u:
      uint64_t v117 = sub_2534D99FC();
      sub_253509FDC(v117, v118, v119);
      if (sub_25351C5A4() != 5) {
        goto LABEL_77;
      }
      sub_25351C56C();
      sub_2534BB410();
      goto LABEL_48;
    case 6u:
      sub_253509FDC(v1, (uint64_t)v0, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v121 = *v0;
      uint64_t v120 = v0[1];
      unint64_t v122 = v196;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v101 = v1;
        if (v121 == *(void *)v122 && v120 == *((void *)v122 + 1))
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v124 = sub_253B0A4C0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v124 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_87:
            swift_bridgeObjectRelease();
LABEL_88:
            uint64_t v86 = v101;
            goto LABEL_92;
          }
        }
        sub_2534C0500();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_91:
        uint64_t v86 = v101;
        goto LABEL_92;
      }
      swift_bridgeObjectRelease();
LABEL_77:
      swift_bridgeObjectRelease();
      goto LABEL_78;
    case 7u:
      sub_253509FDC(v1, v2, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C5A4() != 7) {
        goto LABEL_77;
      }
      sub_25351C56C();
      sub_2534BB728();
      goto LABEL_48;
    case 8u:
      uint64_t v125 = v1;
      uint64_t v126 = v185;
      sub_253509FDC(v1, v185, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v127 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v128 = *(void *)(v126 + v127);
      char v129 = *(unsigned char *)(v126 + v127 + 8);
      uint64_t v130 = v196;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v195 = *(void *)&v130[v127];
        int v131 = v130[v127 + 8];
        uint64_t v132 = v193;
        sub_25351C9FC();
        sub_25347FA84();
        v133();
        char v134 = sub_253B055A0();
        BOOL v135 = *(void (**)(void))(v132 + 8);
        sub_2534D97B4();
        v135();
        sub_2534D97B4();
        v135();
        if ((v134 & 1) == 0)
        {
LABEL_53:
          uint64_t v86 = v125;
          goto LABEL_92;
        }
        char v136 = v131;
        if (v129)
        {
          if (!v131) {
            goto LABEL_53;
          }
        }
        else
        {
          if (v128 != v195) {
            char v136 = 1;
          }
          if (v136) {
            goto LABEL_53;
          }
        }
        uint64_t v86 = v125;
LABEL_92:
        sub_253509EAC(v86, (void (*)(void))type metadata accessor for AST.FlatExpr);
        goto LABEL_93;
      }
      sub_2534F83C0();
      sub_2534659CC();
      v157();
      uint64_t v1 = v125;
      goto LABEL_78;
    case 9u:
      uint64_t v94 = v189;
      sub_253509FDC(v1, v189, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C() == 9) {
        goto LABEL_21;
      }
      goto LABEL_23;
    case 0xAu:
      uint64_t v137 = v1;
      uint64_t v138 = v184;
      sub_253509FDC(v1, v184, (void (*)(void))type metadata accessor for AST.FlatExpr);
      uint64_t v140 = *(void *)v138;
      uint64_t v139 = *(void *)(v138 + 8);
      int v141 = *(unsigned __int8 *)(v138 + 16);
      int v142 = *(unsigned __int8 *)(v138 + 17);
      if (sub_25351C68C() != 10)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v137;
        goto LABEL_78;
      }
      uint64_t v143 = *(void *)v69;
      uint64_t v144 = *((void *)v69 + 1);
      int v145 = v69[16];
      int v146 = v69[17];
      if (v140 == v143 && v139 == v144)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_2534D9778();
        char v148 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v148 & 1) == 0) {
          goto LABEL_96;
        }
      }
      if (v141 != v145) {
        goto LABEL_96;
      }
      if (v142 == 2)
      {
        if (v146 != 2)
        {
LABEL_96:
          uint64_t v86 = v137;
          goto LABEL_92;
        }
      }
      else if (v146 == 2 || ((((v142 & 1) == 0) ^ v146) & 1) == 0)
      {
        goto LABEL_96;
      }
      uint64_t v86 = v137;
      goto LABEL_92;
    case 0xBu:
      uint64_t v94 = v190;
      sub_253509FDC(v1, v190, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C() == 11) {
        goto LABEL_21;
      }
      goto LABEL_23;
    case 0xCu:
      sub_253509FDC(v1, v188, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C5A4() != 12) {
        goto LABEL_77;
      }
      uint64_t v95 = (void *)sub_25351C56C();
      sub_2534B5C40(v95, v96);
LABEL_48:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v86 = v2;
      goto LABEL_92;
    case 0xDu:
      uint64_t v149 = v186;
      sub_253509FDC(v1, v186, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C() == 13)
      {
        uint64_t v150 = v172;
        sub_25351C1B0((uint64_t)v0, v172, (uint64_t *)&unk_26B248CB0);
        uint64_t v151 = v173;
        uint64_t v152 = v173 + *(int *)(v171 + 48);
        sub_25351C1B0(v149, v173, (uint64_t *)&unk_26B248CB0);
        sub_2534B45B0(v150, v152, (uint64_t *)&unk_26B248CB0);
        uint64_t v153 = v194;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v151, 1, v194) == 1)
        {
          sub_253472458(v150, (uint64_t *)&unk_26B248CB0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v152, 1, v153) == 1)
          {
            sub_253472458(v151, (uint64_t *)&unk_26B248CB0);
LABEL_70:
            uint64_t v86 = v1;
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v159 = v167;
          sub_2534B45B0(v151, v167, (uint64_t *)&unk_26B248CB0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v152, 1, v153) != 1)
          {
            uint64_t v161 = v193;
            uint64_t v162 = v166;
            sub_25347FA84();
            v163();
            sub_253509F94((unint64_t *)&qword_269CDCCE8, MEMORY[0x263F07508]);
            char v164 = sub_253B096B0();
            uint64_t v165 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
            v165(v162, v153);
            sub_253472458(v150, (uint64_t *)&unk_26B248CB0);
            v165(v159, v153);
            sub_253472458(v151, (uint64_t *)&unk_26B248CB0);
            if (v164) {
              goto LABEL_70;
            }
LABEL_100:
            uint64_t v86 = v1;
            goto LABEL_92;
          }
          sub_253472458(v150, (uint64_t *)&unk_26B248CB0);
          sub_2534659CC();
          v160();
        }
        sub_253472458(v151, &qword_269CDDCC0);
        goto LABEL_100;
      }
      sub_253472458(v149, (uint64_t *)&unk_26B248CB0);
LABEL_78:
      sub_253472458(v1, &qword_269CDDCC8);
LABEL_93:
      sub_253465A14();
      return;
    case 0xEu:
      uint64_t v94 = v191;
      sub_253509FDC(v1, v191, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C() == 14) {
        goto LABEL_21;
      }
      goto LABEL_23;
    case 0xFu:
      uint64_t v94 = v192;
      sub_253509FDC(v1, v192, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C() == 15)
      {
LABEL_21:
        sub_25351C580();
        uint64_t v97 = v194;
        sub_25347FA84();
        v98();
        sub_253B055A0();
        unint64_t v99 = (void (*)(void))*((void *)v69 + 1);
        sub_25351C3E8();
        v99();
        ((void (*)(uint64_t, uint64_t))v99)(v94, v97);
        goto LABEL_22;
      }
LABEL_23:
      sub_2534659CC();
      v100();
      goto LABEL_78;
    case 0x10u:
      if (sub_25351C8E8() != 16) {
        goto LABEL_78;
      }
      goto LABEL_70;
    case 0x11u:
      if (sub_25351C8E8() != 17) {
        goto LABEL_78;
      }
      goto LABEL_70;
    case 0x12u:
      if (sub_25351C8E8() != 18) {
        goto LABEL_78;
      }
      goto LABEL_70;
    case 0x13u:
      if (sub_25351C8E8() == 19) {
        goto LABEL_70;
      }
      goto LABEL_78;
    default:
      sub_253509FDC(v1, (uint64_t)v71, (void (*)(void))type metadata accessor for AST.FlatExpr);
      if (sub_25351C34C())
      {
        sub_253509EAC((uint64_t)v71, (void (*)(void))type metadata accessor for AST.FlatValue);
        goto LABEL_78;
      }
      uint64_t v158 = v168;
      sub_253509F00();
      static AST.FlatValue.== infix(_:_:)();
      sub_253509EAC(v158, (void (*)(void))type metadata accessor for AST.FlatValue);
      sub_253509EAC((uint64_t)v71, (void (*)(void))type metadata accessor for AST.FlatValue);
LABEL_22:
      uint64_t v86 = v1;
      goto LABEL_92;
  }
}

uint64_t sub_2534FFC88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919973477 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534FFD60(char a1)
{
  if (a1) {
    return 1919973477;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_2534FFD80()
{
  return sub_2534FFD60(*v0);
}

uint64_t sub_2534FFD88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534FFC88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534FFDB0(uint64_t a1)
{
  unint64_t v2 = sub_253509F48();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534FFDEC(uint64_t a1)
{
  unint64_t v2 = sub_253509F48();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AST.FlatAssignExpr.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDDCF8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253472068(a1, a1[3]);
  sub_253509F48();
  sub_2534DA3BC();
  sub_253B0A3F0();
  if (!v1)
  {
    type metadata accessor for AST.FlatAssignExpr(0);
    sub_25351C8C4();
    type metadata accessor for AST.FlatExpr(0);
    sub_253509F94(&qword_269CDDD08, (void (*)(uint64_t))type metadata accessor for AST.FlatExpr);
    sub_253B0A440();
  }
  sub_25351C5C0();
  sub_2534D97B4();
  return v4();
}

void AST.FlatAssignExpr.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v12 = v4;
  type metadata accessor for AST.FlatExpr(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDDD10);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534D9B74();
  type metadata accessor for AST.FlatAssignExpr(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534966B0();
  sub_253472068(v3, v3[3]);
  sub_253509F48();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
  }
  else
  {
    sub_25351CAA0();
    *uint64_t v1 = sub_253B0A320();
    v1[1] = v9;
    sub_25351C8C4();
    sub_253509F94(&qword_269CDDD18, (void (*)(uint64_t))type metadata accessor for AST.FlatExpr);
    sub_25351CAA0();
    sub_253B0A370();
    uint64_t v10 = sub_25351C590();
    v11(v10);
    sub_253509F00();
    sub_253509FDC((uint64_t)v1, v12, (void (*)(void))type metadata accessor for AST.FlatAssignExpr);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    sub_253509EAC((uint64_t)v1, (void (*)(void))type metadata accessor for AST.FlatAssignExpr);
  }
  sub_2534847C8();
}

void sub_253500204()
{
}

uint64_t sub_25350021C(void *a1)
{
  return AST.FlatAssignExpr.encode(to:)(a1);
}

BOOL AST.FlatValue.isStatement.getter()
{
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_25348366C();
  sub_253509FDC(v0, v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  BOOL v3 = swift_getEnumCaseMultiPayload() == 8;
  sub_253509EAC(v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  return v3;
}

BOOL AST.FlatValue.isIdentifier.getter()
{
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_25348366C();
  sub_253509FDC(v0, v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  BOOL v3 = swift_getEnumCaseMultiPayload() == 9;
  sub_253509EAC(v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  return v3;
}

uint64_t AST.FlatValue.asString.getter()
{
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_2534835B0();
  sub_253509FDC(v1, v0, (void (*)(void))type metadata accessor for AST.FlatValue);
  sub_2534D970C();
  if (swift_getEnumCaseMultiPayload() == 3) {
    return *(void *)v0;
  }
  sub_253509EAC(v0, (void (*)(void))type metadata accessor for AST.FlatValue);
  return 0;
}

uint64_t AST.FlatValue.asStatement.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CC54();
  sub_253509FDC(v1, v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  sub_2534D99FC();
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    uint64_t v4 = sub_253B059D0();
    sub_25346CAF4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, v1, v4);
    uint64_t v6 = a1;
    uint64_t v7 = 0;
    uint64_t v8 = v4;
  }
  else
  {
    sub_253509EAC(v1, (void (*)(void))type metadata accessor for AST.FlatValue);
    uint64_t v8 = sub_253B059D0();
    uint64_t v6 = a1;
    uint64_t v7 = 1;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v6, v7, 1, v8);
}

void AST.FlatValue.description.getter()
{
  sub_2534B3258();
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25351C600();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534847E0();
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v4);
  sub_25346CC6C();
  sub_253509FDC(v0, (uint64_t)v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v15 = *v1;
      sub_2534D3668();
      sub_253B09F00();
      break;
    case 2u:
      sub_253B09C30();
      break;
    case 3u:
      String.escapedForPython.getter();
      sub_25351C780();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 4u:
      uint64_t v7 = sub_2534FE1C8(*v1, &v14);
      swift_bridgeObjectRelease();
      uint64_t v15 = v7;
      sub_253462A5C(&qword_269CDC550);
      sub_25350D86C((unint64_t *)&qword_269CDC558, &qword_269CDC550);
      sub_25351C6A8();
      swift_bridgeObjectRelease();
      sub_25351CA30(91);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 5u:
      uint64_t v8 = swift_bridgeObjectRetain();
      size_t v9 = sub_25350BB48(v8);
      swift_bridgeObjectRelease();
      uint64_t v15 = v9;
      sub_2534FE11C(&v15);
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_2534FE2DC(v15);
      swift_release();
      uint64_t v15 = v10;
      sub_253462A5C(&qword_269CDC550);
      sub_25350D86C((unint64_t *)&qword_269CDC558, &qword_269CDC550);
      sub_25351C6A8();
      swift_bridgeObjectRelease();
      sub_25351CA30(123);
      swift_bridgeObjectRelease();
LABEL_9:
      sub_253B09860();
      break;
    case 8u:
      sub_25351C9FC();
      sub_25347FA84();
      v5();
      sub_253B05970();
      sub_2534D97B4();
      v6();
      break;
    case 9u:
      sub_25347FA84();
      v11();
      sub_253B05570();
      uint64_t v12 = sub_25351C5CC();
      v13(v12);
      break;
    default:
      break;
  }
  sub_253465A14();
}

void static AST.FlatValue.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v68 = v5;
  uint64_t v69 = v6;
  sub_253B055C0();
  sub_253465998();
  uint64_t v64 = v8;
  uint64_t v65 = v7;
  MEMORY[0x270FA5388](v7);
  sub_25346CB04();
  v59[1] = v9;
  sub_253B059D0();
  sub_253465998();
  uint64_t v60 = v11;
  uint64_t v61 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = sub_25351C4C8(v12, v59[0]);
  type metadata accessor for AST.FlatValue(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_2534659D8();
  uint64_t v67 = v15;
  sub_2534B324C();
  MEMORY[0x270FA5388](v16);
  uint64_t v63 = (uint64_t)v59 - v17;
  sub_2534B324C();
  MEMORY[0x270FA5388](v18);
  sub_2534B3318();
  uint64_t v66 = (uint64_t *)v19;
  sub_2534B324C();
  MEMORY[0x270FA5388](v20);
  uint64_t v62 = (uint64_t *)((char *)v59 - v21);
  sub_2534B324C();
  MEMORY[0x270FA5388](v22);
  sub_25351C4B4();
  MEMORY[0x270FA5388](v23);
  sub_25351C99C();
  MEMORY[0x270FA5388](v24);
  sub_25351C738();
  MEMORY[0x270FA5388](v25);
  sub_25351C988();
  MEMORY[0x270FA5388](v26);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)v59 - v28;
  uint64_t v30 = sub_253462A5C(&qword_269CDDD20);
  uint64_t v31 = sub_25346CB4C(v30);
  MEMORY[0x270FA5388](v31);
  sub_25348366C();
  uint64_t v33 = (void *)(v0 + *(int *)(v32 + 56));
  sub_253509FDC(v68, v0, (void (*)(void))type metadata accessor for AST.FlatValue);
  uint64_t v34 = (uint64_t)v69;
  uint64_t v69 = v33;
  sub_253509FDC(v34, (uint64_t)v33, (void (*)(void))type metadata accessor for AST.FlatValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v35 = sub_25351C5CC();
      sub_253509FDC(v35, v36, v37);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_40;
      }
      goto LABEL_31;
    case 2u:
      sub_253509FDC(v0, v4, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C4E8() == 2) {
        goto LABEL_31;
      }
      goto LABEL_40;
    case 3u:
      sub_253509FDC(v0, (uint64_t)v3, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v39 = *v3;
      uint64_t v38 = v3[1];
      uint64_t v40 = v69;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_25;
      }
      goto LABEL_18;
    case 4u:
      sub_253509FDC(v0, v1, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C82C() != 4) {
        goto LABEL_25;
      }
      uint64_t v41 = v0;
      sub_2534D970C();
      sub_2534BB3BC();
      goto LABEL_14;
    case 5u:
      sub_253509FDC(v0, v2, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C82C() != 5) {
        goto LABEL_25;
      }
      uint64_t v41 = v0;
      sub_2534D970C();
      sub_2534C0500();
LABEL_14:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = v41;
      goto LABEL_32;
    case 6u:
      uint64_t v43 = v62;
      sub_253509FDC(v0, (uint64_t)v62, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v44 = *v43;
      uint64_t v38 = v43[1];
      if (sub_25351C82C() != 6) {
        goto LABEL_25;
      }
      uint64_t v45 = v33[1];
      BOOL v46 = v44 == *v33;
      uint64_t v47 = v0;
      goto LABEL_19;
    case 7u:
      uint64_t v48 = v66;
      sub_253509FDC(v0, (uint64_t)v66, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v39 = *v48;
      uint64_t v38 = v48[1];
      uint64_t v40 = v69;
      if (swift_getEnumCaseMultiPayload() != 7)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
LABEL_18:
      uint64_t v47 = v0;
      uint64_t v45 = v40[1];
      BOOL v46 = v39 == *v40;
LABEL_19:
      if (v46 && v38 == v45)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_25351C5C0();
        char v50 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v50 & 1) == 0)
        {
          sub_253509EAC(v47, (void (*)(void))type metadata accessor for AST.FlatValue);
          goto LABEL_41;
        }
      }
      uint64_t v42 = v47;
      goto LABEL_32;
    case 8u:
      uint64_t v51 = v63;
      sub_253509FDC(v0, v63, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C4E8() == 8)
      {
        uint64_t v53 = v60;
        uint64_t v52 = v61;
        sub_25347FA84();
        v54();
        _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
        goto LABEL_30;
      }
      uint64_t v58 = v60;
      uint64_t v57 = v61;
      goto LABEL_39;
    case 9u:
      uint64_t v51 = v67;
      sub_253509FDC(v0, v67, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C4E8() == 9)
      {
        uint64_t v53 = v64;
        uint64_t v52 = v65;
        sub_25347FA84();
        v55();
        sub_253B055A0();
LABEL_30:
        uint64_t v56 = *(void (**)(void))(v53 + 8);
        sub_25351C3E8();
        v56();
        ((void (*)(uint64_t, uint64_t))v56)(v51, v52);
LABEL_31:
        uint64_t v42 = v0;
LABEL_32:
        sub_253509EAC(v42, (void (*)(void))type metadata accessor for AST.FlatValue);
      }
      else
      {
        uint64_t v58 = v64;
        uint64_t v57 = v65;
LABEL_39:
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v51, v57);
LABEL_40:
        sub_253472458(v0, &qword_269CDDD20);
      }
LABEL_41:
      sub_253465A14();
      return;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_40;
      }
      uint64_t v42 = v0;
      goto LABEL_32;
    default:
      sub_253509FDC(v0, (uint64_t)v29, (void (*)(void))type metadata accessor for AST.FlatValue);
      if (sub_25351C4E8()) {
        goto LABEL_40;
      }
      sub_253509EAC(v0, (void (*)(void))type metadata accessor for AST.FlatValue);
      goto LABEL_41;
  }
}

void AST.FlatValue.hash(into:)()
{
  sub_2534B3258();
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25351C600();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = sub_2534D9C00();
  type metadata accessor for AST.FlatValue(v4);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_25346CC6C();
  sub_253509FDC(v0, v1, (void (*)(void))type metadata accessor for AST.FlatValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_253B0A600();
      goto LABEL_11;
    case 2u:
      sub_253B0A600();
      sub_253B0A620();
      break;
    case 3u:
    case 6u:
    case 7u:
      sub_253B0A600();
      sub_2534D9778();
      sub_253B09630();
      goto LABEL_9;
    case 4u:
      sub_253B0A600();
      sub_2534D9778();
      sub_2534D1C9C();
      goto LABEL_9;
    case 5u:
      sub_253B0A600();
      sub_2534D9778();
      sub_2534D0758();
LABEL_9:
      swift_bridgeObjectRelease();
      break;
    case 8u:
      sub_25347FA84();
      v8();
      sub_253B0A600();
      sub_253509F94(&qword_269CDBEB0, MEMORY[0x263F4BF98]);
      sub_253B095D0();
      uint64_t v9 = sub_2534D9B10();
      v10(v9);
      break;
    case 9u:
      sub_25351C9FC();
      sub_25347FA84();
      v6();
      sub_253B0A600();
      sub_253509F94(&qword_269CDCCD0, MEMORY[0x263F07508]);
      sub_253B095D0();
      sub_25351C5CC();
      sub_2534D97B4();
      v7();
      break;
    case 0xAu:
LABEL_11:
      sub_253B0A600();
      break;
    default:
      sub_253B0A600();
      sub_253B0A610();
      break;
  }
  sub_253465A14();
}

uint64_t sub_25350138C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819047278 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1819242338 && a2 == 0xE400000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 7630441 && a2 == 0xE300000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x656C62756F64 && a2 == 0xE600000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x7961727261 && a2 == 0xE500000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 1952672100 && a2 == 0xE400000000000000;
              if (v11 || (sub_253B0A4C0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
                if (v12 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x656C626169726176 && a2 == 0xE800000000000000;
                  if (v13 || (sub_253B0A4C0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6E656D6574617473 && a2 == 0xE900000000000074;
                    if (v14 || (sub_253B0A4C0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      char v16 = sub_253B0A4C0();
                      swift_bridgeObjectRelease();
                      if (v16) {
                        return 10;
                      }
                      else {
                        return 11;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_25350179C(char a1)
{
  uint64_t result = 1819047278;
  switch(a1)
  {
    case 1:
      uint64_t result = 1819242338;
      break;
    case 2:
      uint64_t result = 7630441;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 0x676E69727473;
      break;
    case 5:
      uint64_t result = 0x7961727261;
      break;
    case 6:
      uint64_t result = 1952672100;
      break;
    case 7:
      uint64_t result = 0x6C6F626D7973;
      break;
    case 8:
      uint64_t result = 0x656C626169726176;
      break;
    case 9:
      uint64_t result = 0x6E656D6574617473;
      break;
    case 10:
      uint64_t result = 0x696669746E656469;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2535018C4(uint64_t a1)
{
  unint64_t v2 = sub_25350C9DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501900(uint64_t a1)
{
  unint64_t v2 = sub_25350C9DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25350193C(uint64_t a1)
{
  unint64_t v2 = sub_25350CBB0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501978(uint64_t a1)
{
  unint64_t v2 = sub_25350CBB0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2535019B4()
{
  return sub_25350179C(*v0);
}

uint64_t sub_2535019BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25350138C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2535019E4(uint64_t a1)
{
  unint64_t v2 = sub_25350C768();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501A20(uint64_t a1)
{
  unint64_t v2 = sub_25350C768();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501A5C(uint64_t a1)
{
  unint64_t v2 = sub_25350C8E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501A98(uint64_t a1)
{
  unint64_t v2 = sub_25350C8E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501AD4(uint64_t a1)
{
  unint64_t v2 = sub_25350CB18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501B10(uint64_t a1)
{
  unint64_t v2 = sub_25350CB18();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501B4C(uint64_t a1)
{
  unint64_t v2 = sub_25350C7B4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501B88(uint64_t a1)
{
  unint64_t v2 = sub_25350C7B4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501BC4(uint64_t a1)
{
  unint64_t v2 = sub_25350CB64();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501C00(uint64_t a1)
{
  unint64_t v2 = sub_25350CB64();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501C3C(uint64_t a1)
{
  unint64_t v2 = sub_25350CBFC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501C78(uint64_t a1)
{
  unint64_t v2 = sub_25350CBFC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501CB4(uint64_t a1)
{
  unint64_t v2 = sub_25350C800();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501CF0(uint64_t a1)
{
  unint64_t v2 = sub_25350C800();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501D2C(uint64_t a1)
{
  unint64_t v2 = sub_25350CACC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501D68(uint64_t a1)
{
  unint64_t v2 = sub_25350CACC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501DA4(uint64_t a1)
{
  unint64_t v2 = sub_25350C898();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501DE0(uint64_t a1)
{
  unint64_t v2 = sub_25350C898();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253501E1C(uint64_t a1)
{
  unint64_t v2 = sub_25350C84C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253501E58(uint64_t a1)
{
  unint64_t v2 = sub_25350C84C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AST.FlatValue.encode(to:)()
{
  sub_253462A5C(&qword_269CDDD28);
  sub_253465998();
  uint64_t v76 = v3;
  uint64_t v77 = v2;
  MEMORY[0x270FA5388](v2);
  sub_25351C4C8(v4, v68[0]);
  sub_253B055C0();
  sub_253465998();
  uint64_t v74 = v6;
  uint64_t v75 = v5;
  MEMORY[0x270FA5388](v5);
  sub_2534D929C(v7, v68[0]);
  sub_253462A5C(&qword_269CDDD30);
  sub_253465998();
  uint64_t v71 = v9;
  uint64_t v72 = v8;
  MEMORY[0x270FA5388](v8);
  sub_2534D9B90(v10, v68[0]);
  sub_253B059D0();
  sub_253465998();
  uint64_t v69 = v12;
  uint64_t v70 = v11;
  MEMORY[0x270FA5388](v11);
  sub_2534D9BE4(v13, v68[0]);
  sub_253462A5C(&qword_269CDDD38);
  sub_253465998();
  v68[23] = v15;
  v68[24] = v14;
  MEMORY[0x270FA5388](v14);
  sub_25351C368(v16, v68[0]);
  v68[21] = sub_253462A5C(&qword_269CDDD40);
  sub_253465998();
  v68[20] = v17;
  MEMORY[0x270FA5388](v18);
  sub_2534D8F5C((uint64_t)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68[18] = sub_253462A5C(&qword_269CDDD48);
  sub_253465998();
  v68[17] = v20;
  MEMORY[0x270FA5388](v21);
  sub_2534D8F5C((uint64_t)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68[15] = sub_253462A5C(&qword_269CDDD50);
  sub_253465998();
  v68[14] = v23;
  MEMORY[0x270FA5388](v24);
  sub_2534D8F5C((uint64_t)v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68[12] = sub_253462A5C(&qword_269CDDD58);
  sub_253465998();
  v68[11] = v26;
  MEMORY[0x270FA5388](v27);
  sub_2534D8F5C((uint64_t)v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68[9] = sub_253462A5C(&qword_269CDDD60);
  sub_253465998();
  v68[8] = v29;
  MEMORY[0x270FA5388](v30);
  sub_2534D8F5C((uint64_t)v68 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68[6] = sub_253462A5C(&qword_269CDDD68);
  sub_253465998();
  v68[5] = v32;
  MEMORY[0x270FA5388](v33);
  sub_25346CB04();
  sub_2534D8F5C(v34);
  v68[3] = sub_253462A5C(&qword_269CDDD70);
  sub_253465998();
  v68[2] = v35;
  MEMORY[0x270FA5388](v36);
  sub_2534966B0();
  sub_253462A5C(&qword_269CDDD78);
  sub_253465998();
  v68[1] = v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v39 = sub_25349888C();
  type metadata accessor for AST.FlatValue(v39);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v40);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDDD80);
  sub_253465998();
  int v79 = v41;
  uint64_t v80 = v42;
  MEMORY[0x270FA5388](v41);
  sub_2534847E0();
  uint64_t v43 = (void *)sub_2534D9778();
  sub_253472068(v43, v44);
  sub_25350C768();
  uint64_t v78 = v1;
  sub_253B0A680();
  sub_253509FDC(v81, (uint64_t)v0, (void (*)(void))type metadata accessor for AST.FlatValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      LOBYTE(v82) = 2;
      sub_25350CB64();
      uint64_t v45 = v78;
      uint64_t v0 = v79;
      sub_25351C318();
      sub_253B0A430();
      goto LABEL_4;
    case 2u:
      LOBYTE(v82) = 3;
      sub_25350CB18();
      sub_25351C2D8();
      sub_253B0A410();
      sub_2534659CC();
      v49();
      goto LABEL_18;
    case 3u:
      LOBYTE(v82) = 4;
      sub_25350CACC();
      uint64_t v51 = v78;
      char v50 = v79;
      sub_253B0A3A0();
      sub_253B0A3F0();
      swift_bridgeObjectRelease();
      sub_25351C67C();
      sub_2534659CC();
      v52();
      return (*(uint64_t (**)(uint64_t, void *))(v80 + 8))(v51, v50);
    case 4u:
      uint64_t v54 = *v0;
      LOBYTE(v82) = 5;
      sub_25350C9DC();
      sub_25351C318();
      uint64_t v82 = v54;
      sub_253462A5C(&qword_269CDDDD8);
      sub_25350CA28();
      sub_25351C634();
      goto LABEL_9;
    case 5u:
      uint64_t v55 = *v0;
      LOBYTE(v82) = 6;
      sub_25350C8E4();
      sub_25351C318();
      uint64_t v82 = v55;
      sub_253462A5C(&qword_269CDDDB8);
      sub_25350C930();
      sub_25351C634();
LABEL_9:
      sub_25351C67C();
      sub_2534659CC();
      v56();
      sub_2534659CC();
      v57();
      return swift_bridgeObjectRelease();
    case 6u:
      LOBYTE(v82) = 7;
      sub_25350C898();
      sub_25351C848();
      sub_253B0A3F0();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 7u:
      LOBYTE(v82) = 8;
      sub_25350C84C();
      sub_25351C848();
      sub_253B0A3F0();
      swift_bridgeObjectRelease();
LABEL_12:
      sub_2534659CC();
      v58();
      uint64_t v47 = *(uint64_t (**)(uint64_t, void *))(v80 + 8);
      uint64_t v48 = v1;
      goto LABEL_13;
    case 8u:
      uint64_t v61 = v69;
      uint64_t v60 = v70;
      uint64_t v62 = v68[25];
      sub_25347FA84();
      v66();
      LOBYTE(v82) = 9;
      sub_25350C800();
      sub_25351C2D8();
      sub_253509F94(&qword_269CDBFB8, MEMORY[0x263F4BF98]);
      sub_25351C86C();
      goto LABEL_17;
    case 9u:
      uint64_t v61 = v74;
      uint64_t v60 = v75;
      uint64_t v62 = v73;
      sub_25347FA84();
      v63();
      LOBYTE(v82) = 10;
      sub_25350C7B4();
      sub_25351C2D8();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_25351C86C();
LABEL_17:
      sub_2534659CC();
      v67();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v60);
LABEL_18:
      uint64_t v48 = sub_25351C5C0();
      return v47(v48, v59);
    case 0xAu:
      LOBYTE(v82) = 0;
      sub_25350CBFC();
      sub_253B0A3A0();
      sub_2534659CC();
      v64();
      sub_2534659CC();
      return v65();
    default:
      LOBYTE(v82) = 1;
      sub_25350CBB0();
      uint64_t v45 = v78;
      uint64_t v0 = v79;
      sub_25351C318();
      sub_253B0A400();
LABEL_4:
      sub_2534659CC();
      v46();
      uint64_t v47 = *(uint64_t (**)(uint64_t, void *))(v80 + 8);
      uint64_t v48 = v45;
LABEL_13:
      uint64_t v59 = v0;
      return v47(v48, v59);
  }
}

uint64_t AST.FlatValue.hashValue.getter()
{
  return sub_253B0A630();
}

uint64_t AST.FlatValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v134[2] = a2;
  uint64_t v124 = sub_253462A5C(&qword_269CDDE10);
  sub_253465998();
  v134[3] = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534D929C(v10, v107[0]);
  uint64_t v123 = sub_253462A5C(&qword_269CDDE18);
  sub_253465998();
  uint64_t v132 = v11;
  MEMORY[0x270FA5388](v12);
  sub_2534D9248(v13, v107[0]);
  uint64_t v122 = sub_253462A5C(&qword_269CDDE20);
  sub_253465998();
  uint64_t v112 = v14;
  MEMORY[0x270FA5388](v15);
  sub_2534D92B8(v16, v107[0]);
  uint64_t v121 = sub_253462A5C(&qword_269CDDE28);
  sub_253465998();
  uint64_t v131 = v17;
  MEMORY[0x270FA5388](v18);
  sub_2534D9BAC(v19, v107[0]);
  uint64_t v120 = sub_253462A5C(&qword_269CDDE30);
  sub_253465998();
  uint64_t v130 = v20;
  MEMORY[0x270FA5388](v21);
  sub_2534D9264(v22, v107[0]);
  uint64_t v119 = sub_253462A5C(&qword_269CDDE38);
  sub_253465998();
  uint64_t v129 = v23;
  MEMORY[0x270FA5388](v24);
  sub_2534D9B90(v25, v107[0]);
  uint64_t v118 = sub_253462A5C(&qword_269CDDE40);
  sub_253465998();
  uint64_t v128 = v26;
  MEMORY[0x270FA5388](v27);
  sub_25346CB04();
  uint64_t v139 = v28;
  uint64_t v117 = sub_253462A5C(&qword_269CDDE48);
  sub_253465998();
  uint64_t v127 = v29;
  MEMORY[0x270FA5388](v30);
  sub_2534D9BC8(v31, v107[0]);
  uint64_t v116 = sub_253462A5C(&qword_269CDDE50);
  sub_253465998();
  uint64_t v126 = v32;
  MEMORY[0x270FA5388](v33);
  sub_2534D9BE4(v34, v107[0]);
  uint64_t v115 = sub_253462A5C(&qword_269CDDE58);
  sub_253465998();
  uint64_t v125 = v35;
  MEMORY[0x270FA5388](v36);
  sub_2534D92F0(v37, v107[0]);
  uint64_t v114 = sub_253462A5C(&qword_269CDDE60);
  sub_253465998();
  uint64_t v113 = v38;
  MEMORY[0x270FA5388](v39);
  sub_25351C368(v40, v107[0]);
  uint64_t v138 = sub_253462A5C(&qword_269CDDE68);
  sub_253465998();
  uint64_t v136 = v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v43 = sub_2534D9C00();
  uint64_t v135 = type metadata accessor for AST.FlatValue(v43);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v44);
  sub_2534659D8();
  uint64_t v140 = v45;
  sub_2534B324C();
  MEMORY[0x270FA5388](v46);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v47);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v48);
  sub_2534F823C();
  MEMORY[0x270FA5388](v49);
  sub_2534F823C();
  MEMORY[0x270FA5388](v50);
  sub_2534F823C();
  MEMORY[0x270FA5388](v51);
  sub_25351C988();
  MEMORY[0x270FA5388](v52);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v53);
  sub_25351C770();
  MEMORY[0x270FA5388](v54);
  sub_25351C99C();
  MEMORY[0x270FA5388](v55);
  uint64_t v57 = (char *)v107 - v56;
  uint64_t v58 = a1[3];
  int v141 = a1;
  sub_253472068(a1, v58);
  sub_25350C768();
  uint64_t v137 = v3;
  uint64_t v59 = v142;
  sub_253B0A660();
  if (v59) {
    goto LABEL_7;
  }
  uint64_t v108 = v5;
  uint64_t v109 = v4;
  uint64_t v110 = v2;
  uint64_t v111 = v6;
  int v142 = v57;
  uint64_t v60 = v137;
  uint64_t v61 = v138;
  uint64_t v62 = sub_253B0A390();
  uint64_t v63 = *(void *)(v62 + 16);
  if (!v63
    || (v107[1] = 0,
        uint64_t v64 = *(unsigned __int8 *)(v62 + 32),
        sub_25347B78C(1, v63, v62, v62 + 32, 0, (2 * v63) | 1),
        uint64_t v66 = v65,
        unint64_t v68 = v67,
        swift_bridgeObjectRelease(),
        v66 != v68 >> 1))
  {
    uint64_t v71 = v135;
    sub_253B0A090();
    swift_allocError();
    uint64_t v73 = v72;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v73 = v71;
    sub_253B0A2D0();
    sub_2534F8464();
    sub_25351C748();
    uint64_t v74 = sub_2534F859C();
    v75(v74);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v60, v61);
LABEL_7:
    uint64_t v76 = (uint64_t)v141;
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v76);
  }
  switch(v64)
  {
    case 1:
      LOBYTE(v143) = 1;
      sub_25350CBB0();
      sub_25351C22C();
      sub_25351C954();
      char v82 = sub_253B0A330();
      sub_2534659CC();
      v83();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v84();
      *uint64_t v108 = v82 & 1;
      sub_25351C514();
      goto LABEL_19;
    case 2:
      LOBYTE(v143) = 2;
      sub_25350CB64();
      sub_25351C22C();
      sub_25351C954();
      uint64_t v85 = sub_253B0A360();
      sub_2534659CC();
      v86();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v87();
      uint64_t *v109 = v85;
      sub_25351C520();
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    case 3:
      LOBYTE(v143) = 3;
      sub_25350CB18();
      sub_25351C22C();
      sub_253B0A340();
      uint64_t v89 = v88;
      sub_2534659CC();
      v90();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v91();
      *uint64_t v110 = v89;
      sub_25351C514();
      goto LABEL_19;
    case 4:
      LOBYTE(v143) = 4;
      sub_25350CACC();
      sub_25351C22C();
      uint64_t v92 = sub_253B0A320();
      uint64_t v94 = v93;
      sub_25351C7E4();
      sub_2534659CC();
      v95();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v96();
      uint64_t v97 = v111;
      *uint64_t v111 = v92;
      v97[1] = v94;
      sub_25351C514();
      goto LABEL_19;
    case 5:
      LOBYTE(v143) = 5;
      sub_25350C9DC();
      sub_25351C22C();
      sub_253462A5C(&qword_269CDDDD8);
      sub_25350CCF4();
      sub_25351C2F4();
      sub_2534659CC();
      v78();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v79();
      sub_25351C4A0(v143);
      goto LABEL_19;
    case 6:
      LOBYTE(v143) = 6;
      sub_25350C8E4();
      sub_25351C22C();
      sub_253462A5C(&qword_269CDDDB8);
      sub_25350CC48();
      sub_25351C2F4();
      sub_2534659CC();
      v80();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v81();
      sub_25351C6F0(v143);
      goto LABEL_19;
    case 7:
      LOBYTE(v143) = 7;
      sub_25350C898();
      sub_25351C22C();
      sub_25351C968();
      sub_2534659CC();
      v98();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v99();
      sub_25351C940((uint64_t)v134);
      goto LABEL_19;
    case 8:
      LOBYTE(v143) = 8;
      sub_25350C84C();
      sub_25351C22C();
      sub_25351C968();
      sub_2534659CC();
      v104();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v105();
      sub_25351C940((uint64_t)&v133);
      goto LABEL_19;
    case 9:
      LOBYTE(v143) = 9;
      sub_25350C800();
      sub_25351C22C();
      sub_253B059D0();
      sub_253509F94(&qword_269CDC068, MEMORY[0x263F4BF98]);
      sub_25351C2F4();
      sub_2534659CC();
      v100();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v101();
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    case 10:
      LOBYTE(v143) = 10;
      sub_25350C7B4();
      sub_25351C22C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C2F4();
      sub_2534D97B4();
      v102();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v103();
      sub_25351C514();
LABEL_19:
      swift_storeEnumTagMultiPayload();
LABEL_20:
      sub_253509F00();
      break;
    default:
      LOBYTE(v143) = 0;
      sub_25350CBFC();
      sub_25351C22C();
      sub_2534D8C7C();
      sub_2534659CC();
      v69();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v70();
      swift_storeEnumTagMultiPayload();
      break;
  }
  uint64_t v106 = (uint64_t)v141;
  sub_253509F00();
  uint64_t v76 = v106;
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v76);
}

uint64_t sub_25350397C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AST.FlatValue.init(from:)(a1, a2);
}

uint64_t sub_253503994()
{
  return AST.FlatValue.encode(to:)();
}

uint64_t sub_2535039B4()
{
  return sub_253B0A630();
}

void AST.FlatExpr.description.getter()
{
  sub_2534B3258();
  int64_t v111 = 0;
  uint64_t v5 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534659D8();
  uint64_t v105 = v7;
  sub_2534B324C();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  sub_25351C92C(v9, v10, v11, v12, v13, v14, v15, v16, v104);
  sub_253B055C0();
  sub_253465998();
  int64_t v108 = v18;
  uint64_t v109 = v17;
  MEMORY[0x270FA5388](v17);
  sub_2534D929C(v19, v104);
  uint64_t v20 = sub_253462A5C(&qword_269CDCCD8);
  uint64_t v21 = sub_25346CB4C(v20);
  MEMORY[0x270FA5388](v21);
  sub_2534727F8();
  sub_25351C770();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t *)((char *)&v104 - v23);
  type metadata accessor for AST.Update(0);
  sub_253465998();
  uint64_t v104 = v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = sub_2534D9B74();
  uint64_t v28 = type metadata accessor for AST.FlatValue(v27);
  uint64_t v29 = sub_25346CB34(v28);
  uint64_t v110 = v30;
  MEMORY[0x270FA5388](v29);
  sub_2534727F8();
  sub_25351C738();
  MEMORY[0x270FA5388](v31);
  sub_25351C9B0();
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v104 - v33;
  type metadata accessor for AST.FlatExpr(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253509FDC(v0, (uint64_t)v37, (void (*)(void))type metadata accessor for AST.FlatExpr);
  sub_2534D9B10();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_253462A5C(&qword_269CDDCF0);
      sub_253509F00();
      *(void *)&long long v115 = 0;
      *((void *)&v115 + 1) = 0xE000000000000000;
      sub_253B09860();
      swift_bridgeObjectRelease();
      AST.FlatValue.description.getter();
      sub_253B09860();
      swift_bridgeObjectRelease();
      uint64_t v102 = type metadata accessor for AST.FlatValue;
      uint64_t v103 = v1;
      goto LABEL_60;
    case 2u:
      char v38 = *v37;
      sub_253462A5C(&qword_269CDDCE8);
      sub_253509F00();
      sub_253509F00();
      AST.FlatValue.description.getter();
      *(void *)&long long v115 = v39;
      *((void *)&v115 + 1) = v40;
      sub_253B09860();
      AST.InfixOp.description.getter(v38);
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      AST.FlatValue.description.getter();
      sub_253B09860();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 3u:
      sub_253462A5C(&qword_269CDDCE0);
      sub_253509F00();
      AST.FlatValue.description.getter();
      *(void *)&long long v115 = v41;
      *((void *)&v115 + 1) = v42;
      sub_253B09860();
      sub_253B09860();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 4u:
      sub_253462A5C(&qword_269CDDCD8);
      sub_253509F00();
      sub_253509F00();
      AST.FlatValue.description.getter();
      *(void *)&long long v115 = v43;
      *((void *)&v115 + 1) = v44;
      sub_253B09860();
      AST.FlatValue.description.getter();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
LABEL_8:
      sub_253509EAC(v3, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v103 = sub_2534D970C();
      goto LABEL_60;
    case 5u:
      uint64_t v45 = *(void *)v37;
      *(void *)&long long v115 = 0xD000000000000011;
      *((void *)&v115 + 1) = 0x8000000253B0C3D0;
      uint64_t v46 = *(void *)(v45 + 16);
      if (v46)
      {
        uint64_t v47 = *(unsigned __int8 *)(v104 + 80);
        uint64_t v110 = v45;
        uint64_t v48 = v45 + ((v47 + 32) & ~v47);
        uint64_t v49 = *(void *)(v104 + 72);
        do
        {
          sub_253509FDC(v48, v4, (void (*)(void))type metadata accessor for AST.Update);
          AST.FlatValue.description.getter();
          sub_25351CAAC(v50, v51);
          uint64_t v52 = swift_bridgeObjectRetain();
          int64_t v53 = v111;
          uint64_t v54 = sub_2534FE1C8(v52);
          int64_t v111 = v53;
          swift_bridgeObjectRelease();
          uint64_t v112 = v54;
          sub_253462A5C(&qword_269CDC550);
          sub_25350D86C((unint64_t *)&qword_269CDC558, &qword_269CDC550);
          sub_25351C6CC();
          swift_bridgeObjectRelease();
          sub_253B09860();
          swift_bridgeObjectRelease();
          sub_253B09860();
          AST.FlatValue.description.getter();
          sub_253B09860();
          swift_bridgeObjectRelease();
          sub_253B09860();
          swift_bridgeObjectRelease();
          sub_253509EAC(v4, (void (*)(void))type metadata accessor for AST.Update);
          v48 += v49;
          --v46;
        }
        while (v46);
      }
      swift_bridgeObjectRelease();
      goto LABEL_61;
    case 6u:
      uint64_t v55 = *((void *)v37 + 1);
      uint64_t v56 = *((void *)v37 + 2);
      *(void *)&long long v115 = *(void *)v37;
      *((void *)&v115 + 1) = v55;
      sub_253B09860();
      uint64_t v57 = *(void *)(v56 + 64);
      uint64_t v109 = v56 + 64;
      uint64_t v58 = 1 << *(unsigned char *)(v56 + 32);
      uint64_t v59 = -1;
      if (v58 < 64) {
        uint64_t v59 = ~(-1 << v58);
      }
      unint64_t v60 = v59 & v57;
      int64_t v111 = (unint64_t)(v58 + 63) >> 6;
      int64_t v108 = v111 - 1;
      swift_bridgeObjectRetain();
      int64_t v61 = 0;
      if (!v60) {
        goto LABEL_20;
      }
      break;
    case 7u:
      uint64_t v77 = *(void *)v37;
      *(void *)&long long v115 = 679043443;
      *((void *)&v115 + 1) = 0xE400000000000000;
      MEMORY[0x25A268A80](v77, v109);
      goto LABEL_48;
    case 8u:
      uint64_t v78 = &v37[*(int *)(sub_253462A5C(&qword_269CDDCD0) + 48)];
      uint64_t v79 = *(void *)v78;
      char v80 = v78[8];
      uint64_t v82 = v107;
      int64_t v81 = v108;
      uint64_t v83 = v109;
      sub_25347FA84();
      v84();
      sub_2534ACF2C();
      sub_253B09860();
      sub_253509F94(&qword_26B248CA8, MEMORY[0x263F07508]);
      sub_253B0A480();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      uint64_t v113 = v79;
      LOBYTE(v114) = v80;
      sub_253B0A170();
      sub_25351C9C4();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
      goto LABEL_61;
    case 9u:
      uint64_t v85 = sub_25351C264();
      v86(v85);
      uint64_t v87 = 0x286D7269666E6F63;
      unint64_t v88 = 0xE800000000000000;
      goto LABEL_53;
    case 0xAu:
      char v89 = v37[17];
      sub_2534ACF2C();
      sub_253B0A000();
      sub_253B09860();
      sub_25351C5CC();
      String.escapedForPython.getter();
      sub_25351C780();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      LOBYTE(v113) = v89;
      sub_253462A5C(&qword_269CDDE88);
      sub_253B0A170();
      goto LABEL_49;
    case 0xBu:
      uint64_t v90 = sub_25351C264();
      v91(v90);
      uint64_t v87 = 0x656E6F5F6B636970;
      unint64_t v88 = 0xE900000000000028;
      goto LABEL_53;
    case 0xCu:
      uint64_t v92 = *(void *)v37;
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      strcpy((char *)&v115, "resolve_tool(");
      HIWORD(v115) = -4864;
      MEMORY[0x25A268A80](v92, MEMORY[0x263F8D310]);
LABEL_48:
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_49;
    case 0xDu:
      uint64_t v93 = (uint64_t)v37;
      uint64_t v94 = v106;
      sub_25351C1B0(v93, v106, (uint64_t *)&unk_26B248CB0);
      *(void *)&long long v115 = 0x286F646E75;
      *((void *)&v115 + 1) = 0xE500000000000000;
      uint64_t v95 = v105;
      sub_2534B45B0(v94, v105, (uint64_t *)&unk_26B248CB0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v95, 1, v109) == 1)
      {
        sub_253472458(v95, (uint64_t *)&unk_26B248CB0);
      }
      else
      {
        sub_253B05570();
        uint64_t v100 = sub_2534D99FC();
        v101(v100);
      }
      sub_25351C5CC();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_25351C9C4();
      sub_253472458(v94, (uint64_t *)&unk_26B248CB0);
      goto LABEL_61;
    case 0xEu:
      uint64_t v96 = sub_25351C264();
      v97(v96);
      uint64_t v87 = 0x287463656A6572;
      unint64_t v88 = 0xE700000000000000;
LABEL_53:
      *(void *)&long long v115 = v87;
      *((void *)&v115 + 1) = v88;
      sub_253509F94(&qword_26B248CA8, MEMORY[0x263F07508]);
      sub_253B0A480();
      goto LABEL_55;
    case 0xFu:
      uint64_t v98 = sub_25351C264();
      v99(v98);
      *(void *)&long long v115 = 0x286C65636E6163;
      *((void *)&v115 + 1) = 0xE700000000000000;
      sub_253B05570();
LABEL_55:
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_25351C9C4();
      (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v24, v1);
      goto LABEL_61;
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
      goto LABEL_61;
    default:
      sub_253509F00();
      AST.FlatValue.description.getter();
LABEL_6:
      uint64_t v102 = type metadata accessor for AST.FlatValue;
      uint64_t v103 = (uint64_t)v34;
LABEL_60:
      sub_253509EAC(v103, (void (*)(void))v102);
      goto LABEL_61;
  }
LABEL_18:
  unint64_t v64 = __clz(__rbit64(v60));
  v60 &= v60 - 1;
  unint64_t v65 = v64 | (v61 << 6);
LABEL_19:
  uint64_t v66 = *(void *)(v56 + 56);
  unint64_t v67 = (void *)(*(void *)(v56 + 48) + 16 * v65);
  uint64_t v68 = v67[1];
  *(void *)uint64_t v2 = *v67;
  *(void *)(v2 + 8) = v68;
  uint64_t v69 = v66 + *(void *)(v110 + 72) * v65;
  uint64_t v70 = sub_253462A5C(&qword_269CDCCE0);
  sub_253509FDC(v69, v2 + *(int *)(v70 + 48), (void (*)(void))type metadata accessor for AST.FlatValue);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, 0, 1, v70);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_25351C1B0(v2, (uint64_t)v24, &qword_269CDCCD8);
    uint64_t v75 = sub_253462A5C(&qword_269CDCCE0);
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v24, 1, v75) == 1) {
      break;
    }
    uint64_t v62 = *v24;
    uint64_t v63 = v24[1];
    sub_253509F00();
    uint64_t v113 = v62;
    uint64_t v114 = v63;
    sub_253B09860();
    AST.FlatValue.description.getter();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253B09860();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253509EAC((uint64_t)v34, (void (*)(void))type metadata accessor for AST.FlatValue);
    if (v60) {
      goto LABEL_18;
    }
LABEL_20:
    int64_t v71 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      JUMPOUT(0x253504914);
    }
    if (v71 < v111)
    {
      unint64_t v72 = *(void *)(v109 + 8 * v71);
      if (v72) {
        goto LABEL_23;
      }
      int64_t v73 = v61 + 2;
      ++v61;
      if (v71 + 1 < v111)
      {
        unint64_t v72 = *(void *)(v109 + 8 * v73);
        if (v72) {
          goto LABEL_26;
        }
        int64_t v61 = v71 + 1;
        if (v71 + 2 < v111)
        {
          unint64_t v72 = *(void *)(v109 + 8 * (v71 + 2));
          if (v72)
          {
            v71 += 2;
            goto LABEL_23;
          }
          int64_t v73 = v71 + 3;
          int64_t v61 = v71 + 2;
          if (v71 + 3 < v111)
          {
            unint64_t v72 = *(void *)(v109 + 8 * v73);
            if (v72)
            {
LABEL_26:
              int64_t v71 = v73;
LABEL_23:
              unint64_t v60 = (v72 - 1) & v72;
              unint64_t v65 = __clz(__rbit64(v72)) + (v71 << 6);
              int64_t v61 = v71;
              goto LABEL_19;
            }
            while (1)
            {
              int64_t v71 = v73 + 1;
              if (__OFADD__(v73, 1)) {
                goto LABEL_63;
              }
              if (v71 >= v111) {
                break;
              }
              unint64_t v72 = *(void *)(v109 + 8 * v71);
              ++v73;
              if (v72) {
                goto LABEL_23;
              }
            }
            int64_t v61 = v108;
          }
        }
      }
    }
    uint64_t v74 = sub_253462A5C(&qword_269CDCCE0);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, 1, 1, v74);
    unint64_t v60 = 0;
  }
  swift_release();
  uint64_t v76 = *(void *)(v56 + 16);
  swift_bridgeObjectRelease();
  if (v76) {
    sub_2534CFBC8(2);
  }
LABEL_49:
  sub_25351C9C4();
LABEL_61:
  sub_2534D99FC();
  sub_253465A14();
}

uint64_t sub_253504964(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x786966657270 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7869666E69 && a2 == 0xE500000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 7630692 && a2 == 0xE300000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C3F0 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 1819042147 && a2 == 0xE400000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 7954803 && a2 == 0xE300000000000000;
              if (v11 || (sub_253B0A4C0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 1801677168 && a2 == 0xE400000000000000;
                if (v12 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x6D7269666E6F63 && a2 == 0xE700000000000000;
                  if (v13 || (sub_253B0A4C0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x686372616573 && a2 == 0xE600000000000000;
                    if (v14 || (sub_253B0A4C0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x656E4F6B636970 && a2 == 0xE700000000000000;
                      if (v15 || (sub_253B0A4C0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 11;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x5465766C6F736572 && a2 == 0xEB000000006C6F6FLL;
                        if (v16 || (sub_253B0A4C0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 12;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x69686374614D6F6ELL && a2 == 0xEE006C6F6F54676ELL;
                          if (v17 || (sub_253B0A4C0() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 13;
                          }
                          else
                          {
                            BOOL v18 = a1 == 1868852853 && a2 == 0xE400000000000000;
                            if (v18 || (sub_253B0A4C0() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 14;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x7463656A6572 && a2 == 0xE600000000000000;
                              if (v19 || (sub_253B0A4C0() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 15;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x6C65636E6163 && a2 == 0xE600000000000000;
                                if (v20 || (sub_253B0A4C0() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 16;
                                }
                                else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C4B0 {
                                       || (sub_253B0A4C0() & 1) != 0)
                                }
                                {
                                  swift_bridgeObjectRelease();
                                  return 17;
                                }
                                else
                                {
                                  BOOL v21 = a1 == 0x616C50664F646E65 && a2 == 0xE90000000000006ELL;
                                  if (v21 || (sub_253B0A4C0() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 18;
                                  }
                                  else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C410)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 19;
                                  }
                                  else
                                  {
                                    char v22 = sub_253B0A4C0();
                                    swift_bridgeObjectRelease();
                                    if (v22) {
                                      return 19;
                                    }
                                    else {
                                      return 20;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2535050C4()
{
  return 20;
}

unint64_t sub_2535050CC(char a1)
{
  unint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x786966657270;
      break;
    case 2:
      uint64_t v3 = 1768320617;
      goto LABEL_6;
    case 3:
      unint64_t result = 7630692;
      break;
    case 4:
      uint64_t v3 = 1701080681;
LABEL_6:
      unint64_t result = v3 & 0xFFFF0000FFFFFFFFLL | 0x7800000000;
      break;
    case 5:
    case 17:
    case 19:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 1819042147;
      break;
    case 7:
      unint64_t result = 7954803;
      break;
    case 8:
      unint64_t result = 1801677168;
      break;
    case 9:
      unint64_t result = 0x6D7269666E6F63;
      break;
    case 10:
      unint64_t result = 0x686372616573;
      break;
    case 11:
      unint64_t result = 0x656E4F6B636970;
      break;
    case 12:
      unint64_t result = 0x5465766C6F736572;
      break;
    case 13:
      unint64_t result = 0x69686374614D6F6ELL;
      break;
    case 14:
      unint64_t result = 1868852853;
      break;
    case 15:
      unint64_t result = 0x7463656A6572;
      break;
    case 16:
      unint64_t result = 0x6C65636E6163;
      break;
    case 18:
      unint64_t result = 0x616C50664F646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2535052D4(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 7563372 && a2 == 0xE300000000000000;
  if (v4 || (sub_2534DA0C4(), (sub_25351C8D0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 0x7865646E69 && v2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_25351C8D0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253505398(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449746E657665 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253505478(char a1)
{
  if (a1) {
    return 1701869940;
  }
  else {
    return 0x6449746E657665;
  }
}

uint64_t sub_2535054A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253505570(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x736449746E657665 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2535055F8()
{
  return 0x736449746E657665;
}

uint64_t sub_253505610(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B0C4F0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E4F6B636970 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_253505754(char a1)
{
  if (!a1) {
    return 0x7972657571;
  }
  if (a1 == 1) {
    return 0xD000000000000018;
  }
  return 0x656E4F6B636970;
}

uint64_t sub_2535057AC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6449746E657665 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25351C8D0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25350582C()
{
  return 0x6449746E657665;
}

uint64_t sub_253505844(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25351C8D0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2535058AC(uint64_t a1)
{
  unint64_t v2 = sub_25350D2D0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2535058E8(uint64_t a1)
{
  unint64_t v2 = sub_25350D2D0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505928(uint64_t a1)
{
  unint64_t v2 = sub_25350CEE8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505964(uint64_t a1)
{
  unint64_t v2 = sub_25350CEE8();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2535059A0()
{
  return sub_2535050CC(*v0);
}

uint64_t sub_2535059A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253504964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2535059D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2535050C4();
  *a1 = result;
  return result;
}

uint64_t sub_2535059F8(uint64_t a1)
{
  unint64_t v2 = sub_25350CDB8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505A34(uint64_t a1)
{
  unint64_t v2 = sub_25350CDB8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505A70(uint64_t a1)
{
  unint64_t v2 = sub_25350D0FC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505AAC(uint64_t a1)
{
  unint64_t v2 = sub_25350D0FC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505AE8(uint64_t a1)
{
  unint64_t v2 = sub_25350CE04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505B24(uint64_t a1)
{
  unint64_t v2 = sub_25350CE04();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2535052D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253505B88(uint64_t a1)
{
  unint64_t v2 = sub_25350D458();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505BC4(uint64_t a1)
{
  unint64_t v2 = sub_25350D458();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505C00(uint64_t a1)
{
  unint64_t v2 = sub_25350CE50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505C3C(uint64_t a1)
{
  unint64_t v2 = sub_25350CE50();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505C78(uint64_t a1)
{
  unint64_t v2 = sub_25350CE9C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505CB4(uint64_t a1)
{
  unint64_t v2 = sub_25350CE9C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505CF0(uint64_t a1)
{
  unint64_t v2 = sub_25350D40C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505D2C(uint64_t a1)
{
  unint64_t v2 = sub_25350D40C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505D68(uint64_t a1)
{
  unint64_t v2 = sub_25350D4A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505DA4(uint64_t a1)
{
  unint64_t v2 = sub_25350D4A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505DE0(uint64_t a1)
{
  unint64_t v2 = sub_25350CFCC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505E1C(uint64_t a1)
{
  unint64_t v2 = sub_25350CFCC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505E58()
{
  return sub_253505478(*v0);
}

uint64_t sub_253505E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253505398(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253505E88(uint64_t a1)
{
  unint64_t v2 = sub_25350D148();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505EC4(uint64_t a1)
{
  unint64_t v2 = sub_25350D148();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505F00(uint64_t a1)
{
  unint64_t v2 = sub_25350D064();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505F3C(uint64_t a1)
{
  unint64_t v2 = sub_25350D064();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253505F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2535054A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253505FA0(uint64_t a1)
{
  unint64_t v2 = sub_25350D4F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253505FDC(uint64_t a1)
{
  unint64_t v2 = sub_25350D4F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253506018(uint64_t a1)
{
  unint64_t v2 = sub_25350CF34();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253506054(uint64_t a1)
{
  unint64_t v2 = sub_25350CF34();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253506090(uint64_t a1)
{
  unint64_t v2 = sub_25350D018();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2535060CC(uint64_t a1)
{
  unint64_t v2 = sub_25350D018();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25350610C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253505570(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253506138(uint64_t a1)
{
  unint64_t v2 = sub_25350D1E0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253506174(uint64_t a1)
{
  unint64_t v2 = sub_25350D1E0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2535061B0()
{
  return sub_253505754(*v0);
}

uint64_t sub_2535061B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253505610(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2535061E0(uint64_t a1)
{
  unint64_t v2 = sub_25350D0B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25350621C(uint64_t a1)
{
  unint64_t v2 = sub_25350D0B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253506258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2535057AC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253506284(uint64_t a1)
{
  unint64_t v2 = sub_25350CF80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2535062C0(uint64_t a1)
{
  unint64_t v2 = sub_25350CF80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2535062FC(uint64_t a1)
{
  unint64_t v2 = sub_25350D31C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253506338(uint64_t a1)
{
  unint64_t v2 = sub_25350D31C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253506374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253505844(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2535063A0(uint64_t a1)
{
  unint64_t v2 = sub_25350D53C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2535063DC(uint64_t a1)
{
  unint64_t v2 = sub_25350D53C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.FlatExpr.encode(to:)()
{
  sub_2534847F8();
  uint64_t v204 = v2;
  uint64_t v205 = v1;
  BOOL v6 = v5;
  sub_253462A5C(&qword_269CDDE90);
  sub_253465998();
  uint64_t v195 = v8;
  uint64_t v196 = v7;
  MEMORY[0x270FA5388](v7);
  sub_2534D9264(v9, v156[0]);
  sub_253462A5C(&qword_269CDDE98);
  sub_253465998();
  uint64_t v193 = v11;
  uint64_t v194 = v10;
  MEMORY[0x270FA5388](v10);
  sub_2534D9BC8(v12, v156[0]);
  uint64_t v191 = sub_253462A5C(&qword_269CDDEA0);
  sub_253465998();
  uint64_t v190 = v13;
  MEMORY[0x270FA5388](v14);
  sub_2534D8F5C((uint64_t)v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v192 = sub_253462A5C(&qword_269CDDEA8);
  sub_253465998();
  uint64_t v166 = v16;
  MEMORY[0x270FA5388](v17);
  sub_2534D8F5C((uint64_t)v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v189 = sub_253462A5C(&qword_269CDDEB0);
  sub_253465998();
  uint64_t v165 = v19;
  MEMORY[0x270FA5388](v20);
  sub_2534D8F5C((uint64_t)v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v188 = sub_253462A5C(&qword_269CDDEB8);
  sub_253465998();
  uint64_t v164 = v22;
  MEMORY[0x270FA5388](v23);
  sub_2534D8F5C((uint64_t)v156 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v26 = sub_25346CB4C(v25);
  MEMORY[0x270FA5388](v26);
  sub_2534D8F5C((uint64_t)v156 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v184 = sub_253462A5C(&qword_269CDDEC0);
  sub_253465998();
  uint64_t v183 = v28;
  MEMORY[0x270FA5388](v29);
  sub_25346CB04();
  sub_2534D8F5C(v30);
  uint64_t v186 = sub_253462A5C(&qword_269CDDEC8);
  sub_253465998();
  uint64_t v163 = v31;
  MEMORY[0x270FA5388](v32);
  sub_2534D8F5C((uint64_t)v156 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v182 = sub_253462A5C(&qword_269CDDED0);
  sub_253465998();
  uint64_t v162 = v34;
  MEMORY[0x270FA5388](v35);
  sub_25346CB04();
  sub_2534D8F5C(v36);
  uint64_t v185 = sub_253462A5C(&qword_269CDDED8);
  sub_253465998();
  uint64_t v157 = v37;
  MEMORY[0x270FA5388](v38);
  sub_2534D8F5C((uint64_t)v156 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v179 = sub_253462A5C(&qword_269CDDEE0);
  sub_253465998();
  uint64_t v161 = v40;
  MEMORY[0x270FA5388](v41);
  sub_25346CB04();
  sub_2534D8F5C(v42);
  uint64_t v180 = sub_253462A5C(&qword_269CDDEE8);
  sub_253465998();
  v156[5] = v43;
  MEMORY[0x270FA5388](v44);
  sub_25346CB04();
  sub_2534F8208(v45);
  sub_253B055C0();
  sub_253465998();
  uint64_t v201 = v47;
  uint64_t v202 = v46;
  MEMORY[0x270FA5388](v46);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v48);
  sub_2534F823C();
  MEMORY[0x270FA5388](v49);
  sub_2534F823C();
  MEMORY[0x270FA5388](v50);
  sub_2534F823C();
  uint64_t v52 = MEMORY[0x270FA5388](v51);
  sub_25351C92C(v52, v53, v54, v55, v56, v57, v58, v59, v156[0]);
  uint64_t v177 = sub_253462A5C(&qword_269CDDEF0);
  sub_253465998();
  uint64_t v160 = v60;
  MEMORY[0x270FA5388](v61);
  sub_25346CB04();
  sub_2534D8F5C(v62);
  uint64_t v178 = sub_253462A5C(&qword_269CDDEF8);
  sub_253465998();
  v156[4] = v63;
  MEMORY[0x270FA5388](v64);
  sub_25346CB04();
  sub_2534D8F5C(v65);
  uint64_t v173 = sub_253462A5C(&qword_269CDDF00);
  sub_253465998();
  uint64_t v159 = v66;
  MEMORY[0x270FA5388](v67);
  sub_25346CB04();
  sub_2534D8F5C(v68);
  uint64_t v176 = sub_253462A5C(&qword_269CDDF08);
  sub_253465998();
  v156[3] = v69;
  MEMORY[0x270FA5388](v70);
  sub_25346CB04();
  sub_2534D8F5C(v71);
  uint64_t v174 = sub_253462A5C(&qword_269CDDF10);
  sub_253465998();
  v156[1] = v72;
  MEMORY[0x270FA5388](v73);
  sub_25346CB04();
  sub_2534D8F5C(v74);
  uint64_t v175 = sub_253462A5C(&qword_269CDDF18);
  sub_253465998();
  v156[2] = v75;
  MEMORY[0x270FA5388](v76);
  sub_25346CB04();
  sub_2534D8F5C(v77);
  uint64_t v172 = sub_253462A5C(&qword_269CDDF20);
  sub_253465998();
  uint64_t v158 = v78;
  MEMORY[0x270FA5388](v79);
  sub_25346CB04();
  sub_2534D8F5C(v80);
  uint64_t v168 = sub_253462A5C(&qword_269CDDF28);
  sub_253465998();
  uint64_t v167 = v81;
  MEMORY[0x270FA5388](v82);
  sub_2534966B0();
  uint64_t v200 = type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v83);
  sub_2534659D8();
  uint64_t v199 = v84;
  sub_2534B324C();
  MEMORY[0x270FA5388](v85);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v86);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v87);
  uint64_t v198 = (char *)v156 - v88;
  sub_2534B324C();
  MEMORY[0x270FA5388](v89);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v90);
  sub_2534836BC();
  MEMORY[0x270FA5388](v91);
  uint64_t v93 = (char *)v156 - v92;
  uint64_t v94 = type metadata accessor for AST.FlatExpr(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v95);
  sub_25347FAAC();
  uint64_t v207 = sub_253462A5C(&qword_269CDDF30);
  sub_253465998();
  uint64_t v203 = v96;
  MEMORY[0x270FA5388](v97);
  sub_2534835B0();
  uint64_t v98 = v6[4];
  sub_253472068(v6, v6[3]);
  sub_25350CDB8();
  uint64_t v206 = v0;
  sub_253B0A680();
  sub_253509FDC(v205, v4, (void (*)(void))type metadata accessor for AST.FlatExpr);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v105 = *(unsigned char *)v4;
      sub_253462A5C(&qword_269CDDCF0);
      sub_253509F00();
      LOBYTE(v208) = 1;
      sub_25350D4F0();
      sub_25351C54C();
      LOBYTE(v208) = v105;
      sub_2534D153C();
      sub_25351C44C();
      if (!v2)
      {
        LOBYTE(v208) = 1;
        sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
        sub_25351C708();
      }
      sub_2534659CC();
      v106();
      sub_253509EAC(v3, (void (*)(void))type metadata accessor for AST.FlatValue);
      goto LABEL_51;
    case 2u:
      char v107 = *(unsigned char *)v4;
      sub_253462A5C(&qword_269CDDCE8);
      uint64_t v108 = v171;
      sub_253509F00();
      uint64_t v109 = v198;
      sub_253509F00();
      LOBYTE(v208) = 2;
      sub_25350D4A4();
      sub_25351C52C();
      LOBYTE(v208) = v107;
      sub_2534D14A4();
      sub_25351C44C();
      if (v2)
      {
        sub_2534659CC();
        v110();
        uint64_t v111 = (uint64_t)v109;
      }
      else
      {
        LOBYTE(v208) = 1;
        sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
        sub_25351C708();
        sub_25351CA7C(2);
        sub_25351C708();
        sub_2534659CC();
        v151();
        uint64_t v111 = (uint64_t)v198;
      }
      sub_253509EAC(v111, (void (*)(void))type metadata accessor for AST.FlatValue);
      uint64_t v114 = v108;
      goto LABEL_41;
    case 3u:
      sub_253462A5C(&qword_269CDDCE0);
      uint64_t v112 = v169;
      sub_253509F00();
      LOBYTE(v208) = 3;
      sub_25350D458();
      sub_25351C52C();
      LOBYTE(v208) = 0;
      sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_25351C44C();
      if (!v2)
      {
        LOBYTE(v208) = 1;
        sub_25351C5C0();
        sub_253B0A3F0();
      }
      swift_bridgeObjectRelease();
      sub_2534659CC();
      v113();
      uint64_t v114 = v112;
LABEL_41:
      sub_253509EAC(v114, (void (*)(void))type metadata accessor for AST.FlatValue);
      goto LABEL_45;
    case 4u:
      sub_253462A5C(&qword_269CDDCD8);
      uint64_t v115 = v170;
      sub_253509F00();
      sub_253509F00();
      LOBYTE(v208) = 4;
      sub_25350D40C();
      uint64_t v94 = v207;
      sub_253B0A3A0();
      LOBYTE(v208) = 0;
      sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_25351C44C();
      if (v2)
      {
        sub_2534659CC();
        v116();
        sub_253509EAC(v199, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v115, (void (*)(void))type metadata accessor for AST.FlatValue);
        uint64_t v103 = sub_2534F83C0();
LABEL_46:
        uint64_t v104 = v94;
      }
      else
      {
        sub_25351CA7C(1);
        uint64_t v152 = v199;
        sub_25351C708();
        sub_2534659CC();
        v153();
        sub_253509EAC(v152, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_253509EAC(v115, (void (*)(void))type metadata accessor for AST.FlatValue);
        sub_25351C7D8();
        uint64_t v103 = v206;
        uint64_t v104 = v207;
      }
      goto LABEL_52;
    case 5u:
      uint64_t v117 = *(void *)v4;
      LOBYTE(v208) = 5;
      sub_25350D31C();
      sub_25351C318();
      uint64_t v208 = v117;
      sub_253462A5C(&qword_269CDDFD8);
      sub_25350D368();
      sub_25351C898();
      sub_25351C41C();
      goto LABEL_24;
    case 6u:
      uint64_t v118 = *(void *)(v4 + 16);
      LOBYTE(v208) = 6;
      sub_25350D2D0();
      sub_25351C54C();
      LOBYTE(v208) = 0;
      sub_2534D9B10();
      uint64_t v119 = v204;
      sub_253B0A3F0();
      if (v119)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v120 = sub_25351C758();
LABEL_50:
        v122(v120, v121);
LABEL_51:
        uint64_t v103 = sub_25351C7A4();
LABEL_52:
        v102(v103, v104);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v208 = v118;
        sub_253462A5C(&qword_269CDDDB8);
        sub_25350C930();
        sub_25351C898();
        sub_25351C708();
        sub_25351C758();
        sub_2534659CC();
        v154();
        uint64_t v138 = sub_25351C7A4();
LABEL_25:
        v139(v138);
        swift_bridgeObjectRelease();
      }
LABEL_53:
      sub_2534847C8();
      return;
    case 7u:
      uint64_t v123 = *(void *)v4;
      LOBYTE(v208) = 7;
      sub_25350D1E0();
      sub_25351C318();
      uint64_t v208 = v123;
      sub_253462A5C(&qword_269CDDFB8);
      sub_25350D22C();
      sub_25351C898();
      sub_25351C41C();
      goto LABEL_24;
    case 8u:
      uint64_t v124 = v4 + *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v205 = *(void *)v124;
      LODWORD(v200) = *(unsigned __int8 *)(v124 + 8);
      uint64_t v126 = v201;
      uint64_t v125 = v202;
      sub_25351C9FC();
      uint64_t v127 = v197;
      sub_25347FA84();
      v128();
      LOBYTE(v208) = 8;
      sub_25350D148();
      sub_25351C52C();
      LOBYTE(v208) = 0;
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      uint64_t v129 = v204;
      sub_253B0A440();
      if (v129)
      {
        sub_2534659CC();
        v130();
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v127, v125);
      }
      else
      {
        uint64_t v208 = v205;
        char v209 = v200;
        sub_25350D194();
        sub_253B0A440();
        sub_2534659CC();
        v155();
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v197, v125);
      }
LABEL_45:
      sub_25351C7D8();
      uint64_t v103 = v98;
      goto LABEL_46;
    case 9u:
      sub_25351C504();
      sub_25347FA84();
      v131();
      LOBYTE(v208) = 9;
      sub_25350D0FC();
      sub_25351C2B0();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_25351C88C();
      sub_25351C3C8();
      goto LABEL_29;
    case 0xAu:
      LOBYTE(v208) = 10;
      sub_25350D0B0();
      uint64_t v132 = v181;
      sub_25351C54C();
      LOBYTE(v208) = 0;
      uint64_t v133 = v185;
      uint64_t v134 = v204;
      sub_253B0A3F0();
      if (v134)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_25351CA7C(1);
        sub_25351CAA0();
        sub_253B0A400();
        sub_25351CA7C(2);
        sub_25351CAA0();
        sub_253B0A3C0();
      }
      uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
      uint64_t v120 = v132;
      uint64_t v121 = v133;
      goto LABEL_50;
    case 0xBu:
      sub_25351C504();
      sub_25347FA84();
      v135();
      LOBYTE(v208) = 11;
      sub_25350D064();
      sub_25351C2B0();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_25351C88C();
      sub_25351C3C8();
      goto LABEL_29;
    case 0xCu:
      uint64_t v136 = *(void *)v4;
      LOBYTE(v208) = 12;
      sub_25350D018();
      sub_25351C318();
      uint64_t v208 = v136;
      sub_253462A5C(&qword_269CDC550);
      sub_25350D588(&qword_269CDDF80);
      sub_25351C898();
      sub_25351C41C();
LABEL_24:
      sub_25351C7A4();
      sub_2534659CC();
      v137();
      sub_25351C7D8();
      uint64_t v138 = sub_2534D9B10();
      goto LABEL_25;
    case 0xDu:
      uint64_t v140 = v187;
      sub_25351C1B0(v4, v187, (uint64_t *)&unk_26B248CB0);
      LOBYTE(v208) = 14;
      sub_25350CF80();
      sub_25351C2D8();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_253B0A3E0();
      sub_25351C67C();
      sub_2534659CC();
      v141();
      sub_253472458(v140, (uint64_t *)&unk_26B248CB0);
      goto LABEL_30;
    case 0xEu:
      sub_25351C504();
      sub_25347FA84();
      v142();
      LOBYTE(v208) = 15;
      sub_25350CF34();
      sub_25351C2B0();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_25351C88C();
      sub_25351C3C8();
      goto LABEL_29;
    case 0xFu:
      sub_25351C504();
      sub_25347FA84();
      v143();
      LOBYTE(v208) = 16;
      sub_25350CEE8();
      sub_25351C2B0();
      sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
      sub_25351C88C();
      sub_25351C3C8();
LABEL_29:
      sub_2534659CC();
      v144();
      uint64_t v145 = sub_25351C590();
      v146(v145);
LABEL_30:
      uint64_t v103 = sub_25351C5C0();
      goto LABEL_52;
    case 0x10u:
      LOBYTE(v208) = 13;
      sub_25350CFCC();
      sub_25351C394();
      uint64_t v147 = sub_2534F83C0();
      uint64_t v149 = v184;
      goto LABEL_36;
    case 0x11u:
      LOBYTE(v208) = 17;
      sub_25350CE9C();
      sub_25351C394();
      uint64_t v147 = sub_2534F83C0();
      uint64_t v149 = v191;
      goto LABEL_36;
    case 0x12u:
      LOBYTE(v208) = 18;
      sub_25350CE50();
      sub_25351C394();
      goto LABEL_35;
    case 0x13u:
      LOBYTE(v208) = 19;
      sub_25350CE04();
      sub_25351C394();
LABEL_35:
      uint64_t v147 = sub_2534F83C0();
LABEL_36:
      v148(v147, v149);
      sub_25351C7D8();
      sub_2534659CC();
      v150();
      goto LABEL_53;
    default:
      sub_253509F00();
      LOBYTE(v208) = 0;
      sub_25350D53C();
      uint64_t v99 = v206;
      uint64_t v100 = v207;
      sub_253B0A3A0();
      sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_253B0A440();
      sub_2534659CC();
      v101();
      sub_253509EAC((uint64_t)v93, (void (*)(void))type metadata accessor for AST.FlatValue);
      sub_25351C7D8();
      uint64_t v103 = v99;
      uint64_t v104 = v100;
      goto LABEL_52;
  }
}

void AST.FlatExpr.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v245 = v11;
  uint64_t v17 = v16;
  uint64_t v236 = v18;
  sub_253462A5C(&qword_269CDE018);
  sub_253465998();
  uint64_t v237 = v20;
  uint64_t v238 = v19;
  MEMORY[0x270FA5388](v19);
  sub_2534D9248(v21, v192[0]);
  uint64_t v234 = sub_253462A5C(&qword_269CDE020);
  sub_253465998();
  uint64_t v233 = v22;
  MEMORY[0x270FA5388](v23);
  sub_2534D92B8(v24, v192[0]);
  uint64_t v231 = sub_253462A5C(&qword_269CDE028);
  sub_253465998();
  uint64_t v230 = v25;
  MEMORY[0x270FA5388](v26);
  sub_2534D9264(v27, v192[0]);
  uint64_t v232 = sub_253462A5C(&qword_269CDE030);
  sub_253465998();
  uint64_t v212 = v28;
  MEMORY[0x270FA5388](v29);
  sub_2534D9BAC(v30, v192[0]);
  uint64_t v229 = sub_253462A5C(&qword_269CDE038);
  sub_253465998();
  uint64_t v211 = v31;
  MEMORY[0x270FA5388](v32);
  sub_2534D9B90(v33, v192[0]);
  uint64_t v228 = sub_253462A5C(&qword_269CDE040);
  sub_253465998();
  uint64_t v210 = v34;
  MEMORY[0x270FA5388](v35);
  sub_2534D9BE4(v36, v192[0]);
  uint64_t v225 = sub_253462A5C(&qword_269CDE048);
  sub_253465998();
  uint64_t v224 = v37;
  MEMORY[0x270FA5388](v38);
  sub_25351C368(v39, v192[0]);
  uint64_t v227 = sub_253462A5C(&qword_269CDE050);
  sub_253465998();
  uint64_t v209 = v40;
  MEMORY[0x270FA5388](v41);
  sub_2534D92F0(v42, v192[0]);
  uint64_t v223 = sub_253462A5C(&qword_269CDE058);
  sub_253465998();
  uint64_t v208 = v43;
  MEMORY[0x270FA5388](v44);
  sub_2534D8F5C((uint64_t)v192 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v226 = sub_253462A5C(&qword_269CDE060);
  sub_253465998();
  uint64_t v213 = v46;
  MEMORY[0x270FA5388](v47);
  sub_2534D9BC8(v48, v192[0]);
  uint64_t v221 = sub_253462A5C(&qword_269CDE068);
  sub_253465998();
  uint64_t v206 = v49;
  MEMORY[0x270FA5388](v50);
  sub_2534D8F5C((uint64_t)v192 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v222 = sub_253462A5C(&qword_269CDE070);
  sub_253465998();
  uint64_t v207 = v52;
  MEMORY[0x270FA5388](v53);
  sub_25346CB04();
  sub_2534D8F5C(v54);
  uint64_t v219 = sub_253462A5C(&qword_269CDE078);
  sub_253465998();
  uint64_t v204 = v55;
  MEMORY[0x270FA5388](v56);
  sub_2534D8F5C((uint64_t)v192 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v220 = sub_253462A5C(&qword_269CDE080);
  sub_253465998();
  uint64_t v205 = v58;
  MEMORY[0x270FA5388](v59);
  sub_2534D8F5C((uint64_t)v192 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v216 = sub_253462A5C(&qword_269CDE088);
  sub_253465998();
  uint64_t v200 = v61;
  MEMORY[0x270FA5388](v62);
  sub_2534D8F5C((uint64_t)v192 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v218 = sub_253462A5C(&qword_269CDE090);
  sub_253465998();
  uint64_t v203 = v64;
  MEMORY[0x270FA5388](v65);
  sub_25346CB04();
  uint64_t v242 = v66;
  uint64_t v217 = sub_253462A5C(&qword_269CDE098);
  sub_253465998();
  uint64_t v201 = v67;
  MEMORY[0x270FA5388](v68);
  sub_2534D8F5C((uint64_t)v192 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v241 = sub_253462A5C(&qword_269CDE0A0);
  sub_253465998();
  uint64_t v202 = v70;
  MEMORY[0x270FA5388](v71);
  sub_2534D8F5C((uint64_t)v192 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v215 = sub_253462A5C(&qword_269CDE0A8);
  sub_253465998();
  uint64_t v199 = v73;
  MEMORY[0x270FA5388](v74);
  sub_2534D8F5C((uint64_t)v192 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v214 = sub_253462A5C(&qword_269CDE0B0);
  sub_253465998();
  uint64_t v198 = v76;
  MEMORY[0x270FA5388](v77);
  sub_25346CB04();
  sub_2534D8F5C(v78);
  uint64_t v243 = sub_253462A5C(&qword_269CDE0B8);
  sub_253465998();
  uint64_t v240 = v79;
  MEMORY[0x270FA5388](v80);
  sub_25346CB04();
  uint64_t v246 = v81;
  uint64_t v239 = type metadata accessor for AST.FlatExpr(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v82);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v83);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v84);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v85);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v86);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v87);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v88);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v89);
  sub_2534F823C();
  MEMORY[0x270FA5388](v90);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v91);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v92);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v93);
  sub_2534836BC();
  MEMORY[0x270FA5388](v94);
  sub_25351C770();
  MEMORY[0x270FA5388](v95);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v96);
  sub_25351C4B4();
  MEMORY[0x270FA5388](v97);
  sub_25351C738();
  MEMORY[0x270FA5388](v98);
  uint64_t v100 = (char *)v192 - v99;
  uint64_t v101 = v17[3];
  BOOL v244 = v17;
  sub_253472068(v17, v101);
  sub_25350CDB8();
  uint64_t v102 = v245;
  sub_253B0A660();
  if (v102)
  {
LABEL_8:
    uint64_t v122 = (uint64_t)v244;
    goto LABEL_9;
  }
  v192[1] = v15;
  v192[2] = v14;
  uint64_t v193 = v10;
  uint64_t v194 = v13;
  uint64_t v195 = v12;
  uint64_t v103 = v241;
  uint64_t v245 = v100;
  uint64_t v104 = v243;
  uint64_t v105 = v246;
  uint64_t v106 = sub_253B0A390();
  uint64_t v107 = *(void *)(v106 + 16);
  uint64_t v108 = v105;
  if (!v107
    || (v192[0] = 0,
        uint64_t v109 = *(unsigned __int8 *)(v106 + 32),
        uint64_t v110 = sub_25347B78C(1, v107, v106, v106 + 32, 0, (2 * v107) | 1),
        uint64_t v112 = v111,
        unint64_t v114 = v113,
        swift_bridgeObjectRelease(),
        uint64_t v115 = v110,
        v112 != v114 >> 1))
  {
    uint64_t v117 = v239;
    sub_253B0A090();
    swift_allocError();
    uint64_t v119 = v118;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v119 = v117;
    sub_253B0A2D0();
    sub_2534F8464();
    sub_25351C748();
    uint64_t v120 = sub_2534F859C();
    v121(v120);
    swift_willThrow();
LABEL_7:
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v108, v104);
    goto LABEL_8;
  }
  uint64_t v116 = v192[0];
  switch(v109)
  {
    case 1:
      sub_25351C8B8();
      sub_25350D4F0();
      sub_25351C5D8();
      sub_2534D235C();
      sub_25351C334();
      sub_253462A5C(&qword_269CDDCF0);
      type metadata accessor for AST.FlatValue(0);
      sub_25351C8B8();
      sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_25351C334();
      sub_2534659CC();
      v172();
      swift_unknownObjectRelease();
      sub_2534F83C0();
      sub_2534659CC();
      v173();
      goto LABEL_34;
    case 2:
      sub_25350D4A4();
      uint64_t v123 = v235;
      sub_25351C20C();
      uint64_t v242 = v115;
      sub_2534D22E0();
      uint64_t v124 = v193;
      sub_253B0A370();
      uint64_t v159 = v103;
      uint64_t v238 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v160 = v124 + *(int *)(v238 + 48);
      type metadata accessor for AST.FlatValue(0);
      sub_25351C8B8();
      sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_253B0A370();
      uint64_t v161 = v202;
      uint64_t v237 = v160;
      sub_253B0A370();
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v123, v159);
      swift_unknownObjectRelease();
      uint64_t v189 = sub_25351C814();
      v190(v189);
      sub_25351C628();
      goto LABEL_34;
    case 3:
      sub_25350D458();
      sub_253B0A2C0();
      if (v116) {
        goto LABEL_7;
      }
      type metadata accessor for AST.FlatValue(0);
      sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_253B0A370();
      uint64_t v165 = sub_253B0A320();
      uint64_t v241 = v179;
      uint64_t v242 = v165;
      uint64_t v180 = sub_253462A5C(&qword_269CDDCE0);
      uint64_t v181 = (uint64_t *)(v194 + *(int *)(v180 + 48));
      sub_2534659CC();
      v182();
      swift_unknownObjectRelease();
      sub_25351C384();
      v183();
      uint64_t v184 = v241;
      *uint64_t v181 = v242;
      v181[1] = v184;
      sub_25351C520();
      goto LABEL_34;
    case 4:
      sub_25350D40C();
      sub_25351C20C();
      type metadata accessor for AST.FlatValue(0);
      sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_25351C9DC();
      sub_253462A5C(&qword_269CDDCD8);
      sub_25351C9DC();
      sub_2534659CC();
      v174();
      swift_unknownObjectRelease();
      sub_25351C384();
      v175();
      goto LABEL_34;
    case 5:
      LOBYTE(a10) = 5;
      sub_25350D31C();
      sub_253B0A2C0();
      if (v116) {
        goto LABEL_7;
      }
      sub_253462A5C(&qword_269CDDFD8);
      sub_25350D6DC();
      sub_25351C334();
      sub_2534659CC();
      v166();
      swift_unknownObjectRelease();
      uint64_t v167 = sub_25351C7FC();
      v168(v167);
      sub_25351C6F0(a10);
      goto LABEL_34;
    case 6:
      sub_25350D2D0();
      sub_25351C20C();
      LOBYTE(a10) = 0;
      uint64_t v125 = sub_253B0A320();
      uint64_t v127 = v126;
      uint64_t v242 = v125;
      sub_253462A5C(&qword_269CDDDB8);
      char v247 = 1;
      sub_25350CC48();
      sub_253B0A370();
      sub_2534659CC();
      v169();
      swift_unknownObjectRelease();
      sub_25351C384();
      v170();
      uint64_t v171 = v197;
      uint64_t *v197 = v242;
      v171[1] = v127;
      v171[2] = a10;
      sub_25351C520();
      goto LABEL_34;
    case 7:
      LOBYTE(a10) = 7;
      sub_25350D1E0();
      sub_25351C20C();
      sub_253462A5C(&qword_269CDDFB8);
      sub_25350D638();
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v128();
      swift_unknownObjectRelease();
      uint64_t v129 = sub_25351C24C();
      v130(v129);
      sub_25351C4A0(a10);
      goto LABEL_34;
    case 8:
      sub_25350D148();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C334();
      sub_253462A5C(&qword_269CDDCD0);
      sub_25351C8B8();
      sub_25350D5EC();
      sub_25351C334();
      sub_2534659CC();
      v176();
      swift_unknownObjectRelease();
      uint64_t v177 = sub_25351C404();
      v178(v177);
      sub_25351C514();
      goto LABEL_34;
    case 9:
      sub_25350D0FC();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C3F4();
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v131();
      swift_unknownObjectRelease();
      uint64_t v132 = sub_25351C24C();
      v133(v132);
      sub_25351C628();
      goto LABEL_34;
    case 10:
      sub_25350D0B0();
      sub_25351C20C();
      uint64_t v134 = sub_253B0A320();
      uint64_t v136 = v135;
      sub_25351C900(1);
      LODWORD(v242) = sub_253B0A330();
      sub_25351C900(2);
      LODWORD(v241) = sub_253B0A2F0();
      sub_2534659CC();
      v185();
      swift_unknownObjectRelease();
      uint64_t v186 = sub_25351C720();
      v187(v186);
      uint64_t v188 = v196;
      *uint64_t v196 = v134;
      v188[1] = v136;
      *((unsigned char *)v188 + 16) = v242 & 1;
      *((unsigned char *)v188 + 17) = v241;
      goto LABEL_34;
    case 11:
      sub_25350D064();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C3F4();
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v137();
      swift_unknownObjectRelease();
      uint64_t v138 = sub_25351C24C();
      v139(v138);
      sub_25351C628();
      goto LABEL_34;
    case 12:
      LOBYTE(a10) = 12;
      sub_25350D018();
      sub_25351C20C();
      sub_253462A5C(&qword_269CDC550);
      sub_25350D588(&qword_269CDE0C0);
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v140();
      swift_unknownObjectRelease();
      uint64_t v141 = sub_25351C24C();
      v142(v141);
      sub_25351C4A0(a10);
      goto LABEL_34;
    case 13:
      sub_25350CFCC();
      sub_25351C464();
      sub_2534D8C7C();
      sub_2534659CC();
      v143();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v144();
      sub_25351C520();
      goto LABEL_33;
    case 14:
      sub_25350CF80();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C3F4();
      sub_253B0A310();
      sub_25351C440();
      sub_2534659CC();
      v145();
      swift_unknownObjectRelease();
      uint64_t v146 = sub_25351C24C();
      v147(v146);
      sub_25351C628();
      goto LABEL_34;
    case 15:
      sub_25350CF34();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C3F4();
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v148();
      swift_unknownObjectRelease();
      uint64_t v149 = sub_25351C24C();
      v150(v149);
      sub_25351C628();
      goto LABEL_34;
    case 16:
      sub_25350CEE8();
      sub_25351C20C();
      sub_253B055C0();
      sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
      sub_25351C3F4();
      sub_25351C28C();
      sub_25351C440();
      sub_2534659CC();
      v162();
      swift_unknownObjectRelease();
      uint64_t v163 = sub_25351C24C();
      v164(v163);
      sub_25351C628();
      goto LABEL_34;
    case 17:
      sub_25350CE9C();
      sub_25351C464();
      sub_2534D8C7C();
      sub_2534659CC();
      v151();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v152();
      sub_25351C520();
      goto LABEL_33;
    case 18:
      sub_25350CE50();
      sub_25351C464();
      sub_2534D8C7C();
      sub_2534659CC();
      v153();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v154();
      sub_25351C520();
      goto LABEL_33;
    case 19:
      sub_25350CE04();
      sub_25351C464();
      sub_2534D97B4();
      v155();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v156();
      sub_25351C520();
LABEL_33:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      sub_25350D53C();
      sub_25351C5D8();
      type metadata accessor for AST.FlatValue(0);
      sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
      sub_25351C334();
      sub_25351C440();
      sub_2534659CC();
      v157();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v158();
LABEL_34:
      swift_storeEnumTagMultiPayload();
      sub_253509F00();
      break;
  }
  uint64_t v191 = (uint64_t)v244;
  sub_253509F00();
  uint64_t v122 = v191;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v122);
  sub_2534847C8();
}

uint64_t type metadata accessor for AST.FlatValue(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDE140);
}

uint64_t sub_253509EAC(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t sub_253509F00()
{
  uint64_t v1 = sub_25351CA08();
  v2(v1);
  sub_25346CAF4();
  uint64_t v3 = sub_25351CA1C();
  v4(v3);
  return v0;
}

unint64_t sub_253509F48()
{
  unint64_t result = qword_269CDDD00;
  if (!qword_269CDDD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDD00);
  }
  return result;
}

uint64_t sub_253509F94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253509FDC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  uint64_t v4 = sub_2534B4668();
  v5(v4);
  return a2;
}

void sub_25350A030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AST.FlatExpr.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_25350A048()
{
}

uint64_t AST.Update.lhs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_253509FDC(v1, a1, (void (*)(void))type metadata accessor for AST.FlatValue);
}

uint64_t AST.Update.lhs.setter()
{
  return sub_25350D780();
}

uint64_t (*AST.Update.lhs.modify())()
{
  return nullsub_1;
}

uint64_t AST.Update.path.getter()
{
  type metadata accessor for AST.Update(0);
  return swift_bridgeObjectRetain();
}

uint64_t AST.Update.path.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AST.Update(0) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AST.Update.path.modify())()
{
  return nullsub_1;
}

uint64_t AST.Update.kind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for AST.Update(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t AST.Update.kind.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AST.Update(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AST.Update.kind.modify())()
{
  return nullsub_1;
}

uint64_t AST.Update.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AST.Update(0);
  return sub_253509FDC(v1 + *(int *)(v3 + 28), a1, (void (*)(void))type metadata accessor for AST.FlatValue);
}

uint64_t AST.Update.value.setter()
{
  return sub_25350D780();
}

uint64_t (*AST.Update.value.modify())()
{
  return nullsub_1;
}

uint64_t AST.Update.init(lhs:path:kind:value:)@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  char v5 = *a2;
  sub_253509F00();
  uint64_t v6 = type metadata accessor for AST.Update(0);
  *(void *)(a3 + *(int *)(v6 + 20)) = a1;
  *(unsigned char *)(a3 + *(int *)(v6 + 24)) = v5;
  return sub_253509F00();
}

void static AST.Update.== infix(_:_:)()
{
  sub_2534DA0C4();
  static AST.FlatValue.== infix(_:_:)();
  if (v2)
  {
    uint64_t v3 = type metadata accessor for AST.Update(0);
    sub_2534BB3BC();
    if ((v4 & 1) != 0 && *(unsigned __int8 *)(v1 + *(int *)(v3 + 24)) == *(unsigned __int8 *)(v0 + *(int *)(v3 + 24)))
    {
      static AST.FlatValue.== infix(_:_:)();
    }
  }
}

uint64_t sub_25350A444(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7563372 && a2 == 0xE300000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1752457584 && a2 == 0xE400000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1684957547 && a2 == 0xE400000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_25350A5C4(char a1)
{
  uint64_t result = 7563372;
  switch(a1)
  {
    case 1:
      uint64_t result = 1752457584;
      break;
    case 2:
      uint64_t result = 1684957547;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25350A63C()
{
  return sub_25350A5C4(*v0);
}

uint64_t sub_25350A644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25350A444(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25350A66C(uint64_t a1)
{
  unint64_t v2 = sub_25350D7D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25350A6A8(uint64_t a1)
{
  unint64_t v2 = sub_25350D7D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.Update.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDE0E8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253472068(v2, v2[3]);
  sub_25350D7D4();
  sub_2534DA3BC();
  type metadata accessor for AST.FlatValue(0);
  sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
  sub_25351C658();
  if (!v0)
  {
    type metadata accessor for AST.Update(0);
    sub_25351C8C4();
    sub_253462A5C(&qword_269CDDDD8);
    sub_25350CA28();
    sub_253B0A440();
    sub_2534D28F0();
    sub_253B0A440();
    sub_25351C658();
  }
  uint64_t v4 = sub_25351C5C0();
  v5(v4);
  sub_2534847C8();
}

void AST.Update.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_2534847F8();
  uint64_t v15 = v14;
  uint64_t v24 = v16;
  type metadata accessor for AST.FlatValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v17);
  sub_2534727F8();
  MEMORY[0x270FA5388](v18);
  sub_253462A5C(&qword_269CDE0F8);
  sub_253465998();
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = sub_25349888C();
  uint64_t v21 = type metadata accessor for AST.Update(v20);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v22);
  sub_25347FAAC();
  sub_253472068(v15, v15[3]);
  sub_25350D7D4();
  sub_253B0A660();
  if (v12)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v15);
  }
  else
  {
    sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    sub_253B0A370();
    sub_253509F00();
    sub_253462A5C(&qword_269CDDDD8);
    sub_25351C8C4();
    sub_25350CCF4();
    sub_253B0A370();
    *(void *)(v13 + *(int *)(v21 + 20)) = v25;
    sub_2534D293C();
    sub_253B0A370();
    *(unsigned char *)(v13 + *(int *)(v21 + 24)) = a12;
    sub_253B0A370();
    sub_25351C3E8();
    v23();
    sub_253509F00();
    sub_253509FDC(v13, v24, (void (*)(void))type metadata accessor for AST.Update);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v15);
    sub_253509EAC(v13, (void (*)(void))type metadata accessor for AST.Update);
  }
  sub_2534847C8();
}

void sub_25350AC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AST.Update.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_25350ACA0()
{
}

uint64_t sub_25350ACB8()
{
  uint64_t v0 = sub_253462A5C(&qword_269CDE108);
  sub_2534AF1BC(v0, qword_269CDDCA8);
  sub_253462BD4(v0, (uint64_t)qword_269CDDCA8);
  return sub_253B07050();
}

BOOL static PiranaHelper.isPiranaVariable(_:)()
{
  uint64_t v1 = sub_253462A5C(&qword_269CDE100);
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_2534835B0();
  if (qword_269CDA7C8 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_253462A5C(&qword_269CDE108);
  sub_253462BD4(v3, (uint64_t)qword_269CDDCA8);
  sub_25350D820();
  sub_25350D86C(&qword_269CDE118, &qword_269CDE108);
  sub_253B09660();
  uint64_t v4 = sub_253462A5C(&qword_269CDE120);
  BOOL v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, 1, v4) != 1;
  sub_253472458(v0, &qword_269CDE100);
  return v5;
}

uint64_t sub_25350AE7C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v137 = sub_253462A5C(&qword_269CDCCE0);
  uint64_t v4 = *(void *)(v137 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v137);
  uint64_t v132 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v141 = (uint64_t)&v123 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v123 - v10;
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v123 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (uint64_t *)((char *)&v123 - v16);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v134 = (uint64_t *)((char *)&v123 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v130 = (uint64_t *)((char *)&v123 - v21);
  MEMORY[0x270FA5388](v20);
  uint64_t v129 = (uint64_t *)((char *)&v123 - v22);
  uint64_t v144 = a1;
  uint64_t v23 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v23)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      if (v23) {
        return sub_25350C018(0, v23, 1, v144);
      }
      return result;
    }
    goto LABEL_157;
  }
  uint64_t v25 = result;
  uint64_t result = sub_2539DF778(v23 / 2);
  uint64_t v125 = result;
  uint64_t v126 = v23;
  unint64_t v135 = v26;
  uint64_t v136 = v4;
  if (v23 <= 0)
  {
LABEL_121:
    uint64_t v28 = MEMORY[0x263F8EE78];
    unint64_t v65 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_122:
    if (v65 < 2)
    {
LABEL_133:
      uint64_t result = swift_bridgeObjectRelease();
      if (v126 >= -1) {
        goto LABEL_134;
      }
      goto LABEL_161;
    }
    uint64_t v116 = *v144;
    while (1)
    {
      unint64_t v117 = v65 - 2;
      if (v65 < 2) {
        break;
      }
      if (!v116) {
        goto LABEL_165;
      }
      uint64_t v118 = v28;
      uint64_t v119 = *(void *)(v28 + 32 + 16 * v117);
      uint64_t v120 = *(void *)(v28 + 32 + 16 * (v65 - 1) + 8);
      uint64_t result = sub_25350C2C4(v116 + *(void *)(v136 + 72) * v119, v116 + *(void *)(v136 + 72) * *(void *)(v28 + 32 + 16 * (v65 - 1)), v116 + *(void *)(v136 + 72) * v120, v135);
      if (v2) {
        goto LABEL_119;
      }
      if (v120 < v119) {
        goto LABEL_152;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v118 = result;
      }
      if (v117 >= *(void *)(v118 + 16)) {
        goto LABEL_153;
      }
      uint64_t v121 = (void *)(v118 + 32 + 16 * v117);
      *uint64_t v121 = v119;
      v121[1] = v120;
      unint64_t v122 = *(void *)(v118 + 16);
      if (v65 > v122) {
        goto LABEL_154;
      }
      uint64_t result = (uint64_t)memmove((void *)(v118 + 32 + 16 * (v65 - 1)), (const void *)(v118 + 32 + 16 * v65), 16 * (v122 - v65));
      *(void *)(v118 + 16) = v122 - 1;
      unint64_t v65 = v122 - 1;
      uint64_t v28 = v118;
      if (v122 <= 2) {
        goto LABEL_133;
      }
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
    return result;
  }
  uint64_t v124 = v25;
  uint64_t v138 = v14;
  uint64_t v27 = 0;
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v29 = v23;
  uint64_t v140 = v11;
  uint64_t v127 = v17;
  while (1)
  {
    uint64_t v30 = v27;
    uint64_t v139 = v29;
    if (v27 + 1 >= v29)
    {
      uint64_t v37 = v27 + 1;
    }
    else
    {
      uint64_t v128 = v2;
      uint64_t v31 = *v144;
      uint64_t v32 = *(void *)(v4 + 72);
      uint64_t v123 = v27 + 1;
      uint64_t v33 = v129;
      sub_2534B45B0(v31 + v32 * (v27 + 1), (uint64_t)v129, &qword_269CDCCE0);
      uint64_t v133 = v30;
      uint64_t v131 = v31;
      uint64_t v142 = v32;
      uint64_t v34 = v130;
      sub_2534B45B0(v31 + v32 * v30, (uint64_t)v130, &qword_269CDCCE0);
      if (*v33 == *v34 && v33[1] == v34[1]) {
        int v36 = 0;
      }
      else {
        int v36 = sub_253B0A4C0();
      }
      sub_253472458((uint64_t)v130, &qword_269CDCCE0);
      uint64_t result = sub_253472458((uint64_t)v129, &qword_269CDCCE0);
      uint64_t v30 = v133;
      uint64_t v143 = v133 + 2;
      if (v133 + 2 < v29)
      {
        uint64_t v38 = v142 * v123;
        uint64_t v39 = v131;
        uint64_t v40 = v142 * (v133 + 2);
        while (1)
        {
          uint64_t v41 = v134;
          sub_2534B45B0(v39 + v40, (uint64_t)v134, &qword_269CDCCE0);
          sub_2534B45B0(v39 + v38, (uint64_t)v17, &qword_269CDCCE0);
          BOOL v42 = *v41 == *v17 && v41[1] == v17[1];
          int v43 = v42 ? 0 : sub_253B0A4C0();
          sub_253472458((uint64_t)v17, &qword_269CDCCE0);
          uint64_t result = sub_253472458((uint64_t)v134, &qword_269CDCCE0);
          if ((v36 ^ v43)) {
            break;
          }
          v39 += v142;
          ++v143;
          uint64_t v11 = v140;
          if (v143 >= v139)
          {
            uint64_t v143 = v139;
            goto LABEL_24;
          }
        }
        uint64_t v11 = v140;
LABEL_24:
        uint64_t v30 = v133;
      }
      if (v36)
      {
        uint64_t v37 = v143;
        if (v143 < v30) {
          goto LABEL_158;
        }
        uint64_t v4 = v136;
        if (v30 < v143)
        {
          uint64_t v44 = 0;
          uint64_t v45 = v142 * (v143 - 1);
          uint64_t v46 = v30;
          uint64_t v47 = v143 * v142;
          uint64_t v48 = v46;
          uint64_t v49 = v46 * v142;
          do
          {
            if (v48 != v37 + v44 - 1)
            {
              uint64_t v50 = v131;
              if (!v131) {
                goto LABEL_164;
              }
              unint64_t v51 = v131 + v49;
              sub_25351C1B0(v131 + v49, v132, &qword_269CDCCE0);
              if (v49 < v45 || v51 >= v50 + v47)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v49 != v45)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              uint64_t result = sub_25351C1B0(v132, v50 + v45, &qword_269CDCCE0);
              uint64_t v11 = v140;
              uint64_t v37 = v143;
            }
            ++v48;
            --v44;
            v45 -= v142;
            v47 -= v142;
            v49 += v142;
          }
          while (v48 < v37 + v44);
          uint64_t v4 = v136;
          uint64_t v2 = v128;
          uint64_t v30 = v133;
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v37 = v143;
        uint64_t v4 = v136;
      }
      uint64_t v2 = v128;
    }
LABEL_44:
    if (v37 < v139)
    {
      if (__OFSUB__(v37, v30)) {
        goto LABEL_156;
      }
      if (v37 - v30 < v124)
      {
        if (__OFADD__(v30, v124)) {
          goto LABEL_159;
        }
        uint64_t v53 = v139;
        if (v30 + v124 < v139) {
          uint64_t v53 = v30 + v124;
        }
        if (v53 < v30) {
          goto LABEL_160;
        }
        if (v37 != v53)
        {
          uint64_t v133 = v30;
          uint64_t v54 = v11;
          uint64_t v123 = v28;
          uint64_t v128 = v2;
          uint64_t v139 = *(void *)(v4 + 72);
          uint64_t v142 = v37 * v139;
          uint64_t v143 = v139 * (v37 - 1);
          uint64_t v131 = v53;
          do
          {
            uint64_t v55 = 0;
            uint64_t v56 = v133;
            while (1)
            {
              uint64_t v57 = *v144;
              uint64_t v58 = v138;
              sub_2534B45B0(v142 + v55 + *v144, (uint64_t)v138, &qword_269CDCCE0);
              sub_2534B45B0(v143 + v55 + v57, (uint64_t)v54, &qword_269CDCCE0);
              if (*v58 == *(void *)v54 && v58[1] == *((void *)v54 + 1)) {
                break;
              }
              char v60 = sub_253B0A4C0();
              sub_253472458((uint64_t)v54, &qword_269CDCCE0);
              uint64_t result = sub_253472458((uint64_t)v58, &qword_269CDCCE0);
              if ((v60 & 1) == 0) {
                goto LABEL_63;
              }
              uint64_t v61 = *v144;
              if (!*v144) {
                goto LABEL_162;
              }
              uint64_t v62 = v61 + v143 + v55;
              sub_25351C1B0(v61 + v142 + v55, v141, &qword_269CDCCE0);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_25351C1B0(v141, v62, &qword_269CDCCE0);
              uint64_t v54 = v140;
              v55 -= v139;
              if (v37 == ++v56) {
                goto LABEL_63;
              }
            }
            sub_253472458((uint64_t)v54, &qword_269CDCCE0);
            uint64_t result = sub_253472458((uint64_t)v58, &qword_269CDCCE0);
LABEL_63:
            ++v37;
            v143 += v139;
            v142 += v139;
          }
          while (v37 != v131);
          uint64_t v37 = v131;
          uint64_t v2 = v128;
          uint64_t v28 = v123;
          uint64_t v11 = v54;
          uint64_t v30 = v133;
        }
      }
    }
    if (v37 < v30) {
      goto LABEL_155;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v143 = v37;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *(void *)(v28 + 16) + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    unint64_t v64 = *(void *)(v28 + 16);
    unint64_t v63 = *(void *)(v28 + 24);
    unint64_t v65 = v64 + 1;
    uint64_t v66 = v2;
    if (v64 >= v63 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v63 > 1), v64 + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    *(void *)(v28 + 16) = v65;
    uint64_t v67 = v28 + 32;
    uint64_t v68 = (uint64_t *)(v28 + 32 + 16 * v64);
    uint64_t v69 = v143;
    *uint64_t v68 = v30;
    v68[1] = v69;
    if (v64) {
      break;
    }
    unint64_t v65 = 1;
LABEL_113:
    uint64_t v29 = v144[1];
    uint64_t v27 = v143;
    uint64_t v2 = v66;
    uint64_t v17 = v127;
    uint64_t v4 = v136;
    if (v143 >= v29) {
      goto LABEL_122;
    }
  }
  while (1)
  {
    unint64_t v70 = v65 - 1;
    if (v65 >= 4)
    {
      unint64_t v75 = v67 + 16 * v65;
      uint64_t v76 = *(void *)(v75 - 64);
      uint64_t v77 = *(void *)(v75 - 56);
      BOOL v81 = __OFSUB__(v77, v76);
      uint64_t v78 = v77 - v76;
      if (v81) {
        goto LABEL_140;
      }
      uint64_t v80 = *(void *)(v75 - 48);
      uint64_t v79 = *(void *)(v75 - 40);
      BOOL v81 = __OFSUB__(v79, v80);
      uint64_t v73 = v79 - v80;
      char v74 = v81;
      if (v81) {
        goto LABEL_141;
      }
      unint64_t v82 = v65 - 2;
      uint64_t v83 = (uint64_t *)(v67 + 16 * (v65 - 2));
      uint64_t v85 = *v83;
      uint64_t v84 = v83[1];
      BOOL v81 = __OFSUB__(v84, v85);
      uint64_t v86 = v84 - v85;
      if (v81) {
        goto LABEL_142;
      }
      BOOL v81 = __OFADD__(v73, v86);
      uint64_t v87 = v73 + v86;
      if (v81) {
        goto LABEL_144;
      }
      if (v87 >= v78)
      {
        uint64_t v105 = (uint64_t *)(v67 + 16 * v70);
        uint64_t v107 = *v105;
        uint64_t v106 = v105[1];
        BOOL v81 = __OFSUB__(v106, v107);
        uint64_t v108 = v106 - v107;
        if (v81) {
          goto LABEL_150;
        }
        BOOL v98 = v73 < v108;
        goto LABEL_102;
      }
    }
    else
    {
      if (v65 != 3)
      {
        uint64_t v99 = *(void *)(v28 + 32);
        uint64_t v100 = *(void *)(v28 + 40);
        BOOL v81 = __OFSUB__(v100, v99);
        uint64_t v92 = v100 - v99;
        char v93 = v81;
        goto LABEL_96;
      }
      uint64_t v72 = *(void *)(v28 + 32);
      uint64_t v71 = *(void *)(v28 + 40);
      BOOL v81 = __OFSUB__(v71, v72);
      uint64_t v73 = v71 - v72;
      char v74 = v81;
    }
    if (v74) {
      goto LABEL_143;
    }
    unint64_t v82 = v65 - 2;
    uint64_t v88 = (uint64_t *)(v67 + 16 * (v65 - 2));
    uint64_t v90 = *v88;
    uint64_t v89 = v88[1];
    BOOL v91 = __OFSUB__(v89, v90);
    uint64_t v92 = v89 - v90;
    char v93 = v91;
    if (v91) {
      goto LABEL_145;
    }
    uint64_t v94 = (uint64_t *)(v67 + 16 * v70);
    uint64_t v96 = *v94;
    uint64_t v95 = v94[1];
    BOOL v81 = __OFSUB__(v95, v96);
    uint64_t v97 = v95 - v96;
    if (v81) {
      goto LABEL_147;
    }
    if (__OFADD__(v92, v97)) {
      goto LABEL_149;
    }
    if (v92 + v97 >= v73)
    {
      BOOL v98 = v73 < v97;
LABEL_102:
      if (v98) {
        unint64_t v70 = v82;
      }
      goto LABEL_104;
    }
LABEL_96:
    if (v93) {
      goto LABEL_146;
    }
    uint64_t v101 = (uint64_t *)(v67 + 16 * v70);
    uint64_t v103 = *v101;
    uint64_t v102 = v101[1];
    BOOL v81 = __OFSUB__(v102, v103);
    uint64_t v104 = v102 - v103;
    if (v81) {
      goto LABEL_148;
    }
    if (v104 < v92) {
      goto LABEL_113;
    }
LABEL_104:
    unint64_t v109 = v70 - 1;
    if (v70 - 1 >= v65)
    {
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    if (!*v144) {
      goto LABEL_163;
    }
    uint64_t v110 = v28;
    uint64_t v111 = (uint64_t *)(v67 + 16 * v109);
    uint64_t v112 = *v111;
    unint64_t v113 = (void *)(v67 + 16 * v70);
    uint64_t v114 = v113[1];
    uint64_t result = sub_25350C2C4(*v144 + *(void *)(v136 + 72) * *v111, *v144 + *(void *)(v136 + 72) * *v113, *v144 + *(void *)(v136 + 72) * v114, v135);
    if (v66) {
      break;
    }
    if (v114 < v112) {
      goto LABEL_137;
    }
    if (v70 > *(void *)(v110 + 16)) {
      goto LABEL_138;
    }
    *uint64_t v111 = v112;
    *(void *)(v67 + 16 * v109 + 8) = v114;
    unint64_t v115 = *(void *)(v110 + 16);
    if (v70 >= v115) {
      goto LABEL_139;
    }
    uint64_t v28 = v110;
    unint64_t v65 = v115 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v67 + 16 * v70), v113 + 2, 16 * (v115 - 1 - v70));
    *(void *)(v110 + 16) = v115 - 1;
    uint64_t v11 = v140;
    if (v115 <= 2) {
      goto LABEL_113;
    }
  }
  uint64_t v2 = v66;
LABEL_119:
  uint64_t result = swift_bridgeObjectRelease();
  if (v126 < -1)
  {
    __break(1u);
    goto LABEL_121;
  }
LABEL_134:
  *(void *)(v125 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void sub_25350B90C()
{
}

void sub_25350B940(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
LABEL_12:
      if (v4 != a3)
      {
        uint64_t v16 = sub_253462A5C((uint64_t *)&unk_269CDB490);
        sub_25346CB34(v16);
        sub_2539DFD88(a2 + *(void *)(v18 + 72) * a3, v5, (unint64_t)v13+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
        return;
      }
      goto LABEL_17;
    }
    sub_253462A5C(&qword_269CDB510);
    uint64_t v8 = sub_253462A5C((uint64_t *)&unk_269CDB490);
    sub_25346CB34(v8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    if (v10)
    {
      if (v14 - v12 != 0x8000000000000000 || v10 != -1)
      {
        v13[2] = v5;
        v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

void sub_25350BA8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 > 0)
    {
      sub_253462A5C(&qword_269CDB5A8);
      uint64_t v8 = (void *)sub_25351C914();
      size_t v9 = j__malloc_size(v8);
      v8[2] = v5;
      v8[3] = (2 * ((uint64_t)(v9 - 32) / 8)) | 1;
    }
    if (v4 != a3)
    {
      sub_2539DFD94(a2 + 8 * a3, v5);
      return;
    }
    goto LABEL_9;
  }
}

size_t sub_25350BB48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_253462A5C(&qword_269CDE4B0);
  uint64_t v3 = *(void *)(sub_253462A5C(&qword_269CDCCE0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = *(void *)(sub_253462A5C(&qword_269CDCCE0) - 8);
      uint64_t v10 = sub_25351BAAC(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_25351C1A8();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_25350BCDC()
{
}

void sub_25350BD10()
{
  sub_2534B3258();
  unint64_t v6 = v5 >> 1;
  uint64_t v7 = (v5 >> 1) - v1;
  if (__OFSUB__(v5 >> 1, v1))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v1;
  uint64_t v11 = v0;
  if (v7 > 0)
  {
    sub_253462A5C(v2);
    uint64_t v12 = v9(0);
    sub_25346CB34(v12);
    uint64_t v14 = *(void *)(v13 + 72);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = (void *)swift_allocObject();
    size_t v18 = j__malloc_size(v17);
    if (v14)
    {
      if (v18 - v16 != 0x8000000000000000 || v14 != -1)
      {
        v17[2] = v7;
        v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v17 = (void *)MEMORY[0x263F8EE78];
LABEL_12:
  if (v6 != v10)
  {
    uint64_t v20 = v9(0);
    sub_25346CB34(v20);
    v8(v11 + *(void *)(v22 + 72) * v10, v7, (char *)v17 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)));
LABEL_14:
    sub_253465A14();
    return;
  }
LABEL_18:
  __break(1u);
}

void *sub_25350BE5C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_2534DA0C4();
  if (v3 <= 0)
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    sub_253462A5C(&qword_269CDE498);
    uint64_t v4 = (void *)sub_25351C914();
    size_t v5 = j__malloc_size(v4);
    v4[2] = v2;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 2);
  }
  unint64_t v6 = (char *)sub_2534D9778();
  sub_2539E03CC(v6, v7, v8);
  return v4;
}

const void *sub_25350BEE8(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return (const void *)MEMORY[0x263F8EE78];
  }
  sub_253462A5C(&qword_269CDE4A8);
  uint64_t v1 = (const void *)sub_25351C914();
  size_t v2 = j__malloc_size(v1);
  sub_25351C480(v2 - 32);
  sub_25351BE14(v3, v4, v5, v6);
  sub_25351C7B4();
  sub_25351CA50();
  if (!v7)
  {
    __break(1u);
    return (const void *)MEMORY[0x263F8EE78];
  }
  return v1;
}

const void *sub_25350BF80(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return (const void *)MEMORY[0x263F8EE78];
  }
  sub_253462A5C(&qword_269CDE490);
  uint64_t v1 = (const void *)sub_25351C914();
  size_t v2 = j__malloc_size(v1);
  sub_25351C480(v2 - 32);
  sub_25351BFA8(v3, v4, v5, v6);
  sub_25351C7B4();
  sub_25351CA50();
  if (!v7)
  {
    __break(1u);
    return (const void *)MEMORY[0x263F8EE78];
  }
  return v1;
}

uint64_t sub_25350C018(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v32 = sub_253462A5C(&qword_269CDCCE0);
  uint64_t v7 = MEMORY[0x270FA5388](v32);
  uint64_t v36 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (uint64_t *)((char *)&v29 - v10);
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (uint64_t *)((char *)&v29 - v14);
  uint64_t v35 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v38 = v16 * (v35 - 1);
    uint64_t v33 = (char *)&v29 - v14;
    uint64_t v34 = v16;
    uint64_t v37 = v16 * v35;
    uint64_t v17 = &qword_269CDCCE0;
    while (2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v31;
      while (1)
      {
        uint64_t v20 = *a4;
        sub_2534B45B0(v37 + v18 + *a4, (uint64_t)v15, v17);
        sub_2534B45B0(v38 + v18 + v20, (uint64_t)v11, v17);
        if (*v15 == *v11 && v15[1] == v11[1]) {
          break;
        }
        char v22 = sub_253B0A4C0();
        sub_253472458((uint64_t)v11, v17);
        uint64_t result = sub_253472458((uint64_t)v15, v17);
        if (v22)
        {
          uint64_t v23 = *a4;
          if (!*a4)
          {
            __break(1u);
            return result;
          }
          uint64_t v24 = v11;
          uint64_t v25 = v17;
          unint64_t v26 = a4;
          uint64_t v27 = v23 + v38 + v18;
          uint64_t v28 = v25;
          sub_25351C1B0(v23 + v37 + v18, v36, v25);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = sub_25351C1B0(v36, v27, v28);
          v18 -= v34;
          ++v19;
          a4 = v26;
          uint64_t v17 = v28;
          uint64_t v11 = v24;
          uint64_t v15 = v33;
          if (v35 != v19) {
            continue;
          }
        }
        goto LABEL_13;
      }
      sub_253472458((uint64_t)v11, v17);
      uint64_t result = sub_253472458((uint64_t)v15, v17);
LABEL_13:
      v38 += v34;
      v37 += v34;
      if (++v35 != v30) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_25350C2C4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v53 = a4;
  unint64_t v55 = a3;
  uint64_t v54 = sub_253462A5C(&qword_269CDCCE0);
  uint64_t v6 = MEMORY[0x270FA5388](v54);
  uint64_t v8 = (uint64_t *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v58 = (uint64_t *)((char *)&v52 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t *)((char *)&v52 - v12);
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (uint64_t *)((char *)&v52 - v15);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_88;
  }
  int64_t v21 = v55 - a2;
  if (v55 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_89;
  }
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  uint64_t v57 = v18;
  if (v19 / v18 >= v21 / v18)
  {
    unint64_t v37 = v53;
    uint64_t result = sub_253525548(a2, v21 / v18);
    unint64_t v27 = v37 + v24 * v18;
    if (v24 * v18 < 1 || a1 >= a2)
    {
      unint64_t v25 = v53;
    }
    else
    {
      uint64_t v56 = -v18;
      unint64_t v39 = v55;
      do
      {
        unint64_t v40 = v39;
        unint64_t v55 = v27;
        uint64_t v41 = v56;
        unint64_t v42 = v27 + v56;
        int v43 = v58;
        sub_2534B45B0(v27 + v56, (uint64_t)v58, &qword_269CDCCE0);
        unint64_t v44 = a2 + v41;
        sub_2534B45B0(a2 + v41, (uint64_t)v8, &qword_269CDCCE0);
        if (*v43 == *v8 && v43[1] == v8[1]) {
          char v46 = 0;
        }
        else {
          char v46 = sub_253B0A4C0();
        }
        unint64_t v39 = v40 + v56;
        sub_253472458((uint64_t)v8, &qword_269CDCCE0);
        uint64_t result = sub_253472458((uint64_t)v58, &qword_269CDCCE0);
        if (v46)
        {
          if (v40 < a2 || v39 >= a2)
          {
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
            a2 = v44;
            unint64_t v27 = v55;
          }
          else
          {
            if (v40 != a2) {
              uint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            a2 = v44;
            unint64_t v27 = v55;
          }
        }
        else if (v40 < v55 || v39 >= v55)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
          unint64_t v27 = v42;
        }
        else
        {
          if (v40 != v55) {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v27 = v42;
        }
      }
      while (v27 > v53 && a2 > a1);
      unint64_t v25 = v53;
    }
  }
  else
  {
    unint64_t v25 = v53;
    uint64_t result = sub_253525548(a1, v19 / v18);
    uint64_t v26 = v23 * v18;
    unint64_t v27 = v25 + v23 * v18;
    if (v26 >= 1 && a2 < v55)
    {
      while (1)
      {
        sub_2534B45B0(a2, (uint64_t)v16, &qword_269CDCCE0);
        sub_2534B45B0(v25, (uint64_t)v13, &qword_269CDCCE0);
        if (*v16 == *v13 && v16[1] == v13[1]) {
          break;
        }
        char v30 = sub_253B0A4C0();
        sub_253472458((uint64_t)v13, &qword_269CDCCE0);
        uint64_t result = sub_253472458((uint64_t)v16, &qword_269CDCCE0);
        if ((v30 & 1) == 0) {
          goto LABEL_27;
        }
        uint64_t v31 = v57;
        unint64_t v32 = a2 + v57;
        if (a1 < a2 || a1 >= v32)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_39:
          uint64_t v31 = v57;
          goto LABEL_40;
        }
        if (a1 != a2)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront();
          goto LABEL_39;
        }
LABEL_40:
        a1 += v31;
        BOOL v36 = v25 >= v27 || v32 >= v55;
        a2 = v32;
        if (v36) {
          goto LABEL_82;
        }
      }
      sub_253472458((uint64_t)v13, &qword_269CDCCE0);
      uint64_t result = sub_253472458((uint64_t)v16, &qword_269CDCCE0);
LABEL_27:
      uint64_t v31 = v57;
      unint64_t v34 = v25 + v57;
      if (a1 < v25 || a1 >= v34)
      {
        uint64_t result = swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (a1 == v25)
        {
LABEL_36:
          unint64_t v32 = a2;
          unint64_t v25 = v34;
          goto LABEL_40;
        }
        uint64_t result = swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v31 = v57;
      goto LABEL_36;
    }
  }
LABEL_82:
  int64_t v50 = v27 - v25;
  if (v57 != -1 || v50 != 0x8000000000000000)
  {
    sub_253525548(v25, v50 / v57);
    return 1;
  }
LABEL_90:
  __break(1u);
  return result;
}

unint64_t sub_25350C768()
{
  unint64_t result = qword_269CDDD88;
  if (!qword_269CDDD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDD88);
  }
  return result;
}

unint64_t sub_25350C7B4()
{
  unint64_t result = qword_269CDDD90;
  if (!qword_269CDDD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDD90);
  }
  return result;
}

unint64_t sub_25350C800()
{
  unint64_t result = qword_269CDDD98;
  if (!qword_269CDDD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDD98);
  }
  return result;
}

unint64_t sub_25350C84C()
{
  unint64_t result = qword_269CDDDA0;
  if (!qword_269CDDDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDA0);
  }
  return result;
}

unint64_t sub_25350C898()
{
  unint64_t result = qword_269CDDDA8;
  if (!qword_269CDDDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDA8);
  }
  return result;
}

unint64_t sub_25350C8E4()
{
  unint64_t result = qword_269CDDDB0;
  if (!qword_269CDDDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDB0);
  }
  return result;
}

unint64_t sub_25350C930()
{
  unint64_t result = qword_269CDDDC0;
  if (!qword_269CDDDC0)
  {
    sub_25347907C(&qword_269CDDDB8);
    sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDC0);
  }
  return result;
}

unint64_t sub_25350C9DC()
{
  unint64_t result = qword_269CDDDD0;
  if (!qword_269CDDDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDD0);
  }
  return result;
}

unint64_t sub_25350CA28()
{
  unint64_t result = qword_269CDDDE0;
  if (!qword_269CDDDE0)
  {
    sub_25347907C(&qword_269CDDDD8);
    sub_253509F94(&qword_269CDDDC8, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDE0);
  }
  return result;
}

unint64_t sub_25350CACC()
{
  unint64_t result = qword_269CDDDE8;
  if (!qword_269CDDDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDE8);
  }
  return result;
}

unint64_t sub_25350CB18()
{
  unint64_t result = qword_269CDDDF0;
  if (!qword_269CDDDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDF0);
  }
  return result;
}

unint64_t sub_25350CB64()
{
  unint64_t result = qword_269CDDDF8;
  if (!qword_269CDDDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDDF8);
  }
  return result;
}

unint64_t sub_25350CBB0()
{
  unint64_t result = qword_269CDDE00;
  if (!qword_269CDDE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDE00);
  }
  return result;
}

unint64_t sub_25350CBFC()
{
  unint64_t result = qword_269CDDE08;
  if (!qword_269CDDE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDE08);
  }
  return result;
}

unint64_t sub_25350CC48()
{
  unint64_t result = qword_269CDDE70;
  if (!qword_269CDDE70)
  {
    sub_25347907C(&qword_269CDDDB8);
    sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDE70);
  }
  return result;
}

unint64_t sub_25350CCF4()
{
  unint64_t result = qword_269CDDE80;
  if (!qword_269CDDE80)
  {
    sub_25347907C(&qword_269CDDDD8);
    sub_253509F94(&qword_269CDDE78, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDE80);
  }
  return result;
}

uint64_t type metadata accessor for AST.Update(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDE160);
}

unint64_t sub_25350CDB8()
{
  unint64_t result = qword_269CDDF38;
  if (!qword_269CDDF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF38);
  }
  return result;
}

unint64_t sub_25350CE04()
{
  unint64_t result = qword_269CDDF40;
  if (!qword_269CDDF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF40);
  }
  return result;
}

unint64_t sub_25350CE50()
{
  unint64_t result = qword_269CDDF48;
  if (!qword_269CDDF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF48);
  }
  return result;
}

unint64_t sub_25350CE9C()
{
  unint64_t result = qword_269CDDF50;
  if (!qword_269CDDF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF50);
  }
  return result;
}

unint64_t sub_25350CEE8()
{
  unint64_t result = qword_269CDDF58;
  if (!qword_269CDDF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF58);
  }
  return result;
}

unint64_t sub_25350CF34()
{
  unint64_t result = qword_269CDDF60;
  if (!qword_269CDDF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF60);
  }
  return result;
}

unint64_t sub_25350CF80()
{
  unint64_t result = qword_269CDDF68;
  if (!qword_269CDDF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF68);
  }
  return result;
}

unint64_t sub_25350CFCC()
{
  unint64_t result = qword_269CDDF70;
  if (!qword_269CDDF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF70);
  }
  return result;
}

unint64_t sub_25350D018()
{
  unint64_t result = qword_269CDDF78;
  if (!qword_269CDDF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF78);
  }
  return result;
}

unint64_t sub_25350D064()
{
  unint64_t result = qword_269CDDF88;
  if (!qword_269CDDF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF88);
  }
  return result;
}

unint64_t sub_25350D0B0()
{
  unint64_t result = qword_269CDDF90;
  if (!qword_269CDDF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF90);
  }
  return result;
}

unint64_t sub_25350D0FC()
{
  unint64_t result = qword_269CDDF98;
  if (!qword_269CDDF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDF98);
  }
  return result;
}

unint64_t sub_25350D148()
{
  unint64_t result = qword_269CDDFA0;
  if (!qword_269CDDFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFA0);
  }
  return result;
}

unint64_t sub_25350D194()
{
  unint64_t result = qword_269CDDFA8;
  if (!qword_269CDDFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFA8);
  }
  return result;
}

unint64_t sub_25350D1E0()
{
  unint64_t result = qword_269CDDFB0;
  if (!qword_269CDDFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFB0);
  }
  return result;
}

unint64_t sub_25350D22C()
{
  unint64_t result = qword_269CDDFC0;
  if (!qword_269CDDFC0)
  {
    sub_25347907C(&qword_269CDDFB8);
    sub_253509F94(&qword_26B248CA0, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFC0);
  }
  return result;
}

unint64_t sub_25350D2D0()
{
  unint64_t result = qword_269CDDFC8;
  if (!qword_269CDDFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFC8);
  }
  return result;
}

unint64_t sub_25350D31C()
{
  unint64_t result = qword_269CDDFD0;
  if (!qword_269CDDFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFD0);
  }
  return result;
}

unint64_t sub_25350D368()
{
  unint64_t result = qword_269CDDFE0;
  if (!qword_269CDDFE0)
  {
    sub_25347907C(&qword_269CDDFD8);
    sub_253509F94(&qword_269CDDFE8, (void (*)(uint64_t))type metadata accessor for AST.Update);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFE0);
  }
  return result;
}

unint64_t sub_25350D40C()
{
  unint64_t result = qword_269CDDFF0;
  if (!qword_269CDDFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFF0);
  }
  return result;
}

unint64_t sub_25350D458()
{
  unint64_t result = qword_269CDDFF8;
  if (!qword_269CDDFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDDFF8);
  }
  return result;
}

unint64_t sub_25350D4A4()
{
  unint64_t result = qword_269CDE000;
  if (!qword_269CDE000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE000);
  }
  return result;
}

unint64_t sub_25350D4F0()
{
  unint64_t result = qword_269CDE008;
  if (!qword_269CDE008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE008);
  }
  return result;
}

unint64_t sub_25350D53C()
{
  unint64_t result = qword_269CDE010;
  if (!qword_269CDE010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE010);
  }
  return result;
}

uint64_t sub_25350D588(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_269CDC550);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25350D5EC()
{
  unint64_t result = qword_269CDE0C8;
  if (!qword_269CDE0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE0C8);
  }
  return result;
}

unint64_t sub_25350D638()
{
  unint64_t result = qword_269CDE0D0;
  if (!qword_269CDE0D0)
  {
    sub_25347907C(&qword_269CDDFB8);
    sub_253509F94(&qword_269CDBCC8, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE0D0);
  }
  return result;
}

unint64_t sub_25350D6DC()
{
  unint64_t result = qword_269CDE0D8;
  if (!qword_269CDE0D8)
  {
    sub_25347907C(&qword_269CDDFD8);
    sub_253509F94(&qword_269CDE0E0, (void (*)(uint64_t))type metadata accessor for AST.Update);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE0D8);
  }
  return result;
}

uint64_t sub_25350D780()
{
  uint64_t v2 = sub_25351CA08();
  v3(v2);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v0, v1);
  return v0;
}

unint64_t sub_25350D7D4()
{
  unint64_t result = qword_269CDE0F0;
  if (!qword_269CDE0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE0F0);
  }
  return result;
}

unint64_t sub_25350D820()
{
  unint64_t result = qword_269CDE110;
  if (!qword_269CDE110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE110);
  }
  return result;
}

uint64_t sub_25350D86C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25350D8B0()
{
  return sub_253509F94(&qword_269CDE128, (void (*)(uint64_t))type metadata accessor for AST.FlatValue);
}

uint64_t *_s14FlatAssignExprVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    uint64_t v9 = type metadata accessor for AST.FlatExpr(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v11 = v8[1];
            *uint64_t v7 = *v8;
            v7[1] = v11;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 8u:
            uint64_t v37 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16))(v7, v8, v37);
            goto LABEL_27;
          case 9u:
            uint64_t v38 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 16))(v7, v8, v38);
LABEL_27:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 1u:
        *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
        uint64_t v13 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        uint64_t v14 = (void *)((char *)v7 + v13);
        uint64_t v15 = (void *)((char *)v8 + v13);
        uint64_t v16 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v17 = v15[1];
            void *v14 = *v15;
            v14[1] = v17;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 4u:
          case 5u:
            void *v14 = *v15;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 8u:
            uint64_t v39 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v14, v15, v39);
            goto LABEL_33;
          case 9u:
            uint64_t v40 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v14, v15, v40);
LABEL_33:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 2u:
        *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
        uint64_t v18 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v19 = *(int *)(v18 + 48);
        uint64_t v20 = (void *)((char *)v7 + v19);
        int64_t v21 = (void *)((char *)v8 + v19);
        uint64_t v22 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v23 = v21[1];
            *uint64_t v20 = *v21;
            v20[1] = v23;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 4u:
          case 5u:
            *uint64_t v20 = *v21;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 8u:
            uint64_t v41 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(v20, v21, v41);
            goto LABEL_39;
          case 9u:
            uint64_t v42 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 16))(v20, v21, v42);
LABEL_39:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
            break;
        }
        uint64_t v43 = *(int *)(v18 + 64);
        unint64_t v44 = (void *)((char *)v7 + v43);
        uint64_t v45 = (void *)((char *)v8 + v43);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v46 = v45[1];
            void *v44 = *v45;
            v44[1] = v46;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 4u:
          case 5u:
            void *v44 = *v45;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 8u:
            uint64_t v59 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v59 - 8) + 16))(v44, v45, v59);
            goto LABEL_59;
          case 9u:
            uint64_t v60 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 16))(v44, v45, v60);
LABEL_59:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v44, v45, *(void *)(*(void *)(v22 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 3u:
        uint64_t v24 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v25 = v8[1];
            *uint64_t v7 = *v8;
            v7[1] = v25;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 8u:
            uint64_t v47 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v7, v8, v47);
            goto LABEL_46;
          case 9u:
            uint64_t v48 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16))(v7, v8, v48);
LABEL_46:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v24 - 8) + 64));
            break;
        }
        uint64_t v49 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
        int64_t v50 = (void *)((char *)v7 + v49);
        unint64_t v51 = (void *)((char *)v8 + v49);
        uint64_t v52 = v51[1];
        *int64_t v50 = *v51;
        v50[1] = v52;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 4u:
        uint64_t v26 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v27 = v8[1];
            *uint64_t v7 = *v8;
            v7[1] = v27;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 8u:
            uint64_t v53 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v53 - 8) + 16))(v7, v8, v53);
            goto LABEL_52;
          case 9u:
            uint64_t v54 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(v7, v8, v54);
LABEL_52:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v26 - 8) + 64));
            break;
        }
        uint64_t v55 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v56 = (void *)((char *)v7 + v55);
        uint64_t v57 = (void *)((char *)v8 + v55);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v58 = v57[1];
            void *v56 = *v57;
            v56[1] = v58;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 4u:
          case 5u:
            void *v56 = *v57;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 8u:
            uint64_t v61 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v61 - 8) + 16))(v56, v57, v61);
            goto LABEL_65;
          case 9u:
            uint64_t v62 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v62 - 8) + 16))(v56, v57, v62);
LABEL_65:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v56, v57, *(void *)(*(void *)(v26 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 5u:
      case 7u:
      case 0xCu:
        *uint64_t v7 = *v8;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 6u:
        uint64_t v28 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v28;
        uint64_t v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 8u:
        uint64_t v29 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v7, v8, v29);
        uint64_t v30 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        uint64_t v31 = (char *)v7 + v30;
        unint64_t v32 = (char *)v8 + v30;
        *(void *)uint64_t v31 = *(void *)v32;
        v31[8] = v32[8];
        goto LABEL_66;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v36 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v7, v8, v36);
        goto LABEL_66;
      case 0xAu:
        uint64_t v33 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v33;
        *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 0xDu:
        uint64_t v34 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v34))
        {
          uint64_t v35 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v7, v8, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v7, v8, v34);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v34);
        }
LABEL_66:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        break;
    }
  }
  return v3;
}

uint64_t _s14FlatAssignExprVwxx(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for AST.FlatExpr(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for AST.FlatValue(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 1:
      v4 += *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      type metadata accessor for AST.FlatValue(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 2:
      uint64_t v10 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v11 = v4 + *(int *)(v10 + 48);
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v13 = sub_253B059D0();
          goto LABEL_20;
        case 9u:
          uint64_t v13 = sub_253B055C0();
LABEL_20:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
          break;
        default:
          break;
      }
      v4 += *(int *)(v10 + 64);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 3:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v14 = sub_253B059D0();
          goto LABEL_24;
        case 9u:
          uint64_t v14 = sub_253B055C0();
LABEL_24:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v4, v14);
          break;
        default:
          break;
      }
      sub_253462A5C(&qword_269CDDCE0);
      goto LABEL_30;
    case 4:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v15 = sub_253B059D0();
          goto LABEL_28;
        case 9u:
          uint64_t v15 = sub_253B055C0();
LABEL_28:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v4, v15);
          break;
        default:
          break;
      }
      v4 += *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
LABEL_33:
          uint64_t v6 = sub_253B059D0();
          goto LABEL_3;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 5:
    case 7:
    case 10:
    case 12:
      goto LABEL_30;
    case 6:
      swift_bridgeObjectRelease();
LABEL_30:
      return swift_bridgeObjectRelease();
    case 8:
    case 9:
    case 11:
    case 14:
    case 15:
LABEL_2:
      uint64_t v6 = sub_253B055C0();
LABEL_3:
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      uint64_t v8 = v6;
      uint64_t v9 = v4;
      goto LABEL_4;
    case 13:
      uint64_t v12 = sub_253B055C0();
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v12);
      if (result) {
        return result;
      }
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v9 = v4;
      uint64_t v8 = v12;
LABEL_4:
      return v7(v9, v8);
    default:
      return result;
  }
}

void *_s14FlatAssignExprVwcp(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for AST.FlatExpr(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v9 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v10 = v7[1];
          *uint64_t v6 = *v7;
          v6[1] = v10;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
        case 5u:
          *uint64_t v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 8u:
          uint64_t v35 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v6, v7, v35);
          goto LABEL_25;
        case 9u:
          uint64_t v36 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v6, v7, v36);
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 1u:
      *(unsigned char *)uint64_t v6 = *(unsigned char *)v7;
      uint64_t v11 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      uint64_t v12 = (void *)((char *)v6 + v11);
      uint64_t v13 = (void *)((char *)v7 + v11);
      uint64_t v14 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v15 = v13[1];
          *uint64_t v12 = *v13;
          v12[1] = v15;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 4u:
        case 5u:
          *uint64_t v12 = *v13;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 8u:
          uint64_t v37 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16))(v12, v13, v37);
          goto LABEL_31;
        case 9u:
          uint64_t v38 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 16))(v12, v13, v38);
LABEL_31:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 2u:
      *(unsigned char *)uint64_t v6 = *(unsigned char *)v7;
      uint64_t v16 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v17 = *(int *)(v16 + 48);
      uint64_t v18 = (void *)((char *)v6 + v17);
      uint64_t v19 = (void *)((char *)v7 + v17);
      uint64_t v20 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v21 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v21;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 4u:
        case 5u:
          *uint64_t v18 = *v19;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 8u:
          uint64_t v39 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v18, v19, v39);
          goto LABEL_37;
        case 9u:
          uint64_t v40 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v18, v19, v40);
LABEL_37:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
          break;
      }
      uint64_t v41 = *(int *)(v16 + 64);
      uint64_t v42 = (void *)((char *)v6 + v41);
      uint64_t v43 = (void *)((char *)v7 + v41);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v44 = v43[1];
          *uint64_t v42 = *v43;
          v42[1] = v44;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 4u:
        case 5u:
          *uint64_t v42 = *v43;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 8u:
          uint64_t v57 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(v42, v43, v57);
          goto LABEL_57;
        case 9u:
          uint64_t v58 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v58 - 8) + 16))(v42, v43, v58);
LABEL_57:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v42, v43, *(void *)(*(void *)(v20 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 3u:
      uint64_t v22 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v23 = v7[1];
          *uint64_t v6 = *v7;
          v6[1] = v23;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 4u:
        case 5u:
          *uint64_t v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 8u:
          uint64_t v45 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 16))(v6, v7, v45);
          goto LABEL_44;
        case 9u:
          uint64_t v46 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v46 - 8) + 16))(v6, v7, v46);
LABEL_44:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(void *)(*(void *)(v22 - 8) + 64));
          break;
      }
      uint64_t v47 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
      uint64_t v48 = (void *)((char *)v6 + v47);
      uint64_t v49 = (void *)((char *)v7 + v47);
      uint64_t v50 = v49[1];
      *uint64_t v48 = *v49;
      v48[1] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 4u:
      uint64_t v24 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v25 = v7[1];
          *uint64_t v6 = *v7;
          v6[1] = v25;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 4u:
        case 5u:
          *uint64_t v6 = *v7;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 8u:
          uint64_t v51 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v51 - 8) + 16))(v6, v7, v51);
          goto LABEL_50;
        case 9u:
          uint64_t v52 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 16))(v6, v7, v52);
LABEL_50:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v6, v7, *(void *)(*(void *)(v24 - 8) + 64));
          break;
      }
      uint64_t v53 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t v54 = (void *)((char *)v6 + v53);
      uint64_t v55 = (void *)((char *)v7 + v53);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v56 = v55[1];
          *uint64_t v54 = *v55;
          v54[1] = v56;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 4u:
        case 5u:
          *uint64_t v54 = *v55;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 8u:
          uint64_t v59 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v59 - 8) + 16))(v54, v55, v59);
          goto LABEL_63;
        case 9u:
          uint64_t v60 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 16))(v54, v55, v60);
LABEL_63:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v54, v55, *(void *)(*(void *)(v24 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 5u:
    case 7u:
    case 0xCu:
      *uint64_t v6 = *v7;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 6u:
      uint64_t v26 = v7[1];
      *uint64_t v6 = *v7;
      v6[1] = v26;
      v6[2] = v7[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 8u:
      uint64_t v27 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(v6, v7, v27);
      uint64_t v28 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v29 = (char *)v6 + v28;
      uint64_t v30 = (char *)v7 + v28;
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      goto LABEL_64;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      uint64_t v34 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v6, v7, v34);
      goto LABEL_64;
    case 0xAu:
      uint64_t v31 = v7[1];
      *uint64_t v6 = *v7;
      v6[1] = v31;
      *((_WORD *)v6 + 8) = *((_WORD *)v7 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 0xDu:
      uint64_t v32 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v32))
      {
        uint64_t v33 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v6, v7, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(v6, v7, v32);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v6, 0, 1, v32);
      }
LABEL_64:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
      break;
  }
  return a1;
}

void *_s14FlatAssignExprVwca(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_253509EAC((uint64_t)a1 + v6, (void (*)(void))type metadata accessor for AST.FlatExpr);
    uint64_t v9 = type metadata accessor for AST.FlatExpr(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 8u:
            uint64_t v30 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v7, v8, v30);
            goto LABEL_26;
          case 9u:
            uint64_t v31 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(v7, v8, v31);
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 1u:
        *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
        uint64_t v11 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        uint64_t v12 = (void *)((char *)v7 + v11);
        uint64_t v13 = (void *)((char *)v8 + v11);
        uint64_t v14 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v12 = *v13;
            v12[1] = v13[1];
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 4u:
          case 5u:
            *uint64_t v12 = *v13;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 8u:
            uint64_t v32 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(v12, v13, v32);
            goto LABEL_32;
          case 9u:
            uint64_t v33 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16))(v12, v13, v33);
LABEL_32:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 2u:
        *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
        uint64_t v15 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v16 = *(int *)(v15 + 48);
        uint64_t v17 = (void *)((char *)v7 + v16);
        uint64_t v18 = (void *)((char *)v8 + v16);
        uint64_t v19 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v17 = *v18;
            v17[1] = v18[1];
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 4u:
          case 5u:
            *uint64_t v17 = *v18;
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 8u:
            uint64_t v34 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v17, v18, v34);
            goto LABEL_38;
          case 9u:
            uint64_t v35 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v17, v18, v35);
LABEL_38:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
            break;
        }
        uint64_t v36 = *(int *)(v15 + 64);
        uint64_t v37 = (void *)((char *)v7 + v36);
        uint64_t v38 = (void *)((char *)v8 + v36);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v37 = *v38;
            v37[1] = v38[1];
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 4u:
          case 5u:
            *uint64_t v37 = *v38;
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 8u:
            uint64_t v49 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(v37, v38, v49);
            goto LABEL_58;
          case 9u:
            uint64_t v50 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v50 - 8) + 16))(v37, v38, v50);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v37, v38, *(void *)(*(void *)(v19 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 3u:
        uint64_t v20 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 8u:
            uint64_t v39 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v7, v8, v39);
            goto LABEL_45;
          case 9u:
            uint64_t v40 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v7, v8, v40);
LABEL_45:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v20 - 8) + 64));
            break;
        }
        uint64_t v41 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
        uint64_t v42 = (void *)((char *)v7 + v41);
        uint64_t v43 = (void *)((char *)v8 + v41);
        *uint64_t v42 = *v43;
        v42[1] = v43[1];
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 4u:
        uint64_t v21 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v7 = *v8;
            v7[1] = v8[1];
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 4u:
          case 5u:
            *uint64_t v7 = *v8;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 8u:
            uint64_t v44 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v44 - 8) + 16))(v7, v8, v44);
            goto LABEL_51;
          case 9u:
            uint64_t v45 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 16))(v7, v8, v45);
LABEL_51:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v7, v8, *(void *)(*(void *)(v21 - 8) + 64));
            break;
        }
        uint64_t v46 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v47 = (void *)((char *)v7 + v46);
        uint64_t v48 = (void *)((char *)v8 + v46);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            void *v47 = *v48;
            v47[1] = v48[1];
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 4u:
          case 5u:
            void *v47 = *v48;
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 8u:
            uint64_t v51 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v51 - 8) + 16))(v47, v48, v51);
            goto LABEL_64;
          case 9u:
            uint64_t v52 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 16))(v47, v48, v52);
LABEL_64:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v47, v48, *(void *)(*(void *)(v21 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 5u:
      case 7u:
      case 0xCu:
        *uint64_t v7 = *v8;
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 6u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v7[2] = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 8u:
        uint64_t v22 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v7, v8, v22);
        uint64_t v23 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        uint64_t v24 = (char *)v7 + v23;
        uint64_t v25 = (char *)v8 + v23;
        char v26 = v25[8];
        *(void *)uint64_t v24 = *(void *)v25;
        v24[8] = v26;
        goto LABEL_65;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v29 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v7, v8, v29);
        goto LABEL_65;
      case 0xAu:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        *((unsigned char *)v7 + 16) = *((unsigned char *)v8 + 16);
        *((unsigned char *)v7 + 17) = *((unsigned char *)v8 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 0xDu:
        uint64_t v27 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v27))
        {
          uint64_t v28 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v7, v8, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(v7, v8, v27);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v27);
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *_s14FlatAssignExprVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for AST.FlatExpr(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v8 = type metadata accessor for AST.FlatValue(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 9)
      {
        uint64_t v36 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v5, v6, v36);
        goto LABEL_44;
      }
      if (EnumCaseMultiPayload == 8)
      {
        uint64_t v10 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
        goto LABEL_44;
      }
      memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
      goto LABEL_48;
    case 1u:
      *uint64_t v5 = *v6;
      uint64_t v11 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      uint64_t v12 = &v5[v11];
      uint64_t v13 = &v6[v11];
      uint64_t v14 = type metadata accessor for AST.FlatValue(0);
      int v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 9)
      {
        uint64_t v37 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 32))(v12, v13, v37);
        goto LABEL_44;
      }
      if (v15 == 8)
      {
        uint64_t v16 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v12, v13, v16);
        goto LABEL_44;
      }
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
      goto LABEL_48;
    case 2u:
      *uint64_t v5 = *v6;
      uint64_t v17 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v18 = *(int *)(v17 + 48);
      uint64_t v19 = &v5[v18];
      uint64_t v20 = &v6[v18];
      uint64_t v21 = type metadata accessor for AST.FlatValue(0);
      int v22 = swift_getEnumCaseMultiPayload();
      if (v22 == 9)
      {
        uint64_t v38 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v38 - 8) + 32))(v19, v20, v38);
        goto LABEL_27;
      }
      if (v22 == 8)
      {
        uint64_t v23 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v23 - 8) + 32))(v19, v20, v23);
LABEL_27:
        swift_storeEnumTagMultiPayload();
        goto LABEL_29;
      }
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
LABEL_29:
      uint64_t v39 = *(int *)(v17 + 64);
      uint64_t v40 = &v5[v39];
      uint64_t v41 = &v6[v39];
      int v42 = swift_getEnumCaseMultiPayload();
      if (v42 == 9) {
        goto LABEL_43;
      }
      if (v42 == 8) {
        goto LABEL_31;
      }
      goto LABEL_47;
    case 3u:
      uint64_t v24 = type metadata accessor for AST.FlatValue(0);
      int v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 9)
      {
        uint64_t v44 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 32))(v5, v6, v44);
        goto LABEL_33;
      }
      if (v25 == 8)
      {
        uint64_t v26 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(v5, v6, v26);
LABEL_33:
        swift_storeEnumTagMultiPayload();
        goto LABEL_35;
      }
      memcpy(v5, v6, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_35:
      uint64_t v45 = sub_253462A5C(&qword_269CDDCE0);
      *(_OWORD *)&v5[*(int *)(v45 + 48)] = *(_OWORD *)&v6[*(int *)(v45 + 48)];
      goto LABEL_48;
    case 4u:
      uint64_t v21 = type metadata accessor for AST.FlatValue(0);
      int v27 = swift_getEnumCaseMultiPayload();
      if (v27 == 9)
      {
        uint64_t v46 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v46 - 8) + 32))(v5, v6, v46);
        goto LABEL_37;
      }
      if (v27 == 8)
      {
        uint64_t v28 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v28 - 8) + 32))(v5, v6, v28);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        goto LABEL_39;
      }
      memcpy(v5, v6, *(void *)(*(void *)(v21 - 8) + 64));
LABEL_39:
      uint64_t v47 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t v40 = &v5[v47];
      uint64_t v41 = &v6[v47];
      int v48 = swift_getEnumCaseMultiPayload();
      if (v48 == 9)
      {
LABEL_43:
        uint64_t v49 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v49 - 8) + 32))(v40, v41, v49);
        goto LABEL_44;
      }
      if (v48 == 8)
      {
LABEL_31:
        uint64_t v43 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v43 - 8) + 32))(v40, v41, v43);
LABEL_44:
        swift_storeEnumTagMultiPayload();
        goto LABEL_48;
      }
LABEL_47:
      memcpy(v40, v41, *(void *)(*(void *)(v21 - 8) + 64));
LABEL_48:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      uint64_t v29 = sub_253B055C0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 32))(v5, v6, v29);
      uint64_t v30 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v31 = &v5[v30];
      uint64_t v32 = &v6[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      goto LABEL_48;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      uint64_t v33 = sub_253B055C0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 32))(v5, v6, v33);
      goto LABEL_48;
    case 0xDu:
      uint64_t v34 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v6, 1, v34))
      {
        uint64_t v35 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v5, v6, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 32))(v5, v6, v34);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v5, 0, 1, v34);
      }
      goto LABEL_48;
    default:
      memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
      return a1;
  }
}

void *_s14FlatAssignExprVwta(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    sub_253509EAC((uint64_t)a1 + v7, (void (*)(void))type metadata accessor for AST.FlatExpr);
    uint64_t v10 = type metadata accessor for AST.FlatExpr(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v11 = type metadata accessor for AST.FlatValue(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 9)
        {
          uint64_t v39 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 32))(v8, v9, v39);
          goto LABEL_45;
        }
        if (EnumCaseMultiPayload == 8)
        {
          uint64_t v13 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
          goto LABEL_45;
        }
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
        goto LABEL_49;
      case 1u:
        unsigned char *v8 = *v9;
        uint64_t v14 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        int v15 = &v8[v14];
        uint64_t v16 = &v9[v14];
        uint64_t v17 = type metadata accessor for AST.FlatValue(0);
        int v18 = swift_getEnumCaseMultiPayload();
        if (v18 == 9)
        {
          uint64_t v40 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v40 - 8) + 32))(v15, v16, v40);
          goto LABEL_45;
        }
        if (v18 == 8)
        {
          uint64_t v19 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 32))(v15, v16, v19);
          goto LABEL_45;
        }
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
        goto LABEL_49;
      case 2u:
        unsigned char *v8 = *v9;
        uint64_t v20 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v21 = *(int *)(v20 + 48);
        int v22 = &v8[v21];
        uint64_t v23 = &v9[v21];
        uint64_t v24 = type metadata accessor for AST.FlatValue(0);
        int v25 = swift_getEnumCaseMultiPayload();
        if (v25 == 9)
        {
          uint64_t v41 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v41 - 8) + 32))(v22, v23, v41);
          goto LABEL_28;
        }
        if (v25 == 8)
        {
          uint64_t v26 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(v22, v23, v26);
LABEL_28:
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_30:
        uint64_t v42 = *(int *)(v20 + 64);
        uint64_t v43 = &v8[v42];
        uint64_t v44 = &v9[v42];
        int v45 = swift_getEnumCaseMultiPayload();
        if (v45 == 9) {
          goto LABEL_44;
        }
        if (v45 == 8) {
          goto LABEL_32;
        }
        goto LABEL_48;
      case 3u:
        uint64_t v27 = type metadata accessor for AST.FlatValue(0);
        int v28 = swift_getEnumCaseMultiPayload();
        if (v28 == 9)
        {
          uint64_t v47 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 32))(v8, v9, v47);
          goto LABEL_34;
        }
        if (v28 == 8)
        {
          uint64_t v29 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 32))(v8, v9, v29);
LABEL_34:
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        memcpy(v8, v9, *(void *)(*(void *)(v27 - 8) + 64));
LABEL_36:
        uint64_t v48 = sub_253462A5C(&qword_269CDDCE0);
        *(_OWORD *)&v8[*(int *)(v48 + 48)] = *(_OWORD *)&v9[*(int *)(v48 + 48)];
        goto LABEL_49;
      case 4u:
        uint64_t v24 = type metadata accessor for AST.FlatValue(0);
        int v30 = swift_getEnumCaseMultiPayload();
        if (v30 == 9)
        {
          uint64_t v49 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v49 - 8) + 32))(v8, v9, v49);
          goto LABEL_38;
        }
        if (v30 == 8)
        {
          uint64_t v31 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v8, v9, v31);
LABEL_38:
          swift_storeEnumTagMultiPayload();
          goto LABEL_40;
        }
        memcpy(v8, v9, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_40:
        uint64_t v50 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v43 = &v8[v50];
        uint64_t v44 = &v9[v50];
        int v51 = swift_getEnumCaseMultiPayload();
        if (v51 == 9)
        {
LABEL_44:
          uint64_t v52 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v52 - 8) + 32))(v43, v44, v52);
          goto LABEL_45;
        }
        if (v51 == 8)
        {
LABEL_32:
          uint64_t v46 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v46 - 8) + 32))(v43, v44, v46);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          goto LABEL_49;
        }
LABEL_48:
        memcpy(v43, v44, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_49:
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v32 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(v8, v9, v32);
        uint64_t v33 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        uint64_t v34 = &v8[v33];
        uint64_t v35 = &v9[v33];
        *(void *)uint64_t v34 = *(void *)v35;
        v34[8] = v35[8];
        goto LABEL_49;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v36 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v8, v9, v36);
        goto LABEL_49;
      case 0xDu:
        uint64_t v37 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v37))
        {
          uint64_t v38 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v8, v9, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 32))(v8, v9, v37);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v37);
        }
        goto LABEL_49;
      default:
        memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t _s14FlatAssignExprVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253512598);
}

uint64_t sub_253512598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_2534F89A0(*(void *)(a1 + 8));
  }
  uint64_t v7 = type metadata accessor for AST.FlatExpr(0);
  uint64_t v8 = a1 + *(int *)(a3 + 20);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, a2, v7);
}

uint64_t _s14FlatAssignExprVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253512628);
}

uint64_t sub_253512628(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for AST.FlatExpr(0);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_2535126A8()
{
  uint64_t result = type metadata accessor for AST.FlatExpr(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *_s9FlatValueOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        uint64_t v9 = sub_253B059D0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_9;
      case 9u:
        uint64_t v10 = sub_253B055C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s9FlatValueOwxx(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 8:
      uint64_t v3 = sub_253B059D0();
      goto LABEL_7;
    case 9:
      uint64_t v3 = sub_253B055C0();
LABEL_7:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *_s9FlatValueOwcp(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      uint64_t v7 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_7;
    case 9u:
      uint64_t v8 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *_s9FlatValueOwca(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        uint64_t v6 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 9u:
        uint64_t v7 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *_s9FlatValueOwtk(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    uint64_t v8 = sub_253B055C0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
  }
  else
  {
    if (EnumCaseMultiPayload != 8)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *_s9FlatValueOwta(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 9)
    {
      uint64_t v8 = sub_253B055C0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    }
    else
    {
      if (EnumCaseMultiPayload != 8)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = sub_253B059D0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25351305C()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B055C0();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *_s8FlatExprOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v8 = a2[1];
            *a1 = *a2;
            a1[1] = v8;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_27;
          case 8u:
            uint64_t v34 = sub_253B059D0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
            goto LABEL_27;
          case 9u:
            uint64_t v35 = sub_253B055C0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
LABEL_27:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v10 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        uint64_t v11 = (uint64_t *)((char *)a1 + v10);
        uint64_t v12 = (uint64_t *)((char *)a2 + v10);
        uint64_t v13 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v14 = v12[1];
            *uint64_t v11 = *v12;
            v11[1] = v14;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 4u:
          case 5u:
            *uint64_t v11 = *v12;
            swift_bridgeObjectRetain();
            goto LABEL_33;
          case 8u:
            uint64_t v36 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v11, v12, v36);
            goto LABEL_33;
          case 9u:
            uint64_t v37 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16))(v11, v12, v37);
LABEL_33:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 2u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v15 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v16 = *(int *)(v15 + 48);
        uint64_t v17 = (uint64_t *)((char *)a1 + v16);
        int v18 = (uint64_t *)((char *)a2 + v16);
        uint64_t v19 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v20 = v18[1];
            *uint64_t v17 = *v18;
            v17[1] = v20;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 4u:
          case 5u:
            *uint64_t v17 = *v18;
            swift_bridgeObjectRetain();
            goto LABEL_39;
          case 8u:
            uint64_t v38 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 16))(v17, v18, v38);
            goto LABEL_39;
          case 9u:
            uint64_t v39 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16))(v17, v18, v39);
LABEL_39:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
            break;
        }
        uint64_t v40 = *(int *)(v15 + 64);
        uint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v43 = v42[1];
            void *v41 = *v42;
            v41[1] = v43;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 4u:
          case 5u:
            void *v41 = *v42;
            swift_bridgeObjectRetain();
            goto LABEL_59;
          case 8u:
            uint64_t v56 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(v41, v42, v56);
            goto LABEL_59;
          case 9u:
            uint64_t v57 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(v41, v42, v57);
LABEL_59:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v41, v42, *(void *)(*(void *)(v19 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 3u:
        uint64_t v21 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v22 = a2[1];
            *a1 = *a2;
            a1[1] = v22;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_46;
          case 8u:
            uint64_t v44 = sub_253B059D0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v44 - 8) + 16))(a1, a2, v44);
            goto LABEL_46;
          case 9u:
            uint64_t v45 = sub_253B055C0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
LABEL_46:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
            break;
        }
        uint64_t v46 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
        uint64_t v47 = (uint64_t *)((char *)a1 + v46);
        uint64_t v48 = (uint64_t *)((char *)a2 + v46);
        uint64_t v49 = v48[1];
        void *v47 = *v48;
        v47[1] = v49;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 4u:
        uint64_t v23 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v24 = a2[1];
            *a1 = *a2;
            a1[1] = v24;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_52;
          case 8u:
            uint64_t v50 = sub_253B059D0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
            goto LABEL_52;
          case 9u:
            uint64_t v51 = sub_253B055C0();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v51 - 8) + 16))(a1, a2, v51);
LABEL_52:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v23 - 8) + 64));
            break;
        }
        uint64_t v52 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v53 = (uint64_t *)((char *)a1 + v52);
        uint64_t v54 = (uint64_t *)((char *)a2 + v52);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            uint64_t v55 = v54[1];
            *uint64_t v53 = *v54;
            v53[1] = v55;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 4u:
          case 5u:
            *uint64_t v53 = *v54;
            swift_bridgeObjectRetain();
            goto LABEL_65;
          case 8u:
            uint64_t v58 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v58 - 8) + 16))(v53, v54, v58);
            goto LABEL_65;
          case 9u:
            uint64_t v59 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v59 - 8) + 16))(v53, v54, v59);
LABEL_65:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v53, v54, *(void *)(*(void *)(v23 - 8) + 64));
            break;
        }
        goto LABEL_66;
      case 5u:
      case 7u:
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 6u:
        uint64_t v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 8u:
        uint64_t v26 = sub_253B055C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        uint64_t v27 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        int v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        *(void *)int v28 = *(void *)v29;
        v28[8] = v29[8];
        goto LABEL_66;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v33 = sub_253B055C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        goto LABEL_66;
      case 0xAu:
        uint64_t v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_66;
      case 0xDu:
        uint64_t v31 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v31))
        {
          uint64_t v32 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v31);
        }
LABEL_66:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s8FlatExprOwxx(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      type metadata accessor for AST.FlatValue(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 1:
      a1 += *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      type metadata accessor for AST.FlatValue(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 2:
      uint64_t v7 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v8 = a1 + *(int *)(v7 + 48);
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v10 = sub_253B059D0();
          goto LABEL_20;
        case 9u:
          uint64_t v10 = sub_253B055C0();
LABEL_20:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
          break;
        default:
          break;
      }
      a1 += *(int *)(v7 + 64);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
          goto LABEL_33;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 3:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v11 = sub_253B059D0();
          goto LABEL_24;
        case 9u:
          uint64_t v11 = sub_253B055C0();
LABEL_24:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
          break;
        default:
          break;
      }
      sub_253462A5C(&qword_269CDDCE0);
      goto LABEL_30;
    case 4:
      type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          uint64_t v12 = sub_253B059D0();
          goto LABEL_28;
        case 9u:
          uint64_t v12 = sub_253B055C0();
LABEL_28:
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
          break;
        default:
          break;
      }
      a1 += *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_30;
        case 8:
LABEL_33:
          uint64_t v3 = sub_253B059D0();
          goto LABEL_3;
        case 9:
          goto LABEL_2;
        default:
          return result;
      }
      return result;
    case 5:
    case 7:
    case 10:
    case 12:
      goto LABEL_30;
    case 6:
      swift_bridgeObjectRelease();
LABEL_30:
      return swift_bridgeObjectRelease();
    case 8:
    case 9:
    case 11:
    case 14:
    case 15:
LABEL_2:
      uint64_t v3 = sub_253B055C0();
LABEL_3:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t v5 = v3;
      uint64_t v6 = a1;
      goto LABEL_4;
    case 13:
      uint64_t v9 = sub_253B055C0();
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v9);
      if (result) {
        return result;
      }
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      uint64_t v6 = a1;
      uint64_t v5 = v9;
LABEL_4:
      return v4(v6, v5);
    default:
      return result;
  }
}

void *_s8FlatExprOwcp(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v7 = a2[1];
          *a1 = *a2;
          a1[1] = v7;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_25;
        case 8u:
          uint64_t v32 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
          goto LABEL_25;
        case 9u:
          uint64_t v33 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 1u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v12 = v10[1];
          void *v9 = *v10;
          v9[1] = v12;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 4u:
        case 5u:
          void *v9 = *v10;
          swift_bridgeObjectRetain();
          goto LABEL_31;
        case 8u:
          uint64_t v34 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 16))(v9, v10, v34);
          goto LABEL_31;
        case 9u:
          uint64_t v35 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(v9, v10, v35);
LABEL_31:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 2u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v13 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v14 = *(int *)(v13 + 48);
      uint64_t v15 = (void *)((char *)a1 + v14);
      uint64_t v16 = (void *)((char *)a2 + v14);
      uint64_t v17 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v18 = v16[1];
          *uint64_t v15 = *v16;
          v15[1] = v18;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 4u:
        case 5u:
          *uint64_t v15 = *v16;
          swift_bridgeObjectRetain();
          goto LABEL_37;
        case 8u:
          uint64_t v36 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(v15, v16, v36);
          goto LABEL_37;
        case 9u:
          uint64_t v37 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16))(v15, v16, v37);
LABEL_37:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
          break;
      }
      uint64_t v38 = *(int *)(v13 + 64);
      uint64_t v39 = (void *)((char *)a1 + v38);
      uint64_t v40 = (void *)((char *)a2 + v38);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v41 = v40[1];
          *uint64_t v39 = *v40;
          v39[1] = v41;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 4u:
        case 5u:
          *uint64_t v39 = *v40;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        case 8u:
          uint64_t v54 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v54 - 8) + 16))(v39, v40, v54);
          goto LABEL_57;
        case 9u:
          uint64_t v55 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 16))(v39, v40, v55);
LABEL_57:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v39, v40, *(void *)(*(void *)(v17 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 3u:
      uint64_t v19 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v20 = a2[1];
          *a1 = *a2;
          a1[1] = v20;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_44;
        case 8u:
          uint64_t v42 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
          goto LABEL_44;
        case 9u:
          uint64_t v43 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
LABEL_44:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
          break;
      }
      uint64_t v44 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
      uint64_t v45 = (void *)((char *)a1 + v44);
      uint64_t v46 = (void *)((char *)a2 + v44);
      uint64_t v47 = v46[1];
      *uint64_t v45 = *v46;
      v45[1] = v47;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 4u:
      uint64_t v21 = type metadata accessor for AST.FlatValue(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v22 = a2[1];
          *a1 = *a2;
          a1[1] = v22;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 4u:
        case 5u:
          *a1 = *a2;
          swift_bridgeObjectRetain();
          goto LABEL_50;
        case 8u:
          uint64_t v48 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16))(a1, a2, v48);
          goto LABEL_50;
        case 9u:
          uint64_t v49 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
LABEL_50:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
          break;
      }
      uint64_t v50 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t v51 = (void *)((char *)a1 + v50);
      uint64_t v52 = (void *)((char *)a2 + v50);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 3u:
        case 6u:
        case 7u:
          uint64_t v53 = v52[1];
          *uint64_t v51 = *v52;
          v51[1] = v53;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 4u:
        case 5u:
          *uint64_t v51 = *v52;
          swift_bridgeObjectRetain();
          goto LABEL_63;
        case 8u:
          uint64_t v56 = sub_253B059D0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v56 - 8) + 16))(v51, v52, v56);
          goto LABEL_63;
        case 9u:
          uint64_t v57 = sub_253B055C0();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v57 - 8) + 16))(v51, v52, v57);
LABEL_63:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(v51, v52, *(void *)(*(void *)(v21 - 8) + 64));
          break;
      }
      goto LABEL_64;
    case 5u:
    case 7u:
    case 0xCu:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 6u:
      uint64_t v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 8u:
      uint64_t v24 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
      uint64_t v25 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      goto LABEL_64;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      uint64_t v31 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
      goto LABEL_64;
    case 0xAu:
      uint64_t v28 = a2[1];
      *a1 = *a2;
      a1[1] = v28;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    case 0xDu:
      uint64_t v29 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v29))
      {
        uint64_t v30 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v29);
      }
LABEL_64:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *_s8FlatExprOwca(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatExpr);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          case 8u:
            uint64_t v26 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
            goto LABEL_26;
          case 9u:
            uint64_t v27 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
LABEL_26:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v7 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        uint64_t v8 = (void *)((char *)a1 + v7);
        uint64_t v9 = (void *)((char *)a2 + v7);
        uint64_t v10 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            void *v8 = *v9;
            v8[1] = v9[1];
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 4u:
          case 5u:
            void *v8 = *v9;
            swift_bridgeObjectRetain();
            goto LABEL_32;
          case 8u:
            uint64_t v28 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v8, v9, v28);
            goto LABEL_32;
          case 9u:
            uint64_t v29 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v9, v29);
LABEL_32:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 2u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v11 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        uint64_t v15 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            void *v13 = *v14;
            v13[1] = v14[1];
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 4u:
          case 5u:
            void *v13 = *v14;
            swift_bridgeObjectRetain();
            goto LABEL_38;
          case 8u:
            uint64_t v30 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v13, v14, v30);
            goto LABEL_38;
          case 9u:
            uint64_t v31 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v31 - 8) + 16))(v13, v14, v31);
LABEL_38:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
            break;
        }
        uint64_t v32 = *(int *)(v11 + 64);
        uint64_t v33 = (void *)((char *)a1 + v32);
        uint64_t v34 = (void *)((char *)a2 + v32);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v33 = *v34;
            v33[1] = v34[1];
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 4u:
          case 5u:
            *uint64_t v33 = *v34;
            swift_bridgeObjectRetain();
            goto LABEL_58;
          case 8u:
            uint64_t v45 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 16))(v33, v34, v45);
            goto LABEL_58;
          case 9u:
            uint64_t v46 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v46 - 8) + 16))(v33, v34, v46);
LABEL_58:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v33, v34, *(void *)(*(void *)(v15 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 3u:
        uint64_t v16 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_45;
          case 8u:
            uint64_t v35 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
            goto LABEL_45;
          case 9u:
            uint64_t v36 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
LABEL_45:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
            break;
        }
        uint64_t v37 = *(int *)(sub_253462A5C(&qword_269CDDCE0) + 48);
        uint64_t v38 = (void *)((char *)a1 + v37);
        uint64_t v39 = (void *)((char *)a2 + v37);
        void *v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 4u:
        uint64_t v17 = type metadata accessor for AST.FlatValue(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *a1 = *a2;
            a1[1] = a2[1];
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 4u:
          case 5u:
            *a1 = *a2;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          case 8u:
            uint64_t v40 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
            goto LABEL_51;
          case 9u:
            uint64_t v41 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
LABEL_51:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
            break;
        }
        uint64_t v42 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v43 = (void *)((char *)a1 + v42);
        uint64_t v44 = (void *)((char *)a2 + v42);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 3u:
          case 6u:
          case 7u:
            *uint64_t v43 = *v44;
            v43[1] = v44[1];
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 4u:
          case 5u:
            *uint64_t v43 = *v44;
            swift_bridgeObjectRetain();
            goto LABEL_64;
          case 8u:
            uint64_t v47 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v47 - 8) + 16))(v43, v44, v47);
            goto LABEL_64;
          case 9u:
            uint64_t v48 = sub_253B055C0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v48 - 8) + 16))(v43, v44, v48);
LABEL_64:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v43, v44, *(void *)(*(void *)(v17 - 8) + 64));
            break;
        }
        goto LABEL_65;
      case 5u:
      case 7u:
      case 0xCu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 8u:
        uint64_t v18 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        char v22 = v21[8];
        *(void *)uint64_t v20 = *(void *)v21;
        v20[8] = v22;
        goto LABEL_65;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v25 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        goto LABEL_65;
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        *((unsigned char *)a1 + 17) = *((unsigned char *)a2 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_65;
      case 0xDu:
        uint64_t v23 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v23))
        {
          uint64_t v24 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v23);
        }
LABEL_65:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

unsigned char *_s8FlatExprOwtk(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for AST.FlatValue(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 9)
      {
        uint64_t v34 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
        goto LABEL_44;
      }
      if (EnumCaseMultiPayload == 8)
      {
        uint64_t v8 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        goto LABEL_44;
      }
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_48;
    case 1u:
      *a1 = *a2;
      uint64_t v9 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for AST.FlatValue(0);
      int v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 9)
      {
        uint64_t v35 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v10, v11, v35);
        goto LABEL_44;
      }
      if (v13 == 8)
      {
        uint64_t v14 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
        goto LABEL_44;
      }
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      goto LABEL_48;
    case 2u:
      *a1 = *a2;
      uint64_t v15 = sub_253462A5C(&qword_269CDDCE8);
      uint64_t v16 = *(int *)(v15 + 48);
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for AST.FlatValue(0);
      int v20 = swift_getEnumCaseMultiPayload();
      if (v20 == 9)
      {
        uint64_t v36 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v17, v18, v36);
        goto LABEL_27;
      }
      if (v20 == 8)
      {
        uint64_t v21 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(v17, v18, v21);
LABEL_27:
        swift_storeEnumTagMultiPayload();
        goto LABEL_29;
      }
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_29:
      uint64_t v37 = *(int *)(v15 + 64);
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      int v40 = swift_getEnumCaseMultiPayload();
      if (v40 == 9) {
        goto LABEL_43;
      }
      if (v40 == 8) {
        goto LABEL_31;
      }
      goto LABEL_47;
    case 3u:
      uint64_t v22 = type metadata accessor for AST.FlatValue(0);
      int v23 = swift_getEnumCaseMultiPayload();
      if (v23 == 9)
      {
        uint64_t v42 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v42 - 8) + 32))(a1, a2, v42);
        goto LABEL_33;
      }
      if (v23 == 8)
      {
        uint64_t v24 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
LABEL_33:
        swift_storeEnumTagMultiPayload();
        goto LABEL_35;
      }
      memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
LABEL_35:
      uint64_t v43 = sub_253462A5C(&qword_269CDDCE0);
      *(_OWORD *)&a1[*(int *)(v43 + 48)] = *(_OWORD *)&a2[*(int *)(v43 + 48)];
      goto LABEL_48;
    case 4u:
      uint64_t v19 = type metadata accessor for AST.FlatValue(0);
      int v25 = swift_getEnumCaseMultiPayload();
      if (v25 == 9)
      {
        uint64_t v44 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 32))(a1, a2, v44);
        goto LABEL_37;
      }
      if (v25 == 8)
      {
        uint64_t v26 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        goto LABEL_39;
      }
      memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_39:
      uint64_t v45 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
      uint64_t v38 = &a1[v45];
      uint64_t v39 = &a2[v45];
      int v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 9)
      {
LABEL_43:
        uint64_t v47 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 32))(v38, v39, v47);
        goto LABEL_44;
      }
      if (v46 == 8)
      {
LABEL_31:
        uint64_t v41 = sub_253B059D0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v41 - 8) + 32))(v38, v39, v41);
LABEL_44:
        swift_storeEnumTagMultiPayload();
        goto LABEL_48;
      }
LABEL_47:
      memcpy(v38, v39, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_48:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 8u:
      uint64_t v27 = sub_253B055C0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
      uint64_t v28 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
      uint64_t v29 = &a1[v28];
      uint64_t v30 = &a2[v28];
      *(void *)uint64_t v29 = *(void *)v30;
      v29[8] = v30[8];
      goto LABEL_48;
    case 9u:
    case 0xBu:
    case 0xEu:
    case 0xFu:
      uint64_t v31 = sub_253B055C0();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
      goto LABEL_48;
    case 0xDu:
      uint64_t v32 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v32))
      {
        uint64_t v33 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(a1, a2, v32);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v32);
      }
      goto LABEL_48;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

unsigned char *_s8FlatExprOwta(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatExpr);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for AST.FlatValue(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 9)
        {
          uint64_t v34 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 32))(a1, a2, v34);
          goto LABEL_45;
        }
        if (EnumCaseMultiPayload == 8)
        {
          uint64_t v8 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
          goto LABEL_45;
        }
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_49;
      case 1u:
        *a1 = *a2;
        uint64_t v9 = *(int *)(sub_253462A5C(&qword_269CDDCF0) + 48);
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for AST.FlatValue(0);
        int v13 = swift_getEnumCaseMultiPayload();
        if (v13 == 9)
        {
          uint64_t v35 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v10, v11, v35);
          goto LABEL_45;
        }
        if (v13 == 8)
        {
          uint64_t v14 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
          goto LABEL_45;
        }
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
        goto LABEL_49;
      case 2u:
        *a1 = *a2;
        uint64_t v15 = sub_253462A5C(&qword_269CDDCE8);
        uint64_t v16 = *(int *)(v15 + 48);
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = type metadata accessor for AST.FlatValue(0);
        int v20 = swift_getEnumCaseMultiPayload();
        if (v20 == 9)
        {
          uint64_t v36 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 32))(v17, v18, v36);
          goto LABEL_28;
        }
        if (v20 == 8)
        {
          uint64_t v21 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(v17, v18, v21);
LABEL_28:
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_30:
        uint64_t v37 = *(int *)(v15 + 64);
        uint64_t v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        int v40 = swift_getEnumCaseMultiPayload();
        if (v40 == 9) {
          goto LABEL_44;
        }
        if (v40 == 8) {
          goto LABEL_32;
        }
        goto LABEL_48;
      case 3u:
        uint64_t v22 = type metadata accessor for AST.FlatValue(0);
        int v23 = swift_getEnumCaseMultiPayload();
        if (v23 == 9)
        {
          uint64_t v42 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v42 - 8) + 32))(a1, a2, v42);
          goto LABEL_34;
        }
        if (v23 == 8)
        {
          uint64_t v24 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
LABEL_34:
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
LABEL_36:
        uint64_t v43 = sub_253462A5C(&qword_269CDDCE0);
        *(_OWORD *)&a1[*(int *)(v43 + 48)] = *(_OWORD *)&a2[*(int *)(v43 + 48)];
        goto LABEL_49;
      case 4u:
        uint64_t v19 = type metadata accessor for AST.FlatValue(0);
        int v25 = swift_getEnumCaseMultiPayload();
        if (v25 == 9)
        {
          uint64_t v44 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 32))(a1, a2, v44);
          goto LABEL_38;
        }
        if (v25 == 8)
        {
          uint64_t v26 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(a1, a2, v26);
LABEL_38:
          swift_storeEnumTagMultiPayload();
          goto LABEL_40;
        }
        memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_40:
        uint64_t v45 = *(int *)(sub_253462A5C(&qword_269CDDCD8) + 48);
        uint64_t v38 = &a1[v45];
        uint64_t v39 = &a2[v45];
        int v46 = swift_getEnumCaseMultiPayload();
        if (v46 == 9)
        {
LABEL_44:
          uint64_t v47 = sub_253B055C0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 32))(v38, v39, v47);
          goto LABEL_45;
        }
        if (v46 == 8)
        {
LABEL_32:
          uint64_t v41 = sub_253B059D0();
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v41 - 8) + 32))(v38, v39, v41);
LABEL_45:
          swift_storeEnumTagMultiPayload();
          goto LABEL_49;
        }
LABEL_48:
        memcpy(v38, v39, *(void *)(*(void *)(v19 - 8) + 64));
LABEL_49:
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        uint64_t v27 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = *(int *)(sub_253462A5C(&qword_269CDDCD0) + 48);
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        *(void *)uint64_t v29 = *(void *)v30;
        v29[8] = v30[8];
        goto LABEL_49;
      case 9u:
      case 0xBu:
      case 0xEu:
      case 0xFu:
        uint64_t v31 = sub_253B055C0();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
        goto LABEL_49;
      case 0xDu:
        uint64_t v32 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v32))
        {
          uint64_t v33 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(a1, a2, v32);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v32);
        }
        goto LABEL_49;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

void sub_253517CFC()
{
  uint64_t v0 = type metadata accessor for AST.FlatValue(319);
  if (v1 <= 0x3F)
  {
    uint64_t v13 = *(void *)(v0 - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v14 = &v12;
    swift_getTupleTypeLayout3();
    uint64_t v15 = &v11;
    swift_getTupleTypeLayout2();
    uint64_t v16 = &v10;
    swift_getTupleTypeLayout2();
    uint64_t v2 = MEMORY[0x263F8CF50] + 64;
    uint64_t v17 = &v9;
    uint64_t v18 = MEMORY[0x263F8CF50] + 64;
    uint64_t v19 = &unk_253B30438;
    uint64_t v20 = MEMORY[0x263F8CF50] + 64;
    uint64_t v3 = sub_253B055C0();
    if (v4 <= 0x3F)
    {
      uint64_t v5 = *(void *)(v3 - 8) + 64;
      swift_getTupleTypeLayout2();
      uint64_t v21 = &v8;
      uint64_t v22 = v5;
      int v23 = &unk_253B30468;
      uint64_t v24 = v5;
      uint64_t v25 = v2;
      sub_253517EC0();
      if (v7 <= 0x3F)
      {
        uint64_t v26 = *(void *)(v6 - 8) + 64;
        uint64_t v27 = v5;
        uint64_t v28 = v5;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

void sub_253517EC0()
{
  if (!qword_26B2411B8)
  {
    sub_253B055C0();
    unint64_t v0 = sub_253B09E00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2411B8);
    }
  }
}

uint64_t *_s6UpdateVwCP(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 8u:
        uint64_t v10 = sub_253B059D0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_9;
      case 9u:
        uint64_t v11 = sub_253B055C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    uint64_t v12 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        uint64_t v16 = v15[1];
        void *v14 = *v15;
        v14[1] = v16;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
      case 5u:
        void *v14 = *v15;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        uint64_t v17 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v14, v15, v17);
        goto LABEL_16;
      case 9u:
        uint64_t v18 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v14, v15, v18);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t _s6UpdateVwxx(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AST.FlatValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      swift_bridgeObjectRelease();
      break;
    case 8u:
      uint64_t v4 = sub_253B059D0();
      goto LABEL_5;
    case 9u:
      uint64_t v4 = sub_253B055C0();
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 8:
      uint64_t v7 = sub_253B059D0();
      goto LABEL_12;
    case 9:
      uint64_t v7 = sub_253B055C0();
LABEL_12:
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
      uint64_t result = v8(v5, v7);
      break;
    default:
      return result;
  }
  return result;
}

void *_s6UpdateVwcp(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AST.FlatValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 4u:
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 8u:
      uint64_t v8 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_7;
    case 9u:
      uint64_t v9 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 6u:
    case 7u:
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
    case 5u:
      *uint64_t v12 = *v13;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 8u:
      uint64_t v15 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
      goto LABEL_14;
    case 9u:
      uint64_t v16 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v13, v16);
LABEL_14:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v12, v13, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  return a1;
}

void *_s6UpdateVwca(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatValue);
    uint64_t v6 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 4u:
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 8u:
        uint64_t v7 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      case 9u:
        uint64_t v8 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  if (a1 != a2)
  {
    uint64_t v9 = a3[7];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    sub_253509EAC((uint64_t)a1 + v9, (void (*)(void))type metadata accessor for AST.FlatValue);
    uint64_t v12 = type metadata accessor for AST.FlatValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 6u:
      case 7u:
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
      case 5u:
        *uint64_t v10 = *v11;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        uint64_t v13 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
        goto LABEL_16;
      case 9u:
        uint64_t v14 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v11, v14);
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *_s6UpdateVwtk(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AST.FlatValue(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 9)
  {
    uint64_t v9 = sub_253B055C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 8)
  {
    uint64_t v8 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_5:
    swift_storeEnumTagMultiPayload();
    goto LABEL_7;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_7:
  uint64_t v10 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 9)
  {
    uint64_t v16 = sub_253B055C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v12, v13, v16);
  }
  else
  {
    if (v14 != 8)
    {
      memcpy(v12, v13, *(void *)(*(void *)(v6 - 8) + 64));
      return a1;
    }
    uint64_t v15 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *_s6UpdateVwta(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_253509EAC((uint64_t)a1, (void (*)(void))type metadata accessor for AST.FlatValue);
    uint64_t v6 = type metadata accessor for AST.FlatValue(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 9)
    {
      uint64_t v9 = sub_253B055C0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload == 8)
    {
      uint64_t v8 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_8:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  a1[a3[6]] = a2[a3[6]];
  if (a1 != a2)
  {
    uint64_t v10 = a3[7];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    sub_253509EAC((uint64_t)&a1[v10], (void (*)(void))type metadata accessor for AST.FlatValue);
    uint64_t v13 = type metadata accessor for AST.FlatValue(0);
    int v14 = swift_getEnumCaseMultiPayload();
    if (v14 == 9)
    {
      uint64_t v16 = sub_253B055C0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
    }
    else
    {
      if (v14 != 8)
      {
        memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
        return a1;
      }
      uint64_t v15 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v11, v12, v15);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s6UpdateVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253519148);
}

uint64_t sub_253519148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AST.FlatValue(0);
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return sub_2534F89A0(*(void *)(a1 + *(int *)(a3 + 20)));
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v6);
}

uint64_t _s6UpdateVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2535191DC);
}

void sub_2535191DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AST.FlatValue(0);
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_253519264()
{
  uint64_t result = type metadata accessor for AST.FlatValue(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PiranaHelper()
{
  return &type metadata for PiranaHelper;
}

unsigned char *_s6UpdateV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2535193E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6UpdateV10CodingKeysOMa()
{
  return &_s6UpdateV10CodingKeysON;
}

uint64_t _s8FlatExprO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s8FlatExprO10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253519570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *_s8FlatExprO10CodingKeysOMa()
{
  return &_s8FlatExprO10CodingKeysON;
}

ValueMetadata *_s8FlatExprO15ValueCodingKeysOMa()
{
  return &_s8FlatExprO15ValueCodingKeysON;
}

ValueMetadata *_s8FlatExprO16PrefixCodingKeysOMa()
{
  return &_s8FlatExprO16PrefixCodingKeysON;
}

ValueMetadata *_s8FlatExprO15InfixCodingKeysOMa()
{
  return &_s8FlatExprO15InfixCodingKeysON;
}

ValueMetadata *_s8FlatExprO13DotCodingKeysOMa()
{
  return &_s8FlatExprO13DotCodingKeysON;
}

ValueMetadata *_s8FlatExprO15IndexCodingKeysOMa()
{
  return &_s8FlatExprO15IndexCodingKeysON;
}

ValueMetadata *_s8FlatExprO26UpdateParametersCodingKeysOMa()
{
  return &_s8FlatExprO26UpdateParametersCodingKeysON;
}

ValueMetadata *_s8FlatExprO14CallCodingKeysOMa()
{
  return &_s8FlatExprO14CallCodingKeysON;
}

ValueMetadata *_s8FlatExprO13SayCodingKeysOMa()
{
  return &_s8FlatExprO13SayCodingKeysON;
}

ValueMetadata *_s8FlatExprO14PickCodingKeysOMa()
{
  return &_s8FlatExprO14PickCodingKeysON;
}

ValueMetadata *_s8FlatExprO17ConfirmCodingKeysOMa()
{
  return &_s8FlatExprO17ConfirmCodingKeysON;
}

unsigned char *_s8FlatExprO15InfixCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253519728);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s8FlatExprO16SearchCodingKeysOMa()
{
  return &_s8FlatExprO16SearchCodingKeysON;
}

ValueMetadata *_s8FlatExprO17PickOneCodingKeysOMa()
{
  return &_s8FlatExprO17PickOneCodingKeysON;
}

ValueMetadata *_s8FlatExprO21ResolveToolCodingKeysOMa()
{
  return &_s8FlatExprO21ResolveToolCodingKeysON;
}

ValueMetadata *_s8FlatExprO24NoMatchingToolCodingKeysOMa()
{
  return &_s8FlatExprO24NoMatchingToolCodingKeysON;
}

ValueMetadata *_s8FlatExprO14UndoCodingKeysOMa()
{
  return &_s8FlatExprO14UndoCodingKeysON;
}

ValueMetadata *_s8FlatExprO16RejectCodingKeysOMa()
{
  return &_s8FlatExprO16RejectCodingKeysON;
}

ValueMetadata *_s8FlatExprO16CancelCodingKeysOMa()
{
  return &_s8FlatExprO16CancelCodingKeysON;
}

ValueMetadata *_s8FlatExprO26GetMentionedAppsCodingKeysOMa()
{
  return &_s8FlatExprO26GetMentionedAppsCodingKeysON;
}

ValueMetadata *_s8FlatExprO19EndOfPlanCodingKeysOMa()
{
  return &_s8FlatExprO19EndOfPlanCodingKeysON;
}

ValueMetadata *_s8FlatExprO26ContinuePlanningCodingKeysOMa()
{
  return &_s8FlatExprO26ContinuePlanningCodingKeysON;
}

unsigned char *_s9FlatValueO10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2535198BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *_s9FlatValueO10CodingKeysOMa()
{
  return &_s9FlatValueO10CodingKeysON;
}

ValueMetadata *_s9FlatValueO14NullCodingKeysOMa()
{
  return &_s9FlatValueO14NullCodingKeysON;
}

ValueMetadata *_s9FlatValueO14BoolCodingKeysOMa()
{
  return &_s9FlatValueO14BoolCodingKeysON;
}

ValueMetadata *_s9FlatValueO13IntCodingKeysOMa()
{
  return &_s9FlatValueO13IntCodingKeysON;
}

ValueMetadata *_s9FlatValueO16DoubleCodingKeysOMa()
{
  return &_s9FlatValueO16DoubleCodingKeysON;
}

ValueMetadata *_s9FlatValueO16StringCodingKeysOMa()
{
  return &_s9FlatValueO16StringCodingKeysON;
}

ValueMetadata *_s9FlatValueO15ArrayCodingKeysOMa()
{
  return &_s9FlatValueO15ArrayCodingKeysON;
}

ValueMetadata *_s9FlatValueO14DictCodingKeysOMa()
{
  return &_s9FlatValueO14DictCodingKeysON;
}

ValueMetadata *_s9FlatValueO16SymbolCodingKeysOMa()
{
  return &_s9FlatValueO16SymbolCodingKeysON;
}

ValueMetadata *_s9FlatValueO18VariableCodingKeysOMa()
{
  return &_s9FlatValueO18VariableCodingKeysON;
}

ValueMetadata *_s9FlatValueO19StatementCodingKeysOMa()
{
  return &_s9FlatValueO19StatementCodingKeysON;
}

unsigned char *_s8FlatExprO15ValueCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x253519A30);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s9FlatValueO20IdentifierCodingKeysOMa()
{
  return &_s9FlatValueO20IdentifierCodingKeysON;
}

unsigned char *_s8FlatExprO16PrefixCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253519B34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14FlatAssignExprV10CodingKeysOMa()
{
  return &_s14FlatAssignExprV10CodingKeysON;
}

unint64_t sub_253519B70()
{
  unint64_t result = qword_269CDE170;
  if (!qword_269CDE170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE170);
  }
  return result;
}

unint64_t sub_253519BC0()
{
  unint64_t result = qword_269CDE178;
  if (!qword_269CDE178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE178);
  }
  return result;
}

unint64_t sub_253519C10()
{
  unint64_t result = qword_269CDE180;
  if (!qword_269CDE180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE180);
  }
  return result;
}

unint64_t sub_253519C60()
{
  unint64_t result = qword_269CDE188;
  if (!qword_269CDE188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE188);
  }
  return result;
}

unint64_t sub_253519CB0()
{
  unint64_t result = qword_269CDE190;
  if (!qword_269CDE190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE190);
  }
  return result;
}

unint64_t sub_253519D00()
{
  unint64_t result = qword_269CDE198;
  if (!qword_269CDE198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE198);
  }
  return result;
}

unint64_t sub_253519D50()
{
  unint64_t result = qword_269CDE1A0;
  if (!qword_269CDE1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1A0);
  }
  return result;
}

unint64_t sub_253519DA0()
{
  unint64_t result = qword_269CDE1A8;
  if (!qword_269CDE1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1A8);
  }
  return result;
}

unint64_t sub_253519DF0()
{
  unint64_t result = qword_269CDE1B0;
  if (!qword_269CDE1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1B0);
  }
  return result;
}

unint64_t sub_253519E40()
{
  unint64_t result = qword_269CDE1B8;
  if (!qword_269CDE1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1B8);
  }
  return result;
}

unint64_t sub_253519E90()
{
  unint64_t result = qword_269CDE1C0;
  if (!qword_269CDE1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1C0);
  }
  return result;
}

unint64_t sub_253519EE0()
{
  unint64_t result = qword_269CDE1C8;
  if (!qword_269CDE1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1C8);
  }
  return result;
}

unint64_t sub_253519F30()
{
  unint64_t result = qword_269CDE1D0;
  if (!qword_269CDE1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1D0);
  }
  return result;
}

unint64_t sub_253519F80()
{
  unint64_t result = qword_269CDE1D8;
  if (!qword_269CDE1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1D8);
  }
  return result;
}

unint64_t sub_253519FD0()
{
  unint64_t result = qword_269CDE1E0;
  if (!qword_269CDE1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1E0);
  }
  return result;
}

unint64_t sub_25351A020()
{
  unint64_t result = qword_269CDE1E8;
  if (!qword_269CDE1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1E8);
  }
  return result;
}

unint64_t sub_25351A070()
{
  unint64_t result = qword_269CDE1F0;
  if (!qword_269CDE1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1F0);
  }
  return result;
}

unint64_t sub_25351A0C0()
{
  unint64_t result = qword_269CDE1F8;
  if (!qword_269CDE1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE1F8);
  }
  return result;
}

unint64_t sub_25351A110()
{
  unint64_t result = qword_269CDE200;
  if (!qword_269CDE200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE200);
  }
  return result;
}

unint64_t sub_25351A160()
{
  unint64_t result = qword_269CDE208;
  if (!qword_269CDE208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE208);
  }
  return result;
}

unint64_t sub_25351A1B0()
{
  unint64_t result = qword_269CDE210;
  if (!qword_269CDE210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE210);
  }
  return result;
}

unint64_t sub_25351A200()
{
  unint64_t result = qword_269CDE218;
  if (!qword_269CDE218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE218);
  }
  return result;
}

unint64_t sub_25351A250()
{
  unint64_t result = qword_269CDE220;
  if (!qword_269CDE220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE220);
  }
  return result;
}

unint64_t sub_25351A2A0()
{
  unint64_t result = qword_269CDE228;
  if (!qword_269CDE228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE228);
  }
  return result;
}

unint64_t sub_25351A2F0()
{
  unint64_t result = qword_269CDE230;
  if (!qword_269CDE230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE230);
  }
  return result;
}

unint64_t sub_25351A340()
{
  unint64_t result = qword_269CDE238;
  if (!qword_269CDE238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE238);
  }
  return result;
}

unint64_t sub_25351A390()
{
  unint64_t result = qword_269CDE240;
  if (!qword_269CDE240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE240);
  }
  return result;
}

unint64_t sub_25351A3E0()
{
  unint64_t result = qword_269CDE248;
  if (!qword_269CDE248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE248);
  }
  return result;
}

unint64_t sub_25351A430()
{
  unint64_t result = qword_269CDE250;
  if (!qword_269CDE250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE250);
  }
  return result;
}

unint64_t sub_25351A480()
{
  unint64_t result = qword_269CDE258;
  if (!qword_269CDE258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE258);
  }
  return result;
}

unint64_t sub_25351A4D0()
{
  unint64_t result = qword_269CDE260;
  if (!qword_269CDE260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE260);
  }
  return result;
}

unint64_t sub_25351A520()
{
  unint64_t result = qword_269CDE268;
  if (!qword_269CDE268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE268);
  }
  return result;
}

unint64_t sub_25351A570()
{
  unint64_t result = qword_269CDE270;
  if (!qword_269CDE270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE270);
  }
  return result;
}

unint64_t sub_25351A5C0()
{
  unint64_t result = qword_269CDE278;
  if (!qword_269CDE278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE278);
  }
  return result;
}

unint64_t sub_25351A610()
{
  unint64_t result = qword_269CDE280;
  if (!qword_269CDE280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE280);
  }
  return result;
}

unint64_t sub_25351A660()
{
  unint64_t result = qword_269CDE288;
  if (!qword_269CDE288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE288);
  }
  return result;
}

unint64_t sub_25351A6B0()
{
  unint64_t result = qword_269CDE290;
  if (!qword_269CDE290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE290);
  }
  return result;
}

unint64_t sub_25351A700()
{
  unint64_t result = qword_269CDE298;
  if (!qword_269CDE298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE298);
  }
  return result;
}

unint64_t sub_25351A750()
{
  unint64_t result = qword_269CDE2A0;
  if (!qword_269CDE2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2A0);
  }
  return result;
}

unint64_t sub_25351A7A0()
{
  unint64_t result = qword_269CDE2A8;
  if (!qword_269CDE2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2A8);
  }
  return result;
}

unint64_t sub_25351A7F0()
{
  unint64_t result = qword_269CDE2B0;
  if (!qword_269CDE2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2B0);
  }
  return result;
}

unint64_t sub_25351A840()
{
  unint64_t result = qword_269CDE2B8;
  if (!qword_269CDE2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2B8);
  }
  return result;
}

unint64_t sub_25351A890()
{
  unint64_t result = qword_269CDE2C0;
  if (!qword_269CDE2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2C0);
  }
  return result;
}

unint64_t sub_25351A8E0()
{
  unint64_t result = qword_269CDE2C8;
  if (!qword_269CDE2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2C8);
  }
  return result;
}

unint64_t sub_25351A930()
{
  unint64_t result = qword_269CDE2D0;
  if (!qword_269CDE2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2D0);
  }
  return result;
}

unint64_t sub_25351A980()
{
  unint64_t result = qword_269CDE2D8;
  if (!qword_269CDE2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2D8);
  }
  return result;
}

unint64_t sub_25351A9D0()
{
  unint64_t result = qword_269CDE2E0;
  if (!qword_269CDE2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2E0);
  }
  return result;
}

unint64_t sub_25351AA20()
{
  unint64_t result = qword_269CDE2E8;
  if (!qword_269CDE2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2E8);
  }
  return result;
}

unint64_t sub_25351AA70()
{
  unint64_t result = qword_269CDE2F0;
  if (!qword_269CDE2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2F0);
  }
  return result;
}

unint64_t sub_25351AAC0()
{
  unint64_t result = qword_269CDE2F8;
  if (!qword_269CDE2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE2F8);
  }
  return result;
}

unint64_t sub_25351AB10()
{
  unint64_t result = qword_269CDE300;
  if (!qword_269CDE300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE300);
  }
  return result;
}

unint64_t sub_25351AB60()
{
  unint64_t result = qword_269CDE308;
  if (!qword_269CDE308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE308);
  }
  return result;
}

unint64_t sub_25351ABB0()
{
  unint64_t result = qword_269CDE310;
  if (!qword_269CDE310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE310);
  }
  return result;
}

unint64_t sub_25351AC00()
{
  unint64_t result = qword_269CDE318;
  if (!qword_269CDE318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE318);
  }
  return result;
}

unint64_t sub_25351AC50()
{
  unint64_t result = qword_269CDE320;
  if (!qword_269CDE320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE320);
  }
  return result;
}

unint64_t sub_25351ACA0()
{
  unint64_t result = qword_269CDE328;
  if (!qword_269CDE328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE328);
  }
  return result;
}

unint64_t sub_25351ACF0()
{
  unint64_t result = qword_269CDE330;
  if (!qword_269CDE330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE330);
  }
  return result;
}

unint64_t sub_25351AD40()
{
  unint64_t result = qword_269CDE338;
  if (!qword_269CDE338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE338);
  }
  return result;
}

unint64_t sub_25351AD90()
{
  unint64_t result = qword_269CDE340;
  if (!qword_269CDE340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE340);
  }
  return result;
}

unint64_t sub_25351ADE0()
{
  unint64_t result = qword_269CDE348;
  if (!qword_269CDE348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE348);
  }
  return result;
}

unint64_t sub_25351AE30()
{
  unint64_t result = qword_269CDE350;
  if (!qword_269CDE350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE350);
  }
  return result;
}

unint64_t sub_25351AE80()
{
  unint64_t result = qword_269CDE358;
  if (!qword_269CDE358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE358);
  }
  return result;
}

unint64_t sub_25351AED0()
{
  unint64_t result = qword_269CDE360;
  if (!qword_269CDE360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE360);
  }
  return result;
}

unint64_t sub_25351AF20()
{
  unint64_t result = qword_269CDE368;
  if (!qword_269CDE368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE368);
  }
  return result;
}

unint64_t sub_25351AF70()
{
  unint64_t result = qword_269CDE370;
  if (!qword_269CDE370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE370);
  }
  return result;
}

unint64_t sub_25351AFC0()
{
  unint64_t result = qword_269CDE378;
  if (!qword_269CDE378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE378);
  }
  return result;
}

unint64_t sub_25351B010()
{
  unint64_t result = qword_269CDE380;
  if (!qword_269CDE380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE380);
  }
  return result;
}

unint64_t sub_25351B060()
{
  unint64_t result = qword_269CDE388;
  if (!qword_269CDE388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE388);
  }
  return result;
}

unint64_t sub_25351B0B0()
{
  unint64_t result = qword_269CDE390;
  if (!qword_269CDE390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE390);
  }
  return result;
}

unint64_t sub_25351B100()
{
  unint64_t result = qword_269CDE398;
  if (!qword_269CDE398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE398);
  }
  return result;
}

unint64_t sub_25351B150()
{
  unint64_t result = qword_269CDE3A0;
  if (!qword_269CDE3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3A0);
  }
  return result;
}

unint64_t sub_25351B1A0()
{
  unint64_t result = qword_269CDE3A8;
  if (!qword_269CDE3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3A8);
  }
  return result;
}

unint64_t sub_25351B1F0()
{
  unint64_t result = qword_269CDE3B0;
  if (!qword_269CDE3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3B0);
  }
  return result;
}

unint64_t sub_25351B240()
{
  unint64_t result = qword_269CDE3B8;
  if (!qword_269CDE3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3B8);
  }
  return result;
}

unint64_t sub_25351B290()
{
  unint64_t result = qword_269CDE3C0;
  if (!qword_269CDE3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3C0);
  }
  return result;
}

unint64_t sub_25351B2E0()
{
  unint64_t result = qword_269CDE3C8;
  if (!qword_269CDE3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3C8);
  }
  return result;
}

unint64_t sub_25351B330()
{
  unint64_t result = qword_269CDE3D0;
  if (!qword_269CDE3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3D0);
  }
  return result;
}

unint64_t sub_25351B380()
{
  unint64_t result = qword_269CDE3D8;
  if (!qword_269CDE3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3D8);
  }
  return result;
}

unint64_t sub_25351B3D0()
{
  unint64_t result = qword_269CDE3E0;
  if (!qword_269CDE3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3E0);
  }
  return result;
}

unint64_t sub_25351B420()
{
  unint64_t result = qword_269CDE3E8;
  if (!qword_269CDE3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3E8);
  }
  return result;
}

unint64_t sub_25351B470()
{
  unint64_t result = qword_269CDE3F0;
  if (!qword_269CDE3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3F0);
  }
  return result;
}

unint64_t sub_25351B4C0()
{
  unint64_t result = qword_269CDE3F8;
  if (!qword_269CDE3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE3F8);
  }
  return result;
}

unint64_t sub_25351B510()
{
  unint64_t result = qword_269CDE400;
  if (!qword_269CDE400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE400);
  }
  return result;
}

unint64_t sub_25351B560()
{
  unint64_t result = qword_269CDE408;
  if (!qword_269CDE408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE408);
  }
  return result;
}

unint64_t sub_25351B5B0()
{
  unint64_t result = qword_269CDE410;
  if (!qword_269CDE410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE410);
  }
  return result;
}

unint64_t sub_25351B600()
{
  unint64_t result = qword_269CDE418;
  if (!qword_269CDE418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE418);
  }
  return result;
}

unint64_t sub_25351B650()
{
  unint64_t result = qword_269CDE420;
  if (!qword_269CDE420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE420);
  }
  return result;
}

unint64_t sub_25351B6A0()
{
  unint64_t result = qword_269CDE428;
  if (!qword_269CDE428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE428);
  }
  return result;
}

unint64_t sub_25351B6F0()
{
  unint64_t result = qword_269CDE430;
  if (!qword_269CDE430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE430);
  }
  return result;
}

unint64_t sub_25351B740()
{
  unint64_t result = qword_269CDE438;
  if (!qword_269CDE438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE438);
  }
  return result;
}

unint64_t sub_25351B790()
{
  unint64_t result = qword_269CDE440;
  if (!qword_269CDE440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE440);
  }
  return result;
}

unint64_t sub_25351B7E0()
{
  unint64_t result = qword_269CDE448;
  if (!qword_269CDE448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE448);
  }
  return result;
}

unint64_t sub_25351B830()
{
  unint64_t result = qword_269CDE450;
  if (!qword_269CDE450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE450);
  }
  return result;
}

unint64_t sub_25351B880()
{
  unint64_t result = qword_269CDE458;
  if (!qword_269CDE458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE458);
  }
  return result;
}

unint64_t sub_25351B8D0()
{
  unint64_t result = qword_269CDE460;
  if (!qword_269CDE460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE460);
  }
  return result;
}

unint64_t sub_25351B920()
{
  unint64_t result = qword_269CDE468;
  if (!qword_269CDE468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE468);
  }
  return result;
}

unint64_t sub_25351B970()
{
  unint64_t result = qword_269CDE470;
  if (!qword_269CDE470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE470);
  }
  return result;
}

unint64_t sub_25351B9C0()
{
  unint64_t result = qword_269CDE478;
  if (!qword_269CDE478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE478);
  }
  return result;
}

unint64_t sub_25351BA10()
{
  unint64_t result = qword_269CDE480;
  if (!qword_269CDE480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE480);
  }
  return result;
}

unint64_t sub_25351BA60()
{
  unint64_t result = qword_269CDE488;
  if (!qword_269CDE488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE488);
  }
  return result;
}

uint64_t sub_25351BAAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_253462A5C(&qword_269CDCCE0);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x270FA5388](v9);
  int v14 = (char *)&v32 - v13;
  uint64_t v41 = a4;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v31 = v37;
    *a1 = v41;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v34 = v16;
  uint64_t v35 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v36 = (unint64_t)(63 - v16) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v26 = *(void *)(v41 + 56);
    uint64_t v27 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v22);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = type metadata accessor for AST.FlatValue(0);
    sub_253509FDC(v26 + *(void *)(*(void *)(v30 - 8) + 72) * v22, (uint64_t)v11 + *(int *)(v40 + 48), (void (*)(void))type metadata accessor for AST.FlatValue);
    *uint64_t v11 = v28;
    v11[1] = v29;
    sub_25351C1B0((uint64_t)v11, (uint64_t)v14, &qword_269CDCCE0);
    sub_25351C1B0((uint64_t)v14, a2, &qword_269CDCCE0);
    a3 = v38;
    if (v20 == v38)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    a2 += *(void *)(v39 + 72);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v23 >= v36) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    if (!v24)
    {
      v19 += 2;
      if (v23 + 1 >= v36)
      {
        unint64_t v18 = 0;
        int64_t v19 = v23;
      }
      else
      {
        unint64_t v24 = *(void *)(v37 + 8 * v19);
        if (v24) {
          goto LABEL_14;
        }
        int64_t v25 = v23 + 2;
        if (v23 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (v24)
        {
LABEL_17:
          int64_t v23 = v25;
          goto LABEL_18;
        }
        int64_t v19 = v23 + 3;
        if (v23 + 3 < v36)
        {
          unint64_t v24 = *(void *)(v37 + 8 * v19);
          if (v24)
          {
LABEL_14:
            int64_t v23 = v19;
            goto LABEL_18;
          }
          int64_t v25 = v23 + 4;
          if (v23 + 4 >= v36)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v25);
          if (!v24)
          {
            while (1)
            {
              int64_t v23 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_42;
              }
              if (v23 >= v36)
              {
                unint64_t v18 = 0;
                int64_t v19 = v33;
                goto LABEL_37;
              }
              unint64_t v24 = *(void *)(v37 + 8 * v23);
              ++v25;
              if (v24) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v23 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_25351BE14(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_25351BFA8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_25351C1A8()
{
  return swift_release();
}

uint64_t sub_25351C1B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  uint64_t v4 = sub_25351CA1C();
  v5(v4);
  return a2;
}

uint64_t sub_25351C20C()
{
  return sub_253B0A2C0();
}

uint64_t sub_25351C22C()
{
  return sub_253B0A2C0();
}

uint64_t sub_25351C24C()
{
  return v0;
}

uint64_t sub_25351C264()
{
  return *(void *)(v0 - 184);
}

uint64_t sub_25351C28C()
{
  return sub_253B0A370();
}

uint64_t sub_25351C2B0()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C2D8()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C2F4()
{
  return sub_253B0A370();
}

uint64_t sub_25351C318()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C334()
{
  return sub_253B0A370();
}

uint64_t sub_25351C34C()
{
  return swift_getEnumCaseMultiPayload();
}

void sub_25351C368(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 256) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_25351C394()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C3C8()
{
  return sub_253B0A440();
}

uint64_t sub_25351C3F4()
{
  return v0;
}

uint64_t sub_25351C404()
{
  return v0;
}

uint64_t sub_25351C41C()
{
  return sub_253B0A440();
}

uint64_t sub_25351C44C()
{
  return sub_253B0A440();
}

uint64_t sub_25351C464()
{
  return sub_253B0A2C0();
}

void sub_25351C480(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

void *sub_25351C4A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 - 256);
  *uint64_t v2 = a1;
  return v2;
}

uint64_t sub_25351C4C8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_25351C4E8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_25351C514()
{
  return v0;
}

uint64_t sub_25351C520()
{
  return v0;
}

uint64_t sub_25351C52C()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C54C()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C56C()
{
  return v0;
}

uint64_t sub_25351C590()
{
  return v0;
}

uint64_t sub_25351C5A4()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_25351C5C0()
{
  return v0;
}

uint64_t sub_25351C5CC()
{
  return v0;
}

uint64_t sub_25351C5D8()
{
  return sub_253B0A2C0();
}

uint64_t sub_25351C600()
{
  return sub_253B059D0();
}

uint64_t sub_25351C628()
{
  return v0;
}

uint64_t sub_25351C634()
{
  return sub_253B0A440();
}

uint64_t sub_25351C658()
{
  return sub_253B0A440();
}

uint64_t sub_25351C67C()
{
  return v0;
}

uint64_t sub_25351C68C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_25351C6A8()
{
  return sub_253B096A0();
}

uint64_t sub_25351C6CC()
{
  return sub_253B096A0();
}

void *sub_25351C6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 - 256);
  *uint64_t v2 = a1;
  return v2;
}

uint64_t sub_25351C708()
{
  return sub_253B0A440();
}

uint64_t sub_25351C720()
{
  return v0;
}

uint64_t sub_25351C758()
{
  return v0;
}

uint64_t sub_25351C780()
{
  *(void *)(v0 - 112) = 34;
  *(void *)(v0 - 104) = 0xE100000000000000;
  return sub_253B09860();
}

uint64_t sub_25351C7A4()
{
  return v0;
}

uint64_t sub_25351C7B4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25351C7E4()
{
  return v0;
}

uint64_t sub_25351C7FC()
{
  return v0;
}

uint64_t sub_25351C814()
{
  return v0;
}

uint64_t sub_25351C82C()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_25351C848()
{
  return sub_253B0A3A0();
}

uint64_t sub_25351C86C()
{
  return sub_253B0A440();
}

uint64_t sub_25351C88C()
{
  return v0;
}

uint64_t sub_25351C898()
{
  return v0 - 104;
}

uint64_t sub_25351C8A4()
{
  return *(void *)(v0 - 112);
}

void sub_25351C8B8()
{
  *(unsigned char *)(v0 - 72) = 1;
}

void sub_25351C8C4()
{
  *(unsigned char *)(v0 - 66) = 1;
}

uint64_t sub_25351C8D0()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351C8E8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_25351C900@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t sub_25351C914()
{
  return swift_allocObject();
}

void sub_25351C92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 192) = (char *)&a9 - v9;
}

void *sub_25351C940@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(a1 - 256);
  *uint64_t v3 = v1;
  v3[1] = v2;
  return v3;
}

uint64_t sub_25351C968()
{
  return sub_253B0A320();
}

uint64_t sub_25351C9C4()
{
  return sub_253B09860();
}

uint64_t sub_25351C9DC()
{
  return sub_253B0A370();
}

uint64_t sub_25351CA08()
{
  return 0;
}

uint64_t sub_25351CA1C()
{
  return v0;
}

uint64_t sub_25351CA30@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 112) = a1;
  *(void *)(v1 - 104) = 0xE100000000000000;
  return sub_253B09860();
}

uint64_t sub_25351CA50()
{
  return sub_25351C1A8();
}

void sub_25351CA7C(char a1@<W8>)
{
  *(unsigned char *)(v1 - 104) = a1;
}

uint64_t sub_25351CA88()
{
  return sub_253509EAC(v1, v0);
}

uint64_t sub_25351CAAC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = a2;
  return sub_253B09860();
}

uint64_t Lexer.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  *a3 = result;
  a3[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  a3[2] = 0;
  a3[3] = v3;
  a3[4] = 0;
  a3[5] = 0;
  return result;
}

uint64_t Lexer.next()@<X0>(uint64_t a1@<X8>)
{
  while (1)
  {
    uint64_t v2 = a1;
    sub_25351D14C();
    uint64_t v3 = (uint64_t *)(v1 + 32);
    uint64_t v4 = *(void *)(v1 + 40);
    if (v4)
    {
      uint64_t v5 = *v3;
      *uint64_t v3 = 0;
      *(void *)(v1 + 40) = 0;
    }
    else
    {
      uint64_t result = sub_253B09890();
      if (!v7)
      {
        *(void *)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        char v16 = -1;
        goto LABEL_33;
      }
      uint64_t v5 = result;
      uint64_t v4 = v7;
    }
    BOOL v8 = v5 == 35 && v4 == 0xE100000000000000;
    if (!v8 && (sub_25351F074() & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    do
    {
      uint64_t v9 = sub_253B09890();
      if (!v10) {
        break;
      }
      if (v9 == 10 && v10 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        break;
      }
      char v12 = sub_25351F10C();
      swift_bridgeObjectRelease();
    }
    while ((v12 & 1) == 0);
    a1 = v2;
    uint64_t v1 = v53;
  }
  BOOL v13 = v5 == 61 && v4 == 0xE100000000000000;
  if (v13 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 2;
LABEL_24:
    if (!v14) {
      ++v15;
    }
LABEL_26:
    *(void *)uint64_t v2 = v15;
    *(void *)(v2 + 8) = 0;
LABEL_27:
    char v16 = 6;
    goto LABEL_33;
  }
  BOOL v17 = v5 == 33 && v4 == 0xE100000000000000;
  if (v17 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    uint64_t v15 = 18;
    if (result) {
      uint64_t v15 = 4;
    }
    goto LABEL_26;
  }
  BOOL v18 = v5 == 60 && v4 == 0xE100000000000000;
  if (v18 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 5;
    goto LABEL_24;
  }
  BOOL v19 = v5 == 62 && v4 == 0xE100000000000000;
  if (v19 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 7;
    goto LABEL_24;
  }
  BOOL v20 = v5 == 43 && v4 == 0xE100000000000000;
  if (v20 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 9;
    goto LABEL_24;
  }
  BOOL v21 = v5 == 45 && v4 == 0xE100000000000000;
  if (v21 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 11;
    goto LABEL_24;
  }
  uint64_t v50 = (void *)(v1 + 32);
  BOOL v22 = v5 == 47 && v4 == 0xE100000000000000;
  if (v22 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_25351D254();
    BOOL v14 = (result & 1) == 0;
    uint64_t v15 = 16;
    goto LABEL_24;
  }
  BOOL v23 = v5 == 42 && v4 == 0xE100000000000000;
  if (v23 || (sub_25351F074() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_253B09890();
    *(void *)(v1 + 32) = result;
    *(void *)(v1 + 40) = v24;
    if (v24)
    {
      uint64_t v25 = result;
      uint64_t v26 = v24;
      BOOL v27 = result == 61 && v24 == 0xE100000000000000;
      if (v27 || (sub_25351F1B0() & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v28 = v50;
        *uint64_t v50 = 0;
        v28[1] = 0;
        long long v29 = xmmword_253B32AB0;
LABEL_104:
        *(_OWORD *)uint64_t v2 = v29;
        goto LABEL_27;
      }
      swift_bridgeObjectRetain();
      if (v25 == 42 && v26 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v32 = sub_25351F1B0();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v32 & 1) == 0) {
          goto LABEL_95;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v34 = v50;
      *uint64_t v50 = 0;
      v34[1] = 0;
      long long v29 = xmmword_253B32AA0;
      goto LABEL_104;
    }
LABEL_95:
    long long v29 = xmmword_253B32AC0;
    goto LABEL_104;
  }
  BOOL v30 = v5 == 40 && v4 == 0xE100000000000000;
  if (v30 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A90;
    goto LABEL_104;
  }
  BOOL v33 = v5 == 41 && v4 == 0xE100000000000000;
  if (v33 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A80;
    goto LABEL_104;
  }
  BOOL v35 = v5 == 123 && v4 == 0xE100000000000000;
  if (v35 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A70;
    goto LABEL_104;
  }
  BOOL v36 = v5 == 125 && v4 == 0xE100000000000000;
  if (v36 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A60;
    goto LABEL_104;
  }
  BOOL v37 = v5 == 91 && v4 == 0xE100000000000000;
  if (v37 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A50;
    goto LABEL_104;
  }
  BOOL v38 = v5 == 93 && v4 == 0xE100000000000000;
  if (v38 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A40;
    goto LABEL_104;
  }
  BOOL v39 = v5 == 46 && v4 == 0xE100000000000000;
  if (v39 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A30;
    goto LABEL_104;
  }
  BOOL v40 = v5 == 44 && v4 == 0xE100000000000000;
  if (v40 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A20;
    goto LABEL_104;
  }
  BOOL v41 = v5 == 58 && v4 == 0xE100000000000000;
  if (v41 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A10;
    goto LABEL_104;
  }
  BOOL v42 = v5 == 59 && v4 == 0xE100000000000000;
  if (v42 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B32A00;
    goto LABEL_104;
  }
  BOOL v43 = v5 == 63 && v4 == 0xE100000000000000;
  if (v43 || (sub_25351F074() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v29 = xmmword_253B329F0;
    goto LABEL_104;
  }
  BOOL v44 = v5 == 10 && v4 == 0xE100000000000000;
  if (!v44 && (sub_25351F074() & 1) == 0)
  {
    BOOL v45 = v5 == 34 && v4 == 0xE100000000000000;
    if (v45 || (sub_25351F074() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t result = sub_25351D444((uint64_t)&v51);
      goto LABEL_171;
    }
    if (v5 == 48 && v4 == 0xE100000000000000) {
      goto LABEL_181;
    }
    uint64_t v47 = sub_25351F148();
    if (v47)
    {
LABEL_182:
      *(void *)&long long v51 = v5;
      *((void *)&v51 + 1) = v4;
      MEMORY[0x270FA5388](v47);
      v49[2] = &v51;
      if ((sub_25351E7BC(sub_25351ECCC, (uint64_t)v49, 0xD000000000000035, 0x8000000253B0C570) & 1) == 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        goto LABEL_27;
      }
      sub_2534D9B10();
      sub_25351D948();
      goto LABEL_185;
    }
    if (v5 != 57 || v4 != 0xE100000000000000)
    {
LABEL_181:
      uint64_t v47 = sub_25351F124();
      if (v47) {
        goto LABEL_182;
      }
    }
    sub_2534D9B10();
    sub_25351D594();
LABEL_185:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_171;
  }
  swift_bridgeObjectRelease();
  uint64_t result = sub_25351D31C((uint64_t)&v51);
LABEL_171:
  char v16 = v52;
  *(_OWORD *)uint64_t v2 = v51;
LABEL_33:
  *(unsigned char *)(v2 + 16) = v16;
  return result;
}

uint64_t sub_25351D14C()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  if (!*(void *)(v0 + 40)) {
    goto LABEL_3;
  }
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v0 + 40);
  while (v2 != 10 || v3 != 0xE100000000000000)
  {
    char v7 = sub_25351F10C();
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_14;
    }
    char v8 = sub_253B095F0();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return result;
    }
    swift_bridgeObjectRelease();
    *uint64_t v1 = 0;
    *(void *)(v0 + 40) = 0;
LABEL_3:
    uint64_t result = sub_253B09890();
    *(void *)(v0 + 32) = result;
    *(void *)(v0 + 40) = v5;
    if (!v5) {
      return result;
    }
    uint64_t v2 = result;
    uint64_t v3 = v5;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
LABEL_14:
  return swift_bridgeObjectRelease();
}

uint64_t sub_25351D254()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  if (*(void *)(v0 + 40))
  {
    uint64_t v2 = *v1;
    uint64_t v3 = *(void *)(v0 + 40);
  }
  else
  {
    uint64_t v4 = sub_253B09890();
    *(void *)(v0 + 32) = v4;
    *(void *)(v0 + 40) = v5;
    if (!v5) {
      return 0;
    }
    uint64_t v2 = v4;
    uint64_t v3 = v5;
    swift_bridgeObjectRetain();
  }
  if (v2 == 61 && v3 == 0xE100000000000000)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v7 = sub_25351F10C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v7)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    *uint64_t v1 = 0;
    v1[1] = 0;
    return 1;
  }
  return result;
}

uint64_t sub_25351D31C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = (uint64_t *)(v1 + 32);
  if (!*(void *)(v1 + 40)) {
    goto LABEL_3;
  }
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v1 + 40);
  while (v5 != 32 || v6 != 0xE100000000000000)
  {
    sub_2534D9B10();
    if (sub_25351F10C()) {
      break;
    }
    if (v5 == 9 && v6 == 0xE100000000000000)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2534D9B10();
      char v12 = sub_25351F10C();
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v10 = __OFADD__(v3, 4);
    v3 += 4;
    if (v10) {
      goto LABEL_23;
    }
LABEL_21:
    *uint64_t v4 = 0;
    *(void *)(v1 + 40) = 0;
LABEL_3:
    uint64_t result = sub_253B09890();
    *(void *)(v1 + 32) = result;
    *(void *)(v1 + 40) = v8;
    if (!v8)
    {
LABEL_22:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 0;
      return result;
    }
    uint64_t v5 = result;
    uint64_t v6 = v8;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v10 = __OFADD__(v3++, 1);
  if (!v10) {
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_25351D444@<X0>(uint64_t a1@<X8>)
{
  char v3 = 0;
  uint64_t v4 = (uint64_t *)(v1 + 32);
  while (1)
  {
    uint64_t v5 = *(void *)(v1 + 40);
    if (v5)
    {
      uint64_t v6 = *v4;
      *uint64_t v4 = 0;
      *(void *)(v1 + 40) = 0;
    }
    else
    {
      uint64_t v7 = sub_253B09890();
      if (!v8) {
        goto LABEL_35;
      }
      uint64_t v6 = v7;
      uint64_t v5 = v8;
    }
    BOOL v9 = v6 == 34 && v5 == 0xE100000000000000;
    BOOL v10 = v9;
    if (v3) {
      break;
    }
    if (v10 || (sub_25351F074() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0xE000000000000000;
      char v16 = 5;
      goto LABEL_36;
    }
    BOOL v14 = v6 == 92 && v5 == 0xE100000000000000;
    if (v14 || (sub_25351F074() & 1) != 0)
    {
      char v3 = 1;
      goto LABEL_33;
    }
LABEL_32:
    MEMORY[0x25A268850](v6, v5);
    char v3 = 0;
LABEL_33:
    swift_bridgeObjectRelease();
  }
  if (v10) {
    goto LABEL_32;
  }
  char v11 = sub_25351F074();
  BOOL v12 = v6 == 92 && v5 == 0xE100000000000000;
  BOOL v13 = v12;
  if (v11 & 1) != 0 || v13 || (sub_25351F074()) {
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
LABEL_35:
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  char v16 = 6;
LABEL_36:
  *(unsigned char *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_25351D594()
{
  sub_25351F1F0();
  unint64_t v22 = v2;
  sub_253B09640();
  for (char i = 0; ; char i = 1)
  {
    while (1)
    {
      if (*(void *)(v1 + 40))
      {
        uint64_t v4 = *(void *)(v1 + 32);
        uint64_t v5 = *(void *)(v1 + 40);
      }
      else
      {
        uint64_t v6 = sub_253B09890();
        *(void *)(v1 + 32) = v6;
        *(void *)(v1 + 40) = v7;
        if (!v7) {
          goto LABEL_26;
        }
        uint64_t v4 = v6;
        uint64_t v5 = v7;
        swift_bridgeObjectRetain();
      }
      if (v4 == 48 && v5 == 0xE100000000000000) {
        break;
      }
      if (sub_25351F148()) {
        goto LABEL_17;
      }
      if (v4 != 57 || v5 != 0xE100000000000000) {
        break;
      }
LABEL_16:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_25351F1D0();
      swift_bridgeObjectRelease();
    }
    if ((sub_25351F124() & 1) == 0) {
      goto LABEL_16;
    }
LABEL_17:
    if (v4 != 46 || v5 != 0xE100000000000000)
    {
      sub_2534D9B10();
      if ((sub_25351F10C() & 1) == 0) {
        break;
      }
    }
    if (i)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = v22;
      goto LABEL_27;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_25351F1D0();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v11 = v22;
  if (i)
  {
LABEL_27:
    uint64_t result = sub_25351DEF8(0, v11);
    if ((v13 & 1) == 0)
    {
      *(void *)uint64_t v0 = result;
      *(void *)(v0 + 8) = 0;
      char v14 = 4;
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  if ((v22 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    if ((v22 & 0x1000000000000000) != 0)
    {
      BOOL v17 = sub_25351E8F8(0, v22, 10);
      char v19 = v20;
    }
    else if ((v22 & 0x2000000000000000) != 0)
    {
      BOOL v17 = 0;
      char v19 = 1;
    }
    else
    {
      BOOL v21 = (unsigned __int8 *)sub_253B0A0A0();
      BOOL v17 = sub_25351E9E0(v21, v16, 10);
      char v19 = v18 & 1;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      *(void *)uint64_t v0 = v17;
      *(void *)(v0 + 8) = 0;
      char v14 = 3;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_40:
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  char v14 = 6;
LABEL_41:
  *(unsigned char *)(v0 + 16) = v14;
  return result;
}

uint64_t sub_25351D948()
{
  sub_25351F1F0();
  uint64_t v32 = 0;
  uint64_t v33 = v2;
  sub_253B09640();
  char v3 = (uint64_t *)(v1 + 32);
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + 40);
    if (v4)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = *(void *)(v1 + 40);
    }
    else
    {
      uint64_t v7 = sub_253B09890();
      *(void *)(v1 + 32) = v7;
      *(void *)(v1 + 40) = v8;
      if (!v8) {
        goto LABEL_12;
      }
      uint64_t v5 = v7;
      uint64_t v6 = v8;
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    uint64_t v30 = v5;
    uint64_t v31 = v6;
    MEMORY[0x270FA5388](v4);
    long long v29 = &v30;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_25351E7BC(sub_25351F058, (uint64_t)v28, 0xD000000000000035, 0x8000000253B0C570);
    if ((v9 & 1) == 0)
    {
      uint64_t v30 = v5;
      uint64_t v31 = v6;
      MEMORY[0x270FA5388](v9);
      long long v29 = &v30;
      if ((sub_25351E7BC(sub_25351F058, (uint64_t)v28, 0x3837363534333231, 0xEA00000000003039) & 1) == 0) {
        break;
      }
    }
    MEMORY[0x25A268850](v5, v6);
    swift_bridgeObjectRelease();
    if (*(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      *char v3 = 0;
      *(void *)(v1 + 40) = 0;
    }
    else
    {
      sub_253B09890();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v11 = v32;
  uint64_t v10 = v33;
  BOOL v12 = v32 == 1702195796 && v33 == 0xE400000000000000;
  if (v12
    || (sub_25351F0B0() & 1) != 0
    || (v11 == 1702195828 ? (BOOL v13 = v10 == 0xE400000000000000) : (BOOL v13 = 0), v13 || (sub_25351F0B0() & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v0 = xmmword_253B32B50;
LABEL_30:
    char v16 = 2;
    goto LABEL_31;
  }
  BOOL v14 = v11 == 0x65736C6146 && v10 == 0xE500000000000000;
  if (v14
    || (sub_25351F0B0() & 1) != 0
    || (v11 == 0x65736C6166 ? (BOOL v17 = v10 == 0xE500000000000000) : (BOOL v17 = 0), v17 || (sub_25351F0B0() & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v0 = 0;
    *(void *)(v0 + 8) = 0;
    goto LABEL_30;
  }
  BOOL v18 = v11 == 1701736270 && v10 == 0xE400000000000000;
  if (v18 || (sub_25351F0B0() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    long long v19 = xmmword_253B32B50;
  }
  else
  {
    BOOL v20 = v11 == 6581857 && v10 == 0xE300000000000000;
    if (v20 || (sub_25351F0B0() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
      long long v19 = xmmword_253B32B40;
    }
    else
    {
      BOOL v21 = v11 == 29295 && v10 == 0xE200000000000000;
      if (v21 || (sub_25351F0B0() & 1) != 0)
      {
        uint64_t result = swift_bridgeObjectRelease();
        long long v19 = xmmword_253B32B30;
      }
      else
      {
        BOOL v22 = v11 == 7630702 && v10 == 0xE300000000000000;
        if (v22 || (sub_25351F0B0() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          long long v19 = xmmword_253B32B20;
        }
        else
        {
          BOOL v23 = v11 == 7499622 && v10 == 0xE300000000000000;
          if (v23 || (sub_25351F0B0() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            long long v19 = xmmword_253B32B10;
          }
          else
          {
            BOOL v24 = v11 == 28265 && v10 == 0xE200000000000000;
            if (v24 || (sub_25351F0B0() & 1) != 0)
            {
              uint64_t result = swift_bridgeObjectRelease();
              long long v19 = xmmword_253B32B00;
            }
            else
            {
              BOOL v25 = v11 == 26217 && v10 == 0xE200000000000000;
              if (v25 || (sub_25351F0B0() & 1) != 0)
              {
                uint64_t result = swift_bridgeObjectRelease();
                long long v19 = xmmword_253B32AF0;
              }
              else
              {
                BOOL v26 = v11 == 1718185061 && v10 == 0xE400000000000000;
                if (v26 || (sub_25351F0B0() & 1) != 0)
                {
                  uint64_t result = swift_bridgeObjectRelease();
                  long long v19 = xmmword_253B32AE0;
                }
                else
                {
                  if (v11 != 1702063205 || v10 != 0xE400000000000000)
                  {
                    uint64_t result = sub_25351F0B0();
                    if ((result & 1) == 0)
                    {
                      *(void *)uint64_t v0 = v11;
                      *(void *)(v0 + 8) = v10;
                      char v16 = 1;
                      goto LABEL_31;
                    }
                  }
                  uint64_t result = swift_bridgeObjectRelease();
                  long long v19 = xmmword_253B32AD0;
                }
              }
            }
          }
        }
      }
    }
  }
  *(_OWORD *)uint64_t v0 = v19;
  char v16 = 6;
LABEL_31:
  *(unsigned char *)(v0 + 16) = v16;
  return result;
}

Swift::String __swiftcall Lexer.remainingString()()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    if (v2)
    {
      uint64_t v3 = *v1;
      *uint64_t v1 = 0;
      *(void *)(v0 + 40) = 0;
      goto LABEL_6;
    }
    uint64_t v3 = sub_253B09890();
    if (!v4) {
      break;
    }
    uint64_t v2 = v4;
LABEL_6:
    MEMORY[0x25A268850](v3, v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = 0;
  uint64_t v6 = (void *)0xE000000000000000;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_25351DEF8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_253B09FD0();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_253B0A0A0();
      }
      char v6 = sub_25351EF98(v4, v5, (void (*)(uint64_t *__return_ptr))sub_25351F014);
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t static Lexer.Token.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1u:
      if (v7 != 1) {
        goto LABEL_30;
      }
      if (v3 == v5 && v2 == v6) {
        char v14 = 1;
      }
      else {
        char v14 = sub_25351F18C();
      }
      sub_25351ECEC(v5, v6, 1u);
      sub_25351ECEC(v3, v2, 1u);
      uint64_t v32 = sub_25351F0CC(v3, v2, 1u);
      unsigned __int8 v34 = 1;
      goto LABEL_36;
    case 2u:
      if (v7 != 2) {
        goto LABEL_31;
      }
      uint64_t v15 = sub_2534D9778();
      uint64_t v17 = sub_25351F0CC(v15, v16, 2u);
      sub_25351ED08(v17, v18, 2u);
      char v14 = ((v3 & 1) == 0) ^ v5;
      return v14 & 1;
    case 3u:
      if (v7 != 3) {
        goto LABEL_31;
      }
      uint64_t v19 = sub_2534D9778();
      uint64_t v10 = sub_25351F0CC(v19, v20, 3u);
      unsigned __int8 v12 = 3;
      goto LABEL_14;
    case 4u:
      if (v7 != 4) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_2534D9778();
      uint64_t v23 = sub_25351F0CC(v21, v22, 4u);
      sub_25351ED08(v23, v24, 4u);
      char v14 = *(double *)&v3 == *(double *)&v5;
      return v14 & 1;
    case 5u:
      if (v7 == 5)
      {
        if (v3 == v5 && v2 == v6) {
          char v14 = 1;
        }
        else {
          char v14 = sub_25351F18C();
        }
        sub_25351ECEC(v5, v6, 5u);
        sub_25351ECEC(v3, v2, 5u);
        uint64_t v32 = sub_25351F0CC(v3, v2, 5u);
        unsigned __int8 v34 = 5;
LABEL_36:
        sub_25351ED08(v32, v33, v34);
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRetain();
LABEL_31:
        sub_25351ECEC(v5, v6, v7);
        uint64_t v28 = sub_2534D9778();
        uint64_t v30 = sub_25351F0CC(v28, v29, v4);
        sub_25351ED08(v30, v31, v7);
        char v14 = 0;
      }
      return v14 & 1;
    case 6u:
      switch(v3)
      {
        case 1:
          if (v7 != 6 || v5 != 1 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          char v14 = 1;
          uint64_t v32 = 1;
          uint64_t v33 = 0;
          unsigned __int8 v34 = 6;
          goto LABEL_36;
        case 2:
          if (v7 != 6 || v5 != 2 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 2;
          break;
        case 3:
          if (v7 != 6 || v5 != 3 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 3;
          break;
        case 4:
          if (v7 != 6 || v5 != 4 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 4;
          break;
        case 5:
          if (v7 != 6 || v5 != 5 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 5;
          break;
        case 6:
          if (v7 != 6 || v5 != 6 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 6;
          break;
        case 7:
          if (v7 != 6 || v5 != 7 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 7;
          break;
        case 8:
          if (v7 != 6 || v5 != 8 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 8;
          break;
        case 9:
          if (v7 != 6 || v5 != 9 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 9;
          break;
        case 10:
          if (v7 != 6 || v5 != 10 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 10;
          break;
        case 11:
          if (v7 != 6 || v5 != 11 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 11;
          break;
        case 12:
          if (v7 != 6 || v5 != 12 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 12;
          break;
        case 13:
          if (v7 != 6 || v5 != 13 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 13;
          break;
        case 14:
          if (v7 != 6 || v5 != 14 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 14;
          break;
        case 15:
          if (v7 != 6 || v5 != 15 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 15;
          break;
        case 16:
          if (v7 != 6 || v5 != 16 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 16;
          break;
        case 17:
          if (v7 != 6 || v5 != 17 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 17;
          break;
        case 18:
          if (v7 != 6 || v5 != 18 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 18;
          break;
        case 19:
          if (v7 != 6 || v5 != 19 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 19;
          break;
        case 20:
          if (v7 != 6 || v5 != 20 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 20;
          break;
        case 21:
          if (v7 != 6 || v5 != 21 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 21;
          break;
        case 22:
          if (v7 != 6 || v5 != 22 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 22;
          break;
        case 23:
          if (v7 != 6 || v5 != 23 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 23;
          break;
        case 24:
          if (v7 != 6 || v5 != 24 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 24;
          break;
        case 25:
          if (v7 != 6 || v5 != 25 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 25;
          break;
        case 26:
          if (v7 != 6 || v5 != 26 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 26;
          break;
        case 27:
          if (v7 != 6 || v5 != 27 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 27;
          break;
        case 28:
          if (v7 != 6 || v5 != 28 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 28;
          break;
        case 29:
          if (v7 != 6 || v5 != 29 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 29;
          break;
        case 30:
          if (v7 != 6 || v5 != 30 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 30;
          break;
        case 31:
          if (v7 != 6 || v5 != 31 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 31;
          break;
        case 32:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 32 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 32;
          break;
        case 33:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 33 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 33;
          break;
        case 34:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 34 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 34;
          break;
        case 35:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 35 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 35;
          break;
        case 36:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 36 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 36;
          break;
        case 37:
          if (v7 != 6) {
            goto LABEL_31;
          }
          if (v5 != 37 || v6 != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 37;
          break;
        default:
          if (v7 != 6 || (v6 | v5) != 0) {
            goto LABEL_31;
          }
          sub_25351F094();
          uint64_t v27 = 0;
          break;
      }
      sub_25351ED08(v27, 0, 6u);
      char v14 = 1;
      return v14 & 1;
    default:
      if (*(unsigned char *)(a2 + 16)) {
        goto LABEL_31;
      }
      uint64_t v8 = sub_2534D9778();
      uint64_t v10 = sub_25351F0CC(v8, v9, 0);
      unsigned __int8 v12 = 0;
LABEL_14:
      sub_25351ED08(v10, v11, v12);
      char v14 = v3 == v5;
      return v14 & 1;
  }
}

uint64_t sub_25351E7BC(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = HIBYTE(a4) & 0xF;
  v13[2] = a3;
  v13[3] = a4;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  v13[4] = 0;
  v13[5] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_253B09890();
  if (v8)
  {
    uint64_t v9 = v8;
    while (1)
    {
      v13[0] = v7;
      v13[1] = v9;
      char v10 = a1(v13);
      swift_bridgeObjectRelease();
      if (v4 || (v10 & 1) != 0) {
        break;
      }
      uint64_t v7 = sub_253B09890();
      uint64_t v9 = v11;
      if (!v11) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
}

unsigned char *sub_25351E88C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unsigned __int8 *sub_25351E8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_253B09930();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    BOOL v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_253A43A18();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    BOOL v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v7 = (unsigned __int8 *)sub_253B0A0A0();
  }
LABEL_7:
  uint64_t v11 = sub_25351E9E0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_25351E9E0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (char i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25351EC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_253B0A4C0() & 1;
  }
}

uint64_t sub_25351ECA0(uint64_t *a1, uint64_t *a2)
{
  return sub_25351EC5C(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_25351ECCC(uint64_t *a1)
{
  return sub_25351ECA0(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_25351ECEC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((a3 | 4) == 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25351ED08(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((a3 | 4) == 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for Lexer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lexer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Lexer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Lexer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Lexer()
{
  return &type metadata for Lexer;
}

uint64_t destroy for Lexer.Token(uint64_t a1)
{
  return sub_25351ED08(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s30IntelligenceFlowPlannerSupport5LexerV5TokenOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25351ECEC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Lexer.Token(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_25351ECEC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_25351ED08(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Lexer.Token(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_25351ED08(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Lexer.Token()
{
  return &type metadata for Lexer.Token;
}

uint64_t sub_25351EF98(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *sub_25351EFF8@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_25351E88C(a1, a2);
}

void *sub_25351F014@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_25351F058(uint64_t *a1)
{
  return sub_25351ECCC(a1) & 1;
}

uint64_t sub_25351F074()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F094()
{
  return sub_25351ED08(v1, v0, 6u);
}

uint64_t sub_25351F0B0()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F0CC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_25351ED08(a1, a2, a3);
  return v3;
}

uint64_t sub_25351F10C()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F124()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F148()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F18C()
{
  return sub_253B0A4C0();
}

uint64_t sub_25351F1B0()
{
  return sub_253B0A4C0();
}

void sub_25351F1D0()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  JUMPOUT(0x25A268850);
}

uint64_t static Parser.parse(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v6 = sub_253B089F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253B08350();
  swift_bridgeObjectRetain_n();
  unint64_t v10 = sub_253B089D0();
  os_log_type_t v11 = sub_253B09D70();
  BOOL v12 = os_log_type_enabled(v10, v11);
  unint64_t v51 = a2;
  if (v12)
  {
    uint64_t v60 = v6;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    v55[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v53 = sub_253464DF8(a1, v51, v55);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v10, v11, "Parsing plan: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A269E60](v14, -1, -1);
    uint64_t v15 = v13;
    a2 = v51;
    MEMORY[0x25A269E60](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v60);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v16 = HIBYTE(a2) & 0xF;
  v55[0] = a1;
  v55[1] = a2;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v55[2] = 0;
  v55[3] = v16;
  long long v56 = 0u;
  long long v57 = 0u;
  unsigned __int8 v58 = -1;
  uint64_t v59 = 0;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    sub_253526998();
    uint64_t v18 = *((void *)&v53 + 1);
    uint64_t v17 = v53;
    LOBYTE(v19) = v54;
    if (v54) {
      break;
    }
    if ((v53 & 0x8000000000000000) != 0)
    {
      long long v57 = v53;
      unsigned __int8 v58 = 0;
      sub_25351ECEC(v53, *((uint64_t *)&v53 + 1), 0);
      LOBYTE(v19) = 0;
LABEL_13:
      uint64_t v60 = MEMORY[0x263F8EE78];
      goto LABEL_15;
    }
  }
  if (v54 != 255)
  {
    long long v57 = v53;
    unsigned __int8 v58 = v54;
    goto LABEL_13;
  }
  uint64_t v60 = MEMORY[0x263F8EE78];
LABEL_14:
  sub_253526998();
  sub_25352682C();
  if (v20)
  {
    *uint64_t v50 = v60;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25351FAC0(v17, v18, 0xFFu);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  while (1)
  {
LABEL_15:
    if ((_BYTE)v19)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v18;
      uint64_t v23 = v17;
      uint64_t v24 = v18;
      unsigned __int8 v25 = v19;
LABEL_17:
      sub_25351FAD4(v23, v24, v25);
      uint64_t v26 = sub_25351ED08(v21, v22, v19);
      uint64_t v28 = v21;
      uint64_t v29 = v22;
      unsigned __int8 v30 = v19;
    }
    else
    {
      unsigned __int8 v25 = 0;
      uint64_t v22 = v18;
      uint64_t v21 = v17;
      while (1)
      {
        uint64_t v32 = v59;
        sub_25351FAD4(v17, v18, v25);
        if (v21 < v32)
        {
          unsigned __int8 v30 = 0;
          LOBYTE(v19) = 0;
          uint64_t v29 = v22;
          uint64_t v28 = v21;
          goto LABEL_32;
        }
        sub_25351FAC0(v21, v22, 0);
        sub_253526998();
        uint64_t v22 = *((void *)&v53 + 1);
        uint64_t v21 = v53;
        int v19 = v54;
        long long v57 = v53;
        unsigned __int8 v58 = v54;
        if (v54 == 255) {
          break;
        }
        sub_25351ECEC(v53, *((uint64_t *)&v53 + 1), v54);
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        unsigned __int8 v25 = -1;
        if (v19) {
          goto LABEL_17;
        }
      }
      sub_253526998();
      uint64_t v29 = *((void *)&v53 + 1);
      uint64_t v28 = v53;
      LOBYTE(v19) = v54;
      long long v57 = v53;
      unsigned __int8 v58 = v54;
      if (v54 == 255) {
        goto LABEL_33;
      }
      uint64_t v26 = sub_25351ECEC(v53, *((uint64_t *)&v53 + 1), v54);
      unsigned __int8 v30 = -1;
    }
    if (v19 != 6) {
      goto LABEL_32;
    }
    if (v28 ^ 0x20 | v29)
    {
      if (v28 ^ 0x22 | v29)
      {
        LOBYTE(v19) = 6;
LABEL_32:
        sub_25351FAD4(v21, v22, v30);
        sub_25351FAC0(v28, v29, v19);
LABEL_33:
        uint64_t v3 = v52;
        sub_253520228();
        uint64_t v52 = v3;
        if (v3) {
          goto LABEL_61;
        }
        unint64_t v33 = v34;
        goto LABEL_35;
      }
      sub_2535268A4(v26, v27, v30);
      sub_25351FE2C();
    }
    else
    {
      sub_2535268A4(v26, v27, v30);
      unint64_t v31 = sub_253520150();
    }
    uint64_t v52 = v3;
    if (v3) {
      break;
    }
    unint64_t v33 = v31;
    sub_25351FAC0(v28, v29, 6u);
LABEL_35:
    unsigned __int8 v35 = v58;
    uint64_t v37 = *((void *)&v57 + 1);
    for (uint64_t i = v57; ; uint64_t i = 0)
    {
      uint64_t v17 = i;
      uint64_t v18 = v37;
      LOBYTE(v19) = v35;
      if (v35 == 0xFF)
      {
        sub_253526998();
        sub_25352682C();
        if (v20) {
          goto LABEL_44;
        }
        sub_25351ECEC(i, v37, 0xFFu);
      }
      if (v35)
      {
        sub_25351FAD4(i, v37, v35);
        sub_25351ED08(i, v37, v35);
        goto LABEL_44;
      }
      if (i < v59) {
        break;
      }
      long long v57 = 0uLL;
      unsigned __int8 v58 = -1;
      sub_25351FAD4(i, v37, v35);
      sub_25351FAC0(i, v37, 0);
      uint64_t v37 = 0;
      unsigned __int8 v35 = -1;
    }
    sub_25351FAD4(i, v37, v35);
    LOBYTE(v19) = 0;
LABEL_44:
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253522D48(0, *(void *)(v60 + 16) + 1, 1, v60, &qword_269CDE628, (uint64_t)&type metadata for AST.Stmt, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
      uint64_t v60 = v43;
    }
    unint64_t v39 = *(void *)(v60 + 16);
    unint64_t v38 = *(void *)(v60 + 24);
    if (v39 >= v38 >> 1)
    {
      char v44 = sub_253526BBC(v38);
      sub_253522D48(v44, v39 + 1, 1, v60, &qword_269CDE628, (uint64_t)&type metadata for AST.Stmt, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
      uint64_t v60 = v45;
    }
    uint64_t v40 = v60 + 8 * v39;
    *(void *)(v60 + 16) = v39 + 1;
    *(void *)(v40 + 32) = v33;
    uint64_t v41 = v18;
    unsigned __int8 v42 = v19;
    if ((_BYTE)v19 != 0xFF) {
      goto LABEL_54;
    }
    while (1)
    {
      uint64_t v41 = v18;
      uint64_t i = v17;
      sub_253526998();
      sub_25352682C();
      if (v20)
      {
        swift_release();
        goto LABEL_14;
      }
      sub_25351ECEC(v17, v18, v19);
      unsigned __int8 v42 = -1;
LABEL_54:
      if ((_BYTE)v19)
      {
        sub_25351FAD4(i, v41, v42);
        sub_25351ED08(v17, v18, v19);
        break;
      }
      uint64_t v46 = v59;
      sub_25351FAD4(i, v41, v42);
      if (v17 < v46) {
        break;
      }
      sub_25351FAC0(v17, v18, 0);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
    swift_release();
  }
  sub_25351FAC0(v28, v29, 6u);
LABEL_61:
  swift_bridgeObjectRelease();
  long long v47 = v57;
  unsigned __int8 v48 = v58;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25351FAC0(v47, *((uint64_t *)&v47 + 1), v48);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25351F96C@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(unsigned __int8 *)(v1 + 64);
  if (v2 == 255) {
    return Lexer.next()(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(unsigned char *)(a1 + 16) = v2;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = -1;
  return result;
}

void sub_25351F998()
{
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 56);
    int v3 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v4 = v2;
    uint64_t v5 = v1;
    int v6 = v3;
    if (v3 == 255)
    {
      Lexer.next()((uint64_t)v18);
      uint64_t v4 = v18[0];
      uint64_t v5 = v18[1];
      int v6 = v19;
      *(void *)(v0 + 48) = v18[0];
      *(void *)(v0 + 56) = v5;
      *(unsigned char *)(v0 + 64) = v6;
      if (v6 == 255)
      {
        sub_2535268E0();
        return;
      }
      uint64_t v7 = sub_253526958();
      sub_25351ECEC(v7, v8, v9);
    }
    if (v6) {
      break;
    }
    if (v4 < *(void *)(v0 + 72))
    {
      sub_2535268E0();
      sub_25351FAD4(v14, v15, v16);
      return;
    }
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 56) = 0;
    *(unsigned char *)(v0 + 64) = -1;
    sub_25351FAD4(v2, v1, v3);
    sub_25351FAC0(v4, v5, 0);
  }
  sub_25351FAD4(v2, v1, v3);
  sub_253526958();
  sub_2535268E0();
  sub_25351ED08(v10, v11, v12);
}

uint64_t sub_25351FAC0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_25351ED08(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_25351FAD4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return sub_25351ECEC(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_25351FAE8()
{
  uint64_t v6 = v1;
  sub_25351F96C((uint64_t)&v29);
  if (v31)
  {
    if (v31 != 255) {
      sub_25351FAC0(v29, v30, v31);
    }
    goto LABEL_5;
  }
  if (v29 < *(void *)(v0 + 72))
  {
LABEL_5:
    sub_253526248();
    sub_2534D969C();
    sub_2535267BC(v7, 1);
    return v2;
  }
  uint64_t v27 = *(void *)(v0 + 72);
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v28 = v29;
  *(void *)(v0 + 72) = v29;
  while (1)
  {
    sub_2535269B0();
    if (v9)
    {
      Lexer.next()((uint64_t)&v29);
      uint64_t v3 = v29;
      uint64_t v4 = v30;
      LODWORD(v5) = v31;
      *(void *)(v0 + 48) = v29;
      *(void *)(v0 + 56) = v4;
      *(unsigned char *)(v0 + 64) = v5;
      if (v5 == 255) {
        goto LABEL_33;
      }
      sub_25351ECEC(v3, v4, v5);
    }
    uint64_t v10 = sub_253526958();
    if (v5)
    {
      sub_25351FAD4(v10, v11, v12);
      sub_25351ED08(v3, v4, v5);
    }
    else
    {
      sub_25351FAD4(v10, v11, v12);
      if (v3 < v28)
      {
LABEL_33:
        *(void *)(v0 + 72) = v27;
        return v2;
      }
    }
    sub_25351F998();
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    int v14 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v15 = v4;
    uint64_t v16 = v13;
    int v17 = v14;
    if (v14 != 255) {
      break;
    }
    Lexer.next()((uint64_t)&v29);
    uint64_t v15 = v29;
    uint64_t v16 = v30;
    int v17 = v31;
    *(void *)(v0 + 48) = v29;
    *(void *)(v0 + 56) = v16;
    *(unsigned char *)(v0 + 64) = v17;
    if (v17 != 255)
    {
      sub_25351ECEC(v15, v16, v17);
      break;
    }
LABEL_23:
    sub_253520228();
    if (v6) {
      goto LABEL_35;
    }
    unint64_t v5 = v21;
LABEL_28:
    sub_25351F998();
    uint64_t v3 = v5 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253522D48(0, *(void *)(v2 + 16) + 1, 1, v2, &qword_269CDE628, (uint64_t)&type metadata for AST.Stmt, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
      uint64_t v2 = v24;
    }
    unint64_t v23 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    if (v23 >= v22 >> 1)
    {
      char v25 = sub_253526BBC(v22);
      sub_253522D48(v25, v23 + 1, 1, v2, &qword_269CDE628, (uint64_t)&type metadata for AST.Stmt, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
      uint64_t v2 = v26;
    }
    *(void *)(v2 + 16) = v23 + 1;
    *(void *)(v2 + 8 * v23 + 32) = v5;
    swift_release();
  }
  if (v17 != 6)
  {
LABEL_22:
    sub_25351FAD4(v4, v13, v14);
    sub_25351FAC0(v15, v16, v17);
    goto LABEL_23;
  }
  if (v15 ^ 0x20 | v16)
  {
    if (!(v15 ^ 0x22 | v16))
    {
      sub_25351FAD4(v4, v13, v14);
      sub_25351F96C((uint64_t)&v29);
      uint64_t v18 = sub_25351FAC0(v29, v30, v31);
      uint64_t v19 = v6;
      unint64_t v20 = sub_25351FE2C(v18);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  sub_25351FAD4(v4, v13, v14);
  sub_25351F96C((uint64_t)&v29);
  sub_25351FAC0(v29, v30, v31);
  uint64_t v19 = v6;
  unint64_t v20 = sub_253520150();
LABEL_26:
  uint64_t v6 = v19;
  if (!v19)
  {
    unint64_t v5 = v20;
    sub_253526ACC();
    goto LABEL_28;
  }
  sub_253526ACC();
LABEL_35:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 72) = v27;
  return v2;
}

void sub_25351FE2C()
{
  sub_253520330(0, (unint64_t *)&v40);
  if (!v1)
  {
    uint64_t v10 = v40;
    sub_253526C4C(v2, v3, v4, v5, v6, v7, v8, v9, 27, 0, 27, 0, v42);
    uint64_t v43 = sub_25351FAE8();
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 56);
    int v13 = *(unsigned __int8 *)(v0 + 64);
    uint64_t v14 = v12;
    uint64_t v15 = v11;
    int v16 = v13;
    if (v13 == 255)
    {
      Lexer.next()((uint64_t)&v40);
      uint64_t v15 = v41;
      uint64_t v14 = v40;
      int v16 = v42;
      *(void *)(v0 + 48) = v40;
      *(void *)(v0 + 56) = v15;
      *(unsigned char *)(v0 + 64) = v16;
      if (v16 == 255) {
        goto LABEL_19;
      }
      sub_25351ECEC(v14, v15, v16);
    }
    if (v16)
    {
      sub_25351FAD4(v12, v11, v13);
      sub_25351ED08(v14, v15, v16);
    }
    else
    {
      if (v14 != *(void *)(v0 + 72))
      {
        sub_25351FAD4(v12, v11, v13);
        goto LABEL_19;
      }
      sub_25351FAD4(v12, v11, v13);
      sub_25351F96C((uint64_t)&v40);
      sub_25351FAC0(v40, v41, v42);
      uint64_t v18 = *(void *)(v0 + 48);
      uint64_t v17 = *(void *)(v0 + 56);
      int v19 = *(unsigned __int8 *)(v0 + 64);
      uint64_t v20 = v18;
      uint64_t v21 = v17;
      int v22 = v19;
      if (v19 == 255)
      {
        Lexer.next()((uint64_t)&v40);
        uint64_t v21 = v41;
        uint64_t v20 = v40;
        int v22 = v42;
        *(void *)(v0 + 48) = v40;
        *(void *)(v0 + 56) = v21;
        *(unsigned char *)(v0 + 64) = v22;
        if (v22 == 255) {
          goto LABEL_19;
        }
        sub_25351ECEC(v20, v21, v22);
      }
      if (v22 == 6)
      {
        if (!(v20 ^ 0x24 | v21))
        {
          sub_25351FAD4(v18, v17, v19);
          sub_25351F96C((uint64_t)&v40);
          uint64_t v27 = sub_25351FAC0(v40, v41, v42);
          sub_253526C4C(v27, v28, v29, v30, v31, v32, v33, v34, v38, v39, v38, v39, v42);
          uint64_t v37 = sub_25351FAE8();
          uint64_t v25 = v43;
          uint64_t v36 = v37;
          sub_253526ACC();
          goto LABEL_21;
        }
        if (!(v20 ^ 0x23 | v21))
        {
          uint64_t v23 = v21;
          sub_25351FAD4(v18, v17, v19);
          sub_25351F96C((uint64_t)&v40);
          uint64_t v24 = sub_25351FAC0(v40, v41, v42);
          uint64_t v35 = sub_25351FE2C(v24);
          sub_253462A5C(&qword_269CDE628);
          uint64_t v36 = sub_253526BF4();
          *(_OWORD *)(v36 + 16) = xmmword_253B22680;
          *(void *)(v36 + 32) = v35;
          sub_25351FAC0(v20, v23, 6u);
LABEL_20:
          uint64_t v25 = v43;
LABEL_21:
          uint64_t v26 = (void *)sub_253526BF4();
          v26[2] = v10;
          v26[3] = v25;
          v26[4] = v36;
          return;
        }
      }
      sub_25351FAD4(v18, v17, v19);
      sub_25351FAC0(v20, v21, v22);
    }
LABEL_19:
    uint64_t v36 = 0;
    goto LABEL_20;
  }
}

unint64_t sub_253520150()
{
  unint64_t result = sub_25352192C();
  if (!v0)
  {
    unint64_t v10 = result;
    uint64_t v11 = v2;
    sub_253526864((__n128)xmmword_253B32B00, result, v2, v3, v4, v5, v6, v7, v8, v9, v25[0]);
    sub_253520330(0, v25);
    unint64_t v12 = v25[0];
    uint64_t v22 = sub_253526864((__n128)xmmword_253B32A10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v25[0]);
    uint64_t v23 = sub_25351FAE8(v22);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v10;
    *(void *)(v24 + 24) = v11;
    *(void *)(v24 + 32) = v12;
    *(void *)(v24 + 40) = v23;
    return v24 | 0x8000000000000000;
  }
  return result;
}

void sub_253520228()
{
  sub_253520330(0, &v12);
  if (!v1)
  {
    unint64_t v5 = v12;
    if (v12 >> 60 != 2 || *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 0x20) != 1) {
      goto LABEL_10;
    }
    sub_2535269B0();
    if (v6)
    {
      Lexer.next()((uint64_t)v10);
      uint64_t v2 = v10[0];
      uint64_t v3 = v10[1];
      int v4 = v11;
      *(void *)(v0 + 48) = v10[0];
      *(void *)(v0 + 56) = v3;
      *(unsigned char *)(v0 + 64) = v4;
      if (v4 == 255)
      {
LABEL_10:
        *(void *)(swift_allocObject() + 16) = v5;
        return;
      }
      sub_25351ECEC(v2, v3, v4);
    }
    uint64_t v7 = sub_253526958();
    sub_25351FAD4(v7, v8, v9);
    if (v4)
    {
      sub_25351ED08(v2, v3, v4);
      sub_253520330(0, v10);
      sub_25346CA4C(v5);
      unint64_t v5 = v10[0];
    }
    goto LABEL_10;
  }
}

void sub_253520330(char a1@<W0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  sub_25351F998();
  sub_253520C08((uint64_t *)&v87);
  if (v3) {
    return;
  }
  char v82 = a1;
  uint64_t v80 = a2;
  sub_25351F998();
  BOOL v81 = (void *)(v2 + 48);
  unint64_t v12 = v87;
  while (2)
  {
    uint64_t v13 = *(void *)(v4 + 48);
    uint64_t v14 = *(void *)(v4 + 56);
    int v15 = *(unsigned __int8 *)(v4 + 64);
    uint64_t v16 = v13;
    uint64_t v17 = v14;
    int v18 = v15;
    if (v15 == 255)
    {
      sub_253526C6C(v7, v8, v9, v10, v11);
      uint64_t v16 = v84;
      uint64_t v17 = v85;
      int v18 = v86;
      *(void *)(v4 + 48) = v84;
      *(void *)(v4 + 56) = v17;
      *(unsigned char *)(v4 + 64) = v18;
      if (v18 == 255) {
        goto LABEL_55;
      }
      sub_25351ECEC(v16, v17, v18);
    }
    if (v18 != 6 || (unint64_t)(v16 - 2) > 0x1F)
    {
LABEL_52:
      sub_25351FAD4(v13, v14, v15);
      uint64_t v68 = v16;
      uint64_t v69 = v17;
      unsigned __int8 v70 = v18;
      goto LABEL_54;
    }
    switch(v16)
    {
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 33:
        sub_253526898();
        if (v19 >= 5) {
          goto LABEL_53;
        }
        goto LABEL_20;
      case 9:
      case 11:
        sub_253526898();
        if (v20 >= 6) {
          goto LABEL_53;
        }
        goto LABEL_20;
      case 13:
      case 16:
        sub_253526898();
        if (v21 >= 7) {
          goto LABEL_53;
        }
        goto LABEL_20;
      case 15:
        sub_253526898();
        if (v24 >= 9) {
          goto LABEL_53;
        }
        goto LABEL_22;
      case 18:
      case 31:
        sub_253526898();
        if (v22 >= 4) {
          goto LABEL_53;
        }
        goto LABEL_20;
      case 19:
        sub_253526898();
        if (v25 >= 0xB)
        {
          sub_25351FAD4(v13, v14, v15);
          goto LABEL_55;
        }
LABEL_26:
        void *v81 = 0;
        v81[1] = 0;
        *(unsigned char *)(v4 + 64) = -1;
        sub_25351FAD4(v13, v14, v15);
        sub_25351FAC0(v16, v17, 6u);
        if (!(v12 >> 60))
        {
          uint64_t v27 = *(void *)(v12 + 16);
          uint64_t v26 = *(void *)(v12 + 24);
          sub_2534C1C84(v12);
          swift_bridgeObjectRetain();
          unint64_t v28 = sub_253521158();
          uint64_t v29 = swift_allocObject();
          *(void *)(v29 + 16) = v27;
          *(void *)(v29 + 24) = v26;
          *(void *)(v29 + 32) = 0;
          *(void *)(v29 + 40) = 0;
          *(unsigned char *)(v29 + 48) = 0;
          *(void *)(v29 + 56) = v28;
LABEL_28:
          sub_25346CA4C(v12);
          unint64_t v7 = sub_25346CA4C(v12);
          unint64_t v12 = v29 | 0x7000000000000000;
          continue;
        }
        unint64_t v87 = v12;
        sub_253526248();
        sub_2534D969C();
        sub_2535267BC(v71, 7);
LABEL_68:
        unint64_t v12 = v87;
LABEL_69:
        sub_25346CA4C(v12);
        return;
      case 20:
      case 21:
      case 22:
      case 24:
      case 26:
      case 27:
      case 28:
      case 32:
        goto LABEL_52;
      case 23:
      case 25:
        sub_253526898();
        if (v23 < 0xA) {
          goto LABEL_20;
        }
        goto LABEL_53;
      case 29:
        sub_253526898();
        if (v30 >= 3) {
          goto LABEL_53;
        }
        goto LABEL_22;
      case 30:
        sub_253526898();
        if (v31 >= 2) {
          goto LABEL_53;
        }
LABEL_22:
        unint64_t v83 = v12;
        sub_25351FAD4(v13, v14, v15);
        sub_2534C1C84(v12);
        sub_253520EDC(&v83, (uint64_t *)&v84);
        sub_25346CA4C(v12);
        unint64_t v7 = sub_25346CA4C(v12);
        unint64_t v12 = v84;
        continue;
      default:
        if (v82) {
          goto LABEL_53;
        }
LABEL_20:
        if ((unint64_t)(v16 - 2) > 0x1F)
        {
LABEL_53:
          sub_25351FAD4(v13, v14, v15);
          uint64_t v68 = v16;
          uint64_t v69 = v17;
          unsigned __int8 v70 = 6;
LABEL_54:
          sub_25351ED08(v68, v69, v70);
LABEL_55:
          *uint64_t v80 = v12;
          return;
        }
        switch(v16)
        {
          case 18:
          case 20:
          case 21:
          case 22:
          case 24:
          case 26:
          case 27:
          case 28:
          case 31:
          case 32:
            goto LABEL_53;
          case 19:
            goto LABEL_26;
          case 23:
            void *v81 = 0;
            v81[1] = 0;
            *(unsigned char *)(v4 + 64) = -1;
            sub_25351FAD4(v13, v14, v15);
            sub_25351FAC0(v16, v17, 6u);
            sub_2534C1C84(v12);
            uint64_t v32 = sub_253520330(&v84, 0);
            unint64_t v36 = v84;
            uint64_t v38 = *(void *)(v4 + 48);
            uint64_t v37 = *(void *)(v4 + 56);
            int v39 = *(unsigned __int8 *)(v4 + 64);
            uint64_t v40 = v38;
            uint64_t v41 = v37;
            int v42 = v39;
            if (v39 != 255) {
              goto LABEL_36;
            }
            uint64_t v79 = v84;
            uint64_t v43 = *(void *)(v4 + 56);
            sub_253526C6C((uint64_t)v32, v37, v33, v34, v35);
            uint64_t v40 = v84;
            uint64_t v41 = v85;
            int v42 = v86;
            *(void *)(v4 + 48) = v84;
            *(void *)(v4 + 56) = v41;
            *(unsigned char *)(v4 + 64) = v42;
            if (v42 != 255)
            {
              sub_25351ECEC(v40, v41, v42);
              uint64_t v37 = v43;
              unint64_t v36 = v79;
LABEL_36:
              switch(v42)
              {
                case 1:
                  uint64_t v73 = sub_253526B80();
                  unsigned __int8 v75 = 1;
                  goto LABEL_65;
                case 5:
                  uint64_t v73 = sub_253526B80();
                  unsigned __int8 v75 = 5;
LABEL_65:
                  sub_25351ECEC(v73, v74, v75);
                  swift_bridgeObjectRetain();
                  uint64_t v37 = 0;
                  goto LABEL_66;
                case 6:
                  if (v40 ^ 0x18 | v41) {
                    goto LABEL_57;
                  }
                  sub_25351FAD4(v38, v37, v39);
                  uint64_t v44 = sub_253526C0C(v40, v41, 6u);
                  sub_25351FAC0(v44, v45, 6u);
                  sub_25351FAC0(v40, v41, 6u);
                  sub_25351FAC0(v40, v41, 6u);
                  void *v81 = 0;
                  v81[1] = 0;
                  *(unsigned char *)(v4 + 64) = -1;
                  uint64_t v46 = sub_253526AA4();
                  *(void *)(v46 + 16) = v12;
                  *(void *)(v46 + 24) = v36;
                  unint64_t v7 = sub_25346CA4C(v12);
                  unint64_t v12 = v46 | 0x6000000000000000;
                  continue;
                default:
LABEL_57:
                  unint64_t v87 = v12;
LABEL_66:
                  sub_25351FAD4(v38, v37, v39);
                  uint64_t v76 = sub_253526C0C(v40, v41, v42);
                  sub_25351FAC0(v76, v77, v42);
                  sub_25351FAC0(v40, v41, v42);
                  goto LABEL_67;
              }
            }
            unint64_t v87 = v12;
            sub_25351FAC0(v40, v41, 0xFFu);
            sub_25351FAC0(24, 0, 6u);
            unint64_t v36 = v79;
LABEL_67:
            sub_253526248();
            sub_2534D969C();
            sub_2535267BC(v78, 1);
            sub_25346CA4C(v36);
            sub_25346CA4C(v12);
            goto LABEL_68;
          case 25:
            void *v81 = 0;
            v81[1] = 0;
            *(unsigned char *)(v4 + 64) = -1;
            sub_25351FAD4(v13, v14, v15);
            sub_25351FAC0(v16, v17, 6u);
            unint64_t v47 = sub_2534C1C84(v12);
            uint64_t v52 = sub_253526C6C(v47, v48, v49, v50, v51);
            uint64_t v56 = v84;
            uint64_t v57 = v85;
            if (v86 != 1)
            {
              if (v86 != 255) {
                sub_25351FAC0(v84, v85, v86);
              }
              sub_253526248();
              sub_2534D969C();
              sub_2535267BC(v72, 3);
              sub_25346CA4C(v12);
              goto LABEL_69;
            }
            sub_253526C6C(v52, v53, v86, v54, v55);
            uint64_t v59 = v84;
            uint64_t v58 = v85;
            int v60 = v86;
            *(void *)(v4 + 48) = v84;
            *(void *)(v4 + 56) = v58;
            *(unsigned char *)(v4 + 64) = v60;
            BOOL v61 = v60 == 6 && v59 == 19;
            if (!v61 || v58)
            {
              uint64_t v62 = sub_253526BF4();
              *(void *)(v62 + 16) = v12;
              *(void *)(v62 + 24) = v56;
              *(void *)(v62 + 32) = v57;
              unint64_t v7 = sub_25346CA4C(v12);
              unint64_t v12 = v62 | 0x5000000000000000;
              continue;
            }
            sub_25351FAD4(19, 0, 6u);
            sub_25351F96C((uint64_t)&v84);
            sub_25351FAC0(v84, v85, v86);
            sub_2534C1C84(v12);
            for (unint64_t i = v12; i >> 60 == 5; unint64_t i = v64)
            {
              unint64_t v64 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              uint64_t v65 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x20);
              unint64_t v84 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x18);
              uint64_t v85 = v65;
              sub_2534C1C84(v64);
              swift_bridgeObjectRetain();
              sub_253B09860();
              sub_253B09860();
              swift_bridgeObjectRelease();
              sub_25346CA4C(i);
              uint64_t v56 = v84;
              uint64_t v57 = v85;
            }
            if (!(i >> 60))
            {
              uint64_t v66 = *(void *)(i + 24);
              unint64_t v84 = *(void *)(i + 16);
              uint64_t v85 = v66;
              swift_bridgeObjectRetain();
              sub_253B09860();
              sub_253B09860();
              swift_bridgeObjectRelease();
              uint64_t v56 = v84;
              uint64_t v57 = v85;
            }
            swift_bridgeObjectRetain();
            unint64_t v67 = sub_253521158();
            uint64_t v29 = swift_allocObject();
            *(void *)(v29 + 16) = v56;
            *(void *)(v29 + 24) = v57;
            *(void *)(v29 + 32) = 0;
            *(void *)(v29 + 40) = 0;
            *(unsigned char *)(v29 + 48) = 0;
            *(void *)(v29 + 56) = v67;
            swift_bridgeObjectRelease();
            sub_25346CA4C(i);
            break;
          default:
            goto LABEL_22;
        }
        goto LABEL_28;
    }
  }
}

void sub_253520C08(uint64_t *a1@<X8>)
{
  sub_25351F96C((uint64_t)&v23);
  unsigned __int8 v3 = v25;
  if (v25 == 255)
  {
    sub_25352634C();
    sub_2534D969C();
    *(void *)uint64_t v7 = 0xD000000000000070;
    *(void *)(v7 + 8) = 0x8000000253B0C610;
    *(_OWORD *)(v7 + 16) = xmmword_253B32C90;
    *(void *)(v7 + 32) = 0xEE00292873684C72;
    swift_willThrow();
  }
  else
  {
    uint64_t v5 = v23;
    uint64_t v4 = v24;
    switch(v25)
    {
      case 1u:
        uint64_t v6 = sub_253526AA4();
        *(void *)(v6 + 16) = v5;
        *(void *)(v6 + 24) = v4;
        *a1 = v6;
        return;
      case 2u:
        uint64_t v8 = sub_2535269CC();
        *(void *)(v8 + 16) = v5 & 1;
        *(void *)(v8 + 24) = 0;
        *(unsigned char *)(v8 + 32) = 0;
        goto LABEL_10;
      case 3u:
        uint64_t v8 = sub_2535269CC();
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = 0;
        char v9 = 1;
        goto LABEL_9;
      case 4u:
        uint64_t v8 = sub_2535269CC();
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = 0;
        char v9 = 2;
        goto LABEL_9;
      case 5u:
        uint64_t v8 = sub_2535269CC();
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = v4;
        char v9 = 3;
        goto LABEL_9;
      case 6u:
        if (!(v23 ^ 1 | v24))
        {
          uint64_t v8 = sub_2535269CC();
          *(void *)(v8 + 16) = 0;
          *(void *)(v8 + 24) = 0;
          char v9 = 6;
LABEL_9:
          *(unsigned char *)(v8 + 32) = v9;
LABEL_10:
          uint64_t v10 = v8 | 0x2000000000000000;
          goto LABEL_11;
        }
        sub_253526B1C();
        if (v12)
        {
          sub_253526B1C();
          if (v14)
          {
            sub_253526B1C();
            if (v16)
            {
              sub_253526B1C();
              if (!v17)
              {
                sub_2535210E8(a1);
                return;
              }
              sub_253526B1C();
              if (!v18)
              {
                sub_25352106C(a1);
                return;
              }
              if (!(v5 ^ 0x1C | v4))
              {
                uint64_t v10 = 0x9000000000000008;
                goto LABEL_11;
              }
              if (v5 ^ 0x1F | v4)
              {
LABEL_22:
                sub_253526248();
                sub_2534D969C();
                sub_2535267BC(v22, 6);
                sub_25351FAC0(v5, v4, v3);
                return;
              }
            }
            sub_253526B28(v15);
            if (!v1)
            {
              uint64_t v19 = v23;
              uint64_t v20 = sub_253526AA4();
              char v21 = 2;
LABEL_29:
              *(unsigned char *)(v20 + 16) = v21;
              goto LABEL_30;
            }
          }
          else
          {
            sub_253526B28(v13);
            if (!v1)
            {
              uint64_t v19 = v23;
              uint64_t v20 = sub_253526AA4();
              char v21 = 1;
              goto LABEL_29;
            }
          }
        }
        else
        {
          sub_253526B28(v11);
          if (!v1)
          {
            uint64_t v19 = v23;
            uint64_t v20 = sub_253526AA4();
            *(unsigned char *)(v20 + 16) = 0;
LABEL_30:
            *(void *)(v20 + 24) = v19;
            uint64_t v10 = v20 | 0x3000000000000000;
LABEL_11:
            *a1 = v10;
            return;
          }
        }
        break;
      default:
        goto LABEL_22;
    }
  }
}

void *sub_253520EDC@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  sub_25351F96C((uint64_t)&v15);
  unsigned __int8 v5 = v17;
  if (v17 == 255)
  {
    sub_25352634C();
    sub_2534D969C();
    *(void *)uint64_t v11 = 0xD000000000000070;
    *(void *)(v11 + 8) = 0x8000000253B0C610;
    *(_OWORD *)(v11 + 16) = xmmword_253B32CA0;
    *(void *)(v11 + 32) = 0x8000000253B0C690;
    return (void *)swift_willThrow();
  }
  else
  {
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    if (v17 == 6
      && (unint64_t v8 = v15 - 2, __PAIR128__((unint64_t)(v15 >= 2) + v16 - 1, v15 - 2) < 0x20)
      && ((0x9800FFFF >> v8) & 1) != 0)
    {
      char v12 = byte_253B32DAE[v8];
      sub_25351FAC0(v15, v16, 6u);
      unint64_t result = sub_253520330(&v15, byte_253B32D8E[v8]);
      if (!v2)
      {
        unint64_t v13 = v15;
        uint64_t v14 = sub_253526BF4();
        *(unsigned char *)(v14 + 16) = v12;
        *(void *)(v14 + 24) = v4;
        *(void *)(v14 + 32) = v13;
        *a2 = v14 | 0x4000000000000000;
        return (void *)sub_2534C1C84(v4);
      }
    }
    else
    {
      sub_253526248();
      sub_2534D969C();
      sub_2535267BC(v9, 9);
      return (void *)sub_25351FAC0(v6, v7, v5);
    }
  }
  return result;
}

uint64_t sub_25352106C@<X0>(uint64_t *a1@<X8>)
{
  long long v5 = xmmword_253B32A40;
  char v6 = 6;
  uint64_t result = sub_253522420((uint64_t)&v5);
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t result = sub_2535269CC();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 4;
    *a1 = result | 0x2000000000000000;
  }
  return result;
}

void *sub_2535210E8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_253520330(v13, 0);
  if (!v1)
  {
    uint64_t v12 = v13[0];
    uint64_t result = (void *)sub_253526864((__n128)xmmword_253B32A80, (uint64_t)result, v4, v5, v6, v7, v8, v9, v10, v11, v13[0]);
    *a1 = v12;
  }
  return result;
}

unint64_t sub_253521158()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v232 = MEMORY[0x263F8EE80];
  swift_beginAccess();
  __n128 v228 = (__n128)xmmword_253B32A80;
  __n128 v226 = (__n128)xmmword_253B32CB0;
  long long v227 = xmmword_253B32A20;
  while (1)
  {
    sub_25351F998();
    uint64_t v12 = *(void *)(v3 + 48);
    uint64_t v13 = *(void *)(v3 + 56);
    int v14 = *(unsigned __int8 *)(v3 + 64);
    if (v14 == 255)
    {
      uint64_t v15 = sub_253526B5C(v4, v5, v6, v7, v8, v9, v10, v11, v213, v218);
      uint64_t v13 = *((void *)&v229 + 1);
      uint64_t v12 = v229;
      int v14 = v230;
      *(void *)(v3 + 48) = v229;
      *(void *)(v3 + 56) = v13;
      *(unsigned char *)(v3 + 64) = v14;
      if (v14 == 255) {
        goto LABEL_57;
      }
      sub_25351ECEC(v12, v13, v14);
    }
    *(void *)&long long v229 = v12;
    *((void *)&v229 + 1) = v13;
    uint64_t v24 = sub_2535268FC();
    if (sub_253526B44(v24, v25, v26, v27, v28, v29, v30, v31, v213, v218))
    {
      uint64_t v15 = sub_25351ED08(v12, v13, v14);
LABEL_57:
      sub_253526794(v228, v15, v16, v17, v18, v19, v20, v21, v22, v213, v218, v223, v224, v226.n128_i64[0], v226.n128_i64[1], v227, *((uint64_t *)&v227 + 1), v228.n128_i64[0], v228.n128_i64[1],
        v23,
        v229);
      if (v1) {
        return swift_bridgeObjectRelease();
      }
      return v232;
    }
    if (v14 == 1)
    {
      sub_25351ED08(v12, v13, 1u);
      uint64_t v1 = v2;
      sub_253521B14(0, (unint64_t *)&v229);
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      unint64_t v32 = v229;
      if ((unint64_t)v229 >> 60 != 6)
      {
        if ((unint64_t)v229 >> 60) {
          goto LABEL_46;
        }
        uint64_t v33 = *(void *)(v229 + 24);
        uint64_t v223 = *(void *)(v229 + 16);
        uint64_t v35 = *(void *)(v3 + 48);
        uint64_t v34 = *(void *)(v3 + 56);
        uint64_t v36 = *(unsigned __int8 *)(v3 + 64);
        if (v36 != 255)
        {
          uint64_t v225 = *(void *)(v229 + 24);
          uint64_t v37 = swift_bridgeObjectRetain();
          uint64_t v45 = v35;
          unint64_t v46 = v34;
          uint64_t v47 = v36;
          goto LABEL_37;
        }
        uint64_t v129 = swift_bridgeObjectRetain();
        sub_253526B5C(v129, v130, v131, v132, v133, v134, v135, v136, v213, v218);
        unint64_t v46 = *((void *)&v229 + 1);
        uint64_t v45 = v229;
        uint64_t v137 = v33;
        uint64_t v47 = v230;
        *(void *)(v3 + 48) = v229;
        *(void *)(v3 + 56) = v46;
        *(unsigned char *)(v3 + 64) = v47;
        if (v47 != 255)
        {
          uint64_t v225 = v137;
          uint64_t v138 = sub_253526A28();
          uint64_t v37 = sub_25351ECEC(v138, v139, v140);
LABEL_37:
          *(void *)&long long v229 = v45;
          *((void *)&v229 + 1) = v46;
          unsigned __int8 v230 = v47;
          sub_253526BC8(v37, v38, v39, v40, v41, v42, v43, v44, v213, v218, v223, v225, *(_OWORD *)&v226);
          sub_25351FAD4(v35, v34, v36);
          uint64_t v141 = sub_253526A28();
          uint64_t v144 = sub_25351FAD4(v141, v142, v143);
          char v152 = sub_253526B44(v144, v145, v146, v147, v148, v149, v150, v151, v216, v221);
          sub_25351ED08(v229, *((uint64_t *)&v229 + 1), v230);
          uint64_t v153 = sub_253526A28();
          uint64_t v156 = sub_25351FAC0(v153, v154, v155);
          if (v152)
          {
            uint64_t v165 = sub_253526794(v226, v156, v157, v158, v159, v160, v161, v162, v163, v213, v218, v223, v224, v226.n128_i64[0], v226.n128_i64[1], v227, *((uint64_t *)&v227 + 1), v228.n128_i64[0], v228.n128_i64[1],
                     v164,
                     v229);
            sub_253526928(v165, v166, v167, v168, v169, v170, v171, v172, v217, v222);
            uint64_t v2 = 0;
            sub_253526C38();
            if (v173)
            {
              swift_bridgeObjectRetain();
              sub_25396E2C8(v47, v224, 0, 0);
              char v175 = v174;
              swift_bridgeObjectRelease();
              if (v175) {
                goto LABEL_64;
              }
            }
            goto LABEL_40;
          }
          goto LABEL_45;
        }
        goto LABEL_44;
      }
      unint64_t v73 = *(void *)((v229 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v72 = *(void *)((v229 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      if (v73 >> 60)
      {
        sub_2534C1C84(v229);
        sub_2534C1C84(v73);
        sub_2534C1C84(v72);
        sub_25346CA4C(v73);
        sub_25346CA4C(v72);
        sub_25346CA4C(v32);
        goto LABEL_46;
      }
      uint64_t v74 = *(void *)(v73 + 16);
      uint64_t v75 = *(void *)(v73 + 24);
      sub_2534C1C84(v229);
      sub_2534C1C84(v73);
      sub_2534C1C84(v72);
      swift_bridgeObjectRetain();
      sub_25346CA4C(v73);
      if (v72 >> 60 != 2)
      {
        sub_25346CA4C(v72);
        sub_25346CA4C(v32);
        goto LABEL_45;
      }
      uint64_t v76 = *(void *)((v72 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      int v77 = *(unsigned __int8 *)((v72 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      sub_25346CA4C(v72);
      sub_25346CA4C(v32);
      if (v77 != 1)
      {
LABEL_45:
        swift_bridgeObjectRelease();
LABEL_46:
        uint64_t v176 = *(void *)(v232 + 16);
        if (!v176
          || (swift_bridgeObjectRetain(),
              sub_25396E2C8(v176, 0, 0, 2u),
              char v178 = v177,
              swift_bridgeObjectRelease(),
              (v178 & 1) == 0))
        {
          sub_2535267E8();
          sub_2534C1C84(v32);
          sub_25346B264();
          swift_endAccess();
          unint64_t v46 = v32;
          goto LABEL_49;
        }
        swift_bridgeObjectRelease();
        sub_253526248();
        sub_2534D969C();
        sub_2535267BC(v211, 10);
LABEL_62:
        unint64_t v210 = v32;
        return sub_25346CA4C(v210);
      }
      uint64_t v223 = v74;
      uint64_t v224 = v76;
      uint64_t v85 = *(void *)(v3 + 48);
      uint64_t v86 = *(void *)(v3 + 56);
      int v87 = *(unsigned __int8 *)(v3 + 64);
      uint64_t v88 = v85;
      unint64_t v46 = v86;
      LOBYTE(v89) = *(unsigned char *)(v3 + 64);
      if (v87 == 255)
      {
        sub_253526B5C(v85, v78, v79, v80, v81, v82, v83, v84, v213, *(void *)(v3 + 48));
        unint64_t v46 = *((void *)&v229 + 1);
        uint64_t v88 = v229;
        int v89 = v230;
        *(void *)(v3 + 48) = v229;
        *(void *)(v3 + 56) = v46;
        *(unsigned char *)(v3 + 64) = v89;
        if (v89 == 255)
        {
LABEL_44:
          sub_253526A38();
          goto LABEL_45;
        }
        uint64_t v90 = sub_253526A18();
        sub_25351ECEC(v90, v91, v92);
        uint64_t v85 = v218;
      }
      *(void *)&long long v229 = v88;
      *((void *)&v229 + 1) = v46;
      unsigned __int8 v230 = v89;
      sub_253526BC8(v85, v78, v79, v80, v81, v82, v83, v84, v213, v218, v223, v224, *(_OWORD *)&v226);
      sub_25351FAD4(v93, v86, v87);
      uint64_t v94 = sub_253526A18();
      uint64_t v97 = sub_25351FAD4(v94, v95, v96);
      char v105 = sub_253526B44(v97, v98, v99, v100, v101, v102, v103, v104, v214, v219);
      sub_25351ED08(v229, *((uint64_t *)&v229 + 1), v230);
      uint64_t v106 = sub_253526A18();
      uint64_t v109 = sub_25351FAC0(v106, v107, v108);
      if (v105)
      {
        uint64_t v118 = sub_253526794(v226, v109, v110, v111, v112, v113, v114, v115, v116, v213, v218, v223, v224, v226.n128_i64[0], v226.n128_i64[1], v227, *((uint64_t *)&v227 + 1), v228.n128_i64[0], v228.n128_i64[1],
                 v117,
                 v229);
        sub_253526928(v118, v119, v120, v121, v122, v123, v124, v125, v215, v220);
        uint64_t v2 = 0;
        sub_253526C38();
        if (!v126
          || (swift_bridgeObjectRetain(),
              sub_25396E2C8(v86, v75, v224, 1u),
              char v128 = v127,
              swift_bridgeObjectRelease(),
              (v128 & 1) == 0))
        {
LABEL_40:
          sub_2535267E8();
          sub_2534C1C84(v46);
          sub_253526B94();
          sub_25346B264();
          swift_endAccess();
          swift_bridgeObjectRelease();
          sub_25346CA4C(v32);
          goto LABEL_49;
        }
LABEL_64:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_253526248();
        sub_2534D969C();
        sub_2535267BC(v212, 10);
        sub_25346CA4C(v46);
        goto LABEL_62;
      }
      goto LABEL_45;
    }
    uint64_t v48 = sub_25351ED08(v12, v13, v14);
    sub_253526928(v48, v49, v50, v51, v52, v53, v54, v55, v213, v218);
    uint64_t v2 = v1;
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v46 = v229;
    uint64_t v56 = *(void *)(v232 + 16);
    if (v56)
    {
      swift_bridgeObjectRetain();
      sub_253526968();
      char v58 = v57;
      swift_bridgeObjectRelease();
      if (v58)
      {
        swift_bridgeObjectRelease();
        sub_253526248();
        sub_2534D969C();
        sub_2535267BC(v209, 10);
        unint64_t v210 = v46;
        return sub_25346CA4C(v210);
      }
    }
    sub_2535267E8();
    sub_2534C1C84(v46);
    swift_isUniquelyReferenced_nonNull_native();
    unint64_t v59 = v232;
    uint64_t v231 = (void *)v232;
    unint64_t v232 = 0x8000000000000000;
    unint64_t v60 = sub_253526968();
    if (__OFADD__(*(void *)(v59 + 16), (v61 & 1) == 0)) {
      break;
    }
    unint64_t v62 = v60;
    char v63 = v61;
    sub_253462A5C(&qword_269CDB470);
    if (sub_253B0A190())
    {
      unint64_t v64 = sub_253526968();
      if ((v63 & 1) != (v65 & 1)) {
        goto LABEL_67;
      }
      unint64_t v62 = v64;
    }
    uint64_t v66 = v231;
    if (v63)
    {
      uint64_t v67 = v231[7];
      sub_25346CA4C(*(void *)(v67 + 8 * v62));
      *(void *)(v67 + 8 * v62) = v46;
    }
    else
    {
      v231[(v62 >> 6) + 8] |= 1 << v62;
      uint64_t v68 = v66[6] + 32 * v62;
      *(void *)(v68 + 8) = 0;
      *(void *)(v68 + 16) = 0;
      *(void *)uint64_t v68 = v56;
      *(unsigned char *)(v68 + 24) = 2;
      *(void *)(v66[7] + 8 * v62) = v46;
      uint64_t v69 = v66[2];
      BOOL v70 = __OFADD__(v69, 1);
      uint64_t v71 = v69 + 1;
      if (v70) {
        goto LABEL_66;
      }
      v66[2] = v71;
    }
    unint64_t v232 = (unint64_t)v66;
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_49:
    unint64_t v179 = sub_25346CA4C(v46);
    uint64_t v187 = *(void *)(v3 + 48);
    uint64_t v188 = *(void *)(v3 + 56);
    if (*(unsigned __int8 *)(v3 + 64) == 255)
    {
      sub_253526B5C(v179, v180, v181, v182, v183, v184, v185, v186, v213, v218);
      uint64_t v188 = *((void *)&v229 + 1);
      uint64_t v187 = v229;
      int v189 = v230;
      *(void *)(v3 + 48) = v229;
      *(void *)(v3 + 56) = v188;
      *(unsigned char *)(v3 + 64) = v189;
      if (v189 == 255)
      {
        sub_25351FAC0(v187, v188, 0xFFu);
        sub_25351FAC0(20, 0, 6u);
        goto LABEL_55;
      }
      uint64_t v190 = sub_253526A84();
      sub_25351ECEC(v190, v191, v192);
    }
    *(void *)&long long v229 = v187;
    *((void *)&v229 + 1) = v188;
    sub_2535268FC();
    uint64_t v193 = sub_253526A84();
    uint64_t v196 = sub_25351FAD4(v193, v194, v195);
    char v204 = sub_253526B44(v196, v197, v198, v199, v200, v201, v202, v203, v213, v218);
    sub_25351ED08(v229, *((uint64_t *)&v229 + 1), v230);
    uint64_t v205 = sub_253526A84();
    sub_25351FAC0(v205, v206, v207);
    if ((v204 & 1) == 0)
    {
LABEL_55:
      long long v229 = v227;
      unsigned __int8 v230 = 6;
      uint64_t v1 = 0;
      sub_2535219BC((uint64_t)&v229);
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  unint64_t result = sub_253B0A550();
  __break(1u);
  return result;
}

uint64_t sub_25352192C()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 255)
  {
    Lexer.next()((uint64_t)v5);
    uint64_t result = v5[0];
    uint64_t v3 = v5[1];
    int v1 = v6;
  }
  else
  {
    uint64_t result = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 56);
    *(void *)(v0 + 48) = 0;
    *(void *)(v0 + 56) = 0;
    *(unsigned char *)(v0 + 64) = -1;
  }
  if (v1 != 255)
  {
    if (v1 == 1) {
      return result;
    }
    sub_25351FAC0(result, v3, v1);
  }
  sub_253526248();
  sub_2534D969C();
  return sub_2535267BC(v4, 3);
}

uint64_t sub_2535219BC(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  int v7 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v8 = v6;
  uint64_t v9 = v5;
  LOBYTE(v10) = *(unsigned char *)(v1 + 64);
  if (v7 == 255)
  {
    unsigned __int8 v23 = *(unsigned char *)(a1 + 16);
    Lexer.next()((uint64_t)&v26);
    uint64_t v8 = v26;
    uint64_t v9 = v27;
    int v10 = v28;
    *(void *)(v1 + 48) = v26;
    *(void *)(v1 + 56) = v9;
    *(unsigned char *)(v1 + 64) = v10;
    if (v10 == 255)
    {
      sub_25351ECEC(v3, v2, v23);
      sub_25351FAC0(v8, v9, 0xFFu);
      sub_25351FAC0(v3, v2, v23);
      goto LABEL_7;
    }
    uint64_t v11 = sub_253526AE8();
    sub_25351ECEC(v11, v12, v13);
    unsigned __int8 v4 = v23;
  }
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  unsigned __int8 v28 = v10;
  v24[0] = v3;
  v24[1] = v2;
  unsigned __int8 v25 = v4;
  sub_25351FAD4(v6, v5, v7);
  uint64_t v14 = sub_253526AE8();
  sub_25351FAD4(v14, v15, v16);
  char v17 = static Lexer.Token.== infix(_:_:)((uint64_t)&v26, (uint64_t)v24);
  sub_25351ED08(v26, v27, v28);
  uint64_t v18 = sub_253526AE8();
  sub_25351FAC0(v18, v19, v20);
  if (v17)
  {
    sub_25351F96C((uint64_t)&v26);
    return sub_25351FAC0(v26, v27, v28);
  }
LABEL_7:
  sub_253526248();
  sub_2534D969C();
  return sub_2535267BC(v22, 1);
}

void sub_253521B14(unsigned __int8 a1@<W0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  sub_25351F998();
  sub_253520C08((uint64_t *)&v53);
  if (v3) {
    return;
  }
  unsigned __int8 v48 = a1;
  unint64_t v46 = a2;
  sub_25351F998();
  uint64_t v47 = (void *)(v2 + 48);
  unint64_t v7 = v53;
  while (2)
  {
    while (2)
    {
      uint64_t v8 = *(void *)(v4 + 48);
      uint64_t v9 = *(void *)(v4 + 56);
      int v10 = *(unsigned __int8 *)(v4 + 64);
      uint64_t v11 = v8;
      uint64_t v12 = v9;
      int v13 = v10;
      if (v10 == 255)
      {
        Lexer.next()((uint64_t)&v50);
        uint64_t v11 = v50;
        uint64_t v12 = v51;
        int v13 = v52;
        *(void *)(v4 + 48) = v50;
        *(void *)(v4 + 56) = v12;
        *(unsigned char *)(v4 + 64) = v13;
        if (v13 == 255) {
          goto LABEL_54;
        }
        sub_25351ECEC(v11, v12, v13);
      }
      if (v13 != 6 || (unint64_t)(v11 - 2) > 0x1F)
      {
LABEL_53:
        sub_25351FAD4(v8, v9, v10);
        sub_25351ED08(v11, v12, v13);
LABEL_54:
        *unint64_t v46 = v7;
        return;
      }
      switch(v11)
      {
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 33:
          if (v48 >= 5u) {
            goto LABEL_52;
          }
          goto LABEL_20;
        case 9:
        case 11:
          if (v48 >= 6u) {
            goto LABEL_52;
          }
          goto LABEL_20;
        case 13:
        case 16:
          if (v48 >= 7u) {
            goto LABEL_52;
          }
          goto LABEL_20;
        case 15:
          if (v48 >= 9u) {
            goto LABEL_53;
          }
          goto LABEL_22;
        case 18:
        case 31:
          if (v48 >= 4u) {
            goto LABEL_53;
          }
          goto LABEL_20;
        case 19:
          if (v48 >= 0xBu) {
            goto LABEL_53;
          }
LABEL_38:
          void *v47 = 0;
          v47[1] = 0;
          *(unsigned char *)(v4 + 64) = -1;
          sub_25351FAD4(v8, v9, v10);
          sub_25351FAC0(v11, v12, 6u);
          if (v7 >> 60)
          {
            unint64_t v53 = v7;
            sub_253526248();
            swift_allocError();
            unsigned char *v44 = 7;
            swift_willThrow();
            unint64_t v7 = v53;
            goto LABEL_64;
          }
          uint64_t v29 = *(void *)(v7 + 16);
          uint64_t v28 = *(void *)(v7 + 24);
          sub_2534C1C84(v7);
          uint64_t v30 = swift_bridgeObjectRetain();
          uint64_t v31 = sub_253521158(v30);
          uint64_t v32 = swift_allocObject();
          *(void *)(v32 + 16) = v29;
          *(void *)(v32 + 24) = v28;
          *(void *)(v32 + 32) = 0;
          *(void *)(v32 + 40) = 0;
          *(unsigned char *)(v32 + 48) = 0;
          *(void *)(v32 + 56) = v31;
          goto LABEL_40;
        case 20:
        case 21:
        case 22:
        case 24:
        case 26:
        case 27:
        case 28:
        case 32:
          goto LABEL_53;
        case 23:
        case 25:
          if (v48 <= 9u) {
            goto LABEL_20;
          }
LABEL_52:
          LOBYTE(v13) = 6;
          goto LABEL_53;
        case 29:
          if (v48 >= 3u) {
            goto LABEL_53;
          }
          goto LABEL_22;
        case 30:
          if (v48 >= 2u) {
            goto LABEL_53;
          }
LABEL_22:
          unint64_t v49 = v7;
          sub_25351FAD4(v8, v9, v10);
          sub_2534C1C84(v7);
          sub_253520EDC(&v49, (uint64_t *)&v50);
          sub_25346CA4C(v7);
          sub_25346CA4C(v7);
          unint64_t v7 = v50;
          continue;
        default:
          if (v48) {
            goto LABEL_53;
          }
LABEL_20:
          LOBYTE(v13) = 6;
          if ((unint64_t)(v11 - 3) > 0x1E) {
            goto LABEL_53;
          }
          break;
      }
      break;
    }
    switch(v11)
    {
      case 10:
      case 12:
      case 14:
      case 17:
      case 18:
      case 20:
      case 21:
      case 22:
      case 24:
      case 26:
      case 27:
      case 28:
      case 31:
      case 32:
        goto LABEL_53;
      case 19:
        goto LABEL_38;
      case 23:
        void *v47 = 0;
        v47[1] = 0;
        *(unsigned char *)(v4 + 64) = -1;
        sub_25351FAD4(v8, v9, v10);
        sub_25351FAC0(v11, v12, 6u);
        sub_2534C1C84(v7);
        sub_253520330(&v50, 0);
        unint64_t v45 = v50;
        uint64_t v14 = *(void *)(v4 + 48);
        uint64_t v15 = *(void *)(v4 + 56);
        int v16 = *(unsigned __int8 *)(v4 + 64);
        uint64_t v17 = v14;
        uint64_t v18 = v15;
        int v19 = v16;
        if (v16 != 255) {
          goto LABEL_26;
        }
        Lexer.next()((uint64_t)&v50);
        uint64_t v17 = v50;
        uint64_t v18 = v51;
        int v19 = v52;
        *(void *)(v4 + 48) = v50;
        *(void *)(v4 + 56) = v18;
        *(unsigned char *)(v4 + 64) = v19;
        if (v19 == 255)
        {
          sub_25351FAC0(v17, v18, 0xFFu);
          uint64_t v39 = 24;
          uint64_t v40 = 0;
          unsigned __int8 v41 = 6;
          goto LABEL_58;
        }
        sub_25351ECEC(v17, v18, v19);
LABEL_26:
        if (v19 == 6)
        {
          if (v17 ^ 0x18 | v18) {
            goto LABEL_57;
          }
          sub_25351FAD4(v14, v15, v16);
          sub_25351ED08(v17, v18, 6u);
          sub_25351ED08(24, 0, 6u);
          sub_25351FAC0(v17, v18, 6u);
          sub_25351FAC0(v17, v18, 6u);
          sub_25351FAC0(v17, v18, 6u);
          void *v47 = 0;
          v47[1] = 0;
          *(unsigned char *)(v4 + 64) = -1;
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v7;
          *(void *)(v20 + 24) = v45;
          sub_25346CA4C(v7);
          unint64_t v7 = v20 | 0x6000000000000000;
          continue;
        }
        if (((1 << v19) & 0x1D) == 0)
        {
          sub_25351ECEC(v17, v18, v19);
          swift_bridgeObjectRetain();
        }
LABEL_57:
        sub_25351FAD4(v14, v15, v16);
        sub_25351ED08(v17, v18, v19);
        sub_25351ED08(24, 0, 6u);
        sub_25351FAC0(v17, v18, v19);
        uint64_t v39 = v17;
        uint64_t v40 = v18;
        unsigned __int8 v41 = v19;
LABEL_58:
        sub_25351FAC0(v39, v40, v41);
        sub_253526248();
        swift_allocError();
        *uint64_t v42 = 1;
        swift_willThrow();
        sub_25346CA4C(v45);
LABEL_63:
        sub_25346CA4C(v7);
LABEL_64:
        sub_25346CA4C(v7);
        return;
      case 25:
        void *v47 = 0;
        v47[1] = 0;
        *(unsigned char *)(v4 + 64) = -1;
        sub_25351FAD4(v8, v9, v10);
        sub_25351FAC0(v11, v12, 6u);
        sub_2534C1C84(v7);
        Lexer.next()((uint64_t)&v50);
        uint64_t v21 = v50;
        uint64_t v22 = v51;
        if (v52 != 1)
        {
          if (v52 != 255) {
            sub_25351FAC0(v50, v51, v52);
          }
          sub_253526248();
          swift_allocError();
          *uint64_t v43 = 3;
          swift_willThrow();
          goto LABEL_63;
        }
        Lexer.next()((uint64_t)&v50);
        uint64_t v24 = v50;
        uint64_t v23 = v51;
        int v25 = v52;
        *(void *)(v4 + 48) = v50;
        *(void *)(v4 + 56) = v23;
        *(unsigned char *)(v4 + 64) = v25;
        BOOL v26 = v25 == 6 && v24 == 19;
        if (!v26 || v23)
        {
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = v7;
          *(void *)(v27 + 24) = v21;
          *(void *)(v27 + 32) = v22;
          sub_25346CA4C(v7);
          unint64_t v7 = v27 | 0x5000000000000000;
        }
        else
        {
          sub_25351FAD4(19, 0, 6u);
          sub_25351F96C((uint64_t)&v50);
          sub_25351FAC0(v50, v51, v52);
          sub_2534C1C84(v7);
          for (unint64_t i = v7; i >> 60 == 5; unint64_t i = v34)
          {
            unint64_t v34 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            uint64_t v35 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            unint64_t v50 = *(void *)((i & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            uint64_t v51 = v35;
            sub_2534C1C84(v34);
            swift_bridgeObjectRetain();
            sub_253B09860();
            sub_253B09860();
            swift_bridgeObjectRelease();
            sub_25346CA4C(i);
            uint64_t v21 = v50;
            uint64_t v22 = v51;
          }
          if (!(i >> 60))
          {
            uint64_t v36 = *(void *)(i + 24);
            unint64_t v50 = *(void *)(i + 16);
            uint64_t v51 = v36;
            swift_bridgeObjectRetain();
            sub_253B09860();
            sub_253B09860();
            swift_bridgeObjectRelease();
            uint64_t v21 = v50;
            uint64_t v22 = v51;
          }
          uint64_t v37 = swift_bridgeObjectRetain();
          uint64_t v38 = sub_253521158(v37);
          uint64_t v32 = swift_allocObject();
          *(void *)(v32 + 16) = v21;
          *(void *)(v32 + 24) = v22;
          *(void *)(v32 + 32) = 0;
          *(void *)(v32 + 40) = 0;
          *(unsigned char *)(v32 + 48) = 0;
          *(void *)(v32 + 56) = v38;
          swift_bridgeObjectRelease();
          sub_25346CA4C(i);
LABEL_40:
          sub_25346CA4C(v7);
          sub_25346CA4C(v7);
          unint64_t v7 = v32 | 0x7000000000000000;
        }
        continue;
      default:
        goto LABEL_22;
    }
  }
}

uint64_t sub_253522420(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  int v8 = *(unsigned __int8 *)(v1 + 64);
  uint64_t v9 = v6;
  uint64_t v10 = v7;
  LOBYTE(v11) = *(unsigned char *)(v1 + 64);
  uint64_t v51 = v4;
  uint64_t v52 = *(void *)a1;
  unsigned int v50 = v5;
  if (v8 != 255)
  {
LABEL_4:
    unint64_t v55 = v9;
    uint64_t v56 = v10;
    unsigned __int8 v57 = v11;
    v53[0] = v3;
    v53[1] = v4;
    unsigned __int8 v54 = v5;
    sub_25351FAD4(v6, v7, v8);
    uint64_t v15 = sub_253526ABC();
    sub_25351FAD4(v15, v16, v17);
    char v18 = static Lexer.Token.== infix(_:_:)((uint64_t)&v55, (uint64_t)v53);
    sub_25351ED08(v55, v56, v57);
    uint64_t v19 = sub_253526ABC();
    sub_25351FAC0(v19, v20, v21);
    if (v18)
    {
      sub_25351F96C((uint64_t)&v55);
      sub_25351FAC0(v55, v56, v57);
      return MEMORY[0x263F8EE78];
    }
    goto LABEL_7;
  }
  Lexer.next()((uint64_t)&v55);
  uint64_t v9 = v55;
  uint64_t v10 = v56;
  int v11 = v57;
  *(void *)(v1 + 48) = v55;
  *(void *)(v1 + 56) = v10;
  *(unsigned char *)(v1 + 64) = v11;
  if (v11 != 255)
  {
    uint64_t v12 = sub_253526ABC();
    sub_25351ECEC(v12, v13, v14);
    uint64_t v4 = v51;
    uint64_t v3 = v52;
    unsigned __int8 v5 = v50;
    goto LABEL_4;
  }
  uint64_t v7 = v50;
  sub_25351ECEC(v52, v51, v50);
  sub_25351FAC0(v9, v10, 0xFFu);
  sub_25351FAC0(v52, v51, v50);
LABEL_7:
  sub_253520330(&v55, 0);
  if (v2) {
    return v7;
  }
  unint64_t v22 = v55;
  sub_2534C1C84(v55);
  sub_253522D48(0, 1, 1, MEMORY[0x263F8EE78], &qword_269CDE640, (uint64_t)&type metadata for AST.Expr, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
  uint64_t v7 = v23;
  unint64_t v25 = *(void *)(v23 + 16);
  unint64_t v24 = *(void *)(v23 + 24);
  if (v25 >= v24 >> 1)
  {
    char v47 = sub_253526BBC(v24);
    sub_253522D48(v47, v25 + 1, 1, v7, &qword_269CDE640, (uint64_t)&type metadata for AST.Expr, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
    uint64_t v7 = v48;
  }
  *(void *)(v7 + 16) = v25 + 1;
  unint64_t v49 = v22;
  *(void *)(v7 + 8 * v25 + 32) = v22;
  while (1)
  {
    uint64_t v26 = *(void *)(v1 + 48);
    uint64_t v27 = *(void *)(v1 + 56);
    int v28 = *(unsigned __int8 *)(v1 + 64);
    uint64_t v29 = v26;
    uint64_t v30 = v27;
    int v31 = v28;
    if (v28 != 255) {
      goto LABEL_14;
    }
    Lexer.next()((uint64_t)&v55);
    uint64_t v29 = v55;
    uint64_t v30 = v56;
    int v31 = v57;
    *(void *)(v1 + 48) = v55;
    *(void *)(v1 + 56) = v30;
    *(unsigned char *)(v1 + 64) = v31;
    if (v31 == 255) {
      break;
    }
    sub_25351ECEC(v29, v30, v31);
LABEL_14:
    if (v31 != 6)
    {
      if (((1 << v31) & 0x1D) == 0)
      {
        sub_25351ECEC(v29, v30, v31);
        swift_bridgeObjectRetain();
      }
LABEL_21:
      sub_25351FAD4(v26, v27, v28);
      uint64_t v37 = sub_253526A94();
      sub_25351ED08(v37, v38, v39);
      sub_25351ED08(26, 0, 6u);
      uint64_t v40 = sub_253526A94();
      sub_25351FAC0(v40, v41, v42);
      uint64_t v43 = sub_253526A94();
      goto LABEL_22;
    }
    if (v29 ^ 0x1A | v30) {
      goto LABEL_21;
    }
    sub_25351FAD4(v26, v27, v28);
    sub_25351ED08(v29, v30, 6u);
    sub_25351ED08(26, 0, 6u);
    sub_25351FAC0(v29, v30, 6u);
    sub_25351FAC0(v29, v30, 6u);
    sub_25351FAC0(v29, v30, 6u);
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
    *(unsigned char *)(v1 + 64) = -1;
    sub_253520330(&v55, 0);
    unint64_t v32 = v55;
    sub_2534C1C84(v55);
    unint64_t v34 = *(void *)(v7 + 16);
    unint64_t v33 = *(void *)(v7 + 24);
    if (v34 >= v33 >> 1)
    {
      char v35 = sub_253526BBC(v33);
      sub_253522D48(v35, v34 + 1, 1, v7, &qword_269CDE640, (uint64_t)&type metadata for AST.Expr, (void (*)(void, uint64_t, void *, uint64_t, uint64_t))sub_2535242E8, (void (*)(uint64_t, uint64_t, void *))sub_253525554);
      uint64_t v7 = v36;
    }
    *(void *)(v7 + 16) = v34 + 1;
    *(void *)(v7 + 8 * v34 + 32) = v32;
    sub_25346CA4C(v32);
  }
  sub_25351FAC0(v29, v30, 0xFFu);
  uint64_t v43 = 26;
  uint64_t v44 = 0;
  unsigned __int8 v45 = 6;
LABEL_22:
  sub_25351FAC0(v43, v44, v45);
  unint64_t v55 = v52;
  uint64_t v56 = v51;
  unsigned __int8 v57 = v50;
  sub_2535219BC((uint64_t)&v55);
  sub_25346CA4C(v49);
  return v7;
}

void sub_2535228AC()
{
}

void sub_2535228E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253522928()
{
}

void sub_25352295C()
{
}

void sub_253522990(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_2535229D8(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void))
{
  if (a3)
  {
    sub_253526744();
    if (v12 != v13)
    {
      sub_25352676C();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    unsigned __int8 v21 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  sub_253462A5C(a5);
  uint64_t v16 = a6(0);
  sub_25346CB34(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unsigned __int8 v21 = (void *)swift_allocObject();
  size_t v22 = j__malloc_size(v21);
  if (!v18 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v18 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    sub_2535266C8();
    sub_253B0A1C0();
    __break(1u);
    return;
  }
  v21[2] = v14;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v18);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  if (a1)
  {
    sub_253525C38(a4 + v25, v14);
    sub_253526754();
  }
  else
  {
    sub_253524C68(0, v14, (unint64_t)v21 + v25, a4, a7);
  }
  sub_2535268E0();
}

uint64_t sub_253522BC0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_25352315C(a1, a2, a3, a4, &qword_269CDB510, (uint64_t *)&unk_269CDB490);
}

void sub_253522BD4()
{
}

void sub_253522C08()
{
}

void sub_253522C14()
{
}

void sub_253522C48()
{
}

void sub_253522C7C()
{
  sub_253526808();
  if (v5)
  {
    sub_253526744();
    if (v6 != v7)
    {
      sub_25352676C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v4)
  {
    sub_253462A5C(v8);
    uint64_t v9 = (void *)swift_allocObject();
    sub_253526BDC(v9);
    v9[2] = v3;
    v9[3] = 2 * (v10 / 24);
  }
  if (v2)
  {
    uint64_t v11 = sub_253526B74();
    v1(v11);
    sub_253526754();
  }
  else
  {
    uint64_t v12 = sub_253526988();
    v0(v12);
  }
}

void sub_253522D48(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t a6, void (*a7)(void, uint64_t, void *, uint64_t, uint64_t), void (*a8)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_253526744();
    if (v14 != v15)
    {
      sub_25352676C();
      if (v14)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (v17)
  {
    sub_253462A5C(a5);
    uint64_t v18 = (void *)sub_25351C914();
    sub_253526BDC(v18);
    void v18[2] = v16;
    v18[3] = 2 * (v19 / 8);
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v20 = v18 + 4;
  if (a1)
  {
    a8(a4 + 32, v16, v20);
    sub_253526754();
  }
  else
  {
    a7(0, v16, v20, a4, a6);
  }
}

void sub_253522E34(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253522E7C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253522EC4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253522F0C()
{
  sub_253526B10();
  if (v3)
  {
    sub_253526744();
    if (v4 != v5)
    {
      sub_25352676C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_25352681C();
  if (v2)
  {
    sub_253462A5C(v6);
    char v7 = (void *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    uint64_t v7[2] = v1;
    v7[3] = 2 * v8 - 64;
  }
  if (v0)
  {
    uint64_t v9 = (char *)sub_253526A0C();
    sub_2535255F8(v9, v10, v11);
    sub_253526754();
  }
  else
  {
    uint64_t v12 = sub_253526888();
    sub_2535243AC(v12, v13, v14, v15);
  }
}

void sub_253522FB8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523000(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523048()
{
  sub_253526B10();
  if (v2)
  {
    sub_253526744();
    if (v3 != v4)
    {
      sub_25352676C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_25352681C();
  if (v1)
  {
    sub_253462A5C(&qword_269CDE590);
    char v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_253526BA8(v6);
  }
  if (v0)
  {
    char v7 = (char *)sub_253526A0C();
    sub_253525680(v7, v8, v9);
    sub_253526754();
  }
  else
  {
    uint64_t v10 = sub_253526888();
    sub_25352446C(v10, v11, v12, v13);
  }
}

void sub_253523100(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_253523148(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_25352315C(a1, a2, a3, a4, &qword_269CDE5B8, &qword_269CDB608);
}

uint64_t sub_25352315C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    sub_253526744();
    if (v10 != v11)
    {
      sub_25352676C();
      if (v10)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  sub_253462A5C(a5);
  uint64_t v14 = sub_253462A5C(a6);
  sub_25346CB34(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = j__malloc_size(v19);
  if (!v16 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v16 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_23:
    sub_2535266C8();
    uint64_t result = sub_253B0A1C0();
    __break(1u);
    return result;
  }
  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(void *)(sub_253462A5C(a6) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  if (a1)
  {
    sub_253525D38(a4 + v23, v12);
    sub_253526754();
  }
  else
  {
    sub_253524D64(0, v12, (unint64_t)v19 + v23, a4, a6);
  }
  return (uint64_t)v19;
}

void sub_253523338(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523380()
{
}

void sub_2535233B4()
{
}

void sub_2535233E8()
{
  sub_253526808();
  if (v4)
  {
    sub_253526744();
    if (v5 != v6)
    {
      sub_25352676C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v3)
  {
    sub_253462A5C(v7);
    uint64_t v8 = (const void *)sub_25351C914();
    sub_253526BDC(v8);
    sub_2535269FC(v9);
  }
  if (v2)
  {
    uint64_t v10 = sub_253526B74();
    v1(v10);
    sub_253526754();
  }
  else
  {
    uint64_t v11 = sub_253526988();
    v0(v11);
  }
}

void sub_25352349C()
{
  sub_253526B10();
  if (v3)
  {
    sub_253526744();
    if (v4 != v5)
    {
      sub_25352676C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_25352681C();
  if (v2)
  {
    sub_253462A5C(&qword_269CDE5C0);
    char v6 = (void *)swift_allocObject();
    sub_253526BDC(v6);
    v6[2] = v1;
    v6[3] = 2 * (v7 / 64);
  }
  if (v0)
  {
    uint64_t v8 = (char *)sub_253526A0C();
    sub_253525708(v8, v9, v10);
    sub_253526754();
  }
  else
  {
    uint64_t v11 = sub_253526888();
    sub_25352479C(v11, v12, v13, v14);
  }
}

void sub_253523554(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523590()
{
}

void sub_2535235C4()
{
  sub_253526808();
  if (v4)
  {
    sub_253526744();
    if (v5 != v6)
    {
      sub_25352676C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v3)
  {
    sub_253462A5C(v7);
    uint64_t v8 = (const void *)sub_25351C914();
    sub_253526BDC(v8);
    sub_2535269FC(v9);
  }
  if (v2)
  {
    uint64_t v10 = sub_253526B74();
    v1(v10);
    sub_253526754();
  }
  else
  {
    uint64_t v11 = sub_253526988();
    v0(v11);
  }
}

void sub_253523678()
{
  sub_253526B10();
  if (v3)
  {
    sub_253526744();
    if (v4 != v5)
    {
      sub_25352676C();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_25352681C();
  if (v2)
  {
    sub_253462A5C(&qword_269CDE5B0);
    char v6 = (void *)sub_25351C914();
    sub_253526BDC(v6);
    v6[2] = v1;
    v6[3] = 2 * (v7 / 4);
  }
  if (v0)
  {
    uint64_t v8 = (char *)sub_253526A0C();
    sub_253525BC4(v8, v9, v10);
    sub_253526754();
  }
  else
  {
    uint64_t v11 = sub_253526888();
    sub_253524894(v11, v12, v13, v14);
  }
}

void sub_253523728()
{
  sub_253526B10();
  if (v2)
  {
    sub_253526744();
    if (v3 != v4)
    {
      sub_25352676C();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_25352681C();
  if (v1)
  {
    sub_253462A5C(&qword_269CDE5F0);
    char v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_253526BA8(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_253526A0C();
    sub_2535257FC(v7, v8, v9);
    sub_253526754();
  }
  else
  {
    uint64_t v10 = sub_253526888();
    sub_253524988(v10, v11, v12, v13);
  }
}

void sub_2535237E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_25352381C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523864()
{
}

void sub_253523898(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_2535238E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_25352315C(a1, a2, a3, a4, &qword_269CDE558, &qword_269CDE560);
}

void sub_2535238F4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_25352393C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523984(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_2535239CC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523A14(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_253523A5C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_25352315C(a1, a2, a3, a4, &qword_269CDE528, &qword_269CDE520);
}

void sub_253523A70(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523AB8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523B00(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_253523B48(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_25352315C(a1, a2, a3, a4, &qword_269CDE4E8, &qword_269CDE4F0);
}

void sub_253523B5C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_253523BA4()
{
}

void sub_253523BD8()
{
  sub_253526808();
  if (v4)
  {
    sub_253526744();
    if (v5 != v6)
    {
      sub_25352676C();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v3)
  {
    sub_253462A5C(v7);
    uint64_t v8 = (const void *)sub_25351C914();
    sub_253526BDC(v8);
    sub_2535269FC(v9);
  }
  if (v2)
  {
    uint64_t v10 = sub_253526B74();
    v1(v10);
    sub_253526754();
  }
  else
  {
    uint64_t v11 = sub_253526988();
    v0(v11);
  }
}

uint64_t sub_253523C8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253523D84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE650);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253523E9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE4D0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

char *sub_253523FBC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    unint64_t v6 = &__dst[2 * v4];
    if (v5 >= v6 || &v5[2 * v4] <= __dst)
    {
      memcpy(__dst, v5, 2 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_2535240B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE610);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_2535241C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE620);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_2535242E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_2535266C8();
    sub_253526854();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 8 * a1 + 32;
  unint64_t v6 = a3 + 8 * v4;
  if (v5 >= v6 || v5 + 8 * v4 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_2535266C8();
  sub_253526844();
LABEL_11:
  uint64_t result = sub_25352671C();
  __break(1u);
  return result;
}

char *sub_2535243AC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    sub_2535266C8();
    sub_253526854();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + a1 + 32);
  unint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_2535266C8();
  sub_253526844();
LABEL_11:
  uint64_t result = (char *)sub_25352671C();
  __break(1u);
  return result;
}

uint64_t sub_25352446C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE598);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_25352458C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253524684(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_253462A5C(&qword_269CDE578);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_25352479C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

char *sub_253524894(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253524988(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253524A8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_2535266C8();
    sub_253526854();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v5;
  if (v6 >= v7 || v6 + 8 * v5 <= a3)
  {
    sub_253462A5C(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_2535266C8();
  sub_253526844();
LABEL_11:
  uint64_t result = sub_25352671C();
  __break(1u);
  return result;
}

uint64_t sub_253524B70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

uint64_t sub_253524C68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_2535266C8();
    sub_253526854();
    goto LABEL_11;
  }
  a5(0);
  sub_253526778();
  sub_2535269E4();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  sub_2535266C8();
  sub_253526844();
LABEL_11:
  uint64_t result = sub_25352671C();
  __break(1u);
  return result;
}

uint64_t sub_253524D64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_2535266C8();
    sub_253526854();
    goto LABEL_11;
  }
  sub_253462A5C(a5);
  sub_253526778();
  sub_2535269E4();
  if (v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 > a3;
  }
  if (!v9)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return a1;
  }
  sub_2535266C8();
  sub_253526844();
LABEL_11:
  uint64_t result = sub_25352671C();
  __break(1u);
  return result;
}

uint64_t sub_253524E5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = sub_253B0A260();
  __break(1u);
  return result;
}

char *sub_253524F54(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

uint64_t sub_253524FB0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

char *sub_253524FC8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

char *sub_253525024(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_253B0A260();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

uint64_t sub_2535250C0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535250D8(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

char *sub_2535250E4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_253B0A260();
    __break(1u);
  }
  else if (__dst != __src || &__src[2 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 2 * a2);
  }
  return __src;
}

uint64_t sub_253525178(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525194(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535251AC(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535251C4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535251DC(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535251F4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352520C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525224(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352523C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525254(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352526C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525284(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352529C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535252B4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535252CC(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535252E4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535252FC(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525314(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352532C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525344(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352535C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525374(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352538C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535253A4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535253BC(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535253D8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535253F0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525408(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525420(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525438(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525450(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525468(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525480(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525498(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535254B0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535254C8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

char *sub_2535254E0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

uint64_t sub_253525548(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

char *sub_253525554(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

uint64_t sub_2535255B0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535255C8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535255E0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

char *sub_2535255F8(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    sub_2535266C8();
    __src = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_253525668(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

char *sub_253525680(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

uint64_t sub_2535256E4(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

uint64_t sub_2535256F0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

char *sub_253525708(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_253B0A260();
    __break(1u);
  }
  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }
  return __src;
}

char *sub_25352579C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[2 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

char *sub_2535257FC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

char *sub_253525860(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_253B0A260();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t sub_2535258F4(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_25352590C(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525924(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

uint64_t sub_253525930(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525948(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525960(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525978(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525990(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535259A8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535259C0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535259D8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_2535259F0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A08(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A20(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A38(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A50(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A68(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A80(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525A98(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525AB0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525AC8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525AE0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525AF8(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B10(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B28(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B40(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B58(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B70(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525B88(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525BA0(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525BB8(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

char *sub_253525BC4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = (char *)sub_2535266F8();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)sub_2535266DC(a3, result);
  }
  return result;
}

uint64_t sub_253525C20(uint64_t a1, uint64_t a2)
{
  return sub_253525C38(a1, a2);
}

uint64_t sub_253525C38(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_2535266F8();
    __break(1u);
  }
  else
  {
    sub_253526AF8();
    if (v6
      && (uint64_t result = ((uint64_t (*)(void))v5)(0), v3 + *(void *)(*(void *)(result - 8) + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_2535267D4();
        return swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      v5(0);
      sub_2535267D4();
      return swift_arrayInitWithTakeFrontToBack();
    }
  }
  return result;
}

uint64_t sub_253525D2C(uint64_t a1, uint64_t a2)
{
  return sub_253525D38(a1, a2);
}

uint64_t sub_253525D38(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_2535266F8();
    __break(1u);
  }
  else
  {
    sub_253526AF8();
    if (v6 && (uint64_t result = sub_253462A5C(v5), v3 + *(void *)(*(void *)(result - 8) + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_2535267D4();
        return swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      sub_253462A5C(v5);
      sub_2535267D4();
      return swift_arrayInitWithTakeFrontToBack();
    }
  }
  return result;
}

uint64_t destroy for Parser(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return sub_25351ED08(v4, v5, v3);
  }
  return result;
}

uint64_t initializeWithCopy for Parser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    sub_25351ECEC(v7, v8, v6);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = v6;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for Parser(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 48);
  uint64_t v5 = (long long *)(a2 + 48);
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 48);
      uint64_t v13 = *(void *)(a2 + 56);
      sub_25351ECEC(v12, v13, *(unsigned char *)(a2 + 64));
      *(void *)(a1 + 48) = v12;
      *(void *)(a1 + 56) = v13;
      *(unsigned char *)(a1 + 64) = v6;
    }
  }
  else if (v6 == 255)
  {
    sub_253526058(a1 + 48);
    char v14 = *(unsigned char *)(a2 + 64);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 64) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    sub_25351ECEC(v7, v8, *(unsigned char *)(a2 + 64));
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v6;
    sub_25351ED08(v9, v10, v11);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t sub_253526058(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for Parser(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for Parser(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  int v6 = (_OWORD *)(a2 + 48);
  int v7 = *(unsigned __int8 *)(a1 + 64);
  if (v7 == 255) {
    goto LABEL_5;
  }
  int v8 = *(unsigned __int8 *)(a2 + 64);
  if (v8 == 255)
  {
    sub_253526058(a1 + 48);
LABEL_5:
    *(_OWORD *)(a1 + 48) = *v6;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *v6;
  *(unsigned char *)(a1 + 64) = v8;
  sub_25351ED08(v9, v10, v7);
LABEL_6:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Parser(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Parser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Parser()
{
  return &type metadata for Parser;
}

uint64_t sub_253526208()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_253526A74();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

unint64_t sub_253526248()
{
  unint64_t result = qword_269CDE630;
  if (!qword_269CDE630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE630);
  }
  return result;
}

uint64_t sub_253526294()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  sub_25346CA4C(*(void *)(v0 + 24));
  uint64_t v1 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t sub_2535262CC()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_253526A74();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t sub_253526304()
{
  sub_2534C5224(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_25352634C()
{
  unint64_t result = qword_269CDE638;
  if (!qword_269CDE638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE638);
  }
  return result;
}

uint64_t sub_253526398()
{
  sub_25346CA4C(*(void *)(v0 + 24));
  sub_25346CA4C(*(void *)(v0 + 32));
  uint64_t v1 = sub_253526A74();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t sub_2535263D0()
{
  sub_25346CA4C(*(void *)(v0 + 24));
  uint64_t v1 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t sub_253526400()
{
  sub_2534D23E4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t sub_25352643C()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

uint64_t sub_25352646C()
{
  swift_bridgeObjectRelease();
  sub_25346CA4C(*(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2535264B4()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t getEnumTagSinglePayload for Parser.ParseError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Parser.ParseError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253526640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Parser.ParseError()
{
  return &type metadata for Parser.ParseError;
}

unint64_t sub_25352667C()
{
  unint64_t result = qword_269CDE658;
  if (!qword_269CDE658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE658);
  }
  return result;
}

void *sub_2535266DC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_2535266F8()
{
  return sub_253B0A260();
}

uint64_t sub_25352671C()
{
  return sub_253B0A260();
}

uint64_t sub_253526754()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_253526794(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __n128 a20,char a21)
{
  a20 = a1;
  a21 = 6;
  return sub_2535219BC((uint64_t)&a20);
}

uint64_t sub_2535267BC@<X0>(unsigned char *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_2535267D4()
{
  return v0;
}

uint64_t sub_2535267E8()
{
  return swift_beginAccess();
}

void sub_25352682C()
{
  uint64_t v1 = *(void *)(v0 - 176);
  char v2 = *(unsigned char *)(v0 - 168);
  *(void *)(v0 - 112) = *(void *)(v0 - 184);
  *(void *)(v0 - 104) = v1;
  *(unsigned char *)(v0 - 96) = v2;
}

uint64_t sub_253526864(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __n128 a10, char a11)
{
  a10 = a1;
  a11 = 6;
  return sub_2535219BC((uint64_t)&a10);
}

uint64_t sub_253526888()
{
  return 0;
}

uint64_t sub_2535268A4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(unsigned char *)(v9 - 96) = v4;
  sub_25351FAD4(v5, v6, a3);
  return sub_25351FAC0(v8, v7, 6u);
}

uint64_t sub_2535268FC()
{
  return sub_25351FAD4(v0, v1, v2);
}

void *sub_253526928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  return sub_253520330((uint64_t *)va, 0);
}

uint64_t sub_253526958()
{
  return v0;
}

unint64_t sub_253526968()
{
  return sub_25396E2C8(v0, 0, 0, 2u);
}

uint64_t sub_253526988()
{
  return 0;
}

uint64_t sub_253526998()
{
  return Lexer.next()(v0 - 184);
}

uint64_t sub_2535269CC()
{
  return swift_allocObject();
}

void sub_2535269FC(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_253526A0C()
{
  return v0 + 32;
}

uint64_t sub_253526A18()
{
  return v0;
}

uint64_t sub_253526A28()
{
  return v0;
}

uint64_t sub_253526A38()
{
  sub_25351FAC0(v0, v1, 0xFFu);
  return sub_25351FAC0(2, 0, 6u);
}

uint64_t sub_253526A74()
{
  return v0;
}

uint64_t sub_253526A84()
{
  return v0;
}

uint64_t sub_253526A94()
{
  return v0;
}

uint64_t sub_253526AA4()
{
  return swift_allocObject();
}

uint64_t sub_253526ABC()
{
  return v0;
}

uint64_t sub_253526ACC()
{
  return sub_25351FAC0(v1, v0, 6u);
}

uint64_t sub_253526AE8()
{
  return v0;
}

void *sub_253526B28(uint64_t a1, ...)
{
  va_start(va, a1);
  return sub_253520330((uint64_t *)va, 8);
}

uint64_t sub_253526B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  return static Lexer.Token.== infix(_:_:)((uint64_t)va, (uint64_t)va1);
}

uint64_t sub_253526B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  return Lexer.next()((uint64_t)va);
}

uint64_t sub_253526B74()
{
  return v0 + 32;
}

uint64_t sub_253526B80()
{
  return v0;
}

uint64_t sub_253526B94()
{
  return v0;
}

uint64_t sub_253526BA8(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

BOOL sub_253526BBC@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

__n128 sub_253526BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  return (__n128)a13;
}

size_t sub_253526BDC(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_253526BF4()
{
  return swift_allocObject();
}

uint64_t sub_253526C0C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_25351ED08(a1, a2, a3);
  sub_25351ED08(24, 0, 6u);
  return v3;
}

uint64_t sub_253526C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  a13 = 6;
  return sub_2535219BC((uint64_t)&a11);
}

uint64_t sub_253526C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return Lexer.next()((uint64_t)va);
}

uint64_t ParticipantID.name.getter(uint64_t a1)
{
  return a1;
}

uint64_t ParticipantID.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ParticipantID.name.modify())()
{
  return nullsub_1;
}

uint64_t sub_253526D10@<X0>(Swift::String *a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  IntelligenceFlowPlannerSupport::ParticipantID v4 = ParticipantID.init(rawValue:)(*a1);
  uint64_t result = v4.name._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t sub_253526D44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ParticipantID.description.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_253526D70()
{
  return sub_25397F8BC();
}

uint64_t sub_253526D78()
{
  return sub_2539805E8();
}

uint64_t sub_253526D80()
{
  return sub_253980BD8();
}

uint64_t sub_253526D88(uint64_t *a1, uint64_t *a2)
{
  return sub_25357B6D0(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_253526D9C()
{
  return sub_253B09A10();
}

uint64_t sub_253526DFC()
{
  return sub_253B099E0();
}

uint64_t static ParticipantID.coordinator.getter()
{
  return 0x616E6964726F6F63;
}

uint64_t static ParticipantID.client.getter()
{
  return 0x746E65696C63;
}

uint64_t static ParticipantID.executor.getter()
{
  return 0x726F747563657865;
}

uint64_t static ParticipantID.planner.getter()
{
  return 0x72656E6E616C70;
}

uint64_t static ParticipantID.queryDecoration.getter()
{
  return 0x6365447972657571;
}

void static ParticipantID.planGeneration.getter()
{
}

void static ParticipantID.planResolution.getter()
{
}

unint64_t static ParticipantID.responseGeneration.getter()
{
  return 0xD000000000000012;
}

uint64_t static ParticipantID.context.getter()
{
  return 0x747865746E6F63;
}

uint64_t static ParticipantID.actionObserver.getter()
{
  return 0x624F6E6F69746361;
}

uint64_t static ParticipantID.testOnly.getter()
{
  return 0x796C6E4F74736574;
}

uint64_t sub_253526F78@<X0>(Swift::String *a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  IntelligenceFlowPlannerSupport::ParticipantID v4 = ParticipantID.init(stringLiteral:)(*a1);
  uint64_t result = v4.name._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t ParticipantID.description.getter(uint64_t a1)
{
  return a1;
}

unint64_t sub_253526FE0()
{
  unint64_t result = qword_26B248FE8;
  if (!qword_26B248FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248FE8);
  }
  return result;
}

unint64_t sub_253527030()
{
  unint64_t result = qword_269CDE660;
  if (!qword_269CDE660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE660);
  }
  return result;
}

uint64_t sub_25352707C()
{
  return MEMORY[0x263F8D388];
}

unint64_t sub_25352708C()
{
  unint64_t result = qword_269CDE668;
  if (!qword_269CDE668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE668);
  }
  return result;
}

uint64_t sub_2535270D8()
{
  return MEMORY[0x263F8D398];
}

uint64_t sub_2535270E4()
{
  return MEMORY[0x263F8D390];
}

unint64_t sub_2535270F4()
{
  unint64_t result = qword_269CDE670;
  if (!qword_269CDE670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE670);
  }
  return result;
}

uint64_t sub_253527140@<X0>(uint64_t a1@<X0>, IntelligenceFlowPlannerSupport::ParticipantID *a2@<X8>)
{
  IntelligenceFlowPlannerSupport::ParticipantID v5 = ParticipantID.init(rawValue:)(*(Swift::String *)&a1);
  uint64_t result = v5.name._countAndFlagsBits;
  *a2 = v5;
  return result;
}

uint64_t sub_253527168()
{
  return ParticipantID.description.getter(*v0);
}

ValueMetadata *type metadata accessor for ParticipantID()
{
  return &type metadata for ParticipantID;
}

unint64_t sub_253527180()
{
  unint64_t result = qword_26B248FF0;
  if (!qword_26B248FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248FF0);
  }
  return result;
}

__n128 Session.SessionIdentityToken.untrustedAuditToken.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t Session.SessionIdentityToken.identityToken.getter()
{
  return swift_retain();
}

double Session.SessionIdentityToken.init(untrustedAuditToken:identityToken:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_25352724C(a1, (uint64_t)v8);
  char v5 = v9;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 32) = v5;
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t sub_25352724C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B248D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwxx()
{
  return swift_release();
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwcp(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwca(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwta(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s14descr27033EE49O20SessionIdentityTokenVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.SessionIdentityToken()
{
  return &type metadata for Session.SessionIdentityToken;
}

uint64_t static SessionInjectionContext<>.inherited.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B249170 != -1) {
    swift_once();
  }
  sub_253B0A710();
  if (__src[3] == 1)
  {
    *(void *)__dst = 0;
    __dst[8] = 1;
    memset(&__dst[16], 0, 72);
    sub_253529654((uint64_t)__src, &qword_269CDBE98);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
  }
  sub_2535295EC((uint64_t)&__dst[48], (uint64_t)__src);
  sub_2534B447C((uint64_t)__dst);
  sub_2535295EC((uint64_t)__src, (uint64_t)&v4);
  if (v5)
  {
    *(void *)(a1 + 24) = &type metadata for AnySessionInjectionContext;
    *(void *)(a1 + 32) = &protocol witness table for AnySessionInjectionContext;
    uint64_t v2 = swift_allocObject();
    *(void *)a1 = v2;
    sub_253476C2C(&v4, v2 + 16);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return sub_253529654((uint64_t)__src, &qword_26B2493E8);
}

uint64_t static SessionInjection.request<A, B>(id:instanceId:_:_:injectionContext:with:isolatedTo:expecting:)()
{
  sub_253529DB8();
  *(void *)(v0 + 264) = v25;
  *(_OWORD *)(v0 + 248) = v24;
  *(_OWORD *)(v0 + 232) = v23;
  *(void *)(v0 + 216) = v21;
  *(void *)(v0 + 224) = v22;
  *(void *)(v0 + 200) = v19;
  *(void *)(v0 + 208) = v20;
  *(void *)(v0 + 184) = v17;
  *(void *)(v0 + 192) = v18;
  *(void *)(v0 + 168) = v1;
  *(void *)(v0 + 176) = v2;
  *(void *)(v0 + 152) = v3;
  *(void *)(v0 + 160) = v4;
  *(void *)(v0 + 136) = v5;
  *(void *)(v0 + 144) = v6;
  *(void *)(v0 + 120) = v7;
  *(void *)(v0 + 128) = v8;
  uint64_t v9 = sub_253B089F0();
  *(void *)(v0 + 272) = v9;
  sub_25346CB34(v9);
  *(void *)(v0 + 280) = v10;
  *(void *)(v0 + 288) = sub_253472828();
  uint64_t v11 = sub_253B09E00();
  *(void *)(v0 + 296) = v11;
  sub_25346CB34(v11);
  *(void *)(v0 + 304) = v12;
  *(void *)(v0 + 312) = sub_253472828();
  if (v19)
  {
    swift_getObjectType();
    sub_253B09BA0();
    sub_253529E4C();
  }
  else
  {
    sub_253529E34();
  }
  *(void *)(v0 + 320) = v14;
  *(void *)(v0 + 328) = v13;
  return MEMORY[0x270FA2498](sub_2535276BC, v14, v13);
}

uint64_t sub_2535276BC()
{
  sub_2535295EC(v0[23], (uint64_t)(v0 + 7));
  if (v0[10])
  {
    uint64_t v8 = (void *)(sub_253529D80() + 8);
    uint64_t v7 = *v8 + *(int *)*v8;
    swift_task_alloc();
    sub_253529E40();
    v0[42] = v1;
    *uint64_t v1 = v2;
    v1[1] = sub_25352787C;
    __asm { BRAA            X9, X16 }
  }
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[15];
  sub_253529654((uint64_t)(v0 + 7), &qword_26B2493E8);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v4, 1, 1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v5();
}

uint64_t sub_25352787C()
{
  sub_253477168();
  sub_253529D50();
  uint64_t v2 = *v1;
  sub_253477158();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_253529E14();
  uint64_t v5 = *(void *)(v4 + 328);
  uint64_t v6 = *(void *)(v0 + 320);
  return MEMORY[0x270FA2498](sub_253527968, v6, v5);
}

uint64_t sub_253527968()
{
  uint64_t v19 = v0;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0[39], 1, v0[28]) == 1)
  {
    sub_253B083A0();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v1 = sub_253B089D0();
    os_log_type_t v2 = sub_253B09D70();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v5 = v0[35];
    uint64_t v4 = v0[36];
    uint64_t v6 = v0[34];
    if (v3)
    {
      unint64_t v7 = v0[21];
      uint64_t v16 = v0[22];
      uint64_t v15 = v0[20];
      uint64_t v9 = v0[16];
      unint64_t v8 = v0[17];
      uint64_t v17 = v0[34];
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v18 = v11;
      *(_DWORD *)uint64_t v10 = 136315650;
      swift_bridgeObjectRetain();
      v0[12] = sub_253464DF8(v9, v8, &v18);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[13] = sub_253464DF8(v15, v7, &v18);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 22) = 2048;
      v0[14] = v16;
      sub_253B09E80();
      _os_log_impl(&dword_253460000, v1, v2, "Injection value was not provided for InjectionPoint %s @ %s:%ld", (uint8_t *)v10, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v11, -1, -1);
      MEMORY[0x25A269E60](v10, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v17);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    }
  }
  sub_25347FA84();
  v12();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v13();
}

uint64_t static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  sub_253477168();
  *(void *)(v13 + 200) = a13;
  *(_OWORD *)(v13 + 184) = a12;
  *(void *)(v13 + 168) = a10;
  *(void *)(v13 + 176) = a11;
  *(void *)(v13 + 152) = v14;
  *(void *)(v13 + 160) = a9;
  *(void *)(v13 + 136) = v15;
  *(void *)(v13 + 144) = v16;
  *(void *)(v13 + 120) = v17;
  *(void *)(v13 + 128) = v18;
  *(void *)(v13 + 104) = v19;
  *(void *)(v13 + 112) = v20;
  *(void *)(v13 + 96) = v21;
  if (a10)
  {
    swift_getObjectType();
    sub_253B09BA0();
    sub_253529E4C();
  }
  else
  {
    sub_253529E34();
  }
  *(void *)(v13 + 208) = v23;
  *(void *)(v13 + 216) = v22;
  return sub_253529E20();
}

uint64_t sub_253527CD0()
{
  sub_2535295EC(v0[19], (uint64_t)(v0 + 7));
  if (v0[10])
  {
    uint64_t v5 = (void *)(sub_253529D80() + 16);
    uint64_t v4 = *v5 + *(int *)*v5;
    uint64_t v1 = (void *)swift_task_alloc();
    v0[28] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_253527E50;
    __asm { BRAA            X9, X16 }
  }
  sub_253529654((uint64_t)(v0 + 7), &qword_26B2493E8);
  sub_2534771C0();
  return v2();
}

uint64_t sub_253527E50()
{
  sub_253477168();
  sub_253529D50();
  uint64_t v2 = *v1;
  sub_253477158();
  *BOOL v3 = v2;
  swift_task_dealloc();
  sub_253529E14();
  uint64_t v5 = *(void *)(v4 + 216);
  uint64_t v6 = *(void *)(v0 + 208);
  return MEMORY[0x270FA2498](sub_253527F3C, v6, v5);
}

uint64_t sub_253527F3C()
{
  sub_253477168();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  sub_2534771C0();
  return v1();
}

uint64_t _s30IntelligenceFlowPlannerSupport16SessionInjectionO7perform2id10instanceId__16injectionContext4with10isolatedTo_xSS_SSSgSSSiAA0efL0_pSgq_ScA_pSgYixq_q0_YKXEtYaq0_YKSeRzSERzSeR_SER_s5ErrorR0_r1_lFZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  v23[16] = a19;
  v23[17] = a23;
  v23[14] = a17;
  v23[15] = a18;
  v23[12] = a14;
  v23[13] = a15;
  v23[10] = a12;
  v23[11] = a13;
  v23[8] = a10;
  v23[9] = a11;
  v23[6] = a5;
  v23[7] = a9;
  v23[4] = a3;
  v23[5] = a4;
  v23[2] = a1;
  v23[3] = a2;
  sub_253529D68();
  v23[18] = v24;
  v23[19] = sub_253472828();
  sub_2534727C4();
  v23[20] = v25;
  v23[21] = sub_253472828();
  uint64_t v26 = sub_253B09E00();
  v23[22] = v26;
  sub_25346CB34(v26);
  v23[23] = v27;
  v23[24] = sub_253472828();
  int v28 = (void *)swift_task_alloc();
  v23[25] = v28;
  *int v28 = v23;
  v28[1] = sub_25352816C;
  return sub_253529E58();
}

uint64_t sub_25352816C()
{
  sub_253529DB8();
  sub_253477088();
  uint64_t v2 = v1;
  sub_2534771FC();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *v0;
  sub_253477158();
  *unint64_t v7 = v6;
  swift_task_dealloc();
  if (v5)
  {
    swift_getObjectType();
    sub_253B09BA0();
    sub_253529E4C();
  }
  else
  {
    sub_253529E34();
  }
  *(void *)(v2 + 208) = v9;
  *(void *)(v2 + 216) = v8;
  return MEMORY[0x270FA2498](sub_253528274, v9, v8);
}

uint64_t sub_253528274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  sub_253529E08();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v13[24], 1, v13[13]) == 1)
  {
    uint64_t v14 = v13[19];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v13[11];
    uint64_t v16 = v13[8];
    sub_253477128();
    v17();
    v15(v16, v14);
    uint64_t v21 = (void *)swift_task_alloc();
    v13[28] = (uint64_t)v21;
    *uint64_t v21 = v13;
    v21[1] = sub_253528468;
    uint64_t v22 = sub_253529DD4(v13[3]);
    return static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(v22, v23, v24, v25, v26, v27, 120, v28, a9, a10, a11, a12, a13);
  }
  else
  {
    sub_25347FA84();
    v18();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_253529DC4();
    return v19();
  }
}

uint64_t sub_253528468()
{
  sub_253477168();
  sub_253529D50();
  uint64_t v2 = *v1;
  sub_253477158();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_253529E14();
  uint64_t v5 = *(void *)(v4 + 216);
  uint64_t v6 = *(void *)(v0 + 208);
  return MEMORY[0x270FA2498](sub_253528554, v6, v5);
}

uint64_t sub_253528554()
{
  sub_253529DB8();
  sub_25347FA84();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  return v1();
}

uint64_t _s30IntelligenceFlowPlannerSupport16SessionInjectionO7perform2id10instanceId__16injectionContext4with10isolatedTo_xSS_SSSgSSSiAA0efL0_pSgq_nScA_pSgYixq_nYuYaq0_YKYTXEtYaq0_YKSeRzSERzSeR_SER_s5ErrorR0_r1_lFZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  v23[17] = a19;
  v23[18] = a23;
  v23[15] = a17;
  v23[16] = a18;
  v23[13] = a15;
  v23[14] = a16;
  v23[11] = a13;
  v23[12] = a14;
  v23[9] = a11;
  v23[10] = a12;
  v23[7] = a9;
  v23[8] = a10;
  v23[5] = a4;
  v23[6] = a5;
  v23[3] = a2;
  v23[4] = a3;
  v23[2] = a1;
  sub_253529D68();
  v23[19] = v24;
  v23[20] = sub_253472828();
  sub_2534727C4();
  v23[21] = v25;
  v23[22] = sub_253472828();
  sub_2534727C4();
  v23[23] = v26;
  v23[24] = sub_253472828();
  uint64_t v27 = sub_253B09E00();
  v23[25] = v27;
  sub_25346CB34(v27);
  v23[26] = v28;
  v23[27] = sub_253472828();
  uint64_t v29 = (void *)swift_task_alloc();
  v23[28] = v29;
  void *v29 = v23;
  v29[1] = sub_2535287D4;
  return sub_253529E58();
}

uint64_t sub_2535287D4()
{
  sub_253529DB8();
  sub_253477088();
  uint64_t v2 = v1;
  sub_2534771FC();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *v0;
  sub_253477158();
  *unint64_t v7 = v6;
  swift_task_dealloc();
  if (v5)
  {
    swift_getObjectType();
    sub_253B09BA0();
    sub_253529E4C();
  }
  else
  {
    sub_253529E34();
  }
  *(void *)(v2 + 232) = v9;
  *(void *)(v2 + 240) = v8;
  return MEMORY[0x270FA2498](sub_2535288DC, v9, v8);
}

void sub_2535288DC()
{
  sub_253529E08();
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[13];
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[21];
    uint64_t v3 = v0[22];
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[8];
    sub_253477128();
    v7();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    swift_task_alloc();
    sub_253529E40();
    v0[31] = v8;
    void *v8 = v9;
    v8[1] = sub_253528AB0;
    sub_253529DF0();
    __asm { BRAA            X3, X16 }
  }
  uint64_t v12 = v0[23];
  uint64_t v13 = v0[2];
  sub_253477128();
  v14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  sub_253529DF0();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_253528AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  sub_253477168();
  sub_253477088();
  uint64_t v16 = v15;
  sub_2534771FC();
  *uint64_t v17 = v16;
  uint64_t v18 = *v14;
  sub_253477158();
  *uint64_t v19 = v18;
  swift_task_dealloc();
  if (v13)
  {
    uint64_t v20 = v16[29];
    uint64_t v21 = v16[30];
    return MEMORY[0x270FA2498](sub_253528DC0, v20, v21);
  }
  else
  {
    uint64_t v22 = (void *)swift_task_alloc();
    v16[32] = (uint64_t)v22;
    *uint64_t v22 = v18;
    v22[1] = sub_253528C10;
    uint64_t v23 = sub_253529DD4(v16[3]);
    return static SessionInjection.capture<A>(id:instanceId:_:_:injectionContext:value:isolatedTo:)(v23, v24, v25, v26, v27, v28, 158, v29, a9, a10, a11, a12, a13);
  }
}

uint64_t sub_253528C10()
{
  sub_253477168();
  sub_253529D50();
  uint64_t v2 = *v1;
  sub_253477158();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  sub_253529E14();
  uint64_t v5 = *(void *)(v4 + 240);
  uint64_t v6 = *(void *)(v0 + 232);
  return MEMORY[0x270FA2498](sub_253528CFC, v6, v5);
}

void sub_253528CFC()
{
  sub_253529E08();
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[2];
  sub_253477128();
  v5();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  sub_253529DF0();
  __asm { BRAA            X1, X16 }
}

void sub_253528DC0()
{
  sub_253529E08();
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[15];
  sub_253477128();
  v5();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v1, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DF0();
  __asm { BRAA            X1, X16 }
}

uint64_t AnySessionInjectionContext.init(context:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_253476C2C(a1, a2);
}

uint64_t AnySessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)()
{
  sub_253529DB8();
  *(void *)(v1 + 152) = v21;
  *(void *)(v1 + 160) = v0;
  *(void *)(v1 + 144) = v20;
  *(_OWORD *)(v1 + 112) = v18;
  *(_OWORD *)(v1 + 128) = v19;
  *(_OWORD *)(v1 + 96) = v17;
  *(void *)(v1 + 80) = v15;
  *(void *)(v1 + 88) = v16;
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v3;
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v5;
  *(void *)(v1 + 32) = v6;
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 16) = v8;
  *(void *)(v1 + 24) = v9;
  if (v15)
  {
    swift_getObjectType();
    uint64_t v10 = sub_253B09BA0();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  return MEMORY[0x270FA2498](sub_253528F58, v10, v12);
}

void sub_253528F58()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = v1[4];
  sub_253472068(v1, v1[3]);
  uint64_t v5 = *(void *)(v2 + 8) + **(int **)(v2 + 8);
  swift_task_alloc();
  sub_253529E40();
  *(void *)(v0 + 168) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_253529080;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_253529080()
{
  sub_253477168();
  sub_253477088();
  uint64_t v1 = *v0;
  sub_253477158();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_2534771C0();
  return v3();
}

uint64_t AnySessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12)
{
  sub_253529DB8();
  *(void *)(v13 + 112) = a12;
  *(void *)(v13 + 120) = v12;
  *(void *)(v13 + 104) = a11;
  *(_OWORD *)(v13 + 88) = a10;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = a9;
  *(void *)(v13 + 56) = v15;
  *(void *)(v13 + 64) = v16;
  *(void *)(v13 + 40) = v17;
  *(void *)(v13 + 48) = v18;
  *(void *)(v13 + 24) = v19;
  *(void *)(v13 + 32) = v20;
  *(void *)(v13 + 16) = v21;
  if (v14)
  {
    swift_getObjectType();
    sub_253B09BA0();
  }
  return sub_253529E20();
}

void sub_2535291F0()
{
  sub_253529DB8();
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = v1[4];
  sub_253472068(v1, v1[3]);
  uint64_t v4 = *(void *)(v2 + 16) + **(int **)(v2 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_253529314;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_253529314()
{
  sub_253477168();
  sub_253477088();
  uint64_t v1 = *v0;
  sub_253477158();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_2534771C0();
  return v3();
}

uint64_t sub_2535293D4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253477080;
  return AnySessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)();
}

uint64_t sub_2535294EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v11 + 16) = v16;
  *uint64_t v16 = v11;
  v16[1] = sub_253477080;
  return AnySessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(a1, a2, a3, a4, a5, a6, a7, a8, v23, __PAIR128__(a9, v24), a10, a11);
}

uint64_t sub_2535295EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B2493E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_253529654(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_253462A5C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2535296B0()
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

ValueMetadata *type metadata accessor for SessionInjection()
{
  return &type metadata for SessionInjection;
}

uint64_t dispatch thunk of SessionInjectionContext.request<A, B>(id:instanceId:file:line:isolatedTo:with:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a20 + 8) + **(int **)(a20 + 8));
  swift_task_alloc();
  sub_253529E40();
  *(void *)(v20 + 16) = v21;
  *uint64_t v21 = v22;
  v21[1] = sub_253477080;
  return v24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t dispatch thunk of SessionInjectionContext.capture<A>(id:instanceId:file:line:isolatedTo:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a15 + 16) + **(int **)(a15 + 16));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v15 + 16) = v18;
  *uint64_t v18 = v15;
  v18[1] = sub_253476FC0;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t initializeWithCopy for AnySessionInjectionContext(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnySessionInjectionContext(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *sub_253529A4C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    long long v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        double result = (uint64_t *)swift_release();
        *long long v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *double result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *long long v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for AnySessionInjectionContext(uint64_t a1, uint64_t a2)
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySessionInjectionContext(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySessionInjectionContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySessionInjectionContext()
{
  return &type metadata for AnySessionInjectionContext;
}

uint64_t sub_253529D80()
{
  sub_253476C2C(v0, (uint64_t)(v1 + 2));
  uint64_t v2 = v1[6];
  sub_253472068(v1 + 2, v1[5]);
  return v2;
}

uint64_t sub_253529DC4()
{
  return v0 + 8;
}

uint64_t sub_253529DD4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_253529E20()
{
  return MEMORY[0x270FA2498]();
}

uint64_t sub_253529E58()
{
  return static SessionInjection.request<A, B>(id:instanceId:_:_:injectionContext:with:isolatedTo:expecting:)();
}

void *static SpanDynamicContext.current.getter@<X0>(void *a1@<X8>)
{
  if (qword_26B249170 != -1) {
    swift_once();
  }
  sub_253B0A710();
  if (__src[3] != 1) {
    return memcpy(a1, __src, 0x58uLL);
  }
  *a1 = 0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  a1[10] = 0;
  *((unsigned char *)a1 + 8) = 1;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return (void *)sub_25352A060((uint64_t)__src);
}

uint64_t sub_253529F14()
{
  sub_253462A5C(qword_26B24A5A8);
  swift_allocObject();
  uint64_t result = sub_253B0A700();
  qword_26B249178 = result;
  return result;
}

uint64_t static SpanDynamicContext.$taskLocalCurrent.getter()
{
  if (qword_26B249170 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t static SpanDynamicContext.taskLocalCurrent.getter()
{
  if (qword_26B249170 != -1) {
    swift_once();
  }
  return sub_253B0A710();
}

uint64_t SpanDynamicContext.init(spanId:participantId:aliasParticipantId:injectionContext:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  return sub_25352A0C0(a7, a8 + 48);
}

uint64_t sub_25352A060(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDBE98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25352A0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B2493E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SpanDynamicContext.spanId.getter()
{
  return *(void *)v0;
}

uint64_t SpanDynamicContext.participantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpanDynamicContext.aliasParticipantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SpanDynamicContext.injectionContext.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2535295EC(v1 + 48, a1);
}

uint64_t destroy for SpanDynamicContext(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72))
  {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
  }
  return result;
}

uint64_t initializeWithCopy for SpanDynamicContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2 + 48;
  uint64_t v7 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 48, v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = *(void *)(v6 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for SpanDynamicContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[9];
  if (!*(void *)(a1 + 72))
  {
    if (v5)
    {
      *(void *)(a1 + 72) = v5;
      *(void *)(a1 + 80) = a2[10];
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 48, (uint64_t)(a2 + 6));
      return a1;
    }
LABEL_7:
    long long v6 = *((_OWORD *)a2 + 3);
    long long v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)(a1 + 64) = v7;
    return a1;
  }
  if (!v5)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
    goto LABEL_7;
  }
  sub_253529A4C((uint64_t *)(a1 + 48), a2 + 6);
  return a1;
}

void *initializeWithTake for SpanDynamicContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for SpanDynamicContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72)) {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpanDynamicContext(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpanDynamicContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanDynamicContext()
{
  return &type metadata for SpanDynamicContext;
}

uint64_t SpanID.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v8 = (unsigned __int8 *)sub_253B0A0A0();
      }
      unint64_t v2 = (unint64_t)sub_25352B5D0(v8, v6, 10);
      char v3 = v9 & 1;
      goto LABEL_40;
    }
    if (result == 43)
    {
      if (v5)
      {
        if (v5 != 1)
        {
          sub_25352C3F0();
          while (1)
          {
            sub_25351F16C();
            if (!v13 && v12) {
              break;
            }
            if (!is_mul_ok(v2, v14)) {
              break;
            }
            BOOL v12 = __CFADD__(10 * v2, v15);
            unint64_t v2 = 10 * v2 + v15;
            if (v12) {
              break;
            }
            sub_25352C3B0();
            if (v13) {
              goto LABEL_40;
            }
          }
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v5)
        {
          unint64_t v2 = 0;
          while (1)
          {
            sub_25351F16C();
            if (!v13 && v12) {
              break;
            }
            if (!is_mul_ok(v2, v16)) {
              break;
            }
            BOOL v12 = __CFADD__(10 * v2, v17);
            unint64_t v2 = 10 * v2 + v17;
            if (v12) {
              break;
            }
            sub_25352C3B0();
            if (v13) {
              goto LABEL_40;
            }
          }
        }
        goto LABEL_39;
      }
      if (v5)
      {
        if (v5 != 1)
        {
          sub_25352C3F0();
          while (1)
          {
            sub_25351F16C();
            if (!v13 && v12) {
              break;
            }
            if (!is_mul_ok(v2, v10)) {
              break;
            }
            BOOL v12 = 10 * v2 >= v11;
            unint64_t v2 = 10 * v2 - v11;
            if (!v12) {
              break;
            }
            sub_25352C3B0();
            if (v13) {
              goto LABEL_40;
            }
          }
        }
LABEL_39:
        unint64_t v2 = 0;
        char v3 = 1;
        goto LABEL_40;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  unint64_t v2 = (unint64_t)sub_25352BDB4(result, a2, 10);
  char v3 = v18;
LABEL_40:
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t SpanID.init(causingSpanId:for:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_25352A6E0(a1, a2, a3);
}

uint64_t sub_25352A6E0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_253B09500();
  sub_2534727C4();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_25346CC44();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_253B09540();
  sub_2534727C4();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  sub_253B09530();
  sub_253B09510();
  uint64_t v19 = sub_25352AE2C(a2, a3);
  uint64_t v21 = v19;
  switch(v20 >> 62)
  {
    case 1uLL:
      if (v19 >> 32 < (int)v19) {
        __break(1u);
      }
      sub_25348A9C8(v19, v20);
      sub_25352BEC8((int)v21, v21 >> 32);
      goto LABEL_5;
    case 2uLL:
      uint64_t v27 = v5;
      uint64_t v22 = v12;
      uint64_t v23 = *(void *)(v19 + 16);
      uint64_t v24 = *(void *)(v19 + 24);
      sub_25348A9C8(v19, v20);
      swift_retain();
      swift_retain();
      uint64_t v25 = v24;
      uint64_t v12 = v22;
      uint64_t v5 = v27;
      sub_25352BEC8(v23, v25);
      swift_release();
      swift_release();
LABEL_5:
      sub_25352C3C0();
      sub_25352C3C0();
      break;
    default:
      sub_25352BFA8();
      sub_25352C3C0();
      sub_25352C3C0();
      break;
  }
  sub_253B09520();
  sub_253B094F0();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v12);
  return v28;
}

uint64_t SpanID.init<A>(tracingInteger:for:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  sub_253B09500();
  sub_2534727C4();
  uint64_t v37 = v9;
  uint64_t v38 = v8;
  MEMORY[0x270FA5388](v8);
  sub_25346CC44();
  uint64_t v12 = v11 - v10;
  sub_253B09540();
  sub_2534727C4();
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  MEMORY[0x270FA5388](v13);
  sub_25346CC44();
  uint64_t v17 = v16 - v15;
  sub_2534727C4();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  sub_25346CC44();
  uint64_t v23 = v22 - v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v22 - v21, a1, a4);
  sub_253B09530();
  uint64_t v41 = v17;
  sub_25352AD38(v23, (uint64_t)sub_25352BE9C, (uint64_t)v40, a4, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v24);
  uint64_t v25 = sub_25352AE2C(a2, a3);
  uint64_t v27 = v25;
  switch(v26 >> 62)
  {
    case 1uLL:
      if (v25 >> 32 < (int)v25) {
        __break(1u);
      }
      uint64_t v32 = (int)v25;
      sub_25348A9C8(v25, v26);
      sub_25352BEC8(v32, v27 >> 32);
      goto LABEL_5;
    case 2uLL:
      uint64_t v33 = *(void *)(v25 + 16);
      uint64_t v34 = a1;
      uint64_t v28 = *(void *)(v25 + 24);
      sub_25348A9C8(v25, v26);
      swift_retain();
      swift_retain();
      uint64_t v29 = v28;
      a1 = v34;
      sub_25352BEC8(v33, v29);
      swift_release();
      swift_release();
LABEL_5:
      sub_25352C3D8();
      sub_25352C3D8();
      break;
    default:
      sub_25352BFA8();
      sub_25352C3D8();
      sub_25352C3D8();
      break;
  }
  sub_253B09520();
  sub_253B094F0();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v30(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v12, v38);
  v30(v23, a4);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v17, v36);
  return v39;
}

uint64_t sub_25352AD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_25352AE2C(unint64_t a1, unint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v37 = a1;
  unint64_t v38 = a2;
  *(void *)&long long v41 = a1;
  *((void *)&v41 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_253462A5C(&qword_26B248C58);
  if (swift_dynamicCast())
  {
    sub_253476C2C(v39, (uint64_t)&v42);
    sub_253472068(&v42, v44);
    sub_253B051B0();
    swift_bridgeObjectRelease();
    v39[0] = v41;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v42);
    return *(void *)&v39[0];
  }
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  sub_25352C260((uint64_t)v39);
  unint64_t v2 = v37;
  uint64_t v3 = v38;
  if ((v38 & 0x1000000000000000) == 0)
  {
    if ((v38 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v37;
      uint64_t v43 = v38 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v42 + (HIBYTE(v38) & 0xF);
      uint64_t v7 = &v42;
    }
    else
    {
      if ((v37 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (v38 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v37 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_253B0A0A0();
      }
      if (v4) {
        uint64_t v6 = (char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (void *)v4;
    }
    uint64_t v8 = MEMORY[0x25A264420](v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v39[0] = v8;
      *((void *)&v39[0] + 1) = v10;
      return *(void *)&v39[0];
    }
    unint64_t v2 = v37;
    uint64_t v3 = v38;
    if ((v38 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_69:
    uint64_t v11 = sub_253B098A0();
    goto LABEL_17;
  }
LABEL_68:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_69;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v39[0] = MEMORY[0x25A264400](v11);
  *((void *)&v39[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v39[0]);
  v32[2] = &v37;
  unint64_t v13 = (unint64_t)sub_25352B8A4((void *(*)(uint64_t *__return_ptr, char *, char *))sub_25352C2F8, (uint64_t)v32);
  uint64_t v16 = *((void *)&v39[0] + 1) >> 62;
  uint64_t v17 = v13;
  unint64_t v19 = v18;
  unint64_t v20 = v14;
  uint64_t v3 = BYTE14(v39[0]);
  switch(*((void *)&v39[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v21) = DWORD1(v39[0]) - LODWORD(v39[0]);
      if (__OFSUB__(DWORD1(v39[0]), v39[0])) {
        goto LABEL_72;
      }
      uint64_t v21 = (int)v21;
LABEL_23:
      if (v15 != v21)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v3 = *(uint64_t *)&v39[0] >> 32;
          }
          else {
            uint64_t v3 = *(void *)(*(void *)&v39[0] + 24);
          }
        }
LABEL_60:
        if (v3 < v15)
        {
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
        }
        sub_253B053F0();
LABEL_62:
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
LABEL_29:
      if ((v19 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v19) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v41 + 7) = 0;
      *(void *)&long long v41 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      unint64_t v33 = v10;
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v19 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v36 = v19 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v34 = v8;
      uint64_t v35 = (v19 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v23 = *(void *)(*(void *)&v39[0] + 16);
      uint64_t v22 = *(void *)(*(void *)&v39[0] + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_23;
      }
      goto LABEL_73;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v3 = 0;
      goto LABEL_60;
    default:
      uint64_t v21 = BYTE14(v39[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v2 = v20;
    if ((v20 & 0xC) == v28) {
      unint64_t v2 = sub_253A439BC(v20, v17, v19);
    }
    unint64_t v29 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_253B098E0();
      char v30 = v2;
    }
    else if ((v19 & 0x2000000000000000) != 0)
    {
      uint64_t v42 = v17;
      uint64_t v43 = v36;
      char v30 = *((unsigned char *)&v42 + v29);
    }
    else
    {
      unint64_t v2 = v35;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_253B0A0A0();
      }
      char v30 = *(unsigned char *)(v2 + v29);
    }
    if ((v20 & 0xC) == v28)
    {
      unint64_t v2 = sub_253A439BC(v20, v17, v19);
      unint64_t v20 = v2;
      if ((v19 & 0x1000000000000000) == 0)
      {
LABEL_47:
        unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_52;
      }
    }
    else if ((v19 & 0x1000000000000000) == 0)
    {
      goto LABEL_47;
    }
    if (v25 <= v20 >> 16) {
      goto LABEL_67;
    }
    unint64_t v2 = sub_253B098B0();
    unint64_t v20 = v2;
LABEL_52:
    *((unsigned char *)&v41 + v26) = v30;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_66;
    }
    BYTE14(v41) = v26;
    if (v26 == 14)
    {
      sub_25352C394();
      sub_253B05410();
      LOBYTE(v26) = 0;
      BYTE14(v41) = 0;
    }
  }
  while (4 * v25 != v20 >> 14);
  uint64_t v8 = v34;
  unint64_t v10 = v33;
  if ((_BYTE)v26)
  {
    sub_25352C394();
    sub_253B05410();
    sub_25352C314(v8, v10);
    goto LABEL_62;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_25352C314(v8, v10);
LABEL_63:
  swift_bridgeObjectRelease();
  return *(void *)&v39[0];
}

uint64_t sub_25352B318(uint64_t a1)
{
  uint64_t v2 = sub_253B09550();
  uint64_t v8 = v2;
  uint64_t v9 = sub_25352C218(&qword_269CDE6E0, MEMORY[0x263F04830]);
  uint64_t v3 = sub_2534724A8(v7);
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v3, a1, v2);
  sub_253472068(v7, v8);
  sub_253B051B0();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v7);
  return v6;
}

void *sub_25352B45C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t SpanID.description.getter()
{
  return sub_253B09F00();
}

void *sub_25352B4A8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_25352B4B8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25352B4C4()
{
  return sub_253B09A30();
}

uint64_t sub_25352B524()
{
  return sub_253B09A00();
}

uint64_t sub_25352B574()
{
  return sub_25397F908();
}

uint64_t sub_25352B57C()
{
  return sub_253980068();
}

uint64_t sub_25352B584()
{
  return sub_253981150();
}

uint64_t sub_25352B58C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = SpanID.init(_:)(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

BOOL sub_25352B5BC(uint64_t *a1, uint64_t *a2)
{
  return sub_25357B6E8(*a1, *a2);
}

uint64_t sub_25352B5C8()
{
  return SpanID.description.getter();
}

unsigned __int8 *sub_25352B5D0(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v17 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v18 = a3 + 48;
        unsigned __int8 v19 = a3 + 55;
        unsigned __int8 v20 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = 58;
        }
        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          uint64_t v21 = result + 1;
          do
          {
            unsigned int v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                uint64_t v13 = 0;
                if (v22 < 0x61 || v22 >= v20) {
                  return (unsigned __int8 *)v13;
                }
                char v23 = -87;
              }
              else
              {
                char v23 = -55;
              }
            }
            else
            {
              char v23 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v24 = v9 * a3;
            unsigned __int8 v25 = v22 + v23;
            BOOL v16 = __CFADD__(v24, v25);
            unint64_t v9 = v24 + v25;
            if (v16) {
              return 0;
            }
            ++v21;
            --v17;
          }
          while (v17);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v26 = a3 + 48;
        unsigned __int8 v27 = a3 + 55;
        unsigned __int8 v28 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = 58;
        }
        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }
        if (result)
        {
          unint64_t v29 = 0;
          do
          {
            unsigned int v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                uint64_t v13 = 0;
                if (v30 < 0x61 || v30 >= v28) {
                  return (unsigned __int8 *)v13;
                }
                char v31 = -87;
              }
              else
              {
                char v31 = -55;
              }
            }
            else
            {
              char v31 = -48;
            }
            if (!is_mul_ok(v29, a3)) {
              return 0;
            }
            unint64_t v32 = v29 * a3;
            unsigned __int8 v33 = v30 + v31;
            BOOL v16 = __CFADD__(v32, v33);
            unint64_t v29 = v32 + v33;
            if (v16) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)v29;
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v14 = v9 * a3;
            unsigned __int8 v15 = v11 + v12;
            BOOL v16 = v14 >= v15;
            unint64_t v9 = v14 - v15;
            if (!v16) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_25352B84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  void v5[2] = v6;
  return sub_25352BC4C((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_25352C36C, (uint64_t)v5, a1, a2);
}

void *sub_25352B8A4(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_253B330D0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (sub_253B05170() && __OFSUB__((int)v4, sub_253B05190())) {
        goto LABEL_17;
      }
      sub_253B051A0();
      swift_allocObject();
      uint64_t v13 = sub_253B05160();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_25352BCB4((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *uint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_253B053B0();
      uint64_t result = sub_25352BCB4(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *uint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_25352BD68((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_25352BD68((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *uint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_25352BB50@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = sub_253B053A0();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = MEMORY[0x25A2643C0]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = MEMORY[0x25A2643E0]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_25352BBC8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_253B0A010();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_25352BC4C(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_25352BCB4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_253B05170();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_253B05190();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_253B05180();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_25352BD68(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

unsigned __int8 *sub_25352BDB4(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_253B09930();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_253A43A18();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_253B0A0A0();
  }
LABEL_7:
  uint64_t v11 = sub_25352B5D0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_25352BE9C()
{
  return sub_253B09510();
}

uint64_t sub_25352BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_253B05170();
  if (!result || (uint64_t result = sub_253B05190(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_253B05180();
      sub_253B09540();
      sub_25352C218(&qword_26B24A378, MEMORY[0x263F047F8]);
      return sub_253B094C0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25352BFA8()
{
  return sub_253B094C0();
}

unint64_t sub_25352C0D0()
{
  unint64_t result = qword_26B24A598;
  if (!qword_26B24A598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A598);
  }
  return result;
}

unint64_t sub_25352C120()
{
  unint64_t result = qword_269CDE6C8;
  if (!qword_269CDE6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE6C8);
  }
  return result;
}

unint64_t sub_25352C170()
{
  unint64_t result = qword_269CDE6D0;
  if (!qword_269CDE6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE6D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpanID()
{
  return &type metadata for SpanID;
}

unint64_t sub_25352C1CC()
{
  unint64_t result = qword_26B249EB0;
  if (!qword_26B249EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249EB0);
  }
  return result;
}

uint64_t sub_25352C218(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25352C260(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C((uint64_t *)&unk_26B248C60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_25352C2C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_25352B84C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_25352C2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_25352C2C0(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_25352C314(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_253487D84(a1, a2);
  }
  return a1;
}

uint64_t sub_25352C328@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_25352BBC8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_25352C36C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25352C328(a1, a2);
}

double sub_25352C394()
{
  __int16 v1 = *(_WORD *)(v0 - 148);
  double result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

uint64_t sub_25352C3C0()
{
  return sub_253487D84(v1, v0);
}

uint64_t sub_25352C3D8()
{
  return sub_253487D84(v1, v0);
}

uint64_t Timepoint.date.getter@<X0>(uint64_t a1@<X8>)
{
  sub_253B05550();
  sub_25346CAF4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t Timepoint.date.setter()
{
  sub_253B05550();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*Timepoint.date.modify())()
{
  return nullsub_1;
}

uint64_t Timepoint.suspendingClockInstantNs.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Timepoint() + 20));
}

uint64_t type metadata accessor for Timepoint()
{
  uint64_t result = qword_26B24A328;
  if (!qword_26B24A328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Timepoint.suspendingClockInstantNs.setter()
{
  uint64_t result = sub_25352E0AC();
  *(void *)(v1 + *(int *)(result + 20)) = v0;
  return result;
}

uint64_t (*Timepoint.suspendingClockInstantNs.modify())()
{
  return nullsub_1;
}

uint64_t Timepoint.continuousClockInstantNs.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Timepoint() + 24));
}

uint64_t Timepoint.continuousClockInstantNs.setter()
{
  uint64_t result = sub_25352E0AC();
  *(void *)(v1 + *(int *)(result + 24)) = v0;
  return result;
}

uint64_t (*Timepoint.continuousClockInstantNs.modify())()
{
  return nullsub_1;
}

uint64_t Timepoint.bootSessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Timepoint() + 28);
  sub_253B055C0();
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t Timepoint.bootSessionUUID.setter()
{
  sub_25352E0AC();
  sub_253B055C0();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*Timepoint.bootSessionUUID.modify())()
{
  return nullsub_1;
}

uint64_t Timepoint.init(date:suspendingClockInstantNs:continuousClockInstantNs:bootSessionUUID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_253B05550();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a4, a1);
  uint64_t v9 = type metadata accessor for Timepoint();
  *(void *)(a4 + *(int *)(v9 + 20)) = a2;
  *(void *)(a4 + *(int *)(v9 + 24)) = a3;
  sub_253B055C0();
  sub_25346CAF4();
  uint64_t v10 = sub_25349C5EC();
  return v11(v10);
}

uint64_t Timepoint.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_253B05550();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253B05520();
  __uint64_t v9 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_26B241258 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_253B055C0();
  uint64_t v12 = sub_253462BD4(v11, (uint64_t)qword_26B24A6A8);
  uint64_t v13 = (int *)type metadata accessor for Timepoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1 + v13[7], v12, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, v8, v2);
  *(void *)(a1 + v13[5]) = v9;
  *(void *)(a1 + v13[6]) = v10;
  return result;
}

uint64_t sub_25352C980()
{
  uint64_t v0 = sub_253B055C0();
  sub_2534AF1BC(v0, qword_26B24A6A8);
  uint64_t v1 = sub_253462BD4(v0, (uint64_t)qword_26B24A6A8);
  return sub_25352C9CC(v1);
}

uint64_t sub_25352C9CC@<X0>(uint64_t a1@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_253B09B10();
  *(void *)(v5 + 16) = 37;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 61) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  v11[0] = 37;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v5 + 32), v11, 0, 0))
  {
    __break(1u);
    goto LABEL_7;
  }
  __int16 v6 = sub_2534B3CEC(v5);
  if ((v6 & 0x100) != 0) {
    goto LABEL_8;
  }
  if ((_BYTE)v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_25352CC04(v7);
  sub_253B05560();
  uint64_t v8 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v4, 1, v8) == 1)
  {
    sub_25352E04C((uint64_t)v4);
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    sub_253B0A000();
    sub_253B09860();
    sub_253B09860();
    sub_253B09860();
    uint64_t result = sub_253B0A1D0();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, v4, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25352CC04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
    {
LABEL_6:
      uint64_t v7 = sub_253B097B0();
      swift_bridgeObjectRelease();
      return v7;
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++)) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static Timepoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_253B05510() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Timepoint();
  if (*(void *)(a1 + *(int *)(v4 + 20)) != *(void *)(a2 + *(int *)(v4 + 20))
    || *(void *)(a1 + *(int *)(v4 + 24)) != *(void *)(a2 + *(int *)(v4 + 24)))
  {
    return 0;
  }
  return sub_253B055A0();
}

uint64_t sub_25352CD10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B0C750 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B0C770 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73736553746F6F62 && a2 == 0xEF444955556E6F69)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_25352CECC(char a1)
{
  unint64_t result = 1702125924;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x73736553746F6F62;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_25352CF5C()
{
  return sub_25352CECC(*v0);
}

uint64_t sub_25352CF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25352CD10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25352CF8C(uint64_t a1)
{
  unint64_t v2 = sub_25352D230();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25352CFC8(uint64_t a1)
{
  unint64_t v2 = sub_25352D230();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Timepoint.encode(to:)(void *a1)
{
  uint64_t v3 = sub_253462A5C(&qword_26B24A568);
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v9 = v8 - v7;
  sub_253472068(a1, a1[3]);
  sub_25352D230();
  sub_253B0A680();
  sub_253B05550();
  sub_25352D624(&qword_26B248C90, MEMORY[0x263F07490]);
  sub_253B0A440();
  if (!v1)
  {
    type metadata accessor for Timepoint();
    sub_253B0A450();
    sub_253B0A450();
    sub_253B055C0();
    sub_25352D624(&qword_26B248CA0, MEMORY[0x263F07508]);
    sub_253B0A440();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_25352D230()
{
  unint64_t result = qword_26B24A318;
  if (!qword_26B24A318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A318);
  }
  return result;
}

uint64_t Timepoint.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_253B055C0();
  sub_253465998();
  uint64_t v22 = v4;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  uint64_t v26 = sub_253B05550();
  sub_253465998();
  uint64_t v24 = v9;
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v25 = v12 - v11;
  sub_253462A5C(&qword_269CDE6E8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_25346CC44();
  uint64_t v14 = (int *)type metadata accessor for Timepoint();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  sub_253472068(a1, a1[3]);
  sub_25352D230();
  sub_253B0A660();
  if (v27) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  sub_25352D624(&qword_269CDE6F0, MEMORY[0x263F07490]);
  sub_253B0A370();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v18, v25, v26);
  *(void *)(v18 + v14[5]) = sub_253B0A380();
  *(void *)(v18 + v14[6]) = sub_253B0A380();
  sub_25352D624(&qword_269CDBCC8, MEMORY[0x263F07508]);
  sub_253B0A370();
  uint64_t v19 = sub_25352E0C4();
  v20(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v18 + v14[7], v8, v3);
  sub_25352D66C(v18, a2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  return sub_25352D6D0(v18);
}

uint64_t sub_25352D624(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25352D66C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Timepoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25352D6D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Timepoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25352D72C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Timepoint.init(from:)(a1, a2);
}

uint64_t sub_25352D744(void *a1)
{
  return Timepoint.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Timepoint(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B05550();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_253B055C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for Timepoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t initializeWithCopy for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for Timepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Timepoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25352DC6C);
}

uint64_t sub_25352DC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253B05550();
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = sub_253B055C0();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Timepoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25352DCFC);
}

uint64_t sub_25352DCFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253B05550();
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = sub_253B055C0();
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, a2, a2, v10);
}

uint64_t sub_25352DD80()
{
  uint64_t result = sub_253B05550();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B055C0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Timepoint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25352DF24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Timepoint.CodingKeys()
{
  return &type metadata for Timepoint.CodingKeys;
}

unint64_t sub_25352DF60()
{
  unint64_t result = qword_269CDE6F8;
  if (!qword_269CDE6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE6F8);
  }
  return result;
}

unint64_t sub_25352DFB0()
{
  unint64_t result = qword_26B241250;
  if (!qword_26B241250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B241250);
  }
  return result;
}

unint64_t sub_25352E000()
{
  unint64_t result = qword_26B24A320;
  if (!qword_26B24A320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A320);
  }
  return result;
}

uint64_t sub_25352E04C(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25352E0AC()
{
  return type metadata accessor for Timepoint();
}

uint64_t sub_25352E0C4()
{
  return *(void *)(v0 - 96);
}

uint64_t sub_25352E0D8()
{
  uint64_t v0 = sub_253B08400();
  sub_2534AF1BC(v0, qword_269D7B660);
  sub_253462BD4(v0, (uint64_t)qword_269D7B660);
  return sub_253B083F0();
}

uint64_t static SharedAssistantSchemaProvider.shared.getter()
{
  if (qword_269CDA7D0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_253B08400();
  sub_253462BD4(v0, (uint64_t)qword_269D7B660);
  sub_25352E824((unint64_t *)&qword_269CDB0D8, v1, (void (*)(uint64_t))type metadata accessor for SharedAssistantSchemaProvider);
  return sub_253B083C0();
}

uint64_t type metadata accessor for SharedAssistantSchemaProvider()
{
  return self;
}

uint64_t SharedAssistantSchemaProvider.__allocating_init(parameters:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  SharedAssistantSchemaProvider.init(parameters:)(a1);
  return v2;
}

uint64_t SharedAssistantSchemaProvider.init(parameters:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_253B089F0();
  MEMORY[0x270FA5388](v4);
  sub_253B093D0();
  uint64_t v5 = sub_253B09380();
  sub_253B083B0();
  sub_25352E898();
  (*(void (**)(uint64_t))(v6 + 8))(a1);
  *(void *)(v2 + 16) = v5;
  return v2;
}

uint64_t SharedAssistantSchemaProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t SharedAssistantSchemaProvider.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t sub_25352E630(uint64_t a1)
{
  return SharedAssistantSchemaProvider.__allocating_init(parameters:)(a1);
}

uint64_t sub_25352E658()
{
  return sub_253B08410();
}

uint64_t SharedAssistantSchemaProvider.tools.getter()
{
  return sub_253B093B0();
}

uint64_t SharedAssistantSchemaProvider.types.getter()
{
  return sub_253B093C0();
}

uint64_t SharedAssistantSchemaProvider.knownToolKinds()()
{
  return sub_253B09370();
}

uint64_t SharedAssistantSchemaProvider.tools(of:in:)()
{
  return sub_253B09390();
}

uint64_t sub_25352E73C()
{
  return SharedAssistantSchemaProvider.tools.getter();
}

uint64_t sub_25352E760()
{
  return SharedAssistantSchemaProvider.types.getter();
}

uint64_t sub_25352E784()
{
  return SharedAssistantSchemaProvider.knownToolKinds()();
}

uint64_t sub_25352E7A8()
{
  return SharedAssistantSchemaProvider.tools(of:in:)();
}

uint64_t sub_25352E7CC()
{
  return MEMORY[0x263F8E658];
}

uint64_t sub_25352E7D8()
{
  return sub_25352E824(&qword_269CDE708, 255, MEMORY[0x263F61828]);
}

uint64_t sub_25352E824(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for SharedAssistantSchemaProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SharedAssistantSchemaProvider);
}

uint64_t dispatch thunk of SharedAssistantSchemaProvider.__allocating_init(parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_25352E8AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = a1;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  return v4;
}

uint64_t sub_25352E900()
{
  uint64_t v0 = sub_253B089F0();
  sub_253465998();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  sub_25346CC44();
  uint64_t v6 = v5 - v4;
  sub_253B08360();
  uint64_t v7 = sub_253B089D0();
  os_log_type_t v8 = sub_253B09D70();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v10 = sub_253B0A720();
    uint64_t v12 = sub_253464DF8(v10, v11, &v14);
    sub_253530660(v12);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_253460000, v7, v8, "Model Caching - %s does not exist, creating new model holder", v9, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
}

uint64_t sub_25352EA80(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_253B08940();
  sub_253465998();
  uint64_t v7 = v6;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t v14 = sub_253B08970();
  sub_253465998();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v18);
  unsigned __int8 v20 = (char *)v29 - v19;
  uint64_t result = sub_25353053C(a1);
  if (result)
  {
    uint64_t v31 = v5;
    sub_253B077B0();
    sub_253B077B0();
    sub_253B08960();
    sub_253B08910();
    unsigned int v30 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v30(v2, v14);
    uint64_t v22 = sub_253B08960();
    os_signpost_type_t v23 = sub_253B09DB0();
    if (sub_253B09DE0())
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v29[1] = v3;
      uint64_t v25 = v24;
      *(_WORD *)uint64_t v24 = 0;
      os_signpost_id_t v26 = sub_253B08920();
      _os_signpost_emit_with_name_impl(&dword_253460000, v22, v23, v26, "ModelCache.ModelLoad", "", v25, 2u);
      sub_2534659B4();
    }

    uint64_t v27 = v31;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v13, v31);
    sub_253B089B0();
    swift_allocObject();
    uint64_t v28 = sub_253B089A0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v27);
    v30((uint64_t)v20, v14);
    sub_25352E8AC(v28);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_25352ED0C(uint64_t a1)
{
  sub_253B089F0();
  sub_253465998();
  uint64_t v67 = v4;
  uint64_t v68 = v3;
  MEMORY[0x270FA5388](v3);
  sub_25346CC44();
  uint64_t v66 = v6 - v5;
  uint64_t v7 = sub_253B08980();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_253B08940();
  sub_253465998();
  uint64_t v64 = v15;
  MEMORY[0x270FA5388](v16);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v57 - v18;
  sub_253B08970();
  sub_253465998();
  uint64_t v62 = v21;
  uint64_t v63 = v20;
  MEMORY[0x270FA5388](v20);
  sub_25346CC44();
  uint64_t result = sub_25353053C(a1);
  uint64_t v65 = v23;
  if (result)
  {
    uint64_t v24 = result;
    uint64_t result = sub_25352E8AC(0);
    if (result)
    {
      uint64_t v25 = result;
      uint64_t v59 = v9;
      uint64_t v60 = v24;
      sub_253B077B0();
      os_signpost_id_t v26 = sub_253B08960();
      sub_253B08990();
      int v27 = sub_253B09DA0();
      char v28 = sub_253B09DE0();
      uint64_t v61 = v25;
      if (v28)
      {
        os_log_t v58 = v26;
        swift_retain();
        sub_253B089C0();
        swift_release();
        uint64_t v29 = v59;
        int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v13, v7);
        int v31 = *MEMORY[0x263F90238];
        HIDWORD(v57) = v27;
        if (v30 == v31)
        {
          char v32 = 0;
          char v33 = 0;
          uint64_t v34 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v13, v7);
          uint64_t v34 = "ModelName=%{public, signpost.telemetry:string1,public}s enableTelemetry=YES";
          char v33 = 2;
          char v32 = 1;
        }
        uint64_t v37 = v64;
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v1, v19, v14);
        uint64_t v38 = swift_slowAlloc();
        uint64_t v70 = swift_slowAlloc();
        *(unsigned char *)uint64_t v38 = v33;
        *(unsigned char *)(v38 + 1) = v32;
        *(_WORD *)(v38 + 2) = 2082;
        uint64_t v39 = sub_253530640();
        v40(v39);
        uint64_t v41 = sub_253B0A030();
        uint64_t v69 = sub_253464DF8(v41, v42, &v70);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        os_signpost_id_t v43 = sub_253B08920();
        os_log_t v44 = v58;
        _os_signpost_emit_with_name_impl(&dword_253460000, v58, BYTE4(v57), v43, "ModelCache.ModelLoad", v34, (uint8_t *)v38, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();

        uint64_t v45 = *(void (**)(char *, uint64_t))(v37 + 8);
        v45(v19, v14);
        sub_2534659CC();
        v46();
        v45(v1, v14);
      }
      else
      {

        sub_2534659CC();
        v35();
        sub_2534659CC();
        v36();
      }
      uint64_t v47 = v66;
      sub_253B08360();
      uint64_t v48 = sub_253B089D0();
      os_log_type_t v49 = sub_253B09D70();
      if (os_log_type_enabled(v48, v49))
      {
        unsigned int v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)unsigned int v50 = 136315138;
        uint64_t v70 = v51;
        uint64_t v52 = sub_253530640();
        v53(v52);
        uint64_t v54 = sub_253B0A030();
        uint64_t v56 = sub_253464DF8(v54, v55, &v70);
        sub_253530660(v56);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_253460000, v48, v49, "Caching - signpost for %s", v50, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
        swift_release();
      }
      else
      {

        swift_release();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v47, v68);
    }
  }
  return result;
}

uint64_t sub_25352F208()
{
  sub_253462A5C(&qword_269CDE780);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t sub_25352F244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F57748](a1, a2, a5, a3, a6, a4);
}

uint64_t sub_25352F25C()
{
  return sub_25352E900();
}

uint64_t sub_25352F274(uint64_t a1)
{
  return sub_25352EA80(a1);
}

uint64_t sub_25352F298(uint64_t a1)
{
  return sub_25352ED0C(a1);
}

uint64_t sub_25352F2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F57748](a1, a2, a5, a3, a6, a4);
}

uint64_t sub_25352F2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x270F57748](a1, a2, a5, a3, a6, a4);
}

uint64_t sub_25352F2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x270F57770](a1, a2, a3, a4, a7, a5, a8, a6);
}

uint64_t sub_25352F304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x270F57750](a1, a2, a3, a4, a7, a5, a8, a6);
}

uint64_t sub_25352F31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MEMORY[0x270F57750](a1, a2, a3, a4, a7, a5, a8, a6);
}

uint64_t sub_25352F334()
{
  type metadata accessor for ModelCache();
  swift_allocObject();
  uint64_t result = sub_25352F3D0();
  qword_269CDE710 = result;
  return result;
}

uint64_t static ModelCache.shared.getter()
{
  if (qword_269CDA7D8 != -1) {
    swift_once();
  }
  return swift_retain();
}

uint64_t sub_25352F3D0()
{
  type metadata accessor for ModelCache.ModelCacheCallbacks();
  swift_allocObject();
  sub_25352F208();
  sub_2535305D4(&qword_269CDE778, v1, (void (*)(uint64_t))type metadata accessor for ModelCache.ModelCacheCallbacks);
  sub_253B083E0();
  return v0;
}

uint64_t ModelCache.getModel<A>(modelType:prewarm:keepAlive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_253465998();
  uint64_t v20 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v19 - v10;
  uint64_t v12 = v19[1];
  uint64_t v13 = sub_253B083C0();
  if (v12)
  {
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v14(v9, v11, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    if (sub_253B0A4A0())
    {
      sub_2534659CC();
      v16(v15);
    }
    else
    {
      swift_allocError();
      v14(v17, v9, AssociatedTypeWitness);
    }
  }
  return v13;
}

uint64_t ModelCache.sustainModelLifetime(using:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ModelCache.getModel<A>(modelType:prewarm:keepAlive:)(a1, 0, a3, a4);
  if (!v4) {
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ModelCache.reset()()
{
}

uint64_t ModelCache.deinit()
{
  sub_253B08400();
  sub_25352E898();
  sub_2534659CC();
  v1();
  return v0;
}

uint64_t ModelCache.__deallocating_deinit()
{
  sub_253B08400();
  sub_25352E898();
  sub_2534659CC();
  v1();
  uint64_t v2 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t SentencePieceCachableModel.__allocating_init(parameters:)()
{
  uint64_t v0 = sub_253530688();
  SentencePieceCachableModel.init(parameters:)();
  return v0;
}

uint64_t SentencePieceCachableModel.init(parameters:)()
{
  sub_253530620();
  uint64_t v1 = sub_253B089F0();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_25346CC44();
  uint64_t v7 = v6 - v5;
  type metadata accessor for ToolEmbeddingsDatabase(0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2535300F8(0x656365697073, 0xE600000000000000, 0x6C65646F6DLL, 0xE500000000000000, v9);
  uint64_t v11 = v10;

  if (v11 && (sub_25346C8E0(0, &qword_269CDE728), (id v12 = sub_25352FA58()) != 0))
  {
    id v13 = v12;
    sub_253462A5C(&qword_269CDE730);
    uint64_t v14 = swift_allocObject();
    *(_DWORD *)(v14 + 24) = 0;
    *(void *)(v14 + 16) = v13;
    sub_253B083B0();
    sub_25352E898();
    sub_2534659CC();
    v15();
    *(void *)(v0 + 16) = v14;
  }
  else
  {
    sub_253B08360();
    uint64_t v16 = sub_253B089D0();
    os_log_type_t v17 = sub_253B09D80();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_253460000, v16, v17, "Sentence piece model missing. Embedding failed.", v18, 2u);
      MEMORY[0x25A269E60](v18, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
    sub_2535301B4();
    swift_allocError();
    *uint64_t v19 = 2;
    swift_willThrow();
    sub_253B083B0();
    sub_25352E898();
    sub_2534659CC();
    v20();
    swift_deallocPartialClassInstance();
  }
  return v0;
}

id sub_25352FA58()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v1 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithModelPath_, v1);

  return v2;
}

Swift::Void __swiftcall SentencePieceCachableModel.prewarm()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  id v2 = (void **)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_25352FB30(v2);
  os_unfair_lock_unlock(v3);
}

void sub_25352FB30(void **a1)
{
  uint64_t v1 = *a1;
  id v2 = (void *)sub_253B096D0();
}

const char *static SentencePieceCachableModel.privacyApprovedLoggableName()()
{
  return "SentencePieceModel";
}

const char *sub_25352FBC0()
{
  return "SentencePieceModel";
}

uint64_t sub_25352FBD4(uint64_t a1, void *a2)
{
  uint64_t result = SentencePieceCachableModel.__allocating_init(parameters:)();
  if (v2) {
    *a2 = v2;
  }
  return result;
}

void sub_25352FC04()
{
}

uint64_t SbertCachableModel.__allocating_init(parameters:)()
{
  uint64_t v0 = sub_253530688();
  SbertCachableModel.init(parameters:)();
  return v0;
}

uint64_t SbertCachableModel.init(parameters:)()
{
  sub_253530620();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F00D98]), sel_init);
  objc_msgSend(v2, sel_setComputeUnits_, 3);
  type metadata accessor for SbertQuantizedEmbeddingModel();
  uint64_t v3 = sub_253B03F24(v2);
  if (v1)
  {
    sub_253B083B0();
    sub_25352E898();
    sub_2534659CC();
    v4();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v5 = v3;
    sub_253462A5C(&qword_269CDE738);
    uint64_t v6 = swift_allocObject();
    *(_DWORD *)(v6 + 24) = 0;
    *(void *)(v6 + 16) = v5;
    sub_253B083B0();
    sub_25352E898();
    sub_2534659CC();
    v7();
    *(void *)(v0 + 16) = v6;
  }
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SbertCachableModel.prewarm()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  id v2 = v1 + 4;
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_25352FDE4(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_25352FDE4(void *a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDE760);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  id v9 = (char *)v18 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v18 - v10;
  uint64_t v20 = 0;
  sub_253530580();
  sub_253B08A00();
  uint64_t v20 = 0;
  sub_253B08A00();
  v18[1] = *a1;
  sub_25346C8E0(0, &qword_269CDE770);
  id v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v19 = v11;
  v12(v6, v11, v2);
  id v13 = (void *)sub_253B09D50();
  v12(v6, v9, v2);
  uint64_t v14 = (void *)sub_253B09D50();
  uint64_t v15 = v18[2];
  sub_253B04938(v13, v14);
  if (!v15) {
    swift_release();
  }

  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v9, v2);
  return ((uint64_t (*)(char *, uint64_t))v16)(v19, v2);
}

const char *static SbertCachableModel.privacyApprovedLoggableName()()
{
  return "SbertModel";
}

uint64_t SbertCachableModel.deinit()
{
  swift_release();
  return v0;
}

uint64_t _s30IntelligenceFlowPlannerSupport26SentencePieceCachableModelCfD_0()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

const char *sub_253530084()
{
  return "SbertModel";
}

uint64_t sub_253530098(uint64_t a1, void *a2)
{
  uint64_t result = SbertCachableModel.__allocating_init(parameters:)();
  if (v2) {
    *a2 = v2;
  }
  return result;
}

void sub_2535300C8(void *a1)
{
  SbertCachableModel.prewarm()();
  if (v2) {
    *a1 = v2;
  }
}

uint64_t sub_2535300F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(a5, sel_pathForResource_ofType_, v6, v7);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = sub_253B096E0();

  return v9;
}

unint64_t sub_2535301B4()
{
  unint64_t result = qword_269CDE720;
  if (!qword_269CDE720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE720);
  }
  return result;
}

uint64_t sub_253530200(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2535305D4(&qword_269CDE740, a2, (void (*)(uint64_t))type metadata accessor for SentencePieceCachableModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for SentencePieceCachableModel()
{
  return self;
}

uint64_t sub_25353027C()
{
  return MEMORY[0x263F8E4E0];
}

uint64_t sub_253530288()
{
  return sub_2535305D4(&qword_269CDE708, 255, MEMORY[0x263F61828]);
}

uint64_t sub_2535302D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2535305D4(&qword_269CDE748, a2, (void (*)(uint64_t))type metadata accessor for SbertCachableModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for SbertCachableModel()
{
  return self;
}

uint64_t sub_253530350()
{
  return type metadata accessor for ModelCache();
}

uint64_t type metadata accessor for ModelCache()
{
  uint64_t result = qword_269CDE750;
  if (!qword_269CDE750) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2535303A0()
{
  uint64_t result = sub_253B08400();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ModelCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModelCache);
}

uint64_t sub_253530448()
{
  if (MEMORY[0x263F8EEE0]) {
    return sub_253B08400();
  }
  else {
    return MEMORY[0x263F8EE60] + 8;
  }
}

uint64_t dispatch thunk of static ModelCache.CachableModel.privacyApprovedLoggableName()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for ModelCache.ModelCacheCallbacks()
{
  return self;
}

uint64_t method lookup function for SentencePieceCachableModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SentencePieceCachableModel);
}

uint64_t dispatch thunk of SentencePieceCachableModel.__allocating_init(parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for SbertCachableModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SbertCachableModel);
}

uint64_t dispatch thunk of SbertCachableModel.__allocating_init(parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_25353053C(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

unint64_t sub_253530580()
{
  unint64_t result = qword_269CDE768;
  if (!qword_269CDE768)
  {
    sub_25347907C(&qword_269CDE760);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE768);
  }
  return result;
}

uint64_t sub_2535305D4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253530640()
{
  return *(void *)(v0 - 168);
}

uint64_t sub_253530660(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B09E80();
}

uint64_t sub_253530688()
{
  return swift_allocObject();
}

uint64_t sub_2535306AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_253971808();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_253534A38(v6);
  *a1 = v2;
  return result;
}

uint64_t MutableToolbox.__allocating_init<A>(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  uint64_t v16 = sub_253535588();
  MutableToolbox.init<A>(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)(v16, a2, a3, a4, a5, a6, a7, a8);
  return v8;
}

uint64_t MutableToolbox.init<A>(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a3;
  uint64_t v13 = (uint64_t)(v8 + 2);
  v33[1] = *v8;
  uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  os_log_type_t v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253476B80(a1, v13);
  type metadata accessor for QueryableToolbox();
  uint64_t v39 = a1;
  sub_253476B80(a1, (uint64_t)v42);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v43 = a2;
  uint64_t v22 = a2;
  uint64_t v23 = v34;
  v21(v20, v22, a7);
  sub_2534629F4(v23, (uint64_t)v17);
  sub_253530A44(a6, (uint64_t)v41);
  uint64_t v24 = v38;
  uint64_t v25 = sub_2535356F4((uint64_t)v42, (uint64_t)v20, 0, (uint64_t)v17, v36, v37, (uint64_t)v41, a7, v35);
  if (v24)
  {
    sub_253530AA0(a6);
    sub_2535353D8(v23, (uint64_t *)&unk_26B248C70);
    uint64_t v26 = sub_2535355C0();
    v27(v26);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v39);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v13);
    uint64_t v28 = v40;
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v29 = v25;
    sub_253530AA0(a6);
    sub_2535353D8(v23, (uint64_t *)&unk_26B248C70);
    uint64_t v30 = sub_2535355C0();
    v31(v30);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v39);
    uint64_t v28 = v40;
    *(void *)(v40 + 56) = v29;
  }
  return v28;
}

uint64_t sub_253530A44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_253530AA0(uint64_t a1)
{
  return a1;
}

uint64_t MutableToolbox.replaceClientActions(clientIdentifier:toolDefinitions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_25353546C((uint64_t)sub_253530B10);
}

uint64_t sub_253530B10()
{
  sub_253477168();
  v0[6] = *(void *)(*(void *)(v0[5] + 56) + 16);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253530BC0;
  sub_25353557C(v0[4]);
  return sub_2535495A8();
}

uint64_t sub_253530BC0()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253535478();
  *uint64_t v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    swift_release();
    sub_2534771C0();
    return v10();
  }
}

uint64_t sub_253530CC4()
{
  sub_253477168();
  swift_release();
  sub_2534771C0();
  return v0();
}

uint64_t sub_253530D20(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  *(_OWORD *)(v5 + 64) = *a3;
  return sub_25353546C((uint64_t)sub_253530D44);
}

uint64_t sub_253530D44()
{
  *(void *)(v0 + 80) = *(void *)(*(void *)(*(void *)(v0 + 56) + 56) + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253530E0C;
  sub_25353557C(*(void *)(v0 + 32));
  return sub_25354A31C();
}

uint64_t sub_253530E0C()
{
  sub_253477168();
  sub_253477088();
  sub_253535478();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253535478();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    sub_2534771C0();
    return v10();
  }
}

uint64_t sub_253530F24()
{
  sub_2534771C0();
  return v0();
}

uint64_t sub_253530F40(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = v3;
  *(void *)(v4 + 32) = a1;
  *(_OWORD *)(v4 + 56) = *a2;
  return sub_25353546C((uint64_t)sub_253530F64);
}

uint64_t sub_253530F64()
{
  *(void *)(v0 + 72) = *(void *)(*(void *)(*(void *)(v0 + 48) + 56) + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253531028;
  sub_25353557C(*(void *)(v0 + 32));
  return sub_25354ACD4();
}

uint64_t sub_253531028()
{
  sub_253477168();
  sub_253477088();
  sub_253535478();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253535478();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    sub_2534771C0();
    return v10();
  }
}

uint64_t sub_253531140()
{
  sub_2534771C0();
  return v0();
}

uint64_t MutableToolbox.loadAllTools(isCancelled:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_25353546C((uint64_t)sub_253531174);
}

uint64_t sub_253531174()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 56);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = v2[38];
  sub_253472068(v2 + 34, v2[37]);
  uint64_t v4 = sub_253535588();
  uint64_t v6 = v5(v4, v3);
  *(void *)(v0 + 40) = v6;
  *(void *)(v0 + 48) = v7;
  swift_retain();
  unint64_t v8 = sub_25354BD40();
  unint64_t v10 = v9;
  swift_release();
  *(void *)(v0 + 56) = v8;
  *(void *)(v0 + 64) = v10;
  uint64_t v11 = sub_25351C5CC();
  sub_25348A9C8(v11, v12);
  sub_2535356A4();
  if (!v14 & v13)
  {
    uint64_t v15 = sub_25351C5CC();
    sub_25352C314(v15, v16);
    sub_25353568C();
    char v18 = 0;
  }
  else
  {
    sub_2535342E8(v8, v10);
    uint64_t v17 = sub_25351C5CC();
    char v18 = MEMORY[0x25A264440](v17);
    sub_25353568C();
    uint64_t v19 = sub_25351C5CC();
    sub_253487D84(v19, v20);
  }
  *(unsigned char *)(v0 + 104) = v18 & 1;
  swift_retain();
  sub_25354BD70();
  sub_2535355A4();
  sub_25352C314(v6, v8);
  if (v8 >> 60 == 15)
  {
    swift_retain();
    sub_25354BDA0();
    sub_2535355A4();
    BOOL v21 = v8 >> 60 == 15;
    sub_25352C314(v6, v8);
  }
  else
  {
    BOOL v21 = 0;
  }
  *(unsigned char *)(v0 + 105) = v21;
  uint64_t v22 = *(void *)(v1 + 16) + 144;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_25353134C;
  uint64_t v24 = *(void *)(v0 + 16);
  return sub_253531800(v22, v24, v18 & 1);
}

uint64_t sub_25353134C()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253535478();
  *uint64_t v6 = v5;
  v3[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  else
  {
    unint64_t v10 = (void *)swift_task_alloc();
    v3[11] = (uint64_t)v10;
    *unint64_t v10 = v5;
    v10[1] = sub_253531488;
    uint64_t v11 = sub_25353557C(v3[2]);
    return sub_253533340(v11, v12);
  }
}

uint64_t sub_253531488()
{
  sub_253477168();
  sub_253477088();
  sub_253535478();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253535478();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_253531568()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 && (*(unsigned char *)(v1 + 16) & 1) != 0)
  {
    uint64_t v6 = *(void *)(v0 + 96);
    swift_retain();
    sub_25354BEC8();
    uint64_t v8 = *(void *)(v0 + 56);
    unint64_t v7 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 40);
    unint64_t v9 = *(void *)(v0 + 48);
    if (!v6)
    {
      sub_253487D84(*(void *)(v0 + 40), *(void *)(v0 + 48));
      sub_25352C314(v8, v7);
      goto LABEL_13;
    }
    swift_release();
    sub_25352C314(v8, v7);
    uint64_t v4 = v10;
    unint64_t v5 = v9;
LABEL_8:
    sub_253487D84(v4, v5);
    sub_25353556C();
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 40);
  swift_retain();
  sub_2534ACF74();
  sub_25354BDD0();
  swift_release();
  if (v2)
  {
    sub_25352C314(*(void *)(v0 + 56), *(void *)(v0 + 64));
    uint64_t v4 = sub_2534ACF74();
    goto LABEL_8;
  }
  sub_253535650();
  sub_25354BE10();
  sub_253535588();
  swift_release();
  if (v3 <= 1000 && *(unsigned char *)(v0 + 105) == 0)
  {
    uint64_t v14 = *(void *)(v0 + 56);
    unint64_t v15 = *(void *)(v0 + 64);
    sub_253487D84(*(void *)(v0 + 40), *(void *)(v0 + 48));
    sub_25352C314(v14, v15);
    goto LABEL_20;
  }
  swift_retain();
  sub_253B05730();
  sub_253487D84(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_25353568C();
LABEL_13:
  swift_release();
LABEL_20:
  sub_253529DC4();
LABEL_9:
  return v11();
}

uint64_t sub_25353172C()
{
  sub_253477168();
  uint64_t v1 = v0[7];
  unint64_t v2 = v0[8];
  sub_253487D84(v0[5], v0[6]);
  sub_25352C314(v1, v2);
  sub_2534771C0();
  return v3();
}

uint64_t sub_253531798()
{
  sub_253477168();
  sub_25352C314(*(void *)(v0 + 56), *(void *)(v0 + 64));
  uint64_t v1 = sub_2534ACF74();
  sub_253487D84(v1, v2);
  sub_2534771C0();
  return v3();
}

uint64_t sub_253531800(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 368) = a3;
  *(void *)(v4 + 64) = a1;
  uint64_t v5 = sub_253B09720();
  *(void *)(v4 + 88) = v5;
  *(void *)(v4 + 96) = *(void *)(v5 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  sub_253462A5C(&qword_26B24A2F0);
  *(void *)(v4 + 112) = swift_task_alloc();
  uint64_t v6 = sub_253B08CC0();
  *(void *)(v4 + 120) = v6;
  *(void *)(v4 + 128) = *(void *)(v6 - 8);
  *(void *)(v4 + 136) = swift_task_alloc();
  *(void *)(v4 + 144) = swift_task_alloc();
  *(void *)(v4 + 152) = type metadata accessor for ToolboxVersion(0);
  *(void *)(v4 + 160) = swift_task_alloc();
  uint64_t v7 = sub_253B089F0();
  *(void *)(v4 + 168) = v7;
  *(void *)(v4 + 176) = *(void *)(v7 - 8);
  *(void *)(v4 + 184) = swift_task_alloc();
  *(void *)(v4 + 192) = swift_task_alloc();
  *(void *)(v4 + 200) = swift_task_alloc();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  *(void *)(v4 + 208) = swift_task_alloc();
  uint64_t v8 = sub_253B055C0();
  *(void *)(v4 + 216) = v8;
  *(void *)(v4 + 224) = *(void *)(v8 - 8);
  *(void *)(v4 + 232) = swift_task_alloc();
  *(void *)(v4 + 240) = swift_task_alloc();
  sub_253462A5C(&qword_269CDE7C8);
  *(void *)(v4 + 248) = swift_task_alloc();
  *(void *)(v4 + 256) = swift_task_alloc();
  *(void *)(v4 + 264) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_253531AF4, 0, 0);
}

uint64_t sub_253531AF4()
{
  uint64_t v120 = v0;
  *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 80) + 56);
  swift_retain();
  sub_25354C490();
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  swift_release();
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 216);
    sub_253B05560();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v5) != 1)
    {
      uint64_t v18 = *(void *)(v0 + 256);
      uint64_t v17 = *(void *)(v0 + 264);
      uint64_t v19 = *(void *)(v0 + 120);
      (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 240), *(void *)(v0 + 208), *(void *)(v0 + 216));
      sub_253535668();
      v20();
      sub_253B08CB0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v18, 0, 1, v19);
      uint64_t v21 = v18;
      unint64_t v22 = v4;
      sub_25353531C(v21, v17, &qword_269CDE7C8);
      sub_253B08300();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v23 = sub_253B089D0();
      os_log_type_t v24 = sub_253B09D60();
      BOOL v25 = os_log_type_enabled(v23, v24);
      unint64_t v10 = *(void *)(v0 + 240);
      uint64_t v26 = *(void *)(v0 + 200);
      uint64_t v27 = *(void *)(v0 + 176);
      uint64_t v111 = *(void *)(v0 + 168);
      if (v25)
      {
        uint64_t v28 = *(void *)(v0 + 80);
        unint64_t v10 = swift_slowAlloc();
        *(void *)&long long v119 = swift_slowAlloc();
        *(_DWORD *)unint64_t v10 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 48) = sub_253464DF8((uint64_t)v2, v22, (uint64_t *)&v119);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v10 + 12) = 2080;
        uint64_t v106 = v26;
        os_log_t v108 = (os_log_t)v22;
        sub_253472068((void *)(v28 + 16), *(void *)(v28 + 40));
        sub_2535355E4();
        sub_2535355D8();
        v29();
        uint64_t v30 = sub_253B06CD0();
        unint64_t v32 = v31;
        sub_253B06CE0();
        sub_25352E898();
        sub_2534659CC();
        v33();
        *(void *)(v0 + 56) = sub_253464DF8(v30, v32, (uint64_t *)&v119);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_253460000, v23, v24, "MutableToolbox: using %s as toolbox version for %s.", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v106, v111);
        sub_2534B3470();
        v34();
        uint64_t v16 = (uint64_t)v108;
      }
      else
      {

        sub_253535674();
        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v111);
        sub_2534B3470();
        v35();
        uint64_t v16 = v22;
      }
      goto LABEL_9;
    }
    uint64_t v7 = *(void *)(v0 + 208);
    swift_bridgeObjectRelease();
    sub_2535353D8(v7, (uint64_t *)&unk_26B248CB0);
  }
  uint64_t v8 = *(void **)(v0 + 64);
  uint64_t v9 = v8[3];
  unint64_t v10 = v8[4];
  sub_253472068(v8, v9);
  uint64_t v11 = sub_253B08CA0();
  char v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v10 + 104);
  uint64_t v13 = sub_253535424(&qword_269CDE7D0, MEMORY[0x263F80268]);
  v12(v11, v11, v13, v9, v10);
  uint64_t v14 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 120);
  sub_25353531C(*(void *)(v0 + 248), v14, &qword_269CDE7C8);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v15))
  {
    unint64_t v2 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 144), *(void *)(v0 + 264), *(void *)(v0 + 120));
    unint64_t v2 = sub_253534128();
    uint64_t v16 = v85;
    uint64_t v86 = sub_253535554();
    v87(v86);
  }
LABEL_9:
  *(void *)(v0 + 280) = v16;
  uint64_t v36 = *(void *)(v0 + 264);
  uint64_t v37 = *(void *)(v0 + 120);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v36, 1, v37))
  {
    uint64_t v38 = 0;
    unint64_t v39 = 0xF000000000000000;
  }
  else
  {
    uint64_t v51 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), v36, v37);
    uint64_t v52 = (void *)MEMORY[0x25A269750](v51);
    sub_253543D6C();
    uint64_t v37 = *(void *)(v0 + 120);
    unint64_t v39 = *((void *)&v119 + 1);
    unint64_t v10 = v119;
    sub_2534B3470();
    v53();
    uint64_t v38 = v10;
  }
  *(void *)(v0 + 288) = v38;
  *(void *)(v0 + 296) = v39;
  swift_retain();
  sub_25354BDA0();
  sub_2535355A4();
  *(void *)(v0 + 304) = v37;
  *(void *)(v0 + 312) = v10;
  BOOL v40 = v10 >> 60 == 15 || v39 >> 60 == 15;
  unint64_t v109 = v10;
  unint64_t v110 = v39;
  uint64_t v112 = v37;
  if (v40) {
    goto LABEL_20;
  }
  sub_2535342E8(v37, v10);
  sub_2535342E8(v38, v39);
  if ((MEMORY[0x25A264440](v37, v10, v38, v39) & 1) == 0)
  {
    sub_25352C314(v38, v39);
    sub_25352C314(v37, v10);
LABEL_20:
    int v113 = 0;
    goto LABEL_23;
  }
  sub_253B08300();
  swift_retain_n();
  uint64_t v41 = sub_253B089D0();
  os_log_type_t v42 = sub_253B09D60();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = *(void *)(v0 + 80);
    os_log_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    buf = v44;
    *(_DWORD *)os_log_t v44 = 136315138;
    *(void *)&long long v119 = v104;
    os_log_type_t v102 = v42;
    sub_253472068((void *)(v43 + 16), *(void *)(v43 + 40));
    sub_2535355E4();
    sub_2535355D8();
    v45();
    uint64_t v46 = sub_253B06CD0();
    unint64_t v48 = v47;
    sub_253B06CE0();
    sub_25352E898();
    sub_2534659CC();
    v49();
    *(void *)(v0 + 40) = sub_253464DF8(v46, v48, (uint64_t *)&v119);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_253460000, v41, v102, "ToolEmbeddingDatabase: %s. Stored toolDefinitionsVersion is equal to the passed in version.", buf, 0xCu);
    int v113 = 1;
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();
    sub_25352C314(v112, v109);
    sub_25352C314(v38, v39);

    sub_2534B3470();
    v50();
  }
  else
  {
    sub_25352C314(v112, v10);
    sub_253535674();
    sub_25352C314(v38, v39);

    sub_2534B3470();
    v54();
    int v113 = 1;
  }
LABEL_23:
  swift_retain();
  uint64_t v55 = sub_25354C4FC();
  unint64_t v57 = v56;
  swift_release();
  *(void *)(v0 + 320) = v55;
  *(void *)(v0 + 328) = v57;
  if (qword_26B248FC0 != -1) {
    swift_once();
  }
  os_log_t v58 = *(uint64_t **)(v0 + 112);
  long long v119 = xmmword_26B248FA8;
  unsigned __int8 v118 = 1;
  swift_bridgeObjectRetain();
  AssetsManager.info(for:locale:in:)(&v118, 0x53555F6E65, 0xE500000000000000, 0, 0, v58);
  swift_bridgeObjectRelease();
  uint64_t v59 = type metadata accessor for AssetInfo();
  int v60 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v58, 1, v59);
  uint64_t v61 = *(void *)(v0 + 112);
  if (v60 == 1)
  {
    sub_2535353D8(*(void *)(v0 + 112), &qword_26B24A2F0);
LABEL_31:
    uint64_t v65 = 0;
    unint64_t v67 = 0xF000000000000000;
    goto LABEL_32;
  }
  uint64_t v62 = *(void *)(v61 + *(int *)(v59 + 24));
  swift_bridgeObjectRetain();
  sub_25353537C(v61);
  if (!v62) {
    goto LABEL_31;
  }
  sub_25346628C(0x6E6F6973726576, 0xE700000000000000, v62);
  uint64_t v64 = v63;
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_31;
  }
  sub_253B09710();
  uint64_t v65 = sub_253B096F0();
  unint64_t v67 = v66;
  swift_bridgeObjectRelease();
  sub_2534B3470();
  v68();
  if (v67 >> 60 != 15)
  {
    if (v57 >> 60 != 15)
    {
      sub_2535342E8(v65, v67);
      sub_2535342E8(v55, v57);
      int v88 = MEMORY[0x25A264440](v65, v67, v55, v57);
      sub_25352C314(v55, v57);
      sub_25352C314(v65, v67);
      if ((v113 & v88 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }
LABEL_39:
    sub_2535342E8(v55, v57);
    sub_2535342E8(v65, v67);
    sub_25352C314(v65, v67);
    sub_25352C314(v55, v57);
    goto LABEL_40;
  }
LABEL_32:
  if (v57 >> 60 != 15) {
    goto LABEL_39;
  }
  if (!v113) {
    goto LABEL_40;
  }
LABEL_34:
  if (*(unsigned char *)(v0 + 368) == 1)
  {
    swift_bridgeObjectRelease();
    sub_253B08300();
    swift_retain_n();
    uint64_t v69 = sub_253B089D0();
    uint64_t v115 = v69;
    os_log_type_t v114 = sub_253B09D60();
    if (os_log_type_enabled(v69, v114))
    {
      uint64_t v70 = *(void *)(v0 + 80);
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136315138;
      *(void *)&long long v119 = log;
      uint64_t v107 = v38;
      sub_253472068((void *)(v70 + 16), *(void *)(v70 + 40));
      sub_253535588();
      sub_2535355D8();
      v72();
      uint64_t v73 = sub_253B06CD0();
      unint64_t v75 = v74;
      sub_253B06CE0();
      sub_25352E898();
      sub_2534659CC();
      v76();
      *(void *)(v0 + 32) = sub_253464DF8(v73, v75, (uint64_t *)&v119);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_253460000, v115, v114, "ToolEmbeddingDatabase: %s. Stored toolDenyListVersion, ToolKit, and PG delegate versions are up to date.", v71, 0xCu);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      sub_25352C314(v107, v110);
      sub_25352C314(v55, v57);
      sub_25352C314(v65, v67);
      sub_25352C314(v112, v109);
      sub_2534659CC();
    }
    else
    {
      sub_25352C314(v112, v109);
      sub_25352C314(v38, v110);
      sub_25352C314(v65, v67);
      sub_25352C314(v55, v57);
      sub_253535674();

      sub_2534B3470();
    }
    v77();
LABEL_59:
    uint64_t v100 = *(void *)(v0 + 264);
    sub_2535354B4();
    sub_2535353D8(v100, &qword_269CDE7C8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_253529DC4();
    return v101();
  }
LABEL_40:
  *(void *)(v0 + 336) = v65;
  *(void *)(v0 + 344) = v67;
  if (!v16)
  {
    uint64_t v81 = *(void *)(v0 + 72);
    if (v81 && (*(unsigned char *)(v81 + 16) & 1) != 0)
    {
      sub_253535650();
      sub_25354C638();
      swift_release();
      swift_retain();
      sub_25354C674();
      unint64_t v96 = *(void *)(v0 + 344);
      uint64_t v117 = *(void *)(v0 + 336);
      uint64_t v97 = *(void *)(v0 + 320);
      uint64_t v99 = *(void *)(v0 + 288);
      unint64_t v98 = *(void *)(v0 + 296);
      sub_25352C314(*(void *)(v0 + 304), *(void *)(v0 + 312));
      sub_25352C314(v99, v98);
      sub_25352C314(v117, v96);
      sub_253535528(v97);
    }
    else
    {
      unint64_t v82 = *(void *)(v0 + 296);
      sub_2535356A4();
      if (!(!v84 & v83))
      {
        sub_2535342E8(*(void *)(v0 + 288), v82);
        swift_retain();
        sub_25354C57C();
        uint64_t v90 = *(void *)(v0 + 288);
        unint64_t v89 = *(void *)(v0 + 296);
        swift_release();
        sub_25352C314(v90, v89);
        unint64_t v67 = *(void *)(v0 + 344);
      }
      if (v67 >> 60 == 15)
      {
        uint64_t v91 = sub_2535354D8();
      }
      else
      {
        sub_2535342E8(*(void *)(v0 + 336), v67);
        swift_retain();
        sub_25354C5BC();
        uint64_t v94 = *(void *)(v0 + 336);
        unint64_t v93 = *(void *)(v0 + 344);
        uint64_t v116 = *(void *)(v0 + 320);
        uint64_t v95 = *(void *)(v0 + 288);
        sub_25352C314(*(void *)(v0 + 304), *(void *)(v0 + 312));
        sub_253535484(v95);
        sub_253535528(v116);
        uint64_t v91 = v94;
        unint64_t v92 = v93;
      }
      sub_25352C314(v91, v92);
    }
    goto LABEL_59;
  }
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  uint64_t v78 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v78;
  *uint64_t v78 = v0;
  v78[1] = sub_253532CAC;
  uint64_t v79 = *(void *)(v0 + 72);
  return sub_253530D20((uint64_t)v2, v16, (_OWORD *)(v0 + 16), v79);
}

uint64_t sub_253532CAC()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253535478();
  *uint64_t v6 = v5;
  *(void *)(v3 + 360) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_253532D9C()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[9];
  if (v2 && (*(unsigned char *)(v2 + 16) & 1) != 0)
  {
    sub_253535650();
    sub_25354C638();
    if (v1)
    {
      uint64_t v12 = v0[40];
      unint64_t v11 = v0[41];
      uint64_t v14 = v0[38];
      unint64_t v13 = v0[39];
      uint64_t v15 = v0[36];
      unint64_t v36 = v0[37];
      uint64_t v7 = v0[33];
      swift_release();
      sub_25353568C();
      sub_25352C314(v12, v11);
      sub_25352C314(v14, v13);
      uint64_t v9 = v15;
      unint64_t v10 = v36;
      goto LABEL_14;
    }
    swift_release();
    swift_retain();
    sub_25354C674();
    uint64_t v29 = v0[42];
    unint64_t v28 = v0[43];
    uint64_t v37 = v0[40];
    uint64_t v31 = v0[36];
    unint64_t v30 = v0[37];
    sub_25352C314(v0[38], v0[39]);
    sub_25352C314(v31, v30);
    sub_25352C314(v29, v28);
    sub_253535528(v37);
  }
  else
  {
    sub_2535356A4();
    if (!(!v4 & v3))
    {
      sub_2535355F8();
      sub_25354C57C();
      if (v1)
      {
        unint64_t v35 = v0[39];
        uint64_t v6 = v0[36];
        unint64_t v5 = v0[37];
        uint64_t v7 = v0[33];
        swift_release();
        sub_25352C314(v6, v5);
        uint64_t v8 = sub_2535356C8();
        sub_25352C314(v8, v35);
        uint64_t v9 = v6;
        unint64_t v10 = v5;
LABEL_14:
        sub_25352C314(v9, v10);
        sub_2535353D8(v7, &qword_269CDE7C8);
        sub_253535594();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_2534771C0();
        goto LABEL_18;
      }
      uint64_t v17 = v0[36];
      unint64_t v16 = v0[37];
      swift_release();
      sub_25352C314(v17, v16);
      uint64_t v1 = 0;
    }
    if (v0[43] >> 60 == 15)
    {
      uint64_t v18 = sub_2535354D8();
    }
    else
    {
      sub_2535355F8();
      sub_25354C5BC();
      uint64_t v21 = v0[42];
      unint64_t v20 = v0[43];
      uint64_t v22 = v0[40];
      uint64_t v24 = v0[38];
      unint64_t v23 = v0[39];
      uint64_t v26 = v0[36];
      unint64_t v25 = v0[37];
      if (v1)
      {
        uint64_t v7 = v0[33];
        unint64_t v27 = v0[41];
        swift_release();
        sub_25352C314(v21, v20);
        sub_25352C314(v21, v20);
        sub_25352C314(v22, v27);
        sub_25352C314(v24, v23);
        uint64_t v9 = v26;
        unint64_t v10 = v25;
        goto LABEL_14;
      }
      uint64_t v33 = v0[40];
      sub_25352C314(v0[38], v0[39]);
      sub_253535484(v26);
      sub_253535528(v33);
      uint64_t v18 = v21;
      unint64_t v19 = v20;
    }
    sub_25352C314(v18, v19);
  }
  sub_2535353D8(v0[33], &qword_269CDE7C8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
LABEL_18:
  return v32();
}

uint64_t sub_2535331E0()
{
  uint64_t v1 = v0[42];
  unint64_t v2 = v0[43];
  uint64_t v4 = v0[40];
  unint64_t v3 = v0[41];
  uint64_t v6 = v0[36];
  unint64_t v5 = v0[37];
  uint64_t v7 = v0[33];
  sub_25352C314(v0[38], v0[39]);
  sub_25352C314(v6, v5);
  sub_25352C314(v1, v2);
  sub_25352C314(v4, v3);
  sub_2535353D8(v7, &qword_269CDE7C8);
  sub_253535594();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v8();
}

uint64_t sub_253533340(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 224) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = type metadata accessor for ToolboxVersion(0);
  *(void *)(v3 + 72) = swift_task_alloc();
  uint64_t v4 = sub_253B089F0();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  uint64_t v5 = sub_253B09350();
  *(void *)(v3 + 104) = v5;
  *(void *)(v3 + 112) = *(void *)(v5 - 8);
  *(void *)(v3 + 120) = swift_task_alloc();
  *(void *)(v3 + 128) = sub_253462A5C(&qword_269CDE7B8);
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2535334F8, 0, 0);
}

uint64_t sub_2535334F8()
{
  uint64_t v84 = v0;
  if (qword_269CDA7D0 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_253B08400();
  sub_253462BD4(v1, (uint64_t)qword_269D7B660);
  type metadata accessor for SharedAssistantSchemaProvider();
  sub_253535424((unint64_t *)&qword_269CDB0D8, (void (*)(uint64_t))type metadata accessor for SharedAssistantSchemaProvider);
  sub_253B083C0();
  uint64_t v2 = sub_253B093B0();
  *(void *)(v0 + 176) = v2;
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v81 = *(void *)(v0 + 128);
    uint64_t v82 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v5 = sub_253A71D6C(v2);
    uint64_t v7 = v6;
    char v9 = v8 & 1;
    uint64_t v64 = v2;
    uint64_t v65 = v0;
    do
    {
      uint64_t v79 = v3;
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v70 = *(void *)(v0 + 152);
      uint64_t v72 = *(void *)(v0 + 136);
      uint64_t v77 = v5;
      uint64_t type = v7;
      char v74 = v9 & 1;
      sub_253A72FA4(v11, v11 + *(int *)(v81 + 48), v5, v7, v9 & 1, v2);
      uint64_t v13 = sub_253B09440();
      sub_253486600();
      uint64_t v69 = v14;
      unint64_t v66 = *(void (**)(void))(v14 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v10, v11, v13);
      uint64_t v15 = sub_253B08A60();
      sub_253486600();
      uint64_t v73 = v16;
      uint64_t v17 = *(void (**)(void))(v16 + 16);
      sub_253535668();
      v17();
      sub_25353531C(v10, v70, &qword_269CDE7B8);
      sub_2535353D8(v11, &qword_269CDE7B8);
      uint64_t v71 = v12 + *(int *)(v81 + 48);
      ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v12, v70, v13);
      sub_253535668();
      v17();
      uint64_t v18 = sub_253B09400();
      uint64_t v67 = v19;
      uint64_t v68 = v18;
      unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v20(v12, v13);
      uint64_t v21 = v72 + *(int *)(v81 + 48);
      v66();
      sub_253535668();
      v22();
      sub_253B09410();
      v20(v72, v13);
      sub_253B09340();
      sub_2534659CC();
      v23();
      v83[0] = v68;
      v83[1] = v67;
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v24(v21, v15);
      v24(v71, v15);
      sub_2535353D8(v70, &qword_269CDE7B8);
      uint64_t v4 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2539E6C84();
        uint64_t v4 = v82;
      }
      unint64_t v25 = *(void *)(v4 + 16);
      uint64_t v2 = v64;
      uint64_t v0 = v65;
      if (v25 >= *(void *)(v4 + 24) >> 1)
      {
        sub_2539E6C84();
        uint64_t v4 = v82;
      }
      *(void *)(v4 + 16) = v25 + 1;
      uint64_t v26 = v4 + 16 * v25;
      *(void *)(v26 + 32) = v68;
      *(void *)(v26 + 40) = v67;
      uint64_t v27 = sub_253A71D70(v77);
      uint64_t v29 = v28;
      char v9 = v30 & 1;
      sub_253535310(v77, type, v74);
      uint64_t v5 = v27;
      uint64_t v7 = v29;
      --v3;
    }
    while (v79 != 1);
    sub_253535310(v27, v29, v9);
  }
  v83[0] = v4;
  swift_bridgeObjectRetain();
  sub_2535306AC(v83);
  uint64_t v31 = *(void *)(v0 + 56);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v83[0];
  sub_253462A5C(&qword_269CDC550);
  sub_2534D359C();
  unint64_t v32 = (void *)sub_253B096A0();
  swift_release();
  static ToolBoxUtility.stableHashData(hashableString:)();
  sub_253535588();
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_253B05450();
  unint64_t v35 = v34;

  *(void *)(v0 + 184) = v33;
  *(void *)(v0 + 192) = v35;
  *(void *)(v0 + 200) = *(void *)(v31 + 56);
  sub_253535650();
  uint64_t v36 = sub_25354BD70();
  unint64_t v38 = v37;
  swift_release();
  sub_25348A9C8(v33, v35);
  sub_2535356A4();
  if (!v40 & v39)
  {
    sub_25352C314(v36, v38);
    sub_25352C314(v33, v35);
  }
  else
  {
    char v47 = *(unsigned char *)(v0 + 224);
    sub_2535342E8(v36, v38);
    char v48 = MEMORY[0x25A264440](v36, v38, v33, v35);
    sub_253487D84(v33, v35);
    sub_25352C314(v36, v38);
    sub_25352C314(v36, v38);
    if (v48 & 1) != 0 && (v47)
    {
      swift_bridgeObjectRelease();
      sub_253B08300();
      swift_retain_n();
      os_log_type_t v49 = sub_253B089D0();
      os_log_type_t v50 = sub_253B09D60();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v53 = *(void *)(v0 + 88);
      uint64_t v52 = *(void *)(v0 + 96);
      uint64_t v54 = *(void *)(v0 + 80);
      if (v51)
      {
        uint64_t v78 = v49;
        uint64_t v55 = *(void *)(v0 + 56);
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        *(_DWORD *)unint64_t v56 = 136315138;
        v83[0] = v75;
        uint64_t v80 = v54;
        sub_253472068((void *)(v55 + 16), *(void *)(v55 + 40));
        sub_2535355D8();
        v57();
        uint64_t v58 = sub_253B06CD0();
        unint64_t v60 = v59;
        sub_253B06CE0();
        sub_25352E898();
        sub_2534659CC();
        v61();
        *(void *)(v0 + 40) = sub_253464DF8(v58, v60, v83);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_253460000, v78, v50, "ToolEmbeddingDatabase: %s replaceTools is a no-op. Stored assistantSchemas version and PG delegate version are equal to the passed in versions.", v56, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();

        sub_253487D84(v33, v35);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v80);
      }
      else
      {
        sub_253487D84(v33, v35);
        sub_253535674();

        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_253529DC4();
      sub_25353550C();
      __asm { BRAA            X1, X16 }
    }
  }
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v41;
  void *v41 = v0;
  v41[1] = sub_253533DE8;
  sub_25353550C();
  return sub_253530F40(v42, v43, v44);
}

uint64_t sub_253533DE8()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253535478();
  *uint64_t v6 = v5;
  *(void *)(v3 + 216) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_253533ED8()
{
  uint64_t v1 = v0[6];
  if (v1 && (*(unsigned char *)(v1 + 16) & 1) != 0)
  {
    uint64_t v2 = v0[27];
    swift_retain();
    sub_25354C454();
  }
  else
  {
    uint64_t v2 = v0[27];
    swift_retain();
    sub_25354C414();
  }
  uint64_t v4 = v0[23];
  unint64_t v3 = v0[24];
  if (v2)
  {
    swift_release();
    sub_253487D84(v4, v3);
    sub_253535630();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_25353556C();
  }
  else
  {
    sub_253487D84(v0[23], v0[24]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_253529DC4();
  }
  return v5();
}

uint64_t sub_25353406C()
{
  sub_253487D84(*(void *)(v0 + 184), *(void *)(v0 + 192));
  sub_253535630();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v1();
}

char *sub_253534128()
{
  uint64_t v1 = sub_253B09720();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253B050E0();
  swift_allocObject();
  sub_253B050D0();
  sub_253B08CC0();
  sub_253535424(&qword_269CDE7E0, MEMORY[0x263F80270]);
  uint64_t v4 = sub_253B050B0();
  unint64_t v6 = v5;
  swift_release();
  if (!v0)
  {
    sub_253B09710();
    uint64_t v7 = sub_253B09700();
    if (v8)
    {
      uint64_t v3 = (char *)v7;
    }
    else
    {
      sub_25352634C();
      swift_allocError();
      *(void *)uint64_t v10 = 0xD00000000000007FLL;
      *(void *)(v10 + 8) = 0x8000000253B0CA60;
      *(_OWORD *)(v10 + 16) = xmmword_253B33720;
      *(void *)(v10 + 32) = 0x8000000253B0CAE0;
      swift_willThrow();
    }
    sub_253487D84(v4, v6);
  }
  return v3;
}

uint64_t sub_2535342E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25348A9C8(a1, a2);
  }
  return a1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MutableToolbox.count()()
{
  swift_retain();
  sub_2535362B4();
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MutableToolbox.countToolDefinitions()()
{
  return QueryableToolbox.countToolDefinitions()();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MutableToolbox.count(toolType:clientIdentifier:)(IntelligenceFlowPlannerSupport::ToolBoxToolType toolType, Swift::String_optional clientIdentifier)
{
  char v3 = *(unsigned char *)toolType;
  return QueryableToolbox.count(toolType:clientIdentifier:)((IntelligenceFlowPlannerSupport::ToolBoxToolType)&v3, clientIdentifier);
}

uint64_t MutableToolbox.allowList(toolDefinitions:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_25353546C((uint64_t)sub_2535343B4);
}

uint64_t sub_2535343B4()
{
  sub_253477168();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_25353444C;
  uint64_t v2 = sub_25353557C(*(void *)(v0 + 16));
  return QueryableToolbox.allowList(toolDefinitions:)(v2);
}

uint64_t sub_25353444C()
{
  sub_253477168();
  uint64_t v3 = v2;
  sub_253477088();
  uint64_t v4 = *v1;
  sub_253535478();
  *unint64_t v5 = v4;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v0) {
    uint64_t v6 = v3;
  }
  return v7(v6);
}

uint64_t MutableToolbox.metadata(enableAllowList:)(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 88) = a1;
  return sub_25353546C((uint64_t)sub_25353453C);
}

uint64_t sub_25353453C()
{
  sub_253477168();
  uint64_t v1 = *(void *)(v0[2] + 56);
  v0[3] = v1;
  v0[4] = *(void *)(v1 + 16);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_2535345EC;
  return sub_25353EF70();
}

uint64_t sub_2535345EC()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v6, v7, v8);
}

uint64_t sub_2535346D8()
{
  sub_253477168();
  v0[8] = *(void *)(v0[3] + 16);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253534780;
  return sub_25353F558();
}

uint64_t sub_253534780(uint64_t a1)
{
  sub_253477088();
  uint64_t v5 = v4;
  sub_253535478();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_253535478();
  void *v8 = v7;
  *(void *)(v5 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v9, v10, v11);
  }
  else
  {
    swift_release();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v13 = *(void *)(v5 + 48);
    return v12(v13, a1);
  }
}

uint64_t sub_2535348AC()
{
  sub_253477168();
  swift_release();
  sub_2534771C0();
  return v0();
}

uint64_t sub_253534908()
{
  sub_253477168();
  swift_bridgeObjectRelease();
  swift_release();
  sub_2534771C0();
  return v0();
}

uint64_t MutableToolbox.deinit()
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  swift_release();
  return v0;
}

uint64_t MutableToolbox.__deallocating_deinit()
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
  swift_release();
  return MEMORY[0x270FA0228](v0, 64, 7);
}

uint64_t type metadata accessor for MutableToolbox()
{
  return self;
}

uint64_t method lookup function for MutableToolbox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MutableToolbox);
}

uint64_t dispatch thunk of MutableToolbox.__allocating_init<A>(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_253534A38(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_2535350A0(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = sub_2539DF21C(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  uint64_t v97 = v6;
  unint64_t v93 = a1;
  if (v3 <= 0)
  {
    uint64_t v98 = MEMORY[0x263F8EE78];
    unint64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      uint64_t v87 = v98;
      uint64_t v88 = *(void *)(v98 + 32 + 16 * v86);
      uint64_t v89 = *(void *)(v98 + 32 + 16 * (v31 - 1) + 8);
      uint64_t result = sub_253535168((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)(v98 + 32 + 16 * (v31 - 1))), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v87 = result;
      }
      if (v86 >= *(void *)(v87 + 16)) {
        goto LABEL_140;
      }
      uint64_t v90 = (void *)(v87 + 32 + 16 * v86);
      *uint64_t v90 = v88;
      v90[1] = v89;
      unint64_t v91 = *(void *)(v87 + 16);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove((void *)(v87 + 32 + 16 * (v31 - 1)), (const void *)(v87 + 32 + 16 * v31), 16 * (v91 - v31));
      uint64_t v98 = v87;
      *(void *)(v87 + 16) = v91 - 1;
      unint64_t v31 = v91 - 1;
      uint64_t v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  uint64_t v98 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      uint64_t v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      uint64_t v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        uint64_t v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = sub_253B0A4C0();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        uint64_t v19 = v15 + 1;
        uint64_t v7 = v15;
        uint64_t v15 = v19;
      }
      while (v19 < v3);
      uint64_t v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = sub_253B0A4C0();
    int v14 = result;
    uint64_t v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      uint64_t v22 = v15;
      uint64_t v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    uint64_t v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      uint64_t v27 = v3;
    }
    else {
      uint64_t v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = v98;
    }
    else
    {
      uint64_t v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = v98;
      do
      {
        uint64_t v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        uint64_t v82 = v9;
        char v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = sub_253B0A4C0();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)char v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      uint64_t v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *(void *)(v28 + 16) + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    unint64_t v30 = *(void *)(v28 + 16);
    unint64_t v29 = *(void *)(v28 + 24);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v29 > 1), v30 + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    *(void *)(v28 + 16) = v31;
    uint64_t v32 = v28 + 32;
    uint64_t v33 = (uint64_t *)(v28 + 32 + 16 * v30);
    *uint64_t v33 = v9;
    v33[1] = v7;
    uint64_t v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    uint64_t v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      unint64_t v39 = v32 + 16 * v31;
      uint64_t v40 = *(void *)(v39 - 64);
      uint64_t v41 = *(void *)(v39 - 56);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(void *)(v39 - 48);
      uint64_t v43 = *(void *)(v39 - 40);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      char v47 = (uint64_t *)(v32 + 16 * (v31 - 2));
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        uint64_t v69 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *(void *)(v28 + 32);
        uint64_t v64 = *(void *)(v28 + 40);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *(void *)(v28 + 32);
      uint64_t v35 = *(void *)(v28 + 40);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    uint64_t v52 = (uint64_t *)(v32 + 16 * (v31 - 2));
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    uint64_t v58 = (uint64_t *)(v32 + 16 * v34);
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    uint64_t v65 = (uint64_t *)(v32 + 16 * v34);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    char v74 = (uint64_t *)(v32 + 16 * v73);
    uint64_t v75 = *v74;
    uint64_t v76 = (void *)(v32 + 16 * v34);
    uint64_t v77 = v76[1];
    uint64_t result = sub_253535168((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *(void *)(v98 + 16)) {
      goto LABEL_125;
    }
    *char v74 = v75;
    *(void *)(v32 + 16 * v73 + 8) = v77;
    unint64_t v78 = *(void *)(v98 + 16);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v32 + 16 * v34), v76 + 2, 16 * (v78 - 1 - v34));
    *(void *)(v98 + 16) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2535350A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = sub_253B0A4C0();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_253535168(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_253524F54(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (sub_253B0A4C0() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_253524F54(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (sub_253B0A4C0() & 1) != 0) {
        break;
      }
      uint64_t v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    uint64_t v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_253524F54(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

uint64_t sub_253535310(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25353531C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  uint64_t v4 = sub_2534ACF74();
  v5(v4);
  return a2;
}

uint64_t sub_25353537C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssetInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2535353D8(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_25352E898();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t sub_253535424(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25353546C(uint64_t a1)
{
  return MEMORY[0x270FA2498](a1, 0, 0);
}

uint64_t sub_253535484(uint64_t a1)
{
  sub_25352C314(a1, v3);
  return sub_25352C314(v2, v1);
}

void sub_2535354B4()
{
  *(void *)(v1 - 112) = *(void *)(v0 + 104);
}

uint64_t sub_2535354D8()
{
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[36];
  unint64_t v2 = v0[37];
  sub_25352C314(v0[38], v0[39]);
  sub_25352C314(v3, v2);
  return v1;
}

uint64_t sub_253535528(uint64_t a1)
{
  sub_25352C314(a1, v1);
  return swift_release();
}

uint64_t sub_253535554()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_25353556C()
{
  return v0 + 8;
}

uint64_t sub_25353557C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_253535588()
{
  return v0;
}

uint64_t sub_2535355A4()
{
  return swift_release();
}

uint64_t sub_2535355C0()
{
  return *(void *)(v0 - 72);
}

uint64_t sub_2535355F8()
{
  sub_2535342E8(v1, v0);
  return swift_retain();
}

uint64_t sub_253535630()
{
  return swift_task_dealloc();
}

uint64_t sub_253535650()
{
  return swift_retain();
}

uint64_t sub_253535674()
{
  return swift_release_n();
}

uint64_t sub_25353568C()
{
  return sub_25352C314(v1, v0);
}

uint64_t sub_2535356B0()
{
  return swift_release();
}

uint64_t sub_2535356C8()
{
  sub_25352C314(v1, v0);
  sub_25352C314(v3, v2);
  return v4;
}

uint64_t sub_2535356F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = swift_allocObject();
  sub_253535DAC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a8, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, vars0);
  return v16;
}

uint64_t QueryableToolbox.toolbox.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_253530A44(*(void *)(v1 + 16) + 144, a1);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> QueryableToolbox.count()()
{
  swift_retain();
  sub_253538640();
  sub_2535362B4();
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> QueryableToolbox.countToolDefinitions()()
{
  swift_retain();
  sub_253538640();
  return sub_253536598(v0, v1, v2);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> QueryableToolbox.count(toolType:clientIdentifier:)(IntelligenceFlowPlannerSupport::ToolBoxToolType toolType, Swift::String_optional clientIdentifier)
{
  sub_253538620();
  swift_retain();
  sub_2535385C8();
  return (Swift::Int)sub_253536900(v2, v3, v4, v5, v6, v7);
}

uint64_t QueryableToolbox.allowList(toolDefinitions:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_25353589C, 0, 0);
}

uint64_t sub_25353589C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_253535938;
  return sub_2535520F8();
}

uint64_t sub_253535938(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

void QueryableToolbox.__allocating_init<A>(delegate:planGenerationDelegate:databasePath:sandboxIdentifier:toolbox:)()
{
  sub_2534847F8();
  uint64_t v30 = v3;
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  uint64_t v7 = v6;
  uint64_t v29 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_253B089F0();
  sub_2534727C4();
  MEMORY[0x270FA5388](v15);
  sub_25346CB04();
  uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  MEMORY[0x270FA5388](v16 - 8);
  sub_2534847E0();
  sub_2534727C4();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v19);
  sub_25346CC6C();
  sub_253476B80(v14, (uint64_t)v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v2, v12, v7);
  sub_253472348(v10, v1, (uint64_t *)&unk_26B248C70);
  sub_253530A44(v27, (uint64_t)v32);
  sub_2535356F4((uint64_t)v33, v2, 1, v1, v29, v30, (uint64_t)v32, v7, v28);
  if (v0)
  {
    sub_253530AA0(v27);
    sub_253472458(v10, (uint64_t *)&unk_26B248C70);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v12, v7);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v14);
  }
  else
  {
    uint64_t v31 = v14;
    swift_getKeyPath();
    swift_retain();
    sub_253B05960();
    swift_release();
    if (v32[0] == 1)
    {
      swift_retain();
      char v20 = sub_25354C6B0();
      swift_release();
      if ((v20 & 1) == 0)
      {
        swift_release();
        sub_253B08300();
        uint64_t v21 = sub_253B089D0();
        os_log_type_t v22 = sub_253B09D80();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl(&dword_253460000, v21, v22, "QueryableToolbox: Tried to initialize the QueryableToolbox, but the PG delegate version does not match the stored one. Try repopulating the toolbox.", v23, 2u);
          sub_2534659B4();
        }

        sub_2534659CC();
        v24();
        sub_2535382C4();
        swift_allocError();
        *uint64_t v25 = 8;
        swift_willThrow();
      }
    }
    sub_253530AA0(v27);
    sub_253472458(v10, (uint64_t *)&unk_26B248C70);
    sub_2534659CC();
    v26();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v31);
    swift_release();
  }
  sub_2534847C8();
}

void sub_253535DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_2534847F8();
  uint64_t v24 = v21;
  uint64_t v82 = v25;
  uint64_t v81 = v26;
  uint64_t v80 = v27;
  uint64_t v29 = v28;
  int v79 = v30;
  uint64_t v88 = v31;
  uint64_t v33 = v32;
  uint64_t v34 = *v21;
  uint64_t v84 = v35;
  sub_2534727C4();
  uint64_t v75 = v36;
  MEMORY[0x270FA5388](v37);
  sub_25346CB04();
  uint64_t v77 = v38;
  uint64_t v39 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  MEMORY[0x270FA5388](v39 - 8);
  sub_2534B34A4();
  sub_253B05390();
  sub_2534727C4();
  uint64_t v41 = v40;
  uint64_t v43 = MEMORY[0x270FA5388](v42);
  uint64_t v76 = (char *)v69 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  unint64_t v46 = (char *)v69 - v45;
  uint64_t v48 = v47;
  sub_253472348(v29, v23, (uint64_t *)&unk_26B248C70);
  sub_253476B80((uint64_t)v33, (uint64_t)v87);
  int v49 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v23, 1, v48);
  v69[1] = v34;
  uint64_t v78 = v48;
  uint64_t v50 = v41;
  if (v49 == 1)
  {
    sub_253472068(v87, v87[3]);
    ToolboxDelegate.storagePath()();
    sub_253472458(v23, (uint64_t *)&unk_26B248C70);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v46, v23, v48);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v87);
  uint64_t v51 = v33[3];
  uint64_t v52 = v33[4];
  sub_253472068(v33, v51);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v52 + 8))(v86, v51, v52);
  uint64_t v83 = v29;
  uint64_t v72 = a21;
  uint64_t v53 = v75;
  if (LOBYTE(v86[0]) == 1)
  {
    swift_getKeyPath();
    sub_253B05960();
    swift_release();
    uint64_t v54 = v85[0];
  }
  else
  {
    uint64_t v54 = 128;
  }
  uint64_t v70 = v54;
  uint64_t v75 = v24;
  BOOL v55 = *(void (**)(char *, char *))(v41 + 16);
  v69[0] = (char *)v24 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_databaseBaseURL;
  uint64_t v56 = v78;
  v55((char *)v24 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport16QueryableToolbox_databaseBaseURL, v46);
  uint64_t v71 = type metadata accessor for ToolEmbeddingsDatabase(0);
  char v74 = v33;
  sub_253476B80((uint64_t)v33, (uint64_t)v86);
  uint64_t v57 = v77;
  uint64_t v58 = v84;
  ((void (*)(uint64_t, uint64_t, uint64_t))v53[2])(v77, v88, v84);
  uint64_t v59 = (uint64_t)v76;
  unint64_t v73 = v46;
  ((void (*)(char *, char *, uint64_t))v55)(v76, v46, v56);
  uint64_t v60 = v82;
  sub_253530A44(v82, (uint64_t)v85);
  uint64_t v61 = sub_25354C94C((uint64_t)v86, v57, v59, v79 & 1, v70, v80, v81, (uint64_t)v85, v58, v72);
  if (v22)
  {
    sub_253530AA0(v60);
    sub_253472458(v83, (uint64_t *)&unk_26B248C70);
    uint64_t v62 = sub_2535385E4();
    v63(v62);
    uint64_t v64 = *(void (**)(void))(v50 + 8);
    sub_2535385FC();
    v64();
    sub_2535385FC();
    v64();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v65 = v61;
    sub_253530AA0(v60);
    sub_253472458(v83, (uint64_t *)&unk_26B248C70);
    uint64_t v66 = sub_2535385E4();
    v67(v66);
    sub_2535385FC();
    v68();
    v75[2] = v65;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v74);
  sub_2534847C8();
}

void sub_2535362B4()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v20 = v4;
  uint64_t v21 = v3;
  sub_253B089F0();
  sub_2534727C4();
  uint64_t v22 = v5;
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  uint64_t v7 = sub_253B056A0();
  sub_2534727C4();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253B056C0();
  if (!v0)
  {
    swift_release();
    goto LABEL_11;
  }
  id v13 = v0;
  sub_253462A5C(&qword_26B24A590);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:

    swift_release();
    goto LABEL_11;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v12, v7) != *MEMORY[0x263F84668])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    goto LABEL_8;
  }

  sub_253B08300();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = sub_253B089D0();
  os_log_type_t v15 = sub_253B09D90();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v19 = v16 + 4;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_253464DF8(v20, v2, &v23);
    sub_25353860C(v17);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v14, v15, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v16, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_2534659CC();
  v18();

  swift_release();
LABEL_11:
  sub_2534847C8();
}

uint64_t sub_253536598(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v5 = sub_253B089F0();
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_253B056A0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2535512B4();
  if (!v3)
  {
    uint64_t v18 = v12;
    swift_release();
    return v18;
  }
  id v26 = v3;
  id v13 = v3;
  sub_253462A5C(&qword_26B24A590);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v11, v8) != *MEMORY[0x263F84668])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_8:

    return swift_release();
  }

  sub_253B08300();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = sub_253B089D0();
  os_log_type_t v15 = sub_253B09D90();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v25 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v20 = v16 + 4;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_253464DF8(v21, a3, &v25);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v14, v15, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A269E60](v17, -1, -1);
    MEMORY[0x25A269E60](v16, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);

  swift_release();
  return v22;
}

void *sub_253536900(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v24 = a2;
  unint64_t v25 = a3;
  id v26 = a1;
  uint64_t v9 = sub_253B089F0();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v29 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B056A0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v32) = a6;
  sub_2535514E8();
  if (!v6)
  {
    uint64_t v7 = v15;
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    return v7;
  }
  id v32 = v6;
  id v16 = v6;
  sub_253462A5C(&qword_26B24A590);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == *MEMORY[0x263F84668])
    {

      uint64_t v17 = v29;
      sub_253B08300();
      unint64_t v18 = v25;
      swift_bridgeObjectRetain_n();
      uint64_t v19 = sub_253B089D0();
      os_log_type_t v20 = sub_253B09D90();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v31 = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_253464DF8(v24, v18, &v31);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v19, v20, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A269E60](v22, -1, -1);
        MEMORY[0x25A269E60](v21, -1, -1);

        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v28);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
      }

      swift_release();
      uint64_t v7 = v26;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_253536CB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a2;
  unint64_t v27 = a3;
  uint64_t v28 = a1;
  uint64_t v8 = sub_253B089F0();
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v31 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253B056A0();
  id v32 = *(uint8_t **)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)v33;
  sub_25354C9F0();
  if (!v13)
  {
    a7 = v14;
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a7;
  }
  id v36 = v13;
  id v15 = v13;
  sub_253462A5C(&qword_26B24A590);
  if (swift_dynamicCast())
  {
    id v16 = v32;
    if ((*((unsigned int (**)(char *, uint64_t))v32 + 11))(v12, v10) == *MEMORY[0x263F84668])
    {

      uint64_t v17 = v31;
      sub_253B08300();
      unint64_t v18 = v27;
      swift_bridgeObjectRetain_n();
      uint64_t v19 = sub_253B089D0();
      os_log_type_t v20 = sub_253B09D90();
      BOOL v21 = os_log_type_enabled(v19, v20);
      a7 = v28;
      if (v21)
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v35 = v33;
        *(_DWORD *)uint64_t v22 = 136315138;
        id v32 = v22 + 4;
        swift_bridgeObjectRetain();
        uint64_t v34 = sub_253464DF8(v26, v18, &v35);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v19, v20, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v22, 0xCu);
        uint64_t v23 = v33;
        swift_arrayDestroy();
        MEMORY[0x25A269E60](v23, -1, -1);
        MEMORY[0x25A269E60](v22, -1, -1);

        (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v30);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
      }
      id v24 = v36;
      swift_bridgeObjectRetain();

      swift_release();
      goto LABEL_11;
    }
    (*((void (**)(char *, uint64_t))v16 + 1))(v12, v10);
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a7;
}

void sub_253537090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (*a21)(uint64_t, uint64_t, uint64_t))
{
  sub_2534847F8();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v41 = v29;
  unint64_t v42 = v30;
  sub_253B089F0();
  sub_2534727C4();
  MEMORY[0x270FA5388](v31);
  sub_25346CB04();
  uint64_t v32 = sub_253B056A0();
  sub_2534727C4();
  uint64_t v43 = v33;
  MEMORY[0x270FA5388](v34);
  sub_2534B34A4();
  a21(v28, v26, v24);
  if (!v21)
  {
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  id v35 = v21;
  sub_253462A5C(&qword_26B24A590);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v43 + 88))(v22, v32) == *MEMORY[0x263F84668])
    {

      sub_253B08300();
      swift_bridgeObjectRetain_n();
      id v36 = sub_253B089D0();
      os_log_type_t v37 = sub_253B09D90();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_253464DF8(v41, v42, &v44);
        sub_25353860C(v39);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v36, v37, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v38, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_2534659CC();
      v40();
      swift_bridgeObjectRetain();

      swift_release();
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v22, v32);
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_12:
  sub_2534847C8();
}

void sub_2535373D8(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v23 = a3;
  unint64_t v24 = a4;
  uint64_t v26 = a2;
  uint64_t v8 = sub_253B089F0();
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B056A0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a5;
  a1(v13);
  if (!v5) {
    return;
  }
  id v30 = v5;
  id v16 = v5;
  sub_253462A5C(&qword_26B24A590);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:

    return;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v15, v11) != *MEMORY[0x263F84668])
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_7;
  }

  sub_253B08300();
  unint64_t v17 = v24;
  swift_bridgeObjectRetain_n();
  unint64_t v18 = sub_253B089D0();
  os_log_type_t v19 = sub_253B09D90();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v29 = v21;
    *(_DWORD *)os_log_type_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_253464DF8(v23, v17, &v29);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v18, v19, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25A269E60](v21, -1, -1);
    MEMORY[0x25A269E60](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  sub_253472348(v26, v25, &qword_269CDE7F8);
}

void *sub_253537738(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v25 = a2;
  unint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v9 = sub_253B089F0();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  MEMORY[0x270FA5388](v9);
  id v30 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B056A0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v33) = a6;
  sub_253551C90();
  if (!v6)
  {
    uint64_t v7 = v15;
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    return v7;
  }
  id v33 = v6;
  id v16 = v6;
  sub_253462A5C(&qword_26B24A590);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == *MEMORY[0x263F84668])
    {

      unint64_t v17 = v30;
      sub_253B08300();
      unint64_t v18 = v26;
      swift_bridgeObjectRetain_n();
      os_log_type_t v19 = sub_253B089D0();
      os_log_type_t v20 = sub_253B09D90();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v32 = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v31 = sub_253464DF8(v25, v18, &v32);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v19, v20, "QueryableToolbox %s: read only connection cannot create database. Falling back to empty results.", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25A269E60](v22, -1, -1);
        MEMORY[0x25A269E60](v21, -1, -1);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
      }
      id v23 = v33;
      uint64_t v7 = v27;
      swift_bridgeObjectRetain();

      swift_release();
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t QueryableToolbox.search(query:numOfUniqueTools:clientIdentifier:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_253538640();
  return sub_253536CB0(v4, v5, v6, v7, v8, a1, a2);
}

uint64_t QueryableToolbox.search(query:bundleIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253537C14(a1, a2, a3, 0xD000000000000018, 0x8000000253B0CB90, sub_25354D48C);
}

uint64_t QueryableToolbox.search(query:toolIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253537C14(a1, a2, a3, 0xD000000000000016, 0x8000000253B0CBB0, sub_25354E4EC);
}

#error "253537C84: call analysis failed (funcsize=35)"

uint64_t QueryableToolbox.toolMapping(customKey:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_253462A5C(&qword_269CDE7F8);
  MEMORY[0x270FA5388](v3 - 8);
  sub_25346CC6C();
  uint64_t v4 = type metadata accessor for ToolboxCustomKeyResult(0);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, v4);
  sub_2535373D8((void (*)(uint64_t))sub_253538454, v1, 0xD000000000000017, 0x8000000253B0CBD0, a1);
  return sub_253472458(v1, &qword_269CDE7F8);
}

uint64_t QueryableToolbox.allowListToolIds()()
{
  uint64_t v2 = sub_253B089F0();
  sub_2534727C4();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v0 + 16);
  uint64_t v9 = v8[21];
  uint64_t v10 = v8[22];
  sub_253472068(v8 + 18, v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 112))(v19, v9, v10);
  if (!v1)
  {
    uint64_t v11 = v19[0];
    if (v19[0])
    {
      uint64_t v12 = v19[1];
      swift_bridgeObjectRetain();
      uint64_t v13 = swift_bridgeObjectRetain();
      sub_253537F3C(v13, v12);
      uint64_t v2 = v14;
      sub_25353847C(v11);
    }
    else
    {
      sub_253B08300();
      id v15 = sub_253B089D0();
      os_log_type_t v16 = sub_253B09D80();
      if (os_log_type_enabled(v15, v16))
      {
        unint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v17 = 0;
        _os_log_impl(&dword_253460000, v15, v16, "No Allowlist found for Toolbox", v17, 2u);
        sub_2534659B4();
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
      return MEMORY[0x263F8EE88];
    }
  }
  return v2;
}

void sub_253537F3C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = 0;
  uint64_t v19 = a2;
  uint64_t v4 = a1 + 56;
  sub_2534D8E34();
  unint64_t v7 = v6 & v5;
  int64_t v9 = (unint64_t)(v8 + 63) >> 6;
  if ((v6 & v5) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    id v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_2539E09A0((uint64_t)v18, v16, v17);
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

void sub_2535380AC(uint64_t a1, uint64_t a2)
{
  int64_t v3 = 0;
  uint64_t v22 = a2;
  uint64_t v4 = a1 + 56;
  sub_2534D8E34();
  unint64_t v13 = v12 & v11;
  int64_t v15 = (unint64_t)(v14 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v3 << 6))
  {
    sub_2539E13C0((uint64_t)&v21, *(void *)(*(void *)(a1 + 48) + 8 * i), v5, v6, v7, v8, v9, v10, v21, v22);
    if (v13) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v18 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v15) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v18);
    ++v3;
    if (!v19)
    {
      int64_t v3 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_21;
      }
      unint64_t v19 = *(void *)(v4 + 8 * v3);
      if (!v19)
      {
        int64_t v3 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_21;
        }
        unint64_t v19 = *(void *)(v4 + 8 * v3);
        if (!v19)
        {
          int64_t v3 = v18 + 3;
          if (v18 + 3 >= v15) {
            goto LABEL_21;
          }
          unint64_t v19 = *(void *)(v4 + 8 * v3);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_18:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v15)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19)
  {
    int64_t v3 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v3 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v3 >= v15) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v3);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_23:
  __break(1u);
}

Swift::Void __swiftcall QueryableToolbox.warmup()()
{
}

Swift::Void __swiftcall QueryableToolbox.cooldown()()
{
}

void *QueryableToolbox.listTools(toolType:clientIdentifier:)()
{
  sub_253538620();
  swift_retain();
  sub_2535385C8();
  return sub_253537738(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_253538294@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_253B05910();
  *a1 = result & 1;
  return result;
}

unint64_t sub_2535382C4()
{
  unint64_t result = qword_269CDE7F0;
  if (!qword_269CDE7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE7F0);
  }
  return result;
}

uint64_t QueryableToolbox.toolBoxVersion()()
{
  return sub_25354BDA0();
}

uint64_t QueryableToolbox.assistantSchemaVersion()()
{
  return sub_25354BD70();
}

uint64_t QueryableToolbox.deinit()
{
  swift_release();
  sub_253B05390();
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  return v0;
}

uint64_t QueryableToolbox.__deallocating_deinit()
{
  swift_release();
  sub_253B05390();
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  uint64_t v2 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

void sub_253538454()
{
}

uint64_t sub_25353847C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2535384BC()
{
  return type metadata accessor for QueryableToolbox();
}

uint64_t type metadata accessor for QueryableToolbox()
{
  uint64_t result = qword_269CDE808;
  if (!qword_269CDE808) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25353850C()
{
  uint64_t result = sub_253B05390();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for QueryableToolbox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QueryableToolbox);
}

uint64_t sub_2535385E4()
{
  return *(void *)(v0 - 72);
}

uint64_t sub_25353860C(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_253538620()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25353864C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v27 = sub_253B08B30();
  uint64_t v7 = *(void *)(v27 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v27);
  unint64_t v26 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v25 = *(void *)(a3 + 16);
  if (v25)
  {
    unint64_t v14 = 0;
    uint64_t v20 = a3;
    uint64_t v21 = (void (**)(char *, uint64_t))(v7 + 8);
    id v23 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v24 = v7 + 16;
    v19[0] = a1;
    v19[1] = a2;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v13 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v27);
      char v16 = a1(v12);
      if (v3)
      {
        (*v21)(v12, v27);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if (v16)
      {
        uint64_t v22 = *v23;
        v22(v26, v12, v27);
        uint64_t v17 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E7B40();
          uint64_t v17 = v28;
        }
        unint64_t v18 = *(void *)(v17 + 16);
        if (v18 >= *(void *)(v17 + 24) >> 1)
        {
          sub_2539E7B40();
          uint64_t v17 = v28;
        }
        *(void *)(v17 + 16) = v18 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(v17 + v15 + v18 * v13, v26, v27);
        uint64_t v28 = v17;
        a3 = v20;
        a1 = (uint64_t (*)(char *))v19[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v21)(v12, v27);
      }
      if (v25 == ++v14)
      {
        uint64_t v13 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

BOOL sub_2535388F0()
{
  return sub_253538918();
}

BOOL sub_253538918()
{
  uint64_t v0 = sub_253462A5C(&qword_269CDE818);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_253B094A0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = sub_253B09390();
  sub_25353BF6C((uint64_t)v2, &qword_269CDE818);
  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

Swift::Bool __swiftcall AssistantSchemaProviding.contains(schemaKind:)(Swift::String schemaKind)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  object = schemaKind._object;
  uint64_t countAndFlagsBits = schemaKind._countAndFlagsBits;
  uint64_t v8 = sub_253462A5C(&qword_269CDE818);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534D8CAC();
  sub_253B094A0();
  sub_253465A98();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v10, v11, v12, v13);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(v4 + 32))(countAndFlagsBits, object, v3, v5, v4);
  sub_25353BF6C(v3, &qword_269CDE818);
  uint64_t v15 = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  return v15 != 0;
}

uint64_t Toolbox.toolDatabase.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_253538B64(v1, a1);
}

uint64_t Toolbox.clientActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Toolbox.clientActions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Toolbox.clientActions.modify())()
{
  return nullsub_1;
}

uint64_t Toolbox.schemaProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_253538B64(v1 + 48, a1);
}

uint64_t sub_253538B64(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_25347B88C();
  (*v3)(a2);
  return a2;
}

uint64_t Toolbox.init()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_253B08D80();
  uint64_t result = sub_253B08D70();
  if (!v1)
  {
    uint64_t v9 = v3;
    uint64_t v10 = &protocol witness table for ToolDatabase;
    *(void *)&long long v8 = result;
    if (qword_269CDA7D0 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_253B08400();
    sub_253462BD4(v5, (uint64_t)qword_269D7B660);
    uint64_t v6 = type metadata accessor for SharedAssistantSchemaProvider();
    sub_25353CD7C((unint64_t *)&qword_269CDB0D8, (void (*)(uint64_t))type metadata accessor for SharedAssistantSchemaProvider);
    uint64_t v7 = sub_253B083C0();
    a1[9] = v6;
    a1[10] = &protocol witness table for SharedAssistantSchemaProvider;
    a1[6] = v7;
    uint64_t result = sub_253476C2C(&v8, (uint64_t)a1);
    a1[5] = MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t Toolbox.init(toolDatabase:schemaProvider:clientActions:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_253476C2C(a1, a4);
  *(void *)(a4 + 40) = a3;
  return sub_253476C2C(a2, a4 + 48);
}

uint64_t Toolbox.entry(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  void v5[2] = 0;
  void v5[3] = 0;
  swift_bridgeObjectRetain();
  Toolbox.entry(tool:)(v5, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Toolbox.entry(tool:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_253462A5C(&qword_269CDE820);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_25346CB04();
  v105[5] = v8;
  sub_253483660();
  v105[4] = sub_253B08A60();
  sub_253465998();
  v105[1] = v9;
  MEMORY[0x270FA5388](v10);
  sub_25346CB04();
  v105[0] = v11;
  uint64_t v12 = sub_253462A5C(&qword_269CDE828);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_25346CB04();
  uint64_t v108 = v14;
  sub_253483660();
  uint64_t v109 = sub_253B09440();
  sub_253465998();
  v105[3] = v15;
  MEMORY[0x270FA5388](v16);
  sub_25346CB04();
  v105[2] = v17;
  uint64_t v18 = sub_253462A5C(&qword_26B241270);
  uint64_t v19 = sub_25346CB4C(v18);
  MEMORY[0x270FA5388](v19);
  sub_2534659D8();
  uint64_t v113 = v20;
  sub_2534B324C();
  MEMORY[0x270FA5388](v21);
  id v23 = (char *)v105 - v22;
  uint64_t v24 = sub_253B08B30();
  sub_253465998();
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v27);
  sub_2534727F8();
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v105 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = *a1;
  uint64_t v35 = a1[1];
  uint64_t v115 = v32;
  uint64_t v116 = v34;
  uint64_t v37 = a1[2];
  uint64_t v36 = a1[3];
  uint64_t v38 = v3[5];
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v114 = a2;
  uint64_t v111 = v36;
  uint64_t v112 = v26;
  v105[6] = v40;
  uint64_t v110 = v37;
  if (v39)
  {
    v105[8] = (char *)v105 - v33;
    uint64_t v106 = v23;
    uint64_t v107 = v3;
    uint64_t v41 = v38;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    uint64_t v42 = v26 + 16;
    uint64_t v43 = v44;
    uint64_t v45 = v41 + ((*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64));
    uint64_t v46 = *(void *)(v42 + 56);
    v105[7] = v41;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v43(v31, v45, v24);
      if (sub_253B08AF0() == v116 && v47 == v35)
      {
        swift_bridgeObjectRelease();
        a2 = v114;
        goto LABEL_13;
      }
      char v49 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v49) {
        break;
      }
      uint64_t v24 = v115;
      sub_2534D97B4();
      v57(v50, v51, v52, v53, v54, v55, v56);
      v45 += v46;
      if (!--v39)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = 1;
        uint64_t v59 = v113;
        a2 = v114;
        id v23 = v106;
        uint64_t v3 = v107;
        uint64_t v26 = v112;
        goto LABEL_14;
      }
    }
    a2 = v114;
    uint64_t v24 = v115;
LABEL_13:
    uint64_t v59 = v113;
    swift_bridgeObjectRelease();
    uint64_t v26 = v112;
    id v23 = v106;
    sub_25347FA84();
    v67(v60, v61, v62, v63, v64, v65, v66);
    uint64_t v58 = 0;
    uint64_t v3 = v107;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = 1;
    uint64_t v59 = v113;
  }
LABEL_14:
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v23, v58, 1, v24);
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v23, 1, v24) == 1)
  {
    sub_25353BF6C((uint64_t)v23, &qword_26B241270);
    uint64_t v68 = v3[3];
    uint64_t v69 = v3[4];
    sub_253472068(v3, v68);
    v117[0] = v116;
    v117[1] = v35;
    v117[2] = v110;
    v117[3] = v111;
    uint64_t v70 = *(void (**)(void *, uint64_t, uint64_t))(v69 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v117, v68, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v59, 0, 1, v115);
    unint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 32);
    sub_2534B361C();
    v86(v87, v88, v89, v90, v91, v92, v93);
    uint64_t v94 = v114;
    sub_2534B361C();
    v86(v95, v96, v97, v98, v99, v100, v101);
    uint64_t v102 = type metadata accessor for Toolbox.Entry();
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = v94;
  }
  else
  {
    uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 32);
    sub_2534B361C();
    v71(v72, v73, v74, v75, v76, v77, v78);
    sub_2534B361C();
    v71(v79, v80, v81, v82, v83, v84, v85);
    uint64_t v102 = type metadata accessor for Toolbox.Entry();
    sub_25353CE6C();
    swift_storeEnumTagMultiPayload();
    uint64_t v103 = a2;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v103, 0, 1, v102);
}

uint64_t AssistantSchemaIdentifier.init(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_253462A5C(&qword_269CDE830);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CAC();
  uint64_t v9 = sub_253B09350();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_2534727F8();
  uint64_t v15 = v13 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v34 - v17;
  v34[2] = a1;
  v34[3] = a2;
  sub_25346C800();
  uint64_t v19 = (void *)sub_253B09EF0();
  swift_bridgeObjectRelease();
  if (v19[2] != 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = 1;
LABEL_6:
    uint64_t v33 = sub_253B09440();
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a3, v24, 1, v33);
  }
  v34[0] = a3;
  uint64_t v20 = v19[8];
  uint64_t v21 = v19[9];
  uint64_t v22 = v19[10];
  uint64_t v23 = v19[11];
  swift_bridgeObjectRetain();
  MEMORY[0x25A268760](v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  sub_253B09360();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, 0, 1, v9);
  sub_25347FA84();
  uint64_t result = v25();
  if (v19[2])
  {
    uint64_t v27 = v19[4];
    uint64_t v28 = v19[5];
    uint64_t v29 = v19[6];
    uint64_t v30 = v19[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    MEMORY[0x25A268760](v27, v28, v29, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v15, v18, v9);
    a3 = v34[0];
    sub_253B093F0();
    uint64_t v31 = sub_25353CE60();
    v32(v31);
    uint64_t v24 = 0;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Toolbox.Entry()
{
  uint64_t result = qword_269CDE898;
  if (!qword_269CDE898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Toolbox.subscript.getter()
{
  return swift_bridgeObjectRelease();
}

void Toolbox.subscript.getter()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_253462A5C(&qword_26B241270);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  uint64_t v8 = sub_253B08B30();
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534727F8();
  uint64_t v12 = v10 - v11;
  MEMORY[0x270FA5388](v13);
  sub_2534B35DC();
  uint64_t v37 = v15;
  uint64_t v38 = v14;
  uint64_t v16 = *v3;
  uint64_t v42 = v3[1];
  uint64_t v17 = v3[2];
  uint64_t v18 = v3[3];
  uint64_t v19 = v0[5];
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v35 = v18;
  uint64_t v36 = v17;
  if (v20)
  {
    uint64_t v33 = v0;
    uint64_t v34 = v5;
    uint64_t v21 = v19 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v39 = *(void *)(v14 + 72);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v40(v12, v21, v8);
      if (sub_253B08AF0() == v16 && v23 == v42)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      uint64_t v25 = v16;
      char v26 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v26) {
        break;
      }
      (*v22)(v12, v8);
      v21 += v39;
      --v20;
      uint64_t v16 = v25;
      if (!v20)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = 1;
        uint64_t v5 = v34;
        uint64_t v0 = v33;
        goto LABEL_14;
      }
    }
    uint64_t v16 = v25;
LABEL_13:
    swift_bridgeObjectRelease();
    sub_25347FA84();
    v28();
    uint64_t v27 = 0;
    uint64_t v5 = v34;
    uint64_t v0 = v33;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = 1;
  }
LABEL_14:
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v27, 1, v8);
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, 1, v8) == 1)
  {
    sub_25353BF6C(v1, &qword_26B241270);
    uint64_t v29 = v0[3];
    uint64_t v30 = v0[4];
    sub_253472068(v0, v29);
    v41[0] = v16;
    v41[1] = v42;
    v41[2] = v36;
    v41[3] = v35;
    (*(void (**)(void *, uint64_t, uint64_t))(v30 + 40))(v41, v29, v30);
  }
  else
  {
    uint64_t v31 = *(void (**)(uint64_t))(v38 + 32);
    uint64_t v32 = sub_25353CE60();
    v31(v32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v5, v37, v8);
  }
  sub_2534847C8();
}

uint64_t Toolbox.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  sub_253472068(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, a2, v5, v6);
}

uint64_t Toolbox.appIntents(schemaIdentifier:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_253B09440();
  sub_253465998();
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  MEMORY[0x270FA5388](v4);
  sub_2534659D8();
  uint64_t v47 = v6;
  sub_2534B324C();
  MEMORY[0x270FA5388](v7);
  sub_2534B35DC();
  uint64_t v50 = v8;
  sub_253483660();
  uint64_t v52 = sub_253B089F0();
  sub_253465998();
  uint64_t v51 = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534659D8();
  uint64_t v48 = v11;
  sub_2534B324C();
  MEMORY[0x270FA5388](v12);
  sub_2534B35DC();
  uint64_t v49 = v13;
  sub_253483660();
  sub_253B09350();
  sub_253465998();
  uint64_t v59 = v15;
  uint64_t v60 = v14;
  MEMORY[0x270FA5388](v14);
  sub_25346CB04();
  uint64_t v58 = v16;
  uint64_t v17 = v2[3];
  uint64_t v61 = v2;
  uint64_t v65 = sub_253472068(v2, v17);
  uint64_t v18 = sub_253462A5C(&qword_269CDE838);
  uint64_t v19 = sub_253B08A20();
  sub_253465998();
  uint64_t v21 = v20;
  unint64_t v22 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v54 = v18;
  uint64_t v23 = swift_allocObject();
  long long v53 = xmmword_253B22680;
  *(_OWORD *)(v23 + 16) = xmmword_253B22680;
  uint64_t v24 = (uint64_t *)(v23 + v22);
  uint64_t v62 = a1;
  *uint64_t v24 = sub_253B09400();
  v24[1] = v25;
  char v26 = *(void (**)(void))(v21 + 104);
  int v56 = *MEMORY[0x263F7FDE0];
  uint64_t v57 = v19;
  uint64_t v55 = v26;
  v26(v24);
  sub_25347719C();
  uint64_t v29 = v28(v27);
  uint64_t v30 = swift_bridgeObjectRelease();
  uint64_t v31 = v64;
  MEMORY[0x270FA5388](v30);
  *(&v47 - 2) = v62;
  uint64_t result = sub_25353864C((uint64_t (*)(char *))sub_25353BCB0, (uint64_t)(&v47 - 4), v29);
  uint64_t v33 = v63;
  if (!*(void *)(result + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = v48;
    sub_253B08370();
    uint64_t v35 = sub_25353CE08();
    v36(v35);
    uint64_t v37 = sub_253B089D0();
    os_log_type_t v38 = sub_253B09D80();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (_DWORD *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *uint64_t v39 = 136315138;
      uint64_t v40 = AssistantSchemaIdentifier.id.getter();
      uint64_t v42 = sub_253464DF8(v40, v41, v66);
      sub_25353CDE0(v42);
      swift_bridgeObjectRelease();
      sub_2534D97B4();
      v44(v43);
      sub_25353CE40(&dword_253460000, v45, v46, "no tools implement schema ID %s");
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v48, v52);
    }
    else
    {
      (*(void (**)(void, uint64_t))(v33 + 8))(0, v31);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v34, v52);
    }
    return 0;
  }
  return result;
}

uint64_t sub_25353A1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_253B09440();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_253B08A30();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B08AA0();
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    v19[1] = v11;
    void v19[2] = v2;
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v13 = v8 + 16;
    unint64_t v14 = v11 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v13 + 72);
    int v26 = *MEMORY[0x263F7FE38];
    unint64_t v22 = (void (**)(char *, uint64_t))(v13 + 80);
    uint64_t v23 = (void (**)(char *, uint64_t))(v13 - 8);
    uint64_t v20 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v25 = *(void *)(v13 + 56);
    do
    {
      v27(v10, v14, v7);
      int v16 = (*v15)(v10, v7);
      if (v16 == v26)
      {
        (*v22)(v10, v7);
        (*v21)(v6, v10, v3);
        sub_25353CD7C(&qword_269CDE8C0, MEMORY[0x263F80C28]);
        char v17 = sub_253B096B0();
        (*v20)(v6, v3);
        if (v17)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*v23)(v10, v7);
      }
      v14 += v25;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t AssistantSchemaIdentifier.id.getter()
{
  uint64_t v1 = sub_253B09350();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_2534B3294();
  uint64_t v6 = sub_253B09400();
  sub_253B09860();
  sub_253B09410();
  sub_253B09340();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  sub_253B09860();
  swift_bridgeObjectRelease();
  return v6;
}

void ToolDatabase.subscript.getter()
{
  sub_2534847F8();
  uint64_t v61 = v0;
  uint64_t v62 = v1;
  uint64_t v3 = v2;
  uint64_t v49 = v4;
  uint64_t v5 = sub_253462A5C(&qword_26B241270);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_25346CB04();
  uint64_t v63 = v7;
  sub_253462A5C(&qword_26B241268);
  sub_253465998();
  uint64_t v59 = v9;
  uint64_t v60 = v8;
  MEMORY[0x270FA5388](v8);
  sub_2534659D8();
  uint64_t v51 = v10;
  sub_2534B324C();
  MEMORY[0x270FA5388](v11);
  sub_2534B35DC();
  uint64_t v57 = v12;
  uint64_t v13 = sub_253462A5C(&qword_26B24A348);
  sub_253465998();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  sub_25346CC44();
  uint64_t v19 = (uint64_t *)(v18 - v17);
  sub_253B08BC0();
  sub_253465998();
  uint64_t v52 = v21;
  uint64_t v53 = v20;
  MEMORY[0x270FA5388](v20);
  sub_25353CE24();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v49 - v24;
  MEMORY[0x270FA5388](v23);
  sub_2534B35DC();
  uint64_t v58 = v26;
  uint64_t v27 = *v3;
  uint64_t v28 = v3[1];
  uint64_t v29 = v3[2];
  uint64_t v30 = v3[3];
  uint64_t v50 = v29;
  sub_253B08B90();
  swift_getKeyPath();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v27;
  *(void *)(v31 + 24) = v28;
  *uint64_t v19 = v31;
  unsigned int v54 = *MEMORY[0x263F7FE98];
  sub_25353CDD4();
  v32();
  uint64_t v33 = sub_25353CD7C((unint64_t *)&qword_26B24A350, MEMORY[0x263F80100]);
  sub_25353BF1C((unint64_t *)&qword_26B24A340, &qword_26B24A348);
  uint64_t v34 = v52;
  swift_bridgeObjectRetain();
  uint64_t v55 = v33;
  int v56 = v25;
  sub_253B08DA0();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v19, v13);
  uint64_t v35 = *(void (**)(void))(v34 + 8);
  sub_25353CDC4();
  v35();
  swift_getKeyPath();
  sub_253B09280();
  uint64_t v37 = swift_allocBox();
  if (v30)
  {
    *uint64_t v36 = v50;
    v36[1] = v30;
    sub_25347B88C();
    (*(void (**)(void))(v38 + 104))();
    *uint64_t v51 = v37;
    uint64_t v40 = v59;
    uint64_t v39 = v60;
    sub_25353CDD4();
    v41();
    uint64_t v42 = v57;
    sub_25347FA84();
    v43();
  }
  else
  {
    sub_25347B88C();
    (*(void (**)(void))(v44 + 104))();
    uint64_t v42 = v57;
    *uint64_t v57 = v37;
    uint64_t v40 = v59;
    uint64_t v39 = v60;
    (*(void (**)(uint64_t *, void, uint64_t))(v59 + 104))(v42, v54, v60);
  }
  sub_25353BF1C(&qword_26B24A338, &qword_26B241268);
  swift_bridgeObjectRetain();
  sub_253B08DA0();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v40 + 8))(v42, v39);
  sub_25353CDC4();
  v35();
  uint64_t v45 = v62;
  ToolDatabase.tool(query:)();
  if (!v45)
  {
    uint64_t v46 = sub_253B08B30();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v63, 1, v46) != 1)
    {
      sub_25353CDC4();
      v35();
      sub_25347B88C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v49, v63, v46);
      goto LABEL_9;
    }
    sub_25353BF6C(v63, &qword_26B241270);
    sub_25353BDB8();
    swift_allocError();
    unsigned char *v47 = 0;
    swift_willThrow();
  }
  sub_25353CDC4();
  v35();
LABEL_9:
  sub_2534847C8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  sub_2534847F8();
  uint64_t v73 = v0;
  uint64_t v74 = v1;
  uint64_t v70 = (void (*)(void))v3;
  uint64_t v58 = v4;
  uint64_t v5 = sub_253462A5C(&qword_269CDE850);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_25346CB04();
  uint64_t v75 = v7;
  sub_253483660();
  uint64_t v66 = sub_253B092C0();
  sub_253465998();
  uint64_t v61 = v8;
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  uint64_t v60 = v10;
  uint64_t v11 = sub_253462A5C(&qword_269CDE848);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CB04();
  uint64_t v68 = v13;
  uint64_t v14 = sub_253462A5C(&qword_269CDE858);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_25346CB04();
  uint64_t v64 = v16;
  uint64_t v63 = sub_253462A5C(&qword_269CDE860);
  sub_253465998();
  uint64_t v65 = v17;
  MEMORY[0x270FA5388](v18);
  sub_25346CB04();
  uint64_t v71 = v19;
  uint64_t v20 = sub_253462A5C(&qword_269CDE868);
  sub_253465998();
  uint64_t v22 = v21;
  MEMORY[0x270FA5388](v23);
  sub_2534D8CAC();
  sub_253B09320();
  sub_253465998();
  KeyPath = v24;
  MEMORY[0x270FA5388](v25);
  sub_25353CE24();
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v58 - v28;
  MEMORY[0x270FA5388](v27);
  sub_2534B35DC();
  uint64_t v72 = v30;
  sub_253B09300();
  swift_getKeyPath();
  sub_253B091F0();
  uint64_t v31 = swift_allocBox();
  sub_25347B88C();
  (*(void (**)(void))(v32 + 16))();
  *uint64_t v2 = v31;
  uint64_t v33 = v66;
  uint64_t v59 = *MEMORY[0x263F7FE98];
  sub_25353CDD4();
  v34();
  uint64_t v35 = sub_25353CD7C(&qword_269CDE870, MEMORY[0x263F80B40]);
  sub_25353BF1C(&qword_269CDE878, &qword_269CDE868);
  uint64_t v69 = v29;
  uint64_t v36 = v64;
  uint64_t v67 = v35;
  sub_253B08DA0();
  uint64_t v37 = v63;
  swift_release();
  uint64_t v38 = KeyPath;
  (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v2, v20);
  uint64_t v39 = v65;
  uint64_t v40 = *(void (**)(void))(v38 + 8);
  sub_2534D97B4();
  v40();
  KeyPath = swift_getKeyPath();
  unint64_t v41 = v68;
  sub_25353BEB4((uint64_t)v70, v68);
  uint64_t v42 = 1;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v41, 1, v33) != 1)
  {
    uint64_t v43 = v61;
    uint64_t v70 = v40;
    uint64_t v44 = v60;
    sub_25347FA84();
    v45();
    uint64_t v46 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v47, v44, v33);
    *uint64_t v36 = v46;
    sub_25353CDD4();
    v48();
    uint64_t v49 = v44;
    uint64_t v40 = v70;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v33);
    uint64_t v42 = 0;
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v36, v42, 1, v37);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v36, 1, v37) == 1)
  {
    uint64_t v50 = v71;
    sub_25353CDD4();
    v51();
    sub_25353BF6C((uint64_t)v36, &qword_269CDE858);
  }
  else
  {
    uint64_t v50 = v71;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v39 + 32))(v71, v36, v37);
  }
  uint64_t v52 = v39;
  uint64_t v53 = v75;
  sub_25353BF1C(&qword_269CDE880, &qword_269CDE860);
  sub_253B08DA0();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v37);
  sub_2534D97B4();
  v40();
  unsigned int v54 = v74;
  sub_253B08D30();
  if (!v54)
  {
    uint64_t v55 = sub_253B09190();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v53, 1, v55) != 1)
    {
      sub_2534D97B4();
      v40();
      sub_25347B88C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v58, v53, v55);
      goto LABEL_11;
    }
    sub_25353BF6C(v53, &qword_269CDE850);
    sub_25353BDB8();
    swift_allocError();
    char *v56 = 1;
    swift_willThrow();
  }
  sub_2534D97B4();
  v40();
LABEL_11:
  sub_2534847C8();
}

uint64_t sub_25353AAE8()
{
  return sub_253B08BB0();
}

uint64_t sub_25353AB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25353B2C4(a1, a2, a3, a4, &qword_26B24A348, MEMORY[0x263F800F0]);
}

uint64_t ToolDatabase.tool(query:)()
{
  uint64_t v1 = sub_253B05630();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_2534B3294();
  sub_253B05600();
  sub_25353CE60();
  sub_253B08D20();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
}

uint64_t ToolDatabase.subscript.getter()
{
  uint64_t v1 = sub_253462A5C(&qword_269CDE848);
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_2534D8CAC();
  sub_253B092C0();
  sub_253465A98();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, v4, v5, v6);
  ToolDatabase.subscript.getter();
  return sub_25353BF6C(v0, &qword_269CDE848);
}

uint64_t sub_25353B2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  sub_253462A5C(a5);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v6, a1);
  return a6(v6);
}

void ToolDatabase.tools(query:)()
{
  sub_2534847F8();
  sub_253B08EA0();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_25346CC44();
  uint64_t v1 = sub_253B05630();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_25346CC44();
  uint64_t v7 = v6 - v5;
  sub_253B05600();
  sub_25353CDD4();
  v8();
  sub_253B08D40();
  sub_25353CE6C();
  sub_2534D97B4();
  v9();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  sub_2534847C8();
}

uint64_t ToolDatabase.iterate(query:block:)()
{
  sub_253477168();
  v1[4] = v2;
  v1[5] = v0;
  v1[2] = v3;
  v1[3] = v4;
  uint64_t v5 = sub_253B05630();
  v1[6] = v5;
  sub_25346CB34(v5);
  v1[7] = v6;
  v1[8] = swift_task_alloc();
  uint64_t v7 = sub_253B08EA0();
  v1[9] = v7;
  sub_25346CB34(v7);
  v1[10] = v8;
  v1[11] = swift_task_alloc();
  sub_25347719C();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_25353B56C()
{
  sub_253477168();
  sub_25353CDD4();
  v1();
  sub_253B05600();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[12] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_25353B634;
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];
  return MEMORY[0x270F7FD18](v7, v3, v4, v6, v5);
}

uint64_t sub_25353B634()
{
  sub_253477088();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253477158();
  *uint64_t v5 = v4;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  sub_25353CDC4();
  v6();
  sub_2534D97B4();
  v7();
  if (v0)
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v8, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v4 + 8);
    return v11();
  }
}

uint64_t sub_25353B824()
{
  sub_253477168();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void ToolDatabase.toolboxAllowList()(uint64_t *a1@<X8>)
{
}

uint64_t sub_25353B8A8(char a1)
{
  return a1 & 1;
}

uint64_t sub_25353B8B0(uint64_t a1)
{
  unint64_t v2 = sub_25353CD30();
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25353B8EC(uint64_t a1)
{
  unint64_t v2 = sub_25353CD30();
  return MEMORY[0x270EF2668](a1, v2);
}

unint64_t sub_25353B928()
{
  return 0xD000000000000011;
}

uint64_t sub_25353B944()
{
  return sub_25353B8A8(*v0);
}

uint64_t sub_25353B94C()
{
  return sub_253B08D90();
}

uint64_t sub_25353B970()
{
  return ToolDatabase.subscript.getter();
}

uint64_t sub_25353B994()
{
  return sub_253B08D00();
}

uint64_t sub_25353B9B8()
{
  return sub_253B08D50();
}

void sub_25353B9DC()
{
}

void sub_25353BA00()
{
}

uint64_t sub_25353BA24()
{
  return sub_253B08CE0();
}

uint64_t sub_25353BA48()
{
  return sub_253B08CF0();
}

uint64_t sub_25353BA6C()
{
  return sub_253B08D30();
}

uint64_t sub_25353BA90()
{
  return ToolDatabase.tool(query:)();
}

void sub_25353BAB4()
{
}

uint64_t sub_25353BAD8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_25353BB88;
  return ToolDatabase.iterate(query:block:)();
}

uint64_t sub_25353BB88()
{
  sub_253477168();
  sub_253477088();
  uint64_t v1 = *v0;
  sub_253477158();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_25353BC4C()
{
  return sub_253B08D10();
}

void sub_25353BC70(uint64_t *a1@<X8>)
{
}

uint64_t sub_25353BC88()
{
  return sub_253B08CD0();
}

uint64_t sub_25353BCB0(uint64_t a1)
{
  return sub_25353A1FC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_25353BCD0()
{
  return sub_253B08BB0();
}

uint64_t sub_25353BCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25353B2C4(a1, a2, a3, a4, &qword_26B24A348, MEMORY[0x263F800F0]);
}

uint64_t sub_25353BD28()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25353BD60()
{
  return sub_253B08B60();
}

uint64_t sub_25353BD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25353B2C4(a1, a2, a3, a4, &qword_26B241268, MEMORY[0x263F800B0]);
}

unint64_t sub_25353BDB8()
{
  unint64_t result = qword_269CDE840;
  if (!qword_269CDE840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE840);
  }
  return result;
}

uint64_t sub_25353BE04()
{
  return sub_253B09310();
}

uint64_t sub_25353BE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25353B2C4(a1, a2, a3, a4, &qword_269CDE868, MEMORY[0x263F80B30]);
}

uint64_t sub_25353BE5C()
{
  return sub_253B092F0();
}

uint64_t sub_25353BE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25353B2C4(a1, a2, a3, a4, &qword_269CDE860, MEMORY[0x263F80B20]);
}

uint64_t sub_25353BEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDE848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25353BF1C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25353BF6C(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_25347B88C();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t destroy for Toolbox(uint64_t a1)
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  swift_bridgeObjectRelease();
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
}

uint64_t initializeWithCopy for Toolbox(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a2 + 48;
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 48, v5, v7);
  return a1;
}

uint64_t *assignWithCopy for Toolbox(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_253529A4C(a1 + 6, a2 + 6);
  return a1;
}

uint64_t assignWithTake for Toolbox(uint64_t a1, uint64_t a2)
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for Toolbox(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Toolbox(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Toolbox()
{
  return &type metadata for Toolbox;
}

uint64_t *initializeBufferWithCopyOfBuffer for Toolbox.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      uint64_t v6 = sub_253B08A60();
    }
    else {
      uint64_t v6 = sub_253B08B30();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Toolbox.Entry(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = sub_253B08A60();
  }
  else
  {
    if (result > 1) {
      return result;
    }
    uint64_t v3 = sub_253B08B30();
  }
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

uint64_t initializeWithCopy for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 2) {
    uint64_t v4 = sub_253B08A60();
  }
  else {
    uint64_t v4 = sub_253B08B30();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25353C5A8(a1);
    if (swift_getEnumCaseMultiPayload() == 2) {
      uint64_t v4 = sub_253B08A60();
    }
    else {
      uint64_t v4 = sub_253B08B30();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25353C5A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Toolbox.Entry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 2) {
    uint64_t v4 = sub_253B08A60();
  }
  else {
    uint64_t v4 = sub_253B08B30();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for Toolbox.Entry(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25353C5A8(a1);
    if (swift_getEnumCaseMultiPayload() == 2) {
      uint64_t v4 = sub_253B08A60();
    }
    else {
      uint64_t v4 = sub_253B08B30();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25353C764()
{
  uint64_t result = sub_253B08B30();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B08A60();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ToolStoring.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ToolStoring.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ToolStoring.localTools.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ToolStoring.types.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ToolStoring.localTools(implementing:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ToolStoring.localTools(accepting:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ToolStoring.type(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ToolStoring.tool(query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ToolStoring.tools(query:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ToolStoring.iterate(query:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 96) + **(int **)(a5 + 96));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_25353BB88;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of ToolStoring.get<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of ToolStoring.toolboxAllowList()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of ToolStoring.containers(matching:scope:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.tools.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.types.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.knownToolKinds()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.tools(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of AssistantSchemaProviding.contains(schemaKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

unsigned char *_s5ErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25353CCA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_25353CCE4()
{
  unint64_t result = qword_269CDE8B0;
  if (!qword_269CDE8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8B0);
  }
  return result;
}

unint64_t sub_25353CD30()
{
  unint64_t result = qword_269CDE8B8;
  if (!qword_269CDE8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8B8);
  }
  return result;
}

uint64_t sub_25353CD7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25353CDE0(uint64_t a1)
{
  *(void *)(v1 - 152) = a1;
  return sub_253B09E80();
}

uint64_t sub_25353CE08()
{
  return *(void *)(v0 - 256);
}

void sub_25353CE40(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_25353CE60()
{
  return v0;
}

uint64_t sub_25353CE6C()
{
  return v0;
}

id sub_25353CE78()
{
  uint64_t v0 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleWithIdentifier_, v0);

  return v1;
}

uint64_t sub_25353CEDC(uint64_t a1)
{
  uint64_t v9 = sub_253B09C60();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unsigned int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_2539E09A0((uint64_t)v8, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    sub_2534F8940();
  }
  return v1;
}

uint64_t sub_25353CF88(uint64_t a1)
{
  uint64_t v2 = sub_253B09440();
  sub_253465998();
  uint64_t v4 = v3;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_25353E5A8(&qword_269CDE700, MEMORY[0x263F80C28]);
  uint64_t v21 = sub_253B09C60();
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = v4 + 16;
    uint64_t v14 = v15;
    unint64_t v16 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
    uint64_t v20 = a1;
    uint64_t v17 = a1 + v16;
    uint64_t v18 = *(void *)(v13 + 56);
    do
    {
      v14(v8, v17, v2);
      sub_2539E0AE4();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v10, v2);
      v17 += v18;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
    sub_2534F8940();
  }
  return v11;
}

uint64_t sub_25353D118(uint64_t a1, unint64_t a2)
{
  sub_253B09800();
  uint64_t v4 = sub_253B09C60();
  uint64_t v17 = v4;
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v15 = 0;
  uint64_t v16 = v5;
  uint64_t v6 = sub_253B09890();
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    do
    {
      sub_2539E1298((uint64_t)v12, v8, v9);
      swift_bridgeObjectRelease();
      uint64_t v8 = sub_253B09890();
      uint64_t v9 = v10;
    }
    while (v10);
    uint64_t v4 = v17;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_25353D1D8(uint64_t a1)
{
  uint64_t v14 = sub_253B09C60();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v11 = *(void *)(a1 + 8 * i + 32);
      sub_2539E13C0((uint64_t)&v13, v11, v3, v4, v5, v6, v7, v8, v13, v14);
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    sub_2534F8940();
  }
  return v1;
}

void sub_25353D268(uint64_t a1)
{
  v20[1] = sub_253B09C60();
  sub_25397174C(a1, v21);
  uint64_t v8 = v21[0];
  uint64_t v9 = v21[1];
  int64_t v10 = v21[3];
  unint64_t v11 = v22;
  int64_t v12 = (unint64_t)(v21[2] + 64) >> 6;
  if (!v22) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v14 = v13 | (v10 << 6);
  while (1)
  {
    sub_2539E13C0((uint64_t)v20, *(void *)(*(void *)(v8 + 48) + 8 * v14), v2, v3, v4, v5, v6, v7, v19, v20[0]);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v9 + 8 * v15);
    int64_t v17 = v10 + 1;
    if (!v16)
    {
      int64_t v17 = v10 + 2;
      if (v10 + 2 >= v12) {
        goto LABEL_21;
      }
      unint64_t v16 = *(void *)(v9 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v10 + 3;
        if (v10 + 3 >= v12) {
          goto LABEL_21;
        }
        unint64_t v16 = *(void *)(v9 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v10 + 4;
          if (v10 + 4 >= v12) {
            goto LABEL_21;
          }
          unint64_t v16 = *(void *)(v9 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v10 + 5;
            if (v10 + 5 >= v12) {
              goto LABEL_21;
            }
            unint64_t v16 = *(void *)(v9 + 8 * v17);
            if (!v16)
            {
              int64_t v18 = v10 + 6;
              while (v18 < v12)
              {
                unint64_t v16 = *(void *)(v9 + 8 * v18++);
                if (v16)
                {
                  int64_t v17 = v18 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    int64_t v10 = v17;
  }
  __break(1u);
}

uint64_t sub_25353D3C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_253462A5C(&qword_269CDE8F0);
  sub_25353E484();
  uint64_t v8 = sub_253B09C60();
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a1 + 8 * v4++ + 32);
      swift_bridgeObjectRetain();
      sub_2539E14A0(&v7, v5);
      swift_bridgeObjectRelease();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    sub_2534F8940();
  }
  return v2;
}

void static Toolbox.toolboxAllowList()(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_253B05390();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253B089F0();
  sub_253465998();
  uint64_t v98 = v6;
  uint64_t v99 = v5;
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)v89 - v9;
  MEMORY[0x270FA5388](v8);
  int64_t v12 = (char *)v89 - v11;
  swift_getKeyPath();
  sub_253B05960();
  swift_release();
  if (v103)
  {
    sub_253B08300();
    unint64_t v13 = sub_253B089D0();
    os_log_type_t v14 = sub_253B09D90();
    if (os_log_type_enabled(v13, v14))
    {
      int64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v15 = 0;
      _os_log_impl(&dword_253460000, v13, v14, "Use of allow list is disabled for Toolbox indexing", v15, 2u);
      sub_2534659B4();
    }

    uint64_t v16 = sub_25353E62C();
    v17(v16);
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v96 = v10;
  uint64_t v97 = a1;
  sub_253465954();
  uint64_t v18 = 0xD000000000000021;
  id v95 = sub_25353CE78();
  swift_getKeyPath();
  sub_253B05960();
  swift_release();
  if (v104)
  {
    uint64_t v18 = v103;
    uint64_t v19 = v104;
  }
  else
  {
    uint64_t v19 = 0x8000000253B0CC90;
  }
  swift_getKeyPath();
  sub_253B05960();
  swift_release();
  uint64_t v20 = *(void *)(v103 + 16);
  swift_bridgeObjectRelease();
  if (v20
    || (swift_getKeyPath(),
        sub_253B05960(),
        swift_release(),
        uint64_t v21 = *(void *)(v103 + 16),
        swift_bridgeObjectRelease(),
        v21))
  {
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    sub_253B05960();
    swift_release();
    uint64_t v22 = sub_25353CEDC(v103);
    swift_getKeyPath();
    sub_253B05960();
    swift_release();
    uint64_t v23 = sub_25353CEDC(v103);
    goto LABEL_11;
  }
  if (!v95)
  {
    swift_bridgeObjectRelease();
    uint64_t v83 = 0;
LABEL_45:
    sub_2535382C4();
    swift_allocError();
    *uint64_t v84 = 6;
    swift_willThrow();

    return;
  }
  sub_2535300F8(v18, v19, 0x7473696C70, 0xE500000000000000, v95);
  if (!v74)
  {
    uint64_t v83 = v95;
    goto LABEL_45;
  }
  uint64_t v94 = v1;
  sub_253B08300();
  uint64_t v75 = sub_253B089D0();
  os_log_type_t v76 = sub_253B09D90();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl(&dword_253460000, v75, v76, "Toolbox Allow List accessed", v77, 2u);
    sub_2534659B4();
  }

  (*(void (**)(char *, uint64_t))(v98 + 8))(v12, v99);
  sub_253B05310();
  swift_bridgeObjectRelease();
  uint64_t v78 = v94;
  uint64_t v79 = sub_253B053D0();
  uint64_t v2 = v78;
  if (v78)
  {
    uint64_t v81 = sub_25353E614();
    v82(v81);

    return;
  }
  uint64_t v85 = v79;
  unint64_t v86 = v80;
  uint64_t v87 = sub_25353E614();
  v88(v87);
  sub_253B05200();
  swift_allocObject();
  sub_253B051F0();
  sub_25353E240();
  sub_253B051E0();
  sub_253487D84(v85, v86);
  swift_release();
  uint64_t v22 = v103;
  uint64_t v23 = v104;
LABEL_11:
  uint64_t v24 = v97;
  sub_253B08300();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = sub_253B089D0();
  int v26 = sub_253B09D70();
  if (!os_log_type_enabled(v25, (os_log_type_t)v26))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v48 = sub_25353E62C();
    v49(v48);
LABEL_36:
    *uint64_t v24 = v22;
    v24[1] = v23;
    return;
  }
  int v90 = v26;
  uint64_t v92 = v23;
  uint64_t v27 = swift_slowAlloc();
  uint64_t v28 = swift_slowAlloc();
  uint64_t v103 = v28;
  *(_DWORD *)uint64_t v27 = 136315394;
  uint64_t v29 = *(void *)(v22 + 16);
  uint64_t v30 = MEMORY[0x263F8EE78];
  uint64_t v93 = v27;
  uint64_t v94 = v2;
  os_log_t v91 = v25;
  v89[2] = v28;
  if (v29)
  {
    uint64_t v105 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25353E690();
    uint64_t v30 = v105;
    uint64_t v31 = sub_25353E528(v22);
    uint64_t v33 = v32;
    uint64_t v101 = v22 + 56;
    while ((v31 & 0x8000000000000000) == 0 && v31 < 1 << *(unsigned char *)(v22 + 32))
    {
      sub_25353E644();
      if ((v35 & 1) == 0) {
        goto LABEL_48;
      }
      if (*(_DWORD *)(v22 + 36) != v33) {
        goto LABEL_49;
      }
      int v102 = v34;
      uint64_t v36 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v31);
      uint64_t v37 = v22;
      uint64_t v39 = *v36;
      uint64_t v38 = v36[1];
      uint64_t v105 = v30;
      unint64_t v40 = *(void *)(v30 + 16);
      unint64_t v41 = *(void *)(v30 + 24);
      swift_bridgeObjectRetain();
      if (v40 >= v41 >> 1)
      {
        sub_25353E5F0();
        uint64_t v30 = v105;
      }
      *(void *)(v30 + 16) = v40 + 1;
      uint64_t v42 = v30 + 16 * v40;
      *(void *)(v42 + 32) = v39;
      *(void *)(v42 + 40) = v38;
      int64_t v43 = sub_25353E668();
      sub_25353E158(v43, v44, v45, v37);
      sub_25353E67C();
      uint64_t v22 = v37;
      if (v47)
      {
        sub_253535310(v31, v33, v46);
        swift_bridgeObjectRelease();
        uint64_t v27 = v93;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_24:
  uint64_t v50 = MEMORY[0x25A268A80](v30, MEMORY[0x263F8D310]);
  unint64_t v52 = v51;
  swift_bridgeObjectRelease();
  uint64_t v105 = sub_253464DF8(v50, v52, &v103);
  sub_253B09E80();
  uint64_t v53 = v92;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v27 + 12) = 2080;
  uint64_t v54 = MEMORY[0x263F8EE78];
  if (!*(void *)(v53 + 16))
  {
LABEL_35:
    uint64_t v70 = MEMORY[0x25A268A80](v54, MEMORY[0x263F8D310]);
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v105 = sub_253464DF8(v70, v72, &v103);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v73 = v91;
    _os_log_impl(&dword_253460000, v91, (os_log_type_t)v90, "Allowed global tools: %s and local tools: %s either set through user default or ToolBoxAllowList.plist", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v99);
    uint64_t v23 = v53;
    uint64_t v24 = v97;
    goto LABEL_36;
  }
  v89[1] = &v106;
  uint64_t v105 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  sub_25353E690();
  uint64_t v54 = v105;
  uint64_t v55 = sub_25353E528(v53);
  uint64_t v57 = v56;
  uint64_t v100 = v22;
  uint64_t v101 = v53 + 56;
  while ((v55 & 0x8000000000000000) == 0 && v55 < 1 << *(unsigned char *)(v53 + 32))
  {
    sub_25353E644();
    if ((v59 & 1) == 0) {
      goto LABEL_51;
    }
    if (*(_DWORD *)(v53 + 36) != v57) {
      goto LABEL_52;
    }
    int v102 = v58;
    uint64_t v60 = (uint64_t *)(*(void *)(v53 + 48) + 16 * v55);
    uint64_t v61 = *v60;
    uint64_t v62 = v60[1];
    uint64_t v105 = v54;
    unint64_t v64 = *(void *)(v54 + 16);
    unint64_t v63 = *(void *)(v54 + 24);
    swift_bridgeObjectRetain();
    if (v64 >= v63 >> 1)
    {
      sub_25353E5F0();
      uint64_t v54 = v105;
    }
    *(void *)(v54 + 16) = v64 + 1;
    uint64_t v65 = v54 + 16 * v64;
    *(void *)(v65 + 32) = v61;
    *(void *)(v65 + 40) = v62;
    int64_t v66 = sub_25353E668();
    sub_25353E158(v66, v67, v68, v53);
    sub_25353E67C();
    uint64_t v22 = v100;
    if (v47)
    {
      sub_253535310(v55, v57, v69);
      swift_bridgeObjectRelease();
      uint64_t v27 = v93;
      goto LABEL_35;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

unint64_t ToolBoxAllowLists.description.getter()
{
  unint64_t result = 0xD000000000000022;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000025;
      break;
    case 4:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    default:
      return result;
  }
  return result;
}

IntelligenceFlowPlannerSupport::ToolBoxAllowLists_optional __swiftcall ToolBoxAllowLists.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_253B0A2A0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 6;
  if (v3 < 6) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static ToolBoxAllowLists.allCases.getter()
{
  return &unk_270340DF0;
}

unint64_t ToolBoxAllowLists.rawValue.getter()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x305F305F31763174;
      break;
    case 2:
      unint64_t result = 0x765F6133745F3174;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x61626F6C675F3174;
      break;
    case 5:
      unint64_t result = 0x675F6133745F3174;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25353DF98(unsigned __int8 *a1, char *a2)
{
  return sub_25357B98C(*a1, *a2);
}

uint64_t sub_25353DFA4()
{
  return sub_25397F948(*v0);
}

uint64_t sub_25353DFAC()
{
  return sub_253980228();
}

uint64_t sub_25353DFB4(uint64_t a1)
{
  return sub_253980C9C(a1, *v1);
}

IntelligenceFlowPlannerSupport::ToolBoxAllowLists_optional sub_25353DFBC(Swift::String *a1)
{
  return ToolBoxAllowLists.init(rawValue:)(*a1);
}

unint64_t sub_25353DFC8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ToolBoxAllowLists.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_25353DFF0(void *a1@<X8>)
{
  *a1 = &unk_270340DF0;
}

uint64_t sub_25353E000()
{
  return sub_253B09A10();
}

uint64_t sub_25353E060()
{
  return sub_253B099E0();
}

uint64_t sub_25353E0B0()
{
  sub_25353E65C();
  uint64_t result = sub_253B058D0();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_25353E0DC()
{
  sub_25353E65C();
  uint64_t result = sub_253B058E0();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_25353E104()
{
  sub_25353E65C();
  uint64_t result = sub_253B05900();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_25353E12C()
{
  sub_25353E65C();
  uint64_t result = sub_253B058F0();
  *uint64_t v0 = result;
  return result;
}

int64_t sub_25353E158(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t sub_25353E240()
{
  unint64_t result = qword_269CDE8C8;
  if (!qword_269CDE8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8C8);
  }
  return result;
}

unint64_t sub_25353E290()
{
  unint64_t result = qword_269CDE8D0;
  if (!qword_269CDE8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8D0);
  }
  return result;
}

unint64_t sub_25353E2E0()
{
  unint64_t result = qword_269CDE8D8;
  if (!qword_269CDE8D8)
  {
    sub_25347907C(&qword_269CDE8E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8D8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToolBoxAllowLists(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25353E400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolBoxAllowLists()
{
  return &type metadata for ToolBoxAllowLists;
}

unint64_t sub_25353E438()
{
  unint64_t result = qword_269CDE8E8;
  if (!qword_269CDE8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8E8);
  }
  return result;
}

unint64_t sub_25353E484()
{
  unint64_t result = qword_269CDE8F8;
  if (!qword_269CDE8F8)
  {
    sub_25347907C(&qword_269CDE8F0);
    sub_25353E5A8(&qword_269CDE900, (void (*)(uint64_t))type metadata accessor for Candidate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE8F8);
  }
  return result;
}

uint64_t sub_25353E528(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_25353E5A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25353E5F0()
{
  sub_2539E6C84();
}

uint64_t sub_25353E614()
{
  return v0;
}

uint64_t sub_25353E62C()
{
  return v0;
}

uint64_t sub_25353E668()
{
  return v0;
}

void sub_25353E690()
{
  sub_2539E6C84();
}

uint64_t sub_25353E6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v55 = a3;
  uint64_t v9 = sub_253462A5C(&qword_269CDE828);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v50 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B09440();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  char v46 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  char v45 = (char *)&v44 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v44 - v18;
  MEMORY[0x270FA5388](v17);
  unint64_t v51 = (char *)&v44 - v20;
  sub_25397174C(a1, v66);
  uint64_t v54 = v66[0];
  uint64_t v48 = v66[1];
  int64_t v61 = v66[3];
  unint64_t v21 = v66[4];
  int64_t v49 = (unint64_t)(v66[2] + 64) >> 6;
  v66[7] = v12 + 16;
  uint64_t v60 = v12 + 32;
  unint64_t v52 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v53 = v12;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v47 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v61 << 6);
      goto LABEL_15;
    }
    int64_t v25 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v25 >= v49) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v48 + 8 * v25);
    if (!v26)
    {
      int64_t v27 = v61 + 2;
      if (v61 + 2 >= v49) {
        goto LABEL_34;
      }
      unint64_t v26 = *(void *)(v48 + 8 * v27);
      if (v26) {
        goto LABEL_13;
      }
      int64_t v27 = v61 + 3;
      if (v61 + 3 >= v49) {
        goto LABEL_34;
      }
      unint64_t v26 = *(void *)(v48 + 8 * v27);
      if (v26) {
        goto LABEL_13;
      }
      int64_t v27 = v61 + 4;
      if (v61 + 4 >= v49) {
        goto LABEL_34;
      }
      unint64_t v26 = *(void *)(v48 + 8 * v27);
      if (v26)
      {
LABEL_13:
        int64_t v25 = v27;
      }
      else
      {
        int64_t v25 = v61 + 5;
        if (v61 + 5 >= v49) {
          goto LABEL_34;
        }
        unint64_t v26 = *(void *)(v48 + 8 * v25);
        if (!v26)
        {
          int64_t v40 = v61 + 6;
          while (v40 < v49)
          {
            unint64_t v26 = *(void *)(v48 + 8 * v40++);
            if (v26)
            {
              int64_t v25 = v40 - 1;
              goto LABEL_14;
            }
          }
LABEL_34:
          uint64_t v43 = v47;
          swift_release();
LABEL_35:
          swift_release();
          swift_bridgeObjectRelease();
          sub_25353847C(v56);
          sub_25353847C(v58);
          return v43;
        }
      }
    }
LABEL_14:
    unint64_t v21 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v61 = v25;
LABEL_15:
    uint64_t v28 = v53;
    uint64_t v29 = *(void *)(v53 + 72);
    uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
    uint64_t v31 = v51;
    v30(v51, *(void *)(v54 + 48) + v29 * v24, v11);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v32(v19, v31, v11);
    uint64_t v64 = v56;
    uint64_t v65 = v57;
    uint64_t v62 = v58;
    uint64_t v63 = v59;
    sub_253553E74();
    if (v7)
    {
      (*v52)(v19, v11);
      swift_release();
      uint64_t v43 = v47;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    uint64_t v34 = 1;
    if (v33 == 2)
    {
      uint64_t v35 = (uint64_t)v50;
    }
    else
    {
      uint64_t v35 = (uint64_t)v50;
      if ((v33 & 0x100) != 0)
      {
        v30(v50, (unint64_t)v19, v11);
        uint64_t v34 = 0;
      }
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v35, v34, 1, v11);
    (*v52)(v19, v11);
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v35, 1, v11) == 1)
    {
      uint64_t result = sub_253529654(v35, &qword_269CDE828);
    }
    else
    {
      uint64_t v36 = v45;
      v32(v45, (char *)v35, v11);
      v32(v46, v36, v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253522FB8(0, *(void *)(v47 + 16) + 1, 1, v47);
        uint64_t v47 = v41;
      }
      unint64_t v38 = *(void *)(v47 + 16);
      unint64_t v37 = *(void *)(v47 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_253522FB8(v37 > 1, v38 + 1, 1, v47);
        uint64_t v47 = v42;
      }
      uint64_t v39 = v47;
      *(void *)(v47 + 16) = v38 + 1;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(v39+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ v38 * v29, v46, v11);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25353EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v6 = sub_253B09440();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v7 + 16;
  uint64_t v17 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v31 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v31 + 48) + *(void *)(v7 + 72) * i, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    sub_25353FE3C((uint64_t)v10, v29, v30, v28);
    if (v4)
    {
      (*v17)(v10, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v17)(v10, v6);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v26) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    if (!v23) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v23 - 1) & v23;
  }
  int64_t v24 = v19 + 1;
  if (v19 + 1 >= v26) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  int64_t v24 = v19 + 2;
  if (v19 + 2 >= v26) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  int64_t v24 = v19 + 3;
  if (v19 + 3 >= v26) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_16;
  }
  int64_t v24 = v19 + 4;
  if (v19 + 4 >= v26)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_16:
    int64_t v19 = v24;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v26) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v25 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_25353EF70()
{
  v1[5] = v0;
  uint64_t v2 = sub_253B08BC0();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25353F030, 0, 0);
}

uint64_t sub_25353F030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = v8;
  sub_253552CB4(a1, a2, a3, a4, a5, a6, a7, a8, v34, v36, v42, v45, v48, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v10 = v9;
  sub_2535531E0(v9, v11, v12, v13, v14, v15, v16, v17, v35, v37, v39, v40, v41, v43, v46, v48, v49, v50, v51,
    v52,
    v53,
    v54,
    v55);
  uint64_t v18 = (void *)v8[5];
  uint64_t v19 = v48;
  uint64_t v20 = v49;
  unint64_t v21 = v18 + 18;
  uint64_t v22 = v18[21];
  uint64_t v23 = v18[22];
  sub_253472068(v18 + 18, v22);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 112))(&v48, v22, v23);
  uint64_t v24 = v8[5];
  uint64_t v25 = v49;
  uint64_t v44 = v48;
  uint64_t v26 = v20;
  uint64_t v27 = swift_allocObject();
  v8[9] = v27;
  *(void *)(v27 + 16) = MEMORY[0x263F8EE78];
  uint64_t v28 = v18[21];
  uint64_t v29 = v18[22];
  uint64_t v47 = v28;
  sub_253472068(v21, v28);
  sub_253553728();
  uint64_t v30 = (void *)swift_allocObject();
  v8[10] = v30;
  v30[2] = v24;
  v30[3] = v44;
  v30[4] = v25;
  v30[5] = v19;
  v30[6] = v26;
  v30[7] = v10;
  v30[8] = v27;
  unint64_t v38 = (uint64_t (*)(uint64_t, void (*)(uint64_t), void *, uint64_t, uint64_t))(*(void *)(v29 + 96)
                                                                                                  + **(int **)(v29 + 96));
  swift_retain();
  swift_retain();
  uint64_t v31 = (void *)swift_task_alloc();
  v8[11] = v31;
  *uint64_t v31 = v8;
  v31[1] = sub_25353F2BC;
  uint64_t v32 = v8[8];
  return v38(v32, sub_25354099C, v30, v47, v29);
}

uint64_t sub_25353F2BC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  uint64_t v3 = *(void *)(*(void *)v1 + 56);
  uint64_t v4 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0) {
    char v5 = sub_25353F4EC;
  }
  else {
    char v5 = sub_25353F450;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25353F450()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_25353F4EC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25353F558()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_25353F578, 0, 0);
}

uint64_t sub_25353F578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = v8;
  sub_253552CB4(a1, a2, a3, a4, a5, a6, a7, a8, v36, v38, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
  uint64_t v10 = v9;
  sub_2535531E0(v9, v11, v12, v13, v14, v15, v16, v17, v37, v39, v41, v42, v43, v44, v45, v46, v47, v48, v49,
    v50,
    v51,
    v52,
    v53);
  uint64_t v18 = *(void **)(v8 + 16);
  uint64_t v20 = v44;
  uint64_t v19 = v45;
  uint64_t v21 = v18[21];
  uint64_t v22 = v18[22];
  sub_253472068(v18 + 18, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 112))(&v44, v21, v22);
  uint64_t v23 = v44;
  uint64_t v24 = v45;
  if (v44)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_bridgeObjectRetain();
    sub_253537F3C(v25, v23);
    uint64_t v40 = v26;
  }
  else
  {
    uint64_t v40 = 0;
  }
  if (qword_269CDA7D0 != -1) {
    swift_once();
  }
  uint64_t v27 = *(void *)(v8 + 16);
  uint64_t v28 = sub_253B08400();
  sub_253462BD4(v28, (uint64_t)qword_269D7B660);
  type metadata accessor for SharedAssistantSchemaProvider();
  sub_253462C0C();
  sub_253B083C0();
  uint64_t v29 = sub_253B093B0();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25354084C(v23);
  sub_25354084C(v20);
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v31 = sub_25353E6B0(v30, v27, v40, v23, v24, v20, v19);
  sub_25353847C(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25353847C(v20);
  uint64_t v32 = sub_25353CF88(v31);
  uint64_t v44 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25353EC68(v32, v29, v10, &v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v44;
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v8 + 8);
  return v34(v33);
}

void sub_25353F864(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v84 = a8;
  uint64_t v82 = a7;
  uint64_t v14 = sub_253B092C0();
  unint64_t v83 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = a3;
  unint64_t v86 = a4;
  uint64_t v87 = a5;
  uint64_t v88 = a6;
  sub_253553A3C();
  if (!v8)
  {
    unint64_t v17 = v83;
    uint64_t v79 = a1;
    if (v89 << 8 != 512)
    {
      uint64_t v77 = (uint64_t *)(v84 + 16);
      uint64_t v78 = sub_253B08AF0();
      uint64_t v19 = v18;
      sub_253B08A90();
      uint64_t v20 = sub_253B09270();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v14);
      sub_253B08B00();
      uint64_t v85 = v20;
      unint64_t v86 = v22;
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v23 = sub_253B01F34(0, v85, v86);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      sub_253B08AF0();
      uint64_t v26 = v82;
      if (*(void *)(v82 + 16) && (unint64_t v27 = sub_25396E0AC(), (v28 & 1) != 0))
      {
        unint64_t v76 = v23;
        uint64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 32 * v27);
        uint64_t v30 = *v29;
        uint64_t v31 = v29[1];
        uint64_t v32 = v29[2];
        uint64_t v33 = v29[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v30) {
          uint64_t v34 = v30;
        }
        else {
          uint64_t v34 = MEMORY[0x263F8EE78];
        }
        if (!v31)
        {
          swift_bridgeObjectRelease();
          uint64_t v31 = MEMORY[0x263F8EE78];
        }
        uint64_t v35 = v77;
        swift_beginAccess();
        sub_2539DFA94();
        uint64_t v36 = *(void *)(*v35 + 16);
        sub_2539DFB68(v36);
        uint64_t v37 = *v35;
        *(void *)(v37 + 16) = v36 + 1;
        uint64_t v38 = (void *)(v37 + (v36 << 6));
        v38[4] = v78;
        v38[5] = v19;
        v38[6] = v76;
        v38[7] = v25;
        v38[8] = v32;
        v38[9] = v33;
        v38[10] = v34;
        v38[11] = v31;
        swift_endAccess();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = sub_253B08AD0();
        uint64_t v75 = 0;
        unint64_t v76 = v23;
        uint64_t v73 = v25;
        uint64_t v74 = v19;
        uint64_t v82 = *(void *)(v39 + 16);
        if (v82)
        {
          uint64_t v40 = *(void *)(sub_253B09490() - 8);
          unint64_t v81 = v39 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
          uint64_t v80 = *(void *)(v40 + 72);
          uint64_t v72 = v39;
          swift_bridgeObjectRetain();
          uint64_t v41 = 0;
          uint64_t v42 = MEMORY[0x263F8EE78];
          uint64_t v43 = MEMORY[0x263F8EE78];
          do
          {
            uint64_t v84 = v41;
            unint64_t v44 = v81 + v80 * v41;
            uint64_t v45 = sub_253B09480();
            uint64_t v46 = *(void *)(v45 + 16);
            if (v46)
            {
              unint64_t v83 = v44;
              swift_bridgeObjectRetain();
              uint64_t v47 = (uint64_t *)(v45 + 40);
              do
              {
                uint64_t v48 = *(v47 - 1);
                uint64_t v49 = *v47;
                swift_bridgeObjectRetain_n();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_2535228AC();
                  uint64_t v43 = v52;
                }
                unint64_t v50 = *(void *)(v43 + 16);
                if (v50 >= *(void *)(v43 + 24) >> 1)
                {
                  sub_2535228AC();
                  uint64_t v43 = v53;
                }
                v47 += 2;
                *(void *)(v43 + 16) = v50 + 1;
                uint64_t v51 = v43 + 16 * v50;
                *(void *)(v51 + 32) = v48;
                *(void *)(v51 + 40) = v49;
                swift_bridgeObjectRelease();
                --v46;
              }
              while (v46);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            uint64_t v54 = sub_253B09470();
            uint64_t v55 = *(void *)(v54 + 16);
            if (v55)
            {
              swift_bridgeObjectRetain();
              uint64_t v56 = (uint64_t *)(v54 + 40);
              do
              {
                uint64_t v58 = *(v56 - 1);
                uint64_t v57 = *v56;
                swift_bridgeObjectRetain_n();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_2535228AC();
                  uint64_t v42 = v61;
                }
                unint64_t v59 = *(void *)(v42 + 16);
                if (v59 >= *(void *)(v42 + 24) >> 1)
                {
                  sub_2535228AC();
                  uint64_t v42 = v62;
                }
                v56 += 2;
                *(void *)(v42 + 16) = v59 + 1;
                uint64_t v60 = v42 + 16 * v59;
                *(void *)(v60 + 32) = v58;
                *(void *)(v60 + 40) = v57;
                swift_bridgeObjectRelease();
                --v55;
              }
              while (v55);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            uint64_t v41 = v84 + 1;
          }
          while (v84 + 1 != v82);
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = MEMORY[0x263F8EE78];
          uint64_t v43 = MEMORY[0x263F8EE78];
        }
        uint64_t v63 = sub_253B08AB0();
        uint64_t v65 = v64;
        int64_t v66 = v77;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2539DFA94();
        uint64_t v67 = *(void *)(*v66 + 16);
        sub_2539DFB68(v67);
        uint64_t v68 = *v66;
        *(void *)(v68 + 16) = v67 + 1;
        char v69 = (void *)(v68 + (v67 << 6));
        uint64_t v70 = v74;
        v69[4] = v78;
        v69[5] = v70;
        uint64_t v71 = v73;
        v69[6] = v76;
        v69[7] = v71;
        v69[8] = v63;
        v69[9] = v65;
        v69[10] = v43;
        v69[11] = v42;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_25353FE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v82 = a4;
  uint64_t v90 = a3;
  uint64_t v87 = sub_253B09350();
  uint64_t v5 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_253462A5C(&qword_269CDE820);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v78 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v75 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v75 - v14;
  uint64_t v16 = sub_253B09400();
  unint64_t v80 = sub_253B01F34(0, v16, v17);
  uint64_t v81 = v18;
  swift_bridgeObjectRelease();
  unint64_t v83 = v15;
  sub_253466B2C(a2, (uint64_t)v15);
  uint64_t v19 = sub_253B09400();
  uint64_t v21 = v20;
  sub_253B09410();
  sub_253B09340();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v87);
  uint64_t v88 = v19;
  uint64_t v89 = v21;
  swift_bridgeObjectRetain();
  sub_253B09860();
  uint64_t v22 = v90;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v89;
  uint64_t v79 = v88;
  sub_253B09400();
  if (*(void *)(v22 + 16))
  {
    unint64_t v24 = sub_25396E0AC();
    if (v25)
    {
      uint64_t v26 = (uint64_t *)(*(void *)(v22 + 56) + 32 * v24);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      uint64_t v30 = v26[2];
      uint64_t v29 = v26[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v28) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = MEMORY[0x263F8EE78];
      }
      if (!v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = MEMORY[0x263F8EE78];
      }
      uint64_t v32 = v82;
      sub_2539DFA94();
      uint64_t v33 = *(void *)(*v32 + 16);
      sub_2539DFB68(v33);
      uint64_t v34 = *v32;
      *(void *)(v34 + 16) = v33 + 1;
      uint64_t v35 = (void *)(v34 + (v33 << 6));
      v35[4] = v79;
      v35[5] = v23;
      uint64_t v36 = v81;
      v35[6] = v80;
      v35[7] = v36;
      v35[8] = v30;
      v35[9] = v29;
      v35[10] = v31;
      v35[11] = v27;
      return sub_253529654((uint64_t)v83, &qword_269CDE820);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = (uint64_t)v83;
  sub_25354088C((uint64_t)v83, (uint64_t)v13);
  uint64_t v39 = sub_253B08A60();
  int v40 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v39);
  uint64_t v77 = v39;
  if (v40 == 1)
  {
    sub_253529654((uint64_t)v13, &qword_269CDE820);
  }
  else
  {
    uint64_t v41 = sub_253B08A40();
    (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v13, v39);
    uint64_t v86 = *(void *)(v41 + 16);
    if (v86)
    {
      uint64_t v76 = v23;
      uint64_t v42 = *(void *)(sub_253B09490() - 8);
      unint64_t v85 = v41 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      uint64_t v84 = *(void *)(v42 + 72);
      uint64_t v75 = v41;
      swift_bridgeObjectRetain();
      uint64_t v43 = 0;
      uint64_t v44 = MEMORY[0x263F8EE78];
      uint64_t v45 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v90 = v43;
        uint64_t v46 = v85 + v84 * v43;
        uint64_t v47 = sub_253B09480();
        uint64_t v48 = *(void *)(v47 + 16);
        if (v48)
        {
          uint64_t v87 = v46;
          swift_bridgeObjectRetain();
          uint64_t v49 = (uint64_t *)(v47 + 40);
          do
          {
            uint64_t v51 = *(v49 - 1);
            uint64_t v50 = *v49;
            swift_bridgeObjectRetain_n();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_2535228AC();
              uint64_t v45 = v54;
            }
            unint64_t v52 = *(void *)(v45 + 16);
            if (v52 >= *(void *)(v45 + 24) >> 1)
            {
              sub_2535228AC();
              uint64_t v45 = v55;
            }
            v49 += 2;
            *(void *)(v45 + 16) = v52 + 1;
            uint64_t v53 = v45 + 16 * v52;
            *(void *)(v53 + 32) = v51;
            *(void *)(v53 + 40) = v50;
            swift_bridgeObjectRelease();
            --v48;
          }
          while (v48);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v56 = sub_253B09470();
        uint64_t v57 = *(void *)(v56 + 16);
        if (v57)
        {
          swift_bridgeObjectRetain();
          uint64_t v58 = (uint64_t *)(v56 + 40);
          do
          {
            uint64_t v60 = *(v58 - 1);
            uint64_t v59 = *v58;
            swift_bridgeObjectRetain_n();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_2535228AC();
              uint64_t v44 = v63;
            }
            unint64_t v61 = *(void *)(v44 + 16);
            if (v61 >= *(void *)(v44 + 24) >> 1)
            {
              sub_2535228AC();
              uint64_t v44 = v64;
            }
            v58 += 2;
            *(void *)(v44 + 16) = v61 + 1;
            uint64_t v62 = v44 + 16 * v61;
            *(void *)(v62 + 32) = v60;
            *(void *)(v62 + 40) = v59;
            swift_bridgeObjectRelease();
            --v57;
          }
          while (v57);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v43 = v90 + 1;
      }
      while (v90 + 1 != v86);
      swift_bridgeObjectRelease_n();
      uint64_t v38 = (uint64_t)v83;
      uint64_t v23 = v76;
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v45 = MEMORY[0x263F8EE78];
LABEL_33:
  uint64_t v65 = v78;
  sub_25354088C(v38, v78);
  uint64_t v66 = v77;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v65, 1, v77) == 1)
  {
    sub_253529654(v65, &qword_269CDE820);
    uint64_t v67 = 0;
    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v67 = sub_253B08A50();
    uint64_t v68 = v69;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v65, v66);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v70 = v82;
  sub_2539DFA94();
  uint64_t v71 = *(void *)(*v70 + 16);
  sub_2539DFB68(v71);
  uint64_t v72 = *v70;
  *(void *)(v72 + 16) = v71 + 1;
  uint64_t v73 = (void *)(v72 + (v71 << 6));
  v73[4] = v79;
  v73[5] = v23;
  uint64_t v74 = v81;
  v73[6] = v80;
  v73[7] = v74;
  v73[8] = v67;
  v73[9] = v68;
  v73[10] = v45;
  v73[11] = v44;
  sub_253529654(v38, &qword_269CDE820);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ToolboxMetadata.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ToolboxMetadata.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ToolboxMetadata.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ToolboxMetadata.positiveUtterances.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolboxMetadata.negativeUtterances.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ToolboxMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ToolboxMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ToolboxMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolboxMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolboxMetadata(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolboxMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolboxMetadata()
{
  return &type metadata for ToolboxMetadata;
}

uint64_t sub_25354084C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_25354088C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDE820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2535408F4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25354092C()
{
  swift_release();
  if (*(void *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

void sub_25354099C(uint64_t a1)
{
  sub_25353F864(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t ToolboxCancellationStatus.isCancelled.getter()
{
  return *(unsigned char *)(v0 + 16) & 1;
}

void ToolDatabase.LaunchServicesDatabaseVersion.encodedLSDBVersion()()
{
  uint64_t v0 = (void *)MEMORY[0x25A269750]();
  sub_253543D6C();
}

BOOL static ToolBoxError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ToolBoxError.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t sub_253540A90(uint64_t a1, uint64_t a2)
{
  return ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

Swift::String __swiftcall ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v3 = countAndFlagsBits;
  uint64_t v4 = object;
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t sub_253540ADC()
{
  return ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)();
}

uint64_t ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)()
{
  uint64_t v1 = sub_253B09350();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_25348366C();
  uint64_t v5 = sub_253B09400();
  sub_253B09410();
  sub_253B09340();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  swift_bridgeObjectRetain();
  sub_2534D954C();
  sub_253B09860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t String.databaseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  uint64_t v4 = *MEMORY[0x263F84740];
  sub_253B05870();
  sub_25346CAF4();
  (*(void (**)(void *, uint64_t))(v5 + 104))(a3, v4);
  return swift_bridgeObjectRetain();
}

uint64_t sub_253540C60@<X0>(void *a1@<X8>)
{
  return String.databaseValue.getter(*v1, v1[1], a1);
}

BOOL static ToolboxEmbeddingModel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ToolboxEmbeddingModel.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t ToolboxEmbeddingModel.hashValue.getter()
{
  return sub_253B0A630();
}

uint64_t ToolboxVersion.versionNumber.getter()
{
  return *(void *)v0;
}

uint64_t ToolboxVersion.versionNumber.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ToolboxVersion.versionNumber.modify())()
{
  return nullsub_1;
}

uint64_t ToolboxVersion.client.getter@<X0>(uint64_t a1@<X8>)
{
  sub_253547168();
  sub_25346CAF4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t ToolboxVersion.client.setter(uint64_t a1)
{
  sub_253547168();
  sub_25346CAF4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  return v5(v1, a1, v3);
}

uint64_t (*ToolboxVersion.client.modify())()
{
  return nullsub_1;
}

uint64_t ToolboxVersion.init(versionNumber:client:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  sub_253547168();
  sub_25346CAF4();
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 32);
  return v7(a3, a2, v5);
}

uint64_t ToolsOverride.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_253472068(a1, a1[3]);
  sub_2534D954C();
  sub_253B0A650();
  if (!v2)
  {
    sub_253472068(v7, v7[3]);
    sub_253462A5C(&qword_269CDE918);
    sub_2535442C4((uint64_t)&unk_269CDE920);
    sub_253B0A4D0();
    uint64_t v5 = v7[6];
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v7);
    *a2 = v5;
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

uint64_t sub_253540FA8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x736C6F6F74 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253541028()
{
  return 0x736C6F6F74;
}

uint64_t sub_253541040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253540FA8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25354106C(uint64_t a1)
{
  unint64_t v2 = sub_253544278();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2535410A8(uint64_t a1)
{
  unint64_t v2 = sub_253544278();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolsOverride.encode(to:)()
{
  sub_2534847F8();
  sub_253462A5C(&qword_269CDE930);
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_253465A3C();
  uint64_t v1 = (void *)sub_2534D954C();
  sub_253472068(v1, v2);
  sub_253544278();
  sub_253B0A680();
  sub_253462A5C(&qword_269CDE918);
  sub_2535442C4((uint64_t)&unk_269CDE940);
  sub_253B0A440();
  sub_2534F8390();
  v3();
  sub_2534847C8();
}

uint64_t sub_25354121C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ToolsOverride.init(from:)(a1, a2);
}

void sub_253541234()
{
}

uint64_t ToolDefinitionOverrride.negativeExamples.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolDefinitionOverrride.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_253541288()
{
  unint64_t v0 = sub_253B0A2A0();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_2535412D8(char a1)
{
  if (!a1) {
    return sub_2535471BC();
  }
  if (a1 == 1) {
    return 0x6D6178655F67656ELL;
  }
  return 0x7470697263736564;
}

uint64_t sub_25354132C(unsigned __int8 *a1, char *a2)
{
  return sub_25357B6F4(*a1, *a2);
}

uint64_t sub_253541338()
{
  return sub_25397F960(*v0);
}

uint64_t sub_253541340(uint64_t a1)
{
  return sub_253980090(a1, *v1);
}

uint64_t sub_253541348(uint64_t a1)
{
  return sub_253980DFC(a1, *v1);
}

uint64_t sub_253541350@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_253541288();
  *a1 = result;
  return result;
}

uint64_t sub_253541380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2535412D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2535413AC()
{
  return sub_2535412D8(*v0);
}

uint64_t sub_2535413B4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2535412D4();
  *a1 = result;
  return result;
}

uint64_t sub_2535413DC(uint64_t a1)
{
  unint64_t v2 = sub_253544388();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253541418(uint64_t a1)
{
  unint64_t v2 = sub_253544388();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolDefinitionOverrride.encode(to:)()
{
  sub_2534847F8();
  char v3 = v2;
  uint64_t v4 = sub_253462A5C(&qword_269CDE950);
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  sub_253472068(v3, v3[3]);
  sub_253544388();
  sub_253B0A680();
  sub_253462A5C(&qword_269CDC550);
  sub_2535443D4((uint64_t)&qword_269CDDF80);
  sub_25354711C();
  if (!v0)
  {
    sub_25354711C();
    sub_253B0A3F0();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_2534F8590();
  sub_2534847C8();
}

void ToolDefinitionOverrride.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_253462A5C(&qword_269CDE960);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_25346CC6C();
  sub_253472068(v12, v12[3]);
  sub_253544388();
  sub_253B0A660();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  }
  else
  {
    uint64_t v22 = v14;
    sub_253462A5C(&qword_269CDC550);
    sub_2535443D4((uint64_t)&qword_269CDE0C0);
    sub_2535470B4();
    swift_bridgeObjectRetain();
    sub_2535470B4();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_253B0A320();
    uint64_t v18 = v17;
    uint64_t v19 = v16;
    uint64_t v20 = sub_2535470E4();
    v21(v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v22 = a10;
    v22[1] = a10;
    v22[2] = v19;
    v22[3] = v18;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2534847C8();
}

void sub_25354180C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ToolDefinitionOverrride.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_253541824()
{
}

uint64_t ToolBoxToolSearchResult.toolDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25354212C(MEMORY[0x263F7FED0], a1);
}

float ToolBoxToolSearchResult.score.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxToolSearchResult(0) + 20));
}

uint64_t sub_253541878(char a1)
{
  if (a1) {
    return 0x65726F6373;
  }
  else {
    return 0x696665446C6F6F74;
  }
}

uint64_t sub_2535418B8()
{
  return sub_253541878(*v0);
}

uint64_t sub_2535418C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2535421B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2535418E8(uint64_t a1)
{
  unint64_t v2 = sub_253544454();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253541924(uint64_t a1)
{
  unint64_t v2 = sub_253544454();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolBoxToolSearchResult.encode(to:)()
{
}

void ToolBoxToolSearchResult.init(from:)()
{
  sub_253547278();
  sub_253547334(v3);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDE980);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  type metadata accessor for ToolBoxToolSearchResult(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2535471D0();
  sub_253544454();
  sub_253547090();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_25354724C();
    sub_2535444A0((uint64_t)&unk_269CDE988);
    sub_253546FD4();
    uint64_t v8 = sub_253547004();
    v9(v8);
    sub_25354703C();
    uint64_t v10 = sub_253546FBC();
    v11(v10);
    sub_25354723C();
    sub_253544550(v2, v12, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
    sub_253547294();
  }
  sub_2534F8590();
  sub_25354725C();
}

void sub_253541B7C()
{
}

void sub_253541B94()
{
}

uint64_t ToolBoxAssistantSchemaSearchResult.assistantSchemaIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25354212C(MEMORY[0x263F80C28], a1);
}

float ToolBoxAssistantSchemaSearchResult.score.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxAssistantSchemaSearchResult(0) + 20));
}

uint64_t sub_253541BE8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000019 && a2 == 0x8000000253B0CDE0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253541CCC(char a1)
{
  if (a1) {
    return 0x65726F6373;
  }
  else {
    return 0xD000000000000019;
  }
}

uint64_t sub_253541D04()
{
  return sub_253541CCC(*v0);
}

uint64_t sub_253541D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253541BE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253541D34(uint64_t a1)
{
  unint64_t v2 = sub_253544504();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253541D70(uint64_t a1)
{
  unint64_t v2 = sub_253544504();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolBoxAssistantSchemaSearchResult.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDE990);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253472068(a1, a1[3]);
  sub_253544504();
  sub_253B0A680();
  sub_253B09440();
  sub_2535444A0((uint64_t)&unk_269CDE9A0);
  sub_253B0A440();
  if (!v1)
  {
    type metadata accessor for ToolBoxAssistantSchemaSearchResult(0);
    sub_25354719C();
    sub_253B0A420();
  }
  sub_2534F8390();
  return v4();
}

void ToolBoxAssistantSchemaSearchResult.init(from:)()
{
  sub_253547278();
  uint64_t v3 = v2;
  sub_253B09440();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDE9A8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  type metadata accessor for ToolBoxAssistantSchemaSearchResult(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2535471D0();
  sub_253544504();
  sub_253547090();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
  }
  else
  {
    sub_25354724C();
    sub_2535444A0((uint64_t)&unk_269CDE9B0);
    sub_253546FD4();
    uint64_t v8 = sub_253547004();
    v9(v8);
    sub_25354703C();
    uint64_t v10 = sub_253546FBC();
    v11(v10);
    sub_25354723C();
    sub_253544550(v1, v12, (void (*)(void))type metadata accessor for ToolBoxAssistantSchemaSearchResult);
    sub_253547294();
  }
  sub_2534F8590();
  sub_25354725C();
}

void sub_2535420E4()
{
}

uint64_t sub_2535420FC(void *a1)
{
  return ToolBoxAssistantSchemaSearchResult.encode(to:)(a1);
}

uint64_t ToolBoxClientActionSearchResult.toolDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25354212C(MEMORY[0x263F7FED0], a1);
}

uint64_t sub_25354212C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a2, v2, v4);
}

float ToolBoxClientActionSearchResult.score.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for ToolBoxClientActionSearchResult(0) + 20));
}

uint64_t sub_2535421B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2535422C4(uint64_t a1)
{
  unint64_t v2 = sub_253544618();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253542300(uint64_t a1)
{
  unint64_t v2 = sub_253544618();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolBoxClientActionSearchResult.encode(to:)()
{
}

void sub_25354238C()
{
  sub_2534847F8();
  uint64_t v12 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = sub_253462A5C(v7);
  sub_253465998();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_2534B3294();
  sub_253472068(v6, v6[3]);
  v4();
  sub_253B0A680();
  sub_253B08B30();
  sub_2535444A0((uint64_t)&unk_269CDE978);
  sub_253B0A440();
  if (!v0)
  {
    v12(0);
    sub_25354719C();
    sub_253B0A420();
  }
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v8);
  sub_2534F8590();
  sub_2534847C8();
}

void ToolBoxClientActionSearchResult.init(from:)()
{
  sub_253547278();
  sub_253547334(v3);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDE9C8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  type metadata accessor for ToolBoxClientActionSearchResult(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2535471D0();
  sub_253544618();
  sub_253547090();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_25354724C();
    sub_2535444A0((uint64_t)&unk_269CDE988);
    sub_253546FD4();
    uint64_t v8 = sub_253547004();
    v9(v8);
    sub_25354703C();
    uint64_t v10 = sub_253546FBC();
    v11(v10);
    sub_25354723C();
    sub_253544550(v2, v12, (void (*)(void))type metadata accessor for ToolBoxClientActionSearchResult);
    sub_253547294();
  }
  sub_2534F8590();
  sub_25354725C();
}

void sub_2535426C0()
{
}

void sub_2535426D8()
{
}

uint64_t ToolboxCustomKeyResult.hash(into:)()
{
  sub_253B09440();
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25348366C();
  uint64_t v2 = sub_253B08B30();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_2535471F4();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_25346CC6C();
  uint64_t v7 = sub_2534D954C();
  sub_253544550(v7, v8, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_25347FA84();
    v10();
    sub_253B0A600();
    sub_2535444A0((uint64_t)&qword_269CDE700);
    sub_253B095D0();
    sub_2534F8390();
    return v11();
  }
  else
  {
    sub_2535472C4();
    sub_25347FA84();
    v13();
    sub_253B0A600();
    sub_2535444A0((uint64_t)&unk_269CDE9D0);
    sub_253B095D0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v0, v2);
  }
}

uint64_t static ToolboxCustomKeyResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  sub_253B09440();
  sub_253465998();
  uint64_t v28 = v6;
  uint64_t v29 = v5;
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  uint64_t v7 = sub_253B08B30();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_2535471F4();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534B340C();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = sub_253462A5C(&qword_269CDE9D8);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  sub_253544550(v30, (uint64_t)v18, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
  sub_253544550(v31, v19, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_253544550((uint64_t)v18, v4, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = v28;
      uint64_t v20 = v29;
      sub_25347FA84();
      v22();
      char v23 = sub_253B093E0();
      unint64_t v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v24(v2, v20);
      v24(v4, v20);
LABEL_9:
      sub_2535445A4((uint64_t)v18, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
      return v23 & 1;
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v4, v29);
  }
  else
  {
    sub_253544550((uint64_t)v18, (uint64_t)v14, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_2535472C4();
      sub_25347FA84();
      v25();
      char v23 = sub_253B08AE0();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v26(v3, v7);
      v26((uint64_t)v14, v7);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v7);
  }
  sub_253544684((uint64_t)v18);
  char v23 = 0;
  return v23 & 1;
}

uint64_t sub_253542C28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61747369737361 && a2 == 0xEF616D6568635374)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253542D60(char a1)
{
  if (a1) {
    return 0x6E61747369737361;
  }
  else {
    return 0x696665446C6F6F74;
  }
}

uint64_t sub_253542DB0(uint64_t a1)
{
  unint64_t v2 = sub_253544730();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253542DEC(uint64_t a1)
{
  unint64_t v2 = sub_253544730();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253542E28()
{
  return sub_253542D60(*v0);
}

uint64_t sub_253542E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253542C28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253542E58(uint64_t a1)
{
  unint64_t v2 = sub_2535446E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253542E94(uint64_t a1)
{
  unint64_t v2 = sub_2535446E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_253542ED0(uint64_t a1)
{
  unint64_t v2 = sub_25354477C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253542F0C(uint64_t a1)
{
  unint64_t v2 = sub_25354477C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolboxCustomKeyResult.encode(to:)()
{
  sub_2534847F8();
  uint64_t v27 = v0;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDE9E0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253547148(v6, v21);
  sub_253B09440();
  sub_253465998();
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  MEMORY[0x270FA5388](v7);
  sub_25346CB04();
  uint64_t v24 = v9;
  sub_253462A5C(&qword_269CDE9E8);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_253B08B30();
  sub_253465998();
  uint64_t v22 = v12;
  uint64_t v23 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = sub_2534D9B74();
  type metadata accessor for ToolboxCustomKeyResult(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDE9F0);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_253465A3C();
  sub_253472068(v4, v4[3]);
  sub_2535446E4();
  sub_253B0A680();
  sub_253544550(v27, v1, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_25347FA84();
    v16();
    sub_253544730();
    sub_253B0A3A0();
    sub_2535444A0((uint64_t)&unk_269CDE9A0);
    sub_253B0A440();
    sub_2534659CC();
    v17();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  }
  else
  {
    sub_25347FA84();
    v18();
    sub_25354477C();
    sub_253B0A3A0();
    sub_2535444A0((uint64_t)&unk_269CDE978);
    sub_253B0A440();
    sub_2534659CC();
    v19();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v2, v23);
  }
  sub_2534659CC();
  v20();
  sub_2534847C8();
}

uint64_t ToolboxCustomKeyResult.hashValue.getter()
{
  return sub_253B0A630();
}

void ToolboxCustomKeyResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v58 = v0;
  uint64_t v3 = v2;
  uint64_t v49 = v4;
  sub_253462A5C(&qword_269CDEA10);
  sub_253465998();
  uint64_t v52 = v5;
  uint64_t v53 = v6;
  MEMORY[0x270FA5388](v5);
  sub_25346CB04();
  uint64_t v55 = v7;
  sub_253462A5C(&qword_269CDEA18);
  sub_253465998();
  uint64_t v50 = v9;
  uint64_t v51 = v8;
  MEMORY[0x270FA5388](v8);
  sub_25346CB04();
  uint64_t v54 = v10;
  sub_253462A5C(&qword_269CDEA20);
  sub_253465998();
  uint64_t v56 = v12;
  uint64_t v57 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = sub_2534D9C00();
  uint64_t v14 = type metadata accessor for ToolboxCustomKeyResult(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534B340C();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v45 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v45 - v20;
  sub_253472068(v3, v3[3]);
  sub_2535446E4();
  uint64_t v22 = v58;
  sub_253B0A660();
  if (v22) {
    goto LABEL_8;
  }
  uint64_t v46 = v1;
  uint64_t v47 = v19;
  uint64_t v45 = v21;
  uint64_t v48 = v14;
  uint64_t v58 = v3;
  uint64_t v23 = sub_253B0A390();
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24
    || (char v25 = *(unsigned char *)(v23 + 32),
        sub_25347B78C(1, v24, v23, v23 + 32, 0, (2 * v24) | 1),
        uint64_t v27 = v26,
        unint64_t v29 = v28,
        swift_bridgeObjectRelease(),
        v27 != v29 >> 1))
  {
    uint64_t v30 = v48;
    uint64_t v31 = sub_253B0A090();
    swift_allocError();
    uint64_t v33 = v32;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v33 = v30;
    sub_253B0A2D0();
    sub_253B0A080();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x263F8DCB0], v31);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v34 = sub_253547224();
    v35(v34);
    uint64_t v3 = v58;
LABEL_8:
    uint64_t v36 = (uint64_t)v3;
    goto LABEL_9;
  }
  if (v25)
  {
    sub_253544730();
    sub_2535472D8();
    sub_253B09440();
    sub_2535444A0((uint64_t)&unk_269CDE9B0);
    uint64_t v37 = v46;
    sub_253B0A370();
    sub_2534659CC();
    v40();
    swift_unknownObjectRelease();
    uint64_t v41 = sub_253547224();
    v42(v41);
    swift_storeEnumTagMultiPayload();
    uint64_t v43 = v37;
  }
  else
  {
    sub_25354477C();
    sub_2535472D8();
    sub_253B08B30();
    sub_2535444A0((uint64_t)&unk_269CDE988);
    uint64_t v43 = (uint64_t)v47;
    sub_253B0A370();
    sub_2534659CC();
    v38();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v39();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v44 = (uint64_t)v45;
  sub_2535448C8(v43, (uint64_t)v45);
  sub_2535448C8(v44, v49);
  uint64_t v36 = (uint64_t)v58;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v36);
  sub_2534847C8();
}

void sub_253543900()
{
}

void sub_253543918()
{
}

uint64_t sub_253543938()
{
  return sub_253B0A630();
}

IntelligenceFlowPlannerSupport::ToolBoxToolScope_optional __swiftcall ToolBoxToolScope.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (IntelligenceFlowPlannerSupport::ToolBoxToolScope_optional)rawValue;
}

void *static ToolBoxToolScope.allCases.getter()
{
  return &unk_270340E80;
}

uint64_t sub_253543998()
{
  return sub_25397F96C(*v0);
}

uint64_t sub_2535439A0(uint64_t a1)
{
  return sub_253A3B568(a1, *v1);
}

uint64_t sub_2535439A8(uint64_t a1)
{
  return sub_253980A40(a1, *v1);
}

IntelligenceFlowPlannerSupport::ToolBoxToolScope_optional sub_2535439B0(Swift::Int64 *a1)
{
  return ToolBoxToolScope.init(rawValue:)(*a1);
}

void sub_2535439B8(void *a1@<X8>)
{
  *a1 = &unk_270340E80;
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional __swiftcall ToolBoxToolType.init(_:)(Swift::String a1)
{
  char v2 = v1;
  BOOL v3 = a1._countAndFlagsBits == 0x6E61747369737361 && a1._object == (void *)0xEF616D6568635374;
  if (v3 || (object = a1._object, uint64_t countAndFlagsBits = a1._countAndFlagsBits, (sub_25351F0B0() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
    goto LABEL_7;
  }
  if (countAndFlagsBits == 0x7261507473726966 && object == (void *)0xED00007070417974)
  {
    sub_2535472F8();
LABEL_15:
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
    goto LABEL_7;
  }
  if (sub_25351F0B0()) {
    goto LABEL_15;
  }
  if (countAndFlagsBits == 0x7261506472696874 && object == (void *)0xED00007070417974)
  {
    sub_2535472F8();
LABEL_23:
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
    goto LABEL_7;
  }
  if (sub_25351F0B0()) {
    goto LABEL_23;
  }
  BOOL v10 = countAndFlagsBits == 0x6341746E65696C63 && object == (void *)0xEC0000006E6F6974;
  if (v10 || (sub_25351F0B0() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }
  else if (countAndFlagsBits == 0x79747265706F7270 && object == (void *)0xEF73726574746553)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }
  else
  {
    char v12 = sub_25351F0B0();
    result.value = swift_bridgeObjectRelease();
    if (v12) {
      char v7 = 4;
    }
    else {
      char v7 = 5;
    }
  }
LABEL_7:
  *char v2 = v7;
  return result;
}

uint64_t ToolBoxToolType.description.getter()
{
  uint64_t result = 0x6E61747369737361;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x507473726966;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x506472696874;
LABEL_4:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x7261000000000000;
      break;
    case 3:
      uint64_t result = 0x6341746E65696C63;
      break;
    case 4:
      uint64_t result = 0x79747265706F7270;
      break;
    default:
      return result;
  }
  return result;
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional __swiftcall ToolBoxToolType.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (IntelligenceFlowPlannerSupport::ToolBoxToolType_optional)rawValue;
}

void *static ToolBoxToolType.allCases.getter()
{
  return &unk_270340EA8;
}

uint64_t ToolBoxToolType.rawValue.getter()
{
  return *v0;
}

uint64_t sub_253543D24()
{
  return sub_253980918();
}

IntelligenceFlowPlannerSupport::ToolBoxToolType_optional sub_253543D2C(Swift::Int64 *a1)
{
  return ToolBoxToolType.init(rawValue:)(*a1);
}

uint64_t sub_253543D34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ToolBoxToolType.rawValue.getter();
  *a1 = result;
  return result;
}

void sub_253543D5C(void *a1@<X8>)
{
  *a1 = &unk_270340EA8;
}

void sub_253543D6C()
{
  sub_2534847F8();
  unint64_t v28 = v4;
  sub_253B089F0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253547148(v6, v27);
  sub_253B05070();
  sub_253465998();
  uint64_t v29 = v8;
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  sub_25349888C();
  uint64_t v9 = sub_253B05050();
  MEMORY[0x270FA5388](v9);
  sub_2534D9B74();
  uint64_t v10 = sub_253B05090();
  sub_253465998();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  sub_2534D9C00();
  sub_253B050E0();
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v1, *MEMORY[0x263F06170], v10);
  sub_253462A5C(&qword_269CDEBB0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_253B22680;
  sub_253B05030();
  sub_2535444A0((uint64_t)&unk_269CDEBB8);
  sub_253462A5C(&qword_269CDEBC0);
  sub_253546F58((uint64_t)&unk_269CDEBC8);
  sub_253B09F50();
  (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v2, *MEMORY[0x263F06150], v30);
  sub_253AF8220(v1, v3, v2);
  sub_253B08CC0();
  sub_2535444A0((uint64_t)&qword_269CDE7E0);
  uint64_t v14 = sub_253B050B0();
  if (v0)
  {
    swift_release();
    sub_253B08300();
    id v16 = v0;
    id v17 = v0;
    uint64_t v18 = sub_253B089D0();
    os_log_type_t v19 = sub_253B09D80();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      id v22 = v0;
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      sub_253B09E80();
      *uint64_t v21 = v31;

      _os_log_impl(&dword_253460000, v18, v19, "Could not serialize ToolKit database version toolbox. Error: %@", v20, 0xCu);
      sub_253462A5C(&qword_269CDBEA8);
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v21, -1, -1);
      MEMORY[0x25A269E60](v20, -1, -1);
    }
    else
    {
    }
    sub_2534659CC();
    v25();
    sub_2535301B4();
    swift_allocError();
    *uint64_t v26 = 4;
    swift_willThrow();
  }
  else
  {
    uint64_t v23 = v14;
    uint64_t v24 = v15;
    swift_release();
    *unint64_t v28 = v23;
    v28[1] = v24;
  }
  sub_2534847C8();
}

uint64_t type metadata accessor for ToolboxVersion(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B24A5D8);
}

unint64_t sub_25354422C()
{
  unint64_t result = qword_269CDE928;
  if (!qword_269CDE928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE928);
  }
  return result;
}

unint64_t sub_253544278()
{
  unint64_t result = qword_269CDE938;
  if (!qword_269CDE938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE938);
  }
  return result;
}

unint64_t sub_2535442C4(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_25347907C(&qword_269CDE918);
    v4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_25354433C()
{
  unint64_t result = qword_269CDE948;
  if (!qword_269CDE948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE948);
  }
  return result;
}

unint64_t sub_253544388()
{
  unint64_t result = qword_269CDE958;
  if (!qword_269CDE958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE958);
  }
  return result;
}

unint64_t sub_2535443D4(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    sub_25347907C(&qword_269CDC550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t type metadata accessor for ToolBoxToolSearchResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEAB0);
}

unint64_t sub_253544454()
{
  unint64_t result = qword_269CDE970;
  if (!qword_269CDE970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE970);
  }
  return result;
}

unint64_t sub_2535444A0(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t type metadata accessor for ToolBoxAssistantSchemaSearchResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEAC0);
}

unint64_t sub_253544504()
{
  unint64_t result = qword_269CDE998;
  if (!qword_269CDE998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE998);
  }
  return result;
}

uint64_t sub_253544550(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  uint64_t v4 = sub_2534B4668();
  v5(v4);
  return a2;
}

uint64_t sub_2535445A4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t type metadata accessor for ToolBoxClientActionSearchResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEAD0);
}

unint64_t sub_253544618()
{
  unint64_t result = qword_269CDE9C0;
  if (!qword_269CDE9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE9C0);
  }
  return result;
}

uint64_t type metadata accessor for ToolboxCustomKeyResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEAE0);
}

uint64_t sub_253544684(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDE9D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2535446E4()
{
  unint64_t result = qword_269CDE9F8;
  if (!qword_269CDE9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDE9F8);
  }
  return result;
}

unint64_t sub_253544730()
{
  unint64_t result = qword_269CDEA00;
  if (!qword_269CDEA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA00);
  }
  return result;
}

unint64_t sub_25354477C()
{
  unint64_t result = qword_269CDEA08;
  if (!qword_269CDEA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA08);
  }
  return result;
}

uint64_t ToolboxCancellationStatus.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t ToolboxCancellationStatus.init()()
{
  uint64_t result = v0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

Swift::Void __swiftcall ToolboxCancellationStatus.cancel()()
{
  *(unsigned char *)(v0 + 16) = 1;
}

uint64_t ToolboxCancellationStatus.deinit()
{
  sub_253462A5C(&qword_269CDEA28);
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  return v0;
}

uint64_t ToolboxCancellationStatus.__deallocating_deinit()
{
  sub_253462A5C(&qword_269CDEA28);
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  return MEMORY[0x270FA0228](v0, 17, 7);
}

uint64_t sub_2535448C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolboxCustomKeyResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_253544930()
{
  unint64_t result = qword_269CDEA30;
  if (!qword_269CDEA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA30);
  }
  return result;
}

unint64_t sub_253544980()
{
  unint64_t result = qword_269CDEA38;
  if (!qword_269CDEA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA38);
  }
  return result;
}

unint64_t sub_2535449D0()
{
  unint64_t result = qword_269CDEA40;
  if (!qword_269CDEA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA40);
  }
  return result;
}

unint64_t sub_253544A1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_2535444A0((uint64_t)&unk_269CDEA48);
  unint64_t result = sub_2535444A0((uint64_t)&unk_269CDEA50);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_253544AA0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_2535444A0((uint64_t)&unk_269CDEA58);
  unint64_t result = sub_2535444A0((uint64_t)&unk_269CDEA60);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_253544B24(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_2535444A0((uint64_t)&unk_269CDEA68);
  unint64_t result = sub_2535444A0((uint64_t)&unk_269CDEA70);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_253544BA8()
{
  return sub_2535444A0((uint64_t)&unk_269CDEA78);
}

unint64_t sub_253544BF4()
{
  unint64_t result = qword_269CDEA80;
  if (!qword_269CDEA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA80);
  }
  return result;
}

unint64_t sub_253544C40()
{
  return sub_253546F58((uint64_t)&unk_269CDEA88);
}

unint64_t sub_253544C80()
{
  unint64_t result = qword_269CDEA98;
  if (!qword_269CDEA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEA98);
  }
  return result;
}

unint64_t sub_253544CCC()
{
  return sub_253546F58((uint64_t)&unk_269CDEAA0);
}

uint64_t getEnumTagSinglePayload for QueryOperator(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ToolBoxError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253544E5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

void type metadata accessor for ToolBoxError()
{
}

unsigned char *storeEnumTagSinglePayload for EmbeddingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253544F5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for EmbeddingError()
{
}

uint64_t dispatch thunk of ToolboxDelegate.model.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ToolboxDelegate.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForToolInvocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForAssistantSchema(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ToolboxDelegate.embeddingSnippetForAssistantSchemaUtterances(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of ToolboxDelegate.toolFilter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of VectorDatabaseEmbeddable.databaseValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ToolboxPlanGenerationDelegate.toolDefinitionCustomMapping(toolDefinition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ToolboxPlanGenerationDelegate.assistantSchemaCustomMapping(assistantSchemaIdentifier:assistantToolSchemaDefinition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ToolboxPlanGenerationDelegate.versionIdentifier()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void type metadata accessor for ToolboxEmbeddingModel()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolboxVersion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (char *)a1 + v5;
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = sub_253B06CE0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ToolboxVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_253B06CE0();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

void *initializeWithCopy for ToolboxVersion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unsigned int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B06CE0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for ToolboxVersion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unsigned int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B06CE0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for ToolboxVersion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unsigned int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B06CE0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ToolboxVersion(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unsigned int v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B06CE0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolboxVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2535453B4);
}

uint64_t sub_2535453B4()
{
  sub_253B06CE0();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolboxVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25354540C);
}

uint64_t sub_25354540C()
{
  sub_253B06CE0();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_253545450()
{
  uint64_t result = sub_253B06CE0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for ToolsOverride()
{
}

uint64_t destroy for ToolDefinitionOverrride()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ToolDefinitionOverrride(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ToolDefinitionOverrride(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolDefinitionOverrride(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolDefinitionOverrride(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolDefinitionOverrride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ToolDefinitionOverrride()
{
}

uint64_t dispatch thunk of ToolBoxResult.score.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolBoxToolSearchResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_25354599C(a1, a2, a3, MEMORY[0x263F7FED0]);
}

uint64_t destroy for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2)
{
  return sub_253545A58(a1, a2, MEMORY[0x263F7FED0]);
}

uint64_t initializeWithCopy for ToolBoxToolSearchResult()
{
  return sub_253545AB8();
}

uint64_t assignWithCopy for ToolBoxToolSearchResult()
{
  return sub_253545B0C();
}

uint64_t initializeWithTake for ToolBoxToolSearchResult()
{
  return sub_253545B60();
}

uint64_t assignWithTake for ToolBoxToolSearchResult()
{
  return sub_253545BB4();
}

uint64_t getEnumTagSinglePayload for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2535457A0);
}

uint64_t sub_2535457A0()
{
  sub_253B08B30();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolBoxToolSearchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2535457F4);
}

uint64_t sub_2535457F4()
{
  sub_253B08B30();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_253545834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253545C30(a1, a2, a3, MEMORY[0x263F7FED0]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolBoxAssistantSchemaSearchResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_25354599C(a1, a2, a3, MEMORY[0x263F80C28]);
}

uint64_t destroy for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2)
{
  return sub_253545A58(a1, a2, MEMORY[0x263F80C28]);
}

uint64_t initializeWithCopy for ToolBoxAssistantSchemaSearchResult()
{
  return sub_253545AB8();
}

uint64_t assignWithCopy for ToolBoxAssistantSchemaSearchResult()
{
  return sub_253545B0C();
}

uint64_t initializeWithTake for ToolBoxAssistantSchemaSearchResult()
{
  return sub_253545B60();
}

uint64_t assignWithTake for ToolBoxAssistantSchemaSearchResult()
{
  return sub_253545BB4();
}

uint64_t getEnumTagSinglePayload for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2535458F0);
}

uint64_t sub_2535458F0()
{
  sub_253B09440();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolBoxAssistantSchemaSearchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253545944);
}

uint64_t sub_253545944()
{
  sub_253B09440();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_253545984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253545C30(a1, a2, a3, MEMORY[0x263F80C28]);
}

uint64_t *sub_25354599C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void))
{
  int v6 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    a4(0);
    sub_25346CAF4();
    uint64_t v8 = sub_2534B4668();
    v9(v8);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_253545A58(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  return v6(a1, v4);
}

uint64_t sub_253545AB8()
{
  uint64_t v0 = sub_253547024();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_25354710C();
  v3(v2);
  return sub_25354730C();
}

uint64_t sub_253545B0C()
{
  uint64_t v0 = sub_253547024();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_25354710C();
  v3(v2);
  return sub_253547320();
}

uint64_t sub_253545B60()
{
  uint64_t v0 = sub_253547024();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_25354710C();
  v3(v2);
  return sub_25354730C();
}

uint64_t sub_253545BB4()
{
  uint64_t v0 = sub_253547024();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_25354710C();
  v3(v2);
  return sub_253547320();
}

uint64_t getEnumTagSinglePayload for ToolBoxClientActionSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253546FA0);
}

uint64_t storeEnumTagSinglePayload for ToolBoxClientActionSearchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253546F9C);
}

uint64_t sub_253545C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolboxCustomKeyResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = sub_253B09440();
    }
    else {
      uint64_t v6 = sub_253B08B30();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ToolboxCustomKeyResult(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = sub_253B09440();
  }
  else {
    uint64_t v2 = sub_253B08B30();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = sub_253B09440();
  }
  else {
    uint64_t v4 = sub_253B08B30();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2535445A4(a1, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = sub_253B09440();
    }
    else {
      uint64_t v4 = sub_253B08B30();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = sub_253B09440();
  }
  else {
    uint64_t v4 = sub_253B08B30();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ToolboxCustomKeyResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2535445A4(a1, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = sub_253B09440();
    }
    else {
      uint64_t v4 = sub_253B08B30();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_253546170()
{
  uint64_t result = sub_253B08B30();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B09440();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToolBoxToolScope(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253546300);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for ToolBoxToolScope()
{
}

unsigned char *storeEnumTagSinglePayload for ToolBoxToolType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253546400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for ToolBoxToolType()
{
}

uint64_t type metadata accessor for ToolboxCancellationStatus()
{
  return self;
}

uint64_t method lookup function for ToolboxCancellationStatus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ToolboxCancellationStatus);
}

uint64_t dispatch thunk of ToolboxCancellationStatus.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_253546484()
{
  if (MEMORY[0x263F8EEE0]) {
    return sub_253462A5C(&qword_269CDEA28);
  }
  else {
    return MEMORY[0x263F8EE60] + 8;
  }
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.CodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxCustomKeyResult.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxCustomKeyResult.AssistantSchemaCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxClientActionSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxClientActionSearchResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxAssistantSchemaSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxAssistantSchemaSearchResult.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport21ToolboxEmbeddingModelOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2535465CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolBoxToolSearchResult.CodingKeys()
{
  return &type metadata for ToolBoxToolSearchResult.CodingKeys;
}

unsigned char *sub_253546604(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2535466D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for ToolDefinitionOverrride.CodingKeys()
{
}

unsigned char *_s30IntelligenceFlowPlannerSupport22ToolboxCustomKeyResultO24ToolDefinitionCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2535467A0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolsOverride.CodingKeys()
{
  return &type metadata for ToolsOverride.CodingKeys;
}

unint64_t sub_2535467DC()
{
  unint64_t result = qword_269CDEAF0;
  if (!qword_269CDEAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEAF0);
  }
  return result;
}

unint64_t sub_25354682C()
{
  unint64_t result = qword_269CDEAF8;
  if (!qword_269CDEAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEAF8);
  }
  return result;
}

unint64_t sub_25354687C()
{
  unint64_t result = qword_269CDEB00;
  if (!qword_269CDEB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB00);
  }
  return result;
}

unint64_t sub_2535468CC()
{
  unint64_t result = qword_269CDEB08;
  if (!qword_269CDEB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB08);
  }
  return result;
}

unint64_t sub_25354691C()
{
  unint64_t result = qword_269CDEB10;
  if (!qword_269CDEB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB10);
  }
  return result;
}

unint64_t sub_25354696C()
{
  unint64_t result = qword_269CDEB18;
  if (!qword_269CDEB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB18);
  }
  return result;
}

unint64_t sub_2535469BC()
{
  unint64_t result = qword_269CDEB20;
  if (!qword_269CDEB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB20);
  }
  return result;
}

unint64_t sub_253546A0C()
{
  unint64_t result = qword_269CDEB28;
  if (!qword_269CDEB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB28);
  }
  return result;
}

unint64_t sub_253546A5C()
{
  unint64_t result = qword_269CDEB30;
  if (!qword_269CDEB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB30);
  }
  return result;
}

unint64_t sub_253546AAC()
{
  unint64_t result = qword_269CDEB38;
  if (!qword_269CDEB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB38);
  }
  return result;
}

unint64_t sub_253546AFC()
{
  unint64_t result = qword_269CDEB40;
  if (!qword_269CDEB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB40);
  }
  return result;
}

unint64_t sub_253546B4C()
{
  unint64_t result = qword_269CDEB48;
  if (!qword_269CDEB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB48);
  }
  return result;
}

unint64_t sub_253546B9C()
{
  unint64_t result = qword_269CDEB50;
  if (!qword_269CDEB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB50);
  }
  return result;
}

unint64_t sub_253546BEC()
{
  unint64_t result = qword_269CDEB58;
  if (!qword_269CDEB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB58);
  }
  return result;
}

unint64_t sub_253546C3C()
{
  unint64_t result = qword_269CDEB60;
  if (!qword_269CDEB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB60);
  }
  return result;
}

unint64_t sub_253546C8C()
{
  unint64_t result = qword_269CDEB68;
  if (!qword_269CDEB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB68);
  }
  return result;
}

unint64_t sub_253546CDC()
{
  unint64_t result = qword_269CDEB70;
  if (!qword_269CDEB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB70);
  }
  return result;
}

unint64_t sub_253546D2C()
{
  unint64_t result = qword_269CDEB78;
  if (!qword_269CDEB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB78);
  }
  return result;
}

unint64_t sub_253546D7C()
{
  unint64_t result = qword_269CDEB80;
  if (!qword_269CDEB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB80);
  }
  return result;
}

unint64_t sub_253546DCC()
{
  unint64_t result = qword_269CDEB88;
  if (!qword_269CDEB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB88);
  }
  return result;
}

unint64_t sub_253546E1C()
{
  unint64_t result = qword_269CDEB90;
  if (!qword_269CDEB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB90);
  }
  return result;
}

unint64_t sub_253546E6C()
{
  unint64_t result = qword_269CDEB98;
  if (!qword_269CDEB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEB98);
  }
  return result;
}

unint64_t sub_253546EBC()
{
  unint64_t result = qword_269CDEBA0;
  if (!qword_269CDEBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEBA0);
  }
  return result;
}

unint64_t sub_253546F0C()
{
  unint64_t result = qword_269CDEBA8;
  if (!qword_269CDEBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEBA8);
  }
  return result;
}

unint64_t sub_253546F58(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    sub_25347907C(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_253546FBC()
{
  return v0;
}

uint64_t sub_253546FD4()
{
  return sub_253B0A370();
}

uint64_t sub_253547004()
{
  return *(void *)(v0 - 136);
}

uint64_t sub_253547024()
{
  return 0;
}

uint64_t sub_25354703C()
{
  *(unsigned char *)(v0 - 82) = 1;
  return sub_253B0A350();
}

uint64_t sub_253547064()
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  return *(void *)(v1 - 136);
}

uint64_t sub_253547090()
{
  return sub_253B0A660();
}

uint64_t sub_2535470B4()
{
  return sub_253B0A310();
}

uint64_t sub_2535470E4()
{
  return v0;
}

uint64_t sub_2535470F8()
{
  return v0;
}

uint64_t sub_25354710C()
{
  return v0;
}

uint64_t sub_25354711C()
{
  return sub_253B0A3E0();
}

uint64_t sub_253547148@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_253547168()
{
  type metadata accessor for ToolboxVersion(0);
  return sub_253B06CE0();
}

uint64_t sub_25354719C()
{
  *(unsigned char *)(v0 - 66) = 1;
  return v0 - 66;
}

uint64_t sub_2535471BC()
{
  return 0x6D6178655F736F70;
}

void *sub_2535471D0()
{
  return sub_253472068(v0, v0[3]);
}

uint64_t sub_2535471F4()
{
  return type metadata accessor for ToolboxCustomKeyResult(0);
}

uint64_t _s30IntelligenceFlowPlannerSupport13ToolsOverrideV5toolsSDySSAA23ToolDefinitionOverrrideVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_253547224()
{
  return v0;
}

void sub_25354723C()
{
  *(_DWORD *)(*(void *)(v1 - 136) + *(int *)(v0 + 20)) = v2;
}

void sub_25354724C()
{
  *(void *)(v1 - 136) = v0;
  *(unsigned char *)(v1 - 81) = 0;
}

uint64_t sub_253547294()
{
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  return sub_2535445A4(v2, v1);
}

uint64_t sub_2535472C4()
{
  return v0;
}

uint64_t sub_2535472D8()
{
  return sub_253B0A2C0();
}

unint64_t sub_2535472F8()
{
  return 0xED00007070417974;
}

uint64_t sub_25354730C()
{
  *(_DWORD *)(v2 + *(int *)(v0 + 20)) = *(_DWORD *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t sub_253547320()
{
  *(_DWORD *)(v2 + *(int *)(v0 + 20)) = *(_DWORD *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t sub_253547334@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 128) = a1;
  return sub_253B08B30();
}

uint64_t sub_253547354(uint64_t a1, void *a2)
{
  uint64_t v79 = a2;
  uint64_t v4 = sub_253462A5C(&qword_26B241270);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)v65 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v73 = (char *)v65 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v72 = (char *)v65 - v12;
  uint64_t v13 = sub_253B08B30();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  id v17 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v70 = (char *)v65 - v18;
  uint64_t v19 = type metadata accessor for ToolboxSearchOutput(0);
  MEMORY[0x270FA5388](v19);
  id v22 = (char *)v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    uint64_t v67 = v7;
    v65[1] = v2;
    uint64_t v24 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v69 = v14 + 16;
    uint64_t v75 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v78 = *(void *)(v20 + 72);
    v65[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v76 = v14;
    uint64_t v77 = MEMORY[0x263F8EE78];
    uint64_t v25 = v14;
    uint64_t v66 = v17;
    uint64_t v74 = v19;
    while (1)
    {
      sub_25357369C(v24, (uint64_t)v22);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          int v27 = *(_DWORD *)&v22[*(int *)(sub_253462A5C(&qword_269CDED00) + 48)];
          uint64_t v28 = type metadata accessor for ToolBoxAssistantSchemaSearchResult(0);
          *((void *)&v81 + 1) = v28;
          uint64_t v82 = sub_253573548(&qword_269CDED08, (void (*)(uint64_t))type metadata accessor for ToolBoxAssistantSchemaSearchResult);
          uint64_t v29 = sub_2534724A8((uint64_t *)&v80);
          uint64_t v30 = sub_253B09440();
          (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v29, v22, v30);
        }
        else
        {
          uint64_t v37 = *v79;
          if (!*(void *)(*v79 + 16))
          {
            uint64_t v35 = (uint64_t)v73;
            goto LABEL_14;
          }
          int v27 = *((_DWORD *)v22 + 4);
          swift_bridgeObjectRetain();
          unint64_t v38 = sub_25396E0AC();
          if (v39)
          {
            unint64_t v40 = *(void *)(v37 + 56) + *(void *)(v25 + 72) * v38;
            uint64_t v35 = (uint64_t)v73;
            (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v73, v40, v13);
            uint64_t v41 = 0;
          }
          else
          {
            uint64_t v41 = 1;
            uint64_t v35 = (uint64_t)v73;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v35, v41, 1, v13);
          swift_bridgeObjectRelease();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v35, 1, v13) == 1) {
            goto LABEL_21;
          }
          uint64_t v71 = *v75;
          v71(v17, v35, v13);
          swift_bridgeObjectRetain();
          unint64_t v52 = sub_25396E0AC();
          char v54 = v53;
          swift_bridgeObjectRelease();
          if (v54)
          {
            uint64_t v55 = v79;
            swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v83[0] = *v55;
            *uint64_t v55 = 0x8000000000000000;
            sub_253462A5C(&qword_269CDECF8);
            uint64_t v56 = v79;
            sub_253B0A190();
            uint64_t v57 = *(void *)&v83[0];
            swift_bridgeObjectRelease();
            uint64_t v58 = (uint64_t)v67;
            v71(v67, *(void *)(v57 + 56) + *(void *)(v76 + 72) * v52, v13);
            sub_253B0A1B0();
            void *v56 = v57;
            id v17 = v66;
            swift_bridgeObjectRelease();
            uint64_t v59 = 0;
          }
          else
          {
            uint64_t v59 = 1;
            uint64_t v58 = (uint64_t)v67;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v58, v59, 1, v13);
          swift_bridgeObjectRelease();
          sub_253472458(v58, &qword_26B241270);
          uint64_t v28 = type metadata accessor for ToolBoxClientActionSearchResult(0);
          *((void *)&v81 + 1) = v28;
          uint64_t v82 = sub_253573548(&qword_269CDECF0, (void (*)(uint64_t))type metadata accessor for ToolBoxClientActionSearchResult);
          uint64_t v29 = sub_2534724A8((uint64_t *)&v80);
          v71((char *)v29, (uint64_t)v17, v13);
          uint64_t v25 = v76;
        }
      }
      else
      {
        uint64_t v31 = *v79;
        if (!*(void *)(*v79 + 16))
        {
          uint64_t v35 = (uint64_t)v72;
LABEL_14:
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v35, 1, 1, v13);
LABEL_21:
          swift_bridgeObjectRelease();
          sub_253472458(v35, &qword_26B241270);
          long long v80 = 0u;
          long long v81 = 0u;
          uint64_t v82 = 0;
          goto LABEL_34;
        }
        int v27 = *((_DWORD *)v22 + 4);
        swift_bridgeObjectRetain();
        unint64_t v32 = sub_25396E0AC();
        if (v33)
        {
          unint64_t v34 = *(void *)(v31 + 56) + *(void *)(v25 + 72) * v32;
          uint64_t v35 = (uint64_t)v72;
          (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v72, v34, v13);
          uint64_t v36 = 0;
        }
        else
        {
          uint64_t v36 = 1;
          uint64_t v35 = (uint64_t)v72;
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v35, v36, 1, v13);
        swift_bridgeObjectRelease();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v35, 1, v13) == 1) {
          goto LABEL_21;
        }
        uint64_t v71 = *v75;
        v71(v70, v35, v13);
        swift_bridgeObjectRetain();
        unint64_t v42 = sub_25396E0AC();
        char v44 = v43;
        swift_bridgeObjectRelease();
        if (v44)
        {
          uint64_t v45 = v79;
          swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v83[0] = *v45;
          *uint64_t v45 = 0x8000000000000000;
          sub_253462A5C(&qword_269CDECF8);
          uint64_t v46 = v13;
          uint64_t v47 = v79;
          sub_253B0A190();
          uint64_t v48 = *(void *)&v83[0];
          swift_bridgeObjectRelease();
          uint64_t v49 = v68;
          v71(v68, *(void *)(v48 + 56) + *(void *)(v76 + 72) * v42, v46);
          sub_253B0A1B0();
          void *v47 = v48;
          uint64_t v13 = v46;
          uint64_t v50 = (uint64_t)v49;
          uint64_t v25 = v76;
          id v17 = v66;
          swift_bridgeObjectRelease();
          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v51 = 1;
          uint64_t v50 = (uint64_t)v68;
          uint64_t v25 = v76;
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v50, v51, 1, v13);
        swift_bridgeObjectRelease();
        sub_253472458(v50, &qword_26B241270);
        uint64_t v28 = type metadata accessor for ToolBoxToolSearchResult(0);
        *((void *)&v81 + 1) = v28;
        uint64_t v82 = sub_253573548(&qword_269CDED10, (void (*)(uint64_t))type metadata accessor for ToolBoxToolSearchResult);
        uint64_t v29 = sub_2534724A8((uint64_t *)&v80);
        v71((char *)v29, (uint64_t)v70, v13);
      }
      *(_DWORD *)((char *)v29 + *(int *)(v28 + 20)) = v27;
      if (*((void *)&v81 + 1))
      {
        sub_253476C2C(&v80, (uint64_t)v83);
        sub_253476C2C(v83, (uint64_t)&v80);
        uint64_t v60 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253523048();
          uint64_t v60 = v62;
        }
        unint64_t v61 = *(void *)(v60 + 16);
        if (v61 >= *(void *)(v60 + 24) >> 1)
        {
          sub_253523048();
          uint64_t v60 = v63;
        }
        *(void *)(v60 + 16) = v61 + 1;
        uint64_t v77 = v60;
        sub_253476C2C(&v80, v60 + 40 * v61 + 32);
        uint64_t v25 = v76;
        goto LABEL_35;
      }
LABEL_34:
      sub_253472458((uint64_t)&v80, &qword_269CDECE8);
LABEL_35:
      v24 += v78;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        return v77;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t sub_253547D00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v43 = a6;
  uint64_t v12 = sub_253462A5C(&qword_269CDEDF8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_253B058A0();
  uint64_t v15 = MEMORY[0x270FA5388](v39);
  unint64_t v42 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v38 = (char *)&v34 - v18;
  int64_t v46 = a4 >> 1;
  uint64_t v41 = (a4 >> 1) - a3;
  if (a4 >> 1 == a3)
  {
    return MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v34 = a1;
    uint64_t v35 = v17;
    unint64_t v40 = (void (**)(char *))(v17 + 32);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v21 = 0;
    uint64_t v22 = a2 + 56 * a3;
    uint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t v36 = a3;
    uint64_t v37 = a5;
    uint64_t v23 = v39;
    while (a3 + v21 < v46)
    {
      long long v24 = *(_OWORD *)(v22 + 16);
      v44[0] = *(_OWORD *)v22;
      v44[1] = v24;
      v44[2] = *(_OWORD *)(v22 + 32);
      uint64_t v45 = *(void *)(v22 + 48);
      if (__OFADD__(v21, 1)) {
        goto LABEL_19;
      }
      sub_253574274((uint64_t)v44);
      a5(v21, v44);
      if (v6)
      {
        sub_2535742C0((uint64_t)v44);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return v19;
      }
      sub_2535742C0((uint64_t)v44);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v23) == 1)
      {
        uint64_t result = sub_253472458((uint64_t)v14, &qword_269CDEDF8);
      }
      else
      {
        uint64_t v25 = v23;
        uint64_t v26 = *v40;
        int v27 = v38;
        (*v40)(v38);
        ((void (*)(char *, char *, uint64_t))v26)(v42, v27, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253523898(0, *(void *)(v19 + 16) + 1, 1, v19);
          uint64_t v19 = v32;
        }
        unint64_t v29 = *(void *)(v19 + 16);
        unint64_t v28 = *(void *)(v19 + 24);
        if (v29 >= v28 >> 1)
        {
          sub_253523898(v28 > 1, v29 + 1, 1, v19);
          uint64_t v19 = v33;
        }
        *(void *)(v19 + 16) = v29 + 1;
        unint64_t v30 = v19
            + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
            + *(void *)(v35 + 72) * v29;
        uint64_t v31 = v39;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v30, v42, v39);
        uint64_t v23 = v31;
        a3 = v36;
        a5 = v37;
      }
      ++v21;
      v22 += 56;
      if (v41 == v21)
      {
        swift_unknownObjectRelease();
        return v19;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t sub_25354805C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ToolBoxToolSearchResult(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_253971818();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v7[1] = v5;
  uint64_t result = sub_25356F24C(v7);
  *a1 = v3;
  return result;
}

void sub_253548104()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_253B08B30();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534659D8();
  sub_2534B324C();
  MEMORY[0x270FA5388](v6);
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v24 = *(void *)(v3 + 16);
  if (v24)
  {
    unint64_t v8 = 0;
    uint64_t v23 = (void (**)(void))(v7 + 32);
    uint64_t v20 = v4;
    uint64_t v21 = v1;
    uint64_t v22 = v3;
    while (v8 < *(void *)(v3 + 16))
    {
      sub_2534B3428();
      v9();
      uint64_t v10 = sub_253B08AF0();
      uint64_t v11 = v1;
      sub_253B0167C(v10, v12, v1);
      uint64_t v13 = v4;
      char v15 = v14;
      swift_bridgeObjectRelease();
      if (v15)
      {
        uint64_t v16 = *v23;
        sub_25347FA84();
        v16();
        uint64_t v17 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253579380();
          sub_2539E7B40();
          uint64_t v17 = v25;
        }
        unint64_t v18 = *(void *)(v17 + 16);
        if (v18 >= *(void *)(v17 + 24) >> 1)
        {
          sub_2539E7B40();
          uint64_t v17 = v25;
        }
        *(void *)(v17 + 16) = v18 + 1;
        uint64_t v4 = v20;
        sub_25347FA84();
        v16();
        uint64_t v25 = v17;
        uint64_t v1 = v21;
        uint64_t v3 = v22;
      }
      else
      {
        sub_2534659CC();
        v19();
        uint64_t v4 = v13;
        uint64_t v1 = v11;
      }
      if (v24 == ++v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_253578800();
    sub_2534847C8();
  }
}

uint64_t sub_253548340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v28 = sub_253B08B30();
  uint64_t v8 = *(void *)(v28 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v38 = MEMORY[0x263F8EE78];
  uint64_t v29 = a1;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    uint64_t v34 = a4;
    unint64_t v15 = 0;
    v25[1] = v4;
    uint64_t v26 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    uint64_t v30 = v8 + 16;
    uint64_t v31 = (uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v27 = a3;
    uint64_t v16 = v28;
    uint64_t v17 = v29;
    while (v15 < *(void *)(v17 + 16))
    {
      unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v19 = *(void *)(v8 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v13, v17 + v18 + v19 * v15, v16);
      uint64_t v36 = a3;
      uint64_t v37 = v34;
      sub_25355C580();
      if (v20)
      {
        uint64_t v21 = *v31;
        (*v31)(v33, v13, v16);
        uint64_t v22 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E7B40();
          uint64_t v22 = v38;
        }
        unint64_t v23 = *(void *)(v22 + 16);
        if (v23 >= *(void *)(v22 + 24) >> 1)
        {
          sub_2539E7B40();
          uint64_t v22 = v38;
        }
        *(void *)(v22 + 16) = v23 + 1;
        uint64_t v24 = v28;
        uint64_t result = v21((char *)(v22 + v18 + v23 * v19), v33, v28);
        uint64_t v38 = v22;
        uint64_t v16 = v24;
        a3 = v27;
        uint64_t v17 = v29;
      }
      else
      {
        uint64_t result = (*v26)(v13, v16);
      }
      if (v32 == ++v15)
      {
        uint64_t v14 = v38;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25353847C(a3);
    return v14;
  }
  return result;
}

void sub_2535485FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v3 = sub_253A71D6C(v2);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v15 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v16 = v1;
          uint64_t v17 = *v8;
          uint64_t v10 = v2;
          unint64_t v12 = *(void *)(v18 + 16);
          unint64_t v11 = *(void *)(v18 + 24);
          swift_bridgeObjectRetain();
          if (v12 >= v11 >> 1) {
            sub_2539E6C84();
          }
          *(void *)(v18 + 16) = v12 + 1;
          uint64_t v13 = v18 + 16 * v12;
          *(void *)(v13 + 32) = v17;
          *(void *)(v13 + 40) = v9;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(v10 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = v15;
          if ((*(void *)(v15 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36)) {
            goto LABEL_21;
          }
          uint64_t v14 = sub_253B09F70();
          uint64_t v1 = v16 - 1;
          if (v16 == 1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v14 < 1 << *(unsigned char *)(v2 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_2535487C0(uint64_t a1)
{
  uint64_t v39 = sub_253B09350();
  uint64_t v3 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_253B09440();
  uint64_t v5 = *(void *)(v37 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v37);
  uint64_t v36 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v35 = (char *)v28 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9) {
    return v10;
  }
  v28[1] = v1;
  uint64_t v44 = MEMORY[0x263F8EE78];
  sub_2539E6C84();
  uint64_t result = sub_25353E23C(a1);
  uint64_t v13 = v5;
  uint64_t v14 = result;
  int v16 = v15 & 1;
  uint64_t v33 = a1;
  uint64_t v34 = a1 + 56;
  uint64_t v30 = v13 + 32;
  uint64_t v31 = v13 + 16;
  uint64_t v32 = v13;
  v28[2] = v13 + 8;
  uint64_t v29 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v17 = v13;
  uint64_t v18 = v36;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v34 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_16;
    }
    int v40 = v16;
    uint64_t v41 = v12;
    uint64_t v19 = v35;
    uint64_t v20 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v35, *(void *)(a1 + 48) + *(void *)(v17 + 72) * v14, v37);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v18, v19, v20);
    uint64_t v42 = sub_253B09400();
    uint64_t v43 = v21;
    sub_253B09860();
    uint64_t v22 = v38;
    sub_253B09410();
    sub_253B09340();
    (*v29)(v22, v39);
    sub_253B09860();
    swift_bridgeObjectRelease();
    uint64_t v23 = v42;
    uint64_t v24 = v43;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v20);
    uint64_t v10 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2539E6C84();
      uint64_t v10 = v44;
    }
    unint64_t v25 = *(void *)(v10 + 16);
    if (v25 >= *(void *)(v10 + 24) >> 1)
    {
      sub_2539E6C84();
      uint64_t v10 = v44;
    }
    *(void *)(v10 + 16) = v25 + 1;
    uint64_t v26 = v10 + 16 * v25;
    *(void *)(v26 + 32) = v23;
    *(void *)(v26 + 40) = v24;
    a1 = v33;
    uint64_t result = sub_25353E154(v14, v41, v40 & 1, v33);
    uint64_t v14 = result;
    int v16 = v27 & 1;
    if (!--v9)
    {
      sub_253535310(result, v12, v16);
      return v10;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_253548B70(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v35 = sub_253462A5C(&qword_269CDEDB8);
  uint64_t v5 = MEMORY[0x270FA5388](v35);
  uint64_t v34 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v33 = (void *)((char *)v28 - v8);
  MEMORY[0x270FA5388](v7);
  uint64_t v32 = (char *)v28 - v9;
  uint64_t v10 = type metadata accessor for AssistantSchemaToEmbed(0);
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (!v13) {
    return v14;
  }
  v28[1] = v3;
  uint64_t v41 = MEMORY[0x263F8EE78];
  sub_2539E7CB4();
  uint64_t result = sub_253A71D6C(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v17 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      uint64_t v18 = a1 + 64;
      uint64_t v29 = a1 + 64;
      uint64_t v30 = a1;
      uint64_t v19 = v32;
      while ((*(void *)(v18 + 8 * (v17 >> 6)) & (1 << v17)) != 0)
      {
        if (v16 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_20;
        }
        uint64_t v39 = v16;
        unint64_t v40 = v17 >> 6;
        uint64_t v38 = v13;
        uint64_t v20 = v35;
        uint64_t v21 = (uint64_t)v19 + *(int *)(v35 + 48);
        uint64_t v22 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8 * v17);
        uint64_t v24 = type metadata accessor for AssistantSchema(0);
        sub_25357369C(v22 + *(void *)(*(void *)(v24 - 8) + 72) * v17, v21);
        *uint64_t v19 = v23;
        uint64_t v25 = (uint64_t)v33;
        *uint64_t v33 = v23;
        sub_25357369C(v21, v25 + *(int *)(v20 + 48));
        uint64_t v26 = v34;
        sub_2534D8A74(v25, (uint64_t)v34, &qword_269CDEDB8);
        sub_253472458((uint64_t)v19, &qword_269CDEDB8);
        v36(*(void *)v26, &v26[*(int *)(v20 + 48)]);
        sub_253472458((uint64_t)v26, &qword_269CDEDB8);
        uint64_t v14 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E7CB4();
          uint64_t v14 = v41;
        }
        unint64_t v27 = *(void *)(v14 + 16);
        a1 = v30;
        if (v27 >= *(void *)(v14 + 24) >> 1)
        {
          sub_2539E7CB4();
          uint64_t v14 = v41;
        }
        *(void *)(v14 + 16) = v27 + 1;
        uint64_t result = sub_253573624((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v27);
        if ((uint64_t)v17 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_21;
        }
        uint64_t v18 = v29;
        if ((*(void *)(v29 + 8 * v40) & (1 << v17)) == 0) {
          goto LABEL_22;
        }
        if (v39 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_23;
        }
        uint64_t result = sub_253B09F70();
        uint64_t v13 = v38 - 1;
        if (v38 == 1) {
          return v14;
        }
        unint64_t v17 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v16 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_253548F54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v7 = sub_253462A5C(&qword_269CDE7B8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v34 = a1;
  sub_25397174C(a2, v33);
  uint64_t v13 = v33[0];
  int64_t v14 = v33[3];
  unint64_t v15 = v33[4];
  uint64_t v29 = v33[1];
  int64_t v30 = (unint64_t)(v33[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v17 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  unint64_t v18 = v17 | (v14 << 6);
  while (1)
  {
    uint64_t v22 = *(void *)(v13 + 48);
    uint64_t v23 = sub_253B09440();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v12, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v18, v23);
    uint64_t v24 = *(void *)(v13 + 56);
    uint64_t v25 = sub_253B08A60();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(&v12[*(int *)(v7 + 48)], v24 + *(void *)(*(void *)(v25 - 8) + 72) * v18, v25);
    uint64_t v26 = &qword_269CDE7B8;
    sub_2534D8A74((uint64_t)v12, (uint64_t)v10, &qword_269CDE7B8);
    sub_253560338(&v34, (uint64_t)v10, v31, v32);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_253472458((uint64_t)v10, &qword_269CDE7B8);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return (uint64_t)v26;
    }
    uint64_t result = sub_253472458((uint64_t)v10, &qword_269CDE7B8);
    if (v15) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v19 >= v30) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v29 + 8 * v19);
    if (!v20)
    {
      int64_t v21 = v14 + 2;
      if (v14 + 2 >= v30) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v29 + 8 * v21);
      if (v20) {
        goto LABEL_12;
      }
      int64_t v21 = v14 + 3;
      if (v14 + 3 >= v30) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v29 + 8 * v21);
      if (v20) {
        goto LABEL_12;
      }
      int64_t v21 = v14 + 4;
      if (v14 + 4 >= v30) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v29 + 8 * v21);
      if (v20)
      {
LABEL_12:
        int64_t v19 = v21;
      }
      else
      {
        int64_t v19 = v14 + 5;
        if (v14 + 5 >= v30) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v29 + 8 * v19);
        if (!v20)
        {
          int64_t v27 = v14 + 6;
          while (v27 < v30)
          {
            unint64_t v20 = *(void *)(v29 + 8 * v27++);
            if (v20)
            {
              int64_t v19 = v27 - 1;
              goto LABEL_13;
            }
          }
LABEL_24:
          swift_release();
          swift_release();
          uint64_t v26 = v34;
          swift_bridgeObjectRelease();
          return (uint64_t)v26;
        }
      }
    }
LABEL_13:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v14 = v19;
  }
  __break(1u);
  return result;
}

uint64_t sub_253549268(uint64_t a1, __n128 a2)
{
  if (a1 < 0)
  {
    uint64_t result = sub_253B0A1C0();
    __break(1u);
  }
  else if (a1)
  {
    unsigned __int16 v3 = a2.n128_u16[0];
    uint64_t result = sub_253B09B10();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v6 = result + 2 * v5++;
      *(_WORD *)(v6 + 32) = v3;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_253549324(int a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_253B0A1C0();
    __break(1u);
  }
  else if (a2)
  {
    uint64_t result = sub_253B09B10();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a2;
    do
    {
      uint64_t v6 = result + 4 * v5++;
      *(_DWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_2535493D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(0);
  uint64_t v5 = (unint64_t *)sub_2534D9B10();
  sub_253573548(v5, v6);
  uint64_t v7 = sub_253B083C0();
  if (v4)
  {
    sub_253462A5C(&qword_26B24A590);
    if (sub_253B0A4A0())
    {
    }
    else
    {
      sub_2534D969C();
      void *v8 = v10;
    }
  }
  return v7;
}

void sub_2535494F8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  unsigned __int16 v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_253573B10(v2, &v4);
  os_unfair_lock_unlock(v3);
}

void *sub_253549570(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t result = a2(&v4);
  if (!v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t sub_2535495A8()
{
  sub_253477168();
  v1[10] = v2;
  v1[11] = v0;
  v1[8] = v3;
  v1[9] = v4;
  v1[7] = v5;
  uint64_t v6 = sub_253B08980();
  v1[12] = v6;
  sub_25346CB34(v6);
  v1[13] = v7;
  v1[14] = sub_2534727DC();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ToolboxVersion(0);
  v1[17] = v8;
  sub_25346CB4C(v8);
  v1[18] = sub_253472828();
  uint64_t v9 = sub_253B05550();
  v1[19] = v9;
  sub_25346CB34(v9);
  v1[20] = v10;
  v1[21] = sub_253472828();
  uint64_t v11 = sub_253B08940();
  v1[22] = v11;
  sub_25346CB34(v11);
  v1[23] = v12;
  v1[24] = sub_2534727DC();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  uint64_t v13 = sub_253B089F0();
  v1[29] = v13;
  sub_25346CB34(v13);
  v1[30] = v14;
  v1[31] = sub_2534727DC();
  v1[32] = swift_task_alloc();
  sub_25347719C();
  return MEMORY[0x270FA2498](v15, v16, v17);
}

uint64_t sub_253549744()
{
  sub_253B08300();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_253B089D0();
  os_log_type_t v2 = sub_253B09D90();
  uint64_t v3 = (uint8_t *)v2;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v45 = *(void *)(v0 + 232);
    uint64_t v46 = *(void *)(v0 + 256);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = sub_2534772AC();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_253578D20();
    *(void *)(v0 + 48) = sub_253464DF8(v6, v7, v8);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v1, (os_log_type_t)v3, "Replacing client actions for %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    uint64_t v9 = *(void (**)(void))(v4 + 8);
    sub_25347FB18();
    v9();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 240);
    swift_bridgeObjectRelease_n();

    uint64_t v9 = *(void (**)(void))(v10 + 8);
    uint64_t v11 = sub_2534D970C();
    ((void (*)(uint64_t))v9)(v11);
  }
  uint64_t v12 = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  *(void *)(v0 + 264) = v9;
  *(void *)(v0 + 272) = v12;
  sub_253B08960();
  sub_253B08910();
  uint64_t v13 = sub_253B08960();
  sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v14 = (_WORD *)sub_2534AF384();
    sub_253578990(v14);
    sub_253578978();
    _os_signpost_emit_with_name_impl(&dword_253460000, v13, v15, v16, "ToolEmbeddingsDatabase:replaceClientActions", "", v3, 2u);
    sub_2534659B4();
  }
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 160);

  sub_2534AF234();
  v19();
  sub_253B089B0();
  sub_253578768();
  *(void *)(v0 + 280) = sub_253578748();
  *(void *)(v0 + 288) = *(void *)(v17 + 8);
  *(void *)(v0 + 296) = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_2534D9A08();
  v20();
  sub_253B05540();
  sub_253B05500();
  *(void *)(v0 + 304) = v21;
  *(void *)(v0 + 312) = *(void *)(v18 + 8);
  *(void *)(v0 + 320) = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_2534D97B4();
  uint64_t v23 = v22();
  sub_2535531E0(v23, v24, v25, v26, v27, v28, v29, v30, v37, v38, SWORD2(v38), SBYTE6(v38), HIBYTE(v38), v39, v40, v41, v42, v43, v44,
    v45,
    v46,
    v47,
    v49);
  uint64_t v31 = *(void *)(v0 + 80);
  *(void *)(v0 + 328) = v48;
  *(void *)(v0 + 336) = v50;
  *(void *)(v0 + 16) = v48;
  *(void *)(v0 + 24) = v50;
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v32;
  void *v32 = v0;
  v32[1] = sub_253549C90;
  uint64_t v33 = *(void *)(v0 + 64);
  uint64_t v34 = *(void *)(v0 + 72);
  uint64_t v35 = *(void *)(v0 + 56);
  return sub_25355FF2C(v35, (_OWORD *)(v0 + 16), v33, v34, v31);
}

uint64_t sub_253549C90()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  *(void *)(v3 + 352) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_25353847C(*(void *)(v3 + 328));
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_253549D74()
{
  uint64_t v28 = v0;
  uint64_t v1 = (void (*)(uint64_t))v0[39];
  sub_253B05540();
  sub_253B05500();
  uint64_t v2 = sub_2534DA2E4();
  v1(v2);
  sub_253B08300();
  sub_2535792D0();
  uint64_t v3 = (void *)sub_253B089D0();
  os_log_type_t v4 = sub_253B09D60();
  if (sub_25347721C(v4))
  {
    uint64_t v1 = (void (*)(uint64_t))sub_253465A6C();
    uint64_t v27 = sub_2534772AC();
    uint64_t v5 = sub_2535782E8(4.8151e-34);
    v6(v5);
    sub_253B06CD0();
    sub_2535788D8();
    sub_25346CAF4();
    sub_2534659CC();
    uint64_t v8 = v7();
    v0[4] = sub_2535790E8(v8, v9, &v27);
    sub_25357863C();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_2535783F4();
    sub_253578728(&dword_253460000, v10, v11, "%s toolbox: Client action replace took %f seconds to run.");
    sub_2535793CC();
    sub_2534659B4();
    sub_2534659B4();

    sub_253477128();
    v12();
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t))v0[33];
    swift_release_n();

    uint64_t v14 = sub_2534DA2E4();
    v13(v14);
  }
  sub_253B08960();
  sub_253578700();
  sub_253B09DA0();
  if (sub_25357914C())
  {
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v15 = sub_25357842C();
    if (v16(v15) != *MEMORY[0x263F90238])
    {
      sub_253477128();
      v17();
    }
    uint64_t v18 = (_WORD *)sub_2534AF384();
    sub_253578990(v18);
    sub_253578978();
    sub_25357852C(&dword_253460000, v19, v20, v21, "ToolEmbeddingsDatabase:replaceClientActions");
    sub_2534659B4();
  }
  uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[36];
  uint64_t v23 = v0[26];
  uint64_t v24 = v0[22];

  v22(v23, v24);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  return v25();
}

uint64_t sub_25354A0DC()
{
  sub_25353847C(v0[41]);
  uint64_t v2 = sub_253B08960();
  sub_253B08990();
  sub_253B09DA0();
  if (sub_253B09DE0())
  {
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v3 = sub_253578E74();
    int v5 = v4(v3);
    uint64_t v6 = v0[24];
    if (v5 == *MEMORY[0x263F90238])
    {
      uint64_t v7 = "[Error] Interval already ended";
    }
    else
    {
      sub_253477128();
      v8();
      uint64_t v7 = "";
    }
    uint64_t v9 = (_WORD *)sub_2534AF384();
    sub_253579064(v9);
    sub_253B08920();
    sub_253578984();
    _os_signpost_emit_with_name_impl(&dword_253460000, v2, v10, v11, "ToolEmbeddingsDatabase:replaceClientActions", v7, v1, 2u);
    sub_2534659B4();
  }
  else
  {
    uint64_t v6 = v0[24];
  }
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[36];
  uint64_t v13 = v0[22];

  v12(v6, v13);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_25354A31C()
{
  sub_253477168();
  uint64_t v3 = v2;
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v0;
  *(void *)(v1 + 32) = v5;
  *(void *)(v1 + 40) = v6;
  uint64_t v7 = sub_253B08980();
  *(void *)(v1 + 64) = v7;
  sub_25346CB34(v7);
  *(void *)(v1 + 72) = v8;
  *(void *)(v1 + 80) = sub_2534727DC();
  *(void *)(v1 + 88) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ToolboxVersion(0);
  *(void *)(v1 + 96) = v9;
  sub_25346CB4C(v9);
  *(void *)(v1 + 104) = sub_253472828();
  uint64_t v10 = sub_253B089F0();
  *(void *)(v1 + 112) = v10;
  sub_25346CB34(v10);
  *(void *)(v1 + 120) = v11;
  *(void *)(v1 + 128) = sub_253472828();
  uint64_t v12 = sub_253B05550();
  *(void *)(v1 + 136) = v12;
  sub_25346CB34(v12);
  *(void *)(v1 + 144) = v13;
  *(void *)(v1 + 152) = sub_253472828();
  uint64_t v14 = sub_253B08940();
  *(void *)(v1 + 160) = v14;
  sub_25346CB34(v14);
  *(void *)(v1 + 168) = v15;
  *(void *)(v1 + 176) = sub_2534727DC();
  *(void *)(v1 + 184) = swift_task_alloc();
  *(void *)(v1 + 192) = swift_task_alloc();
  *(void *)(v1 + 200) = swift_task_alloc();
  *(_OWORD *)(v1 + 208) = *v3;
  sub_25347719C();
  return MEMORY[0x270FA2498](v16, v17, v18);
}

uint64_t sub_25354A49C()
{
  v0[28] = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  uint64_t v1 = sub_253B08960();
  os_signpost_type_t v2 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v3 = (uint8_t *)sub_2534AF384();
    *(_WORD *)uint64_t v3 = 0;
    os_signpost_id_t v4 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v1, v2, v4, "ToolEmbeddingsDatabase:replaceTools", "", v3, 2u);
    sub_2534659B4();
  }
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[7];
  uint64_t v17 = v0[6];
  uint64_t v18 = v0[5];
  uint64_t v19 = v0[27];
  uint64_t v16 = v0[4];

  sub_2534AF234();
  v9();
  sub_253B089B0();
  sub_253578768();
  v0[29] = sub_253578748();
  v0[30] = *(void *)(v6 + 8);
  v0[31] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_25351C3E8();
  v10();
  sub_253B05540();
  sub_253B05500();
  v0[32] = v11;
  v0[33] = *(void *)(v7 + 8);
  v0[34] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_25347FB18();
  v12();
  v0[35] = sub_25355C28C();
  uint64_t v13 = (void *)swift_allocObject();
  v0[36] = v13;
  v13[2] = v8;
  v13[3] = v5;
  void v13[4] = v19;
  v13[5] = v17;
  void v13[6] = v16;
  v13[7] = v18;
  swift_retain();
  sub_25354084C(v5);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_269CDED70 + dword_269CDED70);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[37] = v14;
  void *v14 = v0;
  v14[1] = sub_25354A71C;
  return v20((uint64_t)v20, (uint64_t)&unk_269CDEDF0, (uint64_t)v13);
}

uint64_t sub_25354A71C()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *os_signpost_id_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  *(void *)(v3 + 304) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25354A808()
{
  uint64_t v30 = v0;
  os_signpost_id_t v4 = (void (*)(uint64_t))v0[33];
  uint64_t v3 = v0[34];
  sub_253B05540();
  sub_253B05500();
  uint64_t v5 = sub_2534D9778();
  v4(v5);
  sub_253B08300();
  sub_2535792D0();
  uint64_t v6 = (void *)sub_253B089D0();
  os_log_type_t v7 = sub_253B09D60();
  if (sub_25347721C(v7))
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[13];
    uint64_t v1 = v0[12];
    sub_253465A6C();
    uint64_t v29 = sub_2534772AC();
    uint64_t v8 = sub_2535782E8(4.8151e-34);
    v9(v8);
    sub_253B06CD0();
    sub_2535788D8();
    sub_25346CAF4();
    sub_2534659CC();
    uint64_t v11 = v10();
    v0[2] = sub_2535790E8(v11, v12, &v29);
    sub_25357863C();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_2535783F4();
    sub_253578728(&dword_253460000, v13, v14, "%s toolbox: Replace took %f seconds to run.");
    sub_2535793CC();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534659CC();
    v15();
  }
  else
  {
    uint64_t v17 = v0[15];
    uint64_t v16 = v0[16];
    uint64_t v18 = v0[14];
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  sub_253B08960();
  sub_253578700();
  sub_253B09DA0();
  if (sub_25357914C())
  {
    uint64_t v3 = v0[8];
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v19 = sub_25357842C();
    if (v20(v19) != *MEMORY[0x263F90238])
    {
      sub_253477128();
      v21();
    }
    uint64_t v22 = (_WORD *)sub_2534AF384();
    sub_253578990(v22);
    sub_253578978();
    sub_25357852C(&dword_253460000, v23, v24, v25, "ToolEmbeddingsDatabase:replaceTools");
    sub_2534659B4();
  }
  sub_2535786B4();

  v2(v3, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  return v27();
}

uint64_t sub_25354AB24()
{
  swift_release();
  swift_release();
  sub_253B08960();
  sub_253578700();
  sub_253B09DA0();
  if (sub_25357914C())
  {
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v1 = sub_25357842C();
    if (v2(v1) != *MEMORY[0x263F90238])
    {
      sub_253477128();
      v3();
    }
    os_signpost_id_t v4 = (_WORD *)sub_2534AF384();
    sub_253578990(v4);
    sub_253578978();
    sub_25357852C(&dword_253460000, v5, v6, v7, "ToolEmbeddingsDatabase:replaceTools");
    sub_2534659B4();
  }
  sub_2535786B4();

  uint64_t v9 = sub_253578D2C();
  v0(v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v10();
}

uint64_t sub_25354ACD4()
{
  sub_253477168();
  uint64_t v3 = v2;
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v0;
  *(void *)(v1 + 40) = v5;
  sub_253578600();
  *(void *)(v1 + 64) = v6;
  uint64_t v7 = type metadata accessor for ToolboxVersion(0);
  *(void *)(v1 + 72) = v7;
  sub_25346CB4C(v7);
  *(void *)(v1 + 80) = sub_253472828();
  uint64_t v8 = sub_253B089F0();
  *(void *)(v1 + 88) = v8;
  sub_25346CB34(v8);
  *(void *)(v1 + 96) = v9;
  *(void *)(v1 + 104) = sub_253472828();
  uint64_t v10 = sub_253B08980();
  *(void *)(v1 + 112) = v10;
  sub_25346CB34(v10);
  *(void *)(v1 + 120) = v11;
  *(void *)(v1 + 128) = sub_2534727DC();
  *(void *)(v1 + 136) = swift_task_alloc();
  *(void *)(v1 + 144) = swift_task_alloc();
  *(void *)(v1 + 152) = swift_task_alloc();
  *(void *)(v1 + 160) = swift_task_alloc();
  *(void *)(v1 + 168) = swift_task_alloc();
  uint64_t v12 = sub_253B05550();
  *(void *)(v1 + 176) = v12;
  sub_25346CB34(v12);
  *(void *)(v1 + 184) = v13;
  *(void *)(v1 + 192) = sub_253472828();
  uint64_t v14 = sub_253B08940();
  *(void *)(v1 + 200) = v14;
  sub_25346CB34(v14);
  *(void *)(v1 + 208) = v15;
  *(void *)(v1 + 216) = sub_2534727DC();
  *(void *)(v1 + 224) = swift_task_alloc();
  *(void *)(v1 + 232) = swift_task_alloc();
  *(void *)(v1 + 240) = swift_task_alloc();
  *(void *)(v1 + 248) = swift_task_alloc();
  *(void *)(v1 + 256) = swift_task_alloc();
  *(void *)(v1 + 264) = swift_task_alloc();
  *(void *)(v1 + 272) = swift_task_alloc();
  *(_OWORD *)(v1 + 280) = *v3;
  sub_25347719C();
  return MEMORY[0x270FA2498](v16, v17, v18);
}

uint64_t sub_25354AEC0()
{
  long long v80 = v0;
  v0[37] = OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  uint64_t v2 = sub_253B08960();
  sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v3 = (_WORD *)sub_2534AF384();
    sub_253578990(v3);
    sub_253578978();
    _os_signpost_emit_with_name_impl(&dword_253460000, v2, v4, v5, "ToolEmbeddingsDatabase:replaceAssistantSchemas", "", v1, 2u);
    sub_2534659B4();
  }
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[23];

  sub_2534AF234();
  v8();
  sub_253B089B0();
  sub_253578768();
  v0[38] = sub_253578748();
  v0[39] = *(void *)(v6 + 8);
  v0[40] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_2534D9A08();
  v9();
  sub_253B05540();
  sub_253B05500();
  v0[41] = v10;
  v0[42] = *(void *)(v7 + 8);
  v0[43] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_2534D97B4();
  uint64_t v12 = v11();
  sub_253552CB4(v12, v13, v14, v15, v16, v17, v18, v19, v52, v54, v56, v58, v60, v62, v64, v66, v68, v70, v72, v75);
  uint64_t v21 = v20;
  uint64_t v22 = v0[35];
  if (v22)
  {
    uint64_t v23 = v0[36];
    uint64_t v24 = v0[35];
  }
  else
  {
    uint64_t v35 = (void *)v0[7];
    uint64_t v36 = v35[21];
    uint64_t v37 = v35[22];
    sub_253472068(v35 + 18, v36);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 112))(&v78, v36, v37);
    uint64_t v24 = v78;
    uint64_t v23 = v79;
    if (!v78)
    {
      uint64_t v26 = sub_25354084C(0);
      uint64_t v34 = 0;
      goto LABEL_6;
    }
    uint64_t v22 = v0[35];
  }
  sub_25354084C(v22);
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  sub_253537F3C(v25, v24);
  uint64_t v34 = v26;
LABEL_6:
  sub_2535531E0(v26, v27, v28, v29, v30, v31, v32, v33, v53, v55, SWORD2(v55), SBYTE6(v55), HIBYTE(v55), v57, v59, v61, v63, v65, v67,
    v69,
    v71,
    v73,
    v76);
  uint64_t v74 = v21;
  uint64_t v38 = v0[7];
  uint64_t v40 = v78;
  uint64_t v39 = v79;
  v0[2] = MEMORY[0x263F8EE88];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25354084C(v24);
  sub_25354084C(v40);
  uint64_t v41 = swift_bridgeObjectRetain();
  sub_253570814(v41, v38, v34, v24, v23, v40, v39, (uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  uint64_t v42 = v0[7];
  uint64_t v43 = v0[8];
  uint64_t v44 = v0[6];
  swift_bridgeObjectRelease();
  sub_25353847C(v40);
  type metadata accessor for AssistantSchema(0);
  sub_253B095A0();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v45 = (uint64_t *)sub_253578DF8();
  uint64_t v47 = sub_253548F54(v45, v46, v42, v74);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v48 = v0[2];
  v0[44] = v48;
  swift_bridgeObjectRetain();
  v0[45] = sub_25355C28C();
  uint64_t v49 = (void *)swift_allocObject();
  v0[46] = v49;
  v49[2] = v44;
  v49[3] = v42;
  void v49[4] = v47;
  v49[5] = v24;
  v49[6] = v23;
  v49[7] = v48;
  v49[8] = v43;
  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_269CDED70 + dword_269CDED70);
  swift_retain();
  swift_retain();
  uint64_t v50 = (void *)swift_task_alloc();
  v0[47] = v50;
  *uint64_t v50 = v0;
  v50[1] = sub_25354B62C;
  return v77((uint64_t)v77, (uint64_t)&unk_269CDED68, (uint64_t)v49);
}

uint64_t sub_25354B62C()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *os_signpost_type_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  *(void *)(v3 + 384) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25354B718()
{
  sub_253578BE8();
  uint64_t v26 = v0;
  uint64_t v1 = (void (*)(uint64_t))v0[42];
  sub_253B05540();
  sub_253B05500();
  uint64_t v2 = sub_2534D9778();
  v1(v2);
  sub_253B08300();
  sub_2535792D0();
  uint64_t v3 = (void *)sub_253B089D0();
  os_log_type_t v4 = sub_253B09D60();
  if (sub_25347721C(v4))
  {
    uint64_t v1 = (void (*)(uint64_t))sub_253465A6C();
    uint64_t v25 = sub_2534772AC();
    uint64_t v5 = sub_2535782E8(4.8151e-34);
    v6(v5);
    sub_253B06CD0();
    sub_2535788D8();
    sub_25346CAF4();
    sub_2534659CC();
    uint64_t v8 = v7();
    v0[3] = sub_2535790E8(v8, v9, &v25);
    sub_25357863C();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_2535783F4();
    sub_253578728(&dword_253460000, v10, v11, "%s toolbox: Replacing protocols took %f seconds to run.");
    sub_2535793CC();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534659CC();
    v12();
  }
  else
  {
    swift_release_n();

    sub_25351C3E8();
    v13();
  }
  swift_bridgeObjectRelease();
  sub_253B08960();
  sub_253578700();
  sub_253B09DA0();
  if (sub_25357914C())
  {
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v14 = sub_25357842C();
    if (v15(v14) != *MEMORY[0x263F90238])
    {
      sub_253477128();
      v16();
    }
    uint64_t v17 = (_WORD *)sub_2534AF384();
    sub_253578990(v17);
    sub_253578978();
    sub_25357852C(&dword_253460000, v18, v19, v20, "ToolEmbeddingsDatabase:replaceAssistantSchemas");
    sub_2534659B4();
  }
  uint64_t v21 = (void (*)(uint64_t))v0[39];

  uint64_t v22 = sub_2535791E4();
  v21(v22);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  return v23();
}

uint64_t sub_25354BAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_2535786D8();
  sub_253578BE8();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_253B08960();
  sub_253B08990();
  sub_253B09DA0();
  if (sub_253B09DE0())
  {
    uint64_t v28 = (uint8_t *)v26[14];
    swift_retain();
    sub_253B089C0();
    swift_release();
    uint64_t v29 = sub_253578E74();
    int v31 = v30(v29);
    uint64_t v32 = v26[48];
    uint64_t v33 = v26[27];
    if (v31 == *MEMORY[0x263F90238])
    {
      uint64_t v34 = "[Error] Interval already ended";
    }
    else
    {
      sub_253477128();
      v35();
      uint64_t v34 = "";
    }
    uint64_t v36 = (_WORD *)sub_2534AF384();
    sub_253578CFC(v36);
    uint64_t v51 = v32;
    sub_253B08920();
    sub_253578984();
    _os_signpost_emit_with_name_impl(&dword_253460000, v27, v37, v38, "ToolEmbeddingsDatabase:replaceAssistantSchemas", v34, v28, 2u);
    sub_2534659B4();
    uint64_t v50 = v26[27];
  }
  else
  {
    uint64_t v33 = v26[27];
    uint64_t v50 = v33;
    uint64_t v51 = v26[48];
  }
  uint64_t v39 = (void (*)(uint64_t, uint64_t))v26[39];
  uint64_t v52 = v26[30];
  uint64_t v53 = v26[29];
  uint64_t v40 = v26[25];
  uint64_t v54 = v26[28];
  uint64_t v55 = v26[24];
  uint64_t v56 = v26[21];
  uint64_t v57 = v26[20];
  uint64_t v58 = v26[19];
  uint64_t v59 = v26[18];
  uint64_t v60 = v26[17];
  uint64_t v61 = v26[16];
  uint64_t v62 = v26[13];
  uint64_t v63 = v26[10];

  v39(v33, v40);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  sub_25357832C();
  return v42(v41, v42, v43, v44, v45, v46, v47, v48, a9, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59,
           v60,
           v61,
           v62,
           v63,
           a24,
           a25,
           a26);
}

uint64_t sub_25354BD40()
{
  sub_253578F2C();
  return sub_253578424(37, v0, (uint64_t)sub_253574840);
}

uint64_t sub_25354BD70()
{
  sub_253578F2C();
  return sub_253578424(30, v0, (uint64_t)sub_253574818);
}

uint64_t sub_25354BDA0()
{
  sub_253578F2C();
  return sub_253578424(30, v0, (uint64_t)sub_253573C24);
}

void sub_25354BDD0()
{
  sub_2535794B8();
  sub_25354C5FC(v0, v1, 0xD000000000000043, v2, (uint64_t)sub_253573C90);
}

uint64_t sub_25354BE10()
{
  sub_253B05850();
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_253465A3C();
  uint64_t v3 = *(void *)(v0 + 312);
  sub_253B056B0();
  if (!v1)
  {
    uint64_t v3 = sub_253B05840();
    uint64_t v4 = sub_2535787F4();
    v5(v4);
  }
  return v3;
}

void sub_25354BEC8()
{
  sub_253578F2C();
  sub_2535794A0(36, v0, (uint64_t)sub_253573C68);
}

void static ToolBoxUtility.stableHashData(hashableString:)()
{
  sub_2534B3258();
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v47 = *MEMORY[0x263EF8340];
  sub_253B09560();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534AF2D8();
  uint64_t v6 = sub_253B09550();
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_253465A3C();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25352AE2C(v4, v2);
  unint64_t v10 = v9;
  sub_253573548(&qword_269CDE6D8, MEMORY[0x263F04850]);
  sub_253579270();
  sub_253B094E0();
  switch(v10 >> 62)
  {
    case 1uLL:
      if (v8 >> 32 < (int)v8) {
        goto LABEL_45;
      }
      sub_25348A9C8(v8, v10);
      sub_253572B88((int)v8, v8 >> 32);
LABEL_5:
      sub_253487D84(v8, v10);
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      sub_25348A9C8(v8, v10);
      swift_retain();
      swift_retain();
      sub_253572B88(v11, v12);
      swift_release();
      swift_release();
      goto LABEL_5;
    case 3uLL:
      sub_25347719C();
      goto LABEL_7;
    default:
LABEL_7:
      sub_253572C68();
      sub_253487D84(v8, v10);
      break;
  }
  sub_253579270();
  sub_253B094D0();
  sub_25351C5C0();
  sub_2534D9A08();
  v13();
  sub_253487D84(v8, v10);
  uint64_t v14 = sub_25352B318(v0);
  unint64_t v16 = v15;
  uint64_t v17 = sub_253B09B10();
  *(void *)(v17 + 16) = 8;
  *(void *)(v17 + 32) = 0;
  uint64_t v18 = v17 + 32;
  unint64_t v39 = v16;
  uint64_t v19 = sub_253B05480();
  if (v19 != v20)
  {
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    if (v20 >= v19)
    {
      unint64_t v37 = v16 >> 16;
      unint64_t v38 = v16 >> 8;
      unint64_t v35 = HIDWORD(v16);
      unint64_t v36 = v16 >> 24;
      unint64_t v34 = v16 >> 40;
      while (2)
      {
        if (v21 >= v22)
        {
          __break(1u);
        }
        else
        {
          uint64_t v23 = *(void *)(v17 + 16);
          if (v23)
          {
            uint64_t v24 = v21 + 1;
            unint64_t v25 = v21 % v23;
            switch(v39 >> 62)
            {
              case 1uLL:
                if (v21 < (int)v14 || v21 >= v14 >> 32) {
                  goto LABEL_40;
                }
                uint64_t v28 = sub_253B05170();
                if (!v28) {
                  goto LABEL_47;
                }
                uint64_t v29 = v28;
                uint64_t v30 = sub_253B05190();
                uint64_t v31 = v21 - v30;
                if (!__OFSUB__(v21, v30)) {
                  goto LABEL_29;
                }
                goto LABEL_41;
              case 2uLL:
                if (v21 < *(void *)(v14 + 16)) {
                  goto LABEL_39;
                }
                if (v21 >= *(void *)(v14 + 24)) {
                  goto LABEL_42;
                }
                uint64_t v32 = sub_253B05170();
                if (!v32) {
                  goto LABEL_48;
                }
                uint64_t v29 = v32;
                uint64_t v33 = sub_253B05190();
                uint64_t v31 = v21 - v33;
                if (__OFSUB__(v21, v33)) {
                  goto LABEL_43;
                }
LABEL_29:
                char v26 = *(unsigned char *)(v29 + v31);
LABEL_30:
                if ((v25 & 0x8000000000000000) != 0) {
                  goto LABEL_36;
                }
                if (v25 >= *(void *)(v17 + 16)) {
                  goto LABEL_37;
                }
                *(unsigned char *)(v18 + v25) ^= v26;
                ++v21;
                if (v22 == v24) {
                  goto LABEL_33;
                }
                continue;
              case 3uLL:
                goto LABEL_46;
              default:
                if (v21 >= BYTE6(v39)) {
                  goto LABEL_38;
                }
                uint64_t v40 = v14;
                char v41 = v39;
                char v42 = v38;
                char v43 = v37;
                char v44 = v36;
                char v45 = v35;
                char v46 = v34;
                char v26 = *((unsigned char *)&v40 + v21);
                goto LABEL_30;
            }
          }
        }
        break;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
  }
LABEL_33:
  objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF8F8]), sel_initWithBytes_length_, v18, *(void *)(v17 + 16));
  sub_253487D84(v14, v39);
  swift_bridgeObjectRelease();
  sub_253465A14();
}

void sub_25354C414()
{
  sub_2535794B8();
  sub_25354C5FC(v0, v1, 0xD000000000000036, v2, (uint64_t)sub_253573CEC);
}

void sub_25354C454()
{
  sub_253578F2C();
  sub_2535794A0(29, v0, (uint64_t)sub_253573CC4);
}

void sub_25354C490()
{
  sub_253578F2C();
  sub_25356A108(0xD000000000000019, v1, (uint64_t)sub_2535747E0, v0);
}

uint64_t sub_25354C4FC()
{
  sub_253578F2C();
  return sub_253578424(27, v0, (uint64_t)sub_2535747B8);
}

uint64_t sub_25354C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253569F50(a1, a2, a3, v3);
  return v5;
}

void sub_25354C57C()
{
  sub_2535794B8();
  sub_25354C5FC(v0, v1, 0xD000000000000035, v2, (uint64_t)sub_253574750);
}

void sub_25354C5BC()
{
  sub_2535794B8();
  sub_25354C5FC(v0, v1, 0xD00000000000002FLL, v2, (uint64_t)sub_253574784);
}

void sub_25354C5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a1;
  void v5[3] = a2;
  sub_253569F50(a3, a4, a5, (uint64_t)v5);
}

void sub_25354C638()
{
  sub_253578F2C();
  sub_2535794A0(29, v0, (uint64_t)sub_253574728);
}

void sub_25354C674()
{
  sub_253578F2C();
  sub_2535794A0(26, v0, (uint64_t)sub_253574700);
}

uint64_t sub_25354C6B0()
{
  sub_253578F2C();
  uint64_t v2 = sub_25354C52C(0xD000000000000025, v1, (uint64_t)sub_253574840);
  unint64_t v4 = v3;
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  sub_253472068(v0 + 34, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  unint64_t v9 = v8;
  if (v4 >> 60 == 15)
  {
    sub_25352C314(v2, v4);
    sub_25352C314(v7, v9);
    return 0;
  }
  else
  {
    uint64_t v11 = sub_25351C5CC();
    sub_25348A9C8(v11, v12);
    uint64_t v13 = sub_25351C5CC();
    char v14 = MEMORY[0x25A264440](v13);
    sub_253487D84(v7, v9);
    sub_25352C314(v2, v4);
    sub_25352C314(v2, v4);
    return v14 & 1;
  }
}

void ToolboxDelegate.storagePath()()
{
  sub_2534B3258();
  sub_253B052F0();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_2534D9C00();
  sub_253B05390();
  sub_253465998();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  sub_2534727F8();
  MEMORY[0x270FA5388](v4);
  sub_253B082C0();
  sub_253578D20();
  ToolboxDelegate.baseRelativeStoragePath()();
  sub_253B05350();
  uint64_t v5 = *(void (**)(void))(v2 + 8);
  sub_25347FB18();
  v5();
  sub_25353CDD4();
  v6();
  sub_25346C800();
  sub_253B05380();
  sub_2534D9A08();
  v7();
  swift_bridgeObjectRelease();
  sub_25353CE60();
  sub_25347FB18();
  v5();
  sub_253465A14();
}

uint64_t sub_25354C94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = swift_allocObject();
  sub_25355B34C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a7, a8, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
  return v16;
}

void sub_25354C9F0()
{
  sub_2534847F8();
  uint64_t v108 = v3;
  uint64_t v4 = v0;
  uint64_t v102 = v5;
  uint64_t v103 = v6;
  uint64_t v106 = v7;
  uint64_t v107 = v8;
  v96[8] = sub_253B08980();
  sub_253465998();
  v96[7] = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v11);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v12);
  v96[1] = (uint64_t)v96 - v13;
  uint64_t v111 = sub_253B05860();
  sub_253465998();
  uint64_t v105 = v14;
  MEMORY[0x270FA5388](v15);
  sub_2534D8F68(v16, v96[0]);
  uint64_t v17 = sub_253B05830();
  uint64_t v18 = sub_25346CB4C(v17);
  MEMORY[0x270FA5388](v18);
  sub_2534B33AC();
  uint64_t v19 = sub_253B08940();
  sub_253465998();
  uint64_t v21 = v20;
  MEMORY[0x270FA5388](v22);
  sub_2534F823C();
  MEMORY[0x270FA5388](v23);
  sub_2534F823C();
  MEMORY[0x270FA5388](v24);
  sub_2534B3318();
  sub_2534F823C();
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  v96[13] = v27;
  uint64_t v28 = sub_253B08960();
  os_signpost_type_t v29 = sub_253B09DB0();
  char v30 = sub_253B09DE0();
  uint64_t v112 = v4;
  if (v30)
  {
    uint64_t v31 = v2;
    uint64_t v32 = (uint8_t *)sub_2534AF384();
    *(_WORD *)uint64_t v32 = 0;
    os_signpost_id_t v33 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v28, v29, v33, "ToolEmbeddingsDatabase:searchToolsStage1", "", v32, 2u);
    uint64_t v2 = v31;
    sub_2534659B4();
  }

  sub_2534AF234();
  v34();
  sub_253B089B0();
  sub_253578768();
  sub_2535792A4();
  uint64_t v109 = sub_253B089A0();
  uint64_t v36 = *(void *)(v21 + 8);
  uint64_t v35 = v21 + 8;
  v96[11] = v19;
  v96[10] = v35;
  v96[12] = v36;
  sub_2534D91A0();
  v37();
  unint64_t v38 = &unk_253B22000;
  uint64_t v39 = v103;
  uint64_t v110 = v2;
  if (v103)
  {
    sub_253462A5C(&qword_269CDE580);
    uint64_t v40 = sub_253B057A0();
    sub_25346CB34(v40);
    uint64_t v41 = sub_253578CC0();
    long long v101 = xmmword_253B22680;
    *(_OWORD *)(v41 + 16) = xmmword_253B22680;
    uint64_t v104 = v41;
    uint64_t v100 = v41 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253B05820();
    uint64_t v99 = sub_253462A5C(&qword_269CDE5B8);
    char v42 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
    v96[5] = *(void *)(*(void *)v42 + 72);
    sub_253578C78();
    uint64_t v98 = v43;
    uint64_t v44 = swift_allocObject();
    *(void *)&long long v97 = v44;
    *(_OWORD *)(v44 + 16) = xmmword_253B22690;
    char v45 = (uint64_t *)(v44 + v35 + v42[14]);
    uint64_t v46 = v39;
    uint64_t v47 = *(void (**)(void))(*(void *)(sub_253B05800() - 8) + 104);
    sub_253578520();
    v47();
    *char v45 = v102;
    v45[1] = v46;
    uint64_t v48 = sub_253B05870();
    sub_25346CAF4();
    sub_25346CCF8();
    v49();
    sub_253578C40((uint64_t)v45);
    unint64_t v38 = (_OWORD *)&unk_253B22000;
    sub_253578520();
    v47();
    uint64_t v50 = v110;
    uint64_t v51 = sub_2535787C4();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v51, v52, v53, v48);
    sub_253B05790();
    uint64_t v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = v101;
    uint64_t v103 = v54;
    sub_25355C1A4(v54 + v35, (void *)(v54 + v35 + v42[14]), 3);
  }
  else
  {
    uint64_t v103 = MEMORY[0x263F8EE78];
    uint64_t v104 = MEMORY[0x263F8EE78];
    uint64_t v50 = v2;
  }
  sub_253462A5C(&qword_269CDE580);
  uint64_t v55 = sub_253B057A0();
  sub_25346CB34(v55);
  *(void *)&long long v101 = *(void *)(v56 + 72);
  sub_253578960();
  uint64_t v59 = v58 & ~v57;
  uint64_t v60 = swift_allocObject();
  uint64_t v102 = v60;
  long long v97 = v38[105];
  *(_OWORD *)(v60 + 16) = v97;
  uint64_t v99 = v60 + v59;
  uint64_t v61 = v105;
  sub_253578C0C();
  LODWORD(v100) = *MEMORY[0x263F84728];
  uint64_t v105 = *(void *)(v61 + 104);
  sub_25357871C();
  v62();
  swift_bridgeObjectRetain();
  sub_253B05810();
  uint64_t v98 = sub_253462A5C(&qword_269CDE5B8);
  sub_253462A5C(&qword_269CDB608);
  sub_25357849C();
  uint64_t v64 = *(void *)(v63 + 72);
  sub_253578960();
  uint64_t v67 = v66 & ~v65;
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = v97;
  uint64_t v69 = v68 + v67;
  sub_25355C1A4(v68 + v67, (void *)(v68 + v67 + *(int *)(v50 + 56)), 1);
  sub_25355C1A4(v69 + v64, (void *)(v69 + v64 + *(int *)(v50 + 56)), 0);
  sub_2534784DC(v103);
  uint64_t v70 = v99;
  sub_253B05790();
  uint64_t v103 = v70 + v101;
  sub_253578C0C();
  sub_25357871C();
  v71();
  swift_bridgeObjectRetain();
  sub_253578828();
  sub_253B05810();
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_253B22680;
  sub_25355C1A4(v72 + v67, (void *)(v72 + v67 + *(int *)(v50 + 56)), 0);
  sub_2534D9AA0();
  sub_253B05790();
  uint64_t v113 = v102;
  sub_25347849C(v104);
  sub_253564964(v106, v107, v108, v113);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v73 = sub_253B08960();
    sub_253578C34();
    sub_253B08990();
    sub_253B09DA0();
    if (sub_253578EA4())
    {
      swift_retain();
      sub_253578FB4();
      swift_release();
      sub_253578F5C();
      sub_253578368();
      if (v81() == *MEMORY[0x263F90238])
      {
        uint64_t v82 = "[Error] Interval already ended";
      }
      else
      {
        sub_2534D91A0();
        v83();
        uint64_t v82 = "";
      }
      uint64_t v84 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v84 = 0;
      sub_253B08920();
      sub_253578984();
      _os_signpost_emit_with_name_impl(&dword_253460000, v73, v85, v86, "ToolEmbeddingsDatabase:searchToolsStage1", v82, v84, 2u);
      sub_2534659B4();
    }

    sub_25351C3E8();
    v87();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v74 = sub_253579360();
    uint64_t v76 = sub_253467BCC(v74, v75);
    sub_253467FAC(v76, v77, v78, v79);
    sub_2535641D8(v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v88 = sub_253B08960();
    sub_253B08990();
    os_signpost_type_t v89 = sub_253B09DA0();
    if (sub_253B09DE0())
    {
      swift_retain();
      sub_253B089C0();
      swift_release();
      sub_253578F88();
      sub_253578368();
      if (v90() == *MEMORY[0x263F90238])
      {
        os_log_t v91 = "[Error] Interval already ended";
      }
      else
      {
        sub_2534DA4BC();
        v92();
        os_log_t v91 = "";
      }
      uint64_t v93 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v93 = 0;
      os_signpost_id_t v94 = sub_253B08920();
      _os_signpost_emit_with_name_impl(&dword_253460000, v88, v89, v94, "ToolEmbeddingsDatabase:searchToolsStage1", v91, v93, 2u);
      sub_2534659B4();
    }

    sub_253477128();
    v95();
    swift_release();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_25354D48C()
{
  sub_2534847F8();
  uint64_t v152 = v2;
  uint64_t v139 = v3;
  uint64_t v138 = v4;
  sub_253B089F0();
  sub_253465998();
  uint64_t v144 = v6;
  uint64_t v145 = v5;
  MEMORY[0x270FA5388](v5);
  sub_2534659D8();
  uint64_t v143 = v7;
  sub_2534B324C();
  MEMORY[0x270FA5388](v8);
  sub_2534B35DC();
  sub_2534D8F5C(v9);
  uint64_t v10 = sub_253462A5C(&qword_269CDECE0);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534659D8();
  uint64_t v142 = v12;
  sub_2534B324C();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = sub_2534F8208((uint64_t)v133 - v14);
  uint64_t v137 = type metadata accessor for ToolBoxToolSearchResult(v15);
  sub_253465998();
  uint64_t v136 = v16;
  MEMORY[0x270FA5388](v17);
  sub_2534F823C();
  MEMORY[0x270FA5388](v18);
  sub_2534F823C();
  MEMORY[0x270FA5388](v19);
  sub_2534F8208((uint64_t)v133 - v20);
  sub_253B08980();
  sub_253465998();
  uint64_t v147 = v21;
  uint64_t v148 = v22;
  MEMORY[0x270FA5388](v21);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v23);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v24);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v25);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v26);
  sub_2534F823C();
  MEMORY[0x270FA5388](v27);
  sub_2534F8208((uint64_t)v133 - v28);
  os_signpost_type_t v29 = (uint8_t *)sub_253B08940();
  sub_253465998();
  uint64_t v31 = v30;
  MEMORY[0x270FA5388](v32);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v33);
  sub_2534F823C();
  MEMORY[0x270FA5388](v34);
  sub_2534F823C();
  MEMORY[0x270FA5388](v35);
  sub_2534B3318();
  uint64_t v149 = v36;
  sub_2534B324C();
  MEMORY[0x270FA5388](v37);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v38);
  sub_2534B3318();
  uint64_t v146 = v39;
  sub_2534B324C();
  MEMORY[0x270FA5388](v40);
  sub_2534F882C();
  MEMORY[0x270FA5388](v41);
  uint64_t v42 = v0;
  uint64_t v43 = v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  uint64_t v151 = v43;
  uint64_t v44 = sub_253B08960();
  os_signpost_type_t v45 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v46 = (_WORD *)sub_2534AF384();
    sub_2535788B0(v46);
    os_signpost_id_t v47 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v44, v45, v47, "ToolEmbeddingsDatabase:searchToolStage2", "", v29, 2u);
    sub_2534659B4();
  }

  sub_253578D2C();
  sub_2534AF234();
  v48();
  sub_253B089B0();
  sub_253578768();
  uint64_t v49 = (uint8_t *)sub_253B089A0();
  uint64_t v52 = *(void (**)(void))(v31 + 8);
  uint64_t v50 = v31 + 8;
  uint64_t v51 = v52;
  sub_2534D97B4();
  v52();
  uint64_t v53 = v152;
  if (!*(void *)(v152 + 16))
  {
    sub_253B08300();
    uint64_t v60 = sub_253B089D0();
    os_log_type_t v61 = sub_253B09D60();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (_WORD *)sub_2534AF384();
      sub_2535788B0(v62);
      _os_log_impl(&dword_253460000, v60, v61, "ToolBox returning zero tools as it received empty list bundle ids", v29, 2u);
      sub_2534659B4();
    }

    sub_2534659CC();
    v63();
    uint64_t v64 = sub_253B08960();
    sub_253B08990();
    sub_253B09DA0();
    if (sub_253578564())
    {
      uint64_t v150 = v51;
      swift_retain();
      sub_253B089C0();
      swift_release();
      sub_253578368();
      if (v65() == *MEMORY[0x263F90238])
      {
        uint64_t v66 = "[Error] Interval already ended";
      }
      else
      {
        sub_2534D9220();
        v74();
        uint64_t v66 = "";
      }
      uint64_t v75 = (_WORD *)sub_2534AF384();
      sub_253578CFC(v75);
      sub_253B08920();
      sub_253578780();
      _os_signpost_emit_with_name_impl(&dword_253460000, v64, v76, v77, "ToolEmbeddingsDatabase:searchToolStage2", v66, v49, 2u);
      sub_2534659B4();
      uint64_t v51 = v150;
    }

    sub_2534DA154();
    sub_2534D97B4();
    v51();
    goto LABEL_19;
  }
  uint64_t v150 = v51;
  uint64_t v54 = sub_253B056C0();
  if (!v1)
  {
    uint64_t v67 = v54;
    uint64_t v149 = v49;
    uint64_t v68 = sub_25356629C(*(void *)(v42 + 32), *(char **)(v42 + 40), v53, v42);
    uint64_t v69 = sub_253564964(v138, v139, v67, v68);
    uint64_t v146 = v78;
    v155[0] = v69;
    v133[0] = v29;
    swift_bridgeObjectRelease();
    uint64_t v79 = sub_25356629C(*(void *)(v42 + 48), *(char **)(v42 + 56), v53, v42);
    uint64_t v80 = (void (**)(char *, char *, uint64_t))sub_253578E40();
    uint64_t v82 = sub_253564964(v80, v81, v67, v79);
    uint64_t v84 = v83;
    swift_bridgeObjectRelease();
    uint64_t v85 = v146;
    swift_bridgeObjectRetain();
    uint64_t v86 = swift_bridgeObjectRetain();
    sub_253537F3C(v86, v85);
    v154[0] = v155[0];
    swift_bridgeObjectRetain();
    sub_253478634(v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = sub_2535641D8(v154[0]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v88 = *(void *)(v87 + 16);
    uint64_t v146 = v50;
    os_signpost_type_t v89 = v150;
    if (v88)
    {
      uint64_t v90 = v87 + 32;
      swift_bridgeObjectRetain();
      uint64_t v91 = MEMORY[0x263F8EE78];
      sub_253578FCC();
      uint64_t v92 = v142;
      do
      {
        sub_253538B64(v90, (uint64_t)v154);
        sub_253538B64((uint64_t)v154, (uint64_t)&v153);
        sub_253462A5C(&qword_269CDE598);
        if (swift_dynamicCast())
        {
          sub_253578EBC(v92, 0);
          uint64_t v93 = v135;
          sub_253573624(v92, v135);
          uint64_t v94 = v141;
          sub_253573624(v93, v141);
          uint64_t v95 = 0;
        }
        else
        {
          uint64_t v95 = 1;
          uint64_t v96 = sub_2535787C4();
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v96, v97, v98, v84);
          sub_253472458(v92, &qword_269CDECE0);
          uint64_t v94 = v141;
        }
        sub_253578EBC(v94, v95);
        _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v154);
        sub_2534D8B48(v94, 1, v84);
        if (v58)
        {
          sub_253472458(v94, &qword_269CDECE0);
          uint64_t v92 = v142;
        }
        else
        {
          uint64_t v99 = v134;
          sub_253573624(v94, v134);
          sub_253573624(v99, v140);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v92 = v142;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            char v105 = sub_253579380();
            sub_253523338(v105, v106, v107, v91);
            uint64_t v91 = v108;
          }
          unint64_t v102 = *(void *)(v91 + 16);
          unint64_t v101 = *(void *)(v91 + 24);
          uint64_t v84 = v102 + 1;
          if (v102 >= v101 >> 1)
          {
            char v109 = sub_253526BBC(v101);
            sub_253523338(v109, v102 + 1, 1, v91);
            uint64_t v91 = v110;
          }
          *(void *)(v91 + 16) = v84;
          sub_2535786F4();
          sub_253573624(v140, v91 + v103 + *(void *)(v104 + 72) * v102);
          sub_253578FCC();
        }
        v90 += 40;
        --v88;
      }
      while (v88);
      swift_bridgeObjectRelease_n();
      os_signpost_type_t v89 = v150;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v91 = MEMORY[0x263F8EE78];
      sub_253578FCC();
    }
    v154[0] = v91;
    swift_bridgeObjectRetain();
    sub_25354805C(v154);
    uint64_t v111 = (_DWORD *)v133[4];
    swift_bridgeObjectRelease();
    sub_253B08300();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v112 = sub_253B089D0();
    os_log_type_t v113 = sub_253B09D70();
    if (os_log_type_enabled(v112, v113))
    {
      sub_253465A6C();
      uint64_t v143 = sub_2535788BC();
      v154[0] = v143;
      *uint64_t v111 = 136315394;
      uint64_t v114 = swift_retain();
      uint64_t v115 = MEMORY[0x25A268A80](v114, v84);
      unint64_t v117 = v116;
      swift_release();
      uint64_t v118 = sub_253464DF8(v115, v117, v154);
      sub_253578A28(v118);
      sub_253B09E80();
      swift_release_n();
      swift_bridgeObjectRelease();
      sub_253578DC4();
      uint64_t v119 = swift_bridgeObjectRetain();
      uint64_t v120 = MEMORY[0x25A268A80](v119, MEMORY[0x263F8D310]);
      os_log_type_t v121 = v113;
      unint64_t v123 = v122;
      swift_bridgeObjectRelease();
      uint64_t v124 = sub_253464DF8(v120, v123, v154);
      sub_25357927C(v124);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_type_t v125 = v121;
      os_signpost_type_t v89 = v150;
      sub_2535793F8(&dword_253460000, v112, v125, "Top tool matches: %s for bundleIDS: %s");
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    sub_2534659CC();
    v126();
    char v127 = (void *)sub_253B08960();
    sub_25357924C();
    sub_253B08990();
    os_signpost_type_t v156 = sub_253B09DA0();
    if (sub_253B09DE0())
    {
      swift_retain();
      sub_253B089C0();
      swift_release();
      sub_253578368();
      if (v128() != *MEMORY[0x263F90238])
      {
        sub_2534D9220();
        v129();
      }
      uint64_t v130 = (_WORD *)sub_2534AF384();
      sub_253579064(v130);
      sub_25357924C();
      os_signpost_id_t v131 = sub_253B08920();
      sub_2535792B0(&dword_253460000, v132, v156, v131, "ToolEmbeddingsDatabase:searchToolStage2");
      sub_2534659B4();
    }

    sub_2534D97B4();
    v89();
LABEL_19:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v55 = (void *)sub_253B08960();
  sub_253B08990();
  os_signpost_type_t v56 = sub_253B09DA0();
  if (sub_253B09DE0())
  {
    swift_retain();
    sub_253B089C0();
    uint64_t v149 = v49;
    swift_release();
    sub_253578368();
    BOOL v58 = v57() == *MEMORY[0x263F90238];
    uint64_t v59 = v150;
    v133[0] = v29;
    if (!v58)
    {
      sub_2534D9220();
      v70();
    }
    uint64_t v71 = (_WORD *)sub_2534AF384();
    sub_2535788B0(v71);
    os_signpost_id_t v72 = sub_253B08920();
    sub_2535790A4(&dword_253460000, v73, v56, v72, "ToolEmbeddingsDatabase:searchToolStage2");
    sub_2534659B4();
  }
  else
  {
    uint64_t v59 = v150;
  }

  sub_2534D97B4();
  v59();
  swift_release();
LABEL_37:
  sub_2534847C8();
}

void sub_25354E4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v24;
  a20 = v25;
  uint64_t v152 = v22;
  uint64_t v153 = v26;
  uint64_t v148 = v27;
  uint64_t v149 = v28;
  uint64_t v143 = sub_253B08980();
  sub_253465998();
  uint64_t v142 = v29;
  MEMORY[0x270FA5388](v30);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v31);
  uint64_t v158 = (char *)v138 - v32;
  sub_2534B324C();
  uint64_t v34 = MEMORY[0x270FA5388](v33);
  sub_253578504(v34, v35, v36, v37, v38, v39, v40, v41, v138[0]);
  sub_253B089F0();
  sub_253465998();
  uint64_t v144 = v43;
  uint64_t v145 = v42;
  MEMORY[0x270FA5388](v42);
  sub_2534727F8();
  sub_253578D54();
  MEMORY[0x270FA5388](v44);
  sub_2534B35DC();
  uint64_t v141 = v45;
  uint64_t v154 = sub_253B05860();
  sub_253465998();
  uint64_t v146 = v46;
  MEMORY[0x270FA5388](v47);
  sub_25346CB04();
  uint64_t v147 = v48;
  uint64_t v49 = sub_253B05830();
  uint64_t v50 = sub_25346CB4C(v49);
  MEMORY[0x270FA5388](v50);
  sub_2534D8F68(v51, v138[0]);
  sub_253462A5C(&qword_269CDB608);
  sub_253465998();
  uint64_t v160 = v53;
  uint64_t v161 = v52;
  MEMORY[0x270FA5388](v52);
  sub_25348360C();
  uint64_t v54 = sub_253B08940();
  sub_253465998();
  uint64_t v56 = v55;
  MEMORY[0x270FA5388](v57);
  sub_2534F823C();
  MEMORY[0x270FA5388](v58);
  uint64_t v159 = (char *)v138 - v59;
  sub_2534B324C();
  MEMORY[0x270FA5388](v60);
  sub_2534F823C();
  MEMORY[0x270FA5388](v61);
  sub_253578D44();
  MEMORY[0x270FA5388](v62);
  sub_2534D9E98();
  uint64_t v150 = v21;
  uint64_t v63 = v21 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  uint64_t v151 = v63;
  uint64_t v64 = sub_253B08960();
  os_signpost_type_t v65 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v66 = (uint8_t *)sub_2534AF384();
    uint64_t v157 = v20;
    uint64_t v67 = v56;
    uint64_t v68 = v54;
    uint64_t v69 = v66;
    *(_WORD *)uint64_t v66 = 0;
    os_signpost_id_t v70 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v64, v65, v70, "ToolEmbeddingsDatabase:searchToolsStage3", "", v69, 2u);
    uint64_t v54 = v68;
    uint64_t v56 = v67;
    sub_2534659B4();
  }

  sub_2534DA154();
  sub_2534AF234();
  v71();
  sub_253B089B0();
  sub_253578768();
  sub_253578D94();
  uint64_t v155 = sub_253B089A0();
  uint64_t v74 = *(void (**)(void))(v56 + 8);
  uint64_t v73 = v56 + 8;
  os_signpost_id_t v72 = v74;
  sub_2534D97B4();
  v74();
  uint64_t v75 = v153;
  uint64_t v76 = *(void *)(v153 + 16);
  if (!v76)
  {
    sub_253B08300();
    unint64_t v101 = sub_253B089D0();
    os_log_type_t v102 = sub_253B09D60();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v103 = 0;
      _os_log_impl(&dword_253460000, v101, v102, "ToolBox returning zero tools as it received empty list tool ids", v103, 2u);
      sub_2534659B4();
    }

    sub_2534D8E50();
    sub_2534659CC();
    v104();
    char v105 = (void *)sub_253B08960();
    sub_253B08990();
    sub_253B09DA0();
    if (sub_253578564())
    {
      swift_retain();
      sub_253B089C0();
      swift_release();
      sub_253579010();
      sub_253578368();
      if (v106() != *MEMORY[0x263F90238])
      {
        sub_25351C3E8();
        v127();
      }
      char v128 = (_WORD *)sub_2534AF384();
      sub_25357878C(v128);
      sub_253578780();
      sub_253578348(&dword_253460000, v129, v130, v131, "ToolEmbeddingsDatabase:searchToolsStage3");
      sub_2534659B4();
    }

    sub_2534D97B4();
    v72();
    goto LABEL_32;
  }
  uint64_t v139 = v72;
  uint64_t v140 = v73;
  v138[3] = v54;
  a10 = MEMORY[0x263F8EE78];
  sub_2539E7BA4();
  uint64_t v77 = a10;
  LODWORD(v159) = *MEMORY[0x263F846F8];
  uint64_t v158 = (char *)sub_253B05800();
  uint64_t v78 = *((void *)v158 - 1);
  uint64_t v79 = *(void *)(v78 + 104);
  uint64_t v156 = v78 + 104;
  uint64_t v157 = v79;
  uint64_t v80 = (uint64_t *)(v75 + 40);
  do
  {
    uint64_t v82 = *(v80 - 1);
    uint64_t v81 = *v80;
    uint64_t v83 = (void *)(v23 + *(int *)(v161 + 48));
    sub_25346CCF8();
    v84();
    *uint64_t v83 = v82;
    v83[1] = v81;
    sub_253B05870();
    sub_25346CAF4();
    sub_25346CCF8();
    v85();
    sub_253578C40((uint64_t)v83);
    a10 = v77;
    unint64_t v87 = *(void *)(v77 + 16);
    unint64_t v86 = *(void *)(v77 + 24);
    swift_bridgeObjectRetain();
    if (v87 >= v86 >> 1)
    {
      sub_2539E7BA4();
      uint64_t v77 = a10;
    }
    v80 += 2;
    *(void *)(v77 + 16) = v87 + 1;
    unint64_t v88 = (*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
    sub_2534D8A74(v23, v77 + v88 + *(void *)(v160 + 72) * v87, &qword_269CDB608);
    --v76;
  }
  while (v76);
  sub_253462A5C(&qword_269CDE580);
  uint64_t v89 = sub_253B057A0();
  sub_25346CB34(v89);
  uint64_t v159 = *(char **)(v90 + 72);
  sub_253578C78();
  uint64_t v91 = swift_allocObject();
  uint64_t v160 = v91;
  *(_OWORD *)(v91 + 16) = xmmword_253B22690;
  uint64_t v157 = v91 + v23;
  uint64_t v156 = *(void *)(v150 + 64);
  uint64_t v92 = v146;
  uint64_t v93 = v147;
  void *v147 = 0;
  v93[1] = 0;
  uint64_t v158 = *(char **)(v92 + 104);
  sub_2535789A8();
  v94();
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253578D38();
  sub_253B05790();
  *uint64_t v93 = 0;
  *((unsigned char *)v93 + 8) = 1;
  sub_2535789A8();
  v95();
  swift_bridgeObjectRetain();
  sub_2534D954C();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_253B22680;
  sub_25355C1A4(v96 + v88, (void *)(v96 + v88 + *(int *)(v161 + 48)), 4);
  sub_2534D9B10();
  uint64_t v97 = (_DWORD *)v160;
  sub_253B05790();
  uint64_t v98 = v152;
  sub_25356686C(v148, v149, (uint64_t)v97);
  if (!v98)
  {
    swift_bridgeObjectRelease();
    sub_253578ED4();
    sub_253B08300();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v107 = sub_253B089D0();
    os_log_type_t v108 = sub_253B09D70();
    if (os_log_type_enabled(v107, v108))
    {
      sub_253465A6C();
      uint64_t v161 = sub_2535788BC();
      a10 = v161;
      *uint64_t v97 = 136315394;
      uint64_t v109 = type metadata accessor for ToolBoxToolSearchResult(0);
      uint64_t v110 = swift_bridgeObjectRetain();
      uint64_t v111 = MEMORY[0x25A268A80](v110, v109);
      uint64_t v152 = 0;
      unint64_t v113 = v112;
      swift_bridgeObjectRelease();
      uint64_t v162 = sub_253464DF8(v111, v113, &a10);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_253578DC4();
      uint64_t v114 = swift_bridgeObjectRetain();
      uint64_t v115 = MEMORY[0x25A268A80](v114, MEMORY[0x263F8D310]);
      unint64_t v117 = v116;
      swift_bridgeObjectRelease();
      uint64_t v162 = sub_253464DF8(v115, v117, &a10);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_2535793F8(&dword_253460000, v107, v108, "Top tool matches: %s for toolIds: %s");
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_2534659CC();
    v118();
    sub_253578FCC();
    uint64_t v119 = (void *)sub_253B08960();
    sub_2535787A8();
    sub_253B08990();
    sub_253B09DA0();
    if (sub_253B09DE0())
    {
      swift_retain();
      sub_253B089C0();
      swift_release();
      sub_253578F5C();
      sub_253578368();
      if (v120() != *MEMORY[0x263F90238])
      {
        sub_2534D91A0();
        v132();
      }
      uint64_t v133 = (_WORD *)sub_2534AF384();
      sub_253579064(v133);
      sub_253B08920();
      sub_253578984();
      sub_2535792B0(&dword_253460000, v134, v135, v136, "ToolEmbeddingsDatabase:searchToolsStage3");
      sub_2534659B4();
    }

    uint64_t v137 = sub_253578AC4();
    ((void (*)(uint64_t))v139)(v137);
LABEL_32:
    swift_release();
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  uint64_t v99 = (void *)sub_253B08960();
  sub_2535787A8();
  sub_253B08990();
  sub_253B09DA0();
  if (sub_253578564())
  {
    swift_retain();
    sub_253578F70();
    swift_release();
    sub_253579010();
    sub_253578368();
    if (v100() != *MEMORY[0x263F90238])
    {
      sub_25351C3E8();
      v121();
    }
    unint64_t v122 = (_WORD *)sub_2534AF384();
    sub_253578CFC(v122);
    sub_253B08920();
    sub_253578780();
    sub_253578348(&dword_253460000, v123, v124, v125, "ToolEmbeddingsDatabase:searchToolsStage3");
    sub_2534659B4();
  }

  sub_2534F85D4();
  v126();
  swift_release();
LABEL_33:
  sub_2534847C8();
}

void sub_25354F0D8()
{
  sub_2534847F8();
  v325 = v1;
  uint64_t v284 = v5;
  uint64_t v264 = v6;
  uint64_t v287 = sub_253B05870();
  sub_253465998();
  uint64_t v283 = v7;
  MEMORY[0x270FA5388](v8);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v9);
  sub_2534B35DC();
  sub_2534D8F5C(v10);
  uint64_t v263 = sub_253462A5C(&qword_269CDE7F8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534659D8();
  uint64_t v324 = v12;
  sub_2534B324C();
  MEMORY[0x270FA5388](v13);
  sub_2534B35DC();
  sub_2534F8208(v14);
  uint64_t v289 = sub_253B09440();
  sub_253465998();
  uint64_t v308 = v15;
  MEMORY[0x270FA5388](v16);
  sub_25346CB04();
  uint64_t v288 = v17;
  uint64_t v318 = sub_253B089F0();
  sub_253465998();
  uint64_t v267 = v18;
  MEMORY[0x270FA5388](v19);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v20);
  sub_2534F823C();
  MEMORY[0x270FA5388](v21);
  sub_2534F823C();
  MEMORY[0x270FA5388](v22);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v23);
  sub_2534B35DC();
  uint64_t v25 = sub_2534F8208(v24);
  uint64_t v305 = type metadata accessor for ToolboxCustomKeyResult(v25);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v26);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v27);
  sub_2534B35DC();
  sub_2534D8F5C(v28);
  uint64_t v29 = sub_253462A5C(&qword_26B241270);
  uint64_t v30 = sub_25346CB4C(v29);
  MEMORY[0x270FA5388](v30);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v31);
  sub_2534B35DC();
  uint64_t v285 = v32;
  uint64_t v303 = sub_253B08B30();
  sub_253465998();
  uint64_t v294 = v33;
  MEMORY[0x270FA5388](v34);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v35);
  sub_2534B35DC();
  sub_2534D8F5C(v36);
  uint64_t v306 = sub_253462A5C(&qword_26B24A348);
  sub_253465998();
  uint64_t v300 = v37;
  MEMORY[0x270FA5388](v38);
  sub_2534F8208((uint64_t)&v258 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v307 = sub_253B08BC0();
  sub_253465998();
  v299 = v40;
  MEMORY[0x270FA5388](v41);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v42);
  sub_2534F823C();
  MEMORY[0x270FA5388](v43);
  sub_2534B35DC();
  sub_2534D8F5C(v44);
  uint64_t v45 = sub_253462A5C(&qword_269CDECD0);
  uint64_t v46 = sub_25346CB4C(v45);
  MEMORY[0x270FA5388](v46);
  uint64_t v312 = sub_253578AF8();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v47);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v48);
  sub_2534B35DC();
  sub_2534F8208(v49);
  uint64_t v319 = sub_253B058A0();
  sub_253465998();
  uint64_t v282 = v50;
  MEMORY[0x270FA5388](v51);
  sub_25346CB04();
  uint64_t v326 = v52;
  uint64_t v271 = sub_253B08980();
  sub_253465998();
  uint64_t v272 = v53;
  MEMORY[0x270FA5388](v54);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v55);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v56);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v57);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v58);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v59);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v60);
  sub_2534B3318();
  sub_2534F823C();
  uint64_t v62 = MEMORY[0x270FA5388](v61);
  sub_253578504(v62, v63, v64, v65, v66, v67, v68, v69, v258);
  sub_253B05860();
  sub_253465998();
  uint64_t v321 = v71;
  uint64_t v322 = v70;
  MEMORY[0x270FA5388](v70);
  uint64_t v72 = sub_253578374();
  uint64_t v73 = sub_25346CB4C(v72);
  MEMORY[0x270FA5388](v73);
  sub_25346CB04();
  uint64_t v323 = v74;
  uint64_t v301 = sub_253B08940();
  sub_253465998();
  uint64_t v309 = v75;
  MEMORY[0x270FA5388](v76);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v77);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v78);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v79);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v80);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v81);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v82);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v83);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v84);
  sub_2534F882C();
  MEMORY[0x270FA5388](v85);
  uint64_t v311 = v0;
  uint64_t v86 = v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
  sub_253B08960();
  sub_253B08910();
  uint64_t v280 = v86;
  unint64_t v87 = sub_253B08960();
  uint64_t v88 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v89 = (_WORD *)sub_2534AF384();
    sub_253578CFC(v89);
    os_signpost_id_t v90 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v87, (os_signpost_type_t)v88, v90, "ToolEmbeddingsDatabase:searchToolCustomKey", "", v3, 2u);
    sub_2534659B4();
  }

  sub_253578954();
  uint64_t v91 = v301;
  sub_2534AF234();
  v92();
  sub_253B089B0();
  sub_253578768();
  uint64_t v302 = sub_253B089A0();
  uint64_t v93 = *(void *)(v88 + 8);
  uint64_t v309 = v88 + 8;
  uint64_t v281 = v93;
  sub_2534B3470();
  v94();
  uint64_t v329 = MEMORY[0x263F8EE88];
  sub_253462A5C(&qword_269CDE580);
  uint64_t v95 = sub_253B057A0();
  sub_25346CB34(v95);
  unint64_t v97 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
  uint64_t v98 = swift_allocObject();
  long long v310 = xmmword_253B22680;
  *(_OWORD *)(v98 + 16) = xmmword_253B22680;
  unint64_t v320 = v98 + v97;
  uint64_t v99 = v311;
  uint64_t v100 = *(void *)(v311 + 120);
  *uint64_t v4 = 0;
  v4[1] = 0;
  sub_25346CCF8();
  v101();
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  sub_253462A5C(&qword_269CDB608);
  sub_25357849C();
  sub_253578CE4();
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = v310;
  uint64_t v103 = v102 + v91 + *(int *)(v100 + 56);
  sub_253B05800();
  sub_25346CAF4();
  sub_25346CCF8();
  v104();
  uint64_t v105 = v283 + 16;
  uint64_t v106 = *(void (**)(void))(v283 + 16);
  uint64_t v107 = v287;
  ((void (*)(uint64_t, uint64_t, uint64_t))v106)(v103, v284, v287);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v103, 0, 1, v107);
  sub_2534D9778();
  sub_253B05790();
  uint64_t v108 = *(void *)(v99 + 312);
  uint64_t v109 = v325;
  uint64_t v110 = sub_253B056C0();
  unint64_t v112 = v109;
  if (v109)
  {
    swift_bridgeObjectRelease();
    unint64_t v113 = sub_253578660();
    sub_2535787A8();
    sub_253B08990();
    sub_253B09DA0();
    if (sub_253B09DE0())
    {
      swift_retain();
      sub_253578F70();
      swift_release();
      sub_253578954();
      sub_253578368();
      if (v114() == *MEMORY[0x263F90238])
      {
        uint64_t v115 = "[Error] Interval already ended";
      }
      else
      {
        sub_253579360();
        sub_2534B3470();
        v201();
        uint64_t v115 = "";
      }
      uint64_t v202 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v202 = 0;
      sub_253B08920();
      sub_253578984();
      _os_signpost_emit_with_name_impl(&dword_253460000, v113, v203, v204, "ToolEmbeddingsDatabase:searchToolCustomKey", v115, v202, 2u);
      sub_2534659B4();
    }

    sub_253477128();
    v205();
    goto LABEL_93;
  }
  uint64_t v276 = v98;
  uint64_t v116 = v110 - 1;
  if (__OFSUB__(v110, 1))
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (v116 < -999)
  {
LABEL_97:
    __break(1u);
    return;
  }
  uint64_t v260 = v106;
  uint64_t v270 = v116 / 500;
  uint64_t v117 = v116 / 500 + 1;
  if (!v117)
  {
    sub_253578BF4();
    uint64_t v119 = v324;
LABEL_62:
    uint64_t v206 = v287;
    uint64_t v207 = v265;
    if (*(void *)(v329 + 16) > 1uLL)
    {
      swift_bridgeObjectRelease();
      sub_2535382C4();
      sub_2534D969C();
      *uint64_t v208 = 1;
      swift_willThrow();
      uint64_t v209 = (void *)sub_253578660();
      sub_253B08990();
      sub_253B09DA0();
      if (sub_253578564())
      {
        sub_253578C5C();
        sub_253578F70();
        swift_release();
        uint64_t v226 = sub_2535782BC();
        if (v227(v226) != *MEMORY[0x263F90238])
        {
          sub_2534D9220();
          v228();
        }
        long long v229 = (_WORD *)sub_2534AF384();
        sub_25357878C(v229);
        sub_253578780();
        sub_253578348(&dword_253460000, v230, v231, v232, "ToolEmbeddingsDatabase:searchToolCustomKey");
        sub_2534659B4();
      }
    }
    else
    {
      v325 = v112;
      uint64_t v210 = v266;
      sub_2539812C4(v329, v266);
      swift_bridgeObjectRelease();
      sub_253578F88();
      sub_253B08300();
      sub_2534D88A0(v210, v119, &qword_269CDE7F8);
      uint64_t v211 = v260;
      uint64_t v259 = v105;
      ((void (*)(uint64_t, uint64_t, uint64_t))v260)(v207, v284, v206);
      uint64_t v212 = sub_253B089D0();
      os_log_type_t v213 = sub_253B09D70();
      if (os_log_type_enabled(v212, v213))
      {
        sub_253465A6C();
        uint64_t v326 = sub_2535788BC();
        v328[0] = v326;
        *(_DWORD *)uint64_t v207 = 136315394;
        uint64_t v215 = sub_253B09DF0();
        uint64_t v327 = sub_253464DF8(v215, v216, v328);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        sub_253472458(v119, &qword_269CDE7F8);
        *(_WORD *)(v207 + 12) = 2080;
        sub_2534AF234();
        v211();
        sub_253578E58();
        uint64_t v217 = sub_253B09730();
        uint64_t v327 = sub_253464DF8(v217, v218, v328);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        sub_2534659CC();
        v219();
        sub_2535793F8(&dword_253460000, v212, v213, "ToolDatabaseAsset: %s for customKey: %s");
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
      }
      else
      {
        sub_253472458(v119, &qword_269CDE7F8);
        sub_2535794C4();
        sub_253579334();
        sub_2534659CC();
        v221();
      }

      sub_2535794C4();
      sub_2534659CC();
      v220();
      sub_2534D8A74(v266, v264, &qword_269CDE7F8);
      uint64_t v209 = (void *)sub_253578660();
      sub_253B08990();
      sub_253B09DA0();
      if (sub_253578564())
      {
        swift_retain();
        sub_253B089C0();
        swift_release();
        uint64_t v222 = sub_2535782BC();
        if (v223(v222) != *MEMORY[0x263F90238])
        {
          sub_2534D9220();
          v243();
        }
        *(_WORD *)sub_2534AF384() = 0;
        sub_253B08920();
        sub_253578780();
        sub_253578348(&dword_253460000, v244, v245, v246, "ToolEmbeddingsDatabase:searchToolCustomKey");
        sub_2534659B4();
      }
    }
    goto LABEL_92;
  }
  uint64_t v277 = v108;
  uint64_t v259 = v105;
  v325 = 0;
  uint64_t v118 = 0;
  unint64_t v298 = (void *)(v99 + 144);
  uint64_t v321 = v282 + 16;
  uint64_t v317 = v267 + 8;
  unint64_t v320 = v282 + 8;
  int v297 = *MEMORY[0x263F7FE90];
  uint64_t v296 = v300 + 104;
  uint64_t v295 = v300 + 8;
  ++v299;
  uint64_t v300 = v294 + 16;
  uint64_t v269 = v294 + 32;
  uint64_t v268 = v294 + 8;
  uint64_t v275 = v308 + 32;
  uint64_t v274 = v308 + 16;
  uint64_t v273 = v308 + 8;
  uint64_t v278 = v117 & ~(v117 >> 63);
  *(void *)&long long v111 = 136315138;
  long long v262 = v111;
  uint64_t v261 = MEMORY[0x263F8EE58] + 8;
  uint64_t v119 = v324;
  uint64_t v120 = v316;
  uint64_t v308 = v2;
  uint64_t v121 = v312;
  while (1)
  {
    if (v118 == v278)
    {
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    if (v118 == 0x4189374BC6A7F0) {
      goto LABEL_95;
    }
    uint64_t v290 = v118;
    unint64_t v122 = v325;
    uint64_t v123 = sub_253B05750();
    v325 = v122;
    if (v122)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v209 = (void *)sub_253578660();
      sub_253B08990();
      sub_253B09DA0();
      if (sub_253578564())
      {
        swift_retain();
        sub_253578F70();
        swift_release();
        uint64_t v224 = sub_2535782BC();
        if (v225(v224) != *MEMORY[0x263F90238])
        {
          sub_2534D9220();
          v252();
        }
        uint64_t v253 = (_WORD *)sub_2534AF384();
        sub_25357878C(v253);
        sub_253578780();
        sub_253578348(&dword_253460000, v254, v255, v256, "ToolEmbeddingsDatabase:searchToolCustomKey");
        sub_2534659B4();
      }
      goto LABEL_92;
    }
    uint64_t v124 = *(void *)(v123 + 16);
    if (v124) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_56:
    uint64_t v118 = v290 + 1;
    if (v290 == v270)
    {
      swift_bridgeObjectRelease();
      unint64_t v112 = v325;
      uint64_t v105 = v259;
      goto LABEL_62;
    }
  }
  sub_2535786F4();
  uint64_t v279 = v125;
  uint64_t v127 = v125 + v126;
  uint64_t v129 = *(void *)(v128 + 16);
  uint64_t v322 = *(void *)(v128 + 72);
  uint64_t v323 = v129;
  while (1)
  {
    sub_2535793C0();
    sub_2534AF234();
    v130();
    uint64_t v131 = sub_253B05890();
    if (v132 >> 60 != 15) {
      break;
    }
    sub_253B08300();
    uint64_t v133 = sub_253B089D0();
    os_log_type_t v134 = sub_253B09D80();
    if (sub_2534AF330(v134))
    {
      os_signpost_type_t v135 = (uint8_t *)sub_2534AF384();
      *(_WORD *)os_signpost_type_t v135 = 0;
      _os_log_impl(&dword_253460000, v133, (os_log_type_t)v120, "ANN search for custom key did not return a payload", v135, 2u);
      sub_2534659B4();
    }

    sub_2534DA678();
    sub_2534659CC();
    v136();
    sub_2534659CC();
    v137();
LABEL_26:
    uint64_t v119 = v324;
LABEL_27:
    v127 += v322;
    if (!--v124)
    {
      sub_253578E8C();
      goto LABEL_56;
    }
  }
  uint64_t v138 = v131;
  if (qword_269CDA7E8 != -1) {
    swift_once();
  }
  sub_253573548(&qword_269CDECD8, (void (*)(uint64_t))type metadata accessor for ToolboxDatabasePayload);
  sub_253578D38();
  uint64_t v139 = v325;
  sub_253B05000();
  if (v139)
  {

    sub_253578EBC(v2, 1);
    sub_253472458(v2, &qword_269CDECD0);
    sub_253B08300();
    uint64_t v140 = sub_253B089D0();
    os_log_type_t v141 = sub_253B09D80();
    if (os_log_type_enabled(v140, v141))
    {
      uint64_t v142 = (_WORD *)sub_2534AF384();
      sub_253578CFC(v142);
      _os_log_impl(&dword_253460000, v140, v141, "Payload from ANN search for custom key could not be decoded", v120, 2u);
      uint64_t v120 = v316;
      sub_2534659B4();
    }
    uint64_t v143 = sub_253579264();
    sub_25352C314(v143, v144);

    sub_2534DA678();
    sub_2534659CC();
    v145();
    sub_2534659CC();
    v146();
    v325 = 0;
    goto LABEL_26;
  }
  uint64_t v313 = v138;
  sub_253578EBC(v2, 0);
  uint64_t v147 = v314;
  sub_253573624(v2, v314);
  sub_25357369C(v147, v315);
  sub_253579258();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v325 = 0;
  if (!EnumCaseMultiPayload)
  {
    sub_253578690();
    uint64_t v291 = v154;
    uint64_t v156 = sub_253472068(v298, v155);
    sub_253579198((uint64_t)v156, (uint64_t)&v319);
    swift_getKeyPath();
    swift_allocObject();
    sub_253462A5C(&qword_269CDE490);
    uint64_t inited = swift_initStackObject();
    sub_25357857C(inited);
    uint64_t v158 = sub_253B04A10(0);
    sub_2535784D4(v158);
    sub_25346CCF8();
    v159();
    sub_253573548((unint64_t *)&qword_26B24A350, MEMORY[0x263F80100]);
    sub_2535735D0();
    sub_253578ED4();
    sub_253579340();
    swift_release();
    sub_253578D38();
    sub_2534659CC();
    v160();
    uint64_t v120 = *v299;
    sub_2534DA4BC();
    ((void (*)(void))v120)();
    sub_2535793E4();
    sub_253578920();
    uint64_t v162 = v161();
    v325 = 0;
    uint64_t v163 = v162;
    sub_2534DA4BC();
    ((void (*)(void))v120)();
    unint64_t v164 = *(void *)(v163 + 16);
    if (v164 >= 2)
    {
      sub_253578E8C();
      sub_253578EF8();
      swift_bridgeObjectRelease();
      sub_253578BF4();
      swift_bridgeObjectRelease();
      sub_2535382C4();
      uint64_t v233 = sub_2534D969C();
      sub_2535792E8(v233, v234);
      uint64_t v235 = sub_253578464();
      sub_25357893C(v235, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
      sub_2534659CC();
      v236();
      uint64_t v209 = (void *)sub_253578660();
      sub_253578BAC();
      sub_253B09DA0();
      if ((sub_253578564() & 1) == 0) {
        goto LABEL_92;
      }
      goto LABEL_82;
    }
    if (v164)
    {
      sub_253578848();
      uint64_t v165 = v285;
      uint64_t v166 = v303;
      sub_2534B3428();
      v167();
      sub_253579038();
    }
    else
    {
      sub_253579038();
      uint64_t v165 = v285;
      uint64_t v166 = v303;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v165, v168, 1, v166);
    swift_bridgeObjectRelease();
    sub_2534D8B48(v165, 1, v166);
    if (!v184)
    {
      swift_bridgeObjectRelease();
      sub_2534DA678();
      sub_253579258();
      sub_2534D8E14();
      v189();
      sub_2535787F4();
      sub_2534B3428();
      v190();
      swift_storeEnumTagMultiPayload();
      sub_25357938C();
      sub_2539E0CB4();
      sub_253578464();
      sub_2535734F4(v165, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
      sub_2534DA678();
      sub_2534D9AA0();
LABEL_53:
      sub_2534659CC();
      uint64_t v199 = v198();
      sub_25357893C(v199, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
      sub_2534659CC();
      v200();
      uint64_t v119 = v324;
      goto LABEL_54;
    }
    sub_253472458(v165, &qword_26B241270);
    sub_253B08300();
    swift_bridgeObjectRetain();
    uint64_t v185 = sub_253B089D0();
    os_log_type_t v186 = sub_253B09D90();
    if (os_log_type_enabled(v185, v186))
    {
      uint64_t v187 = swift_slowAlloc();
      uint64_t v188 = swift_slowAlloc();
      sub_2535789F4(v188);
      *(void *)(v187 + 4) = sub_2535793A0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_253460000, v185, v186, "ToolDefinition not found for %s", (uint8_t *)v187, 0xCu);
      goto LABEL_48;
    }
    sub_253578FD8();
LABEL_50:

    goto LABEL_52;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_2534DA678();
    sub_2534D8E14();
    v149();
    sub_253578F44();
    sub_2534B3428();
    v150();
    swift_storeEnumTagMultiPayload();
    sub_25357938C();
    sub_2539E0CB4();
    sub_253578464();
    sub_2535734F4(v121, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
    sub_2534DA678();
    sub_2534659CC();
    uint64_t v152 = v151();
    sub_25357893C(v152, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
    sub_2534659CC();
    v153();
    uint64_t v119 = v324;
    uint64_t v120 = v316;
LABEL_54:
    uint64_t v2 = v308;
    uint64_t v121 = v312;
    goto LABEL_27;
  }
  sub_253578690();
  uint64_t v292 = v169;
  uint64_t v171 = sub_253472068(v298, v170);
  sub_253579198((uint64_t)v171, (uint64_t)&v318);
  swift_getKeyPath();
  swift_allocObject();
  sub_253462A5C(&qword_269CDE490);
  uint64_t v172 = swift_initStackObject();
  sub_25357857C(v172);
  uint64_t v173 = sub_253B04A10(0);
  sub_2535784D4(v173);
  sub_25346CCF8();
  v174();
  sub_253573548((unint64_t *)&qword_26B24A350, MEMORY[0x263F80100]);
  sub_2535735D0();
  sub_253578954();
  sub_253579340();
  swift_release();
  sub_2534659CC();
  v175();
  uint64_t v120 = *v299;
  sub_2534DA4BC();
  ((void (*)(void))v120)();
  sub_2535793E4();
  sub_253578920();
  uint64_t v177 = v176();
  v325 = 0;
  uint64_t v178 = v177;
  sub_2534DA4BC();
  ((void (*)(void))v120)();
  unint64_t v179 = *(void *)(v178 + 16);
  if (v179 < 2)
  {
    if (v179)
    {
      sub_253578848();
      uint64_t v180 = v286;
      uint64_t v181 = v303;
      sub_2534B3428();
      v182();
      sub_253579024();
    }
    else
    {
      sub_253579024();
      uint64_t v180 = v286;
      uint64_t v181 = v303;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v180, v183, 1, v181);
    swift_bridgeObjectRelease();
    sub_2534D8B48(v180, 1, v181);
    if (!v184)
    {
      sub_253578EF8();
      sub_2534DA678();
      sub_253578EE0();
      sub_2534D8E14();
      v195();
      sub_253578F44();
      sub_2534B3428();
      v196();
      swift_storeEnumTagMultiPayload();
      uint64_t v197 = v304;
      sub_2534D9B10();
      sub_2539E0CB4();
      sub_253578464();
      sub_2535734F4(v197, (void (*)(void))type metadata accessor for ToolboxCustomKeyResult);
      sub_253578D38();
      goto LABEL_53;
    }
    sub_253472458(v180, &qword_26B241270);
    sub_253B08300();
    swift_bridgeObjectRetain();
    uint64_t v191 = sub_253B089D0();
    os_log_type_t v192 = sub_253B09D90();
    v293 = v191;
    if (os_log_type_enabled(v191, v192))
    {
      uint64_t v193 = swift_slowAlloc();
      uint64_t v194 = swift_slowAlloc();
      sub_2535789F4(v194);
      *(void *)(v193 + 4) = sub_2535793A0();
      swift_bridgeObjectRelease_n();
      uint64_t v185 = v293;
      _os_log_impl(&dword_253460000, v293, v192, "ToolDefinition not found for %s", (uint8_t *)v193, 0xCu);
LABEL_48:
      swift_arrayDestroy();
      sub_2534659B4();
      uint64_t v120 = v316;
      sub_2534659B4();
      sub_253578464();
      goto LABEL_50;
    }
    sub_253578FD8();

LABEL_52:
    sub_2534DA678();
    goto LABEL_53;
  }
  sub_253578E8C();
  sub_253578EF8();
  swift_bridgeObjectRelease();
  sub_253578BF4();
  swift_bridgeObjectRelease();
  sub_2535382C4();
  uint64_t v237 = sub_2534D969C();
  sub_2535792E8(v237, v238);
  uint64_t v239 = sub_253578464();
  sub_25357893C(v239, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
  sub_2534659CC();
  v240();
  uint64_t v209 = (void *)sub_253578660();
  sub_253578BAC();
  sub_253B09DA0();
  if ((sub_253578564() & 1) == 0) {
    goto LABEL_92;
  }
LABEL_82:
  swift_retain();
  sub_253B089C0();
  swift_release();
  uint64_t v241 = sub_2535782BC();
  if (v242(v241) != *MEMORY[0x263F90238])
  {
    sub_2534D9220();
    v247();
  }
  uint64_t v248 = (_WORD *)sub_2534AF384();
  sub_25357878C(v248);
  sub_253578780();
  sub_253578348(&dword_253460000, v249, v250, v251, "ToolEmbeddingsDatabase:searchToolCustomKey");
  sub_2534659B4();
LABEL_92:

  sub_253477128();
  v257();
LABEL_93:
  swift_release();
  sub_253578DEC();
  sub_2534847C8();
}

void sub_2535512B4()
{
  sub_2534847F8();
  uint64_t v1 = sub_253B05860();
  sub_253465998();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  sub_2534B33AC();
  uint64_t v5 = sub_253B05830();
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDE580);
  uint64_t v7 = sub_253B057A0();
  sub_25346CB34(v7);
  sub_253578CE4();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_253B22680;
  sub_253578C0C();
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v0, *MEMORY[0x263F84728], v1);
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  uint64_t v9 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
  uint64_t v10 = *(void *)(*(void *)v9 + 72);
  sub_253578960();
  uint64_t v13 = v12 & ~v11;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_253B34E30;
  uint64_t v15 = v14 + v13;
  sub_25355C1A4(v15, (void *)(v15 + v9[14]), 1);
  sub_25355C1A4(v15 + v10, (void *)(v15 + v10 + v9[14]), 2);
  sub_25355C1A4(v15 + 2 * v10, (void *)(v15 + 2 * v10 + v9[14]), 4);
  sub_253578E4C();
  sub_253B05790();
  sub_253566CB0(v8);
  swift_bridgeObjectRelease();
  sub_253578800();
  sub_2534847C8();
}

void sub_2535514E8()
{
  sub_2534847F8();
  uint64_t v42 = v0;
  uint64_t v40 = v1;
  uint64_t v3 = v2;
  uint64_t v41 = sub_253B057A0();
  MEMORY[0x270FA5388](v41);
  uint64_t v5 = sub_253578884(v4, v38);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_253578374();
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_253465A3C();
  uint64_t v9 = *v3;
  sub_253462A5C(&qword_269CDE580);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_253B22680;
  uint64_t v43 = v10;
  sub_2535787B4();
  uint64_t v11 = sub_253578D64();
  v12(v11);
  swift_bridgeObjectRetain();
  sub_2534D954C();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  sub_253462A5C(&qword_269CDB608);
  sub_253578444();
  sub_253578960();
  uint64_t v15 = v14 & ~v13;
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_253B22680;
  sub_25355C1A4(v16 + v15, (void *)(v16 + v15 + *(int *)(v5 + 48)), v9);
  sub_2534DA154();
  sub_253B05790();
  if (v42)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253B05820();
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_253B22690;
    uint64_t v17 = (void *)(v39 + v15 + *(int *)(v5 + 48));
    uint64_t v18 = *MEMORY[0x263F846F8];
    uint64_t v19 = sub_253B05800();
    sub_25346CAF4();
    uint64_t v21 = *(void (**)(void))(v20 + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v21)(v39 + v15, v18, v19);
    *uint64_t v17 = v40;
    v17[1] = v42;
    uint64_t v22 = sub_253B05870();
    sub_25346CAF4();
    sub_25346CCF8();
    v23();
    uint64_t v24 = sub_253578E64();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v24, v25, v26, v22);
    v21();
    uint64_t v27 = sub_2535787C4();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, v28, v29, v22);
    sub_253B05790();
    uint64_t v30 = v43;
    unint64_t v32 = *(void *)(v43 + 16);
    unint64_t v31 = *(void *)(v43 + 24);
    if (v32 >= v31 >> 1)
    {
      char v34 = sub_253579308(v31);
      sub_253523100(v34, v35, v36, v43);
      uint64_t v30 = v37;
    }
    *(void *)(v30 + 16) = v32 + 1;
    sub_2534D8E14();
    v33();
  }
  else
  {
    uint64_t v30 = v43;
  }
  sub_253566CB0(v30);
  swift_bridgeObjectRelease();
  sub_253578800();
  sub_2534847C8();
}

void sub_25355193C()
{
  sub_2534B3258();
  unint64_t v0 = type metadata accessor for ToolboxVersion(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = sub_253578AD0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253578B3C();
  sub_253578810();
  uint64_t v4 = sub_253B089D0();
  os_log_type_t v5 = sub_253B09D60();
  if (os_log_type_enabled(v4, v5))
  {
    sub_253578480();
    uint64_t v15 = sub_2534772AC();
    uint64_t v6 = sub_25357839C(v15, 4.8149e-34);
    v7(v6);
    sub_253B06CD0();
    sub_253578F10();
    sub_25346CAF4();
    sub_2534659CC();
    v8();
    uint64_t v9 = sub_253464DF8(v2, v0, &v16);
    sub_2535789B4(v9);
    sub_253578D7C();
    swift_bridgeObjectRelease();
    sub_253578DA0(&dword_253460000, v10, v11, "%s toolbox: Warming up database");
    sub_253579178();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534659CC();
    v12();
  }
  else
  {

    sub_253578D7C();
    uint64_t v13 = sub_253579424();
    v14(v13);
  }
  sub_253B05720();
  sub_253465A14();
}

void sub_253551AE8()
{
  sub_2534B3258();
  unint64_t v0 = type metadata accessor for ToolboxVersion(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = sub_253578AD0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253578B3C();
  sub_253578810();
  uint64_t v4 = sub_253B089D0();
  os_log_type_t v5 = sub_253B09D60();
  if (os_log_type_enabled(v4, v5))
  {
    sub_253578480();
    uint64_t v15 = sub_2534772AC();
    uint64_t v6 = sub_25357839C(v15, 4.8149e-34);
    v7(v6);
    sub_253B06CD0();
    sub_253578F10();
    sub_25346CAF4();
    sub_2534659CC();
    v8();
    uint64_t v9 = sub_253464DF8(v2, v0, &v16);
    sub_2535789B4(v9);
    sub_253578D7C();
    swift_bridgeObjectRelease();
    sub_253578DA0(&dword_253460000, v10, v11, "%s toolbox: Cooling down database");
    sub_253579178();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534659CC();
    v12();
  }
  else
  {

    sub_253578D7C();
    uint64_t v13 = sub_253579424();
    v14(v13);
  }
  sub_253B05740();
  sub_253465A14();
}

void sub_253551C90()
{
  sub_2534847F8();
  uint64_t v49 = v1;
  uint64_t v47 = v2;
  uint64_t v4 = v3;
  sub_253B057A0();
  sub_25357854C();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = sub_253578884(v6, v45);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_253578374();
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_2534B3294();
  uint64_t v11 = *v4;
  sub_253462A5C(&qword_269CDE580);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_253B22680;
  uint64_t v50 = v12;
  sub_2535787B4();
  uint64_t v13 = sub_253578D64();
  v14(v13);
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  sub_253462A5C(&qword_269CDB608);
  sub_253578444();
  sub_253578960();
  uint64_t v17 = v16 & ~v15;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_253B22680;
  int v48 = v11;
  sub_25355C1A4(v18 + v17, (void *)(v18 + v17 + *(int *)(v7 + 48)), v11);
  sub_253579334();
  sub_253B05790();
  if (v49)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253B05820();
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_253B22690;
    uint64_t v19 = v46 + v17;
    uint64_t v20 = (void *)(v46 + v17 + *(int *)(v7 + 48));
    uint64_t v21 = *MEMORY[0x263F846F8];
    uint64_t v22 = sub_253B05800();
    sub_25346CAF4();
    uint64_t v24 = *(void (**)(void))(v23 + 104);
    ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v19, v21, v22);
    *uint64_t v20 = v47;
    v20[1] = v49;
    uint64_t v25 = sub_253B05870();
    sub_25346CAF4();
    sub_25346CCF8();
    v26();
    uint64_t v27 = sub_253578E64();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, v28, v29, v25);
    v24();
    uint64_t v30 = sub_2535787C4();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v30, v31, v32, v25);
    sub_253B05790();
    uint64_t v33 = v50;
    unint64_t v35 = *(void *)(v50 + 16);
    unint64_t v34 = *(void *)(v50 + 24);
    if (v35 >= v34 >> 1)
    {
      char v41 = sub_253579308(v34);
      sub_253523100(v41, v42, v43, v50);
      uint64_t v33 = v44;
    }
    *(void *)(v33 + 16) = v35 + 1;
    sub_2534D8E14();
    v36();
  }
  uint64_t v37 = swift_bridgeObjectRetain();
  sub_253566D08(v37);
  if (v0)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    switch(v48)
    {
      case 1:
      case 2:
      case 3:
      case 4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      default:
        uint64_t v40 = sub_2535487C0(v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_25353CEDC(v40);
        break;
    }
  }
  sub_253578800();
  sub_2534847C8();
}

uint64_t sub_2535520F8()
{
  sub_253477168();
  v1[9] = v2;
  v1[10] = v0;
  uint64_t v3 = sub_253B08B30();
  v1[11] = v3;
  sub_25346CB34(v3);
  v1[12] = v4;
  v1[13] = sub_253472828();
  uint64_t v5 = sub_253B089F0();
  v1[14] = v5;
  sub_25346CB34(v5);
  v1[15] = v6;
  v1[16] = sub_253472828();
  uint64_t v7 = sub_253B08BC0();
  v1[17] = v7;
  sub_25346CB34(v7);
  v1[18] = v8;
  v1[19] = sub_253472828();
  sub_25347719C();
  return MEMORY[0x270FA2498](v9, v10, v11);
}

uint64_t sub_2535521E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint8_t *a14, void *a15, os_log_t log, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34)
{
  sub_2535786D8();
  a33 = v35;
  a34 = v36;
  sub_253578BE8();
  a32 = v34;
  uint64_t v37 = (void *)v34[10];
  uint64_t v38 = v37[21];
  uint64_t v39 = v37[22];
  sub_253472068(v37 + 18, v38);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v39 + 112))(&a20, v38, v39);
  uint64_t v40 = a20;
  if (!a20)
  {
    swift_bridgeObjectRetain();
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_25357832C();
    return v84(v82, v83, v84, v85, v86, v87, v88, v89, a9, a10, a11, a12, a13, a14, a15, log, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  swift_bridgeObjectRetain();
  uint64_t v41 = swift_bridgeObjectRetain();
  sub_253537F3C(v41, v40);
  uint64_t v43 = v42;
  uint64_t v44 = sub_253578EEC();
  sub_25353847C(v44);
  uint64_t v45 = swift_allocObject();
  v34[20] = v45;
  *(void *)(v45 + 16) = MEMORY[0x263F8EE78];
  if (*(void *)(v43 + 16))
  {
    swift_bridgeObjectRetain();
    sub_253548104();
    *(void *)(v45 + 16) = v46;
    swift_bridgeObjectRelease();
    sub_253B08300();
    sub_253578810();
    uint64_t v47 = sub_253B089D0();
    int v48 = sub_253B09D70();
    BOOL v49 = os_log_type_enabled(v47, (os_log_type_t)v48);
    uint64_t v50 = v34[20];
    if (v49)
    {
      HIDWORD(a13) = v48;
      a15 = v34 + 9;
      os_log_t log = v47;
      a11 = v34 + 8;
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      a12 = sub_2534772AC();
      a22 = a12;
      a14 = v51;
      *(_DWORD *)uint64_t v51 = 136315138;
      sub_25351C5CC();
      sub_2535789DC();
      uint64_t v52 = *(void *)(v50 + 16);
      uint64_t v53 = *(void *)(v52 + 16);
      uint64_t v54 = MEMORY[0x263F8EE78];
      if (v53)
      {
        a10 = v34 + 2;
        uint64_t v55 = v34[12];
        a20 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_2539E6C84();
        sub_253578CA8();
        uint64_t v57 = v52 + v56;
        a17 = *(void *)(v55 + 56);
        a18 = v58;
        do
        {
          sub_2534D9778();
          sub_2534AF234();
          v59();
          uint64_t v60 = sub_253B08AF0();
          uint64_t v62 = v61;
          sub_253578828();
          sub_2534D9A08();
          v63();
          uint64_t v54 = a20;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2539E6C84();
            uint64_t v54 = a20;
          }
          unint64_t v65 = *(void *)(v54 + 16);
          unint64_t v64 = *(void *)(v54 + 24);
          if (v65 >= v64 >> 1)
          {
            sub_253526BBC(v64);
            sub_2539E6C84();
            uint64_t v54 = a20;
          }
          *(void *)(v54 + 16) = v65 + 1;
          uint64_t v66 = v54 + 16 * v65;
          *(void *)(v66 + 32) = v60;
          *(void *)(v66 + 40) = v62;
          v57 += a17;
          --v53;
        }
        while (v53);
        swift_bridgeObjectRelease();
      }
      a19 = v34[16];
      MEMORY[0x25A268A80](v54, MEMORY[0x263F8D310]);
      swift_bridgeObjectRelease();
      uint64_t v78 = sub_2535791E4();
      v34[8] = sub_253464DF8(v78, v79, v80);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_253460000, v47, BYTE4(a13), "Allowed tools: %s either set through user default or ToolBoxAllowList.plist", a14, 0xCu);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {
      swift_release_n();

      sub_2534D970C();
    }
    sub_25351C3E8();
    v81();
    sub_2535789DC();
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  uint64_t v67 = v37[22];
  sub_253472068(v37 + 18, v37[21]);
  sub_253553728();
  uint64_t v90 = *(void *)(v67 + 96) + **(int **)(v67 + 96);
  swift_retain();
  uint64_t v68 = (void *)swift_task_alloc();
  v34[21] = v68;
  *uint64_t v68 = v34;
  v68[1] = sub_25355276C;
  sub_25357832C();
  return v75(v69, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, a12, a13, a14, a15, log, a17, v90, v67 + 96,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_25355276C()
{
  sub_253477088();
  sub_253535478();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253477158();
  *uint64_t v5 = v4;
  *(void *)(v6 + 176) = v0;
  swift_task_dealloc();
  sub_2534D91A0();
  v7();
  swift_release();
  sub_25347719C();
  return MEMORY[0x270FA2498](v8, v9, v10);
}

uint64_t sub_2535528C8()
{
  sub_253B08300();
  sub_253578810();
  uint64_t v1 = sub_253B089D0();
  os_log_type_t v2 = sub_253B09D70();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    sub_2534772AC();
    uint64_t v31 = v4;
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_2535789DC();
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v6 = *(void *)(v5 + 16);
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (v6)
    {
      uint64_t v30 = v1;
      uint64_t v8 = v0[12];
      uint64_t v34 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_2539E6C84();
      sub_253578CA8();
      uint64_t v10 = v5 + v9;
      uint64_t v32 = *(void *)(v8 + 56);
      do
      {
        sub_2535793C0();
        sub_2534AF234();
        v11();
        uint64_t v12 = sub_253B08AF0();
        uint64_t v14 = v13;
        sub_2534D9778();
        sub_25347FB18();
        v15();
        uint64_t v7 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E6C84();
          uint64_t v7 = v34;
        }
        unint64_t v16 = *(void *)(v7 + 16);
        if (v16 >= *(void *)(v7 + 24) >> 1)
        {
          sub_2539E6C84();
          uint64_t v7 = v34;
        }
        *(void *)(v7 + 16) = v16 + 1;
        uint64_t v17 = v7 + 16 * v16;
        *(void *)(v17 + 32) = v12;
        *(void *)(v17 + 40) = v14;
        v10 += v32;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v1 = v30;
    }
    uint64_t v21 = v0[15];
    uint64_t v33 = v0[16];
    uint64_t v22 = v0[14];
    MEMORY[0x25A268A80](v7, MEMORY[0x263F8D310]);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_253578E58();
    v0[8] = sub_253464DF8(v23, v24, v25);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    sub_253578D7C();
    _os_log_impl(&dword_253460000, v1, v2, "Allowed tools: %s either set through user default or ToolBoxAllowList.plist", v31, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    uint64_t v18 = v33;
    uint64_t v19 = v22;
  }
  else
  {
    swift_release_n();

    uint64_t v18 = sub_2534D9778();
  }
  v20(v18, v19);
  uint64_t v26 = v0[20];
  sub_2535789DC();
  uint64_t v27 = *(void *)(v26 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(uint64_t))v0[1];
  return v28(v27);
}

uint64_t sub_253552C24()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v0();
}

uint64_t ToolBoxAllowList.init(global:local:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_253552CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v21;
  a20 = v22;
  os_log_t v63 = v20;
  sub_253B05390();
  sub_253465998();
  MEMORY[0x270FA5388](v23);
  sub_2534D9B74();
  sub_253B089F0();
  sub_253465998();
  uint64_t v64 = v24;
  uint64_t v65 = v25;
  MEMORY[0x270FA5388](v24);
  sub_2534727F8();
  sub_2534F882C();
  MEMORY[0x270FA5388](v26);
  uint64_t v62 = (char *)v57 - v27;
  sub_2534B324C();
  MEMORY[0x270FA5388](v28);
  sub_25346C8E0(0, (unint64_t *)&qword_26B24A3B8);
  sub_253578F2C();
  id v29 = sub_25353CE78();
  if (v29 && (sub_253578F2C(), sub_2535300F8(0xD000000000000016, v30, 1852797802, 0xE400000000000000, v29), v31))
  {
    id v61 = v29;
    sub_253B08300();
    uint64_t v32 = sub_253B089D0();
    os_log_type_t v33 = sub_253B09D90();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_253460000, v32, v33, "Example utterances override file accessed", v34, 2u);
      sub_2534659B4();
    }

    uint64_t v36 = v65 + 8;
    uint64_t v35 = *(void (**)(void))(v65 + 8);
    sub_2534D9220();
    v35();
    sub_253579334();
    sub_253B05310();
    swift_bridgeObjectRelease();
    os_log_t v37 = v63;
    uint64_t v38 = sub_253B053D0();
    if (v37)
    {
      sub_25351C3E8();
      v40();
    }
    else
    {
      uint64_t v45 = v38;
      unint64_t v46 = v39;
      uint64_t v65 = v36;
      sub_25351C3E8();
      v47();
      sub_253B05020();
      sub_253578768();
      sub_253B05010();
      sub_253573B94();
      sub_253B05000();
      swift_release();
      uint64_t v48 = a10;
      sub_253B08300();
      swift_bridgeObjectRetain_n();
      BOOL v49 = sub_253B089D0();
      os_log_type_t v50 = sub_253B09D70();
      int v51 = v50;
      if (os_log_type_enabled(v49, v50))
      {
        os_log_t v63 = v49;
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = swift_slowAlloc();
        a10 = v60;
        uint64_t v59 = v52;
        *(_DWORD *)uint64_t v52 = 136315138;
        v57[1] = v52 + 4;
        sub_2535485FC(v48);
        int v58 = v51;
        uint64_t v53 = MEMORY[0x25A268A80]();
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        uint64_t v66 = sub_253464DF8(v53, v55, &a10);
        sub_253B09E80();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v56 = v63;
        _os_log_impl(&dword_253460000, v63, (os_log_type_t)v58, "Override for toolsIDs: %s found", v59, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
        sub_253487D84(v45, v46);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_253487D84(v45, v46);
      }
      sub_253477128();
      v35();
    }
  }
  else
  {
    sub_253B08300();
    uint64_t v41 = sub_253B089D0();
    os_log_type_t v42 = sub_253B09D80();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)sub_2534AF384();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_253460000, v41, v42, "Unable to open example utterances override file", v43, 2u);
      sub_2534659B4();
    }

    sub_2534659CC();
    v44();
    sub_253B095A0();
  }
  sub_2534847C8();
}

void sub_2535531E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  sub_2534847F8();
  a22 = v29;
  a23 = v30;
  uint64_t v82 = v31;
  sub_253B089F0();
  sub_253465998();
  uint64_t v80 = v33;
  uint64_t v81 = v32;
  MEMORY[0x270FA5388](v32);
  sub_25348360C();
  sub_253B052F0();
  sub_253465998();
  uint64_t v77 = v35;
  uint64_t v78 = v34;
  MEMORY[0x270FA5388](v34);
  sub_2534B3294();
  uint64_t v36 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  uint64_t v37 = sub_25346CB4C(v36);
  MEMORY[0x270FA5388](v37);
  sub_2534727F8();
  sub_253578D44();
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)&v74 - v39;
  uint64_t v79 = sub_253B05390();
  sub_253465998();
  uint64_t v76 = v41;
  MEMORY[0x270FA5388](v42);
  sub_25346CB04();
  uint64_t v75 = v43;
  uint64_t v44 = sub_253462A5C(&qword_26B24A2F0);
  uint64_t v45 = sub_25346CB4C(v44);
  MEMORY[0x270FA5388](v45);
  sub_25349888C();
  uint64_t v46 = type metadata accessor for AssetInfo();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v47);
  sub_2534966B0();
  if (qword_26B248FC0 != -1) {
    swift_once();
  }
  long long v83 = xmmword_26B248FA8;
  a13 = 1;
  swift_bridgeObjectRetain();
  AssetsManager.info(for:locale:in:)(&a13, 0x53555F6E65, 0xE500000000000000, 0, 0, v28);
  swift_bridgeObjectRelease();
  sub_2534D8B48((uint64_t)v28, 1, v46);
  if (v53)
  {
    uint64_t v48 = &qword_26B24A2F0;
    uint64_t v49 = (uint64_t)v28;
  }
  else
  {
    uint64_t v50 = sub_253578AC4();
    sub_253573624(v50, v51);
    sub_2534D88A0(v27 + *(int *)(v46 + 20), v25, (uint64_t *)&unk_26B248C70);
    uint64_t v52 = v79;
    sub_2534D8B48(v25, 1, v79);
    if (v53)
    {
      sub_253472458(v25, (uint64_t *)&unk_26B248C70);
      uint64_t v54 = sub_2535792A4();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v54, v55, 1, v52);
    }
    else
    {
      *(void *)&long long v83 = 0xD000000000000019;
      *((void *)&v83 + 1) = 0x8000000253B0D100;
      sub_25353CDD4();
      v56();
      sub_25346C800();
      sub_253B05380();
      sub_253578E4C();
      sub_2534D97B4();
      v57();
      swift_bridgeObjectRelease();
      uint64_t v58 = v76;
      uint64_t v59 = *(void (**)(void))(v76 + 8);
      sub_2535787F4();
      sub_2534DA4BC();
      v59();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v40, 0, 1, v52);
      uint64_t v60 = sub_2535792A4();
      sub_2534D8B48(v60, v61, v52);
      if (!v62)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v75, v40, v52);
        uint64_t v68 = sub_253B053D0();
        if (v23)
        {
          uint64_t v70 = sub_25353CE6C();
          ((void (*)(uint64_t, uint64_t))v59)(v70, v73);
          sub_2535734F4(v27, (void (*)(void))type metadata accessor for AssetInfo);
        }
        else
        {
          uint64_t v71 = v68;
          unint64_t v72 = v69;
          sub_253B05200();
          sub_253578768();
          sub_253B051F0();
          sub_253573B48();
          sub_253B051E0();
          swift_release();
          sub_253487D84(v71, v72);
          sub_2534DA4BC();
          v59();
          sub_2535734F4(v27, (void (*)(void))type metadata accessor for AssetInfo);
          *uint64_t v82 = v83;
        }
        goto LABEL_15;
      }
    }
    sub_2535734F4(v27, (void (*)(void))type metadata accessor for AssetInfo);
    uint64_t v48 = (uint64_t *)&unk_26B248C70;
    uint64_t v49 = (uint64_t)v40;
  }
  sub_253472458(v49, v48);
  sub_253B08300();
  os_log_t v63 = sub_253B089D0();
  os_log_type_t v64 = sub_253B09D80();
  if (sub_2534AF330(v64))
  {
    uint64_t v65 = (_WORD *)sub_2534AF384();
    sub_2535788B0(v65);
    _os_log_impl(&dword_253460000, v63, v26, "Tool Retrieval Deny List not found", v24, 2u);
    sub_2534659B4();
  }

  sub_2534659CC();
  v66();
  uint64_t v67 = v82;
  *(void *)uint64_t v82 = 0;
  *((void *)v67 + 1) = 0;
LABEL_15:
  sub_253578DEC();
  sub_2534847C8();
}

void sub_253553728()
{
  sub_2534B3258();
  sub_253B08A10();
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534D9C00();
  sub_253B08BC0();
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25348360C();
  sub_253B07790();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25353CDD4();
  v4();
  char v5 = sub_253B07780();
  sub_253578EE0();
  sub_2534D97B4();
  v6();
  sub_253B08BA0();
  if (v5)
  {
    swift_getKeyPath();
    sub_253462A5C(&qword_269CDE838);
    sub_253578A1C();
    sub_253B08A20();
    sub_253465998();
    uint64_t v8 = v7;
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_253B34E30;
    uint64_t v10 = *(void (**)(void))(v8 + 104);
    sub_25357871C();
    v10();
    sub_25357871C();
    v10();
    sub_25357871C();
    v10();
    *uint64_t v0 = sub_253B04BE0(v9);
    sub_25353CDD4();
    v11();
    sub_253573548((unint64_t *)&qword_26B24A350, MEMORY[0x263F80100]);
    sub_253573548(&qword_269CDED48, MEMORY[0x263F7FDC8]);
    sub_253B08DA0();
    swift_release();
    sub_2534D9A08();
    v12();
    sub_2534659CC();
    v13();
  }
  sub_253465A14();
}

void sub_253553A3C()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  char v5 = v4;
  sub_253B09440();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_253483628(v7, v53);
  sub_253B08A30();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_253465A3C();
  uint64_t v11 = *v3;
  uint64_t v12 = v3[1];
  uint64_t v56 = v11;
  long long v62 = *v1;
  sub_25355C580();
  if ((v13 & 1) == 0)
  {
LABEL_12:
    *char v5 = 512;
    goto LABEL_31;
  }
  uint64_t v63 = MEMORY[0x263F8EE88];
  uint64_t v14 = sub_253B08AA0();
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    __int16 v30 = 0;
    uint64_t v31 = v56;
    goto LABEL_19;
  }
  uint64_t v54 = v12;
  uint64_t v55 = v5;
  unint64_t v16 = 0;
  uint64_t v17 = *(void (**)(uint64_t))(v9 + 16);
  unint64_t v18 = v14 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  char v5 = *(__int16 **)(v9 + 72);
  int v61 = *MEMORY[0x263F7FE38];
  int v58 = *MEMORY[0x263F7FE30];
  int v57 = *MEMORY[0x263F7FE40];
  uint64_t v60 = v15 - 1;
  uint64_t v19 = v14;
  uint64_t v59 = v5;
  while (1)
  {
    uint64_t v20 = sub_2534D9B10();
    v17(v20);
    uint64_t v21 = sub_253578DF8();
    int v23 = v22(v21);
    if (v23 == v61)
    {
      uint64_t v24 = sub_2535784B8();
      v25(v24);
      sub_2535791D8();
      sub_2534D8E14();
      v26();
      uint64_t v27 = sub_253B09400();
      sub_2539E09A0((uint64_t)&v62, v27, v28);
      swift_bridgeObjectRelease();
      char v5 = v59;
      goto LABEL_9;
    }
    if (v23 == v58)
    {
      uint64_t v32 = sub_2535784B8();
      v33(v32);
      goto LABEL_17;
    }
    if (v23 == v57) {
      break;
    }
    sub_253578DF8();
LABEL_9:
    sub_2534659CC();
    v29();
    if (v60 == v16)
    {
      swift_bridgeObjectRelease();
      __int16 v30 = 0;
      goto LABEL_18;
    }
    ++v16;
    v18 += (unint64_t)v5;
    if (v16 >= *(void *)(v19 + 16))
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  uint64_t v34 = sub_2535784B8();
  v35(v34);
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int16 v30 = 256;
LABEL_18:
  uint64_t v31 = v56;
  uint64_t v12 = v54;
  char v5 = v55;
LABEL_19:
  uint64_t v36 = sub_253B08AF0();
  if (!v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int16 v40 = 0;
    goto LABEL_29;
  }
  sub_253B0167C(v36, v37, v31);
  if (v38)
  {
    swift_bridgeObjectRelease();
    __int16 v39 = *(void *)(v63 + 16) != 0;
    swift_bridgeObjectRelease();
    __int16 v40 = 2 * v39;
    goto LABEL_29;
  }
  uint64_t v41 = sub_2534D9778();
  sub_253B0167C(v41, v42, v12);
  char v44 = v43;
  swift_bridgeObjectRelease();
  if (v44)
  {
    swift_bridgeObjectRelease();
    __int16 v40 = 1;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = sub_25346BBAC(v45, v31);
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v46 + 16);
  swift_release();
  if (v47)
  {
    swift_bridgeObjectRelease();
    __int16 v40 = 2;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_2534D9AA0();
  uint64_t v50 = sub_25346BBAC(v48, v49);
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)(v50 + 16);
  swift_release();
  if (v51)
  {
    __int16 v40 = 3;
LABEL_29:
    __int16 v52 = v30 | v40;
  }
  else
  {
    __int16 v52 = 512;
  }
  *char v5 = v52;
LABEL_31:
  sub_2534847C8();
}

void sub_253553E74()
{
  sub_2534847F8();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v40 = v7;
  sub_253B08B30();
  sub_253465998();
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  uint64_t v41 = *v4;
  uint64_t v38 = v4[1];
  uint64_t v39 = *v6;
  sub_253472068((void *)(v2 + 144), *(void *)(v2 + 168));
  sub_253462A5C(&qword_269CDE838);
  sub_253578A1C();
  sub_253B08A20();
  sub_253465998();
  uint64_t v10 = sub_253578CC0();
  *(_OWORD *)(v10 + 16) = xmmword_253B22680;
  uint64_t v11 = (uint64_t *)((char *)v4 + v10);
  *uint64_t v11 = sub_253B09400();
  v11[1] = v12;
  sub_25357871C();
  v13();
  sub_25347719C();
  v14();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    swift_retain();
    sub_25354084C(v41);
    uint64_t v15 = sub_253579264();
    uint64_t v17 = sub_253548340(v15, v16, v41, v38);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v44 = MEMORY[0x263F8EE78];
      sub_2539E6C84();
      uint64_t v19 = v37 + 16;
      sub_2535786F4();
      uint64_t v21 = v17 + v20;
      uint64_t v42 = *(void *)(v37 + 72);
      char v43 = v22;
      do
      {
        uint64_t v23 = sub_253578828();
        uint64_t v24 = v19;
        v43(v23);
        uint64_t v25 = sub_253B08AF0();
        uint64_t v27 = v26;
        sub_2534659CC();
        v28();
        uint64_t v29 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253579380();
          sub_2539E6C84();
          uint64_t v29 = v44;
        }
        unint64_t v31 = *(void *)(v29 + 16);
        unint64_t v30 = *(void *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          sub_253526BBC(v30);
          sub_2539E6C84();
          uint64_t v29 = v44;
        }
        *(void *)(v29 + 16) = v31 + 1;
        uint64_t v32 = v29 + 16 * v31;
        *(void *)(v32 + 32) = v25;
        *(void *)(v32 + 40) = v27;
        v21 += v42;
        --v18;
        uint64_t v19 = v24;
      }
      while (v18);
    }
    swift_bridgeObjectRelease();
    if (v39)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = swift_bridgeObjectRetain();
      uint64_t v34 = sub_25353CEDC(v33);
      sub_25346BBAC(v34, v39);
      swift_bridgeObjectRelease();
    }
    if (v40)
    {
      uint64_t v35 = sub_253B09400();
      sub_253B0167C(v35, v36, v40);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2534847C8();
}

void ToolboxDelegate.baseRelativeStoragePath()()
{
  sub_2534B3258();
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  uint64_t v4 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x270FA5388](v4);
  sub_2534D9B74();
  sub_253B052F0();
  sub_2534727C4();
  uint64_t v6 = v5;
  uint64_t v33 = v5;
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25349888C();
  sub_253B05390();
  sub_2534727C4();
  MEMORY[0x270FA5388](v10);
  sub_2534B340C();
  MEMORY[0x270FA5388](v11);
  sub_2534B3318();
  sub_2534B324C();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  sub_253579410(v13, v14, v15, v16, v17, v18, v19, v20, v28);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 1, 1, v21);
  uint64_t v22 = *(void (**)(void))(v6 + 104);
  sub_2535789A8();
  v22();
  sub_253B05370();
  unint64_t v30 = *(void (**)(uint64_t))(v31 + 16);
  v30(v32);
  sub_253B06CD0();
  sub_253B06CE0();
  sub_25346CAF4();
  sub_2534659CC();
  v23();
  sub_2535789A8();
  v22();
  sub_25346C800();
  sub_253B05380();
  uint64_t v29 = *(void (**)(void))(v33 + 8);
  sub_2534D973C();
  sub_253477128();
  v24();
  swift_bridgeObjectRelease();
  sub_2534659CC();
  v25();
  ((void (*)(uint64_t, uint64_t))v30)(v32, v31);
  sub_2535734F4(v1, (void (*)(void))type metadata accessor for ToolboxVersion);
  sub_253B0A480();
  sub_2535789A8();
  v22();
  sub_253B05380();
  sub_2534D973C();
  sub_25351C3E8();
  v29();
  swift_bridgeObjectRelease();
  sub_253578828();
  sub_2534659CC();
  v26();
  sub_253579204();
  sub_25353CDD4();
  v22();
  sub_253B05380();
  sub_2534D973C();
  sub_25351C3E8();
  v29();
  swift_bridgeObjectRelease();
  sub_2534D9724();
  sub_2534659CC();
  v27();
  sub_253465A14();
}

uint64_t sub_253554624(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, void *a5)
{
  uint64_t v124 = a5;
  uint64_t v126 = a1;
  uint64_t v9 = sub_253B089F0();
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v118 = (char *)v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253B08980();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v115 = v11;
  uint64_t v116 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  unint64_t v113 = (char *)v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v107[3] = (char *)v107 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v107[1] = (char *)v107 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v108 = (char *)v107 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v117 = (char *)v107 - v21;
  uint64_t v22 = sub_253462A5C(&qword_269CDED28);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v123 = (uint64_t)v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_253B08940();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v114 = (char *)v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v107[2] = (char *)v107 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v109 = (char *)v107 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v110 = (char *)v107 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v119 = (char *)v107 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)v107 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v40 = (char *)v107 - v39;
  LODWORD(v121) = *a4;
  sub_253B08960();
  sub_253B08910();
  uint64_t v120 = a3;
  uint64_t v41 = sub_253B08960();
  os_signpost_type_t v42 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    char v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v122 = v25;
    uint64_t v44 = v24;
    uint64_t v45 = v43;
    *(_WORD *)char v43 = 0;
    os_signpost_id_t v46 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v41, v42, v46, "ToolboxEmbeddingModel:embed", "", v45, 2u);
    uint64_t v47 = v45;
    uint64_t v24 = v44;
    uint64_t v25 = v122;
    MEMORY[0x25A269E60](v47, -1, -1);
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v38, v40, v24);
  sub_253B089B0();
  swift_allocObject();
  uint64_t v48 = sub_253B089A0();
  uint64_t v51 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v50 = v25 + 8;
  uint64_t v49 = v51;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v51)(v40, v24);
  if (v121)
  {
    uint64_t v121 = v49;
    swift_getKeyPath();
    sub_253B05960();
    swift_release();
    sub_253B06CB0();
    if (qword_269CDA7D8 != -1) {
      swift_once();
    }
    uint64_t v53 = sub_2535493D8(0, 0, 0, (void (*)(void))type metadata accessor for SentencePieceCachableModel);
    if (v5)
    {
      uint64_t v126 = v24;
      sub_253B08360();
      id v54 = v5;
      id v55 = v5;
      uint64_t v56 = sub_253B089D0();
      os_log_type_t v57 = sub_253B09D80();
      if (os_log_type_enabled(v56, v57))
      {
        int v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = (void *)swift_slowAlloc();
        v107[0] = v48;
        *(_DWORD *)int v58 = 138412290;
        id v60 = v5;
        uint64_t v61 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v125 = v61;
        sub_253B09E80();
        *uint64_t v59 = v61;

        _os_log_impl(&dword_253460000, v56, v57, "Sentence piece model missing. Embedding failed. Error: %@", v58, 0xCu);
        sub_253462A5C(&qword_269CDBEA8);
        swift_arrayDestroy();
        MEMORY[0x25A269E60](v59, -1, -1);
        MEMORY[0x25A269E60](v58, -1, -1);
      }
      else
      {
      }
      uint64_t v68 = v121;
      uint64_t v70 = v113;
      unint64_t v69 = v114;

      (*(void (**)(char *, uint64_t))(v111 + 8))(v118, v112);
      sub_2535301B4();
      swift_allocError();
      unsigned char *v71 = 2;
      swift_willThrow();

      sub_253472458(v123, &qword_269CDED28);
      unint64_t v72 = sub_253B08960();
      sub_253B08990();
      os_signpost_type_t v73 = sub_253B09DA0();
      if (sub_253B09DE0())
      {
        swift_retain();
        sub_253B089C0();
        swift_release();
        uint64_t v75 = v115;
        uint64_t v74 = v116;
        if ((*(unsigned int (**)(char *, uint64_t))(v116 + 88))(v70, v115) == *MEMORY[0x263F90238])
        {
          uint64_t v76 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v74 + 8))(v70, v75);
          uint64_t v76 = "";
        }
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v85 = 0;
        uint64_t v86 = v114;
        os_signpost_id_t v87 = sub_253B08920();
        _os_signpost_emit_with_name_impl(&dword_253460000, v72, v73, v87, "ToolboxEmbeddingModel:embed", v76, v85, 2u);
        MEMORY[0x25A269E60](v85, -1, -1);
        unint64_t v69 = v86;
        uint64_t v68 = v121;
      }

      v68(v69, v126);
      return swift_release();
    }
    uint64_t v67 = v53;
    swift_retain();
    uint64_t v88 = sub_2535493D8(0, 2000000000000000000, 0, (void (*)(void))type metadata accessor for SbertCachableModel);
    uint64_t v122 = v50;
    swift_getKeyPath();
    sub_253B05960();
    uint64_t result = swift_release();
    if (a2)
    {
      uint64_t v63 = v24;
      v107[0] = v48;
      if (a2 >= 1)
      {
        int64_t v89 = *(void *)(v126 + 16);
        if (v89)
        {
          int64_t v90 = 0;
          uint64_t v91 = v125;
          do
          {
            uint64_t v92 = (void *)MEMORY[0x25A269750](result);
            sub_253559864(v126, v90, a2, v123, v67, 50, v88, v91, v124);
            if (__OFADD__(v90, a2)) {
              int64_t v90 = ((v90 + a2) >> 63) ^ 0x8000000000000000;
            }
            else {
              v90 += a2;
            }
          }
          while (v90 < v89);
        }
      }
      swift_release();
      swift_release_n();
      sub_253472458(v123, &qword_269CDED28);
      uint64_t v49 = v121;
      long long v62 = v117;
LABEL_39:
      uint64_t v93 = sub_253B08960();
      uint64_t v94 = v119;
      sub_253B08990();
      os_signpost_type_t v95 = sub_253B09DA0();
      if (sub_253B09DE0())
      {
        uint64_t v96 = v49;
        swift_retain();
        sub_253B089C0();
        swift_release();
        uint64_t v98 = v115;
        uint64_t v97 = v116;
        if ((*(unsigned int (**)(char *, uint64_t))(v116 + 88))(v62, v115) == *MEMORY[0x263F90238])
        {
          uint64_t v99 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v97 + 8))(v62, v98);
          uint64_t v99 = "";
        }
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v100 = 0;
        unint64_t v101 = v119;
        os_signpost_id_t v102 = sub_253B08920();
        _os_signpost_emit_with_name_impl(&dword_253460000, v93, v95, v102, "ToolboxEmbeddingModel:embed", v99, v100, 2u);
        MEMORY[0x25A269E60](v100, -1, -1);
        uint64_t v49 = v96;
        uint64_t v94 = v101;
      }

      v49(v94, v63);
      return swift_release();
    }
  }
  else
  {
    long long v62 = v117;
    if (a2)
    {
      uint64_t v122 = v50;
      uint64_t v63 = v24;
      if (a2 >= 1)
      {
        int64_t v64 = *(void *)(v126 + 16);
        if (v64)
        {
          int64_t v65 = 0;
          while (1)
          {
            uint64_t v66 = (void *)MEMORY[0x25A269750](result);
            sub_2535575A4(v126, v65, a2, 128, v124);
            if (v5) {
              break;
            }
            if (__OFADD__(v65, a2)) {
              int64_t v65 = ((v65 + a2) >> 63) ^ 0x8000000000000000;
            }
            else {
              v65 += a2;
            }
            if (v65 >= v64) {
              goto LABEL_39;
            }
          }
          uint64_t v77 = sub_253B08960();
          uint64_t v78 = v110;
          sub_253B08990();
          os_signpost_type_t v79 = sub_253B09DA0();
          if (sub_253B09DE0())
          {
            uint64_t v80 = v49;
            swift_retain();
            uint64_t v81 = v108;
            sub_253B089C0();
            swift_release();
            uint64_t v83 = v115;
            uint64_t v82 = v116;
            if ((*(unsigned int (**)(char *, uint64_t))(v116 + 88))(v81, v115) == *MEMORY[0x263F90238])
            {
              uint64_t v84 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
              uint64_t v84 = "";
            }
            uint64_t v103 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v103 = 0;
            uint64_t v104 = v110;
            os_signpost_id_t v105 = sub_253B08920();
            _os_signpost_emit_with_name_impl(&dword_253460000, v77, v79, v105, "ToolboxEmbeddingModel:embed", v84, v103, 2u);
            uint64_t v106 = v103;
            uint64_t v78 = v104;
            MEMORY[0x25A269E60](v106, -1, -1);
            uint64_t v49 = v80;
          }

          v49(v78, v63);
          return swift_release();
        }
      }
      goto LABEL_39;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_253555564(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v136 = a6;
  uint64_t v137 = a1;
  uint64_t v139 = a4;
  uint64_t v16 = a9;
  uint64_t v17 = sub_253B089F0();
  uint64_t v119 = *(void *)(v17 - 8);
  uint64_t v120 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v125 = (uint64_t)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_253B08980();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v123 = v19;
  uint64_t v124 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v121 = (char *)v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v114[3] = (char *)v114 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v114[1] = (char *)v114 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v115 = (char *)v114 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v118 = (char *)v114 - v29;
  uint64_t v30 = sub_253462A5C(&qword_269CDED28);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v131 = (uint64_t)v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_253B08940();
  uint64_t v135 = *(void *)(v133 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v133);
  uint64_t v122 = (char *)v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  v114[2] = (char *)v114 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v116 = (char *)v114 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v117 = (char *)v114 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v126 = (char *)v114 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)v114 - v43;
  MEMORY[0x270FA5388](v42);
  os_signpost_id_t v46 = (char *)v114 - v45;
  LODWORD(v130) = *v139;
  swift_retain_n();
  uint64_t v132 = a5;
  swift_bridgeObjectRetain_n();
  uint64_t v134 = a7;
  swift_bridgeObjectRetain_n();
  uint64_t v139 = a8;
  swift_retain_n();
  sub_253B08960();
  sub_253B08910();
  uint64_t v127 = a3;
  uint64_t v47 = sub_253B08960();
  os_signpost_type_t v48 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    os_signpost_id_t v50 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v47, v48, v50, "ToolboxEmbeddingModel:embed", "", v49, 2u);
    uint64_t v51 = v49;
    uint64_t v16 = a9;
    MEMORY[0x25A269E60](v51, -1, -1);
  }

  uint64_t v52 = v135;
  uint64_t v53 = v133;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v44, v46, v133);
  sub_253B089B0();
  swift_allocObject();
  uint64_t v129 = sub_253B089A0();
  id v54 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
  uint64_t result = v54(v46, v53);
  uint64_t v135 = v52 + 8;
  uint64_t v128 = (void (*)(char *, uint64_t))v54;
  if ((v130 & 1) == 0)
  {
    uint64_t v65 = v134;
    if (a2)
    {
      if (a2 >= 1)
      {
        int64_t v66 = *(void *)(v137 + 16);
        uint64_t v67 = v132;
        if (v66)
        {
          int64_t v68 = 0;
          while (1)
          {
            unint64_t v69 = (void *)MEMORY[0x25A269750](result);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v70 = v139;
            swift_retain();
            swift_retain();
            sub_253557CF8(v137, v68, a2, 128, v67, v136, v65, v70, v16);
            if (v10) {
              break;
            }
            if (__OFADD__(v68, a2)) {
              int64_t v68 = ((v68 + a2) >> 63) ^ 0x8000000000000000;
            }
            else {
              v68 += a2;
            }
            if (v68 >= v66) {
              goto LABEL_40;
            }
          }
          os_signpost_type_t v79 = sub_253B08960();
          uint64_t v80 = v117;
          sub_253B08990();
          os_signpost_type_t v81 = sub_253B09DA0();
          if (sub_253B09DE0())
          {
            swift_retain();
            uint64_t v82 = v115;
            sub_253B089C0();
            swift_release();
            uint64_t v84 = v123;
            uint64_t v83 = v124;
            if ((*(unsigned int (**)(char *, uint64_t))(v124 + 88))(v82, v123) == *MEMORY[0x263F90238])
            {
              uint64_t v85 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v84);
              uint64_t v85 = "";
            }
            uint64_t v109 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v109 = 0;
            uint64_t v110 = v117;
            os_signpost_id_t v111 = sub_253B08920();
            _os_signpost_emit_with_name_impl(&dword_253460000, v79, v81, v111, "ToolboxEmbeddingModel:embed", v85, v109, 2u);
            uint64_t v112 = v109;
            uint64_t v80 = v110;
            MEMORY[0x25A269E60](v112, -1, -1);
          }

          uint64_t v88 = v80;
          goto LABEL_49;
        }
      }
      goto LABEL_40;
    }
    __break(1u);
LABEL_51:
    __break(1u);
    return result;
  }
  swift_getKeyPath();
  sub_253B05960();
  swift_release();
  sub_253B06CB0();
  if (qword_269CDA7D8 != -1) {
    swift_once();
  }
  uint64_t v56 = sub_2535493D8(0, 0, 0, (void (*)(void))type metadata accessor for SentencePieceCachableModel);
  if (v9)
  {
    sub_253B08360();
    id v57 = v9;
    id v58 = v9;
    uint64_t v59 = sub_253B089D0();
    os_log_type_t v60 = sub_253B09D80();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      long long v62 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412290;
      id v63 = v9;
      uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v138 = v64;
      sub_253B09E80();
      *long long v62 = v64;

      _os_log_impl(&dword_253460000, v59, v60, "Sentence piece model missing. Embedding failed. Error: %@", v61, 0xCu);
      sub_253462A5C(&qword_269CDBEA8);
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v62, -1, -1);
      MEMORY[0x25A269E60](v61, -1, -1);
    }
    else
    {
    }
    os_signpost_type_t v73 = v121;
    unint64_t v72 = v122;

    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v125, v120);
    sub_2535301B4();
    swift_allocError();
    *uint64_t v74 = 2;
    swift_willThrow();

    sub_253472458(v131, &qword_269CDED28);
    uint64_t v75 = sub_253B08960();
    sub_253B08990();
    LODWORD(v137) = sub_253B09DA0();
    if (sub_253B09DE0())
    {
      swift_retain();
      sub_253B089C0();
      swift_release();
      uint64_t v77 = v123;
      uint64_t v76 = v124;
      if ((*(unsigned int (**)(char *, uint64_t))(v124 + 88))(v73, v123) == *MEMORY[0x263F90238])
      {
        uint64_t v78 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v73, v77);
        uint64_t v78 = "";
      }
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v86 = 0;
      unint64_t v72 = v122;
      os_signpost_id_t v87 = sub_253B08920();
      _os_signpost_emit_with_name_impl(&dword_253460000, v75, (os_signpost_type_t)v137, v87, "ToolboxEmbeddingModel:embed", v78, v86, 2u);
      MEMORY[0x25A269E60](v86, -1, -1);
    }

    uint64_t v88 = v72;
LABEL_49:
    v128(v88, v133);
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return swift_release_n();
  }
  uint64_t v71 = v56;
  swift_retain();
  uint64_t v89 = sub_2535493D8(0, 2000000000000000000, 0, (void (*)(void))type metadata accessor for SbertCachableModel);
  swift_getKeyPath();
  sub_253B05960();
  uint64_t result = swift_release();
  if (!a2) {
    goto LABEL_51;
  }
  v114[0] = v16;
  uint64_t v130 = v71;
  if (a2 >= 1)
  {
    int64_t v90 = *(void *)(v137 + 16);
    if (v90)
    {
      int64_t v91 = 0;
      uint64_t v125 = v138;
      uint64_t v92 = v134;
      do
      {
        uint64_t v93 = (void *)MEMORY[0x25A269750](result);
        uint64_t v94 = v132;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v95 = v89;
        uint64_t v96 = v139;
        swift_retain();
        uint64_t v97 = swift_retain();
        unint64_t v113 = v96;
        uint64_t v89 = v95;
        sub_253559F90(v137, v91, a2, v131, v130, 50, v95, v125, v94, v136, v92, v113, v97);
        if (__OFADD__(v91, a2)) {
          int64_t v91 = ((v91 + a2) >> 63) ^ 0x8000000000000000;
        }
        else {
          v91 += a2;
        }
      }
      while (v91 < v90);
    }
  }
  swift_release();
  swift_release_n();
  sub_253472458(v131, &qword_269CDED28);
LABEL_40:
  uint64_t v98 = sub_253B08960();
  uint64_t v99 = v126;
  sub_253B08990();
  os_signpost_type_t v100 = sub_253B09DA0();
  if (sub_253B09DE0())
  {
    swift_retain();
    unint64_t v101 = v118;
    sub_253B089C0();
    swift_release();
    uint64_t v103 = v123;
    uint64_t v102 = v124;
    if ((*(unsigned int (**)(char *, uint64_t))(v124 + 88))(v101, v123) == *MEMORY[0x263F90238])
    {
      uint64_t v104 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v103);
      uint64_t v104 = "";
    }
    os_signpost_id_t v105 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_signpost_id_t v105 = 0;
    uint64_t v106 = v126;
    os_signpost_id_t v107 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v98, v100, v107, "ToolboxEmbeddingModel:embed", v104, v105, 2u);
    uint64_t v108 = v105;
    uint64_t v99 = v106;
    MEMORY[0x25A269E60](v108, -1, -1);
  }

  v128(v99, v133);
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t sub_253556584(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, NSObject *a6, uint64_t a7, NSObject *a8, unsigned __int8 *a9, uint64_t a10, NSObject *a11)
{
  uint64_t v152 = a4;
  uint64_t v140 = a2;
  uint64_t v145 = a1;
  uint64_t v126 = sub_253B089F0();
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v135 = (char *)v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_253B08980();
  uint64_t v132 = *(void *)(v131 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v131);
  uint64_t v127 = (char *)v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v133 = (char *)v121 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v121[0] = (char *)v121 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v122 = (char *)v121 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v124 = (char *)v121 - v25;
  uint64_t v26 = sub_253462A5C(&qword_269CDED28);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v141 = (uint64_t)v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_253B08940();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v142 = v28;
  uint64_t v143 = v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v130 = (char *)v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  v121[1] = (char *)v121 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v134 = (char *)v121 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v123 = (char *)v121 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v128 = (char *)v121 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v42 = (char *)v121 - v41;
  MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)v121 - v43;
  LODWORD(v139) = *v152;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25354084C(a7);
  swift_retain();
  uint64_t v147 = a5;
  swift_bridgeObjectRetain();
  uint64_t v146 = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v148 = a7;
  uint64_t v150 = a8;
  sub_25354084C(a7);
  uint64_t v152 = a9;
  swift_bridgeObjectRetain();
  uint64_t v149 = a10;
  swift_retain();
  sub_253B08960();
  sub_253B08910();
  uint64_t v136 = a3;
  uint64_t v45 = sub_253B08960();
  os_signpost_type_t v46 = sub_253B09DB0();
  if (sub_253B09DE0())
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    os_signpost_id_t v48 = sub_253B08920();
    _os_signpost_emit_with_name_impl(&dword_253460000, v45, v46, v48, "ToolboxEmbeddingModel:embed", "", v47, 2u);
    MEMORY[0x25A269E60](v47, -1, -1);
  }
  unint64_t v144 = a11;

  uint64_t v49 = v142;
  uint64_t v50 = v143;
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v42, v44, v142);
  sub_253B089B0();
  swift_allocObject();
  uint64_t v51 = sub_253B089A0();
  id v54 = *(void (**)(void, void))(v50 + 8);
  uint64_t v53 = v50 + 8;
  uint64_t v52 = v54;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v54)(v44, v49);
  uint64_t v137 = v51;
  if (v139)
  {
    swift_getKeyPath();
    sub_253B05960();
    swift_release();
    sub_253B06CB0();
    if (qword_269CDA7D8 != -1) {
      swift_once();
    }
    uint64_t v56 = v138;
    uint64_t v57 = sub_2535493D8(0, 0, 0, (void (*)(void))type metadata accessor for SentencePieceCachableModel);
    if (v56)
    {
      sub_253B08360();
      id v58 = v56;
      id v59 = v56;
      os_log_type_t v60 = sub_253B089D0();
      os_log_type_t v61 = sub_253B09D80();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v129 = v52;
        long long v62 = (uint8_t *)swift_slowAlloc();
        id v63 = (void *)swift_slowAlloc();
        *(_DWORD *)long long v62 = 138412290;
        id v64 = v56;
        uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v151 = v65;
        uint64_t v52 = v129;
        sub_253B09E80();
        void *v63 = v65;

        _os_log_impl(&dword_253460000, v60, v61, "Sentence piece model missing. Embedding failed. Error: %@", v62, 0xCu);
        sub_253462A5C(&qword_269CDBEA8);
        swift_arrayDestroy();
        MEMORY[0x25A269E60](v63, -1, -1);
        MEMORY[0x25A269E60](v62, -1, -1);
      }
      else
      {
      }
      int64_t v66 = v127;

      (*(void (**)(char *, uint64_t))(v125 + 8))(v135, v126);
      sub_2535301B4();
      swift_allocError();
      unsigned char *v79 = 2;
      swift_willThrow();

      sub_253472458(v141, &qword_269CDED28);
      uint64_t v80 = sub_253B08960();
      os_signpost_type_t v81 = v130;
      sub_253B08990();
      os_signpost_type_t v82 = sub_253B09DA0();
      if (sub_253B09DE0())
      {
        swift_retain();
        sub_253B089C0();
        swift_release();
        uint64_t v83 = v132;
        uint64_t v84 = v131;
        if ((*(unsigned int (**)(char *, uint64_t))(v132 + 88))(v66, v131) == *MEMORY[0x263F90238])
        {
          uint64_t v85 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v83 + 8))(v66, v84);
          uint64_t v85 = "";
        }
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v93 = 0;
        uint64_t v94 = v130;
        os_signpost_id_t v117 = sub_253B08920();
        uint64_t v118 = v85;
        os_signpost_type_t v81 = v94;
        _os_signpost_emit_with_name_impl(&dword_253460000, v80, v82, v117, "ToolboxEmbeddingModel:embed", v118, v93, 2u);
        MEMORY[0x25A269E60](v93, -1, -1);
      }

      v52(v81, v142);
LABEL_48:
      swift_release();
      swift_bridgeObjectRelease();
LABEL_49:
      swift_release();
      uint64_t v119 = (uint64_t)v148;
      sub_25353847C((uint64_t)v148);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_25353847C(v119);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_25353847C(v119);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t v78 = v57;
    swift_retain();
    uint64_t v95 = sub_2535493D8(0, 2000000000000000000, 0, (void (*)(void))type metadata accessor for SbertCachableModel);
    swift_getKeyPath();
    sub_253B05960();
    uint64_t result = swift_release();
    if (v140)
    {
      uint64_t v129 = v52;
      uint64_t v143 = v53;
      uint64_t v139 = v95;
      if (v140 >= 1)
      {
        int64_t v96 = *(void *)(v145 + 16);
        if (v96)
        {
          int64_t v97 = 0;
          uint64_t v138 = (void *)v151;
          uint64_t v99 = v146;
          uint64_t v98 = v147;
          os_signpost_type_t v100 = v148;
          do
          {
            unint64_t v101 = (void *)MEMORY[0x25A269750](result);
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v102 = v150;
            sub_25354084C((uint64_t)v100);
            uint64_t v103 = (uint64_t)v152;
            swift_bridgeObjectRetain();
            uint64_t v104 = swift_retain();
            uint64_t v120 = v102;
            uint64_t v105 = v140;
            sub_25355A76C(v145, v97, v140, v141, v78, 50, v139, (uint64_t)v138, v98, v99, v100, v120, v103, v104, v144);
            if (__OFADD__(v97, v105)) {
              int64_t v97 = ((v97 + v105) >> 63) ^ 0x8000000000000000;
            }
            else {
              v97 += v105;
            }
          }
          while (v97 < v96);
        }
      }
      swift_release();
      swift_release_n();
      sub_253472458(v141, &qword_269CDED28);
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v67 = (uint64_t)v138;
    uint64_t v68 = v140;
    if (v140)
    {
      uint64_t v143 = v53;
      uint64_t v129 = v52;
      if (v140 >= 1)
      {
        int64_t v69 = *(void *)(v145 + 16);
        if (v69)
        {
          int64_t v70 = 0;
          uint64_t v71 = v146;
          uint64_t v72 = v147;
          os_signpost_type_t v73 = v148;
          uint64_t v74 = v150;
          while (1)
          {
            uint64_t v75 = (void *)MEMORY[0x25A269750](result);
            swift_bridgeObjectRetain();
            swift_retain();
            sub_25354084C((uint64_t)v73);
            uint64_t v76 = (uint64_t)v152;
            swift_bridgeObjectRetain();
            uint64_t v77 = swift_retain();
            sub_2535584C8(v145, v70, v68, 128, v72, v71, v73, v74, v76, v77, v144);
            if (v67) {
              break;
            }
            if (__OFADD__(v70, v68)) {
              int64_t v70 = ((v70 + v68) >> 63) ^ 0x8000000000000000;
            }
            else {
              v70 += v68;
            }
            if (v70 >= v69) {
              goto LABEL_38;
            }
          }
          uint64_t v86 = sub_253B08960();
          os_signpost_id_t v87 = v123;
          sub_253B08990();
          os_signpost_type_t v88 = sub_253B09DA0();
          if (sub_253B09DE0())
          {
            swift_retain();
            uint64_t v89 = v122;
            sub_253B089C0();
            swift_release();
            uint64_t v90 = v132;
            uint64_t v91 = v131;
            if ((*(unsigned int (**)(char *, uint64_t))(v132 + 88))(v89, v131) == *MEMORY[0x263F90238])
            {
              uint64_t v92 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v91);
              uint64_t v92 = "";
            }
            uint64_t v115 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v115 = 0;
            os_signpost_id_t v116 = sub_253B08920();
            _os_signpost_emit_with_name_impl(&dword_253460000, v86, v88, v116, "ToolboxEmbeddingModel:embed", v92, v115, 2u);
            MEMORY[0x25A269E60](v115, -1, -1);
          }

          v129(v87, v142);
          goto LABEL_48;
        }
      }
LABEL_38:
      uint64_t v106 = sub_253B08960();
      os_signpost_id_t v107 = v128;
      sub_253B08990();
      os_signpost_type_t v108 = sub_253B09DA0();
      if (sub_253B09DE0())
      {
        swift_retain();
        uint64_t v109 = v124;
        sub_253B089C0();
        swift_release();
        uint64_t v110 = v132;
        uint64_t v111 = v131;
        if ((*(unsigned int (**)(char *, uint64_t))(v132 + 88))(v109, v131) == *MEMORY[0x263F90238])
        {
          uint64_t v112 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v111);
          uint64_t v112 = "";
        }
        unint64_t v113 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v113 = 0;
        os_signpost_id_t v114 = sub_253B08920();
        _os_signpost_emit_with_name_impl(&dword_253460000, v106, v108, v114, "ToolboxEmbeddingModel:embed", v112, v113, 2u);
        MEMORY[0x25A269E60](v113, -1, -1);
      }

      v129(v107, v142);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2535575A4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (__OFADD__(a2, a3))
  {
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  unint64_t v5 = a2;
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    uint64_t v6 = *(short float **)(a1 + 16);
  }
  else {
    uint64_t v6 = (short float *)(a2 + a3);
  }
  if ((uint64_t)v6 < a2) {
    goto LABEL_120;
  }
  if (a2 < 0)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    sub_253B0A260();
    __break(1u);
    JUMPOUT(0x253557CD8);
  }
  uint64_t v7 = (short float *)MEMORY[0x263F8EE78];
  unint64_t v8 = MEMORY[0x263F8EE78];
  if (v6 == (short float *)a2) {
    goto LABEL_8;
  }
  uint64_t v74 = a5;
  uint64_t v78 = a1 + 32;
  swift_bridgeObjectRetain();
  int64_t v10 = v5;
  unint64_t v8 = (unint64_t)v7;
  uint64_t v75 = v6;
  unint64_t v76 = v5;
  while (1)
  {
    if (v10 >= (uint64_t)v6) {
      goto LABEL_116;
    }
    int64_t v79 = v10;
    uint64_t v80 = v8;
    uint64_t v12 = *(void *)(v78 + 16 * v10);
    unint64_t v11 = *(void *)(v78 + 16 * v10 + 8);
    uint64_t v13 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v87 = v12;
    unint64_t v88 = v11;
    uint64_t v89 = 0;
    uint64_t v90 = v13;
    swift_bridgeObjectRetain_n();
    uint64_t v14 = sub_253B09890();
    if (v15) {
      break;
    }
    uint64_t v16 = (uint64_t)v7;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_253467C9C(a4, v16);
    unint64_t v59 = (v57 >> 1) - v56;
    if (__OFSUB__(v57 >> 1, v56)) {
      goto LABEL_117;
    }
    BOOL v51 = __OFSUB__(a4, v59);
    uint64_t v60 = a4 - v59;
    if (v51)
    {
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    uint64_t v61 = v54;
    uint64_t v62 = v55;
    uint64_t v63 = v56;
    unint64_t v64 = v57;
    v58.n128_u64[0] = 0;
    uint64_t v65 = sub_253549268(v60 & ~(v60 >> 63), v58);
    sub_253558CC0(v61, v62, v63, v64, v65);
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v68 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253523554(0, *(void *)(v80 + 16) + 1, 1, v80);
      uint64_t v68 = v72;
    }
    unint64_t v70 = *(void *)(v68 + 16);
    unint64_t v69 = *(void *)(v68 + 24);
    unint64_t v71 = v68;
    if (v70 >= v69 >> 1)
    {
      sub_253523554(v69 > 1, v70 + 1, 1, v68);
      unint64_t v71 = v73;
    }
    *(void *)(v71 + 16) = v70 + 1;
    unint64_t v8 = v71;
    *(void *)(v71 + 8 * v70 + 32) = v67;
    swift_unknownObjectRelease();
    int64_t v10 = v79 + 1;
    uint64_t v6 = v75;
    unint64_t v5 = v76;
    uint64_t v7 = (short float *)MEMORY[0x263F8EE78];
    if ((short float *)(v79 + 1) == v75) {
      goto LABEL_110;
    }
  }
  unint64_t v5 = v14;
  unint64_t v8 = v15;
  uint64_t v16 = (uint64_t)v7;
  while (1)
  {
    uint64_t v81 = v16;
    int64_t v17 = sub_253573778(v5, v8);
    if (v17) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = v7;
LABEL_80:
    uint64_t v44 = *((void *)v6 + 2);
    uint64_t v16 = v81;
    uint64_t v45 = *(void *)(v81 + 16);
    if (__OFADD__(v45, v44))
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v45 + v44 > *(void *)(v81 + 24) >> 1)
    {
      sub_253523590();
      uint64_t v16 = v46;
    }
    uint64_t v7 = (short float *)MEMORY[0x263F8EE78];
    if (*((void *)v6 + 2))
    {
      uint64_t v47 = *(void *)(v16 + 16);
      if ((*(void *)(v16 + 24) >> 1) - v47 < v44) {
        goto LABEL_114;
      }
      os_signpost_id_t v48 = (char *)(v16 + 2 * v47 + 32);
      if (v6 + 16 < (short float *)&v48[2 * v44] && v48 < (char *)&v6[v44 + 16]) {
        goto LABEL_122;
      }
      memcpy(v48, v6 + 16, 2 * v44);
      if (v44)
      {
        uint64_t v50 = *(void *)(v16 + 16);
        BOOL v51 = __OFADD__(v50, v44);
        uint64_t v52 = v50 + v44;
        if (v51) {
          goto LABEL_115;
        }
        *(void *)(v16 + 16) = v52;
      }
    }
    else if (v44)
    {
      goto LABEL_112;
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_253B09890();
    unint64_t v8 = v53;
    if (!v53) {
      goto LABEL_98;
    }
  }
  int64_t v18 = v17;
  uint64_t v91 = v7;
  sub_2539E7C38(0, v17 & ~(v17 >> 63), 0);
  if (v18 < 0) {
    goto LABEL_113;
  }
  uint64_t v19 = (v5 >> 59) & 1;
  if ((v8 & 0x1000000000000000) == 0) {
    LOBYTE(v19) = 1;
  }
  uint64_t v20 = 4 << v19;
  if ((v8 & 0x2000000000000000) != 0) {
    unint64_t v21 = HIBYTE(v8) & 0xF;
  }
  else {
    unint64_t v21 = v5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v22 = 15;
  uint64_t v83 = 4 << v19;
  uint64_t v84 = v5;
  unint64_t v82 = v21;
  while (1)
  {
    unint64_t v23 = v22 & 0xC;
    BOOL v24 = (v22 & 1) == 0 || v23 == v20;
    int v25 = v24;
    if (!v24)
    {
      uint64_t v6 = (short float *)(v22 >> 16);
      if (v22 >> 16 >= v21) {
        goto LABEL_107;
      }
      goto LABEL_37;
    }
    unint64_t v26 = v22;
    if (v23 == v20) {
      unint64_t v26 = sub_253A439BC(v22, v5, v8);
    }
    uint64_t v6 = (short float *)(v26 >> 16);
    if (v26 >> 16 >= v21) {
      break;
    }
    if ((v26 & 1) == 0) {
      uint64_t v6 = (short float *)(sub_2539EA0A4(v26, v5, v8) >> 16);
    }
LABEL_37:
    if ((v8 & 0x1000000000000000) != 0)
    {
      unsigned int v28 = sub_253B09FF0();
    }
    else if ((v8 & 0x2000000000000000) != 0)
    {
      unint64_t v85 = v5;
      uint64_t v86 = v8 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v28 = *((unsigned __int8 *)&v85 + (void)v6);
      if (*((char *)&v85 + (void)v6) < 0)
      {
        switch(__clz(v28 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v29 = (char *)&v85 + (void)v6;
LABEL_48:
            unsigned int v28 = v29[1] & 0x3F | ((v28 & 0x1F) << 6);
            break;
          case 0x1Bu:
            uint64_t v30 = (char *)&v85 + (void)v6;
LABEL_51:
            char v31 = v30[1];
            char v32 = v30[2];
            int v33 = ((v28 & 0xF) << 12) | ((v31 & 0x3F) << 6);
            goto LABEL_55;
          case 0x1Cu:
            uint64_t v34 = (char *)&v85 + (void)v6;
LABEL_54:
            char v35 = v34[1];
            char v36 = v34[2];
            char v32 = v34[3];
            int v33 = ((v28 & 0xF) << 18) | ((v35 & 0x3F) << 12) | ((v36 & 0x3F) << 6);
LABEL_55:
            unsigned int v28 = v33 & 0xFFFFFFC0 | v32 & 0x3F;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      uint64_t v27 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v5 & 0x1000000000000000) == 0) {
        uint64_t v27 = sub_253B0A0A0();
      }
      unsigned int v28 = *((unsigned __int8 *)v6 + v27);
      if (*((char *)v6 + v27) < 0)
      {
        switch(__clz(v28 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v29 = (char *)v6 + v27;
            goto LABEL_48;
          case 0x1Bu:
            uint64_t v30 = (char *)v6 + v27;
            goto LABEL_51;
          case 0x1Cu:
            uint64_t v34 = (char *)v6 + v27;
            goto LABEL_54;
          default:
            break;
        }
      }
    }
    uint64_t v6 = v91;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2539E7C38(0, *((void *)v6 + 2) + 1, 1);
      uint64_t v6 = v91;
    }
    unint64_t v38 = *((void *)v6 + 2);
    unint64_t v37 = *((void *)v6 + 3);
    if (v38 >= v37 >> 1)
    {
      sub_2539E7C38((char *)(v37 > 1), v38 + 1, 1);
      uint64_t v6 = v91;
    }
    *((void *)v6 + 2) = v38 + 1;
    v6[v38 + 16] = (short float)v28;
    if (v25)
    {
      uint64_t v20 = v83;
      unint64_t v5 = v84;
      unint64_t v21 = v82;
      if (v23 == v83) {
        unint64_t v22 = sub_253A439BC(v22, v84, v8);
      }
      if (v82 <= v22 >> 16) {
        goto LABEL_108;
      }
      if ((v22 & 1) == 0) {
        unint64_t v22 = v22 & 0xC | sub_2539EA0A4(v22, v84, v8) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      unint64_t v21 = v82;
      uint64_t v20 = v83;
      unint64_t v5 = v84;
      if (v82 <= v22 >> 16) {
        goto LABEL_109;
      }
    }
    if ((v8 & 0x1000000000000000) != 0)
    {
      unint64_t v22 = sub_253B09790();
    }
    else
    {
      unint64_t v39 = v22 >> 16;
      if ((v8 & 0x2000000000000000) != 0)
      {
        unint64_t v85 = v5;
        uint64_t v86 = v8 & 0xFFFFFFFFFFFFFFLL;
        int v41 = *((unsigned __int8 *)&v85 + v39);
      }
      else
      {
        uint64_t v40 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v5 & 0x1000000000000000) == 0) {
          uint64_t v40 = sub_253B0A0A0();
        }
        int v41 = *(unsigned __int8 *)(v40 + v39);
      }
      int v42 = (char)v41;
      unsigned int v43 = __clz(v41 ^ 0xFF) - 24;
      if (v42 >= 0) {
        LOBYTE(v43) = 1;
      }
      unint64_t v22 = ((v39 + v43) << 16) | 5;
    }
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      goto LABEL_80;
    }
  }
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  swift_bridgeObjectRelease();
  a5 = v74;
LABEL_8:
  sub_25355B070(v5, (uint64_t)v6, v8, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_253557CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  if (__OFADD__(a2, a3))
  {
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  uint64_t v9 = a2;
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    int64_t v10 = *(short float **)(a1 + 16);
  }
  else {
    int64_t v10 = (short float *)(a2 + a3);
  }
  if ((uint64_t)v10 < a2) {
    goto LABEL_121;
  }
  if (a2 < 0)
  {
LABEL_122:
    __break(1u);
LABEL_123:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_253B0A260();
    __break(1u);
    JUMPOUT(0x2535584A8);
  }
  uint64_t v11 = a9;
  uint64_t v12 = (short float *)MEMORY[0x263F8EE78];
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v10 == (short float *)a2) {
    goto LABEL_8;
  }
  uint64_t v79 = a6;
  uint64_t v80 = a8;
  uint64_t v81 = a5;
  uint64_t v82 = a7;
  uint64_t v85 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v15 = v9;
  uint64_t v13 = (uint64_t)v12;
  uint64_t v83 = v10;
  uint64_t v84 = v9;
  while (1)
  {
    if (v15 >= (uint64_t)v10) {
      goto LABEL_117;
    }
    uint64_t v87 = v13;
    uint64_t v88 = v15;
    uint64_t v17 = *(void *)(v85 + 16 * v15);
    unint64_t v16 = *(void *)(v85 + 16 * v15 + 8);
    uint64_t v18 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v95 = v17;
    unint64_t v96 = v16;
    uint64_t v97 = 0;
    uint64_t v98 = v18;
    swift_bridgeObjectRetain_n();
    uint64_t v19 = sub_253B09890();
    if (v20) {
      break;
    }
    uint64_t v23 = (uint64_t)v12;
LABEL_98:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v59 = sub_253467C9C(a4, v23);
    unint64_t v64 = (v62 >> 1) - v61;
    if (__OFSUB__(v62 >> 1, v61)) {
      goto LABEL_118;
    }
    BOOL v56 = __OFSUB__(a4, v64);
    uint64_t v65 = a4 - v64;
    if (v56)
    {
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    uint64_t v66 = v59;
    uint64_t v67 = v60;
    uint64_t v68 = v61;
    unint64_t v69 = v62;
    v63.n128_u64[0] = 0;
    uint64_t v70 = sub_253549268(v65 & ~(v65 >> 63), v63);
    sub_253558CC0(v66, v67, v68, v69, v70);
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v13 = v87;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253523554(0, *(void *)(v87 + 16) + 1, 1, v87);
      uint64_t v13 = v77;
    }
    unint64_t v74 = *(void *)(v13 + 16);
    unint64_t v73 = *(void *)(v13 + 24);
    uint64_t v75 = v88;
    if (v74 >= v73 >> 1)
    {
      sub_253523554(v73 > 1, v74 + 1, 1, v13);
      uint64_t v75 = v88;
      uint64_t v13 = v78;
    }
    *(void *)(v13 + 16) = v74 + 1;
    *(void *)(v13 + 8 * v74 + 32) = v72;
    unint64_t v76 = (short float *)(v75 + 1);
    swift_unknownObjectRelease();
    uint64_t v15 = (uint64_t)v76;
    int64_t v10 = v83;
    BOOL v30 = v76 == v83;
    uint64_t v9 = v84;
    if (v30) {
      goto LABEL_111;
    }
  }
  unint64_t v21 = v19;
  unint64_t v22 = v20;
  uint64_t v23 = (uint64_t)v12;
  while (1)
  {
    uint64_t v89 = v23;
    int64_t v24 = sub_253573778(v21, v22);
    if (v24) {
      break;
    }
    swift_bridgeObjectRelease();
    int64_t v10 = v12;
LABEL_80:
    uint64_t v49 = *((void *)v10 + 2);
    uint64_t v23 = v89;
    uint64_t v50 = *(void *)(v89 + 16);
    if (__OFADD__(v50, v49))
    {
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v50 + v49 > *(void *)(v89 + 24) >> 1)
    {
      sub_253523590();
      uint64_t v23 = v51;
    }
    if (*((void *)v10 + 2))
    {
      uint64_t v52 = *(void *)(v23 + 16);
      if ((*(void *)(v23 + 24) >> 1) - v52 < v49) {
        goto LABEL_115;
      }
      unint64_t v53 = (char *)(v23 + 2 * v52 + 32);
      if (v10 + 16 < (short float *)&v53[2 * v49] && v53 < (char *)&v10[v49 + 16]) {
        goto LABEL_123;
      }
      memcpy(v53, v10 + 16, 2 * v49);
      if (v49)
      {
        uint64_t v55 = *(void *)(v23 + 16);
        BOOL v56 = __OFADD__(v55, v49);
        uint64_t v57 = v55 + v49;
        if (v56) {
          goto LABEL_116;
        }
        *(void *)(v23 + 16) = v57;
      }
    }
    else if (v49)
    {
      goto LABEL_113;
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = sub_253B09890();
    unint64_t v22 = v58;
    if (!v58) {
      goto LABEL_98;
    }
  }
  int64_t v25 = v24;
  uint64_t v99 = v12;
  sub_2539E7C38(0, v24 & ~(v24 >> 63), 0);
  if (v25 < 0) {
    goto LABEL_114;
  }
  uint64_t v26 = (v21 >> 59) & 1;
  if ((v22 & 0x1000000000000000) == 0) {
    LOBYTE(v26) = 1;
  }
  uint64_t v13 = 4 << v26;
  if ((v22 & 0x2000000000000000) != 0) {
    unint64_t v27 = HIBYTE(v22) & 0xF;
  }
  else {
    unint64_t v27 = v21 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v28 = 15;
  uint64_t v91 = 4 << v26;
  uint64_t v92 = v21;
  unint64_t v90 = v27;
  while (1)
  {
    unint64_t v29 = v28 & 0xC;
    BOOL v30 = (v28 & 1) == 0 || v29 == v13;
    uint64_t v9 = v30;
    if (!v30)
    {
      int64_t v10 = (short float *)(v28 >> 16);
      if (v28 >> 16 >= v27) {
        goto LABEL_108;
      }
      goto LABEL_37;
    }
    unint64_t v31 = v28;
    if (v29 == v13) {
      unint64_t v31 = sub_253A439BC(v28, v21, v22);
    }
    int64_t v10 = (short float *)(v31 >> 16);
    if (v31 >> 16 >= v27) {
      break;
    }
    if ((v31 & 1) == 0) {
      int64_t v10 = (short float *)(sub_2539EA0A4(v31, v21, v22) >> 16);
    }
LABEL_37:
    if ((v22 & 0x1000000000000000) != 0)
    {
      unsigned int v33 = sub_253B09FF0();
    }
    else if ((v22 & 0x2000000000000000) != 0)
    {
      unint64_t v93 = v21;
      uint64_t v94 = v22 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v33 = *((unsigned __int8 *)&v93 + (void)v10);
      if (*((char *)&v93 + (void)v10) < 0)
      {
        switch(__clz(v33 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v34 = (char *)&v93 + (void)v10;
LABEL_48:
            unsigned int v33 = v34[1] & 0x3F | ((v33 & 0x1F) << 6);
            break;
          case 0x1Bu:
            char v35 = (char *)&v93 + (void)v10;
LABEL_51:
            char v36 = v35[1];
            char v37 = v35[2];
            int v38 = ((v33 & 0xF) << 12) | ((v36 & 0x3F) << 6);
            goto LABEL_55;
          case 0x1Cu:
            unint64_t v39 = (char *)&v93 + (void)v10;
LABEL_54:
            char v40 = v39[1];
            char v41 = v39[2];
            char v37 = v39[3];
            int v38 = ((v33 & 0xF) << 18) | ((v40 & 0x3F) << 12) | ((v41 & 0x3F) << 6);
LABEL_55:
            unsigned int v33 = v38 & 0xFFFFFFC0 | v37 & 0x3F;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v21 & 0x1000000000000000) == 0) {
        uint64_t v32 = sub_253B0A0A0();
      }
      unsigned int v33 = *((unsigned __int8 *)v10 + v32);
      if (*((char *)v10 + v32) < 0)
      {
        switch(__clz(v33 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v34 = (char *)v10 + v32;
            goto LABEL_48;
          case 0x1Bu:
            char v35 = (char *)v10 + v32;
            goto LABEL_51;
          case 0x1Cu:
            unint64_t v39 = (char *)v10 + v32;
            goto LABEL_54;
          default:
            break;
        }
      }
    }
    int64_t v10 = v99;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2539E7C38(0, *((void *)v10 + 2) + 1, 1);
      int64_t v10 = v99;
    }
    unint64_t v43 = *((void *)v10 + 2);
    unint64_t v42 = *((void *)v10 + 3);
    if (v43 >= v42 >> 1)
    {
      sub_2539E7C38((char *)(v42 > 1), v43 + 1, 1);
      int64_t v10 = v99;
    }
    *((void *)v10 + 2) = v43 + 1;
    v10[v43 + 16] = (short float)v33;
    if (v9)
    {
      uint64_t v13 = v91;
      unint64_t v21 = v92;
      unint64_t v27 = v90;
      if (v29 == v91) {
        unint64_t v28 = sub_253A439BC(v28, v92, v22);
      }
      if (v90 <= v28 >> 16) {
        goto LABEL_109;
      }
      if ((v28 & 1) == 0) {
        unint64_t v28 = v28 & 0xC | sub_2539EA0A4(v28, v92, v22) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      unint64_t v27 = v90;
      uint64_t v13 = v91;
      unint64_t v21 = v92;
      if (v90 <= v28 >> 16) {
        goto LABEL_110;
      }
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      unint64_t v28 = sub_253B09790();
    }
    else
    {
      unint64_t v44 = v28 >> 16;
      if ((v22 & 0x2000000000000000) != 0)
      {
        unint64_t v93 = v21;
        uint64_t v94 = v22 & 0xFFFFFFFFFFFFFFLL;
        int v46 = *((unsigned __int8 *)&v93 + v44);
      }
      else
      {
        uint64_t v45 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v21 & 0x1000000000000000) == 0) {
          uint64_t v45 = sub_253B0A0A0();
        }
        int v46 = *(unsigned __int8 *)(v45 + v44);
      }
      int v47 = (char)v46;
      unsigned int v48 = __clz(v46 ^ 0xFF) - 24;
      if (v47 >= 0) {
        LOBYTE(v48) = 1;
      }
      unint64_t v28 = ((v44 + v48) << 16) | 5;
    }
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = (short float *)MEMORY[0x263F8EE78];
      goto LABEL_80;
    }
  }
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  swift_bridgeObjectRelease();
  uint64_t v11 = a9;
  a7 = v82;
  a8 = v80;
  a5 = v81;
  a6 = v79;
LABEL_8:
  sub_2535694E4(v9, (uint64_t)v10, v13, a5, a6, a7, a8, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2535584C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, NSObject *a7, NSObject *a8, uint64_t a9, uint64_t a10, NSObject *a11)
{
  if (__OFADD__(a2, a3))
  {
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v11 = (short float *)a2;
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    uint64_t v12 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v12 = a2 + a3;
  }
  if (v12 < a2) {
    goto LABEL_119;
  }
  if (a2 < 0)
  {
LABEL_120:
    __break(1u);
LABEL_121:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25353847C(v86);
    swift_bridgeObjectRelease();
    swift_release();
    sub_253B0A260();
    __break(1u);
    JUMPOUT(0x253558CA0);
  }
  uint64_t v14 = a9;
  uint64_t v13 = a10;
  uint64_t v15 = (short float *)MEMORY[0x263F8EE78];
  unint64_t v16 = MEMORY[0x263F8EE78];
  if (v12 == a2) {
    goto LABEL_8;
  }
  uint64_t v84 = a6;
  uint64_t v85 = a5;
  uint64_t v86 = (uint64_t)a7;
  uint64_t v87 = a8;
  uint64_t v90 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v19 = (uint64_t)v11;
  unint64_t v16 = (unint64_t)v15;
  uint64_t v88 = v12;
  uint64_t v89 = v11;
  while (1)
  {
    if (v19 >= v12) {
      goto LABEL_115;
    }
    uint64_t v92 = v16;
    uint64_t v93 = v19;
    uint64_t v21 = *(void *)(v90 + 16 * v19);
    unint64_t v20 = *(void *)(v90 + 16 * v19 + 8);
    uint64_t v22 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v100 = v21;
    unint64_t v101 = v20;
    uint64_t v102 = 0;
    uint64_t v103 = v22;
    swift_bridgeObjectRetain_n();
    uint64_t v23 = sub_253B09890();
    if (v24) {
      break;
    }
    uint64_t v26 = (uint64_t)v15;
LABEL_97:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v64 = sub_253467C9C(a4, v26);
    unint64_t v69 = (v67 >> 1) - v66;
    if (__OFSUB__(v67 >> 1, v66)) {
      goto LABEL_116;
    }
    BOOL v61 = __OFSUB__(a4, v69);
    uint64_t v70 = a4 - v69;
    if (v61)
    {
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    uint64_t v71 = v64;
    uint64_t v72 = v65;
    uint64_t v73 = v66;
    unint64_t v74 = v67;
    v68.n128_u64[0] = 0;
    uint64_t v75 = sub_253549268(v70 & ~(v70 >> 63), v68);
    sub_253558CC0(v71, v72, v73, v74, v75);
    uint64_t v77 = v76;
    swift_bridgeObjectRelease();
    unint64_t v16 = v92;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253523554(0, *(void *)(v92 + 16) + 1, 1, v92);
      unint64_t v16 = v82;
    }
    unint64_t v79 = *(void *)(v16 + 16);
    unint64_t v78 = *(void *)(v16 + 24);
    uint64_t v80 = v93;
    if (v79 >= v78 >> 1)
    {
      sub_253523554(v78 > 1, v79 + 1, 1, v16);
      uint64_t v80 = v93;
      unint64_t v16 = v83;
    }
    *(void *)(v16 + 16) = v79 + 1;
    *(void *)(v16 + 8 * v79 + 32) = v77;
    uint64_t v81 = v80 + 1;
    swift_unknownObjectRelease();
    uint64_t v19 = v81;
    uint64_t v12 = v88;
    uint64_t v11 = v89;
    if (v81 == v88) {
      goto LABEL_109;
    }
  }
  unint64_t v25 = v23;
  unint64_t v16 = v24;
  uint64_t v26 = (uint64_t)v15;
  while (1)
  {
    int64_t v27 = sub_253573778(v25, v16);
    if (v27) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v15;
LABEL_79:
    uint64_t v54 = *((void *)v11 + 2);
    uint64_t v55 = *(void *)(v26 + 16);
    if (__OFADD__(v55, v54))
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    if (!swift_isUniquelyReferenced_nonNull_native() || v55 + v54 > *(void *)(v26 + 24) >> 1)
    {
      sub_253523590();
      uint64_t v26 = v56;
    }
    if (*((void *)v11 + 2))
    {
      uint64_t v57 = *(void *)(v26 + 16);
      if ((*(void *)(v26 + 24) >> 1) - v57 < v54) {
        goto LABEL_113;
      }
      unint64_t v58 = (char *)(v26 + 2 * v57 + 32);
      if (v11 + 16 < (short float *)&v58[2 * v54] && v58 < (char *)&v11[v54 + 16]) {
        goto LABEL_121;
      }
      memcpy(v58, v11 + 16, 2 * v54);
      if (v54)
      {
        uint64_t v60 = *(void *)(v26 + 16);
        BOOL v61 = __OFADD__(v60, v54);
        uint64_t v62 = v60 + v54;
        if (v61) {
          goto LABEL_114;
        }
        *(void *)(v26 + 16) = v62;
      }
    }
    else if (v54)
    {
      goto LABEL_111;
    }
    swift_bridgeObjectRelease();
    unint64_t v25 = sub_253B09890();
    unint64_t v16 = v63;
    if (!v63) {
      goto LABEL_97;
    }
  }
  uint64_t v12 = v27;
  uint64_t v104 = v15;
  uint64_t v11 = (short float *)&v104;
  sub_2539E7C38(0, v27 & ~(v27 >> 63), 0);
  if (v12 < 0) {
    goto LABEL_112;
  }
  uint64_t v94 = v26;
  uint64_t v28 = (v25 >> 59) & 1;
  if ((v16 & 0x1000000000000000) == 0) {
    LOBYTE(v28) = 1;
  }
  uint64_t v29 = 4 << v28;
  uint64_t v30 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v30 = v25 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v97 = v30;
  unint64_t v31 = 15;
  uint64_t v95 = v29;
  uint64_t v96 = v25;
  while (1)
  {
    unint64_t v32 = v31 & 0xC;
    BOOL v33 = (v31 & 1) == 0 || v32 == v29;
    int v34 = v33;
    if (!v33)
    {
      unint64_t v36 = v31 >> 16;
      if (v31 >> 16 >= v97) {
        goto LABEL_106;
      }
      goto LABEL_36;
    }
    unint64_t v35 = v31;
    if (v32 == v29) {
      unint64_t v35 = sub_253A439BC(v31, v25, v16);
    }
    unint64_t v36 = v35 >> 16;
    if (v35 >> 16 >= v97) {
      break;
    }
    if ((v35 & 1) == 0) {
      unint64_t v36 = sub_2539EA0A4(v35, v25, v16) >> 16;
    }
LABEL_36:
    if ((v16 & 0x1000000000000000) != 0)
    {
      unsigned int v38 = sub_253B09FF0();
    }
    else if ((v16 & 0x2000000000000000) != 0)
    {
      unint64_t v98 = v25;
      uint64_t v99 = v16 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v38 = *((unsigned __int8 *)&v98 + v36);
      if (*((char *)&v98 + v36) < 0)
      {
        switch(__clz(v38 ^ 0xFF))
        {
          case 0x1Au:
            unint64_t v39 = (char *)&v98 + v36;
LABEL_47:
            unsigned int v38 = v39[1] & 0x3F | ((v38 & 0x1F) << 6);
            break;
          case 0x1Bu:
            char v40 = (char *)&v98 + v36;
LABEL_50:
            char v41 = v40[1];
            char v42 = v40[2];
            int v43 = ((v38 & 0xF) << 12) | ((v41 & 0x3F) << 6);
            goto LABEL_54;
          case 0x1Cu:
            unint64_t v44 = (char *)&v98 + v36;
LABEL_53:
            char v45 = v44[1];
            char v46 = v44[2];
            char v42 = v44[3];
            int v43 = ((v38 & 0xF) << 18) | ((v45 & 0x3F) << 12) | ((v46 & 0x3F) << 6);
LABEL_54:
            unsigned int v38 = v43 & 0xFFFFFFC0 | v42 & 0x3F;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      uint64_t v37 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v25 & 0x1000000000000000) == 0) {
        uint64_t v37 = sub_253B0A0A0();
      }
      unsigned int v38 = *(unsigned __int8 *)(v37 + v36);
      if (*(char *)(v37 + v36) < 0)
      {
        switch(__clz(v38 ^ 0xFF))
        {
          case 0x1Au:
            unint64_t v39 = (char *)(v36 + v37);
            goto LABEL_47;
          case 0x1Bu:
            char v40 = (char *)(v36 + v37);
            goto LABEL_50;
          case 0x1Cu:
            unint64_t v44 = (char *)(v36 + v37);
            goto LABEL_53;
          default:
            break;
        }
      }
    }
    uint64_t v11 = v104;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2539E7C38(0, *((void *)v11 + 2) + 1, 1);
      uint64_t v11 = v104;
    }
    unint64_t v48 = *((void *)v11 + 2);
    unint64_t v47 = *((void *)v11 + 3);
    if (v48 >= v47 >> 1)
    {
      sub_2539E7C38((char *)(v47 > 1), v48 + 1, 1);
      uint64_t v11 = v104;
    }
    *((void *)v11 + 2) = v48 + 1;
    v11[v48 + 16] = (short float)v38;
    if (v34)
    {
      uint64_t v29 = v95;
      unint64_t v25 = v96;
      if (v32 == v95) {
        unint64_t v31 = sub_253A439BC(v31, v96, v16);
      }
      if (v97 <= v31 >> 16) {
        goto LABEL_107;
      }
      if ((v31 & 1) == 0) {
        unint64_t v31 = v31 & 0xC | sub_2539EA0A4(v31, v96, v16) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else
    {
      unint64_t v25 = v96;
      uint64_t v29 = v95;
      if (v97 <= v31 >> 16) {
        goto LABEL_108;
      }
    }
    if ((v16 & 0x1000000000000000) != 0)
    {
      unint64_t v31 = sub_253B09790();
    }
    else
    {
      unint64_t v49 = v31 >> 16;
      if ((v16 & 0x2000000000000000) != 0)
      {
        unint64_t v98 = v25;
        uint64_t v99 = v16 & 0xFFFFFFFFFFFFFFLL;
        int v51 = *((unsigned __int8 *)&v98 + v49);
      }
      else
      {
        uint64_t v50 = (v16 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v25 & 0x1000000000000000) == 0) {
          uint64_t v50 = sub_253B0A0A0();
        }
        int v51 = *(unsigned __int8 *)(v50 + v49);
      }
      int v52 = (char)v51;
      unsigned int v53 = __clz(v51 ^ 0xFF) - 24;
      if (v52 >= 0) {
        LOBYTE(v53) = 1;
      }
      unint64_t v31 = ((v49 + v53) << 16) | 5;
    }
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = (short float *)MEMORY[0x263F8EE78];
      uint64_t v26 = v94;
      goto LABEL_79;
    }
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  swift_bridgeObjectRelease();
  a8 = v87;
  uint64_t v13 = a10;
  uint64_t v14 = a9;
  a7 = v86;
  a6 = v84;
  a5 = v85;
LABEL_8:
  uint64_t v17 = (uint64_t)a7;
  sub_253562C04((uint64_t)v11, v12, v16, a5, a6, a7, a8, v14, v13, a11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25353847C(v17);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_253558CC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if (!__OFADD__(*(void *)(a5 + 16), (a4 >> 1) - a3))
  {
    sub_253523590();
    uint64_t v8 = swift_unknownObjectRetain();
    sub_2534788C4(v8, a2, a3, a4);
    swift_bridgeObjectRetain();
    sub_253478814();
    return;
  }
  __break(1u);
}

void sub_253558D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2535494F8();
  if (__OFSUB__(a4, 2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_253467D0C(a4 - 2, v5);
  int64_t v9 = v8 >> 1;
  uint64_t v10 = (v8 >> 1) - v7;
  if (__OFSUB__(v8 >> 1, v7))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v10)
  {
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v20 = MEMORY[0x263F8EE78];
    sub_2539E7C58(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
    {
      __break(1u);
      return;
    }
    while (v12 < v9)
    {
      unsigned int v13 = objc_msgSend(*(id *)(v11 + 8 * v12), sel_intValue);
      unint64_t v15 = *(void *)(v20 + 16);
      unint64_t v14 = *(void *)(v20 + 24);
      if (v15 >= v14 >> 1) {
        sub_2539E7C58(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v20 + 16) = v15 + 1;
      *(_DWORD *)(v20 + 4 * v15 + 32) = v13;
      if (v9 == ++v12) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_9:
  swift_unknownObjectRelease();
  sub_2534789BC();
  swift_bridgeObjectRetain();
  unint64_t v16 = &unk_270340CF0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_16:
    sub_253523678();
    unint64_t v16 = v18;
  }
  unint64_t v17 = v16[2];
  if (v17 >= v16[3] >> 1)
  {
    sub_253523678();
    unint64_t v16 = v19;
  }
  v16[2] = v17 + 1;
  *((_DWORD *)v16 + v17 + 8) = 3;
  swift_bridgeObjectRelease();
}

void sub_253558F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2535494F8();
  if (__OFSUB__(a4, 2)) {
    goto LABEL_24;
  }
  sub_253467D0C(a4 - 2, v5);
  int64_t v9 = v8 >> 1;
  uint64_t v10 = (v8 >> 1) - v7;
  if (__OFSUB__(v8 >> 1, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_2539E7C58(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v14 = v28;
    while (v13 < v9)
    {
      unsigned int v15 = objc_msgSend(*(id *)(v12 + 8 * v13), sel_intValue);
      unint64_t v17 = *(void *)(v28 + 16);
      unint64_t v16 = *(void *)(v28 + 24);
      if (v17 >= v16 >> 1) {
        sub_2539E7C58(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v28 + 16) = v17 + 1;
      *(_DWORD *)(v28 + 4 * v17 + 32) = v15;
      if (v9 == ++v13)
      {
        swift_unknownObjectRelease();
        uint64_t v11 = MEMORY[0x263F8EE78];
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  swift_unknownObjectRelease();
  uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_12:
  uint64_t v18 = *(void *)(v14 + 16);
  if (v18)
  {
    sub_2539E7C58(0, v18, 0);
    uint64_t v19 = 0;
    while (1)
    {
      int v20 = *(_DWORD *)(v14 + 4 * v19 + 32);
      int v21 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        break;
      }
      unint64_t v23 = *(void *)(v11 + 16);
      unint64_t v22 = *(void *)(v11 + 24);
      if (v23 >= v22 >> 1) {
        sub_2539E7C58(v22 > 1, v23 + 1, 1);
      }
      ++v19;
      *(void *)(v11 + 16) = v23 + 1;
      *(_DWORD *)(v11 + 4 * v23 + 32) = v21;
      if (v18 == v19) {
        goto LABEL_18;
      }
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  sub_2534789BC();
  swift_bridgeObjectRetain();
  unint64_t v24 = &unk_270340D18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_26:
    sub_253523678();
    unint64_t v24 = v26;
  }
  unint64_t v25 = v24[2];
  if (v25 >= v24[3] >> 1)
  {
    sub_253523678();
    unint64_t v24 = v27;
  }
  void v24[2] = v25 + 1;
  *((_DWORD *)v24 + v25 + 8) = 2;
  swift_bridgeObjectRelease();
}

void sub_253559214(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_253B095E0();
  uint64_t v4 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_encodeAsIDsFrom_, v4);

  sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
  uint64_t v6 = sub_253B09A60();

  *a2 = v6;
}

uint64_t sub_2535592C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_253462A5C(&qword_269CDED28);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unsigned int v15 = (char *)&v29 - v14;
  sub_2534D88A0(a3, (uint64_t)&v29 - v14, &qword_269CDED28);
  uint64_t v16 = sub_253B06CC0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v16) != 1)
  {
    sub_2534D88A0((uint64_t)v15, (uint64_t)v13, &qword_269CDED28);
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v13, v16);
    if (v18 != *MEMORY[0x263F4CA00])
    {
      if (v18 == *MEMORY[0x263F4C9F8])
      {
        sub_253558F6C(a1, a2, a4, a5);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
    }
  }
  sub_253558D74(a1, a2, a4, a5);
LABEL_7:
  uint64_t v20 = v19;
  sub_253472458((uint64_t)v15, &qword_269CDED28);
  uint64_t v21 = *(void *)(v20 + 16);
  v22.n128_u16[0] = COERCE_UNSIGNED_INT(1.0);
  uint64_t result = sub_253549268(v21, v22);
  BOOL v24 = __OFSUB__(a5, v21);
  uint64_t v25 = a5 - v21;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = result;
    sub_253549324(0, v25);
    v27.n128_u64[0] = 0;
    sub_253549268(v25, v27);
    uint64_t v30 = v20;
    sub_2534789BC();
    uint64_t v28 = v30;
    uint64_t v30 = v26;
    sub_253478814();
    return v28;
  }
  return result;
}

id sub_2535594F8(uint64_t a1)
{
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B34E40;
  sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
  *(void *)(v3 + 32) = sub_253B09DC0();
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(v3 + 40) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v4);
  sub_253B09AA0();
  id v5 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v6 = sub_25356F150(v3, 131104);
  if (!v1 && v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInt_, *(unsigned int *)(a1 + 4 * i + 32));
      objc_msgSend(v6, sel_setObject_atIndexedSubscript_, v8, i);
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

id sub_253559670(uint64_t a1)
{
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B34E40;
  sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
  *(void *)(v3 + 32) = sub_253B09DC0();
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(v3 + 40) = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v4);
  sub_253B09AA0();
  id v5 = objc_allocWithZone(MEMORY[0x263F00DA8]);
  id v6 = sub_25356F150(v3, 65552);
  if (!v1 && v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      _H0 = *(_WORD *)(a1 + 2 * i + 32);
      __asm { FCVT            S8, H0 }
      id v14 = objc_allocWithZone(NSNumber);
      LODWORD(v15) = _S8;
      id v16 = objc_msgSend(v14, sel_initWithFloat_, v15);
      objc_msgSend(v6, sel_setObject_atIndexedSubscript_, v16, i);
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

void *sub_2535597F4(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_dataPointer);
  objc_msgSend(v1, sel_count);
  id v3 = objc_msgSend(v1, sel_count);
  return sub_25350BE5C((uint64_t)v2, (uint64_t)v3);
}

uint64_t sub_253559864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v10 = v9;
  uint64_t v71 = a8;
  uint64_t v72 = a7;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  uint64_t v73 = a4;
  uint64_t v14 = sub_253B089F0();
  uint64_t result = MEMORY[0x270FA5388](v14);
  if (__OFADD__(a2, a3))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    uint64_t v18 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v18 = a2 + a3;
  }
  if (v18 < a2) {
    goto LABEL_29;
  }
  if (a2 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (v18 == a2)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
LABEL_9:
    sub_25355B070(a2, v18, v20, a9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v65 = result;
    uint64_t v66 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v64 = v17;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v67 = a1;
    uint64_t v21 = a1 + 16 * a2;
    uint64_t v20 = v19;
    __n128 v22 = (uint64_t *)(v21 + 40);
    uint64_t v63 = a2;
    uint64_t v70 = v18;
    while (1)
    {
      if (a2 >= v18)
      {
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v79 = v20;
      uint64_t v23 = *(v22 - 1);
      uint64_t v24 = *v22;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_2535592C4(v23, v24, v73, v74, v75);
      uint64_t v27 = v26;
      id v28 = sub_2535594F8(v25);
      if (v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      id v29 = v28;
      uint64_t v69 = v23;
      uint64_t v10 = 0;
      id v30 = sub_253559670(v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for SbertQuantizedEmbeddingModelInput();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v29;
      *(void *)(v31 + 24) = v30;
      sub_2535494F8();
      uint64_t v76 = v22;
      uint64_t v77 = v31;
      unint64_t v78 = v24;
      sub_253B04268();
      BOOL v33 = v32;
      swift_release();
      id v34 = objc_msgSend(v33, sel_shape);
      uint64_t v68 = sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
      uint64_t v35 = sub_253B09A60();

      uint64_t v81 = MEMORY[0x263F8EE78];
      sub_253B0A0F0();
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      id v36 = objc_allocWithZone(NSNumber);
      objc_msgSend(v36, sel_initWithInteger_, v71);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      char v37 = sub_2534BB800(v35, v81);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v37 & 1) == 0 || objc_msgSend(v33, sel_dataType) != (id)65552) {
        break;
      }
      swift_bridgeObjectRelease();
      unsigned int v38 = sub_2535597F4(v33);
      uint64_t v39 = v79;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = v70;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_253523554(0, *(void *)(v39 + 16) + 1, 1, v39);
        uint64_t v39 = v45;
      }
      char v41 = v76;
      unint64_t v43 = *(void *)(v39 + 16);
      unint64_t v42 = *(void *)(v39 + 24);
      uint64_t v44 = v39;
      if (v43 >= v42 >> 1)
      {
        sub_253523554(v42 > 1, v43 + 1, 1, v39);
        uint64_t v44 = v46;
      }
      ++a2;
      *(void *)(v44 + 16) = v43 + 1;
      uint64_t v20 = v44;
      *(void *)(v44 + 8 * v43 + 32) = v38;

      uint64_t result = swift_release();
      __n128 v22 = v41 + 2;
      if (v18 == a2)
      {
        swift_bridgeObjectRelease();
        a2 = v63;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v47 = v66;
    sub_253B08360();
    id v48 = v33;
    unint64_t v49 = v78;
    swift_bridgeObjectRetain();
    id v50 = v48;
    int v51 = sub_253B089D0();
    os_log_type_t v52 = sub_253B09D80();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v81 = v79;
      *(_DWORD *)uint64_t v53 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v80 = sub_253464DF8(v69, v49, &v81);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      id v54 = objc_msgSend(v50, sel_shape);
      uint64_t v55 = v68;
      uint64_t v56 = sub_253B09A60();

      uint64_t v57 = MEMORY[0x25A268A80](v56, v55);
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      uint64_t v80 = sub_253464DF8(v57, v59, &v81);
      sub_253B09E80();

      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 22) = 2048;
      id v60 = objc_msgSend(v50, sel_dataType);

      uint64_t v80 = (uint64_t)v60;
      sub_253B09E80();

      _os_log_impl(&dword_253460000, v51, v52, "Failed to embed \"%s\". Received embedding shaped: %s and data type: %ld, which are unexpected.", (uint8_t *)v53, 0x20u);
      uint64_t v61 = v79;
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v61, -1, -1);
      MEMORY[0x25A269E60](v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v65);
    }
    sub_2535301B4();
    swift_allocError();
    *uint64_t v62 = 5;
    swift_willThrow();
    swift_bridgeObjectRelease();

    return swift_release();
  }
}

uint64_t sub_253559F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v14 = v13;
  uint64_t v81 = a8;
  uint64_t v82 = a7;
  uint64_t v84 = a5;
  uint64_t v85 = a6;
  uint64_t v83 = a4;
  uint64_t v18 = sub_253B089F0();
  uint64_t result = MEMORY[0x270FA5388](v18);
  if (__OFADD__(a2, a3))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    uint64_t v22 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v22 = a2 + a3;
  }
  if (v22 < a2) {
    goto LABEL_29;
  }
  if (a2 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v24 = a12;
  uint64_t v23 = a13;
  uint64_t v25 = a11;
  uint64_t v26 = a9;
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (v22 != a2)
  {
    uint64_t v70 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v71 = v21;
    uint64_t v72 = result;
    uint64_t v73 = a12;
    uint64_t v74 = a9;
    uint64_t v76 = a11;
    uint64_t v77 = a13;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v75 = a1;
    id v28 = (uint64_t *)(a1 + 16 * a2 + 40);
    uint64_t v69 = a2;
    uint64_t v80 = v22;
    while (a2 < v22)
    {
      uint64_t v89 = v27;
      uint64_t v30 = *(v28 - 1);
      uint64_t v29 = *v28;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_2535592C4(v30, v29, v83, v84, v85);
      uint64_t v33 = v32;
      id v34 = sub_2535594F8(v31);
      if (v14)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_25:
        swift_bridgeObjectRelease();
        return swift_release();
      }
      id v35 = v34;
      uint64_t v14 = 0;
      id v36 = sub_253559670(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for SbertQuantizedEmbeddingModelInput();
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v35;
      *(void *)(v37 + 24) = v36;
      sub_2535494F8();
      uint64_t v79 = v30;
      uint64_t v86 = v28;
      uint64_t v87 = v37;
      unint64_t v88 = v29;
      sub_253B04268();
      uint64_t v39 = v38;
      swift_release();
      id v40 = objc_msgSend(v39, sel_shape);
      uint64_t v78 = sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
      uint64_t v41 = sub_253B09A60();

      uint64_t v91 = MEMORY[0x263F8EE78];
      sub_253B0A0F0();
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      id v42 = objc_allocWithZone(NSNumber);
      objc_msgSend(v42, sel_initWithInteger_, v81);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      LOBYTE(v40) = sub_2534BB800(v41, v91);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v40 & 1) == 0 || objc_msgSend(v39, sel_dataType) != (id)65552)
      {
        swift_bridgeObjectRelease();
        unint64_t v49 = v70;
        sub_253B08360();
        id v50 = v39;
        unint64_t v51 = v88;
        swift_bridgeObjectRetain();
        id v52 = v50;
        uint64_t v53 = sub_253B089D0();
        os_log_type_t v54 = sub_253B09D80();
        int v55 = v54;
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v56 = swift_slowAlloc();
          uint64_t v89 = swift_slowAlloc();
          uint64_t v91 = v89;
          *(_DWORD *)uint64_t v56 = 136315650;
          LODWORD(v86) = v55;
          swift_bridgeObjectRetain();
          uint64_t v90 = sub_253464DF8(v79, v51, &v91);
          sub_253B09E80();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v56 + 12) = 2080;
          id v57 = objc_msgSend(v52, sel_shape);
          uint64_t v58 = v78;
          uint64_t v59 = sub_253B09A60();

          uint64_t v60 = MEMORY[0x25A268A80](v59, v58);
          uint64_t v61 = v49;
          uint64_t v62 = v60;
          unint64_t v64 = v63;
          swift_bridgeObjectRelease();
          uint64_t v90 = sub_253464DF8(v62, v64, &v91);
          sub_253B09E80();

          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 22) = 2048;
          id v65 = objc_msgSend(v52, sel_dataType);

          uint64_t v90 = (uint64_t)v65;
          sub_253B09E80();

          _os_log_impl(&dword_253460000, v53, (os_log_type_t)v86, "Failed to embed \"%s\". Received embedding shaped: %s and data type: %ld, which are unexpected.", (uint8_t *)v56, 0x20u);
          uint64_t v66 = v89;
          swift_arrayDestroy();
          MEMORY[0x25A269E60](v66, -1, -1);
          MEMORY[0x25A269E60](v56, -1, -1);

          (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v72);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v72);
        }
        sub_2535301B4();
        swift_allocError();
        *uint64_t v67 = 5;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      unint64_t v43 = sub_2535597F4(v39);
      uint64_t v27 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253523554(0, *(void *)(v27 + 16) + 1, 1, v27);
        uint64_t v27 = v47;
      }
      uint64_t v44 = v86;
      unint64_t v46 = *(void *)(v27 + 16);
      unint64_t v45 = *(void *)(v27 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_253523554(v45 > 1, v46 + 1, 1, v27);
        uint64_t v27 = v48;
      }
      ++a2;
      *(void *)(v27 + 16) = v46 + 1;
      *(void *)(v27 + 8 * v46 + 32) = v43;

      uint64_t result = swift_release();
      id v28 = v44 + 2;
      uint64_t v22 = v80;
      if (v80 == a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v80;
        uint64_t v25 = v76;
        uint64_t v23 = v77;
        uint64_t v24 = v73;
        uint64_t v26 = v74;
        a2 = v69;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_8:
  sub_2535694E4(a2, v22, v27, v26, a10, v25, v24, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25355A76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10, NSObject *a11, NSObject *a12, uint64_t a13, uint64_t a14, NSObject *a15)
{
  uint64_t v16 = v15;
  uint64_t v89 = a8;
  uint64_t v90 = a7;
  uint64_t v92 = a5;
  uint64_t v93 = a6;
  uint64_t v91 = a4;
  uint64_t v20 = sub_253B089F0();
  uint64_t result = MEMORY[0x270FA5388](v20);
  if (__OFADD__(a2, a3))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a2 + a3 >= *(void *)(a1 + 16)) {
    uint64_t v24 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v24 = a2 + a3;
  }
  if (v24 < a2) {
    goto LABEL_29;
  }
  if (a2 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v26 = a13;
  uint64_t v25 = a14;
  id v28 = a11;
  uint64_t v27 = a12;
  uint64_t v29 = a2;
  uint64_t v30 = a9;
  uint64_t v31 = a10;
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t v85 = v29;
  if (v24 != v29)
  {
    uint64_t v75 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v76 = v23;
    uint64_t v77 = result;
    uint64_t v78 = a10;
    uint64_t v79 = a9;
    uint64_t v81 = a11;
    uint64_t v82 = a12;
    uint64_t v83 = a13;
    uint64_t v84 = a14;
    uint64_t v88 = v24;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v33 = v88;
    uint64_t v80 = a1;
    id v34 = (uint64_t *)(a1 + 16 * v29 + 40);
    uint64_t v35 = v29;
    while (v35 < v33)
    {
      uint64_t v37 = *(v34 - 1);
      uint64_t v36 = *v34;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_2535592C4(v37, v36, v91, v92, v93);
      uint64_t v40 = v39;
      id v41 = sub_2535594F8(v38);
      if (v16)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_25:
        id v28 = v81;
        goto LABEL_26;
      }
      id v42 = v41;
      uint64_t v87 = v37;
      uint64_t v97 = (uint64_t)v32;
      uint64_t v16 = 0;
      id v43 = sub_253559670(v40);
      unint64_t v96 = v36;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for SbertQuantizedEmbeddingModelInput();
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 16) = v42;
      *(void *)(v44 + 24) = v43;
      sub_2535494F8();
      uint64_t v94 = v34;
      uint64_t v95 = v44;
      sub_253B04268();
      unint64_t v46 = v45;
      swift_release();
      id v47 = objc_msgSend(v46, sel_shape);
      uint64_t v86 = sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
      uint64_t v48 = sub_253B09A60();

      uint64_t v99 = MEMORY[0x263F8EE78];
      sub_253B0A0F0();
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      id v49 = objc_allocWithZone(NSNumber);
      objc_msgSend(v49, sel_initWithInteger_, v89);
      sub_253B0A0C0();
      sub_253B0A100();
      sub_253B0A110();
      sub_253B0A0D0();
      LOBYTE(v44) = sub_2534BB800(v48, v99);
      swift_bridgeObjectRelease();
      swift_release();
      if ((v44 & 1) == 0 || objc_msgSend(v46, sel_dataType) != (id)65552)
      {
        swift_bridgeObjectRelease();
        uint64_t v56 = v75;
        sub_253B08360();
        id v57 = v46;
        unint64_t v58 = v96;
        swift_bridgeObjectRetain();
        id v59 = v57;
        uint64_t v60 = sub_253B089D0();
        os_log_type_t v61 = sub_253B09D80();
        int v62 = v61;
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v63 = swift_slowAlloc();
          LODWORD(v94) = v62;
          uint64_t v64 = v63;
          uint64_t v97 = swift_slowAlloc();
          uint64_t v99 = v97;
          *(_DWORD *)uint64_t v64 = 136315650;
          swift_bridgeObjectRetain();
          uint64_t v98 = sub_253464DF8(v87, v58, &v99);
          sub_253B09E80();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v64 + 12) = 2080;
          id v65 = objc_msgSend(v59, sel_shape);
          uint64_t v66 = v86;
          uint64_t v67 = sub_253B09A60();

          uint64_t v68 = MEMORY[0x25A268A80](v67, v66);
          unint64_t v70 = v69;
          swift_bridgeObjectRelease();
          uint64_t v98 = sub_253464DF8(v68, v70, &v99);
          sub_253B09E80();

          swift_bridgeObjectRelease();
          *(_WORD *)(v64 + 22) = 2048;
          id v71 = objc_msgSend(v59, sel_dataType);

          uint64_t v98 = (uint64_t)v71;
          sub_253B09E80();

          _os_log_impl(&dword_253460000, v60, (os_log_type_t)v94, "Failed to embed \"%s\". Received embedding shaped: %s and data type: %ld, which are unexpected.", (uint8_t *)v64, 0x20u);
          uint64_t v72 = v97;
          swift_arrayDestroy();
          MEMORY[0x25A269E60](v72, -1, -1);
          MEMORY[0x25A269E60](v64, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v77);
        sub_2535301B4();
        swift_allocError();
        *uint64_t v73 = 5;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      id v50 = (objc_class *)sub_2535597F4(v46);
      uint64_t v32 = v97;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253523554(0, (uint64_t)v32[2].isa + 1, 1, (uint64_t)v32);
        uint64_t v32 = v54;
      }
      unint64_t v51 = v94;
      unint64_t isa = (unint64_t)v32[2].isa;
      unint64_t v52 = (unint64_t)v32[3].isa;
      if (isa >= v52 >> 1)
      {
        sub_253523554(v52 > 1, isa + 1, 1, (uint64_t)v32);
        uint64_t v32 = v55;
      }
      ++v35;
      v32[2].unint64_t isa = (Class)(isa + 1);
      v32[isa + 4].unint64_t isa = v50;

      uint64_t result = swift_release();
      id v34 = v51 + 2;
      uint64_t v33 = v88;
      if (v88 == v35)
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = v88;
        uint64_t v26 = v83;
        uint64_t v25 = v84;
        id v28 = v81;
        uint64_t v27 = v82;
        uint64_t v31 = v78;
        uint64_t v30 = v79;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_8:
  sub_253562C04(v85, v24, v32, v30, v31, v28, v27, v26, v25, a15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  sub_25353847C((uint64_t)v28);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25355AF68@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_253B047F4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_25355AF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v8 = *v3;
  uint64_t v12 = 0;
  unsigned __int8 v11 = v8;
  sub_253462A5C(&qword_269CDE490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_253B22680;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  sub_253554624(inited, 1, a3, &v11, &v12);
  if (v4)
  {
    swift_setDeallocating();
    sub_2539DF9A0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_setDeallocating();
    sub_2539DF9A0();
    uint64_t result = v12;
    if (!v12) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_25355B070(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a3 + 16))
  {
    *a4 = *(void *)(a3 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25355B0BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_253B058B0();
  *a1 = result;
  return result;
}

uint64_t sub_25355B0E8(uint64_t a1)
{
  return sub_25355B150(a1, MEMORY[0x263F061E0], MEMORY[0x263F061D8], &qword_269CDEBD0);
}

uint64_t sub_25355B11C(uint64_t a1)
{
  return sub_25355B150(a1, MEMORY[0x263F06128], MEMORY[0x263F06120], &qword_269CDEBD8);
}

uint64_t sub_25355B150(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  sub_253578768();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t sub_25355B19C()
{
  sub_253B05390();
  sub_253B07040();
  sub_253573548(&qword_269CDEDC8, MEMORY[0x263F06EA8]);
  uint64_t v0 = sub_253B095A0();
  sub_253462A5C(&qword_269CDEDD0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_269CDEBE0 = result;
  return result;
}

void sub_25355B248()
{
  dword_269CDEBE8 = 0;
}

uint64_t sub_25355B254()
{
  sub_253B052F0();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_2534847E0();
  sub_25353CDD4();
  v3(v1, v2);
  sub_25346C800();
  sub_253B05380();
  sub_2534DA4BC();
  v6(v4, v5);
  return swift_bridgeObjectRelease();
}

void sub_25355B34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_2534847F8();
  uint64_t v26 = v22;
  uint64_t v143 = v28;
  unint64_t v144 = v27;
  uint64_t v126 = v29;
  uint64_t v137 = v30;
  int v32 = v31;
  uint64_t v148 = v33;
  uint64_t v35 = v34;
  uint64_t v157 = v36;
  uint64_t v145 = a21;
  v158[2] = *(id *)MEMORY[0x263EF8340];
  sub_2535785EC();
  uint64_t v142 = v37;
  uint64_t v129 = sub_253B09720();
  sub_253465998();
  uint64_t v128 = v38;
  MEMORY[0x270FA5388](v39);
  sub_25346CB04();
  uint64_t v127 = v40;
  uint64_t v41 = sub_253B089F0();
  uint64_t v42 = sub_25346CB4C(v41);
  MEMORY[0x270FA5388](v42);
  sub_25346CB04();
  sub_2534F8208(v43);
  uint64_t v139 = sub_253B08970();
  sub_253465998();
  uint64_t v138 = v44;
  MEMORY[0x270FA5388](v45);
  sub_25346CB04();
  sub_2534F8208(v46);
  uint64_t v155 = sub_253B05390();
  sub_253465998();
  uint64_t v152 = v47;
  MEMORY[0x270FA5388](v48);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v49);
  sub_2534F8208((uint64_t)&v125 - v50);
  uint64_t v51 = sub_253B05780();
  uint64_t v52 = sub_25346CB4C(v51);
  MEMORY[0x270FA5388](v52);
  sub_25346CB04();
  sub_2534F8208(v53);
  uint64_t v153 = sub_253B057F0();
  sub_253465998();
  uint64_t v147 = v54;
  MEMORY[0x270FA5388](v55);
  sub_2534F823C();
  uint64_t v57 = MEMORY[0x270FA5388](v56);
  sub_253579410(v57, v58, v59, v60, v61, v62, v63, v64, v125);
  uint64_t v156 = sub_253B05860();
  sub_253465998();
  uint64_t v154 = v65;
  MEMORY[0x270FA5388](v66);
  sub_25349888C();
  sub_253B057B0();
  sub_253465998();
  uint64_t v68 = v67;
  MEMORY[0x270FA5388](v69);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v70);
  sub_2534D9E98();
  sub_253579204();
  v26[2] = v71 | 0x6570795400000000;
  v26[3] = 0xE800000000000000;
  v26[4] = 0x4449656C646E7562;
  v26[5] = 0xE800000000000000;
  v26[6] = 0xD000000000000012;
  v26[7] = 0x8000000253B0CE50;
  sub_253579204();
  v26[8] = v72 & 0xFFFF0000FFFFFFFFLL | 0x444900000000;
  v26[9] = 0xE600000000000000;
  sub_253579204();
  v26[10] = v73 | 0x706F635300000000;
  v26[11] = 0xE900000000000065;
  v26[12] = 0xD000000000000010;
  v26[13] = 0x8000000253B0CF50;
  v26[14] = 0xD000000000000017;
  v26[15] = 0x8000000253B0CF70;
  v26[16] = 0xD000000000000012;
  v26[17] = 0x8000000253B0CF90;
  int v136 = v32;
  uint64_t v140 = v23;
  uint64_t v146 = v35;
  uint64_t v150 = v68;
  uint64_t v151 = v74;
  uint64_t v149 = v24;
  if ((v32 & 1) == 0)
  {
    uint64_t v75 = v143;
    id v76 = objc_msgSend(self, sel_defaultManager);
    uint64_t v77 = (void *)sub_253B05320();
    v158[0] = 0;
    unsigned int v78 = objc_msgSend(v76, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v77, 1, 0, v158);

    if (!v78)
    {
      id v122 = v158[0];
      swift_bridgeObjectRelease();
      sub_253B052D0();

      swift_willThrow();
      sub_253530AA0(v75);
      sub_2534DA4BC();
      v123();
      sub_25347B88C();
      (*(void (**)(void))(v124 + 8))();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2535785EC();
      swift_deallocPartialClassInstance();
      goto LABEL_10;
    }
    id v79 = v158[0];
  }
  uint64_t v134 = a22;
  uint64_t v80 = v157[4];
  sub_253472068(v157, v157[3]);
  uint64_t v81 = sub_253578D94();
  v82(v81, v80);
  sub_25353CDD4();
  v83();
  sub_253462A5C(&qword_269CDECC8);
  sub_253578A1C();
  uint64_t v84 = sub_253B05830();
  sub_25346CB34(v84);
  sub_253578960();
  uint64_t v87 = v86 & ~v85;
  uint64_t v132 = 8 * v88;
  uint64_t v89 = v88;
  uint64_t v141 = v88;
  uint64_t v90 = swift_allocObject();
  uint64_t v133 = v90;
  *(_OWORD *)(v90 + 16) = xmmword_253B34E50;
  uint64_t v91 = v90 + v87;
  uint64_t v131 = v26[2];
  sub_2535787B4();
  uint64_t v92 = (void (*)(void))*((void *)v154 + 13);
  sub_253578520();
  v92();
  uint64_t v154 = v92;
  swift_bridgeObjectRetain();
  sub_253B05810();
  uint64_t v131 = v91 + v89;
  uint64_t v142 = v91;
  sub_2535787B4();
  sub_253578520();
  v92();
  swift_bridgeObjectRetain();
  sub_2534D9724();
  sub_253B05810();
  sub_253578F38(v91 + 2 * v141);
  *uint64_t v25 = 0;
  v25[1] = 0;
  LODWORD(v92) = *MEMORY[0x263F84720];
  uint64_t v93 = v154;
  sub_253578520();
  v93();
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253578F38(v26[6]);
  *uint64_t v25 = 0;
  v25[1] = 0;
  LODWORD(v131) = v92;
  sub_253578520();
  v93();
  uint64_t v94 = v93;
  swift_bridgeObjectRetain();
  sub_2535785B4();
  sub_253578F38(v26[8]);
  uint64_t v95 = v141;
  *uint64_t v25 = 0;
  v25[1] = 0;
  sub_253578520();
  v94();
  swift_bridgeObjectRetain();
  sub_2535785B4();
  sub_253578F38(v26[12]);
  uint64_t v96 = v95;
  uint64_t v97 = v142;
  sub_25357910C(v142 + 5 * v95);
  uint64_t v98 = v154;
  sub_253578520();
  v98();
  swift_bridgeObjectRetain();
  sub_2535785B4();
  uint64_t v130 = v26[14];
  sub_25357910C(v97 + 6 * v96);
  sub_253578520();
  v98();
  swift_bridgeObjectRetain();
  sub_2535785B4();
  *uint64_t v25 = 0;
  v25[1] = 0;
  sub_253578520();
  v99();
  swift_bridgeObjectRetain();
  sub_253578D2C();
  sub_253B05810();
  sub_25353CDD4();
  v100();
  uint64_t v154 = *(void (**)(void))(v152 + 16);
  uint64_t v101 = v148;
  uint64_t v102 = v155;
  ((void (*)(uint64_t, uint64_t, uint64_t))v154)(v135, v148, v155);
  sub_2534AF234();
  v103();
  sub_253578EEC();
  sub_2534AF234();
  v104();
  sub_25357931C();
  sub_253B05770();
  sub_253B05760();
  sub_253578768();
  sub_253578D94();
  uint64_t v105 = sub_253B056E0();
  sub_253538B64((uint64_t)v157, (uint64_t)(v26 + 29));
  uint64_t v106 = v134;
  v26[37] = v145;
  v26[38] = v106;
  sub_2534724A8(v26 + 34);
  sub_2535782A8();
  uint64_t v156 = v107;
  sub_2534AF234();
  v108();
  v26[39] = v105;
  ((void (*)(char *, uint64_t, uint64_t))v154)((char *)v26 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_databaseBaseURL, v101, v102);
  uint64_t v109 = v143;
  uint64_t v110 = v144;
  sub_253530A44(v143, (uint64_t)(v26 + 18));
  swift_retain();
  sub_253B08300();
  sub_253578C34();
  sub_253B08950();
  sub_2534D8E14();
  v111();
  if (v110)
  {
    sub_253578F2C();
    sub_253578F88();
    sub_25355B254();
    v158[0] = v126;
    v158[1] = v110;
    sub_253578C34();
    sub_253B09710();
    sub_25346C800();
    uint64_t v112 = v140;
    sub_253B09EE0();
    if (v112) {
      swift_release();
    }
    swift_release();
    sub_253530AA0(v109);
    unint64_t v113 = *(void (**)(void))(v152 + 8);
    sub_2534D91A0();
    v113();
    sub_25351C3E8();
    v114();
    sub_2535794C4();
    sub_2534659CC();
    v115();
    sub_2534D91A0();
    v113();
    sub_2534659CC();
    v116();
    sub_2534659CC();
    v117();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    sub_253530AA0(v109);
    sub_2534DA828();
    sub_2534659CC();
    v118();
    sub_2534659CC();
    v119();
    sub_2534659CC();
    v120();
    sub_2534659CC();
    v121();
  }
LABEL_10:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v157);
  sub_2534847C8();
}

uint64_t sub_25355BF64()
{
  v3[1] = *MEMORY[0x263EF8340];
  static ToolBoxUtility.stableHashData(hashableString:)();
  uint64_t v1 = v0;
  v3[0] = 0;
  objc_msgSend(v0, sel_getBytes_length_, v3, 8);

  return v3[0];
}

uint64_t sub_25355BFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_253B09350();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4[32];
  uint64_t v12 = v4[33];
  sub_253472068(v4 + 29, v11);
  v18[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48))(a2, a3, v11, v12);
  uint64_t v13 = sub_253B09400();
  uint64_t v15 = v14;
  sub_253B09410();
  sub_253B09340();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  void v18[2] = v13;
  void v18[3] = v15;
  swift_bridgeObjectRetain();
  sub_253B09860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_253B09860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_25355BF64();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_25355C1A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263F846F8];
  uint64_t v7 = sub_253B05800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(a1, v6, v7);
  *a2 = a3;
  uint64_t v8 = *MEMORY[0x263F84748];
  uint64_t v9 = sub_253B05870();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(a2, v8, v9);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a2, 0, 1, v9);
}

uint64_t sub_25355C28C()
{
  uint64_t v1 = sub_253B05390();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068((void *)(v0 + 232), *(void *)(v0 + 256));
  ToolboxDelegate.storagePath()();
  if (qword_269CDA7F0 != -1) {
    uint64_t v5 = swift_once();
  }
  MEMORY[0x270FA5388](v5);
  *(&v11 - 2) = (uint64_t)v4;
  uint64_t v7 = (uint64_t *)&v6[4];
  uint64_t v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_25357403C(v7, &v12);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = v12;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v9;
}

void sub_25355C414(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(*a1 + 16) || (sub_25396E4F0(), (v4 & 1) == 0))
  {
    sub_253B07040();
    sub_253B07030();
    sub_25346B350();
  }
  uint64_t v5 = *a1;
  if (*(void *)(*a1 + 16))
  {
    sub_25396E4F0();
    if (v7)
    {
      *a2 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_retain();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_25355C4B8(uint64_t a1)
{
  uint64_t v2 = sub_253B08A10();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_253B08B80();
}

void sub_25355C580()
{
  sub_2534B3258();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_253462A5C(&qword_269CDE848);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_25348360C();
  uint64_t v9 = sub_253B092C0();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_2534966B0();
  if (*v4)
  {
    uint64_t v52 = *v4;
    uint64_t v51 = v4[1];
    sub_253462A5C(&qword_269CDED30);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_253B22690;
    sub_253B08A90();
    uint64_t v14 = sub_253B09250();
    uint64_t v16 = v15;
    uint64_t v17 = *(void (**)(void))(v11 + 8);
    sub_253578D20();
    sub_2534D91AC();
    v17();
    *(void *)(inited + 32) = v14;
    uint64_t v53 = inited + 32;
    *(void *)(inited + 40) = v16;
    sub_253B08AC0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, 1, v9) == 1)
    {
      sub_253472458(v1, &qword_269CDE848);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v18 = sub_253B09250();
      uint64_t v19 = v20;
      uint64_t v21 = sub_2534D954C();
      ((void (*)(uint64_t))v17)(v21);
    }
    uint64_t v22 = v51;
    *(void *)(inited + 48) = v18;
    *(void *)(inited + 56) = v19;
    uint64_t v48 = v6;
    uint64_t v23 = sub_253B08AF0();
    uint64_t v25 = v24;
    char v26 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = *(void *)(inited + 16);
    uint64_t v55 = v51 + 56;
    uint64_t v29 = v52;
    uint64_t v30 = inited + 32;
    uint64_t v49 = v2;
    unint64_t v50 = v28;
    while (v27 < v28)
    {
      char v31 = v26;
      int v32 = (uint64_t *)(v30 + 16 * v27);
      uint64_t v33 = v32[1];
      if (v33)
      {
        uint64_t v34 = *v32;
        swift_bridgeObjectRetain();
        sub_253B0167C(v34, v33, v29);
        char v54 = v35;
        if (*(void *)(v22 + 16))
        {
          sub_253B0A5F0();
          swift_bridgeObjectRetain_n();
          sub_253B09630();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_253B09630();
          swift_bridgeObjectRelease();
          uint64_t v36 = sub_253B0A630();
          uint64_t v37 = -1 << *(unsigned char *)(v22 + 32);
          unint64_t v38 = v36 & ~v37;
          if ((*(void *)(v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38))
          {
            uint64_t v39 = ~v37;
            uint64_t v40 = *(void *)(v22 + 48);
            while (1)
            {
              uint64_t v41 = (void *)(v40 + 32 * v38);
              uint64_t v42 = v41[2];
              uint64_t v43 = v41[3];
              BOOL v44 = *v41 == v23 && v41[1] == v25;
              if (v44 || (sub_253B0A4C0() & 1) != 0)
              {
                if (v42 == v34 && v33 == v43) {
                  break;
                }
                sub_2534DA2E4();
                if (sub_253B0A4C0()) {
                  break;
                }
              }
              unint64_t v38 = (v38 + 1) & v39;
              if (((*(void *)(v55 + ((v38 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v2 = v49;
                uint64_t v29 = v52;
                uint64_t v22 = v51;
                goto LABEL_25;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_31:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v30 = v53;
          unint64_t v28 = v50;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        if (v54) {
          goto LABEL_31;
        }
      }
      char v26 = 1;
      unint64_t v27 = 1;
      if (v31)
      {
        swift_setDeallocating();
        sub_2539DF940();
        swift_bridgeObjectRelease();
        uint64_t v6 = v48;
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_29:
    uint64_t v46 = v2[32];
    uint64_t v47 = v2[33];
    sub_253472068(v2 + 29, v46);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 56))(v6, v46, v47);
LABEL_32:
    sub_253465A14();
  }
}

uint64_t sub_25355C990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  v7[13] = a2;
  v7[14] = a3;
  v7[19] = type metadata accessor for ToolboxVersion(0);
  v7[20] = swift_task_alloc();
  uint64_t v8 = sub_253B089F0();
  v7[21] = v8;
  v7[22] = *(void *)(v8 - 8);
  v7[23] = swift_task_alloc();
  uint64_t v9 = sub_253B08BC0();
  v7[24] = v9;
  v7[25] = *(void *)(v9 - 8);
  v7[26] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25355CAE4, 0, 0);
}

#error "25355CB14: call analysis failed (funcsize=233)"

uint64_t sub_25355CE9C()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  *(void *)(v3 + 296) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_release();
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25355CF80()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[32];
  sub_25357904C();
  if (*(void *)(*(void *)(v2 + 16) + 16))
  {
    sub_253579290();
    swift_bridgeObjectRetain();
    sub_253578C1C();
    sub_25355E16C(v3, v4, v5, v6, v7, v8, v9, v10);
    uint64_t v11 = v0[34];
    uint64_t v12 = v0[32];
    if (v1)
    {
      uint64_t v13 = v0[27];
      sub_253477128();
      v14();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25353847C(v13);
      sub_25353847C(v11);
      swift_release();
LABEL_8:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_25353556C();
      goto LABEL_10;
    }
    uint64_t v16 = v0[30];
    uint64_t v17 = v0[27];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25353847C(v17);
    sub_25353847C(v11);
    sub_25357904C();
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_253578D38();
    sub_2535380AC(v18, v19);
    *(void *)(v16 + 16) = v20;
    swift_bridgeObjectRelease();
    *(void *)(v12 + 16) = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    uint64_t v1 = 0;
  }
  else
  {
    sub_25353847C(v0[27]);
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_253578DF8();
    sub_25353847C(v15);
  }
  uint64_t v21 = v0[31];
  sub_2535789DC();
  uint64_t v22 = swift_bridgeObjectRetain();
  sub_25355E670(v22, v21);
  if (v1)
  {
    sub_253477128();
    v23();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_8;
  }
  sub_253477128();
  v25();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
LABEL_10:
  return v24();
}

uint64_t sub_25355D238(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint8_t *a10, uint64_t a11, uint8_t *buf, uint64_t a13, uint64_t a14, os_log_t log, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2535786D8();
  a32 = v34;
  a33 = v35;
  sub_253578BE8();
  a31 = v33;
  uint64_t v36 = *(void **)(v33 + 296);
  swift_release();
  *(void *)(v33 + 88) = v36;
  id v37 = v36;
  sub_253462A5C(&qword_26B24A590);
  sub_2534D9778();
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v33 + 304) == 5)
  {

    sub_253B08300();
    sub_253578810();
    unint64_t v38 = sub_253B089D0();
    os_log_type_t v39 = sub_253B09D60();
    int v40 = v39;
    BOOL v41 = os_log_type_enabled(v38, v39);
    uint64_t v43 = *(void *)(v33 + 176);
    uint64_t v42 = *(void *)(v33 + 184);
    uint64_t v44 = *(void *)(v33 + 168);
    if (v41)
    {
      a13 = v33 + 96;
      a17 = *(void *)(v33 + 168);
      a18 = v33 + 16;
      unint64_t v45 = *(void *)(v33 + 160);
      a9 = *(void *)(v33 + 152);
      uint64_t v46 = *(void **)(v33 + 104);
      os_log_t log = v38;
      uint64_t v47 = (uint8_t *)sub_253578480();
      a14 = sub_2534772AC();
      buf = v47;
      *(_DWORD *)uint64_t v47 = 136315138;
      *(void *)&a21 = a14;
      a10 = v47 + 4;
      HIDWORD(a11) = v40;
      a16 = v42;
      uint64_t v48 = v46[33];
      sub_253472068(v46 + 29, v46[32]);
      sub_2535355D8();
      v49();
      sub_253B06CD0();
      sub_253578F10();
      sub_25346CAF4();
      sub_2534659CC();
      v50();
      *(void *)(v33 + 96) = sub_253464DF8(v48, v45, (uint64_t *)&a21);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_253460000, v38, (os_log_type_t)v40, "ToolEmbeddingToolDatabase: received cancellation request. Cancelling %s toolbox.", v47, 0xCu);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(a16, a17);
    }
    else
    {
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }

    uint64_t v54 = *(void *)(v33 + 256);
    sub_25357904C();
    uint64_t v56 = *(void *)(v33 + 264);
    uint64_t v55 = *(void *)(v33 + 272);
    if (*(void *)(*(void *)(v54 + 16) + 16))
    {
      sub_253579290();
      a19 = v55;
      a20 = v56;
      a21 = *(_OWORD *)(v33 + 216);
      swift_bridgeObjectRetain();
      sub_253578C1C();
      uint64_t v65 = sub_25355E16C(v57, v58, v59, v60, v61, v62, v63, v64);
      uint64_t v66 = *(void *)(v33 + 272);
      uint64_t v67 = *(void *)(v33 + 256);
      a17 = v33 + 40;
      a18 = v65;
      uint64_t v68 = *(void *)(v33 + 240);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v69 = sub_2535793C0();
      sub_25353847C(v69);
      sub_25353847C(v66);
      sub_25357904C();
      uint64_t v70 = *(void *)(v68 + 16);
      swift_bridgeObjectRetain();
      sub_2535380AC(a18, v70);
      *(void *)(v68 + 16) = v71;
      swift_bridgeObjectRelease();
      *(void *)(v67 + 16) = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_25353847C(*(void *)(v33 + 216));
      swift_bridgeObjectRelease();
      sub_25353847C(v55);
    }
    uint64_t v72 = *(void *)(v33 + 248);
    sub_2535789DC();
    uint64_t v73 = swift_bridgeObjectRetain();
    sub_25355E670(v73, v72);
    sub_253477128();
    v83();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_253529DC4();
  }
  else
  {
    sub_253477128();
    v51();
    uint64_t v52 = sub_253578AC4();
    sub_25353847C(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = sub_2534D9778();
    sub_25353847C(v53);

    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_2534771C0();
  }
  sub_25357832C();
  return v75(v74, v75, v76, v77, v78, v79, v80, v81, a9, a10, a11, buf, a13, a14, log, a16, a17, a18, a19,
           a20,
           a21,
           *((void *)&a21 + 1),
           a22,
           a23,
           a24,
           a25);
}

uint64_t sub_25355D778(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_253B05860();
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  MEMORY[0x270FA5388](v5);
  unint64_t v50 = (void *)((char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_253B05830();
  MEMORY[0x270FA5388](v7 - 8);
  sub_253462A5C(&qword_269CDE580);
  if (a2)
  {
    uint64_t v45 = a1;
    uint64_t v48 = sub_253B057A0();
    uint64_t v8 = *(void *)(v48 - 8);
    uint64_t v47 = (v48 - 8) & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
    unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = swift_allocObject();
    long long v46 = xmmword_253B22680;
    *(_OWORD *)(v10 + 16) = xmmword_253B22680;
    uint64_t v49 = v10;
    v44[4] = v10 + v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253B05820();
    v44[2] = sub_253462A5C(&qword_269CDE5B8);
    uint64_t v11 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
    uint64_t v12 = *(void *)(*(void *)v11 + 72);
    uint64_t v13 = *(unsigned __int8 *)(*(void *)v11 + 80);
    uint64_t v14 = (v13 + 32) & ~v13;
    v44[0] = v13 | 7;
    v44[1] = v14 + v12;
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v46;
    uint64_t v16 = v15 + v14;
    uint64_t v17 = (void *)(v15 + v14 + v11[14]);
    _OWORD v44[3] = v2;
    uint64_t v18 = *MEMORY[0x263F846F8];
    uint64_t v19 = sub_253B05800();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v16, v18, v19);
    *uint64_t v17 = v45;
    v17[1] = a2;
    uint64_t v20 = *MEMORY[0x263F84740];
    uint64_t v21 = sub_253B05870();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v17, v20, v21);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v21);
    sub_253B05790();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v46;
    sub_25355C1A4(v22 + v14, (void *)(v22 + v14 + v11[14]), 3);
  }
  else
  {
    uint64_t v48 = sub_253B057A0();
    uint64_t v47 = (v48 - 8) & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
    uint64_t v23 = swift_allocObject();
    long long v46 = xmmword_253B22680;
    *(_OWORD *)(v23 + 16) = xmmword_253B22680;
    uint64_t v49 = v23;
    swift_bridgeObjectRetain();
    sub_253B05820();
    sub_253462A5C(&qword_269CDE5B8);
    uint64_t v24 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
    unint64_t v25 = (*(unsigned __int8 *)(*(void *)v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v24 + 80);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v46;
    unint64_t v27 = v26 + v25;
    uint64_t v28 = v26 + v25 + v24[14];
    uint64_t v29 = *MEMORY[0x263F846F0];
    uint64_t v30 = sub_253B05800();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v27, v29, v30);
    uint64_t v31 = sub_253B05870();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v28, 1, 1, v31);
    sub_253B05790();
    uint64_t v22 = MEMORY[0x263F8EE78];
  }
  sub_253462A5C(&qword_269CDE580);
  sub_253B057A0();
  unint64_t v32 = (*(unsigned __int8 *)(*(void *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_253B22680;
  uint64_t v48 = v33 + v32;
  uint64_t v35 = v50;
  uint64_t v34 = v51;
  *unint64_t v50 = 0;
  *((unsigned char *)v35 + 8) = 1;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v35, *MEMORY[0x263F84728], v52);
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  uint64_t v36 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
  uint64_t v37 = *(void *)(*(void *)v36 + 72);
  unint64_t v38 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_253B34E30;
  uint64_t v40 = v39 + v38;
  sub_25355C1A4(v40, (void *)(v40 + v36[14]), 1);
  sub_25355C1A4(v40 + v37, (void *)(v40 + v37 + v36[14]), 2);
  sub_25355C1A4(v40 + 2 * v37, (void *)(v40 + 2 * v37 + v36[14]), 4);
  uint64_t v54 = v39;
  sub_2534784DC(v22);
  sub_253B05790();
  uint64_t v54 = v33;
  sub_25347849C(v49);
  uint64_t v41 = v53;
  uint64_t v42 = sub_253B056D0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v41) {
    return sub_25353D1D8(v42);
  }
  return result;
}

uint64_t sub_25355DEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = v13;
  if (a2)
  {
    char v21 = *(unsigned char *)(a2 + 16);
    swift_retain();
    if (v21)
    {
      sub_2535382C4();
      swift_allocError();
      *uint64_t v33 = 5;
      swift_willThrow();
      return swift_release();
    }
    swift_release();
  }
  uint64_t v34 = a8;
  void v36[7] = a6;
  uint64_t v22 = a3 + 16;
  swift_beginAccess();
  sub_2539DFAAC();
  uint64_t v23 = *(void *)(*(void *)(a3 + 16) + 16);
  sub_2539DFB80(v23);
  uint64_t v24 = *(void *)(a3 + 16);
  *(void *)(*(void *)v22 + 16) = v23 + 1;
  uint64_t v25 = sub_253B08B30();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v24+ ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80))+ *(void *)(*(void *)(v25 - 8) + 72) * v23, a1, v25);
  swift_endAccess();
  sub_253B05690();
  v36[3] = sub_253B08AF0();
  v36[4] = v26;
  sub_253B05680();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v22 + 16) >= 0x32uLL)
  {
    v36[0] = a7;
    v36[1] = v34;
    v35[0] = a9;
    v35[1] = a10;
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = sub_25355E16C(v28, v36, v35, a11, a12, 0, 0, a2);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v14)
    {
      swift_beginAccess();
      uint64_t v30 = *(void *)(a13 + 16);
      swift_bridgeObjectRetain();
      sub_2535380AC(v29, v30);
      uint64_t v32 = v31;
      swift_beginAccess();
      *(void *)(a13 + 16) = v32;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(void *)uint64_t v22 = MEMORY[0x263F8EE78];
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_25355E16C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    sub_253B08B30();
    uint64_t v68 = v10;
    sub_25357854C();
    sub_2535786F4();
    uint64_t v15 = v9;
    uint64_t v17 = a1 + v16;
    swift_retain();
    sub_25354084C(v10);
    sub_25354084C(v11);
    uint64_t v66 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = MEMORY[0x263F8EE88];
    uint64_t v74 = MEMORY[0x263F8EE78];
    uint64_t v18 = a5;
    uint64_t v19 = a7;
    while (1)
    {
      v73[0] = v10;
      v73[1] = v15;
      uint64_t v20 = v11;
      v72[0] = v11;
      v72[1] = v12;
      uint64_t v21 = v12;
      uint64_t v22 = v18;
      uint64_t v23 = v19;
      uint64_t v24 = sub_25355ED6C(v17, v73, v72, a4, v18, a6, v19);
      if (v71) {
        break;
      }
      uint64_t v26 = v24;
      if (v24)
      {
        uint64_t v27 = v25;
        swift_bridgeObjectRetain();
        sub_25354084C(v26);
        swift_bridgeObjectRelease();
        sub_2535380AC(v27, v70);
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v30 = v74;
        }
        else
        {
          char v33 = sub_253579380();
          sub_2535237E0(v33, v34, v35, v36);
          uint64_t v30 = v37;
        }
        unint64_t v32 = *(void *)(v30 + 16);
        unint64_t v31 = *(void *)(v30 + 24);
        uint64_t v19 = v23;
        if (v32 >= v31 >> 1)
        {
          char v38 = sub_253526BBC(v31);
          uint64_t v40 = v39;
          sub_2535237E0(v38, v32 + 1, 1, v41);
          uint64_t v19 = v40;
          uint64_t v30 = v42;
        }
        uint64_t v12 = v21;
        *(void *)(v30 + 16) = v32 + 1;
        uint64_t v74 = v30;
        *(void *)(v30 + 8 * v32 + 32) = v26;
        uint64_t v70 = v29;
        uint64_t v18 = a5;
        uint64_t v11 = v20;
      }
      else
      {
        uint64_t v19 = v23;
        uint64_t v12 = v21;
        uint64_t v11 = v20;
        uint64_t v18 = v22;
      }
      v17 += v66;
      --v13;
      uint64_t v10 = v68;
      if (!v13)
      {
        a7 = v19;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v45 = v74;
        goto LABEL_16;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25353847C(v68);
    uint64_t v44 = sub_25357931C();
    sub_25353847C(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  uint64_t v43 = sub_2534D9724();
  sub_25354084C(v43);
  sub_25354084C(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v70 = MEMORY[0x263F8EE88];
  uint64_t v45 = MEMORY[0x263F8EE78];
LABEL_16:
  uint64_t v46 = sub_2534D9724();
  sub_25353847C(v46);
  sub_25353847C(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v45 + 16);
  if (v47)
  {
    uint64_t v48 = a7;
    uint64_t v49 = swift_bridgeObjectRetain();
    uint64_t v50 = 0;
    uint64_t v51 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v52 = *(void *)(v49 + 8 * v50 + 32);
      uint64_t v53 = *(void *)(v52 + 16);
      uint64_t v54 = *(void *)(v51 + 16);
      if (__OFADD__(v54, v53)) {
        break;
      }
      uint64_t v55 = v49;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v54 + v53 > *(void *)(v51 + 24) >> 1)
      {
        sub_253523728();
        uint64_t v51 = v56;
      }
      if (*(void *)(v52 + 16))
      {
        uint64_t v57 = *(void *)(v51 + 16);
        if ((*(void *)(v51 + 24) >> 1) - v57 < v53) {
          goto LABEL_41;
        }
        unint64_t v58 = v51 + 56 * v57 + 32;
        if (v52 + 32 < v58 + 56 * v53 && v58 < v52 + 32 + 56 * v53) {
          goto LABEL_43;
        }
        swift_arrayInitWithCopy();
        if (v53)
        {
          uint64_t v60 = *(void *)(v51 + 16);
          BOOL v61 = __OFADD__(v60, v53);
          uint64_t v62 = v60 + v53;
          if (v61) {
            goto LABEL_42;
          }
          *(void *)(v51 + 16) = v62;
        }
      }
      else if (v53)
      {
        goto LABEL_40;
      }
      swift_bridgeObjectRelease();
      ++v50;
      uint64_t v49 = v55;
      if (v47 == v50)
      {
        swift_bridgeObjectRelease();
        a7 = v48;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    uint64_t v51 = MEMORY[0x263F8EE78];
LABEL_36:
    swift_bridgeObjectRelease();
    sub_25355FB94(v51, a6, a7, a8);
    if (v71)
    {
LABEL_37:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v70;
  }
  return result;
}

uint64_t sub_25355E670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253B089F0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_253562ADC(a1, a2);
  if (!*(void *)(v14 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v41 = v11;
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_25350BEE8(v15);
  swift_bridgeObjectRelease();
  sub_253B056F0();
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_release();
    sub_253B08300();
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_253B089D0();
    os_log_type_t v18 = sub_253B09D60();
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v40 = (_DWORD *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v43 = v38;
      uint64_t v20 = v40;
      *uint64_t v40 = 136315394;
      char v35 = v20 + 1;
      int v37 = v19;
      uint64_t v39 = v10;
      uint64_t v22 = v4[32];
      uint64_t v21 = v4[33];
      sub_253472068(v4 + 29, v22);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
      os_log_t v36 = v17;
      v23(v22, v21);
      uint64_t v24 = &v9[*(int *)(v7 + 20)];
      uint64_t v25 = sub_253B06CD0();
      unint64_t v27 = v26;
      uint64_t v28 = sub_253B06CE0();
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v24, v28);
      uint64_t v29 = sub_253464DF8(v25, v27, &v43);
      uint64_t v30 = (uint8_t *)v40;
      uint64_t v42 = v29;
      sub_253B09E80();
      swift_release_n();
      swift_bridgeObjectRelease();
      unint64_t v31 = v30;
      *((_WORD *)v30 + 6) = 2048;
      uint64_t v32 = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      uint64_t v42 = v32;
      sub_253B09E80();
      swift_bridgeObjectRelease();
      os_log_t v33 = v36;
      _os_log_impl(&dword_253460000, v36, (os_log_type_t)v37, "%s toolbox: Removed %ld tools from the toolbox", v31, 0x16u);
      uint64_t v34 = v38;
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v34, -1, -1);
      MEMORY[0x25A269E60](v31, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v13, v39);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v13, v10);
    }
  }
}

uint64_t sub_25355EA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  sub_253B07040();
  v4[6] = sub_253573548((unint64_t *)&qword_269CDED78, MEMORY[0x263F61DE8]);
  uint64_t v6 = sub_253B09BA0();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](sub_25355EB08, v6, v5);
}

uint64_t sub_25355EB08()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_25355EC10;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA2360](v6, v1, v2, 0x286D726F66726570, 0xEB00000000293A5FLL, sub_253573E48, v3, v7);
}

uint64_t sub_25355EC10()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *long long v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  v3[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[7];
    uint64_t v8 = v3[8];
    return MEMORY[0x270FA2498](sub_25355ED10, v7, v8);
  }
  else
  {
    swift_task_dealloc();
    sub_2534771C0();
    return v9();
  }
}

uint64_t sub_25355ED10()
{
  sub_253477168();
  swift_task_dealloc();
  sub_2534771C0();
  return v0();
}

uint64_t sub_25355ED6C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v175 = a6;
  uint64_t v176 = a7;
  uint64_t v14 = sub_253B092C0();
  uint64_t v178 = *(void *)(v14 - 8);
  uint64_t v179 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v177 = (uint64_t)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = *a2;
  uint64_t v173 = a2[1];
  uint64_t v172 = *a3;
  uint64_t v171 = a3[1];
  uint64_t v192 = MEMORY[0x263F8EE88];
  sub_253B08AF0();
  uint64_t v16 = *(void *)(a5 + 16);
  uint64_t v188 = a1;
  if (!v16 || (unint64_t v17 = sub_25396E0AC(), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_253B08AB0();
    if (v34)
    {
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      uint64_t v190 = sub_253B08AF0();
      uint64_t v191 = v37;
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      uint64_t v38 = sub_25355BF64();
      swift_bridgeObjectRelease();
      sub_2539E13C0((uint64_t)&v190, v38, v39, v40, v41, v42, v43, v44, v168, v169);
      sub_253B018C8(v38, a4);
      if ((v45 & 1) == 0)
      {
        sub_253523864();
        uint64_t v32 = v46;
        unint64_t v47 = *(void *)(v46 + 16);
        if (v47 >= *(void *)(v46 + 24) >> 1)
        {
          sub_253523864();
          uint64_t v32 = v166;
        }
        *(void *)(v32 + 16) = v47 + 1;
        uint64_t v48 = v32 + 32 * v47;
        *(void *)(v48 + 32) = v38;
        *(void *)(v48 + 40) = v35;
        *(void *)(v48 + 48) = v36;
        *(unsigned char *)(v48 + 56) = 0;
LABEL_12:
        uint64_t v49 = sub_253B08AD0();
        if (v7)
        {
LABEL_101:
          uint64_t v161 = v192;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v161;
        }
        uint64_t v182 = *(void *)(v49 + 16);
        if (!v182) {
          goto LABEL_92;
        }
        uint64_t v170 = 0;
        uint64_t v50 = v49;
        uint64_t v51 = *(void *)(sub_253B09490() - 8);
        unint64_t v181 = v50 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
        uint64_t v180 = *(void *)(v51 + 72);
        uint64_t v52 = a4 + 56;
        uint64_t v169 = v50;
        swift_bridgeObjectRetain();
        uint64_t v53 = 0;
        while (1)
        {
          uint64_t v185 = v53;
          uint64_t v54 = v181 + v180 * v53;
          uint64_t v55 = sub_253B09480();
          uint64_t v187 = *(void *)(v55 + 16);
          if (v187)
          {
            uint64_t v183 = v55;
            uint64_t v184 = v54;
            uint64_t v186 = v55 + 32;
            swift_bridgeObjectRetain();
            uint64_t v56 = 0;
            while (1)
            {
              uint64_t v57 = (uint64_t *)(v186 + 16 * v56);
              uint64_t v58 = *v57;
              uint64_t v59 = v57[1];
              swift_bridgeObjectRetain();
              uint64_t v190 = sub_253B08AF0();
              uint64_t v191 = v60;
              swift_bridgeObjectRetain();
              sub_253B09860();
              swift_bridgeObjectRelease();
              uint64_t v61 = sub_25355BF64();
              swift_bridgeObjectRelease();
              uint64_t v62 = v192;
              uint64_t v63 = sub_253B0A5E0();
              uint64_t v64 = -1 << *(unsigned char *)(v62 + 32);
              unint64_t v65 = v63 & ~v64;
              if (((*(void *)(v62 + 56 + ((v65 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v65) & 1) == 0) {
                goto LABEL_23;
              }
              uint64_t v66 = *(void *)(v62 + 48);
              if (*(void *)(v66 + 8 * v65) != v61) {
                break;
              }
LABEL_24:
              if (!*(void *)(a4 + 16)) {
                goto LABEL_31;
              }
              uint64_t v69 = sub_253B0A5E0();
              uint64_t v70 = -1 << *(unsigned char *)(a4 + 32);
              unint64_t v71 = v69 & ~v70;
              if (((*(void *)(v52 + ((v71 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v71) & 1) == 0) {
                goto LABEL_31;
              }
              uint64_t v72 = *(void *)(a4 + 48);
              if (*(void *)(v72 + 8 * v71) != v61)
              {
                uint64_t v73 = ~v70;
                while (1)
                {
                  unint64_t v71 = (v71 + 1) & v73;
                  if (((*(void *)(v52 + ((v71 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v71) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v72 + 8 * v71) == v61) {
                    goto LABEL_36;
                  }
                }
LABEL_31:
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_253523864();
                  uint64_t v32 = v76;
                }
                unint64_t v74 = *(void *)(v32 + 16);
                if (v74 >= *(void *)(v32 + 24) >> 1)
                {
                  sub_253523864();
                  uint64_t v32 = v77;
                }
                *(void *)(v32 + 16) = v74 + 1;
                uint64_t v75 = v32 + 32 * v74;
                *(void *)(v75 + 32) = v61;
                *(void *)(v75 + 40) = v58;
                *(void *)(v75 + 48) = v59;
                *(unsigned char *)(v75 + 56) = 0;
              }
LABEL_36:
              swift_bridgeObjectRelease();
              if (++v56 == v187)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_39;
              }
            }
            uint64_t v67 = ~v64;
            while (1)
            {
              unint64_t v65 = (v65 + 1) & v67;
              if (((*(void *)(v62 + 56 + ((v65 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v65) & 1) == 0) {
                break;
              }
              if (*(void *)(v66 + 8 * v65) == v61) {
                goto LABEL_24;
              }
            }
LABEL_23:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v190 = v62;
            sub_2539E3CCC(v61, v65, isUniquelyReferenced_nonNull_native);
            uint64_t v192 = v190;
            swift_bridgeObjectRelease();
            goto LABEL_24;
          }
          swift_bridgeObjectRelease();
LABEL_39:
          uint64_t v78 = sub_253B09470();
          uint64_t v187 = *(void *)(v78 + 16);
          if (v187) {
            break;
          }
          swift_bridgeObjectRelease();
LABEL_63:
          uint64_t v53 = v185 + 1;
          if (v185 + 1 == v182) {
            goto LABEL_90;
          }
        }
        uint64_t v186 = v78 + 32;
        uint64_t v184 = v78;
        swift_bridgeObjectRetain();
        uint64_t v79 = 0;
        while (1)
        {
          uint64_t v80 = (uint64_t *)(v186 + 16 * v79);
          uint64_t v81 = *v80;
          uint64_t v82 = v80[1];
          swift_bridgeObjectRetain();
          uint64_t v190 = sub_253B08AF0();
          uint64_t v191 = v83;
          swift_bridgeObjectRetain();
          sub_253B09860();
          swift_bridgeObjectRelease();
          uint64_t v84 = sub_25355BF64();
          swift_bridgeObjectRelease();
          uint64_t v85 = v192;
          uint64_t v86 = sub_253B0A5E0();
          uint64_t v87 = -1 << *(unsigned char *)(v85 + 32);
          unint64_t v88 = v86 & ~v87;
          if (((*(void *)(v85 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
            goto LABEL_47;
          }
          uint64_t v89 = *(void *)(v85 + 48);
          if (*(void *)(v89 + 8 * v88) != v84) {
            break;
          }
LABEL_48:
          if (!*(void *)(a4 + 16)) {
            goto LABEL_55;
          }
          uint64_t v92 = sub_253B0A5E0();
          uint64_t v93 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v94 = v92 & ~v93;
          if (((*(void *)(v52 + ((v94 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v94) & 1) == 0) {
            goto LABEL_55;
          }
          uint64_t v95 = *(void *)(a4 + 48);
          if (*(void *)(v95 + 8 * v94) != v84)
          {
            uint64_t v96 = ~v93;
            while (1)
            {
              unint64_t v94 = (v94 + 1) & v96;
              if (((*(void *)(v52 + ((v94 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v94) & 1) == 0) {
                break;
              }
              if (*(void *)(v95 + 8 * v94) == v84) {
                goto LABEL_60;
              }
            }
LABEL_55:
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_253523864();
              uint64_t v32 = v99;
            }
            unint64_t v97 = *(void *)(v32 + 16);
            if (v97 >= *(void *)(v32 + 24) >> 1)
            {
              sub_253523864();
              uint64_t v32 = v100;
            }
            *(void *)(v32 + 16) = v97 + 1;
            uint64_t v98 = v32 + 32 * v97;
            *(void *)(v98 + 32) = v84;
            *(void *)(v98 + 40) = v81;
            *(void *)(v98 + 48) = v82;
            *(unsigned char *)(v98 + 56) = 1;
          }
LABEL_60:
          swift_bridgeObjectRelease();
          if (++v79 == v187)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_63;
          }
        }
        uint64_t v90 = ~v87;
        while (1)
        {
          unint64_t v88 = (v88 + 1) & v90;
          if (((*(void *)(v85 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v88) & 1) == 0) {
            break;
          }
          if (*(void *)(v89 + 8 * v88) == v84) {
            goto LABEL_48;
          }
        }
LABEL_47:
        char v91 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v190 = v85;
        sub_2539E3CCC(v84, v88, v91);
        uint64_t v192 = v190;
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = MEMORY[0x263F8EE78];
    goto LABEL_12;
  }
  int v19 = (uint64_t *)(*(void *)(a5 + 56) + 32 * v17);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[2];
  uint64_t v22 = v19[3];
  uint64_t v187 = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v190 = sub_253B08AF0();
  uint64_t v191 = v23;
  swift_bridgeObjectRetain();
  sub_253B09860();
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_25355BF64();
  swift_bridgeObjectRelease();
  sub_2539E13C0((uint64_t)&v190, v24, v25, v26, v27, v28, v29, v30, v168, v169);
  sub_253B018C8(v24, a4);
  uint64_t v186 = v22;
  if (v31)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_253523864();
    uint64_t v32 = v101;
    unint64_t v102 = *(void *)(v101 + 16);
    if (v102 >= *(void *)(v101 + 24) >> 1)
    {
      sub_253523864();
      uint64_t v32 = v167;
    }
    *(void *)(v32 + 16) = v102 + 1;
    uint64_t v103 = v32 + 32 * v102;
    *(void *)(v103 + 32) = v24;
    *(void *)(v103 + 40) = v21;
    *(void *)(v103 + 48) = v186;
    *(unsigned char *)(v103 + 56) = 0;
  }
  uint64_t v104 = v187;
  if (v20)
  {
    uint64_t v105 = *(void *)(v20 + 16);
    if (v105)
    {
      uint64_t v170 = v7;
      swift_bridgeObjectRetain_n();
      uint64_t v185 = v20;
      uint64_t v106 = (uint64_t *)(v20 + 40);
      do
      {
        uint64_t v108 = *(v106 - 1);
        uint64_t v107 = *v106;
        swift_bridgeObjectRetain();
        uint64_t v190 = sub_253B08AF0();
        uint64_t v191 = v109;
        swift_bridgeObjectRetain();
        sub_253B09860();
        swift_bridgeObjectRelease();
        uint64_t v110 = sub_25355BF64();
        swift_bridgeObjectRelease();
        sub_2539E13C0((uint64_t)&v190, v110, v111, v112, v113, v114, v115, v116, v168, v169);
        sub_253B018C8(v110, a4);
        if ((v117 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_253523864();
            uint64_t v32 = v120;
          }
          unint64_t v118 = *(void *)(v32 + 16);
          if (v118 >= *(void *)(v32 + 24) >> 1)
          {
            sub_253523864();
            uint64_t v32 = v121;
          }
          *(void *)(v32 + 16) = v118 + 1;
          uint64_t v119 = v32 + 32 * v118;
          *(void *)(v119 + 32) = v110;
          *(void *)(v119 + 40) = v108;
          *(void *)(v119 + 48) = v107;
          *(unsigned char *)(v119 + 56) = 0;
        }
        v106 += 2;
        swift_bridgeObjectRelease();
        --v105;
      }
      while (v105);
      uint64_t v20 = v185;
      swift_bridgeObjectRelease_n();
      uint64_t v8 = v170;
      uint64_t v104 = v187;
    }
  }
  if (!v104 || (uint64_t v122 = *(void *)(v104 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_92:
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  uint64_t v185 = v20;
  uint64_t v170 = v8;
  swift_bridgeObjectRetain_n();
  uint64_t v123 = (uint64_t *)(v104 + 40);
  do
  {
    uint64_t v125 = *(v123 - 1);
    uint64_t v124 = *v123;
    swift_bridgeObjectRetain();
    uint64_t v190 = sub_253B08AF0();
    uint64_t v191 = v126;
    swift_bridgeObjectRetain();
    sub_253B09860();
    swift_bridgeObjectRelease();
    uint64_t v127 = sub_25355BF64();
    swift_bridgeObjectRelease();
    sub_2539E13C0((uint64_t)&v190, v127, v128, v129, v130, v131, v132, v133, v168, v169);
    sub_253B018C8(v127, a4);
    if ((v134 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253523864();
        uint64_t v32 = v137;
      }
      unint64_t v135 = *(void *)(v32 + 16);
      if (v135 >= *(void *)(v32 + 24) >> 1)
      {
        sub_253523864();
        uint64_t v32 = v138;
      }
      *(void *)(v32 + 16) = v135 + 1;
      uint64_t v136 = v32 + 32 * v135;
      *(void *)(v136 + 32) = v127;
      *(void *)(v136 + 40) = v125;
      *(void *)(v136 + 48) = v124;
      *(unsigned char *)(v136 + 56) = 1;
    }
    v123 += 2;
    swift_bridgeObjectRelease();
    --v122;
  }
  while (v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_90:
  swift_bridgeObjectRelease_n();
  uint64_t v8 = v170;
LABEL_93:
  uint64_t v139 = v177;
  sub_253B08A90();
  uint64_t v140 = sub_253B09270();
  unint64_t v142 = v141;
  (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v139, v179);
  sub_253B08B00();
  uint64_t v190 = v140;
  uint64_t v191 = v142;
  swift_bridgeObjectRetain();
  sub_253B09860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v143 = sub_253B01F34(0, v190, v191);
  uint64_t v145 = v144;
  swift_bridgeObjectRelease();
  uint64_t v190 = sub_253B08AF0();
  uint64_t v191 = v146;
  swift_bridgeObjectRetain();
  sub_253B09860();
  swift_bridgeObjectRelease();
  uint64_t v147 = sub_25355BF64();
  swift_bridgeObjectRelease();
  sub_2539E13C0((uint64_t)&v190, v147, v148, v149, v150, v151, v152, v153, v168, v169);
  sub_253B018C8(v147, a4);
  if (v154)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_253523864();
      uint64_t v32 = v164;
    }
    unint64_t v158 = *(void *)(v32 + 16);
    if (v158 >= *(void *)(v32 + 24) >> 1)
    {
      sub_253523864();
      uint64_t v32 = v165;
    }
    *(void *)(v32 + 16) = v158 + 1;
    uint64_t v159 = v32 + 32 * v158;
    *(void *)(v159 + 32) = v147;
    *(void *)(v159 + 40) = v143;
    *(void *)(v159 + 48) = v145;
    *(unsigned char *)(v159 + 56) = 0;
  }
  uint64_t v190 = v174;
  uint64_t v191 = v173;
  v189[0] = v172;
  v189[1] = v171;
  sub_2535678BC(v188, (uint64_t)&v190, (uint64_t)v189, v175, v176, v155, v156, v157, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178,
    v179);
  if (v8) {
    goto LABEL_101;
  }
  uint64_t v163 = v160;
  if (v160)
  {
    MEMORY[0x270FA5388](v160);
    *(&v168 - 2) = v188;
    *(&v168 - 1) = v163;
    swift_bridgeObjectRetain();
    uint64_t v161 = sub_253964620((uint64_t)sub_2535746E0, (uint64_t)(&v168 - 4), v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v161;
}

uint64_t sub_25355FB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v44 = *(void *)v7;
  uint64_t v12 = sub_253B089F0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    char v16 = *(unsigned char *)(a4 + 16);
    swift_retain();
    if (v16)
    {
      sub_2535382C4();
      swift_allocError();
      unsigned char *v32 = 5;
      swift_willThrow();
      return swift_release();
    }
    swift_release();
  }
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = v6;
  uint64_t v17 = *((void *)v7 + 32);
  uint64_t v18 = *((void *)v7 + 33);
  sub_253472068((void *)v7 + 29, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 8))(&v47, v17, v18);
  unsigned __int8 v46 = v47;
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v36 = v19;
  if (v19)
  {
    uint64_t v38 = v15;
    uint64_t v39 = v13;
    uint64_t v40 = v12;
    uint64_t v45 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v20 = v45;
    uint64_t v37 = a1;
    uint64_t v21 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v22 = *(v21 - 1);
      uint64_t v23 = *v21;
      uint64_t v45 = v20;
      unint64_t v25 = *(void *)(v20 + 16);
      unint64_t v24 = *(void *)(v20 + 24);
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
      {
        sub_2539E6C84();
        uint64_t v20 = v45;
      }
      *(void *)(v20 + 16) = v25 + 1;
      uint64_t v26 = v20 + 16 * v25;
      *(void *)(v26 + 32) = v22;
      *(void *)(v26 + 40) = v23;
      v21 += 7;
      --v19;
    }
    while (v19);
    uint64_t v13 = v39;
    uint64_t v12 = v40;
    a1 = v37;
    uint64_t v15 = v38;
  }
  uint64_t v27 = (uint64_t)&v7[OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter];
  uint64_t v28 = v42;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v29 = v27;
  uint64_t v30 = v43;
  sub_253555564(v20, 200, v29, &v46, a1, v41, v28, v7, a4);
  if (v30) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_253B08360();
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_253B089D0();
  os_log_type_t v34 = sub_253B09D90();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 134217984;
    uint64_t v45 = v36;
    sub_253B09E80();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_253460000, v33, v34, "ToolEmbeddingToolDatabase inserted %ld embeddings", v35, 0xCu);
    MEMORY[0x25A269E60](v35, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_25355FF2C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = v5;
  *(void *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = a4;
  *(void *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 56) = *a2;
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25355FF60()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[2];
  v0[9] = sub_25355C28C();
  uint64_t v8 = (void *)swift_allocObject();
  v0[10] = v8;
  _OWORD v8[2] = v3;
  v8[3] = v6;
  v8[4] = v4;
  v8[5] = v7;
  v8[6] = v2;
  v8[7] = v1;
  unsigned char v8[8] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = sub_25351C5CC();
  sub_25354084C(v9);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_269CDED70 + dword_269CDED70);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[11] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_2535600B0;
  return v12((uint64_t)v12, (uint64_t)&unk_269CDEE60, (uint64_t)v8);
}

uint64_t sub_2535600B0()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_253535478();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  *uint64_t v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25356019C()
{
  sub_253529DC4();
  return v0();
}

uint64_t sub_2535601B4()
{
  sub_253477168();
  swift_release();
  swift_release();
  sub_2534771C0();
  return v0();
}

uint64_t sub_253560218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  unsigned char v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a3;
  v8[4] = a4;
  _OWORD v8[2] = a2;
  return MEMORY[0x270FA2498](sub_253560244, 0, 0);
}

uint64_t sub_253560244()
{
  uint64_t v27 = v0;
  uint64_t v1 = sub_25355D778(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_253552CB4(v1, v2, v3, v4, v5, v6, v7, v8, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v23, v24, v25, v26, v0, v28,
    v29);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 24);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v21 = *(_OWORD *)(v0 + 48);
  sub_25355E16C(v12, &v19, (uint64_t *)&v21, v1, v10, v14, v13, v11);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_25353CE6C();
  sub_25355E670(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253529DC4();
  return v18();
}

uint64_t sub_253560338(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v200 = a4;
  uint64_t v219 = a3;
  uint64_t v218 = type metadata accessor for AssistantSchema(0);
  uint64_t v214 = *(void *)(v218 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v218);
  uint64_t v212 = (uint64_t)&v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v208 = (uint64_t)&v193 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v226 = (uint64_t)&v193 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v210 = (uint64_t)&v193 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v206 = (uint64_t)&v193 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v202 = (uint64_t)&v193 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v207 = (unint64_t)&v193 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v203 = (uint64_t)&v193 - v20;
  uint64_t v21 = sub_253462A5C(&qword_269CDB450);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v199 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v23 = MEMORY[0x270FA5388](v217);
  uint64_t v209 = (char *)&v193 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v211 = (char *)&v193 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v193 = (char *)&v193 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  os_signpost_id_t v204 = (char *)&v193 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v205 = (char *)&v193 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v194 = (char *)&v193 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v201 = (char *)&v193 - v35;
  uint64_t v36 = sub_253B09440();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v224 = (uint64_t)&v193 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_253462A5C(&qword_269CDE7B8);
  uint64_t v40 = v39 - 8;
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = sub_253B08A60();
  uint64_t v43 = *(void *)(v220 - 8);
  MEMORY[0x270FA5388](v220);
  uint64_t v225 = (char *)&v193 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(int *)(v40 + 56);
  unsigned __int8 v46 = &v42[v45];
  uint64_t v215 = a2;
  uint64_t v47 = a2 + v45;
  os_log_type_t v213 = (void *)(a2 + v45);
  uint64_t v222 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  uint64_t v223 = v37 + 16;
  v222(v42, a2, v36);
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v221 = v43 + 16;
  uint64_t v49 = v47;
  uint64_t v50 = v220;
  v48(v46, v49, v220);
  unint64_t v216 = (void (*)(uint64_t, char *, uint64_t))v48;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v225, v46, v50);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  uint64_t v197 = v37 + 8;
  uint64_t v196 = v51;
  v51((uint64_t)v42, v36);
  uint64_t v52 = &v42[*(int *)(v40 + 56)];
  v222(v42, v215, v36);
  v48(v52, (uint64_t)v213, v50);
  uint64_t v53 = v224;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v224, v42, v36);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
  uint64_t v198 = v43 + 8;
  unsigned __int8 v195 = v54;
  v54(v52, v50);
  uint64_t v55 = sub_253B09400();
  unint64_t v57 = sub_253B01F34(0, v55, v56);
  uint64_t v59 = v58;
  swift_bridgeObjectRelease();
  os_log_type_t v213 = (void *)sub_25355BFDC(v53, v57, v59);
  uint64_t v60 = (uint64_t)v201;
  uint64_t v215 = v36;
  uint64_t v61 = v36;
  uint64_t v62 = v225;
  v222(v201, v53, v61);
  uint64_t v63 = (uint64_t)v199;
  uint64_t v64 = v217;
  v216(v60 + *(int *)(v217 + 20), v62, v50);
  *(unsigned char *)(v60 + *(int *)(v64 + 24)) = 0;
  sub_25357369C(v60, v63);
  uint64_t v65 = v218;
  uint64_t v66 = (unint64_t *)(v63 + *(int *)(v218 + 20));
  unint64_t *v66 = v57;
  v66[1] = v59;
  uint64_t v67 = v200;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v63, 0, 1, v65);
  sub_253469480(v63);
  sub_253B09400();
  uint64_t v68 = *(void *)(v67 + 16);
  os_log_type_t v213 = a1;
  if (v68)
  {
    unint64_t v69 = sub_25396E0AC();
    if (v70)
    {
      unint64_t v71 = (uint64_t *)(*(void *)(v67 + 56) + 32 * v69);
      uint64_t v72 = *v71;
      uint64_t v73 = v71[2];
      uint64_t v74 = v71[3];
      uint64_t v226 = v71[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v75 = v63;
      uint64_t v76 = v224;
      uint64_t v212 = sub_25355BFDC(v224, v73, v74);
      uint64_t v77 = (uint64_t)v194;
      v222(v194, v76, v215);
      uint64_t v78 = v217;
      v216(v77 + *(int *)(v217 + 20), v62, v220);
      *(unsigned char *)(v77 + *(int *)(v78 + 24)) = 0;
      sub_25357369C(v77, v75);
      uint64_t v79 = v218;
      uint64_t v80 = (uint64_t *)(v75 + *(int *)(v218 + 20));
      *uint64_t v80 = v73;
      v80[1] = v74;
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v75, 0, 1, v79);
      uint64_t v211 = (char *)v74;
      swift_bridgeObjectRetain();
      sub_253469480(v75);
      if (v72)
      {
        uint64_t v81 = *(void *)(v72 + 16);
        if (v81)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v212 = v72;
          uint64_t v82 = (uint64_t *)(v72 + 40);
          uint64_t v83 = (uint64_t)v205;
          while (1)
          {
            uint64_t v84 = *(v82 - 1);
            uint64_t v85 = *v82;
            swift_bridgeObjectRetain();
            uint64_t v86 = v224;
            uint64_t v87 = sub_25355BFDC(v224, v84, v85);
            v222((char *)v83, v86, v215);
            uint64_t v88 = v217;
            v216(v83 + *(int *)(v217 + 20), v225, v220);
            *(unsigned char *)(v83 + *(int *)(v88 + 24)) = 0;
            uint64_t v89 = v203;
            sub_25357369C(v83, v203);
            uint64_t v90 = (uint64_t *)(v89 + *(int *)(v218 + 20));
            *uint64_t v90 = v84;
            v90[1] = v85;
            sub_253573624(v89, v207);
            swift_bridgeObjectRetain();
            swift_isUniquelyReferenced_nonNull_native();
            long long v227 = (void *)*a1;
            char v91 = v227;
            *a1 = 0x8000000000000000;
            unint64_t v92 = sub_25396E650();
            if (__OFADD__(v91[2], (v93 & 1) == 0)) {
              goto LABEL_70;
            }
            unint64_t v94 = v92;
            char v95 = v93;
            sub_253462A5C(&qword_269CDB458);
            char v96 = sub_253B0A190();
            uint64_t v83 = (uint64_t)v205;
            if (v96)
            {
              unint64_t v97 = sub_25396E650();
              if ((v95 & 1) != (v98 & 1)) {
                goto LABEL_74;
              }
              unint64_t v94 = v97;
            }
            uint64_t v99 = v227;
            if (v95)
            {
              sub_25346C9D0(v207, v227[7] + *(void *)(v214 + 72) * v94);
            }
            else
            {
              v227[(v94 >> 6) + 8] |= 1 << v94;
              *(void *)(v99[6] + 8 * v94) = v87;
              sub_253573624(v207, v99[7] + *(void *)(v214 + 72) * v94);
              uint64_t v100 = v99[2];
              BOOL v101 = __OFADD__(v100, 1);
              uint64_t v102 = v100 + 1;
              if (v101) {
                goto LABEL_72;
              }
              v99[2] = v102;
            }
            v82 += 2;
            a1 = v213;
            *os_log_type_t v213 = v99;
            swift_bridgeObjectRelease();
            sub_2535734F4(v83, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
            swift_bridgeObjectRelease();
            if (!--v81)
            {
              uint64_t v72 = v212;
              swift_bridgeObjectRelease_n();
              uint64_t v62 = v225;
              break;
            }
          }
        }
      }
      uint64_t v103 = v226;
      if (v226)
      {
        uint64_t v104 = *(void *)(v226 + 16);
        if (v104)
        {
          uint64_t v212 = v72;
          swift_bridgeObjectRetain_n();
          uint64_t v105 = (uint64_t *)(v103 + 40);
          uint64_t v106 = (uint64_t)v204;
          while (1)
          {
            uint64_t v107 = *(v105 - 1);
            uint64_t v108 = *v105;
            swift_bridgeObjectRetain();
            uint64_t v109 = v224;
            uint64_t v110 = sub_25355BFDC(v224, v107, v108);
            v222((char *)v106, v109, v215);
            uint64_t v111 = v217;
            v216(v106 + *(int *)(v217 + 20), v225, v220);
            *(unsigned char *)(v106 + *(int *)(v111 + 24)) = 1;
            uint64_t v112 = v202;
            sub_25357369C(v106, v202);
            uint64_t v113 = (uint64_t *)(v112 + *(int *)(v218 + 20));
            *uint64_t v113 = v107;
            v113[1] = v108;
            sub_253573624(v112, v206);
            swift_bridgeObjectRetain();
            swift_isUniquelyReferenced_nonNull_native();
            long long v227 = (void *)*a1;
            uint64_t v114 = v227;
            *a1 = 0x8000000000000000;
            unint64_t v115 = sub_25396E650();
            if (__OFADD__(v114[2], (v116 & 1) == 0)) {
              goto LABEL_71;
            }
            unint64_t v117 = v115;
            char v118 = v116;
            sub_253462A5C(&qword_269CDB458);
            char v119 = sub_253B0A190();
            uint64_t v106 = (uint64_t)v204;
            if (v119)
            {
              unint64_t v120 = sub_25396E650();
              if ((v118 & 1) != (v121 & 1)) {
                goto LABEL_74;
              }
              unint64_t v117 = v120;
            }
            uint64_t v122 = v227;
            if (v118)
            {
              sub_25346C9D0(v206, v227[7] + *(void *)(v214 + 72) * v117);
            }
            else
            {
              v227[(v117 >> 6) + 8] |= 1 << v117;
              *(void *)(v122[6] + 8 * v117) = v110;
              sub_253573624(v206, v122[7] + *(void *)(v214 + 72) * v117);
              uint64_t v123 = v122[2];
              BOOL v101 = __OFADD__(v123, 1);
              uint64_t v124 = v123 + 1;
              if (v101) {
                goto LABEL_73;
              }
              v122[2] = v124;
            }
            v105 += 2;
            a1 = v213;
            *os_log_type_t v213 = v122;
            swift_bridgeObjectRelease();
            sub_2535734F4(v106, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
            swift_bridgeObjectRelease();
            if (!--v104)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              uint64_t v62 = v225;
              goto LABEL_66;
            }
          }
        }
      }
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v125 = sub_253B08A50();
  if (v126)
  {
    uint64_t v127 = v125;
    uint64_t v128 = v126;
    uint64_t v129 = v224;
    sub_25355BFDC(v224, v125, v126);
    uint64_t v130 = (uint64_t)v193;
    v222(v193, v129, v215);
    uint64_t v131 = v217;
    v216(v130 + *(int *)(v217 + 20), v62, v220);
    *(unsigned char *)(v130 + *(int *)(v131 + 24)) = 0;
    sub_25357369C(v130, v63);
    uint64_t v132 = v218;
    uint64_t v133 = (uint64_t *)(v63 + *(int *)(v218 + 20));
    *uint64_t v133 = v127;
    v133[1] = v128;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v63, 0, 1, v132);
    sub_253469480(v63);
    sub_2535734F4(v130, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
  }
  uint64_t v134 = sub_253B08A40();
  uint64_t v205 = *(char **)(v134 + 16);
  if (!v205)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t v162 = sub_253B08A40();
    uint64_t v210 = *(void *)(v162 + 16);
    if (!v210)
    {
LABEL_61:
      swift_bridgeObjectRelease();
LABEL_67:
      uint64_t v190 = v196;
      uint64_t v191 = v195;
      sub_2535734F4((uint64_t)v201, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
      v190(v224, v215);
      return v191(v62, v220);
    }
    uint64_t v163 = 0;
    uint64_t v164 = *(void *)(sub_253B09490() - 8);
    unint64_t v165 = (*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
    uint64_t v205 = (char *)v162;
    unint64_t v207 = v162 + v165;
    uint64_t v206 = *(void *)(v164 + 72);
    while (1)
    {
      uint64_t v166 = sub_253B09470();
      uint64_t v167 = *(void *)(v166 + 16);
      if (v167) {
        break;
      }
LABEL_60:
      swift_bridgeObjectRelease();
      if (++v163 == v210) {
        goto LABEL_61;
      }
    }
    uint64_t v226 = v163;
    swift_bridgeObjectRetain();
    uint64_t v211 = (char *)v166;
    uint64_t v168 = (uint64_t *)(v166 + 40);
    uint64_t v169 = (uint64_t)v209;
    while (1)
    {
      uint64_t v170 = *(v168 - 1);
      uint64_t v171 = *v168;
      swift_bridgeObjectRetain();
      uint64_t v172 = v224;
      uint64_t v173 = sub_25355BFDC(v224, v170, v171);
      v222((char *)v169, v172, v215);
      uint64_t v174 = v217;
      v216(v169 + *(int *)(v217 + 20), v225, v220);
      *(unsigned char *)(v169 + *(int *)(v174 + 24)) = 1;
      uint64_t v175 = v208;
      sub_25357369C(v169, v208);
      uint64_t v176 = (uint64_t *)(v175 + *(int *)(v218 + 20));
      uint64_t *v176 = v170;
      v176[1] = v171;
      sub_253573624(v175, v212);
      swift_bridgeObjectRetain();
      swift_isUniquelyReferenced_nonNull_native();
      long long v227 = (void *)*a1;
      uint64_t v177 = v227;
      *a1 = 0x8000000000000000;
      unint64_t v178 = sub_25396E650();
      uint64_t v180 = v177[2];
      BOOL v181 = (v179 & 1) == 0;
      uint64_t v62 = (char *)(v180 + v181);
      if (__OFADD__(v180, v181)) {
        break;
      }
      unint64_t v182 = v178;
      char v183 = v179;
      sub_253462A5C(&qword_269CDB458);
      char v184 = sub_253B0A190();
      uint64_t v169 = (uint64_t)v209;
      if (v184)
      {
        unint64_t v185 = sub_25396E650();
        if ((v183 & 1) != (v186 & 1)) {
          goto LABEL_74;
        }
        unint64_t v182 = v185;
      }
      uint64_t v187 = v227;
      if (v183)
      {
        sub_25346C9D0(v212, v227[7] + *(void *)(v214 + 72) * v182);
      }
      else
      {
        v227[(v182 >> 6) + 8] |= 1 << v182;
        *(void *)(v187[6] + 8 * v182) = v173;
        sub_253573624(v212, v187[7] + *(void *)(v214 + 72) * v182);
        uint64_t v188 = v187[2];
        BOOL v101 = __OFADD__(v188, 1);
        uint64_t v189 = v188 + 1;
        if (v101) {
          goto LABEL_69;
        }
        v187[2] = v189;
      }
      v168 += 2;
      a1 = v213;
      *os_log_type_t v213 = v187;
      swift_bridgeObjectRelease();
      sub_2535734F4(v169, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
      swift_bridgeObjectRelease();
      if (!--v167)
      {
        swift_bridgeObjectRelease();
        uint64_t v62 = v225;
        uint64_t v163 = v226;
        goto LABEL_60;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_66:
    sub_2535734F4((uint64_t)v194, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
    goto LABEL_67;
  }
  uint64_t v135 = 0;
  uint64_t v136 = *(void *)(sub_253B09490() - 8);
  unint64_t v137 = (*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
  uint64_t v202 = v134;
  os_signpost_id_t v204 = (char *)(v134 + v137);
  uint64_t v203 = *(void *)(v136 + 72);
  while (1)
  {
    uint64_t v138 = sub_253B09480();
    uint64_t v139 = *(void *)(v138 + 16);
    if (v139) {
      break;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    if ((char *)++v135 == v205) {
      goto LABEL_46;
    }
  }
  unint64_t v207 = v135;
  swift_bridgeObjectRetain();
  uint64_t v206 = v138;
  uint64_t v140 = (uint64_t *)(v138 + 40);
  uint64_t v141 = (uint64_t)v211;
  while (1)
  {
    uint64_t v143 = *(v140 - 1);
    uint64_t v142 = *v140;
    swift_bridgeObjectRetain();
    uint64_t v144 = v224;
    uint64_t v145 = sub_25355BFDC(v224, v143, v142);
    v222((char *)v141, v144, v215);
    uint64_t v146 = v217;
    v216(v141 + *(int *)(v217 + 20), v225, v220);
    *(unsigned char *)(v141 + *(int *)(v146 + 24)) = 0;
    uint64_t v147 = v210;
    sub_25357369C(v141, v210);
    uint64_t v148 = (uint64_t *)(v147 + *(int *)(v218 + 20));
    *uint64_t v148 = v143;
    v148[1] = v142;
    sub_253573624(v147, v226);
    swift_bridgeObjectRetain();
    swift_isUniquelyReferenced_nonNull_native();
    long long v227 = (void *)*a1;
    uint64_t v149 = v227;
    *a1 = 0x8000000000000000;
    unint64_t v150 = sub_25396E650();
    uint64_t v152 = v149[2];
    BOOL v153 = (v151 & 1) == 0;
    uint64_t v62 = (char *)(v152 + v153);
    if (__OFADD__(v152, v153))
    {
      __break(1u);
      goto LABEL_64;
    }
    unint64_t v154 = v150;
    char v155 = v151;
    sub_253462A5C(&qword_269CDB458);
    char v156 = sub_253B0A190();
    uint64_t v141 = (uint64_t)v211;
    if (v156)
    {
      unint64_t v157 = sub_25396E650();
      if ((v155 & 1) != (v158 & 1)) {
        goto LABEL_74;
      }
      unint64_t v154 = v157;
    }
    uint64_t v159 = v227;
    if ((v155 & 1) == 0) {
      break;
    }
    sub_25346C9D0(v226, v227[7] + *(void *)(v214 + 72) * v154);
LABEL_43:
    v140 += 2;
    a1 = v213;
    *os_log_type_t v213 = v159;
    swift_bridgeObjectRelease();
    sub_2535734F4(v141, (void (*)(void))type metadata accessor for AssistantSchemaToolBoxRepresentation);
    swift_bridgeObjectRelease();
    if (!--v139)
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = v225;
      uint64_t v135 = v207;
      goto LABEL_45;
    }
  }
  v227[(v154 >> 6) + 8] |= 1 << v154;
  *(void *)(v159[6] + 8 * v154) = v145;
  sub_253573624(v226, v159[7] + *(void *)(v214 + 72) * v154);
  uint64_t v160 = v159[2];
  BOOL v101 = __OFADD__(v160, 1);
  uint64_t v161 = v160 + 1;
  if (!v101)
  {
    v159[2] = v161;
    goto LABEL_43;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  uint64_t result = sub_253B0A550();
  __break(1u);
  return result;
}

uint64_t sub_253561818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[10] = a2;
  uint64_t v9 = type metadata accessor for AssistantSchemaToEmbed(0);
  v8[17] = v9;
  v8[18] = *(void *)(v9 - 8);
  v8[19] = swift_task_alloc();
  uint64_t v10 = sub_253B05860();
  v8[20] = v10;
  v8[21] = *(void *)(v10 - 8);
  v8[22] = swift_task_alloc();
  sub_253B05830();
  v8[23] = swift_task_alloc();
  uint64_t v11 = sub_253B057A0();
  v8[24] = v11;
  v8[25] = *(void *)(v11 - 8);
  v8[26] = swift_task_alloc();
  v8[27] = type metadata accessor for ToolboxVersion(0);
  v8[28] = swift_task_alloc();
  uint64_t v12 = sub_253B089F0();
  v8[29] = v12;
  v8[30] = *(void *)(v12 - 8);
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_253561A88, 0, 0);
}

uint64_t sub_253561A88()
{
  unint64_t v137 = v0;
  uint64_t v1 = v0[10];
  if (v1)
  {
    char v2 = *(unsigned char *)(v1 + 16);
    swift_retain();
    if (v2)
    {
      sub_253B08360();
      sub_2535792D0();
      uint64_t v13 = sub_253B089D0();
      os_log_type_t v14 = sub_253B09D60();
      BOOL v15 = os_log_type_enabled(v13, v14);
      uint64_t v16 = v0[35];
      uint64_t v17 = v0[30];
      if (v15)
      {
        uint64_t v132 = v0[29];
        uint64_t v18 = v0[11];
        uint64_t v19 = (uint8_t *)sub_253578480();
        uint64_t v122 = sub_2534772AC();
        sub_25357936C(v122, 4.8149e-34);
        sub_253472068((void *)(v18 + 232), *(void *)(v18 + 256));
        sub_253578D94();
        sub_2535355D8();
        v20();
        sub_253B06CD0();
        sub_253B06CE0();
        sub_25346CAF4();
        sub_2534659CC();
        v21();
        uint64_t v22 = sub_253578E40();
        v0[9] = sub_253464DF8(v22, v23, v24);
        sub_253B09E80();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_253460000, v13, v14, "ToolEmbeddingDatabase: received cancellation request. Cancelling %s toolbox.", v19, 0xCu);
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v132);
        goto LABEL_11;
      }
      swift_release_n();
      swift_release();

      uint64_t v31 = sub_2534DA154();
      goto LABEL_10;
    }
    swift_release();
  }
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[22];
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  sub_25353CDD4();
  v7();
  swift_bridgeObjectRetain();
  sub_253578D2C();
  sub_253B05810();
  sub_253462A5C(&qword_269CDE5B8);
  uint64_t v8 = (int *)(sub_253462A5C(&qword_269CDB608) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_253B22680;
  sub_25355C1A4(v10 + v9, (void *)(v10 + v9 + v8[14]), 0);
  sub_2535787F4();
  sub_253B05790();
  sub_253462A5C(&qword_269CDE580);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_253B22680;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v12 + v11, v3, v5);
  uint64_t v25 = sub_253B056D0();
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_25353D1D8(v25);
  swift_bridgeObjectRetain();
  uint64_t v27 = swift_bridgeObjectRetain();
  sub_25353D268(v27);
  uint64_t v29 = sub_253562ADC(v28, v26);
  swift_bridgeObjectRelease();
  if (*(void *)(v29 + 16))
  {
    uint64_t v30 = swift_bridgeObjectRetain();
    sub_25350BEE8(v30);
    swift_bridgeObjectRelease();
    sub_253B056F0();
    swift_release();
    sub_253B08300();
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_253B089D0();
    os_log_type_t v37 = sub_253B09D60();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v40 = v0[29];
    uint64_t v39 = v0[30];
    if (v38)
    {
      loga = v36;
      uint64_t v133 = v0[34];
      uint64_t v41 = v0[11];
      uint64_t v42 = sub_253465A6C();
      v136[0] = sub_2534772AC();
      *(_DWORD *)uint64_t v42 = 136315394;
      sub_253472068((void *)(v41 + 232), *(void *)(v41 + 256));
      sub_253578E58();
      sub_2535355D8();
      v43();
      uint64_t v44 = sub_253B06CD0();
      unint64_t v46 = v45;
      sub_253B06CE0();
      sub_25346CAF4();
      sub_2534659CC();
      v47();
      v0[7] = sub_253464DF8(v44, v46, v136);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v42 + 12) = 2048;
      uint64_t v48 = *(void *)(v29 + 16);
      swift_bridgeObjectRelease();
      v0[8] = v48;
      sub_253B09E80();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_253460000, loga, v37, "%s toolbox: Removed %ld protocols from the toolbox", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v133, v40);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      uint64_t v49 = sub_253578DF8();
      v51(v49, v50);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = swift_bridgeObjectRetain();
  sub_25353D268(v52);
  uint64_t v54 = sub_253562ADC(v26, v53);
  swift_bridgeObjectRelease();
  if (*(void *)(v54 + 16))
  {
    sub_253B08300();
    sub_253578810();
    uint64_t v55 = sub_253B089D0();
    os_log_type_t v56 = sub_253B09D60();
    if (os_log_type_enabled(v55, v56))
    {
      os_log_type_t v123 = v56;
      uint64_t v57 = v0[11];
      uint64_t v58 = (uint8_t *)sub_253578480();
      uint64_t v118 = sub_2534772AC();
      *(_DWORD *)uint64_t v58 = 136315138;
      v136[0] = v118;
      sub_253472068((void *)(v57 + 232), *(void *)(v57 + 256));
      sub_2535355D8();
      v59();
      sub_253B06CD0();
      sub_253B06CE0();
      sub_25346CAF4();
      sub_2534659CC();
      v60();
      uint64_t v61 = sub_2534D970C();
      v0[5] = sub_253464DF8(v61, v62, v63);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_253460000, v55, v123, "%s toolbox: Fetching embeddings for new protocols", v58, 0xCu);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {
      swift_release_n();

      sub_2534D970C();
    }
    sub_2534F85D4();
    v73();
    uint64_t v75 = v0[11];
    uint64_t v74 = v0[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_253570B80(v74, v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = sub_253548B70(v76, (void (*)(void, char *))sub_253573FF0, v75);
    swift_release();
    uint64_t v78 = (void *)(v75 + 232);
    char v121 = (void *)(v75 + 232);
    *(void *)uint64_t v124 = v75;
    uint64_t v79 = *(void *)(v75 + 256);
    uint64_t v80 = *(void *)(v75 + 264);
    sub_253472068(v78, v79);
    (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v80 + 8))(&v134, v79, v80);
    unsigned __int8 v135 = v134;
    uint64_t v81 = *(NSObject **)(v77 + 16);
    uint64_t v82 = MEMORY[0x263F8EE78];
    os_log_t log = v81;
    if (v81)
    {
      uint64_t v84 = v0[17];
      uint64_t v83 = v0[18];
      v136[0] = MEMORY[0x263F8EE78];
      sub_2539E6C84();
      sub_2535786F4();
      uint64_t v131 = v77;
      uint64_t v86 = v77 + v85;
      uint64_t v87 = *(void *)(v83 + 72);
      uint64_t v82 = v136[0];
      uint64_t v88 = v81;
      do
      {
        uint64_t v89 = v0[19];
        uint64_t v90 = sub_2535787F4();
        sub_25357369C(v90, v91);
        unint64_t v92 = (uint64_t *)(v89 + *(int *)(v84 + 24));
        uint64_t v93 = *v92;
        uint64_t v94 = v92[1];
        swift_bridgeObjectRetain();
        sub_2535734F4(v89, (void (*)(void))type metadata accessor for AssistantSchemaToEmbed);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E6C84();
          uint64_t v82 = v136[0];
        }
        unint64_t v96 = *(void *)(v82 + 16);
        unint64_t v95 = *(void *)(v82 + 24);
        if (v96 >= v95 >> 1)
        {
          sub_253526BBC(v95);
          sub_2539E6C84();
          uint64_t v82 = v136[0];
        }
        *(void *)(v82 + 16) = v96 + 1;
        uint64_t v97 = v82 + 16 * v96;
        *(void *)(v97 + 32) = v93;
        *(void *)(v97 + 40) = v94;
        v86 += v87;
        uint64_t v88 = ((char *)v88 - 1);
      }
      while (v88);
      uint64_t v77 = v131;
    }
    char v98 = (unsigned __int8 *)v0[15];
    uint64_t v99 = v0[16];
    uint64_t v101 = v0[13];
    uint64_t v100 = v0[14];
    uint64_t v102 = v0[10];
    uint64_t v103 = v0[11];
    uint64_t v104 = (uint64_t)v103 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25354084C(v101);
    swift_bridgeObjectRetain();
    sub_253556584(v82, 50, v104, &v135, v77, v103, v101, v100, v98, v102, v99);
    swift_bridgeObjectRelease();
    sub_253B08300();
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_253B089D0();
    os_log_type_t v106 = sub_253B09D60();
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v129 = v0[26];
      buf = (uint8_t *)v0[25];
      uint64_t v120 = v0[24];
      uint64_t v107 = sub_253465A6C();
      v136[0] = sub_2534772AC();
      *(_DWORD *)uint64_t v107 = 136315394;
      sub_253472068(v121, *(void *)(*(void *)v124 + 256));
      sub_253578AC4();
      sub_2535355D8();
      v108();
      uint64_t v109 = sub_253B06CD0();
      unint64_t v111 = v110;
      sub_253B06CE0();
      sub_25346CAF4();
      sub_2534659CC();
      v112();
      v0[3] = sub_253464DF8(v109, v111, v136);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v107 + 12) = 2048;
      swift_bridgeObjectRelease();
      v0[4] = log;
      sub_253B09E80();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_253460000, v105, v106, "%s toolbox: Inserted protocol embeddings %ld", (uint8_t *)v107, 0x16u);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      sub_253477128();
      v113();
      (*((void (**)(uint64_t, uint64_t))buf + 1))(v129, v120);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease_n();

    swift_release_n();
    sub_2535791E4();
    sub_253477128();
    v116();
    uint64_t v31 = sub_2534D9778();
LABEL_10:
    v33(v31, v32);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_253B08300();
  sub_253578810();
  uint64_t v64 = sub_253B089D0();
  os_log_type_t v65 = sub_253B09D60();
  if (os_log_type_enabled(v64, v65))
  {
    os_log_t logb = (os_log_t)v0[25];
    uint64_t v128 = v0[24];
    uint64_t v130 = v0[26];
    uint64_t v66 = v0[11];
    uint64_t v67 = (uint8_t *)sub_253578480();
    uint64_t v119 = sub_2534772AC();
    sub_25357936C(v119, 4.8149e-34);
    sub_253472068((void *)(v66 + 232), *(void *)(v66 + 256));
    sub_253578D94();
    sub_2535355D8();
    v68();
    sub_253B06CD0();
    sub_2535788D8();
    sub_25346CAF4();
    sub_2534659CC();
    uint64_t v70 = v69();
    v0[6] = sub_2535790E8(v70, v71, v136);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_253460000, v64, v65, "%s toolbox: No new protocols to embed", v67, 0xCu);
    sub_2535793CC();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534D91A0();
    v72();
    ((void (*)(uint64_t, uint64_t))logb[1].isa)(v130, v128);
  }
  else
  {

    swift_release_n();
    sub_2534D91A0();
    v114();
    sub_2534D9778();
    sub_25351C3E8();
    v115();
  }
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_253529DC4();
  return v34();
}

uint64_t sub_253562ADC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_253572064(a1);
    return a2;
  }
  else
  {
    return sub_2535721DC(a1, a2);
  }
}

uint64_t sub_253562B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a3[32];
  uint64_t v8 = a3[33];
  sub_253472068(a3 + 29, v7);
  uint64_t v9 = type metadata accessor for AssistantSchema(0);
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v8 + 48))(*(void *)(a2 + *(int *)(v9 + 20)), *(void *)(a2 + *(int *)(v9 + 20) + 8), v7, v8);
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for AssistantSchemaToEmbed(0);
  uint64_t result = sub_25357369C(a2, (uint64_t)a4 + *(int *)(v13 + 20));
  *a4 = a1;
  BOOL v15 = (void *)((char *)a4 + *(int *)(v13 + 24));
  *BOOL v15 = v10;
  v15[1] = v12;
  return result;
}

uint64_t sub_253562C04(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, NSObject *a6, NSObject *a7, uint64_t a8, uint64_t a9, NSObject *a10)
{
  uint64_t v60 = a7;
  uint64_t v16 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_253B089F0();
  uint64_t result = MEMORY[0x270FA5388](v19);
  unint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(a4 + 16);
  if (v24 >= a1 && (uint64_t)v24 >= a2)
  {
    uint64_t v53 = v18;
    uint64_t v54 = v16;
    uint64_t v55 = v24;
    uint64_t v58 = result;
    uint64_t v59 = v23;
    uint64_t v57 = v21;
    uint64_t v26 = *(void *)(type metadata accessor for AssistantSchemaToEmbed(0) - 8);
    uint64_t v27 = a4 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v56 = a2;
    MEMORY[0x270FA5388](a4);
    *(&v51 - 6) = a5;
    *(&v51 - 5) = a6;
    *(&v51 - 4) = v60;
    *(&v51 - 3) = v28;
    *(&v51 - 2) = a3;
    *(&v51 - 1) = a10;
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = v27;
    uint64_t v31 = v61;
    sub_253563D8C(v29, v30, a1, (2 * a2) | 1, (void (*)(void, char *))sub_253573FF8, (uint64_t)&(&v51)[-8]);
    swift_bridgeObjectRelease();
    if (!v31)
    {
      sub_253B05700();
      swift_bridgeObjectRelease();
      if (a9)
      {
        char v33 = *(unsigned char *)(a9 + 16);
        swift_retain();
        if (v33)
        {
          uint64_t v34 = v59;
          sub_253B08360();
          swift_bridgeObjectRetain_n();
          uint64_t v35 = a5;
          swift_retain_n();
          uint64_t v36 = sub_253B089D0();
          os_log_type_t v37 = sub_253B09D60();
          int v38 = v37;
          if (os_log_type_enabled(v36, v37))
          {
            uint64_t v39 = swift_slowAlloc();
            uint64_t v60 = swift_slowAlloc();
            uint64_t v63 = v60;
            *(_DWORD *)uint64_t v39 = 136315650;
            uint64_t v61 = a9;
            uint64_t isa = (uint64_t)v35[32].isa;
            Class v41 = v35[33].isa;
            sub_253472068(&v35[29].isa, isa);
            uint64_t v42 = (void (*)(uint64_t, Class))*((void *)v41 + 2);
            int v52 = v38;
            uint64_t v43 = v53;
            os_log_t v51 = v36;
            v42(isa, v41);
            uint64_t v44 = &v43[*(int *)(v54 + 20)];
            uint64_t v45 = sub_253B06CD0();
            unint64_t v47 = v46;
            uint64_t v48 = sub_253B06CE0();
            (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v44, v48);
            uint64_t v62 = sub_253464DF8(v45, v47, (uint64_t *)&v63);
            sub_253B09E80();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v39 + 12) = 2048;
            uint64_t v62 = v56;
            sub_253B09E80();
            *(_WORD *)(v39 + 22) = 2048;
            swift_bridgeObjectRelease();
            uint64_t v62 = v55;
            sub_253B09E80();
            swift_bridgeObjectRelease();
            os_log_t v49 = v51;
            _os_log_impl(&dword_253460000, v51, (os_log_type_t)v52, "ToolEmbeddingDatabase: received cancellation request. Cancelling %s toolbox. Completed: %ld/%ld", (uint8_t *)v39, 0x20u);
            uint64_t v50 = v60;
            swift_arrayDestroy();
            MEMORY[0x25A269E60](v50, -1, -1);
            MEMORY[0x25A269E60](v39, -1, -1);

            swift_release();
            (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v58);
          }
          else
          {

            swift_release();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v58);
          }
          char v32 = 0;
          return v32 & 1;
        }
        swift_release();
      }
      char v32 = 1;
    }
    return v32 & 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_2535630FC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v99 = a7;
  uint64_t v94 = a6;
  uint64_t v93 = a5;
  uint64_t v105 = a4;
  unint64_t v109 = a1;
  unint64_t v110 = a3;
  uint64_t v98 = a8;
  uint64_t v9 = sub_253462A5C(&qword_269CDB428);
  MEMORY[0x270FA5388](v9 - 8);
  os_log_type_t v106 = (uint64_t *)&v84[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v104 = sub_253B05830();
  MEMORY[0x270FA5388](v104);
  uint64_t v100 = &v84[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v103 = sub_253B05860();
  uint64_t v101 = *(void *)(v103 - 8);
  MEMORY[0x270FA5388](v103);
  uint64_t v102 = &v84[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_253B08A60();
  uint64_t v113 = *(void *)(v13 - 8);
  uint64_t v114 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v112 = &v84[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_253B09440();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v97 = &v84[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  unint64_t v115 = &v84[-v19];
  unint64_t v96 = (void *)sub_253B089F0();
  uint64_t v95 = *(v96 - 1);
  MEMORY[0x270FA5388](v96);
  uint64_t v21 = &v84[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = sub_253B09720();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v23 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = &v84[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = *(int *)(sub_253462A5C(&qword_269CDED20) + 48);
  uint64_t v27 = *(int *)(type metadata accessor for AssistantSchemaToEmbed(0) + 20);
  uint64_t v107 = v16;
  uint64_t v108 = a2;
  uint64_t v28 = a2 + v27;
  uint64_t v29 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v116 = v15;
  unint64_t v111 = v29;
  v29(v25, a2 + v27, v15);
  uint64_t v30 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  v25[v26] = *(unsigned char *)(v28 + *(int *)(v30 + 24));
  uint64_t v31 = swift_storeEnumTagMultiPayload();
  char v32 = (void *)MEMORY[0x25A269750](v31);
  if (qword_269CDA7E0 != -1) {
    swift_once();
  }
  sub_253573548(&qword_269CDEDA0, (void (*)(uint64_t))type metadata accessor for ToolboxDatabasePayload);
  unint64_t v117 = v25;
  uint64_t v33 = v118;
  uint64_t v34 = sub_253B050B0();
  if (v33)
  {
    return sub_2535734F4((uint64_t)v117, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
  }
  uint64_t v37 = v34;
  unint64_t v38 = v35;
  uint64_t v118 = 0;
  sub_253B050E0();
  swift_allocObject();
  sub_253B050D0();
  sub_253B09710();
  uint64_t v39 = sub_253B09700();
  uint64_t v41 = v40;
  swift_release();
  if (!v41)
  {
    sub_253B08300();
    os_log_type_t v65 = sub_253B089D0();
    os_log_type_t v66 = sub_253B09D80();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl(&dword_253460000, v65, v66, "Could not convert assistant schema representation to a json string", v67, 2u);
      MEMORY[0x25A269E60](v67, -1, -1);
    }

    (*(void (**)(unsigned char *, void *))(v95 + 8))(v21, v96);
    sub_2535382C4();
    swift_allocError();
    *uint64_t v68 = 9;
    swift_willThrow();
    sub_253487D84(v37, v38);
    return sub_2535734F4((uint64_t)v117, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
  }
  uint64_t v91 = v41;
  uint64_t v92 = v39;
  uint64_t v86 = v37;
  unint64_t v87 = v38;
  uint64_t v42 = v115;
  v111(v115, v28, v116);
  uint64_t v43 = v112;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v113 + 16))(v112, v28 + *(int *)(v30 + 20), v114);
  uint64_t v44 = v110[37];
  uint64_t v45 = v110[38];
  sub_253472068(v110 + 34, v44);
  unint64_t v96 = *(void **)(v45 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v119[3] = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v119[4] = AssociatedConformanceWitness;
  uint64_t v88 = sub_2534724A8(v119);
  ((void (*)(unsigned char *, unsigned char *, uint64_t, uint64_t))v96)(v42, v43, v44, v45);
  sub_253462A5C(&qword_269CDEDA8);
  unint64_t v46 = (int *)(sub_253462A5C(&qword_269CDEDB0) - 8);
  unint64_t v47 = (*(unsigned __int8 *)(*(void *)v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v46 + 80);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_253B22690;
  os_log_t v49 = (void *)(v48 + v47 + v46[14]);
  swift_bridgeObjectRetain();
  sub_253B05820();
  *os_log_t v49 = 0;
  uint64_t v50 = *MEMORY[0x263F84748];
  uint64_t v51 = sub_253B05870();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(void **)(v52 + 104);
  unsigned int v85 = v50;
  unint64_t v96 = v53;
  uint64_t v95 = v52 + 104;
  ((void (*)(void *, uint64_t, uint64_t))v53)(v49, v50, v51);
  uint64_t v54 = v102;
  *uint64_t v102 = 0;
  v54[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v101 + 104))(v54, *MEMORY[0x263F84720], v103);
  swift_bridgeObjectRetain();
  sub_253B05810();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness);
  sub_253573548((unint64_t *)&qword_269CDB438, MEMORY[0x263F84700]);
  v119[7] = sub_253B095A0();
  uint64_t v55 = v105;
  if (!v105)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = (uint64_t)v100;
    sub_253B05820();
    uint64_t v63 = v106;
    uint64_t v64 = v107;
    *os_log_type_t v106 = 0;
LABEL_16:
    uint64_t v74 = (void (*)(uint64_t *, void, uint64_t))v96;
    ((void (*)(uint64_t *, void, uint64_t))v96)(v63, v85, v51);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v63, 0, 1, v51);
    sub_253469304((uint64_t)v63, v69);
    goto LABEL_17;
  }
  uint64_t v56 = v115;
  uint64_t v57 = sub_253B09400();
  sub_253B0167C(v57, v58, v55);
  char v60 = v59;
  swift_bridgeObjectRelease();
  uint64_t v61 = v97;
  uint64_t v62 = v116;
  v111(v97, (uint64_t)v56, v116);
  uint64_t v63 = v106;
  uint64_t v64 = v107;
  if (v60)
  {
    (*(void (**)(unsigned char *, uint64_t))(v107 + 8))(v61, v62);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v69 = (uint64_t)v100;
    sub_253B05820();
    uint64_t *v63 = 0;
    goto LABEL_16;
  }
  uint64_t v70 = sub_253B09400();
  sub_253B0167C(v70, v71, v94);
  char v73 = v72;
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v61, v62);
  if (v73) {
    goto LABEL_15;
  }
  uint64_t v80 = sub_253B09400();
  sub_253B0167C(v80, v81, v93);
  char v83 = v82;
  swift_bridgeObjectRelease();
  uint64_t v69 = (uint64_t)v100;
  uint64_t v74 = (void (*)(uint64_t *, void, uint64_t))v96;
  if (v83)
  {
    swift_bridgeObjectRetain();
    sub_253B05820();
    uint64_t *v63 = 1;
    goto LABEL_16;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  sub_253B05820();
  uint64_t v75 = v91;
  uint64_t *v63 = v92;
  v63[1] = v75;
  v74(v63, *MEMORY[0x263F84740], v51);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v63, 0, 1, v51);
  sub_253469304((uint64_t)v63, v69);
  sub_253462A5C(&qword_269CDED18);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_253B22680;
  if ((v109 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v99 + 16) > v109)
  {
    uint64_t v76 = result;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_253B09A90();
    uint64_t v79 = v78;
    swift_bridgeObjectRelease();
    *(void *)(v76 + 32) = v77;
    *(void *)(v76 + 40) = v79;
    sub_253B05880();
    (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v112, v114);
    (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v115, v116);
    sub_2535734F4((uint64_t)v117, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v119);
  }
  __break(1u);
  return result;
}

uint64_t sub_253563D8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, char *), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v37 = a2;
  uint64_t v33 = sub_253B058A0();
  uint64_t v38 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v39 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_253462A5C(&qword_269CDED98);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v36 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (uint64_t *)((char *)&v28 - v16);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v40 = MEMORY[0x263F8EE78];
  sub_2539E7D18();
  uint64_t v20 = v40;
  int64_t v21 = a4 >> 1;
  uint64_t v28 = a1;
  uint64_t result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_13:
    swift_unknownObjectRelease();
    return v20;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v29 = a3 - v21;
    uint64_t v30 = v38 + 32;
    unint64_t v31 = a4 >> 1;
    uint64_t v32 = a3;
    while (a3 + v23 < v21)
    {
      uint64_t v24 = type metadata accessor for AssistantSchemaToEmbed(0);
      uint64_t v25 = (uint64_t)&v36[*(int *)(v12 + 48)];
      uint64_t result = sub_25357369C(v37 + *(void *)(*(void *)(v24 - 8) + 72) * (a3 + v23), v25);
      if (__OFADD__(v23, 1)) {
        goto LABEL_15;
      }
      uint64_t v26 = (uint64_t)v17 + *(int *)(v12 + 48);
      *uint64_t v17 = v23;
      sub_253573624(v25, v26);
      sub_2534D8A74((uint64_t)v17, (uint64_t)v19, &qword_269CDED98);
      v34(*(void *)v19, &v19[*(int *)(v12 + 48)]);
      if (v7)
      {
        sub_253472458((uint64_t)v19, &qword_269CDED98);
        swift_release();
        goto LABEL_13;
      }
      sub_253472458((uint64_t)v19, &qword_269CDED98);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2539E7D18();
        uint64_t v20 = v40;
      }
      unint64_t v27 = *(void *)(v20 + 16);
      if (v27 >= *(void *)(v20 + 24) >> 1)
      {
        sub_2539E7D18();
        uint64_t v20 = v40;
      }
      *(void *)(v20 + 16) = v27 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v38 + 32))(v20+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v27, v39, v33);
      uint64_t v40 = v20;
      ++v23;
      int64_t v21 = v31;
      a3 = v32;
      if (!(v29 + v23)) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_253564104(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  sub_2539DFAAC();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_2539DFB80(v4);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(v5 + 16) = v4 + 1;
  uint64_t v6 = sub_253B08B30();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess();
}

uint64_t sub_2535641D8(uint64_t a1)
{
  sub_253564240();
  if (!v2)
  {
    uint64_t v6 = v4;
    uint64_t v1 = sub_253547354(a1, &v6);
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_253564240()
{
  sub_2534847F8();
  uint64_t v98 = v1;
  uint64_t v4 = v3;
  uint64_t v100 = sub_253B08B30();
  sub_253465998();
  uint64_t v97 = v5;
  MEMORY[0x270FA5388](v6);
  sub_2534659D8();
  uint64_t v99 = v7;
  sub_2534B324C();
  MEMORY[0x270FA5388](v8);
  unint64_t v96 = (char *)v84 - v9;
  sub_2534B324C();
  MEMORY[0x270FA5388](v10);
  uint64_t v95 = (char *)v84 - v11;
  sub_2534B324C();
  MEMORY[0x270FA5388](v12);
  sub_2534B35DC();
  uint64_t v94 = v13;
  sub_253462A5C(&qword_26B24A348);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_2534D8CAC();
  uint64_t v91 = (void (*)(char *, uint64_t, uint64_t))sub_253B08BC0();
  sub_253465998();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  sub_2534727F8();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v84 - v19;
  uint64_t v21 = v0[22];
  uint64_t v92 = v0[21];
  uint64_t v86 = v0;
  uint64_t v90 = v21;
  uint64_t v89 = sub_253472068(v0 + 18, v92);
  sub_253B08BA0();
  swift_getKeyPath();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v4;
  *uint64_t v2 = v22;
  sub_25353CDD4();
  v23();
  sub_253573548((unint64_t *)&qword_26B24A350, MEMORY[0x263F80100]);
  sub_2535735D0();
  uint64_t v93 = v4;
  swift_bridgeObjectRetain();
  sub_253578E4C();
  sub_253B08DA0();
  swift_release();
  sub_253578D2C();
  sub_2534D97B4();
  v24();
  uint64_t v25 = *(void (**)(void))(v16 + 8);
  sub_2534B3470();
  v25();
  uint64_t v26 = v98;
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v90 + 88))(v20, v92);
  uint64_t v28 = v26;
  if (v26)
  {
    sub_2534B3470();
    v25();
LABEL_28:
    sub_2534847C8();
    return;
  }
  uint64_t v29 = v27;
  sub_2534B3470();
  v25();
  uint64_t v30 = v100;
  uint64_t v31 = sub_253B095A0();
  uint64_t v32 = *(void *)(v29 + 16);
  if (v32)
  {
    v84[1] = v29;
    uint64_t v85 = 0;
    uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
    uint64_t v92 = v97 + 16;
    sub_2535786F4();
    uint64_t v34 = v29 + v33;
    uint64_t v36 = *(void *)(v35 + 56);
    uint64_t v87 = v35 + 24;
    uint64_t v88 = v35 + 16;
    uint64_t v89 = (void *)(v35 - 8);
    swift_bridgeObjectRetain();
    uint64_t v37 = v94;
    uint64_t v38 = v95;
    uint64_t v90 = v36;
    while (1)
    {
      uint64_t v98 = v32;
      uint64_t v39 = sub_253578EE0();
      uint64_t v40 = v91;
      ((void (*)(uint64_t))v91)(v39);
      uint64_t v41 = sub_253B08AF0();
      uint64_t v43 = v42;
      v40(v38, v37, v30);
      swift_isUniquelyReferenced_nonNull_native();
      sub_25357931C();
      sub_25396E0AC();
      sub_253579138();
      if (v46) {
        break;
      }
      unint64_t v47 = v44;
      uint64_t v30 = v45;
      sub_253462A5C(&qword_269CDECF8);
      if (sub_253B0A190())
      {
        sub_25357931C();
        unint64_t v48 = sub_25396E0AC();
        if ((v30 & 1) != (v49 & 1)) {
          goto LABEL_33;
        }
        unint64_t v47 = v48;
      }
      if (v30)
      {
        uint64_t v50 = v90;
        uint64_t v38 = v95;
        sub_253579238();
        v51();
      }
      else
      {
        sub_253579224(v31 + 8 * (v47 >> 6));
        uint64_t v53 = (uint64_t *)(v52 + 16 * v47);
        *uint64_t v53 = v41;
        v53[1] = v43;
        uint64_t v50 = v90;
        uint64_t v38 = v95;
        uint64_t v30 = v100;
        sub_2534D8E14();
        v54();
        uint64_t v55 = *(void *)(v31 + 16);
        BOOL v46 = __OFADD__(v55, 1);
        uint64_t v56 = v55 + 1;
        if (v46) {
          goto LABEL_31;
        }
        *(void *)(v31 + 16) = v56;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v94;
      sub_2534659CC();
      v57();
      v34 += v50;
      uint64_t v32 = v98 - 1;
      if (v98 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v97;
        uint64_t v28 = v85;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v58 = v97;
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253548104();
    char v60 = v96;
    if (!*(void *)(v59 + 16))
    {
LABEL_27:
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    uint64_t v85 = v28;
    uint64_t v61 = v58 + 16;
    sub_2535786F4();
    os_log_type_t v65 = (char *)v63 + v64;
    uint64_t v66 = *(void *)(v61 + 56);
    uint64_t v93 = v61 + 16;
    uint64_t v91 = v63;
    uint64_t v92 = v61 + 24;
    uint64_t v94 = v61 - 8;
    uint64_t v95 = v67;
    uint64_t v97 = v61;
    while (1)
    {
      uint64_t v98 = v62;
      uint64_t v68 = (void (*)(uint64_t, char *, uint64_t))v95;
      ((void (*)(char *, char *, uint64_t))v95)(v60, v65, v30);
      uint64_t v69 = sub_253B08AF0();
      uint64_t v71 = v70;
      v68(v99, v60, v30);
      swift_isUniquelyReferenced_nonNull_native();
      sub_253579328();
      sub_25396E0AC();
      sub_253579138();
      if (v46) {
        break;
      }
      unint64_t v74 = v72;
      uint64_t v30 = v73;
      sub_253462A5C(&qword_269CDECF8);
      if (sub_253B0A190())
      {
        sub_253579328();
        unint64_t v75 = sub_25396E0AC();
        if ((v30 & 1) != (v76 & 1)) {
          goto LABEL_33;
        }
        unint64_t v74 = v75;
      }
      if (v30)
      {
        sub_253579238();
        v77();
      }
      else
      {
        sub_253579224(v31 + 8 * (v74 >> 6));
        uint64_t v79 = (uint64_t *)(v78 + 16 * v74);
        uint64_t *v79 = v69;
        v79[1] = v71;
        uint64_t v30 = v100;
        sub_2534D8E14();
        v80();
        uint64_t v81 = *(void *)(v31 + 16);
        BOOL v46 = __OFADD__(v81, 1);
        uint64_t v82 = v81 + 1;
        if (v46) {
          goto LABEL_32;
        }
        *(void *)(v31 + 16) = v82;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v60 = v96;
      sub_2534659CC();
      v83();
      v65 += v66;
      uint64_t v62 = v98 - 1;
      if (v98 == 1) {
        goto LABEL_27;
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  sub_253B0A550();
  __break(1u);
}

uint64_t sub_253564964(void (**a1)(char *, char *, uint64_t), void (**a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v206 = a4;
  uint64_t v198 = a3;
  uint64_t v209 = a1;
  uint64_t v210 = a2;
  uint64_t v185 = sub_253B09440();
  uint64_t v171 = *(void *)(v185 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v185);
  uint64_t v177 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  char v179 = (char *)&v156 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v187 = (char *)&v156 - v9;
  uint64_t v173 = type metadata accessor for ToolboxSearchOutput(0);
  uint64_t v174 = *(void *)(v173 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v173);
  uint64_t v169 = (uint64_t *)((char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v170 = (char *)&v156 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v168 = (uint64_t *)((char *)&v156 - v14);
  uint64_t v15 = sub_253462A5C(&qword_269CDECD0);
  MEMORY[0x270FA5388](v15 - 8);
  BOOL v181 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for ToolboxDatabasePayload(0);
  uint64_t v17 = MEMORY[0x270FA5388](v180);
  uint64_t v176 = (uint64_t)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v178 = (uint64_t)&v156 - v19;
  uint64_t v189 = sub_253B09720();
  uint64_t v186 = *(void *)(v189 - 8);
  MEMORY[0x270FA5388](v189);
  uint64_t v188 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_253B089F0();
  uint64_t v196 = *(void (***)(char *, uint64_t))(v190 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v190);
  uint64_t v208 = (char *)&v156 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v199 = (char *)&v156 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v211 = (char *)&v156 - v25;
  uint64_t v26 = sub_253462A5C(&qword_269CDB428);
  MEMORY[0x270FA5388](v26 - 8);
  unint64_t v207 = (char *)&v156 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_253B05870();
  uint64_t v195 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v197 = (char *)&v156 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v156 - v31;
  uint64_t v33 = sub_253B057E0();
  uint64_t v194 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v156 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_253B05860();
  uint64_t v200 = *(void *)(v36 - 8);
  uint64_t v201 = v36;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (uint64_t *)((char *)&v156 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = *((void *)v4 + 32);
  uint64_t v40 = *((void *)v4 + 33);
  sub_253472068((void *)v4 + 29, v39);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v40 + 8))(&v213, v39, v40);
  LOBYTE(v216) = v213;
  uint64_t v205 = v4;
  uint64_t v41 = v212;
  sub_25355AF9C((uint64_t)v209, (uint64_t)v210, (uint64_t)&v4[OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport22ToolEmbeddingsDatabase_signposter]);
  if (v41) {
    return (uint64_t)v32;
  }
  uint64_t v203 = v33;
  os_signpost_id_t v204 = v35;
  uint64_t v202 = v32;
  uint64_t v216 = MEMORY[0x263F8EE88];
  uint64_t v214 = MEMORY[0x263F8EE88];
  uint64_t v215 = MEMORY[0x263F8EE88];
  sub_253462A5C(&qword_269CDECC8);
  sub_253B05830();
  uint64_t v42 = swift_allocObject();
  long long v212 = xmmword_253B22680;
  *(_OWORD *)(v42 + 16) = xmmword_253B22680;
  void *v38 = 0;
  v38[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v200 + 104))(v38, *MEMORY[0x263F84720], v201);
  swift_bridgeObjectRetain();
  sub_253B05810();
  sub_253462A5C(&qword_269CDED18);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v212;
  uint64_t v44 = sub_253B09A90();
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  *(void *)(v43 + 32) = v44;
  *(void *)(v43 + 40) = v46;
  uint64_t v47 = sub_253B05710();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v165 = *(void *)(v47 + 16);
  if (!v165)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (char *)MEMORY[0x263F8EE78];
LABEL_86:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v32;
  }
  char v184 = 0;
  uint64_t v49 = v198;
  if (v198 < 1)
  {
    uint64_t v32 = (char *)MEMORY[0x263F8EE78];
LABEL_85:
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  uint64_t v50 = v194;
  uint64_t v201 = v194 + 16;
  uint64_t v209 = (void (**)(char *, char *, uint64_t))(v195 + 16);
  uint64_t v193 = (void (**)(char *, uint64_t, uint64_t))(v195 + 32);
  uint64_t v192 = (uint64_t (**)(char *, uint64_t))(v195 + 88);
  int v191 = *MEMORY[0x263F84740];
  uint64_t v210 = v196 + 1;
  uint64_t v196 = (void (**)(char *, uint64_t))(v195 + 8);
  char v183 = (void (**)(char *, uint64_t))(v195 + 96);
  unint64_t v182 = (void (**)(char *, uint64_t))(v186 + 8);
  uint64_t v200 = v194 + 8;
  unint64_t v157 = (void (**)(char *, uint64_t, uint64_t))(v171 + 32);
  uint64_t v175 = (uint64_t *)(v171 + 16);
  uint64_t v32 = (char *)MEMORY[0x263F8EE78];
  uint64_t v167 = (void (**)(char *, uint64_t))(v171 + 8);
  unint64_t v51 = 1;
  uint64_t v164 = v47 + 32;
  uint64_t v52 = v47 + 32;
  uint64_t v53 = v190;
  uint64_t v54 = v203;
  uint64_t v55 = v204;
  uint64_t v160 = v47;
  while (1)
  {
    uint64_t v56 = *(void *)v52;
    uint64_t v206 = *(void *)(*(void *)v52 + 16);
    if (v206) {
      break;
    }
LABEL_79:
    if (v51 != v165)
    {
      if (v51 >= *(void *)(v47 + 16)) {
        goto LABEL_88;
      }
      uint64_t v52 = v164 + 8 * v51++;
      if (*((void *)v32 + 2) < v49) {
        continue;
      }
    }
    goto LABEL_85;
  }
  unint64_t v166 = v51;
  uint64_t v205 = (char *)(v56 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80)));
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v57 = 0;
  while (v57 < *(void *)(v56 + 16))
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v55, &v205[*(void *)(v50 + 72) * v57], v54);
    if (*((void *)v32 + 2) >= v49)
    {
      (*(void (**)(char *, uint64_t))v200)(v55, v54);
LABEL_78:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v47 = v160;
      unint64_t v51 = v166;
      goto LABEL_79;
    }
    *(void *)&long long v212 = v32;
    uint64_t v58 = sub_253B057C0();
    if (*(void *)(v58 + 16))
    {
      uint64_t v59 = (uint64_t)v207;
      (*(void (**)(char *, unint64_t, uint64_t))(v195 + 16))(v207, v58 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80)), v28);
      uint64_t v60 = 0;
    }
    else
    {
      uint64_t v60 = 1;
      uint64_t v59 = (uint64_t)v207;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v59, v60, 1, v28);
    swift_bridgeObjectRelease();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v59, 1, v28) != 1)
    {
      os_log_type_t v65 = v202;
      (*v193)(v202, v59, v28);
      uint64_t v66 = v197;
      (*v209)(v197, v65, v28);
      int v67 = (*v192)(v66, v28);
      if (v67 == v191)
      {
        (*v183)(v66, v28);
        uint64_t v68 = v188;
        sub_253B09710();
        uint64_t v69 = sub_253B096F0();
        unint64_t v71 = v70;
        swift_bridgeObjectRelease();
        (*v182)(v68, v189);
        if (v71 >> 60 == 15)
        {
          uint64_t v53 = v190;
          goto LABEL_24;
        }
        uint64_t v186 = v69;
        uint64_t v80 = (uint64_t)v181;
        uint64_t v50 = v194;
        if (qword_269CDA7E8 != -1) {
          swift_once();
        }
        sub_253573548(&qword_269CDECD8, (void (*)(uint64_t))type metadata accessor for ToolboxDatabasePayload);
        uint64_t v81 = v180;
        uint64_t v82 = v186;
        char v83 = v184;
        sub_253B05000();
        if (!v83)
        {
          char v184 = 0;
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v80, 0, 1, v81);
          uint64_t v84 = v80;
          uint64_t v85 = v178;
          sub_253573624(v84, v178);
          uint64_t v86 = v85;
          uint64_t v87 = v176;
          sub_25357369C(v86, v176);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v89 = v177;
          if (EnumCaseMultiPayload)
          {
            unint64_t v159 = v71;
            uint64_t v90 = v175;
            uint64_t v91 = v187;
            if (EnumCaseMultiPayload == 1)
            {
              int v158 = *(unsigned __int8 *)(v87 + *(int *)(sub_253462A5C(&qword_269CDED20) + 48));
              (*v157)(v91, v87, v185);
              uint64_t v49 = v198;
              if (*(void *)(v214 + 16))
              {
                uint64_t v172 = v214;
                sub_253573548(&qword_269CDE700, MEMORY[0x263F80C28]);
                swift_bridgeObjectRetain();
                uint64_t v92 = v185;
                uint64_t v93 = sub_253B095C0();
                uint64_t v94 = -1 << *(unsigned char *)(v172 + 32);
                unint64_t v95 = v93 & ~v94;
                uint64_t v96 = v172;
                if ((*(void *)(v172 + 56 + ((v95 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v95))
                {
                  uint64_t v97 = v172 + 56;
                  uint64_t v161 = ~v94;
                  uint64_t v163 = *(void *)(v171 + 72);
                  uint64_t v162 = *(void (**)(char *, unint64_t, uint64_t))(v171 + 16);
                  while (1)
                  {
                    uint64_t v98 = v179;
                    v162(v179, *(void *)(v96 + 48) + v163 * v95, v92);
                    sub_253573548(&qword_269CDE8C0, MEMORY[0x263F80C28]);
                    char v99 = sub_253B096B0();
                    uint64_t v100 = v92;
                    uint64_t v101 = *v167;
                    (*v167)(v98, v100);
                    if (v99) {
                      break;
                    }
                    unint64_t v95 = (v95 + 1) & v161;
                    uint64_t v92 = v185;
                    uint64_t v96 = v172;
                    if (((*(void *)(v97 + ((v95 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v95) & 1) == 0) {
                      goto LABEL_42;
                    }
                  }
                  swift_bridgeObjectRelease();
                  sub_25352C314(v186, v159);
                  v101(v187, v185);
LABEL_50:
                  uint64_t v117 = v178;
LABEL_56:
                  sub_2535734F4(v117, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
                  (*v196)(v202, v28);
                  uint64_t v54 = v203;
                  uint64_t v55 = v204;
                  uint64_t result = (*(uint64_t (**)(char *, uint64_t))v200)(v204, v203);
                  uint64_t v49 = v198;
LABEL_75:
                  uint64_t v53 = v190;
                  goto LABEL_29;
                }
LABEL_42:
                swift_bridgeObjectRelease();
                uint64_t v49 = v198;
                uint64_t v89 = v177;
                uint64_t v90 = v175;
              }
              uint64_t v102 = v185;
              uint64_t v172 = *v90;
              ((void (*)(char *, char *, uint64_t))v172)(v89, v187, v185);
              uint64_t v103 = v179;
              sub_2539E0AE4();
              uint64_t v104 = *v167;
              (*v167)(v103, v102);
              if (v158)
              {
                sub_25352C314(v186, v159);
                v104(v187, v185);
                uint64_t v105 = v178;
LABEL_74:
                sub_2535734F4(v105, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
                (*v196)(v202, v28);
                uint64_t v54 = v203;
                uint64_t v55 = v204;
                uint64_t result = (*(uint64_t (**)(char *, uint64_t))v200)(v204, v203);
                goto LABEL_75;
              }
              uint64_t v163 = (uint64_t)v104;
              uint64_t v121 = *(int *)(sub_253462A5C(&qword_269CDED00) + 48);
              uint64_t v122 = v170;
              ((void (*)(char *, char *, uint64_t))v172)(v170, v187, v185);
              sub_253B057D0();
              *(_DWORD *)&v122[v121] = v123;
              swift_storeEnumTagMultiPayload();
              uint64_t v124 = v212;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_253523000(0, *(void *)(v124 + 16) + 1, 1, v124);
                uint64_t v124 = v150;
              }
              uint64_t v125 = v174;
              unint64_t v127 = *(void *)(v124 + 16);
              unint64_t v126 = *(void *)(v124 + 24);
              *(void *)&long long v212 = v124;
              uint64_t v49 = v198;
              uint64_t v128 = (uint64_t)v170;
              uint64_t v119 = v178;
              if (v127 >= v126 >> 1)
              {
                sub_253523000(v126 > 1, v127 + 1, 1, v212);
                uint64_t v125 = v174;
                *(void *)&long long v212 = v151;
                uint64_t v128 = (uint64_t)v170;
              }
              uint64_t v129 = v187;
              uint64_t v130 = v212;
              *(void *)(v212 + 16) = v127 + 1;
              sub_253573624(v128, v130+ ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80))+ *(void *)(v125 + 72) * v127);
              sub_25352C314(v186, v159);
              ((void (*)(char *, uint64_t))v163)(v129, v185);
LABEL_73:
              uint64_t v105 = v119;
              goto LABEL_74;
            }
            uint64_t v112 = *(void *)v87;
            uint64_t v111 = *(void *)(v87 + 8);
            char v113 = *(unsigned char *)(v87 + 16);
            uint64_t v114 = v216;
            swift_bridgeObjectRetain();
            sub_253B0167C(v112, v111, v114);
            char v116 = v115;
            swift_bridgeObjectRelease();
            if (v116)
            {
              sub_25352C314(v186, v159);
              goto LABEL_49;
            }
            swift_bridgeObjectRetain();
            sub_2539E09A0((uint64_t)&v213, v112, v111);
            swift_bridgeObjectRelease();
            uint64_t v120 = v112;
            uint64_t v119 = v178;
            if (v113)
            {
              sub_25352C314(v186, v159);
              goto LABEL_55;
            }
            swift_bridgeObjectRetain();
            sub_253B057D0();
            uint64_t v142 = v169;
            uint64_t v163 = v120;
            *uint64_t v169 = v120;
            v142[1] = v111;
            uint64_t v172 = v111;
            *((_DWORD *)v142 + 4) = v143;
            swift_storeEnumTagMultiPayload();
            uint64_t v144 = v212;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v49 = v198;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_253523000(0, *(void *)(v144 + 16) + 1, 1, v144);
              uint64_t v144 = v154;
            }
            uint64_t v146 = v174;
            unint64_t v148 = *(void *)(v144 + 16);
            unint64_t v147 = *(void *)(v144 + 24);
            *(void *)&long long v212 = v144;
            if (v148 >= v147 >> 1)
            {
              sub_253523000(v147 > 1, v148 + 1, 1, v212);
              uint64_t v146 = v174;
              *(void *)&long long v212 = v155;
            }
            unint64_t v138 = v159;
            uint64_t v149 = v212;
            *(void *)(v212 + 16) = v148 + 1;
            uint64_t v140 = v149
                 + ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80))
                 + *(void *)(v146 + 72) * v148;
            uint64_t v141 = &v201;
          }
          else
          {
            uint64_t v106 = *(void *)v87;
            uint64_t v107 = *(void *)(v87 + 8);
            LODWORD(v172) = *(unsigned __int8 *)(v87 + 16);
            uint64_t v108 = v216;
            swift_bridgeObjectRetain();
            sub_253B0167C(v106, v107, v108);
            char v110 = v109;
            swift_bridgeObjectRelease();
            if (v110)
            {
              sub_25352C314(v186, v71);
LABEL_49:
              swift_bridgeObjectRelease();
              goto LABEL_50;
            }
            swift_bridgeObjectRetain();
            sub_2539E09A0((uint64_t)&v213, v106, v107);
            swift_bridgeObjectRelease();
            uint64_t v118 = v107;
            uint64_t v119 = v178;
            if (v172)
            {
              sub_25352C314(v186, v71);
LABEL_55:
              swift_bridgeObjectRelease();
              uint64_t v117 = v119;
              goto LABEL_56;
            }
            unint64_t v159 = v71;
            swift_bridgeObjectRetain();
            sub_253B057D0();
            uint64_t v131 = v168;
            *uint64_t v168 = v106;
            v131[1] = v118;
            uint64_t v172 = v118;
            *((_DWORD *)v131 + 4) = v132;
            swift_storeEnumTagMultiPayload();
            uint64_t v133 = v212;
            char v134 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v49 = v198;
            uint64_t v163 = v106;
            if ((v134 & 1) == 0)
            {
              sub_253523000(0, *(void *)(v133 + 16) + 1, 1, v133);
              uint64_t v133 = v152;
            }
            uint64_t v135 = v174;
            unint64_t v137 = *(void *)(v133 + 16);
            unint64_t v136 = *(void *)(v133 + 24);
            *(void *)&long long v212 = v133;
            if (v137 >= v136 >> 1)
            {
              sub_253523000(v136 > 1, v137 + 1, 1, v212);
              uint64_t v135 = v174;
              *(void *)&long long v212 = v153;
            }
            unint64_t v138 = v159;
            uint64_t v139 = v212;
            *(void *)(v212 + 16) = v137 + 1;
            uint64_t v140 = v139
                 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80))
                 + *(void *)(v135 + 72) * v137;
            uint64_t v141 = &v200;
          }
          sub_253573624(*(v141 - 32), v140);
          sub_2539E09A0((uint64_t)&v213, v163, v172);
          sub_25352C314(v186, v138);
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }

        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v80, 1, 1, v81);
        sub_25352C314(v82, v71);
        sub_253472458(v80, &qword_269CDECD0);
        char v184 = 0;
        uint64_t v53 = v190;
        uint64_t v49 = v198;
      }
      else
      {
        sub_253B08300();
        unint64_t v72 = sub_253B089D0();
        os_log_type_t v73 = sub_253B09D80();
        if (os_log_type_enabled(v72, v73))
        {
          unint64_t v74 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v74 = 0;
          _os_log_impl(&dword_253460000, v72, v73, "Unexpected type found while unwrapping projected attribute in Vector Db", v74, 2u);
          unint64_t v75 = v74;
          uint64_t v49 = v198;
          MEMORY[0x25A269E60](v75, -1, -1);
        }

        (*v210)(v211, v53);
        (*v196)(v197, v28);
LABEL_24:
        uint64_t v50 = v194;
      }
      sub_253B08300();
      char v76 = sub_253B089D0();
      os_log_type_t v77 = sub_253B09D80();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v78 = 0;
        _os_log_impl(&dword_253460000, v76, v77, "Payload from ANN search for 1P apps or protocols could not be decoded", v78, 2u);
        uint64_t v79 = v78;
        uint64_t v49 = v198;
        MEMORY[0x25A269E60](v79, -1, -1);
      }

      (*v210)(v199, v53);
      (*v196)(v202, v28);
      goto LABEL_28;
    }
    sub_253472458(v59, &qword_269CDB428);
    sub_253B08300();
    uint64_t v61 = sub_253B089D0();
    os_log_type_t v62 = sub_253B09D80();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_253460000, v61, v62, "ANN search for for 1P apps or protocols did not return toolbox identifier", v63, 2u);
      uint64_t v64 = v63;
      uint64_t v49 = v198;
      MEMORY[0x25A269E60](v64, -1, -1);
    }

    (*v210)(v208, v53);
LABEL_28:
    uint64_t v54 = v203;
    uint64_t v55 = v204;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))v200)(v204, v203);
LABEL_29:
    ++v57;
    uint64_t v32 = (char *)v212;
    if (v57 == v206) {
      goto LABEL_78;
    }
  }
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_25356629C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a4;
  uint64_t v46 = sub_253B05860();
  uint64_t v43 = *(void **)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v42 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_253B05830();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v44 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253462A5C(&qword_269CDB608);
  uint64_t v50 = *(char **)(v10 - 8);
  uint64_t v51 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v41 = a1;
  if (v13)
  {
    uint64_t v40 = a2;
    uint64_t v52 = MEMORY[0x263F8EE78];
    sub_2539E7BA4();
    uint64_t v14 = v52;
    LODWORD(v49) = *MEMORY[0x263F846F8];
    uint64_t v48 = sub_253B05800();
    uint64_t v47 = *(char **)(*(void *)(v48 - 8) + 104);
    uint64_t v15 = *MEMORY[0x263F84740];
    uint64_t v16 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v17 = *(v16 - 1);
      uint64_t v18 = *v16;
      uint64_t v19 = &v12[*(int *)(v51 + 48)];
      ((void (*)(char *, void, uint64_t))v47)(v12, v49, v48);
      *(void *)uint64_t v19 = v17;
      *((void *)v19 + 1) = v18;
      uint64_t v20 = sub_253B05870();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v19, v15, v20);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v20);
      uint64_t v52 = v14;
      unint64_t v21 = *(void *)(v14 + 16);
      unint64_t v22 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v22 >> 1)
      {
        sub_2539E7BA4();
        uint64_t v14 = v52;
      }
      v16 += 2;
      *(void *)(v14 + 16) = v21 + 1;
      sub_2534D8A74((uint64_t)v12, v14+ ((v50[80] + 32) & ~(unint64_t)v50[80])+ *((void *)v50 + 9) * v21, &qword_269CDB608);
      --v13;
    }
    while (v13);
  }
  sub_253462A5C(&qword_269CDE580);
  uint64_t v23 = *(void *)(sub_253B057A0() - 8);
  unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v48 = *(void *)(v23 + 72);
  uint64_t v25 = v48;
  uint64_t v26 = swift_allocObject();
  uint64_t v49 = v26;
  *(_OWORD *)(v26 + 16) = xmmword_253B34E30;
  uint64_t v27 = (char *)(v26 + v24);
  uint64_t v29 = v42;
  uint64_t v28 = v43;
  *uint64_t v42 = 0;
  v29[1] = 0;
  uint64_t v30 = (void *)v28[13];
  ((void (*)(void *, void, uint64_t))v30)(v29, *MEMORY[0x263F84720], v46);
  uint64_t v43 = v30;
  swift_bridgeObjectRetain();
  sub_253B05810();
  uint64_t v47 = v27;
  sub_253B05790();
  uint64_t v40 = &v27[v25];
  void *v29 = 0;
  *((unsigned char *)v29 + 8) = 1;
  LODWORD(v41) = *MEMORY[0x263F84728];
  ((void (*)(void *))v30)(v29);
  swift_bridgeObjectRetain();
  sub_253B05810();
  uint64_t v39 = sub_253462A5C(&qword_269CDE5B8);
  uint64_t v31 = *((void *)v50 + 9);
  unint64_t v32 = (v50[80] + 32) & ~(unint64_t)v50[80];
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_253B22690;
  unint64_t v34 = v33 + v32;
  uint64_t v35 = v51;
  sub_25355C1A4(v33 + v32, (void *)(v33 + v32 + *(int *)(v51 + 48)), 2);
  sub_25355C1A4(v34 + v31, (void *)(v34 + v31 + *(int *)(v35 + 48)), 1);
  sub_253B05790();
  uint64_t v50 = &v47[2 * v48];
  void *v29 = 0;
  *((unsigned char *)v29 + 8) = 1;
  ((void (*)(void *, void, uint64_t))v43)(v29, v41, v46);
  swift_bridgeObjectRetain();
  sub_253B05810();
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_253B34E60;
  unint64_t v37 = v36 + v32;
  sub_25355C1A4(v36 + v32, (void *)(v36 + v32 + *(int *)(v35 + 48)), 1);
  sub_25355C1A4(v37 + v31, (void *)(v37 + v31 + *(int *)(v35 + 48)), 0);
  sub_25355C1A4(v37 + 2 * v31, (void *)(v37 + 2 * v31 + *(int *)(v35 + 48)), 3);
  sub_25355C1A4(v37 + 3 * v31, (void *)(v37 + 3 * v31 + *(int *)(v35 + 48)), 2);
  sub_253B05790();
  return v49;
}

uint64_t sub_25356686C(void (**a1)(char *, char *, uint64_t), void (**a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v8 = sub_253462A5C(&qword_269CDECE0);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = type metadata accessor for ToolBoxToolSearchResult(0);
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v40 = (uint64_t)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v36 = (uint64_t)&v34 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v35 = (uint64_t)&v34 - v19;
  uint64_t v20 = *(void *)(v3 + 312);
  uint64_t v21 = sub_253B056C0();
  if (!v4)
  {
    uint64_t v22 = sub_253564964(a1, a2, v21, a3);
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_2535641D8(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = v24 + 32;
      uint64_t v34 = v24;
      swift_bridgeObjectRetain();
      uint64_t v20 = MEMORY[0x263F8EE78];
      do
      {
        sub_253538B64(v26, (uint64_t)v39);
        sub_253538B64((uint64_t)v39, (uint64_t)v38);
        sub_253462A5C(&qword_269CDE598);
        if (swift_dynamicCast())
        {
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, 0, 1, v14);
          uint64_t v27 = v36;
          sub_253573624((uint64_t)v11, v36);
          sub_253573624(v27, (uint64_t)v13);
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = 1;
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, 1, 1, v14);
          sub_253472458((uint64_t)v11, &qword_269CDECE0);
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, v28, 1, v14);
        _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v39);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v14) == 1)
        {
          sub_253472458((uint64_t)v13, &qword_269CDECE0);
        }
        else
        {
          uint64_t v29 = v35;
          sub_253573624((uint64_t)v13, v35);
          sub_253573624(v29, v40);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_253523338(0, *(void *)(v20 + 16) + 1, 1, v20);
            uint64_t v20 = v32;
          }
          unint64_t v31 = *(void *)(v20 + 16);
          unint64_t v30 = *(void *)(v20 + 24);
          if (v31 >= v30 >> 1)
          {
            sub_253523338(v30 > 1, v31 + 1, 1, v20);
            uint64_t v20 = v33;
          }
          *(void *)(v20 + 16) = v31 + 1;
          sub_253573624(v40, v20+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v31);
        }
        v26 += 40;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  return v20;
}

uint64_t sub_253566CB0(uint64_t a1)
{
  sub_253566D08(a1);
  if (!v2)
  {
    uint64_t v1 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1;
}

void sub_253566D08(uint64_t a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = *v1;
  uint64_t v12 = MEMORY[0x263F8EE88];
  uint64_t v13 = MEMORY[0x263F8EE88];
  uint64_t v6 = sub_253B056C0();
  if (!v2)
  {
    uint64_t v7 = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    if (v7 < -999)
    {
LABEL_12:
      __break(1u);
      return;
    }
    uint64_t v8 = v7 / 500;
    uint64_t v9 = v8 + 1;
    if (v8 != -1)
    {
      uint64_t v10 = 0;
      while ((v9 & ~(v9 >> 63)) != v10)
      {
        uint64_t v11 = (void *)MEMORY[0x25A269750](v6);
        sub_253566E4C(v3, a1, 500, v10++, (uint64_t)&v13, (uint64_t)&v12, v5);
        if (v9 == v10) {
          return;
        }
      }
      __break(1u);
      goto LABEL_11;
    }
  }
}

void sub_253566E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a5;
  uint64_t v38 = sub_253B089F0();
  uint64_t v12 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v44 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_253B058A0();
  uint64_t v41 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v46 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_253462A5C(&qword_269CDECD0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unsigned __int128)(a4 * (__int128)a3) >> 64 == (a4 * a3) >> 63)
  {
    uint64_t v18 = sub_253B05750();
    if (!v7)
    {
      uint64_t v19 = v12;
      uint64_t v20 = *(void *)(v18 + 16);
      if (v20)
      {
        unint64_t v21 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
        uint64_t v35 = v18;
        unint64_t v22 = v18 + v21;
        uint64_t v37 = (void (**)(char *, uint64_t))(v19 + 8);
        uint64_t v42 = (uint64_t (**)(char *, uint64_t))(v41 + 8);
        uint64_t v43 = (uint64_t (**)(char *, unint64_t, uint64_t))(v41 + 16);
        uint64_t v41 = *(void *)(v41 + 72);
        uint64_t v40 = type metadata accessor for ToolboxDatabasePayload(0);
        long long v39 = xmmword_253B34E70;
        uint64_t v36 = a6;
        do
        {
          long long v47 = v39;
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 1, 1, v40);
          uint64_t v23 = (*v43)(v46, v22, v48);
          uint64_t v24 = (void *)MEMORY[0x25A269750](v23);
          uint64_t v25 = sub_253B05890();
          if (v26 >> 60 == 15)
          {
            sub_253B08300();
            uint64_t v27 = sub_253B089D0();
            os_log_type_t v28 = sub_253B09D80();
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = a7;
              unint64_t v30 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v30 = 0;
              _os_log_impl(&dword_253460000, v27, v28, "ANN search for for 1P apps or protocols did not return a payload", v30, 2u);
              unint64_t v31 = v30;
              a7 = v29;
              a6 = v36;
              MEMORY[0x25A269E60](v31, -1, -1);
            }

            (*v37)(v44, v38);
          }
          else
          {
            *(void *)&long long v47 = v25;
            *((void *)&v47 + 1) = v26;
          }
          uint64_t v32 = (*v42)(v46, v48);
          uint64_t v33 = (void *)MEMORY[0x25A269750](v32);
          sub_253567248((uint64_t *)&v47, (uint64_t)v17);
          uint64_t v34 = (void *)MEMORY[0x25A269750]();
          sub_2535675AC((uint64_t)v17, v45, a6);
          sub_253472458((uint64_t)v17, &qword_269CDECD0);
          sub_25352C314(v47, *((unint64_t *)&v47 + 1));
          v22 += v41;
          --v20;
        }
        while (v20);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
    __break(1u);
  }
}

uint64_t sub_253567248(uint64_t *a1, uint64_t a2)
{
  uint64_t v23 = sub_253B089F0();
  uint64_t v5 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_253462A5C(&qword_269CDECD0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a1[1];
  if (v14 >> 60 != 15)
  {
    uint64_t v22 = a2;
    uint64_t v15 = *a1;
    sub_25348A9C8(*a1, v14);
    if (qword_269CDA7E8 != -1) {
      swift_once();
    }
    sub_253573548(&qword_269CDECD8, (void (*)(uint64_t))type metadata accessor for ToolboxDatabasePayload);
    sub_253B05000();
    if (!v2)
    {
      sub_25352C314(v15, v14);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v11);
      sub_253573624((uint64_t)v10, (uint64_t)v13);
      uint64_t v20 = v22;
      sub_253472458(v22, &qword_269CDECD0);
      sub_253573624((uint64_t)v13, v20);
      return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v20, 0, 1, v11);
    }

    sub_25352C314(v15, v14);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 1, 1, v11);
    sub_253472458((uint64_t)v10, &qword_269CDECD0);
  }
  sub_253B08300();
  uint64_t v16 = sub_253B089D0();
  os_log_type_t v17 = sub_253B09D80();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_253460000, v16, v17, "Payload from ANN search for 1P apps or protocols could not be decoded", v18, 2u);
    MEMORY[0x25A269E60](v18, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v23);
}

uint64_t sub_2535675AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = sub_253B09440();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v26 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = sub_253462A5C(&qword_269CDECD0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ToolboxDatabasePayload(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (uint64_t *)((char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v26 - v20;
  sub_2534D88A0(a1, (uint64_t)v15, &qword_269CDECD0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v16) == 1) {
    return sub_253472458((uint64_t)v15, &qword_269CDECD0);
  }
  sub_253573624((uint64_t)v15, (uint64_t)v21);
  sub_25357369C((uint64_t)v21, (uint64_t)v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = v27;
    uint64_t v23 = v28;
    (*(void (**)(char *, uint64_t *, uint64_t))(v27 + 32))(v12, v19, v28);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v7, v12, v23);
    sub_2539E0AE4();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v24 + 8);
    v25(v10, v23);
    v25(v12, v23);
  }
  else
  {
    sub_2539E09A0((uint64_t)v30, *v19, v19[1]);
    swift_bridgeObjectRelease();
  }
  return sub_2535734F4((uint64_t)v21, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
}

void sub_2535678BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v25;
  a20 = v26;
  uint64_t v311 = v27;
  uint64_t v312 = v22;
  long long v310 = v28;
  uint64_t v306 = v29;
  unint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v279 = sub_253B089F0();
  sub_253465998();
  uint64_t v278 = v34;
  MEMORY[0x270FA5388](v35);
  sub_25346CB04();
  sub_2534D8F5C(v36);
  uint64_t v287 = sub_253462A5C(&qword_269CDEE18);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v37);
  sub_2534D8F5C((uint64_t)&v262 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = sub_253462A5C(&qword_269CDEE20);
  uint64_t v40 = sub_25346CB4C(v39);
  MEMORY[0x270FA5388](v40);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v41);
  sub_2534F823C();
  MEMORY[0x270FA5388](v42);
  sub_2534F8208((uint64_t)&v262 - v43);
  uint64_t v299 = sub_253B092A0();
  sub_253465998();
  uint64_t v295 = v44;
  MEMORY[0x270FA5388](v45);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v46);
  sub_2534D8F5C((uint64_t)&v262 - v47);
  uint64_t v288 = sub_253462A5C(&qword_269CDEE28);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v48);
  sub_25346CB04();
  sub_2534D8F5C(v49);
  uint64_t v50 = sub_253462A5C(&qword_269CDE848);
  uint64_t v51 = sub_25346CB4C(v50);
  MEMORY[0x270FA5388](v51);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v52);
  sub_2534F823C();
  MEMORY[0x270FA5388](v53);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v54);
  sub_2534D8F5C((uint64_t)&v262 - v55);
  uint64_t v56 = sub_253462A5C(&qword_269CDEE30);
  uint64_t v57 = sub_25346CB4C(v56);
  MEMORY[0x270FA5388](v57);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v58);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v59);
  sub_2534B35DC();
  uint64_t v289 = v60;
  sub_253B08B30();
  sub_253465998();
  uint64_t v304 = v61;
  uint64_t v305 = v62;
  MEMORY[0x270FA5388](v61);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v63);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v64);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v65);
  sub_2534F823C();
  MEMORY[0x270FA5388](v66);
  sub_2534B35DC();
  uint64_t v302 = v67;
  uint64_t v303 = sub_253B09240();
  sub_253465998();
  unint64_t v298 = v68;
  MEMORY[0x270FA5388](v69);
  sub_2534F823C();
  MEMORY[0x270FA5388](v70);
  sub_2534F8208((uint64_t)&v262 - v71);
  sub_253B092C0();
  sub_253465998();
  uint64_t v307 = v72;
  uint64_t v308 = v73;
  MEMORY[0x270FA5388](v72);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v74);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v75);
  os_log_type_t v77 = (char *)&v262 - v76;
  uint64_t v78 = sub_253B05860();
  sub_253465998();
  uint64_t v309 = v79;
  MEMORY[0x270FA5388](v80);
  sub_2534835B0();
  uint64_t v81 = sub_253462A5C(&qword_269CDB428);
  uint64_t v82 = sub_25346CB4C(v81);
  MEMORY[0x270FA5388](v82);
  sub_253578374();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v83);
  sub_2534847E0();
  uint64_t v84 = v312;
  long long v313 = *(_OWORD *)v311;
  long long v316 = *v31;
  sub_253553A3C();
  if (v84) {
    goto LABEL_12;
  }
  uint64_t v312 = v24;
  uint64_t v274 = v20;
  uint64_t v275 = v78;
  uint64_t v276 = v33;
  uint64_t v311 = v21;
  uint64_t v273 = v77;
  uint64_t v277 = v23;
  uint64_t v85 = (unsigned __int16)a10;
  if ((a10 & 0xFF00) == 0x200) {
    goto LABEL_12;
  }
  uint64_t v268 = 0;
  uint64_t v86 = sub_253B05870();
  sub_253573548((unint64_t *)&qword_269CDB438, MEMORY[0x263F84700]);
  *(void *)&long long v316 = sub_253B095A0();
  uint64_t v87 = v276;
  uint64_t v263 = sub_253B08AF0();
  uint64_t v270 = v88;
  uint64_t v89 = v311;
  uint64_t v91 = v311[10];
  uint64_t v90 = v311[11];
  swift_bridgeObjectRetain();
  uint64_t v92 = v277;
  uint64_t v266 = v91;
  uint64_t v265 = v90;
  sub_253B05820();
  uint64_t v264 = v85;
  uint64_t v93 = v85;
  uint64_t v94 = (uint64_t)v312;
  *uint64_t v312 = v93;
  sub_25347B88C();
  uint64_t v96 = *(void (**)(void))(v95 + 104);
  unsigned int v272 = v97;
  uint64_t v271 = v96;
  uint64_t v267 = v95 + 104;
  ((void (*)(uint64_t))v96)(v94);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v94, 0, 1, v86);
  sub_253469304(v94, v92);
  uint64_t v98 = v89[37];
  uint64_t v99 = v89[38];
  sub_253472068(v89 + 34, v98);
  uint64_t v269 = *(void (**)(void))(v99 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v314 = AssociatedTypeWitness;
  sub_2535791D8();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v315 = AssociatedConformanceWitness;
  sub_2534724A8((uint64_t *)&v313);
  ((void (*)(uint64_t, uint64_t, uint64_t))v269)(v87, v98, v99);
  uint64_t v102 = v274;
  *uint64_t v274 = 0;
  v102[1] = 0;
  sub_25346CCF8();
  v103();
  swift_bridgeObjectRetain();
  sub_253578EEC();
  sub_253B05810();
  uint64_t v104 = v312;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_253578A44();
  uint64_t v105 = v310;
  if (v310)
  {
    swift_bridgeObjectRelease();
    sub_253579120();
    sub_253578678();
    *uint64_t v104 = 3;
    uint64_t v106 = v271;
    sub_25357896C();
    v106();
    sub_253578E04();
    swift_bridgeObjectRetain();
    sub_253B05820();
    *uint64_t v104 = 0;
    sub_25357896C();
    v106();
    sub_253578E04();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253578678();
    *uint64_t v104 = (uint64_t)v306;
    v104[1] = (uint64_t)v105;
    sub_25357896C();
    v106();
LABEL_9:
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v104, 0, 1, v86);
    uint64_t v123 = sub_253578E40();
LABEL_10:
    sub_253469304(v123, v124);
LABEL_11:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v313);
    goto LABEL_12;
  }
  uint64_t v107 = v270;
  if ((v264 & 0x100) != 0)
  {
    sub_253579120();
    sub_253578678();
    *uint64_t v104 = 4;
    uint64_t v122 = v271;
    sub_25357871C();
    v122();
    sub_253578A44();
    swift_bridgeObjectRetain();
    sub_253578678();
    *uint64_t v104 = v263;
    v104[1] = (uint64_t)v107;
    ((void (*)(uint64_t *, void, uint64_t))v122)(v104, *MEMORY[0x263F84740], v86);
    goto LABEL_9;
  }
  uint64_t v262 = v86;
  swift_bridgeObjectRelease();
  sub_253578954();
  sub_253B08A90();
  sub_253B09260();
  uint64_t v108 = *(void (**)(void))(v308 + 8);
  v308 += 8;
  long long v310 = v108;
  sub_253477128();
  v109();
  char v110 = v298;
  uint64_t v111 = (void *)((char *)v298 + 104);
  uint64_t v112 = (void (*)(void))*((void *)v298 + 13);
  LODWORD(v275) = *MEMORY[0x263F80A80];
  sub_2535789A8();
  v112();
  sub_253578E58();
  char v113 = sub_253B09230();
  uint64_t v114 = (void (*)(void))*((void *)v110 + 1);
  sub_2534DA4BC();
  v114();
  sub_25353CE6C();
  sub_2534DA4BC();
  v114();
  uint64_t v116 = (uint64_t)v304;
  uint64_t v115 = v305;
  sub_25353CE60();
  uint64_t v309 = v117;
  uint64_t v306 = v118;
  sub_2534AF234();
  v119();
  if (v113)
  {
    sub_253578E58();
    uint64_t v302 = v120;
    sub_2534B3470();
    v121();
    goto LABEL_30;
  }
  uint64_t v270 = v112;
  uint64_t v274 = v111;
  uint64_t v269 = v114;
  sub_253578954();
  sub_253B08AC0();
  sub_2534D8B48(v115, 1, v307);
  if (v143)
  {
    sub_253472458(v115, &qword_269CDE848);
    uint64_t v127 = 1;
    uint64_t v128 = v290;
    uint64_t v129 = v303;
    uint64_t v125 = v289;
  }
  else
  {
    uint64_t v125 = v289;
    sub_253B09260();
    sub_2534D9AA0();
    sub_253477128();
    v126();
    uint64_t v127 = 0;
    uint64_t v128 = v290;
    uint64_t v129 = v303;
  }
  uint64_t v130 = v294;
  uint64_t v131 = v288;
  uint64_t v132 = v275;
  uint64_t v133 = v269;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v125, v127, 1, v129);
  ((void (*)(uint64_t, uint64_t, uint64_t))v270)(v130, v132, v129);
  sub_253578C40(v130);
  uint64_t v134 = v128 + *(int *)(v131 + 48);
  uint64_t v135 = sub_25353CE6C();
  sub_2534D88A0(v135, v136, &qword_269CDEE30);
  uint64_t v137 = sub_2534DA828();
  sub_2534D88A0(v137, v138, &qword_269CDEE30);
  sub_2534D8B48(v128, 1, v129);
  if (v143)
  {
    sub_253472458(v130, &qword_269CDEE30);
    uint64_t v139 = sub_25353CE60();
    sub_253472458(v139, v140);
    uint64_t v302 = *(void (**)(void))(v305 + 8);
    sub_253477128();
    v141();
    sub_2534D8B48(v134, 1, v129);
    uint64_t v142 = v133;
    if (v143)
    {
      sub_253472458(v128, &qword_269CDEE30);
      uint64_t v116 = (uint64_t)v304;
      goto LABEL_30;
    }
    goto LABEL_24;
  }
  sub_2534D88A0(v128, v286, &qword_269CDEE30);
  sub_2534D8B48(v134, 1, v129);
  uint64_t v142 = v133;
  if (v143)
  {
    sub_253472458(v294, &qword_269CDEE30);
    uint64_t v144 = sub_253579360();
    sub_253472458(v144, v145);
    sub_2534D9A08();
    v146();
    sub_2534DA4BC();
    v133();
LABEL_24:
    sub_253472458(v128, &qword_269CDEE28);
LABEL_25:
    sub_253B08A90();
    sub_2535787A8();
    sub_253B09260();
    unint64_t v147 = v310;
    sub_253477128();
    v147();
    sub_25346CCF8();
    v148();
    sub_253573548(&qword_269CDEE38, MEMORY[0x263F80A90]);
    char v149 = sub_253B096B0();
    sub_253579360();
    sub_2534DA4BC();
    v142();
    sub_2534DA4BC();
    v142();
    if (v149) {
      goto LABEL_11;
    }
    sub_253579120();
    sub_2535787A8();
    sub_253578678();
    uint64_t v150 = v312;
    *uint64_t v312 = 1;
    uint64_t v151 = v262;
    sub_25357896C();
    v152();
    sub_253578A84();
    swift_bridgeObjectRetain();
    sub_253578678();
    sub_253B08A90();
    uint64_t v153 = sub_253B09250();
    uint64_t v155 = v154;
    uint64_t v156 = v307;
    sub_2534DA4BC();
    v157();
    *uint64_t v150 = v153;
    v150[1] = v155;
    int v158 = *MEMORY[0x263F84740];
    sub_25357896C();
    v159();
    sub_253578A84();
    uint64_t v160 = v283;
    sub_253B08AC0();
    uint64_t v161 = sub_2535792A4();
    sub_2534D8B48(v161, v162, v156);
    uint64_t v163 = v310;
    if (!v143)
    {
      LODWORD(v309) = v158;
      uint64_t v235 = sub_253B09250();
      uint64_t v237 = v236;
      sub_2534DA4BC();
      v163();
      sub_253B08A90();
      uint64_t v238 = sub_253B09250();
      uint64_t v240 = v239;
      sub_253477128();
      v163();
      if (v235 != v238 || v237 != v240)
      {
        uint64_t v242 = v235;
        sub_25353CE6C();
        char v243 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if ((v243 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          sub_253578F88();
          sub_253B05820();
          uint64_t v260 = (uint64_t)v312;
          *uint64_t v312 = v242;
          *(void *)(v260 + 8) = v237;
          sub_25346CCF8();
          v261();
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v260, 0, 1, v151);
          uint64_t v123 = sub_2534D954C();
          goto LABEL_10;
        }
        goto LABEL_69;
      }
LABEL_60:
      swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    uint64_t v164 = v160;
LABEL_53:
    sub_253472458(v164, &qword_269CDE848);
    goto LABEL_11;
  }
  sub_2534D8E14();
  v165();
  sub_253573548(&qword_269CDEE38, MEMORY[0x263F80A90]);
  sub_25353CE60();
  char v166 = sub_253B096B0();
  sub_2534DA4BC();
  v133();
  sub_253472458(v294, &qword_269CDEE30);
  sub_253472458(v125, &qword_269CDEE30);
  uint64_t v116 = (uint64_t)v304;
  uint64_t v302 = *(void (**)(void))(v305 + 8);
  sub_253477128();
  v167();
  sub_2534DA4BC();
  v133();
  uint64_t v168 = sub_2534D9AA0();
  sub_253472458(v168, v169);
  if ((v166 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_30:
  sub_253B08A90();
  sub_253578954();
  sub_253B092B0();
  sub_253477128();
  v170();
  uint64_t v171 = v295;
  uint64_t v173 = *(void *)(v295 + 104);
  uint64_t v172 = v295 + 104;
  int v301 = *MEMORY[0x263F80AC0];
  uint64_t v303 = v173;
  sub_25357896C();
  v174();
  char v175 = sub_253B09230();
  uint64_t v176 = *(void (**)(void))(v171 + 8);
  sub_2534D91AC();
  v176();
  sub_2534D91AC();
  v176();
  uint64_t v177 = v297;
  sub_2534DA154();
  sub_2534AF234();
  v178();
  if (v175)
  {
    sub_2534DA154();
    sub_253477128();
    v179();
    uint64_t v180 = 2;
LABEL_48:
    sub_2535785D4();
    int v191 = v271;
    goto LABEL_49;
  }
  uint64_t v300 = v172;
  BOOL v181 = (void (*)(void))v303;
  unint64_t v298 = v176;
  sub_253578C34();
  sub_253B08AC0();
  sub_2534D8B48((uint64_t)v176, 1, v307);
  if (v143)
  {
    sub_253472458((uint64_t)v176, &qword_269CDE848);
    sub_25357924C();
    uint64_t v116 = v292;
  }
  else
  {
    sub_2535787A8();
    sub_253B092B0();
    sub_253477128();
    v182();
    sub_25357924C();
  }
  uint64_t v184 = v291;
  uint64_t v185 = v287;
  uint64_t v186 = v181;
  uint64_t v187 = v299;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v116, v183, 1, v299);
  sub_25353CDD4();
  v186();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v184, 0, 1, v187);
  uint64_t v188 = (uint64_t)v177 + *(int *)(v185 + 48);
  sub_2534D88A0(v116, (uint64_t)v177, &qword_269CDEE20);
  uint64_t v189 = sub_2534D9778();
  sub_2534D88A0(v189, v190, &qword_269CDEE20);
  sub_2534D8B48((uint64_t)v177, 1, v187);
  int v191 = v271;
  uint64_t v176 = (void (*)(void))v116;
  if (v143)
  {
    sub_253472458(v184, &qword_269CDEE20);
    sub_253472458(v116, &qword_269CDEE20);
    sub_253477128();
    v192();
    sub_2534D8B48(v188, 1, v187);
    if (v143)
    {
      sub_253472458((uint64_t)v177, &qword_269CDEE20);
      uint64_t v180 = 2;
      sub_2535785D4();
LABEL_49:
      uint64_t v207 = v272;
LABEL_50:
      sub_253579120();
      sub_253578678();
      uint64_t *v177 = v180;
      ((void (*)(uint64_t *, uint64_t, void (*)(void)))v191)(v177, v207, v176);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v177, 0, 1, (uint64_t)v176);
      uint64_t v208 = sub_2534DA154();
      sub_253469304(v208, v209);
      swift_bridgeObjectRetain();
      sub_253578678();
      sub_253578ED4();
      sub_253B08A90();
      uint64_t v210 = sub_253B09250();
      uint64_t v212 = v211;
      uint64_t v213 = v307;
      uint64_t v214 = v310;
      sub_253477128();
      v214();
      uint64_t *v177 = v210;
      v177[1] = v212;
      ((void (*)(uint64_t *, void, void (*)(void)))v191)(v177, *MEMORY[0x263F84740], v176);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v177, 0, 1, (uint64_t)v176);
      sub_253469304((uint64_t)v177, v277);
      uint64_t v215 = v293;
      sub_253B08AC0();
      sub_2534D8B48(v215, 1, v213);
      if (!v143)
      {
        uint64_t v216 = sub_253B09250();
        uint64_t v218 = v217;
        sub_2534D954C();
        sub_2534F85D4();
        v214();
        sub_253B08A90();
        uint64_t v219 = sub_253B09250();
        uint64_t v221 = v220;
        sub_2534D954C();
        sub_253477128();
        v214();
        if (v216 != v219 || v218 != v221)
        {
          char v223 = sub_253B0A4C0();
          swift_bridgeObjectRelease();
          if ((v223 & 1) == 0)
          {
            swift_bridgeObjectRetain();
            sub_253578ED4();
            sub_253B05820();
            long long v229 = v312;
            *uint64_t v312 = v216;
            v229[1] = v218;
            uint64_t v230 = v262;
            sub_25346CCF8();
            v231();
            uint64_t v232 = sub_253578E64();
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v232, v233, v234, v230);
            uint64_t v123 = sub_25353CE60();
            goto LABEL_10;
          }
LABEL_69:
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        goto LABEL_60;
      }
      uint64_t v164 = v215;
      goto LABEL_53;
    }
  }
  else
  {
    sub_2534D88A0((uint64_t)v177, v284, &qword_269CDEE20);
    sub_2534D8B48(v188, 1, v187);
    if (!v193)
    {
      sub_2534D8E14();
      v224();
      sub_253573548(&qword_269CDEE40, MEMORY[0x263F80AD0]);
      int v301 = sub_253B096B0();
      uint64_t v176 = v304;
      uint64_t v225 = v298;
      sub_2534D91AC();
      v225();
      sub_253472458(v291, &qword_269CDEE20);
      sub_253472458(v292, &qword_269CDEE20);
      sub_253477128();
      v226();
      sub_2534D91AC();
      v225();
      uint64_t v227 = sub_2534DA828();
      sub_253472458(v227, v228);
      if (v301)
      {
        uint64_t v180 = 2;
        sub_2535785D4();
        uint64_t v207 = v272;
        int v191 = v271;
        goto LABEL_50;
      }
      goto LABEL_44;
    }
    sub_253472458(v291, &qword_269CDEE20);
    sub_253472458(v292, &qword_269CDEE20);
    sub_253477128();
    v194();
    uint64_t v195 = sub_253578828();
    ((void (*)(uint64_t))v298)(v195);
  }
  sub_253472458((uint64_t)v177, &qword_269CDEE18);
LABEL_44:
  sub_2535787A8();
  sub_253B08A90();
  uint64_t v176 = v296;
  sub_253B092B0();
  sub_253477128();
  v196();
  sub_25353CDD4();
  v197();
  sub_253578D20();
  char v198 = sub_253B09230();
  sub_2534D9724();
  uint64_t v199 = v298;
  sub_2534D91AC();
  v199();
  sub_2534D91AC();
  v199();
  uint64_t v177 = v285;
  sub_2534DA828();
  sub_2534AF234();
  v200();
  if (v198)
  {
    sub_253477128();
    v201();
LABEL_47:
    uint64_t v180 = 1;
    goto LABEL_48;
  }
  sub_253B08A90();
  sub_253B092B0();
  sub_253477128();
  v202();
  sub_25353CDD4();
  v203();
  sub_2535791D8();
  char v204 = sub_253B09230();
  sub_2534D91AC();
  v199();
  sub_2534D91AC();
  v199();
  uint64_t v205 = v304;
  uint64_t v177 = (uint64_t *)(v305 + 8);
  sub_2535791E4();
  sub_25351C3E8();
  v206();
  if (v204) {
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  int v244 = v280;
  sub_253B082F0();
  os_signpost_type_t v245 = v306;
  ((void (*)(uint64_t, uint64_t, void (*)(void)))v306)(v281, v276, v205);
  os_signpost_id_t v246 = v282;
  uint64_t v247 = sub_253578E4C();
  v245(v247);
  uint64_t v248 = sub_253B089D0();
  os_log_type_t v249 = sub_253B09D80();
  if (sub_2534AF330(v249))
  {
    sub_253465A6C();
    uint64_t v312 = (void *)sub_2535788BC();
    a10 = (uint64_t)v312;
    *os_signpost_id_t v246 = 136315394;
    uint64_t v309 = v246 + 1;
    LODWORD(v311) = v244;
    sub_253B08A90();
    sub_253578C34();
    sub_253B092B0();
    sub_253477128();
    v250();
    sub_253578D20();
    uint64_t v251 = sub_253B09730();
    uint64_t v253 = sub_253464DF8(v251, v252, &a10);
    sub_253578A28(v253);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    uint64_t v254 = v302;
    sub_25351C3E8();
    v254();
    sub_253578DC4();
    uint64_t v255 = sub_253B08AF0();
    uint64_t v257 = sub_253464DF8(v255, v256, &a10);
    sub_25357927C(v257);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    sub_25351C3E8();
    v254();
    sub_2535793F8(&dword_253460000, v248, (os_log_type_t)v311, "Unsupported container origin: %s. Not indexing tool: %s");
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();
  }
  else
  {
    uint64_t v258 = v302;
    sub_25351C3E8();
    v258();
    ((void (*)(_DWORD *, void (*)(void)))v258)(v246, v205);
  }

  sub_2534659CC();
  v259();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v313);
LABEL_12:
  sub_2534847C8();
}

uint64_t sub_253569468@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  char v8 = *((unsigned char *)a1 + 24);
  uint64_t v9 = sub_253B08AF0();
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v6;
  *(void *)(a3 + 32) = v7;
  *(unsigned char *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2535694E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for ToolboxVersion(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v50 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_253B089F0();
  uint64_t result = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < a1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v23 = *(void *)(a4 + 16);
  if (v23 >= a1 && (uint64_t)v23 >= a2)
  {
    uint64_t v49 = v16;
    uint64_t v52 = result;
    uint64_t v53 = v22;
    uint64_t v51 = v20;
    uint64_t v54 = a8;
    MEMORY[0x270FA5388](result);
    v46[-6] = a5;
    v46[-5] = a6;
    v46[-4] = a7;
    v46[-3] = a3;
    v46[-2] = v25;
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = v55;
    sub_253547D00(v26, a4 + 32, a1, (2 * a2) | 1, (void (*)(void, void))sub_253574250, (uint64_t)&v46[-8]);
    swift_bridgeObjectRelease();
    if (!v27)
    {
      sub_253B05700();
      swift_bridgeObjectRelease();
      if (v54)
      {
        char v29 = *(unsigned char *)(v54 + 16);
        swift_retain();
        if (v29)
        {
          unint64_t v30 = v53;
          sub_253B08360();
          swift_retain_n();
          unint64_t v31 = sub_253B089D0();
          os_log_type_t v32 = sub_253B09D60();
          int v33 = v32;
          if (os_log_type_enabled(v31, v32))
          {
            LODWORD(v55) = v33;
            uint64_t v34 = (uint8_t *)swift_slowAlloc();
            uint64_t v35 = swift_slowAlloc();
            uint64_t v48 = v35;
            *(_DWORD *)uint64_t v34 = 136315138;
            uint64_t v57 = v35;
            v46[1] = v34 + 4;
            uint64_t v47 = v34;
            uint64_t v36 = a7[32];
            uint64_t v37 = a7[33];
            sub_253472068(a7 + 29, v36);
            uint64_t v38 = v50;
            (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
            uint64_t v39 = &v38[*(int *)(v49 + 20)];
            uint64_t v40 = sub_253B06CD0();
            unint64_t v42 = v41;
            uint64_t v43 = sub_253B06CE0();
            (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v39, v43);
            uint64_t v56 = sub_253464DF8(v40, v42, &v57);
            sub_253B09E80();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v44 = v47;
            _os_log_impl(&dword_253460000, v31, (os_log_type_t)v55, "ToolEmbeddingToolDatabase: received cancellation request. Cancelling %s toolbox.", v47, 0xCu);
            uint64_t v45 = v48;
            swift_arrayDestroy();
            MEMORY[0x25A269E60](v45, -1, -1);
            MEMORY[0x25A269E60](v44, -1, -1);

            swift_release();
            (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v52);
          }
          else
          {

            swift_release();
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v52);
          }
          char v28 = 0;
          return v28 & 1;
        }
        swift_release();
      }
      char v28 = 1;
    }
    return v28 & 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_253569934@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  unint64_t v54 = a1;
  uint64_t v51 = a5;
  uint64_t v7 = sub_253B089F0();
  *(void *)&long long v50 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253B09720();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = type metadata accessor for ToolboxDatabasePayload(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  char v15 = *(unsigned char *)(a2 + 40);
  *(void *)uint64_t v13 = *(void *)(a2 + 8);
  *((void *)v13 + 1) = v14;
  v13[16] = v15;
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = (void *)MEMORY[0x25A269750](v16);
  if (qword_269CDA7E0 != -1) {
    swift_once();
  }
  sub_253573548(&qword_269CDEDA0, (void (*)(uint64_t))type metadata accessor for ToolboxDatabasePayload);
  uint64_t v18 = sub_253B050B0();
  if (v5)
  {
    return sub_2535734F4((uint64_t)v13, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
  }
  unint64_t v21 = v19;
  unint64_t v48 = v7;
  uint64_t v22 = v18;
  sub_253B050E0();
  swift_allocObject();
  sub_253B050D0();
  sub_253B09710();
  uint64_t v49 = v22;
  uint64_t v23 = sub_253B09700();
  uint64_t v25 = v24;
  swift_release();
  if (!v25)
  {
    sub_253B08300();
    unint64_t v42 = sub_253B089D0();
    os_log_type_t v43 = sub_253B09D80();
    if (os_log_type_enabled(v42, v43))
    {
      unint64_t v44 = v21;
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_253460000, v42, v43, "Could not convert tool definition representation to a json string", v45, 2u);
      uint64_t v46 = v45;
      unint64_t v21 = v44;
      MEMORY[0x25A269E60](v46, -1, -1);
    }

    (*(void (**)(char *, unint64_t))(v50 + 8))(v9, v48);
    sub_2535382C4();
    swift_allocError();
    unsigned char *v47 = 9;
    swift_willThrow();
    sub_253487D84(v49, v21);
    return sub_2535734F4((uint64_t)v13, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
  }
  unint64_t v48 = v21;
  sub_253462A5C(&qword_269CDEDA8);
  uint64_t v26 = (int *)(sub_253462A5C(&qword_269CDEDB0) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80);
  uint64_t v28 = swift_allocObject();
  long long v50 = xmmword_253B22680;
  *(_OWORD *)(v28 + 16) = xmmword_253B22680;
  char v29 = (uint64_t *)(v28 + v27 + v26[14]);
  swift_bridgeObjectRetain();
  sub_253B05820();
  uint64_t *v29 = v23;
  v29[1] = v25;
  uint64_t v30 = *MEMORY[0x263F84740];
  uint64_t v31 = sub_253B05870();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v29, v30, v31);
  sub_253B05830();
  sub_253573548((unint64_t *)&qword_269CDB438, MEMORY[0x263F84700]);
  uint64_t v32 = sub_253B095A0();
  uint64_t v33 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = v32;
  sub_25357036C(v33, (uint64_t)sub_253572B18, 0, isUniquelyReferenced_nonNull_native, &v55);
  swift_bridgeObjectRelease();
  sub_253462A5C(&qword_269CDED18);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = v50;
  if ((v54 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v52 + 16) > v54)
  {
    uint64_t v36 = v35;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_253B09A90();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    *(void *)(v36 + 32) = v37;
    *(void *)(v36 + 40) = v39;
    uint64_t v40 = v51;
    sub_253B05880();
    sub_2535734F4((uint64_t)v13, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
    uint64_t v41 = sub_253B058A0();
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v40, 0, 1, v41);
  }
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void sub_253569F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ToolboxVersion(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4[32];
  uint64_t v12 = v4[33];
  sub_253472068(v4 + 29, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  uint64_t v13 = &v10[*(int *)(v8 + 28)];
  uint64_t v14 = sub_253B06CD0();
  uint64_t v16 = v15;
  uint64_t v17 = sub_253B06CE0();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
  if (qword_269CDA7F8 != -1) {
    uint64_t v18 = swift_once();
  }
  MEMORY[0x270FA5388](v18);
  v19[-4] = a3;
  v19[-3] = a4;
  v19[-2] = v14;
  v19[-1] = v16;
  os_unfair_lock_lock((os_unfair_lock_t)&dword_269CDEBE8);
  sub_253573C4C();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_269CDEBE8);
}

void sub_25356A108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ToolboxVersion(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4[32];
  uint64_t v12 = v4[33];
  sub_253472068(v4 + 29, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  uint64_t v13 = &v10[*(int *)(v8 + 28)];
  uint64_t v14 = sub_253B06CD0();
  uint64_t v16 = v15;
  uint64_t v17 = sub_253B06CE0();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
  if (qword_269CDA7F8 != -1) {
    uint64_t v18 = swift_once();
  }
  MEMORY[0x270FA5388](v18);
  *(&v19 - 4) = a3;
  *(&v19 - 3) = a4;
  *(&v19 - 2) = v14;
  *(&v19 - 1) = v16;
  os_unfair_lock_lock((os_unfair_lock_t)&dword_269CDEBE8);
  sub_2535747FC();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_269CDEBE8);
}

uint64_t sub_25356A2D8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_253B089F0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = a2(v11);
  if (v5)
  {
    uint64_t v27 = a4;
    sub_253B08300();
    swift_bridgeObjectRetain();
    id v15 = v5;
    swift_bridgeObjectRetain();
    id v16 = v5;
    uint64_t v17 = sub_253B089D0();
    os_log_type_t v18 = sub_253B09D80();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v29 = v25;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v26 = v10;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_253464DF8(v27, a5, &v29);
      uint64_t v27 = v9;
      uint64_t v28 = v21;
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 2112;
      id v22 = v5;
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v28 = v23;
      sub_253B09E80();
      *uint64_t v20 = v23;

      _os_log_impl(&dword_253460000, v17, v18, "%s Failed to access sentinel file: %@", (uint8_t *)v19, 0x16u);
      sub_253462A5C(&qword_269CDBEA8);
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v20, -1, -1);
      uint64_t v24 = v25;
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v24, -1, -1);
      MEMORY[0x25A269E60](v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25356A5E0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_253B089F0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(&v29, v11);
  if (!v5) {
    return v29;
  }
  sub_253B08300();
  swift_bridgeObjectRetain();
  id v14 = v5;
  swift_bridgeObjectRetain();
  id v15 = v5;
  id v16 = sub_253B089D0();
  os_log_type_t v17 = sub_253B09D80();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v30 = v26;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_253464DF8(a4, a5, &v30);
    uint64_t v27 = v9;
    uint64_t v28 = v19;
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2112;
    id v20 = v5;
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v28 = v21;
    sub_253B09E80();
    id v22 = v25;
    *uint64_t v25 = v21;

    _os_log_impl(&dword_253460000, v16, v17, "%s Failed to access sentinel file: %@", (uint8_t *)v18, 0x16u);
    sub_253462A5C(&qword_269CDBEA8);
    swift_arrayDestroy();
    MEMORY[0x25A269E60](v22, -1, -1);
    uint64_t v23 = v26;
    swift_arrayDestroy();
    MEMORY[0x25A269E60](v23, -1, -1);
    MEMORY[0x25A269E60](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v27);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return swift_willThrow();
}

uint64_t sub_25356A8E0@<X0>(uint64_t *a1@<X8>)
{
  sub_253B05390();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253465A3C();
  sub_25355B254();
  uint64_t v4 = sub_253B053D0();
  if (v1)
  {
    sub_2534D97B4();
    return v6();
  }
  else
  {
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    sub_2534D97B4();
    uint64_t result = v10();
    *a1 = v8;
    a1[1] = v9;
  }
  return result;
}

void sub_25356A9D0()
{
  v7[1] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(self, sel_defaultManager);
  sub_253B05350();
  uint64_t v1 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  unsigned int v2 = objc_msgSend(v0, sel_fileExistsAtPath_, v1);

  if (v2)
  {
    uint64_t v3 = (void *)sub_253B05320();
    v7[0] = 0;
    unsigned int v4 = objc_msgSend(v0, sel_removeItemAtURL_error_, v3, v7);

    if (v4)
    {
      id v5 = v7[0];
    }
    else
    {
      id v6 = v7[0];
      sub_253B052D0();

      swift_willThrow();
    }
  }
}

uint64_t sub_25356AAFC()
{
  sub_253578A1C();
  sub_253B05390();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_253578B20();
  sub_2534D9A44();
  sub_25355B254();
  sub_25356A9D0();
  sub_25351C5C0();
  sub_2534F85D4();
  return v1();
}

void sub_25356ABAC()
{
  sub_2534847F8();
  sub_253B05390();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_253578B20();
  sub_25355B254();
  sub_253B05470();
  sub_25351C5C0();
  sub_25351C3E8();
  v1();
  sub_2534847C8();
}

uint64_t sub_25356AC74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_253B09720();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = sub_253B05390();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25355B254();
  sub_253B09710();
  uint64_t v8 = sub_253B096C0();
  if (v1) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a1 = v11;
  a1[1] = v12;
  return result;
}

uint64_t sub_25356ADF8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253530AA0(v0 + 144);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 232);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 272);
  swift_release();
  sub_253B05390();
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  sub_253B08970();
  sub_25346CAF4();
  sub_2534659CC();
  v2();
  return v0;
}

uint64_t sub_25356AEE8()
{
  sub_25356ADF8();
  sub_253578600();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x270FA0228](v0, v2, v3);
}

uint64_t sub_25356AF20(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000253B0D490 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75626972746E6F63 && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356B024(char a1)
{
  if (a1) {
    return 0x75626972746E6F63;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_25356B068(char a1)
{
  if (a1) {
    return 0x75626972746E6F63;
  }
  else {
    return 0x64496C6F6F74;
  }
}

uint64_t sub_25356B0A4()
{
  sub_253579210();
  BOOL v2 = v2 && v1 == 0xE600000000000000;
  if (v2 || (uint64_t v3 = v1, v4 = v0, (sub_25349667C() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v4 == 0x75626972746E6F63 && v3 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_25349667C();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_25356B180()
{
  sub_2534847F8();
  uint64_t v33 = v0;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDEF20);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDEF28);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534D929C(v7, v28);
  uint64_t v30 = sub_253B09440();
  sub_253465998();
  uint64_t v32 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B33C8(v10, v29);
  sub_253462A5C(&qword_269CDEF30);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_2534D8CAC();
  type metadata accessor for ToolboxDatabasePayload(v12);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_2534966B0();
  sub_253462A5C(&qword_269CDEF38);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_253472068(v4, v4[3]);
  sub_25357723C();
  sub_2535791B8();
  sub_25357369C(v33, v2);
  sub_2535791D8();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_25357736C();
    sub_253578868();
    sub_253579264();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_2535773B8();
      sub_253B0A440();
    }
    uint64_t v22 = sub_2534D9724();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_253577288();
    sub_253578868();
    sub_2535787F4();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_2535773B8();
      sub_253B0A440();
    }
    uint64_t v22 = sub_253578AC4();
LABEL_14:
    v23(v22);
    uint64_t v26 = sub_253579328();
    goto LABEL_15;
  }
  sub_253462A5C(&qword_269CDED20);
  sub_253579270();
  sub_25347FA84();
  v17(v16);
  sub_253577320();
  sub_253B0A3A0();
  sub_253573548(&qword_269CDE9A0, MEMORY[0x263F80C28]);
  sub_253B0A440();
  if (v1)
  {
    sub_2534659CC();
    v19(v18);
    sub_253579264();
    sub_2534D91A0();
    v21(v20);
  }
  else
  {
    sub_2535773B8();
    sub_253B0A440();
    sub_253579090();
    sub_2534659CC();
    v25(v24);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v30);
  }
  uint64_t v26 = sub_253578E4C();
LABEL_15:
  v27(v26);
  sub_253578DEC();
  sub_2534847C8();
}

void sub_25356B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_2534847F8();
  uint64_t v87 = v13;
  os_log_type_t v17 = v16;
  uint64_t v76 = v18;
  uint64_t v82 = sub_253462A5C(&qword_269CDEED8);
  sub_253465998();
  uint64_t v80 = v19;
  MEMORY[0x270FA5388](v20);
  sub_25346CB04();
  uint64_t v83 = v21;
  uint64_t v81 = sub_253462A5C(&qword_269CDEEE0);
  sub_253465998();
  uint64_t v79 = v22;
  MEMORY[0x270FA5388](v23);
  sub_253483628(v24, v70);
  sub_253462A5C(&qword_269CDEEE8);
  sub_253465998();
  uint64_t v77 = v26;
  uint64_t v78 = v25;
  MEMORY[0x270FA5388](v25);
  sub_253483644(v27, v70);
  sub_253462A5C(&qword_269CDEEF0);
  sub_253465998();
  uint64_t v84 = v29;
  uint64_t v85 = v28;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = sub_253578AF8();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v31);
  sub_2534B340C();
  MEMORY[0x270FA5388](v32);
  sub_253578D44();
  MEMORY[0x270FA5388](v33);
  sub_253578D54();
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v70 - v35;
  uint64_t v37 = v17[3];
  uint64_t v86 = v17;
  sub_253472068(v17, v37);
  sub_25357723C();
  uint64_t v38 = v87;
  sub_253B0A660();
  if (!v38)
  {
    uint64_t v72 = v12;
    uint64_t v73 = v15;
    uint64_t v74 = v36;
    uint64_t v75 = v14;
    uint64_t v87 = v30;
    uint64_t v39 = sub_253B0A390();
    uint64_t v40 = *(void *)(v39 + 16);
    if (v40
      && (uint64_t v71 = 0,
          int v41 = *(unsigned __int8 *)(v39 + 32),
          sub_25347B78C(1, v40, v39, v39 + 32, 0, (2 * v40) | 1),
          uint64_t v43 = v42,
          unint64_t v45 = v44,
          swift_bridgeObjectRelease(),
          v43 == v45 >> 1))
    {
      if (v41)
      {
        if (v41 == 1)
        {
          sub_253577320();
          uint64_t v46 = v71;
          sub_253B0A2C0();
          if (!v46)
          {
            sub_253B09440();
            sub_253573548(&qword_269CDE9B0, MEMORY[0x263F80C28]);
            uint64_t v47 = v75;
            sub_253B0A370();
            sub_253462A5C(&qword_269CDED20);
            sub_2535772D4();
            sub_253B0A370();
            sub_2534659CC();
            v63();
            swift_unknownObjectRelease();
            sub_2534D9220();
            v64();
            swift_storeEnumTagMultiPayload();
            uint64_t v65 = v47;
LABEL_18:
            uint64_t v69 = (uint64_t)v74;
            sub_253573624(v65, (uint64_t)v74);
            sub_253573624(v69, v76);
            goto LABEL_11;
          }
          swift_unknownObjectRelease();
          uint64_t v48 = sub_2534D9B10();
        }
        else
        {
          sub_253577288();
          uint64_t v55 = v71;
          sub_253B0A2C0();
          if (!v55)
          {
            uint64_t v56 = sub_253B0A320();
            uint64_t v58 = v57;
            sub_2535772D4();
            sub_253B0A370();
            sub_2534D9220();
            v66();
            swift_unknownObjectRelease();
            sub_2534D9A44();
            sub_2534659CC();
            v67();
            uint64_t v68 = v73;
            *uint64_t v73 = v56;
            v68[1] = v58;
            *((unsigned char *)v68 + 16) = a12;
            swift_storeEnumTagMultiPayload();
            uint64_t v65 = (uint64_t)v68;
            goto LABEL_18;
          }
          swift_unknownObjectRelease();
          uint64_t v48 = sub_2534D9A44();
        }
      }
      else
      {
        sub_25357736C();
        uint64_t v51 = v71;
        sub_253B0A2C0();
        if (!v51)
        {
          char v90 = 0;
          uint64_t v52 = sub_253B0A320();
          uint64_t v54 = v53;
          char v88 = 1;
          sub_2535772D4();
          sub_253B0A370();
          sub_2534659CC();
          v59();
          swift_unknownObjectRelease();
          sub_253579258();
          sub_2534659CC();
          v60();
          char v61 = v89;
          uint64_t v62 = v72;
          *uint64_t v72 = v52;
          v62[1] = v54;
          *((unsigned char *)v62 + 16) = v61;
          sub_2534D9AA0();
          swift_storeEnumTagMultiPayload();
          uint64_t v65 = (uint64_t)v62;
          goto LABEL_18;
        }
        swift_unknownObjectRelease();
        uint64_t v48 = sub_253579258();
      }
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      sub_253462A5C(&qword_269CDB688);
      sub_253578B64();
      sub_2534F8464();
      sub_25347B88C();
      sub_25346CCF8();
      v50();
      swift_willThrow();
      swift_unknownObjectRelease();
      uint64_t v48 = sub_253578828();
    }
    v49(v48);
  }
LABEL_11:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v86);
  sub_2534847C8();
}

uint64_t sub_25356BEB4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000253B0D490 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356BF98(char a1)
{
  if (a1) {
    return 0x65726F6373;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_25356BFD0(char a1)
{
  if (a1) {
    return 0x65726F6373;
  }
  else {
    return 0x64496C6F6F74;
  }
}

uint64_t sub_25356C000(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696665446C6F6F74 && a2 == 0xEE006E6F6974696ELL;
  if (v2 || (sub_25349667C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E61747369737361 && a2 == 0xEF616D6568635374;
    if (v6 || (sub_25349667C() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6341746E65696C63 && a2 == 0xEC0000006E6F6974)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_25349667C();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_25356C18C(char a1)
{
  if (!a1) {
    return 0x696665446C6F6F74;
  }
  if (a1 == 1) {
    return 0x6E61747369737361;
  }
  return 0x6341746E65696C63;
}

uint64_t sub_25356C204()
{
  sub_253579210();
  BOOL v2 = v2 && v1 == 0xE600000000000000;
  if (v2 || (uint64_t v3 = v1, v4 = v0, (sub_25349667C() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v4 == 0x65726F6373 && v3 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_25349667C();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_25356C2C0(void *a1)
{
  sub_253462A5C(&qword_269CDEFD0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534D929C(v4, v19);
  sub_253462A5C(&qword_269CDEFD8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25346CB04();
  sub_253B09440();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B33C8(v7, v20);
  sub_253462A5C(&qword_269CDEFE0);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534D8CAC();
  type metadata accessor for ToolboxSearchOutput(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDEFE8);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_253472068(a1, a1[3]);
  sub_2535774E8();
  sub_2535791B8();
  sub_25357369C(v22, v1);
  sub_253578E40();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_2535775CC();
    sub_253578868();
    sub_253579270();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    if (!v21) {
      sub_253B0A420();
    }
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_253577534();
    sub_253578868();
    sub_25353CE6C();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    if (!v21) {
      sub_253B0A420();
    }
LABEL_13:
    sub_2534659CC();
    v18();
    uint64_t v16 = sub_253579328();
    goto LABEL_14;
  }
  sub_253462A5C(&qword_269CDED00);
  sub_25347FA84();
  v13();
  sub_253577580();
  sub_253B0A3A0();
  sub_253573548(&qword_269CDE9A0, MEMORY[0x263F80C28]);
  sub_253B0A440();
  if (!v21)
  {
    sub_253B0A420();
    sub_253579090();
  }
  sub_2534659CC();
  v14();
  sub_2534D97B4();
  v15();
  uint64_t v16 = sub_253579334();
LABEL_14:
  v17(v16);
  sub_253578DEC();
}

uint64_t sub_25356C79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  sub_253462A5C(&qword_269CDEF90);
  sub_253465998();
  uint64_t v70 = v7;
  uint64_t v71 = v6;
  MEMORY[0x270FA5388](v6);
  sub_253483628(v8, (uint64_t)v62);
  uint64_t v73 = sub_253462A5C(&qword_269CDEF98);
  sub_253465998();
  uint64_t v69 = v9;
  MEMORY[0x270FA5388](v10);
  sub_253483644(v11, (uint64_t)v62);
  sub_253462A5C(&qword_269CDEFA0);
  sub_253465998();
  uint64_t v67 = v13;
  uint64_t v68 = v12;
  MEMORY[0x270FA5388](v12);
  sub_2534D8F68(v14, (uint64_t)v62);
  uint64_t v74 = sub_253462A5C(&qword_269CDEFA8);
  sub_253465998();
  uint64_t v72 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = sub_2534AF2D8();
  uint64_t v18 = type metadata accessor for ToolboxSearchOutput(v17);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v19);
  sub_2534B340C();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v62 - v22;
  MEMORY[0x270FA5388](v21);
  sub_253578D54();
  MEMORY[0x270FA5388](v24);
  sub_2534D9E98();
  uint64_t v75 = a1;
  uint64_t v25 = (void *)sub_253578EEC();
  sub_253472068(v25, v26);
  sub_2535774E8();
  uint64_t v27 = v76;
  sub_253B0A660();
  if (!v27)
  {
    uint64_t v62 = v2;
    uint64_t v63 = v3;
    uint64_t v64 = v4;
    uint64_t v65 = (uint64_t *)v23;
    uint64_t v76 = v18;
    uint64_t v28 = sub_253B0A390();
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29
      && (int v30 = *(unsigned __int8 *)(v28 + 32),
          sub_25347B78C(1, v29, v28, v28 + 32, 0, (2 * v29) | 1),
          uint64_t v32 = v31,
          unint64_t v34 = v33,
          swift_bridgeObjectRelease(),
          v32 == v34 >> 1))
    {
      if (v30)
      {
        if (v30 == 1)
        {
          char v82 = 1;
          sub_253577580();
          sub_2535787D4();
          sub_253B09440();
          char v81 = 0;
          sub_253573548(&qword_269CDE9B0, MEMORY[0x263F80C28]);
          sub_253B0A370();
          char v80 = 1;
          sub_253B0A350();
          int v47 = v46;
          uint64_t v48 = *(int *)(sub_253462A5C(&qword_269CDED00) + 48);
          sub_2534D97B4();
          v49();
          swift_unknownObjectRelease();
          sub_2534D9220();
          v50();
          uint64_t v51 = v65;
          *(_DWORD *)((char *)v65 + v48) = v47;
        }
        else
        {
          char v85 = 2;
          sub_253577534();
          sub_2535787D4();
          char v84 = 0;
          uint64_t v43 = sub_253B0A320();
          uint64_t v45 = v44;
          char v83 = 1;
          sub_253B0A350();
          int v57 = v56;
          sub_2534D9220();
          v58();
          swift_unknownObjectRelease();
          sub_2534D8E50();
          sub_2534659CC();
          v59();
          uint64_t v51 = v63;
          uint64_t *v63 = v43;
          v51[1] = v45;
          *((_DWORD *)v51 + 4) = v57;
        }
      }
      else
      {
        char v79 = 0;
        sub_2535775CC();
        sub_2535787D4();
        char v78 = 0;
        uint64_t v40 = sub_253B0A320();
        uint64_t v42 = v41;
        char v77 = 1;
        sub_253B0A350();
        int v53 = v52;
        sub_2534D9220();
        v54();
        swift_unknownObjectRelease();
        sub_2535791F0();
        sub_2534659CC();
        v55();
        uint64_t v51 = v62;
        *uint64_t v62 = v40;
        v51[1] = v42;
        *((_DWORD *)v51 + 4) = v53;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = (uint64_t)v51;
      uint64_t v61 = v64;
      sub_253573624(v60, v64);
      sub_253573624(v61, v66);
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      sub_253462A5C(&qword_269CDB688);
      sub_253578B64();
      sub_2534F8464();
      sub_25347B88C();
      sub_25346CCF8();
      v35();
      swift_willThrow();
      swift_unknownObjectRelease();
      uint64_t v36 = sub_253578828();
      v38(v36, v37);
    }
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v75);
}

uint64_t sub_25356CF0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657669746167656ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356D004(char a1)
{
  if (a1) {
    return 0x657669746167656ELL;
  }
  else {
    return 0x6576697469736F70;
  }
}

void sub_25356D034()
{
  sub_2534847F8();
  char v14 = v1;
  sub_253462A5C(&qword_269CDEF78);
  sub_253465998();
  uint64_t v12 = v3;
  uint64_t v13 = v2;
  MEMORY[0x270FA5388](v2);
  sub_2534847E0();
  sub_253462A5C(&qword_269CDEF80);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253462A5C(&qword_269CDEF88);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (void *)sub_253578EE0();
  sub_253472068(v6, v7);
  sub_253577404();
  sub_253B0A680();
  if (v14)
  {
    sub_253577450();
    sub_253B0A3A0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v13);
  }
  else
  {
    sub_25357749C();
    sub_253B0A3A0();
    sub_2534F85D4();
    v9(v8);
  }
  sub_2534B3470();
  v11(v10);
  sub_2534847C8();
}

void sub_25356D240()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  sub_253462A5C(&qword_269CDEF48);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDEF50);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDEF58);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  sub_253472068(v2, v2[3]);
  sub_253577404();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v25 = (uint64_t)v2;
  uint64_t v6 = sub_253B0A390();
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7
    || (char v8 = *(unsigned char *)(v6 + 32),
        sub_25347B78C(1, v7, v6, v6 + 32, 0, (2 * v7) | 1),
        uint64_t v10 = v9,
        unint64_t v12 = v11,
        swift_bridgeObjectRelease(),
        v10 != v12 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v18 = v17;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v18 = &unk_27034A6A0;
    sub_253B0A2D0();
    sub_253B0A080();
    sub_25347B88C();
    sub_25346CCF8();
    v20(v19);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v22(v21);
    uint64_t v2 = (void *)v25;
LABEL_8:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    goto LABEL_9;
  }
  if (v8)
  {
    sub_253577450();
    sub_253579070();
    sub_2535787F4();
    sub_2534659CC();
    v14(v13);
    swift_unknownObjectRelease();
    sub_2534D9220();
  }
  else
  {
    sub_25357749C();
    sub_253579070();
    sub_2534D8E50();
    sub_2534659CC();
    v24(v23);
    swift_unknownObjectRelease();
    uint64_t v15 = sub_253578834();
  }
  v16(v15);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v25);
LABEL_9:
  sub_2534847C8();
}

uint64_t sub_25356D5C4()
{
  return sub_25356B024(*v0);
}

uint64_t sub_25356D5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356AF20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356D5F4(uint64_t a1)
{
  unint64_t v2 = sub_253577320();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D630(uint64_t a1)
{
  unint64_t v2 = sub_253577320();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356D66C()
{
  return sub_25356B068(*v0);
}

uint64_t sub_25356D674@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25356B0A4();
  *a1 = result;
  return result;
}

uint64_t sub_25356D69C(uint64_t a1)
{
  unint64_t v2 = sub_253577288();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D6D8(uint64_t a1)
{
  unint64_t v2 = sub_253577288();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356D714(uint64_t a1)
{
  unint64_t v2 = sub_25357723C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D750(uint64_t a1)
{
  unint64_t v2 = sub_25357723C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356D78C(uint64_t a1)
{
  unint64_t v2 = sub_25357736C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D7C8(uint64_t a1)
{
  unint64_t v2 = sub_25357736C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void sub_25356D804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_25356B68C(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_25356D81C()
{
}

uint64_t sub_25356D834()
{
  return sub_25356BF98(*v0);
}

uint64_t sub_25356D83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356BEB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356D864(uint64_t a1)
{
  unint64_t v2 = sub_253577580();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D8A0(uint64_t a1)
{
  unint64_t v2 = sub_253577580();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356D8DC()
{
  return sub_25356BFD0(*v0);
}

uint64_t sub_25356D8E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25356C204();
  *a1 = result;
  return result;
}

uint64_t sub_25356D90C(uint64_t a1)
{
  unint64_t v2 = sub_253577534();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356D948(uint64_t a1)
{
  unint64_t v2 = sub_253577534();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356D984()
{
  return sub_25347D524();
}

uint64_t sub_25356D9A0()
{
  return sub_25356C18C(*v0);
}

uint64_t sub_25356D9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356C000(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356D9D0(uint64_t a1)
{
  unint64_t v2 = sub_2535774E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DA0C(uint64_t a1)
{
  unint64_t v2 = sub_2535774E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356DA48(uint64_t a1)
{
  unint64_t v2 = sub_2535775CC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DA84(uint64_t a1)
{
  unint64_t v2 = sub_2535775CC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356DAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25356C79C(a1, a2);
}

void sub_25356DAD8(void *a1)
{
}

uint64_t sub_25356DAF0()
{
  return sub_25356D004(*v0);
}

uint64_t sub_25356DAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356CF0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356DB20(uint64_t a1)
{
  unint64_t v2 = sub_253577404();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DB5C(uint64_t a1)
{
  unint64_t v2 = sub_253577404();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356DB98(uint64_t a1)
{
  unint64_t v2 = sub_253577450();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DBD4(uint64_t a1)
{
  unint64_t v2 = sub_253577450();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25356DC10(uint64_t a1)
{
  unint64_t v2 = sub_25357749C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DC4C(uint64_t a1)
{
  unint64_t v2 = sub_25357749C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void sub_25356DC88(unsigned char *a1@<X8>)
{
  sub_25356D240();
  if (!v1) {
    *a1 = v3 & 1;
  }
}

void sub_25356DCB8()
{
}

uint64_t ToolBoxAllowList.global.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolBoxAllowList.local.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25356DCE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61626F6C67 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356DDC4(char a1)
{
  if (a1) {
    return 0x6C61636F6CLL;
  }
  else {
    return 0x6C61626F6C67;
  }
}

uint64_t sub_25356DDF4()
{
  return sub_25356DDC4(*v0);
}

uint64_t sub_25356DDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356DCE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356DE24(uint64_t a1)
{
  unint64_t v2 = sub_253572D90();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356DE60(uint64_t a1)
{
  unint64_t v2 = sub_253572D90();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolBoxAllowList.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  unint64_t v12 = v11;
  char v14 = v13;
  sub_253462A5C(&qword_269CDEBF0);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_253472068(v12, v12[3]);
  sub_253572D90();
  sub_2534F8738();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  }
  else
  {
    sub_253462A5C(&qword_269CDEC00);
    sub_253572E28(&qword_269CDEC08);
    sub_253484754();
    swift_bridgeObjectRetain();
    sub_253484754();
    sub_25351C3E8();
    v16();
    void *v14 = a10;
    v14[1] = a10;
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

uint64_t sub_25356E048(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449656C646E7562 && a2 == 0xE900000000000073;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7364496C6F6F74 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356E144(char a1)
{
  if (a1) {
    return 0x7364496C6F6F74;
  }
  else {
    return 0x6449656C646E7562;
  }
}

void sub_25356E180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ToolBoxAllowList.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

uint64_t sub_25356E198()
{
  return sub_253479314();
}

uint64_t sub_25356E1B4()
{
  return sub_25356E144(*v0);
}

uint64_t sub_25356E1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356E048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356E1E4(uint64_t a1)
{
  unint64_t v2 = sub_253572DDC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356E220(uint64_t a1)
{
  unint64_t v2 = sub_253572DDC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolDenyList.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDEC10);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253472068(v2, v2[3]);
  sub_253572DDC();
  sub_253B0A680();
  sub_253462A5C(&qword_269CDEC00);
  sub_253572E28(&qword_269CDEC20);
  sub_2535788F4();
  if (!v0)
  {
    sub_253462A5C(&qword_269CDEC28);
    sub_253572ED8(&qword_269CDEC30, (void (*)(void))sub_253572E8C);
    sub_2535788F4();
  }
  sub_25351C5C0();
  sub_2534D97B4();
  v4();
  sub_253578DEC();
  sub_2534847C8();
}

void ToolDenyList.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  unint64_t v12 = v11;
  char v14 = v13;
  sub_253462A5C(&qword_269CDEC40);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_253472068(v12, v12[3]);
  sub_253572DDC();
  sub_2534F8738();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  }
  else
  {
    sub_253462A5C(&qword_269CDEC00);
    sub_253572E28(&qword_269CDEC08);
    sub_253578C90();
    sub_253B0A370();
    sub_253462A5C(&qword_269CDEC28);
    sub_253572ED8(&qword_269CDEC48, (void (*)(void))sub_253572F48);
    swift_bridgeObjectRetain();
    sub_253578C90();
    sub_253B0A370();
    sub_2534D9A08();
    v16();
    void *v14 = a10;
    v14[1] = a10;
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

uint64_t sub_25356E5DC()
{
  swift_bridgeObjectRetain();
  sub_2534D9B10();
  sub_253B09630();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2534DA828();
  sub_253B09630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25356E660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = sub_253B0A4C0(), uint64_t result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      sub_2534D973C();
      return sub_253B0A4C0();
    }
  }
  return result;
}

uint64_t sub_25356E6FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25356E7E4(char a1)
{
  if (a1) {
    return 0x6449656C646E7562;
  }
  else {
    return 0x64496C6F6F74;
  }
}

void sub_25356E818()
{
  sub_2534847F8();
  sub_253462A5C(&qword_269CDECB0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534847E0();
  BOOL v2 = (void *)sub_2535793C0();
  sub_253472068(v2, v3);
  sub_253573488();
  sub_253B0A680();
  sub_253578AC4();
  sub_253B0A3F0();
  if (!v0) {
    sub_253B0A3F0();
  }
  sub_25353CE6C();
  sub_25351C3E8();
  v4();
  sub_2534847C8();
}

uint64_t sub_25356E934()
{
  return sub_253B0A630();
}

void sub_25356E9C4()
{
  sub_2534847F8();
  BOOL v2 = v1;
  sub_253462A5C(&qword_269CDECC0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253472068(v2, v2[3]);
  sub_253573488();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    sub_253B0A320();
    swift_bridgeObjectRetain();
    sub_253B0A320();
    sub_2534D9A08();
    v4();
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_25356EB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ToolDenyList.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_25356EBA0()
{
}

uint64_t sub_25356EBB8()
{
  return sub_25356E7E4(*v0);
}

uint64_t sub_25356EBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25356E6FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25356EBE8(uint64_t a1)
{
  unint64_t v2 = sub_253573488();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25356EC24(uint64_t a1)
{
  unint64_t v2 = sub_253573488();
  return MEMORY[0x270FA00B8](a1, v2);
}

void sub_25356EC60(void *a1@<X8>)
{
  sub_25356E9C4();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void sub_25356EC90()
{
}

uint64_t sub_25356ECB0()
{
  return sub_25356E934();
}

uint64_t sub_25356ECBC()
{
  return sub_25356E5DC();
}

uint64_t sub_25356ECC8()
{
  return sub_253B0A630();
}

uint64_t sub_25356ED4C(uint64_t *a1, uint64_t *a2)
{
  return sub_25356E660(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_25356ED68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_253462A5C(&qword_269CDED80);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  sub_253B07020();
  return swift_release();
}

uint64_t sub_25356EEC4(int *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a3;
  uint64_t v6 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_25356EF94;
  return v6();
}

uint64_t sub_25356EF94()
{
  sub_253477168();
  sub_253477088();
  sub_253535478();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_253477158();
  *uint64_t v5 = v4;
  *(void *)(v6 + 40) = v0;
  swift_task_dealloc();
  sub_25347719C();
  return MEMORY[0x270FA2498](v7, v8, v9);
}

uint64_t sub_25356F070()
{
  sub_253477168();
  sub_253462A5C(&qword_269CDED80);
  sub_253B09BC0();
  sub_2534771C0();
  return v0();
}

uint64_t sub_25356F0D8()
{
  sub_253477168();
  *(void *)(v0 + 16) = *(void *)(v0 + 40);
  sub_253462A5C(&qword_269CDED80);
  sub_253B09BB0();
  sub_2534771C0();
  return v1();
}

id sub_25356F150(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
  uint64_t v4 = (void *)sub_253B09A50();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    sub_253B052D0();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_25356F24C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for ToolBoxToolSearchResult(0);
  uint64_t v135 = *(void *)(v141 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v141);
  uint64_t v132 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  uint64_t v11 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v11)
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11) {
        return sub_25356FC8C(0, v11, 1, a1);
      }
      return result;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t v13 = result;
  uint64_t result = sub_2539DF784(v11 / 2);
  uint64_t v128 = result;
  uint64_t v129 = v11;
  unint64_t v134 = v14;
  if (v11 <= 0)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    unint64_t v67 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_102:
    if (v67 < 2) {
      goto LABEL_116;
    }
    uint64_t v118 = *a1;
    while (1)
    {
      unint64_t v119 = v67 - 2;
      if (v67 < 2) {
        break;
      }
      if (!v118) {
        goto LABEL_148;
      }
      uint64_t v120 = v17;
      uint64_t v121 = *(void *)(v17 + 32 + 16 * v119);
      uint64_t v122 = *(void *)(v17 + 32 + 16 * (v67 - 1) + 8);
      uint64_t result = sub_25356FF44(v118 + *(void *)(v135 + 72) * v121, v118 + *(void *)(v135 + 72) * *(void *)(v17 + 32 + 16 * (v67 - 1)), v118 + *(void *)(v135 + 72) * v122, v134);
      if (v2) {
        goto LABEL_114;
      }
      if (v122 < v121) {
        goto LABEL_135;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v120 = result;
      }
      if (v119 >= *(void *)(v120 + 16)) {
        goto LABEL_136;
      }
      uint64_t v123 = (void *)(v120 + 32 + 16 * v119);
      void *v123 = v121;
      v123[1] = v122;
      unint64_t v124 = *(void *)(v120 + 16);
      if (v67 > v124) {
        goto LABEL_137;
      }
      uint64_t result = (uint64_t)memmove((void *)(v120 + 32 + 16 * (v67 - 1)), (const void *)(v120 + 32 + 16 * v67), 16 * (v124 - v67));
      *(void *)(v120 + 16) = v124 - 1;
      unint64_t v67 = v124 - 1;
      uint64_t v17 = v120;
      if (v124 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  uint64_t v15 = v11;
  uint64_t v127 = v13;
  uint64_t v16 = 0;
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v18 = v15;
  uint64_t v140 = a1;
  while (1)
  {
    uint64_t v19 = v16;
    uint64_t v20 = v16 + 1;
    if (v16 + 1 >= v18)
    {
      uint64_t v30 = v16 + 1;
    }
    else
    {
      uint64_t v21 = *a1;
      uint64_t v133 = v16;
      uint64_t v143 = *(void *)(v135 + 72);
      uint64_t v22 = v143;
      uint64_t v23 = v21;
      uint64_t v24 = v137;
      sub_25357369C(v21 + v143 * v20, v137);
      uint64_t v25 = v23 + v22 * v133;
      uint64_t v26 = v138;
      sub_25357369C(v25, v138);
      uint64_t v27 = *(int *)(v141 + 20);
      float v28 = *(float *)(v24 + v27);
      float v29 = *(float *)(v26 + v27);
      sub_2535734F4(v26, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      uint64_t result = sub_2535734F4(v24, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      uint64_t v30 = v133 + 2;
      uint64_t v131 = v23;
      if (v133 + 2 >= v18)
      {
        uint64_t v19 = v133;
      }
      else
      {
        uint64_t v130 = v17;
        uint64_t v139 = v143 * v20;
        uint64_t v31 = v23;
        uint64_t v136 = v143 * v30;
        while (1)
        {
          uint64_t v32 = v18;
          uint64_t v33 = v30;
          uint64_t v34 = v137;
          sub_25357369C(v31 + v136, v137);
          uint64_t v35 = v138;
          sub_25357369C(v31 + v139, v138);
          BOOL v36 = *(float *)(v35 + *(int *)(v141 + 20)) >= *(float *)(v34 + *(int *)(v141 + 20));
          sub_2535734F4(v35, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
          uint64_t result = sub_2535734F4(v34, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
          if (v29 < v28 == v36) {
            break;
          }
          ++v30;
          v31 += v143;
          uint64_t v18 = v32;
          if (v33 + 1 >= v32)
          {
            uint64_t v30 = v32;
            uint64_t v17 = v130;
            a1 = v140;
            uint64_t v19 = v133;
            goto LABEL_13;
          }
        }
        uint64_t v17 = v130;
        a1 = v140;
        uint64_t v19 = v133;
        uint64_t v18 = v32;
      }
LABEL_13:
      if (v29 < v28)
      {
        if (v30 < v19) {
          goto LABEL_141;
        }
        if (v19 < v30)
        {
          uint64_t v136 = v18;
          uint64_t v130 = v17;
          uint64_t v37 = 0;
          uint64_t v38 = v19;
          uint64_t v39 = v143;
          uint64_t v40 = v143 * (v30 - 1);
          uint64_t v41 = v30 * v143;
          uint64_t v42 = v38;
          uint64_t v43 = v38 * v143;
          do
          {
            if (v42 != v30 + v37 - 1)
            {
              uint64_t v44 = v131;
              if (!v131) {
                goto LABEL_147;
              }
              unint64_t v45 = v131 + v43;
              uint64_t v139 = v131 + v40;
              sub_253573624(v131 + v43, v132);
              if (v43 < v40 || v45 >= v44 + v41)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v39 = v143;
              }
              else
              {
                uint64_t v39 = v143;
                if (v43 != v40) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              uint64_t result = sub_253573624(v132, v139);
            }
            ++v42;
            --v37;
            v40 -= v39;
            v41 -= v39;
            v43 += v39;
          }
          while (v42 < v30 + v37);
          uint64_t v17 = v130;
          a1 = v140;
          uint64_t v19 = v133;
          uint64_t v18 = v136;
        }
      }
    }
    if (v30 < v18)
    {
      if (__OFSUB__(v30, v19)) {
        goto LABEL_139;
      }
      if (v30 - v19 < v127)
      {
        if (__OFADD__(v19, v127)) {
          goto LABEL_142;
        }
        if (v19 + v127 >= v18) {
          uint64_t v47 = v18;
        }
        else {
          uint64_t v47 = v19 + v127;
        }
        if (v47 < v19) {
          goto LABEL_143;
        }
        if (v30 != v47)
        {
          uint64_t v133 = v19;
          uint64_t v130 = v17;
          uint64_t v131 = v47;
          uint64_t v126 = v2;
          uint64_t v48 = *(void *)(v135 + 72);
          uint64_t v143 = v48 * (v30 - 1);
          uint64_t v136 = v48;
          uint64_t v49 = v30 * v48;
          do
          {
            uint64_t v50 = 0;
            uint64_t v51 = v133;
            uint64_t v139 = v30;
            while (1)
            {
              int v52 = v140;
              uint64_t v53 = *v140;
              uint64_t v54 = v49;
              uint64_t v55 = v49 + v50 + *v140;
              uint64_t v56 = v137;
              sub_25357369C(v55, v137);
              uint64_t v57 = v143 + v50 + v53;
              uint64_t v58 = v138;
              sub_25357369C(v57, v138);
              uint64_t v59 = *(int *)(v141 + 20);
              float v60 = *(float *)(v56 + v59);
              float v61 = *(float *)(v58 + v59);
              sub_2535734F4(v58, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
              uint64_t result = sub_2535734F4(v56, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
              if (v61 >= v60) {
                break;
              }
              uint64_t v62 = *v52;
              if (!*v52) {
                goto LABEL_145;
              }
              uint64_t v49 = v54;
              uint64_t v63 = v62 + v143 + v50;
              sub_253573624(v62 + v54 + v50, v142);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_253573624(v142, v63);
              v50 -= v136;
              ++v51;
              uint64_t v64 = v139;
              if (v139 == v51) {
                goto LABEL_46;
              }
            }
            uint64_t v64 = v139;
            uint64_t v49 = v54;
LABEL_46:
            uint64_t v30 = v64 + 1;
            v143 += v136;
            v49 += v136;
          }
          while (v30 != v131);
          uint64_t v30 = v131;
          uint64_t v2 = v126;
          uint64_t v17 = v130;
          a1 = v140;
          uint64_t v19 = v133;
        }
      }
    }
    if (v30 < v19) {
      goto LABEL_138;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v139 = v30;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *(void *)(v17 + 16) + 1, 1, (char *)v17);
      uint64_t v17 = result;
    }
    unint64_t v66 = *(void *)(v17 + 16);
    unint64_t v65 = *(void *)(v17 + 24);
    unint64_t v67 = v66 + 1;
    if (v66 >= v65 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v65 > 1), v66 + 1, 1, (char *)v17);
      uint64_t v17 = result;
    }
    *(void *)(v17 + 16) = v67;
    uint64_t v68 = v17 + 32;
    uint64_t v69 = (uint64_t *)(v17 + 32 + 16 * v66);
    uint64_t v70 = v139;
    *uint64_t v69 = v19;
    v69[1] = v70;
    if (v66) {
      break;
    }
    unint64_t v67 = 1;
LABEL_96:
    uint64_t v18 = a1[1];
    uint64_t v16 = v139;
    if (v139 >= v18) {
      goto LABEL_102;
    }
  }
  while (1)
  {
    unint64_t v71 = v67 - 1;
    if (v67 >= 4)
    {
      unint64_t v76 = v68 + 16 * v67;
      uint64_t v77 = *(void *)(v76 - 64);
      uint64_t v78 = *(void *)(v76 - 56);
      BOOL v82 = __OFSUB__(v78, v77);
      uint64_t v79 = v78 - v77;
      if (v82) {
        goto LABEL_123;
      }
      uint64_t v81 = *(void *)(v76 - 48);
      uint64_t v80 = *(void *)(v76 - 40);
      BOOL v82 = __OFSUB__(v80, v81);
      uint64_t v74 = v80 - v81;
      char v75 = v82;
      if (v82) {
        goto LABEL_124;
      }
      unint64_t v83 = v67 - 2;
      char v84 = (uint64_t *)(v68 + 16 * (v67 - 2));
      uint64_t v86 = *v84;
      uint64_t v85 = v84[1];
      BOOL v82 = __OFSUB__(v85, v86);
      uint64_t v87 = v85 - v86;
      if (v82) {
        goto LABEL_125;
      }
      BOOL v82 = __OFADD__(v74, v87);
      uint64_t v88 = v74 + v87;
      if (v82) {
        goto LABEL_127;
      }
      if (v88 >= v79)
      {
        uint64_t v106 = (uint64_t *)(v68 + 16 * v71);
        uint64_t v108 = *v106;
        uint64_t v107 = v106[1];
        BOOL v82 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v82) {
          goto LABEL_133;
        }
        BOOL v99 = v74 < v109;
        goto LABEL_85;
      }
    }
    else
    {
      if (v67 != 3)
      {
        uint64_t v100 = *(void *)(v17 + 32);
        uint64_t v101 = *(void *)(v17 + 40);
        BOOL v82 = __OFSUB__(v101, v100);
        uint64_t v93 = v101 - v100;
        char v94 = v82;
        goto LABEL_79;
      }
      uint64_t v73 = *(void *)(v17 + 32);
      uint64_t v72 = *(void *)(v17 + 40);
      BOOL v82 = __OFSUB__(v72, v73);
      uint64_t v74 = v72 - v73;
      char v75 = v82;
    }
    if (v75) {
      goto LABEL_126;
    }
    unint64_t v83 = v67 - 2;
    char v89 = (uint64_t *)(v68 + 16 * (v67 - 2));
    uint64_t v91 = *v89;
    uint64_t v90 = v89[1];
    BOOL v92 = __OFSUB__(v90, v91);
    uint64_t v93 = v90 - v91;
    char v94 = v92;
    if (v92) {
      goto LABEL_128;
    }
    uint64_t v95 = (uint64_t *)(v68 + 16 * v71);
    uint64_t v97 = *v95;
    uint64_t v96 = v95[1];
    BOOL v82 = __OFSUB__(v96, v97);
    uint64_t v98 = v96 - v97;
    if (v82) {
      goto LABEL_130;
    }
    if (__OFADD__(v93, v98)) {
      goto LABEL_132;
    }
    if (v93 + v98 >= v74)
    {
      BOOL v99 = v74 < v98;
LABEL_85:
      if (v99) {
        unint64_t v71 = v83;
      }
      goto LABEL_87;
    }
LABEL_79:
    if (v94) {
      goto LABEL_129;
    }
    uint64_t v102 = (uint64_t *)(v68 + 16 * v71);
    uint64_t v104 = *v102;
    uint64_t v103 = v102[1];
    BOOL v82 = __OFSUB__(v103, v104);
    uint64_t v105 = v103 - v104;
    if (v82) {
      goto LABEL_131;
    }
    if (v105 < v93) {
      goto LABEL_96;
    }
LABEL_87:
    unint64_t v110 = v71 - 1;
    if (v71 - 1 >= v67)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    uint64_t v111 = *a1;
    if (!*a1) {
      goto LABEL_146;
    }
    uint64_t v112 = v17;
    char v113 = (uint64_t *)(v68 + 16 * v110);
    uint64_t v114 = *v113;
    uint64_t v115 = (void *)(v68 + 16 * v71);
    uint64_t v116 = v115[1];
    uint64_t result = sub_25356FF44(v111 + *(void *)(v135 + 72) * *v113, v111 + *(void *)(v135 + 72) * *v115, v111 + *(void *)(v135 + 72) * v116, v134);
    if (v2) {
      break;
    }
    if (v116 < v114) {
      goto LABEL_120;
    }
    if (v71 > *(void *)(v112 + 16)) {
      goto LABEL_121;
    }
    *char v113 = v114;
    *(void *)(v68 + 16 * v110 + 8) = v116;
    unint64_t v117 = *(void *)(v112 + 16);
    if (v71 >= v117) {
      goto LABEL_122;
    }
    uint64_t v17 = v112;
    unint64_t v67 = v117 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v68 + 16 * v71), v115 + 2, 16 * (v117 - 1 - v71));
    *(void *)(v112 + 16) = v117 - 1;
    a1 = v140;
    if (v117 <= 2) {
      goto LABEL_96;
    }
  }
LABEL_114:
  swift_bridgeObjectRelease();
  if (v129 >= -1) {
    goto LABEL_117;
  }
  __break(1u);
LABEL_116:
  uint64_t result = swift_bridgeObjectRelease();
  if (v129 >= -1)
  {
LABEL_117:
    *(void *)(v128 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
  return result;
}

uint64_t sub_25356FC8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for ToolBoxToolSearchResult(0);
  uint64_t v7 = MEMORY[0x270FA5388](v31);
  uint64_t v32 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v30 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v34 = v16 * (v30 - 1);
    uint64_t v29 = v16;
    uint64_t v33 = v16 * v30;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v28;
      do
      {
        uint64_t v19 = *a4;
        uint64_t v20 = a4;
        sub_25357369C(v33 + v17 + *a4, (uint64_t)v15);
        sub_25357369C(v34 + v17 + v19, (uint64_t)v11);
        uint64_t v21 = *(int *)(v31 + 20);
        float v22 = *(float *)&v15[v21];
        float v23 = *(float *)&v11[v21];
        sub_2535734F4((uint64_t)v11, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
        uint64_t result = sub_2535734F4((uint64_t)v15, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
        if (v23 >= v22) {
          break;
        }
        uint64_t v24 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v25 = v24 + v34 + v17;
        sub_253573624(v24 + v33 + v17, v32);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_253573624(v32, v25);
        v17 -= v29;
        ++v18;
        a4 = v20;
      }
      while (v30 != v18);
      v34 += v29;
      v33 += v29;
      if (++v30 != v27) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_25356FF44(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v56 = type metadata accessor for ToolBoxToolSearchResult(0);
  uint64_t v8 = MEMORY[0x270FA5388](v56);
  uint64_t v55 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v54 = (uint64_t)&v49 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  int64_t v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_75;
  }
  int64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_76;
  }
  uint64_t v18 = v14 / v13;
  uint64_t v19 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    uint64_t result = sub_2535256F0(a2, v16 / v13);
    uint64_t v31 = v19 * v13;
    unint64_t v20 = a4 + v19 * v13;
    if (v31 < 1 || a1 >= a2) {
      goto LABEL_69;
    }
    unint64_t v52 = a4;
    uint64_t v53 = -v13;
    uint64_t v50 = v13;
    unint64_t v51 = a1;
    while (1)
    {
      unint64_t v33 = a3;
      uint64_t v34 = v53;
      uint64_t v35 = v54;
      a3 += v53;
      unint64_t v36 = v20 + v53;
      sub_25357369C(v20 + v53, v54);
      unint64_t v37 = a2 + v34;
      uint64_t v38 = a2 + v34;
      uint64_t v39 = v55;
      sub_25357369C(v38, v55);
      uint64_t v40 = *(int *)(v56 + 20);
      float v41 = *(float *)(v35 + v40);
      float v42 = *(float *)(v39 + v40);
      sub_2535734F4(v39, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      uint64_t result = sub_2535734F4(v35, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      if (v42 >= v41)
      {
        if (v33 >= v20 && a3 < v20)
        {
          a4 = v52;
          if (v33 != v20) {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v20 = v36;
          goto LABEL_64;
        }
        uint64_t result = swift_arrayInitWithTakeFrontToBack();
        unint64_t v20 = v36;
      }
      else
      {
        if (v33 >= a2 && a3 < a2)
        {
          unint64_t v45 = v51;
          a4 = v52;
          if (v33 != a2) {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          a2 = v37;
          uint64_t v13 = v50;
          goto LABEL_65;
        }
        uint64_t result = swift_arrayInitWithTakeFrontToBack();
        a2 = v37;
      }
      a4 = v52;
LABEL_64:
      uint64_t v13 = v50;
      unint64_t v45 = v51;
LABEL_65:
      if (v20 <= a4 || a2 <= v45) {
        goto LABEL_69;
      }
    }
  }
  uint64_t result = sub_2535256F0(a1, v14 / v13);
  unint64_t v20 = a4 + v18 * v13;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    do
    {
      uint64_t v22 = v54;
      sub_25357369C(a2, v54);
      uint64_t v23 = v55;
      sub_25357369C(a4, v55);
      uint64_t v24 = *(int *)(v56 + 20);
      float v25 = *(float *)(v22 + v24);
      float v26 = *(float *)(v23 + v24);
      sub_2535734F4(v23, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      uint64_t result = sub_2535734F4(v22, (void (*)(void))type metadata accessor for ToolBoxToolSearchResult);
      if (v26 >= v25)
      {
        if (a1 < a4 || a1 >= a4 + v13)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v27 = a2;
        a4 += v13;
      }
      else
      {
        unint64_t v27 = a2 + v13;
        if (a1 < a2 || a1 >= v27)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
      }
      a1 += v13;
      BOOL v30 = a4 >= v20 || v27 >= a3;
      a2 = v27;
    }
    while (!v30);
  }
LABEL_69:
  int64_t v47 = v20 - a4;
  if (v13 != -1 || v47 != 0x8000000000000000)
  {
    sub_2535256F0(a4, v47 / v13);
    return 1;
  }
LABEL_77:
  __break(1u);
  return result;
}

uint64_t sub_25357036C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v53 = a5;
  uint64_t v51 = sub_253B05870();
  uint64_t v47 = *(void *)(v51 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v51);
  unint64_t v45 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v41 - v11;
  uint64_t v50 = sub_253B05830();
  uint64_t v46 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  int64_t v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_253462A5C(&qword_269CDEE08);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25357430C(a1, a2, a3, &v52);
  v41[1] = a1;
  swift_bridgeObjectRetain();
  v41[0] = a3;
  swift_retain();
  sub_253574348((uint64_t)v17);
  uint64_t v18 = sub_253462A5C(&qword_269CDEDB0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v18) == 1)
  {
LABEL_15:
    swift_release();
    swift_bridgeObjectRelease();
    sub_25351C1A8();
    return swift_release();
  }
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  uint64_t v49 = v46 + 32;
  uint64_t v19 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v43 = v47 + 8;
  uint64_t v44 = v47 + 16;
  v41[3] = v47 + 40;
  float v42 = (void (**)(char *, uint64_t))(v46 + 8);
  while (1)
  {
    unint64_t v20 = &v17[*(int *)(v18 + 48)];
    v48(v14, v17, v50);
    uint64_t v21 = *v19;
    uint64_t v22 = v12;
    (*v19)(v12, v20, v51);
    uint64_t v23 = *v53;
    sub_25396E5A0();
    unint64_t v26 = v25;
    uint64_t v27 = *(void *)(v23 + 16);
    BOOL v28 = (v24 & 1) == 0;
    if (__OFADD__(v27, v28)) {
      break;
    }
    char v29 = v24;
    if (*(void *)(v23 + 24) >= v27 + v28)
    {
      if (a4)
      {
        if (v24) {
          goto LABEL_10;
        }
      }
      else
      {
        sub_253462A5C(&qword_269CDB430);
        sub_253B0A1A0();
        if (v29) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      sub_253AE4C28();
      sub_25396E5A0();
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_18;
      }
      unint64_t v26 = v30;
      if (v29)
      {
LABEL_10:
        uint64_t v32 = v47;
        unint64_t v33 = v45;
        uint64_t v12 = v22;
        uint64_t v34 = v22;
        uint64_t v35 = v51;
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v45, v34, v51);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v35);
        (*v42)(v14, v50);
        (*(void (**)(unint64_t, char *, uint64_t))(v32 + 40))(*(void *)(*v53 + 56) + *(void *)(v32 + 72) * v26, v33, v35);
        goto LABEL_14;
      }
    }
    unint64_t v36 = (void *)*v53;
    *(void *)(*v53 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    v48((char *)(v36[6] + *(void *)(v46 + 72) * v26), v14, v50);
    uint64_t v12 = v22;
    v21((char *)(v36[7] + *(void *)(v47 + 72) * v26), v22, v51);
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_17;
    }
    v36[2] = v39;
LABEL_14:
    sub_253574348((uint64_t)v17);
    uint64_t v18 = sub_253462A5C(&qword_269CDEDB0);
    a4 = 1;
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v18) == 1) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = sub_253B0A550();
  __break(1u);
  return result;
}

unint64_t *sub_253570814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a8;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v25 = a1;
  char v14 = *(unsigned char *)(a1 + 32);
  unsigned int v15 = v14 & 0x3F;
  unint64_t v16 = (unint64_t)((1 << v14) + 63) >> 6;
  uint64_t v17 = (unint64_t *)(8 * v16);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25354084C(a4);
  sub_25354084C(a6);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_25354084C(a4);
  uint64_t isStackAllocationSafe = sub_25354084C(a6);
  if (v15 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v17 = (unint64_t *)((char *)&v24 - (((unint64_t)v17 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_253AE5AC4(0, v16, v17);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25354084C(a4);
    sub_25354084C(a6);
    uint64_t v19 = v26;
    uint64_t v20 = sub_253570D44(v17, v16, v25, a2, a3, a4, a5, a6, a7, v24);
    if (v19) {
      swift_willThrow();
    }
    else {
      uint64_t v17 = (unint64_t *)v20;
    }
  }
  else
  {
    uint64_t v21 = (unint64_t *)swift_slowAlloc();
    sub_253AE5AC4(0, v16, v21);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_25354084C(a4);
    sub_25354084C(a6);
    uint64_t v22 = sub_253570D44(v21, v16, v25, a2, a3, a4, a5, a6, a7, v24);
    if (!v26) {
      uint64_t v17 = (unint64_t *)v22;
    }
    MEMORY[0x25A269E60](v21, -1, -1);
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_25353847C(a4);
  sub_25353847C(a6);
  swift_bridgeObjectRelease();
  swift_release();
  sub_25353847C(a4);
  sub_25353847C(a6);
  swift_bridgeObjectRelease();
  swift_release();
  sub_25353847C(a4);
  sub_25353847C(a6);
  return v17;
}

uint64_t sub_253570B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  v13[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v9 = (void *)((char *)v13 - ((8 * v7 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_253AE5AC4(0, v7, v9);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_253571470(v9, v7, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      uint64_t v4 = v10;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (unint64_t *)swift_slowAlloc();
    sub_253AE5AC4(0, v7, v11);
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_253571470(v11, v7, v4, a2);
    MEMORY[0x25A269E60](v11, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_253570D44(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v77 = a8;
  uint64_t v74 = a6;
  uint64_t v75 = a7;
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v58 = a2;
  uint64_t v59 = a1;
  uint64_t v62 = a10;
  uint64_t v76 = a9;
  uint64_t v81 = sub_253462A5C(&qword_269CDE7B8);
  uint64_t v13 = MEMORY[0x270FA5388](v81);
  float v61 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v86 = (char *)&v57 - v15;
  uint64_t v82 = sub_253B08A60();
  uint64_t v16 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v85 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_253B09440();
  uint64_t result = MEMORY[0x270FA5388](v18);
  uint64_t v91 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = 0;
  int64_t v22 = 0;
  unint64_t v71 = (void *)a3;
  uint64_t v23 = *(void *)(a3 + 64);
  uint64_t v63 = a3 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v64 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v79 = v16 + 16;
  uint64_t v80 = v20 + 16;
  uint64_t v69 = v20;
  uint64_t v68 = (void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v70 = v16;
  uint64_t v78 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v67 = result;
  while (1)
  {
    if (v26)
    {
      uint64_t v87 = v11;
      uint64_t v83 = (v26 - 1) & v26;
      int64_t v84 = v22;
      unint64_t v27 = __clz(__rbit64(v26)) | (v22 << 6);
      goto LABEL_17;
    }
    BOOL v28 = __OFADD__(v22, 1);
    int64_t v29 = v22 + 1;
    if (v28)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v29 >= v64) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v63 + 8 * v29);
    if (!v30) {
      break;
    }
LABEL_16:
    uint64_t v87 = v11;
    uint64_t v83 = (v30 - 1) & v30;
    int64_t v84 = v29;
    unint64_t v27 = __clz(__rbit64(v30)) + (v29 << 6);
LABEL_17:
    uint64_t v32 = v71;
    unint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
    v33(v91, v71[6] + *(void *)(v69 + 72) * v27, v18);
    uint64_t v34 = v32[7];
    uint64_t v35 = *(void *)(v70 + 72);
    unint64_t v66 = v27;
    uint64_t v36 = v34 + v35 * v27;
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    BOOL v38 = v85;
    uint64_t v39 = v82;
    v37(v85, v36, v82);
    uint64_t v40 = &v86[*(int *)(v81 + 48)];
    v33(v86, (unint64_t)v91, v18);
    float v41 = v40;
    float v42 = v38;
    uint64_t v43 = v39;
    v37(v40, (uint64_t)v42, v39);
    v90[0] = v74;
    v90[1] = v75;
    uint64_t v88 = v77;
    uint64_t v89 = v76;
    uint64_t v44 = v72;
    uint64_t v45 = v87;
    sub_253553E74();
    uint64_t v11 = v45;
    if (v45)
    {
      sub_253472458((uint64_t)v86, &qword_269CDE7B8);
      (*v78)(v85, v39);
      (*v68)(v91, v67);
      swift_release();
      swift_bridgeObjectRelease();
      sub_25353847C(v74);
      sub_25353847C(v77);
      return v44;
    }
    __int16 v47 = v46;
    uint64_t v48 = (uint64_t (**)(char *, uint64_t))v68;
    if (v46 == 2)
    {
      sub_253472458((uint64_t)v86, &qword_269CDE7B8);
      (*v78)(v85, v43);
      uint64_t v18 = v67;
      uint64_t result = (*v48)(v91, v67);
      unint64_t v26 = v83;
      int64_t v22 = v84;
    }
    else
    {
      uint64_t v87 = 0;
      uint64_t v49 = v78;
      uint64_t v65 = (unint64_t)v78 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (v46)
      {
        uint64_t v50 = v61;
        uint64_t v51 = &v61[*(int *)(v81 + 48)];
        uint64_t v52 = v67;
        v33(v61, (unint64_t)v86, v67);
        v37(v51, (uint64_t)v41, v43);
        uint64_t v18 = v52;
        uint64_t v53 = sub_253B09400();
        uint64_t v55 = v54;
        (*v48)(v50, v18);
        sub_2539E09A0((uint64_t)v90, v53, v55);
        swift_bridgeObjectRelease();
        sub_253472458((uint64_t)v86, &qword_269CDE7B8);
        uint64_t v56 = *v78;
        (*v78)(v51, v43);
        v56(v85, v82);
      }
      else
      {
        sub_253472458((uint64_t)v86, &qword_269CDE7B8);
        uint64_t v18 = v67;
        (*v49)(v85, v82);
      }
      uint64_t result = (*v48)(v91, v18);
      uint64_t v11 = v87;
      unint64_t v26 = v83;
      int64_t v22 = v84;
      if ((v47 & 0x100) != 0)
      {
        *(unint64_t *)((char *)v59 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
        BOOL v28 = __OFADD__(v60++, 1);
        if (v28) {
          goto LABEL_36;
        }
      }
    }
  }
  int64_t v31 = v29 + 1;
  if (v29 + 1 >= v64) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v63 + 8 * v31);
  if (v30) {
    goto LABEL_15;
  }
  int64_t v31 = v29 + 2;
  if (v29 + 2 >= v64) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v63 + 8 * v31);
  if (v30) {
    goto LABEL_15;
  }
  int64_t v31 = v29 + 3;
  if (v29 + 3 >= v64)
  {
LABEL_32:
    uint64_t v44 = sub_253571820(v59, v58, v60, v71);
    swift_release();
    swift_bridgeObjectRelease();
    sub_25353847C(v74);
    sub_25353847C(v77);
    return v44;
  }
  unint64_t v30 = *(void *)(v63 + 8 * v31);
  if (v30)
  {
LABEL_15:
    int64_t v29 = v31;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v64) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v63 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_16;
    }
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_253571470(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  uint64_t v37 = sub_253462A5C(&qword_269CDEDB8);
  MEMORY[0x270FA5388](v37);
  unint64_t v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AssistantSchema(0);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  BOOL v38 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v33 = 0;
  uint64_t v34 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  int64_t v35 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = a4 + 56;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_21:
    uint64_t v23 = *(void *)(v38[6] + 8 * v19);
    sub_25357369C(v38[7] + *(void *)(v36 + 72) * v19, (uint64_t)v11);
    *unint64_t v7 = v23;
    sub_25357369C((uint64_t)v11, (uint64_t)v7 + *(int *)(v37 + 48));
    if (!*(void *)(a4 + 16)) {
      goto LABEL_30;
    }
    uint64_t v24 = sub_253B0A5E0();
    uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v26 = v24 & ~v25;
    if (((*(void *)(v17 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
      goto LABEL_30;
    }
    uint64_t v27 = *(void *)(a4 + 48);
    if (*(void *)(v27 + 8 * v26) == v23)
    {
LABEL_27:
      sub_253472458((uint64_t)v7, &qword_269CDEDB8);
      uint64_t result = sub_2535734F4((uint64_t)v11, (void (*)(void))type metadata accessor for AssistantSchema);
      *(unint64_t *)((char *)v32 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v33++, 1)) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v28 = ~v25;
      while (1)
      {
        unint64_t v26 = (v26 + 1) & v28;
        if (((*(void *)(v17 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
          break;
        }
        if (*(void *)(v27 + 8 * v26) == v23) {
          goto LABEL_27;
        }
      }
LABEL_30:
      sub_253472458((uint64_t)v7, &qword_269CDEDB8);
      uint64_t result = sub_2535734F4((uint64_t)v11, (void (*)(void))type metadata accessor for AssistantSchema);
    }
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v20 >= v35) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v20);
  ++v12;
  if (v21) {
    goto LABEL_20;
  }
  int64_t v12 = v20 + 1;
  if (v20 + 1 >= v35) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v12);
  if (v21) {
    goto LABEL_20;
  }
  int64_t v12 = v20 + 2;
  if (v20 + 2 >= v35) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v12);
  if (v21)
  {
LABEL_20:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v35)
  {
LABEL_31:
    uint64_t v30 = sub_253571D10(v32, v31, v33, v38);
    swift_bridgeObjectRelease();
    return v30;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v35) {
      goto LABEL_31;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_253571820(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v64 = sub_253B08A60();
  uint64_t v56 = *(void *)(v64 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v64);
  uint64_t v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v54 = (char *)&v47 - v10;
  uint64_t v11 = sub_253B09440();
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v53 = (char *)&v47 - v14;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_253462A5C(&qword_269CDEDD8);
  uint64_t result = sub_253B0A250();
  uint64_t v16 = result;
  __int16 v47 = a1;
  uint64_t v48 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v51 = v55 + 16;
  uint64_t v52 = result;
  uint64_t v49 = a4;
  uint64_t v50 = v56 + 16;
  uint64_t v60 = v56 + 32;
  uint64_t v61 = v55 + 32;
  uint64_t v19 = result + 64;
  int64_t v20 = v62;
  while (1)
  {
    uint64_t v59 = a3;
    if (v17)
    {
      uint64_t v57 = (v17 - 1) & v17;
      uint64_t v58 = v18;
      unint64_t v21 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v48) {
        return v16;
      }
      unint64_t v23 = v47[v22];
      uint64_t v24 = v18 + 1;
      if (!v23)
      {
        uint64_t v24 = v18 + 2;
        if (v18 + 2 >= v48) {
          return v16;
        }
        unint64_t v23 = v47[v24];
        if (!v23)
        {
          uint64_t v24 = v18 + 3;
          if (v18 + 3 >= v48) {
            return v16;
          }
          unint64_t v23 = v47[v24];
          if (!v23)
          {
            uint64_t v25 = v18 + 4;
            if (v18 + 4 >= v48) {
              return v16;
            }
            unint64_t v23 = v47[v25];
            if (!v23)
            {
              while (1)
              {
                uint64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v24 >= v48) {
                  return v16;
                }
                unint64_t v23 = v47[v24];
                ++v25;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v24 = v18 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v57 = (v23 - 1) & v23;
      uint64_t v58 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    uint64_t v26 = v55;
    uint64_t v27 = *(void *)(v55 + 72);
    uint64_t v28 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v53, a4[6] + v27 * v21, v11);
    uint64_t v29 = a4[7];
    uint64_t v30 = v56;
    uint64_t v31 = *(void *)(v56 + 72);
    uint64_t v32 = v29 + v31 * v21;
    uint64_t v33 = v11;
    uint64_t v34 = v54;
    uint64_t v35 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v32, v64);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v36(v20, v28, v33);
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    BOOL v38 = v34;
    uint64_t v11 = v33;
    v37(v63, v38, v35);
    uint64_t v16 = v52;
    sub_253573548(&qword_269CDE700, MEMORY[0x263F80C28]);
    uint64_t result = sub_253B095C0();
    uint64_t v39 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6))) == 0) {
      break;
    }
    unint64_t v42 = __clz(__rbit64((-1 << v40) & ~*(void *)(v19 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v19 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    v36((char *)(*(void *)(v16 + 48) + v42 * v27), v62, v11);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v37)(*(void *)(v16 + 56) + v42 * v31, v63, v64);
    ++*(void *)(v16 + 16);
    a3 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      goto LABEL_39;
    }
    a4 = v49;
    unint64_t v17 = v57;
    uint64_t v18 = v58;
    if (v59 == 1) {
      return v16;
    }
  }
  char v43 = 0;
  unint64_t v44 = (unint64_t)(63 - v39) >> 6;
  while (++v41 != v44 || (v43 & 1) == 0)
  {
    BOOL v45 = v41 == v44;
    if (v41 == v44) {
      unint64_t v41 = 0;
    }
    v43 |= v45;
    uint64_t v46 = *(void *)(v19 + 8 * v41);
    if (v46 != -1)
    {
      unint64_t v42 = __clz(__rbit64(~v46)) + (v41 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_253571D10(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for AssistantSchema(0);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v35 - v12;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_253462A5C(&qword_269CDEDC0);
  uint64_t result = sub_253B0A250();
  uint64_t v15 = result;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = *a1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = result + 64;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v17 << 6);
    }
    else
    {
      uint64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v37) {
        return v15;
      }
      unint64_t v22 = v36[v21];
      ++v17;
      if (!v22)
      {
        uint64_t v17 = v21 + 1;
        if (v21 + 1 >= v37) {
          return v15;
        }
        unint64_t v22 = v36[v17];
        if (!v22)
        {
          uint64_t v17 = v21 + 2;
          if (v21 + 2 >= v37) {
            return v15;
          }
          unint64_t v22 = v36[v17];
          if (!v22)
          {
            uint64_t v23 = v21 + 3;
            if (v23 >= v37) {
              return v15;
            }
            unint64_t v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v37) {
                  return v15;
                }
                unint64_t v22 = v36[v17];
                ++v23;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v23;
          }
        }
      }
LABEL_24:
      unint64_t v16 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
    }
    uint64_t v24 = *(void *)(a4[6] + 8 * v20);
    uint64_t v25 = *(void *)(v38 + 72);
    sub_25357369C(a4[7] + v25 * v20, (uint64_t)v13);
    sub_253573624((uint64_t)v13, (uint64_t)v11);
    uint64_t result = sub_253B0A5E0();
    uint64_t v26 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v18 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v18 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v18 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(void *)(*(void *)(v15 + 48) + 8 * v29) = v24;
    uint64_t result = sub_253573624((uint64_t)v11, *(void *)(v15 + 56) + v29 * v25);
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1)) {
      goto LABEL_39;
    }
    if (!a3) {
      return v15;
    }
  }
  char v30 = 0;
  unint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    BOOL v32 = v28 == v31;
    if (v28 == v31) {
      unint64_t v28 = 0;
    }
    v30 |= v32;
    uint64_t v33 = *(void *)(v18 + 8 * v28);
    if (v33 != -1)
    {
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_253572064(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t result = sub_253572580(*(void *)(*(void *)(v2 + 48) + 8 * i));
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:
  return swift_release();
}

uint64_t sub_2535721DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v35[5] = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v34[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_25351C1A8();
                    return v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = sub_253B0A5E0();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v35[0] = a1;
    v35[1] = v6;
    v35[2] = v34[0];
    uint64_t v35[3] = v4;
    v35[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x270FA5388](isStackAllocationSafe);
      unint64_t v27 = (char *)v34 - v26;
      memcpy((char *)v34 - v26, (const void *)(v2 + 56), v24);
      sub_25357268C((uint64_t)v27, v23, v2, v21, v35);
      uint64_t v29 = v28;
      swift_release();
      sub_25351C1A8();
      return v29;
    }
    else
    {
      char v30 = (void *)swift_slowAlloc();
      memcpy(v30, (const void *)(v2 + 56), v24);
      sub_25357268C((uint64_t)v30, v23, v2, v21, v35);
      uint64_t v32 = v31;
      swift_release();
      sub_25351C1A8();
      MEMORY[0x25A269E60](v30, -1, -1);
      return v32;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
}

uint64_t sub_253572580(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_253B0A5E0();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2539E4808();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_2535728E4(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

void sub_25357268C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v9 = v8 - 1;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    int64_t v11 = a5[3];
    unint64_t v12 = a5[4];
    if (!v12) {
      break;
    }
    uint64_t v13 = (v12 - 1) & v12;
    unint64_t v14 = __clz(__rbit64(v12)) | (v11 << 6);
LABEL_14:
    uint64_t v21 = *(void *)(*(void *)(*a5 + 48) + 8 * v14);
    a5[3] = v11;
    a5[4] = v13;
    uint64_t v22 = sub_253B0A5E0();
    uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    uint64_t v26 = 1 << v24;
    if (((1 << v24) & *(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v27 = *(void *)(a3 + 48);
      if (*(void *)(v27 + 8 * v24) == v21)
      {
LABEL_21:
        uint64_t v30 = *(void *)(a1 + 8 * v25);
        *(void *)(a1 + 8 * v25) = v30 & ~v26;
        if ((v26 & v30) != 0)
        {
          if (__OFSUB__(v9--, 1)) {
            goto LABEL_36;
          }
          if (!v9) {
            return;
          }
        }
      }
      else
      {
        for (unint64_t i = v24 + 1; ; unint64_t i = v29 + 1)
        {
          unint64_t v29 = i & ~v23;
          if (((*(void *)(v10 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v29) == v21)
          {
            unint64_t v25 = v29 >> 6;
            uint64_t v26 = 1 << v29;
            goto LABEL_21;
          }
        }
      }
    }
  }
  int64_t v15 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    int64_t v16 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v17 = a5[3];
    if (v15 >= v16) {
      goto LABEL_34;
    }
    uint64_t v18 = a5[1];
    unint64_t v19 = *(void *)(v18 + 8 * v15);
    if (v19) {
      goto LABEL_13;
    }
    int64_t v20 = v11 + 2;
    int64_t v17 = v11 + 1;
    if (v11 + 2 >= v16) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v18 + 8 * v20);
    if (!v19)
    {
      int64_t v17 = v11 + 2;
      if (v11 + 3 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * (v11 + 3));
      if (v19)
      {
        int64_t v15 = v11 + 3;
        goto LABEL_13;
      }
      int64_t v20 = v11 + 4;
      int64_t v17 = v11 + 3;
      if (v11 + 4 >= v16) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v18 + 8 * v20);
      if (!v19)
      {
        int64_t v15 = v11 + 5;
        int64_t v17 = v11 + 4;
        if (v11 + 5 >= v16) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v18 + 8 * v15);
        if (!v19)
        {
          int64_t v32 = v11 + 6;
          while (v32 < v16)
          {
            unint64_t v19 = *(void *)(v18 + 8 * v32++);
            if (v19)
            {
              int64_t v15 = v32 - 1;
              goto LABEL_13;
            }
          }
          int64_t v17 = v16 - 1;
LABEL_34:
          a5[3] = v17;
          a5[4] = 0;
          swift_retain();
          sub_25346C4E8();
          return;
        }
        goto LABEL_13;
      }
    }
    int64_t v15 = v20;
LABEL_13:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
    int64_t v11 = v15;
    goto LABEL_14;
  }
  __break(1u);
LABEL_36:
  __break(1u);
}

unint64_t sub_2535728E4(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_253B09F60();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        int64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = sub_253B0A5E0() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            int64_t v15 = (void *)(v10 + 8 * v2);
            BOOL v16 = v2 != v6 || v15 >= v11 + 1;
            int64_t v2 = v6;
            if (v16)
            {
              *int64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_253572A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_253B05830();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a3, v8);
  uint64_t v9 = sub_253B05870();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  return v10(a2, a4, v9);
}

uint64_t sub_253572B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + *(int *)(sub_253462A5C(&qword_269CDEE00) + 48);
  uint64_t v5 = a2 + *(int *)(sub_253462A5C(&qword_269CDEDB0) + 48);
  return sub_253572A60(a2, v5, a1, v4);
}

uint64_t sub_253572B88(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_253B05170();
  if (!result || (uint64_t result = sub_253B05190(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_253B05180();
      sub_253B09560();
      sub_253573548(&qword_269CDE6D8, MEMORY[0x263F04850]);
      return sub_253B094C0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_253572C68()
{
  return sub_253B094C0();
}

unint64_t sub_253572D90()
{
  unint64_t result = qword_269CDEBF8;
  if (!qword_269CDEBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEBF8);
  }
  return result;
}

unint64_t sub_253572DDC()
{
  unint64_t result = qword_269CDEC18;
  if (!qword_269CDEC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC18);
  }
  return result;
}

uint64_t sub_253572E28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_269CDEC00);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_253572E8C()
{
  unint64_t result = qword_269CDEC38;
  if (!qword_269CDEC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC38);
  }
  return result;
}

uint64_t sub_253572ED8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_269CDEC28);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_253572F48()
{
  unint64_t result = qword_269CDEC50;
  if (!qword_269CDEC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC50);
  }
  return result;
}

void type metadata accessor for ToolBoxUtility()
{
}

uint64_t sub_253572FA0()
{
  return type metadata accessor for ToolEmbeddingsDatabase(0);
}

uint64_t type metadata accessor for ToolEmbeddingsDatabase(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEC68);
}

uint64_t sub_253572FC8()
{
  uint64_t result = sub_253B05390();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B08970();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void type metadata accessor for ToolBoxAllowList()
{
}

void type metadata accessor for ToolDenyList()
{
}

uint64_t destroy for GlobalToolIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GlobalToolIdentifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GlobalToolIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for GlobalToolIdentifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for DenyTool()
{
}

ValueMetadata *type metadata accessor for ToolDenyList.CodingKeys()
{
  return &type metadata for ToolDenyList.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxAllowList.CodingKeys()
{
  return &type metadata for ToolBoxAllowList.CodingKeys;
}

unint64_t sub_25357325C()
{
  unint64_t result = qword_269CDEC78;
  if (!qword_269CDEC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC78);
  }
  return result;
}

unint64_t sub_2535732AC()
{
  unint64_t result = qword_269CDEC80;
  if (!qword_269CDEC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC80);
  }
  return result;
}

unint64_t sub_2535732FC()
{
  unint64_t result = qword_269CDEC88;
  if (!qword_269CDEC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC88);
  }
  return result;
}

unint64_t sub_25357334C()
{
  unint64_t result = qword_269CDEC90;
  if (!qword_269CDEC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC90);
  }
  return result;
}

unint64_t sub_25357339C()
{
  unint64_t result = qword_269CDEC98;
  if (!qword_269CDEC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEC98);
  }
  return result;
}

unint64_t sub_2535733EC()
{
  unint64_t result = qword_269CDECA0;
  if (!qword_269CDECA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDECA0);
  }
  return result;
}

unint64_t sub_25357343C()
{
  unint64_t result = qword_269CDECA8;
  if (!qword_269CDECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDECA8);
  }
  return result;
}

unint64_t sub_253573488()
{
  unint64_t result = qword_269CDECB8;
  if (!qword_269CDECB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDECB8);
  }
  return result;
}

uint64_t type metadata accessor for ToolboxDatabasePayload(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEEA8);
}

uint64_t sub_2535734F4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t sub_253573548(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253573598()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t sub_2535735D0()
{
  unint64_t result = qword_26B24A340;
  if (!qword_26B24A340)
  {
    sub_25347907C(&qword_26B24A348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A340);
  }
  return result;
}

uint64_t sub_253573624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_253578A1C();
  v4(v3);
  sub_25346CAF4();
  sub_2534D8E14();
  v5();
  return a2;
}

uint64_t type metadata accessor for ToolboxSearchOutput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEE98);
}

uint64_t sub_25357369C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_253578A1C();
  v4(v3);
  sub_25346CAF4();
  sub_2534B3428();
  v5();
  return a2;
}

uint64_t sub_2535736F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_253B058C0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_253573720@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_253B058B0();
  *a1 = result;
  return result;
}

uint64_t sub_25357374C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_25356A5E0(a1, a2, a3, a4, a5);
  if (!v6)
  {
    *a6 = result;
    a6[1] = v9;
  }
  return result;
}

unint64_t sub_253573778(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v4 = a1;
  }
  uint64_t v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  unint64_t v6 = v5 | (v4 << 16);
  unint64_t v7 = sub_2535739B8(0xFuLL, a1, a2);
  unint64_t result = sub_2535739B8(v6, a1, a2);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_253B09790();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = sub_253B0A0A0();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_253B097A0();
        unint64_t v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a1;
          uint64_t v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0) {
            unint64_t result = sub_253B0A0A0();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_42;
  }
  return 0;
}

unint64_t sub_2535739B8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_253573A58(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_2539EA0A4(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_253573A58(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_253A439BC(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_253573AC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_25355AF68(v1, a1);
}

void *sub_253573AE4@<X0>(uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr)@<X1>, void *a3@<X8>)
{
  unint64_t result = sub_253549570(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void *sub_253573B10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_253573AE4(a1, *(void *(**)(uint64_t *__return_ptr))(v2 + 16), a2);
}

void sub_253573B2C(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

unint64_t sub_253573B48()
{
  unint64_t result = qword_269CDED38;
  if (!qword_269CDED38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDED38);
  }
  return result;
}

unint64_t sub_253573B94()
{
  unint64_t result = qword_269CDED40;
  if (!qword_269CDED40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDED40);
  }
  return result;
}

uint64_t sub_253573BE0()
{
  return sub_253B08B70();
}

uint64_t sub_253573C08(uint64_t a1)
{
  return sub_253564104(a1, v1);
}

uint64_t sub_253573C24()
{
  sub_253579438();
  return sub_25356A8E0(v0);
}

uint64_t sub_253573C4C()
{
  sub_253579100();
  return sub_25356A2D8(v0, v1, v2, v3, v4);
}

uint64_t sub_253573C68()
{
  return sub_25356AAFC();
}

void sub_253573C90()
{
}

uint64_t sub_253573CC4()
{
  return sub_25356AAFC();
}

void sub_253573CEC()
{
}

uint64_t type metadata accessor for AssistantSchema(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEE88);
}

uint64_t sub_253573D40()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_253573DA4()
{
  sub_253578DD4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_25347720C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_253477080;
  uint64_t v3 = sub_253578614();
  return sub_253561818(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_253573E48(uint64_t a1)
{
  return sub_25356ED68(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_253573E54()
{
  sub_253462A5C(&qword_269CDED80);
  sub_253465998();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80) | 7;
  swift_release();
  sub_25351C3E8();
  v2();
  uint64_t v3 = sub_2534DA2E4();
  return MEMORY[0x270FA0238](v3, v4, v1);
}

uint64_t sub_253573EF4()
{
  sub_253462A5C(&qword_269CDED80);
  sub_2535786F4();
  uint64_t v3 = v0 + v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_253476FC0;
  uint64_t v5 = (int *)sub_2534D970C();
  return sub_25356EEC4(v5, v6, v3);
}

uint64_t type metadata accessor for AssistantSchemaToEmbed(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEE78);
}

uint64_t sub_253573FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_253562B40(a1, a2, v3, a3);
}

uint64_t sub_253573FF8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_2535630FC(a1, a2, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), a3);
}

uint64_t type metadata accessor for AssistantSchemaToolBoxRepresentation(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDEE68);
}

void sub_25357403C(uint64_t *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_253574058()
{
  swift_release();
  if (*(void *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_2535740B4(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)sub_25347720C(v9);
  *uint64_t v10 = v11;
  v10[1] = sub_253477080;
  return sub_25355C990(a1, v3, v4, v5, v6, v8, v7);
}

uint64_t sub_253574180()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t sub_253574210()
{
  sub_253579100();
  return sub_25355DEC0(v1, v2, v3, v4, v5, v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13]);
}

uint64_t sub_253574250@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_253569934(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), a3);
}

uint64_t sub_253574274(uint64_t a1)
{
  return a1;
}

uint64_t sub_2535742C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_25357430C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_253574348@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_253462A5C(&qword_269CDEE00);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_253462A5C(&qword_269CDEE10);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v14 = v1[2];
  int64_t v15 = v1[3];
  unint64_t v16 = v1[4];
  uint64_t v36 = v5;
  uint64_t v37 = v14;
  uint64_t v38 = v12;
  if (v16)
  {
    uint64_t v5 = (char *)a1;
    uint64_t v17 = (v16 - 1) & v16;
    unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_3:
    uint64_t v19 = *(void *)(v13 + 48);
    uint64_t v20 = sub_253B05830();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v11, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v18, v20);
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = sub_253B05870();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(&v11[*(int *)(v3 + 48)], v21 + *(void *)(*(void *)(v22 - 8) + 72) * v18, v22);
    uint64_t v23 = 0;
LABEL_4:
    a1 = (uint64_t)v5;
    goto LABEL_5;
  }
  int64_t v30 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  if (v30 >= v31)
  {
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    goto LABEL_5;
  }
  unint64_t v32 = *(void *)(v12 + 8 * v30);
  if (v32)
  {
    uint64_t v5 = (char *)a1;
LABEL_12:
    uint64_t v17 = (v32 - 1) & v32;
    unint64_t v18 = __clz(__rbit64(v32)) + (v30 << 6);
    int64_t v15 = v30;
    goto LABEL_3;
  }
  int64_t v33 = v15 + 2;
  if (v15 + 2 >= v31)
  {
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    ++v15;
    goto LABEL_5;
  }
  unint64_t v32 = *(void *)(v12 + 8 * v33);
  if (v32)
  {
LABEL_16:
    uint64_t v5 = (char *)a1;
    int64_t v30 = v33;
    goto LABEL_12;
  }
  if (v15 + 3 >= v31) {
    goto LABEL_29;
  }
  unint64_t v32 = *(void *)(v12 + 8 * (v15 + 3));
  if (v32)
  {
    uint64_t v5 = (char *)a1;
    int64_t v30 = v15 + 3;
    goto LABEL_12;
  }
  int64_t v33 = v15 + 4;
  if (v15 + 4 < v31)
  {
    unint64_t v32 = *(void *)(v12 + 8 * v33);
    if (v32) {
      goto LABEL_16;
    }
    int64_t v30 = v15 + 5;
    if (v15 + 5 < v31)
    {
      uint64_t v5 = (char *)a1;
      unint64_t v32 = *(void *)(v12 + 8 * v30);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v30 = v31 - 1;
      int64_t v34 = v15 + 6;
      while (v34 < v31)
      {
        unint64_t v32 = *(void *)(v12 + 8 * v34++);
        if (v32)
        {
          int64_t v30 = v34 - 1;
          goto LABEL_12;
        }
      }
LABEL_32:
      uint64_t v17 = 0;
      uint64_t v23 = 1;
      int64_t v15 = v30;
      goto LABEL_4;
    }
LABEL_29:
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    int64_t v15 = v33;
    goto LABEL_5;
  }
  uint64_t v17 = 0;
  uint64_t v23 = 1;
  v15 += 3;
LABEL_5:
  uint64_t v24 = 1;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, v23, 1, v3);
  uint64_t v25 = v38;
  *uint64_t v1 = v13;
  v1[1] = v25;
  v1[2] = v37;
  v1[3] = v15;
  v1[4] = v17;
  uint64_t v26 = (void (*)(uint64_t))v1[5];
  sub_2534D8A74((uint64_t)v11, (uint64_t)v9, &qword_269CDEE10);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v3) != 1)
  {
    uint64_t v27 = (uint64_t)v36;
    sub_2534D8A74((uint64_t)v9, (uint64_t)v36, &qword_269CDEE00);
    v26(v27);
    sub_253472458(v27, &qword_269CDEE00);
    uint64_t v24 = 0;
  }
  uint64_t v28 = sub_253462A5C(&qword_269CDEDB0);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, v24, 1, v28);
}

uint64_t sub_2535746E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_253569468(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_253574700()
{
  return sub_25356AAFC();
}

uint64_t sub_253574728()
{
  return sub_25356AAFC();
}

void sub_253574750()
{
}

void sub_253574784()
{
}

uint64_t sub_2535747B8()
{
  sub_25357944C();
  return sub_25356A8E0(v0);
}

uint64_t sub_2535747E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_25356AC74(a1);
}

uint64_t sub_2535747FC()
{
  void (*v1)(uint64_t *__return_ptr, uint64_t);
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  sub_253579100();
  return sub_25357374C(v0, v1, v2, v3, v4, v5);
}

uint64_t sub_253574818()
{
  sub_253579474();
  return sub_25356A8E0(v0);
}

uint64_t sub_253574840()
{
  sub_253579460();
  return sub_25356A8E0(v0);
}

uint64_t sub_253574868()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_2535748CC()
{
  sub_253578DD4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_25347720C(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_253476FC0;
  uint64_t v3 = sub_253578614();
  return sub_253560218(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_253574970(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2535749B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_253574A10(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_253574A58(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_253574A98(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for IntermediateToolToEmbedRepresentation()
{
}

uint64_t sub_253574AE8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_253574B2C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_253574B94(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ToolRetrievalResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_253574C48(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_253574CB0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_253574CF0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ToolToEmbed()
{
}

void *sub_253574D48(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B09440();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B08A60();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_253574E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B08A60();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t sub_253574F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_253574FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_2535750A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_253575170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_25357523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253575250);
}

uint64_t sub_253575250()
{
  sub_253579164();
  sub_253B09440();
  sub_2535782A8();
  if (*(_DWORD *)(v4 + 84) == v0)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v1;
  }
  else
  {
    sub_253B08A60();
    sub_2535782A8();
    if (*(_DWORD *)(v8 + 84) != v0)
    {
      unsigned int v10 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 24));
      if (v10 >= 2) {
        return v10 - 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v5 = v7;
    uint64_t v6 = v1 + *(int *)(v2 + 20);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, v0, v5);
}

uint64_t sub_2535752FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253575310);
}

void sub_253575310()
{
  sub_253578D08();
  sub_253B09440();
  sub_2535782A8();
  if (*(_DWORD *)(v5 + 84) == v3)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v1;
  }
  else
  {
    sub_253B08A60();
    sub_2535782A8();
    if (*(_DWORD *)(v9 + 84) != v3)
    {
      *(unsigned char *)(v1 + *(int *)(v2 + 24)) = v0 + 1;
      return;
    }
    uint64_t v6 = v8;
    uint64_t v7 = v1 + *(int *)(v2 + 20);
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v7, v0, v0, v6);
}

uint64_t sub_2535753B8()
{
  uint64_t result = sub_253B09440();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B08A60();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_253575488(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_253B09440();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = sub_253B08A60();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    v8[*(int *)(v11 + 24)] = v9[*(int *)(v11 + 24)];
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2535755E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = v2 + *(int *)(type metadata accessor for AssistantSchemaToolBoxRepresentation(0) + 20);
  uint64_t v5 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *sub_2535756B4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09440();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_253B08A60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_2535757C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09440();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_253B08A60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_2535758E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09440();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_253B08A60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_2535759E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09440();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_253B08A60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v7[*(int *)(v10 + 24)] = v8[*(int *)(v10 + 24)];
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_253575AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253575B04);
}

uint64_t sub_253575B04()
{
  uint64_t v3 = sub_253579164();
  type metadata accessor for AssistantSchemaToolBoxRepresentation(v3);
  sub_2535782A8();
  if (*(_DWORD *)(v5 + 84) != v0) {
    return sub_253578BD0(v1 + *(int *)(v2 + 24));
  }
  uint64_t v6 = v4;
  uint64_t v7 = v1 + *(int *)(v2 + 20);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v0, v6);
}

uint64_t sub_253575B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253575B94);
}

void sub_253575B94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  sub_2535782A8();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
}

uint64_t sub_253575C28()
{
  uint64_t result = type metadata accessor for AssistantSchemaToolBoxRepresentation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_253575CCC(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B09440();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_253B08A60();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *((unsigned char *)a1 + *(int *)(v8 + 24)) = *((unsigned char *)a2 + *(int *)(v8 + 24));
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_253575E0C(uint64_t a1)
{
  uint64_t v2 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for AssistantSchemaToolBoxRepresentation(0) + 20);
  uint64_t v4 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_253575ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_253575FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2535760C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_2535761AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09440();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_253B08A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2535762A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2535762B4);
}

uint64_t sub_2535762B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AssistantSchemaToolBoxRepresentation(0);
  sub_2535782A8();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return sub_253578BD0(a1 + *(int *)(a3 + 20));
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v6);
}

uint64_t sub_253576338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25357634C);
}

void sub_25357634C()
{
  uint64_t v4 = sub_253578D08();
  type metadata accessor for AssistantSchemaToolBoxRepresentation(v4);
  sub_2535782A8();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v0, v0, v5);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 20) + 8) = (v0 - 1);
  }
}

uint64_t sub_2535763CC()
{
  uint64_t result = type metadata accessor for AssistantSchemaToolBoxRepresentation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for ToolBoxIndexedEmeddingContribution()
{
}

uint64_t sub_25357646C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09440();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = sub_253462A5C(&qword_269CDED00);
      *(_DWORD *)(a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v9;
      *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2535765BC(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_253B09440();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = sub_253462A5C(&qword_269CDED00);
    *(_DWORD *)(a1 + *(int *)(v5 + 48)) = *(_DWORD *)(a2 + *(int *)(v5 + 48));
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_2535766B8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2535734F4(a1, (void (*)(void))type metadata accessor for ToolboxSearchOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_253B09440();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = sub_253462A5C(&qword_269CDED00);
      *(_DWORD *)(a1 + *(int *)(v5 + 48)) = *(_DWORD *)(a2 + *(int *)(v5 + 48));
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_2535767E8(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_253B09440();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = sub_253462A5C(&qword_269CDED00);
    *(_DWORD *)&a1[*(int *)(v7 + 48)] = *(_DWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_2535768B8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2535734F4((uint64_t)a1, (void (*)(void))type metadata accessor for ToolboxSearchOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09440();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_253462A5C(&qword_269CDED00);
      *(_DWORD *)&a1[*(int *)(v7 + 48)] = *(_DWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2535769AC()
{
  int v3 = &unk_253B35498;
  uint64_t result = sub_253B09440();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v2;
    uint64_t v5 = &unk_253B35498;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_253576A60(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09440();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = sub_253462A5C(&qword_269CDED20);
      *(unsigned char *)(a1 + *(int *)(v7 + 48)) = *((unsigned char *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v9;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_253576BAC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  sub_253B09440();
  sub_25346CAF4();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  return v5(a1, v3);
}

uint64_t sub_253576C4C(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_253B09440();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = sub_253462A5C(&qword_269CDED20);
    *(unsigned char *)(a1 + *(int *)(v5 + 48)) = *(unsigned char *)(a2 + *(int *)(v5 + 48));
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_253576D48(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2535734F4(a1, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_253B09440();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = sub_253462A5C(&qword_269CDED20);
      *(unsigned char *)(a1 + *(int *)(v5 + 48)) = *(unsigned char *)(a2 + *(int *)(v5 + 48));
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *sub_253576E78(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_253B09440();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = sub_253462A5C(&qword_269CDED20);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_253576F48(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2535734F4((uint64_t)a1, (void (*)(void))type metadata accessor for ToolboxDatabasePayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09440();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_253462A5C(&qword_269CDED20);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_25357703C()
{
  uint64_t v3 = &unk_253B354C8;
  uint64_t result = sub_253B09440();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v2;
    uint64_t v5 = &unk_253B354C8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DenyTool.CodingKeys()
{
  return &type metadata for DenyTool.CodingKeys;
}

unint64_t sub_253577100()
{
  unint64_t result = qword_269CDEEB8;
  if (!qword_269CDEEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEEB8);
  }
  return result;
}

unint64_t sub_253577150()
{
  unint64_t result = qword_269CDEEC0;
  if (!qword_269CDEEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEEC0);
  }
  return result;
}

unint64_t sub_2535771A0()
{
  unint64_t result = qword_269CDEEC8;
  if (!qword_269CDEEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEEC8);
  }
  return result;
}

unint64_t sub_2535771F0()
{
  unint64_t result = qword_269CDEED0;
  if (!qword_269CDEED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEED0);
  }
  return result;
}

unint64_t sub_25357723C()
{
  unint64_t result = qword_269CDEEF8;
  if (!qword_269CDEEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEEF8);
  }
  return result;
}

unint64_t sub_253577288()
{
  unint64_t result = qword_269CDEF00;
  if (!qword_269CDEF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF00);
  }
  return result;
}

unint64_t sub_2535772D4()
{
  unint64_t result = qword_269CDEF08;
  if (!qword_269CDEF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF08);
  }
  return result;
}

unint64_t sub_253577320()
{
  unint64_t result = qword_269CDEF10;
  if (!qword_269CDEF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF10);
  }
  return result;
}

unint64_t sub_25357736C()
{
  unint64_t result = qword_269CDEF18;
  if (!qword_269CDEF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF18);
  }
  return result;
}

unint64_t sub_2535773B8()
{
  unint64_t result = qword_269CDEF40;
  if (!qword_269CDEF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF40);
  }
  return result;
}

unint64_t sub_253577404()
{
  unint64_t result = qword_269CDEF60;
  if (!qword_269CDEF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF60);
  }
  return result;
}

unint64_t sub_253577450()
{
  unint64_t result = qword_269CDEF68;
  if (!qword_269CDEF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF68);
  }
  return result;
}

unint64_t sub_25357749C()
{
  unint64_t result = qword_269CDEF70;
  if (!qword_269CDEF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEF70);
  }
  return result;
}

unint64_t sub_2535774E8()
{
  unint64_t result = qword_269CDEFB0;
  if (!qword_269CDEFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFB0);
  }
  return result;
}

unint64_t sub_253577534()
{
  unint64_t result = qword_269CDEFB8;
  if (!qword_269CDEFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFB8);
  }
  return result;
}

unint64_t sub_253577580()
{
  unint64_t result = qword_269CDEFC0;
  if (!qword_269CDEFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFC0);
  }
  return result;
}

unint64_t sub_2535775CC()
{
  unint64_t result = qword_269CDEFC8;
  if (!qword_269CDEFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.CodingKeys()
{
  return &type metadata for ToolboxSearchOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.AssistantSchemaCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxSearchOutput.ClientActionCodingKeys()
{
  return &type metadata for ToolboxSearchOutput.ClientActionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.CodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.PositiveCodingKeys;
}

ValueMetadata *type metadata accessor for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys()
{
  return &type metadata for ToolBoxIndexedEmeddingContribution.NegativeCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport19ToolboxSearchOutputO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253577758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.CodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.ToolDefinitionCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.ToolDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.AssistantSchemaCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.AssistantSchemaCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport12ToolDenyListV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25357787CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolboxDatabasePayload.ClientActionCodingKeys()
{
  return &type metadata for ToolboxDatabasePayload.ClientActionCodingKeys;
}

unint64_t sub_2535778B8()
{
  unint64_t result = qword_269CDEFF0;
  if (!qword_269CDEFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFF0);
  }
  return result;
}

unint64_t sub_253577908()
{
  unint64_t result = qword_269CDEFF8;
  if (!qword_269CDEFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDEFF8);
  }
  return result;
}

unint64_t sub_253577958()
{
  unint64_t result = qword_269CDF000;
  if (!qword_269CDF000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF000);
  }
  return result;
}

unint64_t sub_2535779A8()
{
  unint64_t result = qword_269CDF008;
  if (!qword_269CDF008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF008);
  }
  return result;
}

unint64_t sub_2535779F8()
{
  unint64_t result = qword_269CDF010;
  if (!qword_269CDF010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF010);
  }
  return result;
}

unint64_t sub_253577A48()
{
  unint64_t result = qword_269CDF018;
  if (!qword_269CDF018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF018);
  }
  return result;
}

unint64_t sub_253577A98()
{
  unint64_t result = qword_269CDF020;
  if (!qword_269CDF020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF020);
  }
  return result;
}

unint64_t sub_253577AE8()
{
  unint64_t result = qword_269CDF028;
  if (!qword_269CDF028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF028);
  }
  return result;
}

unint64_t sub_253577B38()
{
  unint64_t result = qword_269CDF030;
  if (!qword_269CDF030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF030);
  }
  return result;
}

unint64_t sub_253577B88()
{
  unint64_t result = qword_269CDF038;
  if (!qword_269CDF038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF038);
  }
  return result;
}

unint64_t sub_253577BD8()
{
  unint64_t result = qword_269CDF040;
  if (!qword_269CDF040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF040);
  }
  return result;
}

unint64_t sub_253577C28()
{
  unint64_t result = qword_269CDF048;
  if (!qword_269CDF048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF048);
  }
  return result;
}

unint64_t sub_253577C78()
{
  unint64_t result = qword_269CDF050;
  if (!qword_269CDF050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF050);
  }
  return result;
}

unint64_t sub_253577CC8()
{
  unint64_t result = qword_269CDF058;
  if (!qword_269CDF058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF058);
  }
  return result;
}

unint64_t sub_253577D18()
{
  unint64_t result = qword_269CDF060;
  if (!qword_269CDF060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF060);
  }
  return result;
}

unint64_t sub_253577D68()
{
  unint64_t result = qword_269CDF068;
  if (!qword_269CDF068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF068);
  }
  return result;
}

unint64_t sub_253577DB8()
{
  unint64_t result = qword_269CDF070;
  if (!qword_269CDF070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF070);
  }
  return result;
}

unint64_t sub_253577E08()
{
  unint64_t result = qword_269CDF078;
  if (!qword_269CDF078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF078);
  }
  return result;
}

unint64_t sub_253577E58()
{
  unint64_t result = qword_269CDF080;
  if (!qword_269CDF080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF080);
  }
  return result;
}

unint64_t sub_253577EA8()
{
  unint64_t result = qword_269CDF088;
  if (!qword_269CDF088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF088);
  }
  return result;
}

unint64_t sub_253577EF8()
{
  unint64_t result = qword_269CDF090;
  if (!qword_269CDF090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF090);
  }
  return result;
}

unint64_t sub_253577F48()
{
  unint64_t result = qword_269CDF098;
  if (!qword_269CDF098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF098);
  }
  return result;
}

unint64_t sub_253577F98()
{
  unint64_t result = qword_269CDF0A0;
  if (!qword_269CDF0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0A0);
  }
  return result;
}

unint64_t sub_253577FE8()
{
  unint64_t result = qword_269CDF0A8;
  if (!qword_269CDF0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0A8);
  }
  return result;
}

unint64_t sub_253578038()
{
  unint64_t result = qword_269CDF0B0;
  if (!qword_269CDF0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0B0);
  }
  return result;
}

unint64_t sub_253578088()
{
  unint64_t result = qword_269CDF0B8;
  if (!qword_269CDF0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0B8);
  }
  return result;
}

unint64_t sub_2535780D8()
{
  unint64_t result = qword_269CDF0C0;
  if (!qword_269CDF0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0C0);
  }
  return result;
}

unint64_t sub_253578128()
{
  unint64_t result = qword_269CDF0C8;
  if (!qword_269CDF0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0C8);
  }
  return result;
}

unint64_t sub_253578178()
{
  unint64_t result = qword_269CDF0D0;
  if (!qword_269CDF0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0D0);
  }
  return result;
}

unint64_t sub_2535781C8()
{
  unint64_t result = qword_269CDF0D8;
  if (!qword_269CDF0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0D8);
  }
  return result;
}

unint64_t sub_253578218()
{
  unint64_t result = qword_269CDF0E0;
  if (!qword_269CDF0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0E0);
  }
  return result;
}

void sub_253578274(void **a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2535782BC()
{
  return v0;
}

uint64_t sub_2535782E8(float a1)
{
  *unint64_t v1 = a1;
  uint64_t v3 = *(void *)(v2 + 256);
  sub_253472068((void *)(v2 + 232), v3);
  return v3;
}

void sub_253578348(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t sub_253578374()
{
  return sub_253B05830();
}

uint64_t sub_25357839C(uint64_t a1, float a2)
{
  *(void *)(v6 - 112) = v3;
  *(void *)(v6 - 104) = v4;
  *uint64_t v5 = a2;
  *(void *)(v6 - 88) = a1;
  *(void *)(v6 - 136) = v5 + 1;
  *(void *)(v6 - 128) = v5;
  uint64_t v7 = *(void *)(v2 + 256);
  sub_253472068((void *)(v2 + 232), v7);
  return v7;
}

uint64_t sub_2535783F4()
{
  *(_WORD *)(v1 + 12) = 2048;
  *(double *)(v0 + 8) = v3 - v4;
  return sub_253B09E80();
}

uint64_t sub_253578424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25354C52C(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

uint64_t sub_25357842C()
{
  return v0;
}

uint64_t sub_253578464()
{
  uint64_t v3 = *(void *)(v1 - 320);
  return sub_25352C314(v3, v0);
}

uint64_t sub_253578480()
{
  return swift_slowAlloc();
}

uint64_t sub_2535784B8()
{
  return v0;
}

void *sub_2535784D4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v3 = *(void **)(v2 - 392);
  *uint64_t v3 = v1;
  return v3;
}

uint64_t sub_253578504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 320) = (char *)&a9 - v9;
  return 0;
}

void sub_25357852C(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v7, a3, a4, a5, v5, v6, 2u);
}

uint64_t sub_253578564()
{
  return sub_253B09DE0();
}

uint64_t sub_25357857C(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 - 352);
  *(void *)(v3 - 688) = v2;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v1;
  *(void *)(v3 - 536) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2535785B4()
{
  return sub_253B05810();
}

uint64_t sub_253578614()
{
  return v0;
}

uint64_t sub_25357863C()
{
  return sub_253B09E80();
}

uint64_t sub_253578660()
{
  return sub_253B08960();
}

uint64_t sub_253578678()
{
  return sub_253B05820();
}

void sub_253578690()
{
  *(void *)(v0 - 512) = *(void *)(*(void *)(v0 - 336) + 168);
}

uint64_t sub_253578700()
{
  return sub_253B08990();
}

void sub_253578728(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0x16u);
}

uint64_t sub_253578748()
{
  return sub_253B089A0();
}

uint64_t sub_253578768()
{
  return swift_allocObject();
}

uint64_t sub_25357878C(_WORD *a1)
{
  *a1 = 0;
  return sub_253B08920();
}

void sub_2535787B4()
{
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = 1;
}

uint64_t sub_2535787C4()
{
  return v0;
}

uint64_t sub_2535787D4()
{
  return sub_253B0A2C0();
}

uint64_t sub_2535787F4()
{
  return v0;
}

uint64_t sub_253578800()
{
  return v0;
}

uint64_t sub_253578810()
{
  return swift_retain_n();
}

uint64_t sub_253578828()
{
  return v0;
}

uint64_t sub_253578834()
{
  return v0;
}

uint64_t sub_253578868()
{
  return sub_253B0A3A0();
}

uint64_t sub_253578884@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_253B05860();
}

_WORD *sub_2535788B0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_2535788BC()
{
  return swift_slowAlloc();
}

uint64_t sub_2535788D8()
{
  return sub_253B06CE0();
}

uint64_t sub_2535788F4()
{
  return sub_253B0A440();
}

uint64_t sub_25357893C(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 312);
  return sub_2535734F4(v4, a2);
}

uint64_t sub_253578990(_WORD *a1)
{
  *a1 = 0;
  return sub_253B08920();
}

uint64_t sub_2535789B4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B09E80();
}

uint64_t sub_2535789DC()
{
  return swift_beginAccess();
}

uint64_t sub_2535789F4(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *uint64_t v1 = *(_OWORD *)(v2 - 960);
  return swift_bridgeObjectRetain();
}

uint64_t sub_253578A1C()
{
  return 0;
}

uint64_t sub_253578A28(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

void sub_253578A44()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v2);
  sub_253469304(v0, v1);
}

void sub_253578A84()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v1);
  sub_253469304(v0, v2);
}

uint64_t sub_253578AC4()
{
  return v0;
}

uint64_t sub_253578AD0()
{
  return sub_253B089F0();
}

uint64_t sub_253578AF8()
{
  return type metadata accessor for ToolboxDatabasePayload(0);
}

uint64_t sub_253578B3C()
{
  return sub_253B08300();
}

uint64_t sub_253578B64()
{
  *uint64_t v0 = *(void *)(v1 - 104);
  return sub_253B0A2D0();
}

uint64_t sub_253578B88()
{
  return sub_253B08990();
}

uint64_t sub_253578BAC()
{
  return sub_253B08990();
}

uint64_t sub_253578BD0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_253578BF4()
{
  return swift_bridgeObjectRelease();
}

void sub_253578C0C()
{
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = 1;
}

uint64_t sub_253578C40(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v1);
}

uint64_t sub_253578C5C()
{
  return swift_retain();
}

uint64_t sub_253578C90()
{
  return v0;
}

uint64_t sub_253578CC0()
{
  return swift_allocObject();
}

_WORD *sub_253578CFC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_253578D08()
{
  return 0;
}

uint64_t sub_253578D20()
{
  return v0;
}

uint64_t sub_253578D2C()
{
  return v0;
}

uint64_t sub_253578D38()
{
  return v0;
}

uint64_t sub_253578D64()
{
  return v0;
}

uint64_t sub_253578D7C()
{
  return swift_release_n();
}

uint64_t sub_253578D94()
{
  return v0;
}

void sub_253578DA0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = *(uint8_t **)(v6 - 128);
  _os_log_impl(a1, v4, v5, a4, v8, 0xCu);
}

void sub_253578DC4()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_253578DF8()
{
  return v0;
}

void sub_253578E04()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v2);
  sub_253469304(v0, v1);
}

uint64_t sub_253578E40()
{
  return v0;
}

uint64_t sub_253578E4C()
{
  return v0;
}

uint64_t sub_253578E58()
{
  return v0;
}

uint64_t sub_253578E64()
{
  return v0;
}

uint64_t sub_253578E74()
{
  return v0;
}

uint64_t sub_253578E8C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_253578EA4()
{
  return sub_253B09DE0();
}

uint64_t sub_253578EBC(uint64_t a1, uint64_t a2)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, 1, v2);
}

uint64_t sub_253578EE0()
{
  return v0;
}

uint64_t sub_253578EEC()
{
  return v0;
}

uint64_t sub_253578EF8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_253578F10()
{
  return sub_253B06CE0();
}

void sub_253578F38(uint64_t a1@<X8>)
{
  *(void *)(v1 - 384) = a1;
}

uint64_t sub_253578F44()
{
  return *(void *)(v0 - 416);
}

uint64_t sub_253578F5C()
{
  return v0;
}

uint64_t sub_253578F70()
{
  return sub_253B089C0();
}

uint64_t sub_253578F94()
{
  return sub_253B08990();
}

uint64_t sub_253578FB4()
{
  return sub_253B089C0();
}

uint64_t sub_253578FD8()
{
  sub_25352C314(*(void *)(v1 - 320), v0);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_25357904C()
{
  return swift_beginAccess();
}

_WORD *sub_253579064(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_253579070()
{
  return sub_253B0A2C0();
}

uint64_t sub_253579090()
{
  return v0;
}

void sub_2535790A4(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v7, v6, 2u);
}

uint64_t sub_2535790C4()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_2535790D0()
{
  return sub_253B09DE0();
}

uint64_t sub_2535790E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_253464DF8(v3, v4, a3);
}

void *sub_25357910C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 392) = a1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  return v1;
}

uint64_t sub_253579120()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25357914C()
{
  return sub_253B09DE0();
}

uint64_t sub_253579164()
{
  return 0;
}

uint64_t sub_253579178()
{
  return swift_arrayDestroy();
}

uint64_t sub_253579198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = a1;
  return sub_253B08BA0();
}

uint64_t sub_2535791B8()
{
  return sub_253B0A680();
}

uint64_t sub_2535791D8()
{
  return v0;
}

uint64_t sub_2535791E4()
{
  return v0;
}

uint64_t sub_2535791F0()
{
  return v0;
}

void sub_253579224(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t sub_253579258()
{
  return v0;
}

uint64_t sub_253579264()
{
  return v0;
}

uint64_t sub_253579270()
{
  return v0;
}

uint64_t sub_25357927C(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t sub_2535792A4()
{
  return v0;
}

void sub_2535792B0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t sub_2535792D0()
{
  return swift_retain_n();
}

uint64_t sub_2535792E8(uint64_t a1, unsigned char *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

BOOL sub_253579308@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_25357931C()
{
  return v0;
}

uint64_t sub_253579328()
{
  return v0;
}

uint64_t sub_253579334()
{
  return v0;
}

uint64_t sub_253579340()
{
  return sub_253B08DA0();
}

uint64_t sub_253579360()
{
  return v0;
}

uint64_t sub_25357936C(uint64_t result, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v3 - 96) = result;
  return result;
}

uint64_t sub_253579380()
{
  return 0;
}

uint64_t sub_25357938C()
{
  return *(void *)(v0 - 424);
}

uint64_t sub_2535793A0()
{
  uint64_t v3 = *(void *)(v1 - 688);
  return sub_253464DF8(v3, v0, (uint64_t *)(v1 - 96));
}

uint64_t sub_2535793C0()
{
  return v0;
}

uint64_t sub_2535793CC()
{
  return swift_arrayDestroy();
}

uint64_t sub_2535793E4()
{
  return v0;
}

void sub_2535793F8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_253579410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 160) = (char *)&a9 - v9;
}

uint64_t sub_253579424()
{
  return v0;
}

void sub_2535794A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  sub_253569F50(v5, a2, a3, v3);
}

uint64_t ToolQuery.query.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ToolQuery.appBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolQuery.init(query:appBundleIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t ToolQuery.Output.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_253B077E0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t ToolQuery.Output.init(definition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253B077E0();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t sub_2535795EC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6974696E69666564 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253579680()
{
  return 0x6974696E69666564;
}

uint64_t sub_2535796A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2535795EC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2535796CC(uint64_t a1)
{
  unint64_t v2 = sub_253579874();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253579708(uint64_t a1)
{
  unint64_t v2 = sub_253579874();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolQuery.Output.encode(to:)(void *a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDF0E8);
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253472068(a1, a1[3]);
  sub_253579874();
  sub_253B0A680();
  sub_253B077E0();
  sub_253579B0C(&qword_269CDF0F8);
  sub_253B0A440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

unint64_t sub_253579874()
{
  unint64_t result = qword_269CDF0F0;
  if (!qword_269CDF0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF0F0);
  }
  return result;
}

uint64_t ToolQuery.Output.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253B077E0();
  sub_253465998();
  uint64_t v20 = v5;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v23 = v8 - v7;
  uint64_t v9 = sub_253462A5C(&qword_269CDF100);
  sub_253465998();
  uint64_t v22 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for ToolQuery.Output();
  MEMORY[0x270FA5388](v15 - 8);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  sub_253472068(a1, a1[3]);
  sub_253579874();
  sub_253B0A660();
  if (!v2)
  {
    sub_253579B0C(&qword_269CDF108);
    sub_253B0A370();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v14, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v18, v23, v4);
    sub_253579B50(v18, a2);
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

uint64_t type metadata accessor for ToolQuery.Output()
{
  uint64_t result = qword_269CDF130;
  if (!qword_269CDF130) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_253579B0C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_253B077E0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253579B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolQuery.Output();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_253579BB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolQuery.Output.init(from:)(a1, a2);
}

uint64_t sub_253579BCC(void *a1)
{
  return ToolQuery.Output.encode(to:)(a1);
}

uint64_t static ToolQuery.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_253B0A4C0(), result = 0, (v5 & 1) != 0))
  {
    if (v2)
    {
      if (v3)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = swift_bridgeObjectRetain();
        char v8 = sub_25357A420(v7, v3);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8) {
          return 1;
        }
      }
    }
    else if (!v3)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t ToolQuery.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  if (!v3) {
    return sub_253B0A610();
  }
  sub_253B0A610();
  swift_bridgeObjectRetain();
  sub_25357A8F8(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_253579D3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C646E7542707061 && a2 == 0xEC00000073644965)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253579E3C(char a1)
{
  if (a1) {
    return 0x6C646E7542707061;
  }
  else {
    return 0x7972657571;
  }
}

uint64_t sub_253579E78()
{
  return sub_253579E3C(*v0);
}

uint64_t sub_253579E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253579D3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253579EA8(uint64_t a1)
{
  unint64_t v2 = sub_25357AA94();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253579EE4(uint64_t a1)
{
  unint64_t v2 = sub_25357AA94();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolQuery.encode(to:)(void *a1)
{
  uint64_t v3 = sub_253462A5C(&qword_269CDF110);
  sub_253465998();
  uint64_t v10 = v4;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253472068(a1, a1[3]);
  sub_25357AA94();
  sub_253B0A680();
  sub_253B0A3F0();
  if (!v1)
  {
    sub_253462A5C(&qword_269CDEC00);
    sub_253572E28(&qword_269CDEC20);
    sub_253B0A3E0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v3);
}

uint64_t ToolQuery.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_25357A8F8((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_253B0A630();
}

uint64_t ToolQuery.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_253462A5C(&qword_269CDF120);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  sub_253472068(a1, a1[3]);
  sub_25357AA94();
  sub_253B0A660();
  if (v2) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v6 = sub_253B0A320();
  uint64_t v8 = v7;
  sub_253462A5C(&qword_269CDEC00);
  sub_253572E28(&qword_269CDEC08);
  swift_bridgeObjectRetain();
  sub_253B0A310();
  uint64_t v9 = sub_25357B3D0();
  v10(v9);
  *a2 = v6;
  a2[1] = v8;
  a2[2] = v12;
  swift_bridgeObjectRetain();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25357A34C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ToolQuery.init(from:)(a1, a2);
}

uint64_t sub_25357A364(void *a1)
{
  return ToolQuery.encode(to:)(a1);
}

uint64_t sub_25357A384()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_25357A8F8((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_253B0A630();
}

uint64_t sub_25357A420(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v30 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & v4;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v32 = v3;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = result;
    uint64_t v16 = (uint64_t *)(*(void *)(result + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_253B09630();
    uint64_t v19 = sub_253B0A630();
    uint64_t v20 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (sub_253B0A4C0() & 1) == 0)
    {
      uint64_t v25 = ~v20;
      for (unint64_t j = v21 + 1; ; unint64_t j = v27 + 1)
      {
        uint64_t v27 = j & v25;
        if (((*(void *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0) {
          break;
        }
        uint64_t v28 = (void *)(v22 + 16 * v27);
        BOOL v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (sub_253B0A4C0() & 1) != 0) {
          goto LABEL_28;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t result = v15;
    int64_t v3 = v32;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v31) {
        return 1;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v31) {
          return 1;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v32 = v13;
  }
  uint64_t v14 = v3 + 4;
  if (v3 + 4 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v31) {
      return 1;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_25357A6AC(uint64_t a1, uint64_t a2)
{
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & v4;
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  for (v7 &= v7 - 1; ; uint64_t v7 = (v9 - 1) & v9)
  {
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_2534D16B8();
    uint64_t v17 = sub_253B0A630();
    uint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v19 = v17 & ~v18;
    sub_25357B400();
    if ((v20 & 1) == 0) {
      goto LABEL_36;
    }
    swift_bridgeObjectRetain();
    sub_2534BFE70();
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v18;
      while (1)
      {
        uint64_t v19 = (v19 + 1) & v23;
        sub_25357B400();
        if ((v24 & 1) == 0) {
          break;
        }
        swift_bridgeObjectRetain();
        sub_2534BFE70();
        char v26 = v25;
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_33;
        }
      }
LABEL_36:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v8 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v8 >= v28) {
      return;
    }
    uint64_t v9 = *(void *)(v27 + 8 * v8);
    ++v3;
    if (!v9)
    {
      int64_t v3 = v8 + 1;
      sub_25357B3F4();
      if (v10 == v11) {
        return;
      }
      sub_25357B3E8();
      if (!v9)
      {
        int64_t v3 = v12 + 2;
        sub_25357B3F4();
        if (v10 == v11) {
          return;
        }
        sub_25357B3E8();
        if (!v9)
        {
          int64_t v3 = v13 + 3;
          sub_25357B3F4();
          if (v10 == v11) {
            return;
          }
          sub_25357B3E8();
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_27:
    ;
  }
  int64_t v15 = v14 + 4;
  if (v15 >= v28) {
    return;
  }
  uint64_t v9 = *(void *)(v27 + 8 * v15);
  if (v9)
  {
    int64_t v3 = v15;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    sub_25357B3F4();
    if (v10 == v11) {
      return;
    }
    sub_25357B3E8();
    int64_t v15 = v16 + 1;
    if (v9) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_25357A8F8(uint64_t a1, uint64_t a2)
{
  sub_253B0A630();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v10 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  for (v6 &= v6 - 1; ; uint64_t v6 = (v12 - 1) & v12)
  {
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_253B09630();
    uint64_t v14 = sub_253B0A630();
    uint64_t result = swift_bridgeObjectRelease();
    v9 ^= v14;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1)) {
      goto LABEL_19;
    }
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_253B0A600();
    }
    uint64_t v12 = *(void *)(v3 + 8 * v10);
    if (!v12) {
      break;
    }
LABEL_14:
    ;
  }
  int64_t v13 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    ++v10;
    goto LABEL_14;
  }
  while (1)
  {
    int64_t v10 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v10);
    ++v13;
    if (v12) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

unint64_t sub_25357AA94()
{
  unint64_t result = qword_269CDF118;
  if (!qword_269CDF118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF118);
  }
  return result;
}

unint64_t sub_25357AAE4()
{
  unint64_t result = qword_269CDF128;
  if (!qword_269CDF128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF128);
  }
  return result;
}

uint64_t destroy for ToolQuery()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s30IntelligenceFlowPlannerSupport9ToolQueryVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ToolQuery(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ToolQuery()
{
  return &type metadata for ToolQuery;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for ToolQuery.Output(uint64_t a1)
{
  uint64_t v2 = sub_253B077E0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ToolQuery.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolQuery.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25357AEE4);
}

uint64_t sub_25357AEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolQuery.Output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25357AF40);
}

uint64_t sub_25357AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B077E0();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, a2, v4);
}

uint64_t sub_25357AF8C()
{
  uint64_t result = sub_253B077E0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToolQuery.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25357B0E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolQuery.CodingKeys()
{
  return &type metadata for ToolQuery.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ToolQuery.Output.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25357B1B8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolQuery.Output.CodingKeys()
{
  return &type metadata for ToolQuery.Output.CodingKeys;
}

unint64_t sub_25357B1F4()
{
  unint64_t result = qword_269CDF140;
  if (!qword_269CDF140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF140);
  }
  return result;
}

unint64_t sub_25357B244()
{
  unint64_t result = qword_269CDF148;
  if (!qword_269CDF148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF148);
  }
  return result;
}

unint64_t sub_25357B294()
{
  unint64_t result = qword_269CDF150;
  if (!qword_269CDF150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF150);
  }
  return result;
}

unint64_t sub_25357B2E4()
{
  unint64_t result = qword_269CDF158;
  if (!qword_269CDF158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF158);
  }
  return result;
}

unint64_t sub_25357B334()
{
  unint64_t result = qword_269CDF160;
  if (!qword_269CDF160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF160);
  }
  return result;
}

unint64_t sub_25357B384()
{
  unint64_t result = qword_269CDF168;
  if (!qword_269CDF168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDF168);
  }
  return result;
}

uint64_t sub_25357B3D0()
{
  return v0;
}

uint64_t sub_25357B414(unsigned __int8 a1, char a2)
{
  unint64_t v3 = 0xEB00000000797265;
  unint64_t v4 = 0x7551797469746E65;
  uint64_t v5 = a1;
  unint64_t v6 = 0x7551797469746E65;
  unint64_t v7 = 0xEB00000000797265;
  switch(v5)
  {
    case 1:
      unint64_t v6 = 0x61636F5669726973;
      unint64_t v7 = 0xEE007972616C7562;
      break;
    case 2:
      unint64_t v7 = 0x8000000253B0B700;
      unint64_t v6 = 0xD000000000000014;
      break;
    case 3:
      unint64_t v6 = 0x656D6F646167656DLL;
      uint64_t v8 = 5391173;
      goto LABEL_7;
    case 4:
      unint64_t v6 = 0x52747865746E6F63;
      unint64_t v7 = 0xEF79727473696765;
      break;
    case 5:
      unint64_t v6 = 0x61566E7275746572;
      uint64_t v8 = 6649196;
LABEL_7:
      unint64_t v7 = v8 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 6:
      unint64_t v6 = 0x6D6F725072657375;
      unint64_t v7 = 0xEA00000000007470;
      break;
    case 7:
      unint64_t v6 = 0x72616573696E6D6FLL;
      unint64_t v7 = 0xEA00000000006863;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v4 = 0x61636F5669726973;
      unint64_t v3 = 0xEE007972616C7562;
      break;
    case 2:
      unint64_t v3 = 0x8000000253B0B700;
      unint64_t v4 = 0xD000000000000014;
      break;
    case 3:
      unint64_t v4 = 0x656D6F646167656DLL;
      uint64_t v9 = 5391173;
      goto LABEL_16;
    case 4:
      unint64_t v4 = 0x52747865746E6F63;
      unint64_t v3 = 0xEF79727473696765;
      break;
    case 5:
      unint64_t v4 = 0x61566E7275746572;
      uint64_t v9 = 6649196;
LABEL_16:
      unint64_t v3 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 6:
      unint64_t v4 = 0x6D6F725072657375;
      unint64_t v3 = 0xEA00000000007470;
      break;
    case 7:
      unint64_t v4 = 0x72616573696E6D6FLL;
      unint64_t v3 = 0xEA00000000006863;
      break;
    default:
      break;
  }
  if (v6 == v4 && v7 == v3) {
    sub_253592D9C();
  }
  else {
    char v2 = sub_253592684();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_25357B6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return _s30IntelligenceFlowPlannerSupport17SafetyModeReleaseV2eeoiySbAC_ACtFZ_0();
  }
  else {
    return sub_253B0A4C0();
  }
}

BOOL sub_25357B6E8(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_25357B6F4(unsigned __int8 a1, char a2)
{
  unint64_t v3 = 0xEC00000073656C70;
  uint64_t v4 = 0x6D6178655F736F70;
  int v5 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v6 = 0x6D6178655F67656ELL;
    }
    else {
      uint64_t v6 = 0x7470697263736564;
    }
    if (v5 == 1) {
      unint64_t v7 = 0xEC00000073656C70;
    }
    else {
      unint64_t v7 = 0xEB000000006E6F69;
    }
  }
  else
  {
    uint64_t v6 = 0x6D6178655F736F70;
    unint64_t v7 = 0xEC00000073656C70;
  }
  if (a2)
  {
    uint64_t v4 = a2 == 1 ? 0x6D6178655F67656ELL : 0x7470697263736564;
    if (a2 != 1) {
      unint64_t v3 = 0xEB000000006E6F69;
    }
  }
  if (v6 == v4 && v7 == v3) {
    sub_253592D9C();
  }
  else {
    char v2 = sub_253592684();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_25357B804(uint64_t a1, uint64_t a2)
{
  return sub_25357B8F8(a1, a2, (uint64_t (*)(void))SessionEventPayloadType.rawValue.getter);
}

uint64_t sub_25357B81C(char a1, char a2)
{
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v4 = 0xD000000000000011;
  }
  else {
    unint64_t v4 = 0x4149445F4C4C5546;
  }
  if (v3) {
    unint64_t v5 = 0xEB00000000474F4CLL;
  }
  else {
    unint64_t v5 = 0x8000000253B0B680;
  }
  if (a2) {
    unint64_t v6 = 0xD000000000000011;
  }
  else {
    unint64_t v6 = 0x4149445F4C4C5546;
  }
  if (a2) {
    unint64_t v7 = 0x8000000253B0B680;
  }
  else {
    unint64_t v7 = 0xEB00000000474F4CLL;
  }
  if (v4 == v6 && v5 == v7) {
    sub_253592A6C();
  }
  else {
    char v2 = sub_253592308();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_25357B8BC(char a1, char a2)
{
  return qword_253B36A28[a1] == qword_253B36A28[a2];
}

uint64_t sub_25357B8E0(uint64_t a1, uint64_t a2)
{
  return sub_25357B8F8(a1, a2, (uint64_t (*)(void))ExpressionFlattener.BuiltinIdentifiers.rawValue.getter);
}

uint64_t sub_25357B8F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    sub_253592A6C();
  }
  else {
    LOBYTE(v4) = sub_253592308();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_25357B98C(unsigned __int8 a1, char a2)
{
  unint64_t v3 = 0xD000000000000010;
  unint64_t v4 = 0x8000000253B0B2A0;
  uint64_t v5 = a1;
  unint64_t v6 = 0xD000000000000010;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v6 = 0x305F305F31763174;
      break;
    case 2:
      unint64_t v6 = 0x765F6133745F3174;
      uint64_t v7 = 0x305F305F31;
      goto LABEL_7;
    case 3:
      unint64_t v6 = 0xD000000000000011;
      unint64_t v4 = 0x8000000253B0B2D0;
      break;
    case 4:
      unint64_t v6 = 0x61626F6C675F3174;
      unint64_t v4 = 0xE90000000000006CLL;
      break;
    case 5:
      unint64_t v6 = 0x675F6133745F3174;
      uint64_t v7 = 0x6C61626F6CLL;
LABEL_7:
      unint64_t v4 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x8000000253B0B2A0;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xE800000000000000;
      unint64_t v3 = 0x305F305F31763174;
      break;
    case 2:
      unint64_t v3 = 0x765F6133745F3174;
      uint64_t v9 = 0x305F305F31;
      goto LABEL_14;
    case 3:
      unint64_t v3 = 0xD000000000000011;
      unint64_t v8 = 0x8000000253B0B2D0;
      break;
    case 4:
      unint64_t v3 = 0x61626F6C675F3174;
      unint64_t v8 = 0xE90000000000006CLL;
      break;
    case 5:
      unint64_t v3 = 0x675F6133745F3174;
      uint64_t v9 = 0x6C61626F6CLL;
LABEL_14:
      unint64_t v8 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v8) {
    sub_253592A6C();
  }
  else {
    char v2 = sub_253592308();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_25357BB8C(unsigned __int8 a1, char a2)
{
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x8000000253B0B100;
  uint64_t v5 = a1;
  unint64_t v6 = 0xD000000000000011;
  switch(v5)
  {
    case 1:
      unint64_t v6 = 0xD00000000000001DLL;
      uint64_t v7 = "planner_overrides";
      goto LABEL_5;
    case 2:
      unint64_t v6 = 0xD00000000000001BLL;
      uint64_t v7 = "response_generation_overrides";
      goto LABEL_5;
    case 3:
      unint64_t v6 = 0xD00000000000001ALL;
      uint64_t v7 = "response_generation_catalog";
LABEL_5:
      unint64_t v4 = (unint64_t)v7 | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x8000000253B0B100;
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0xD00000000000001DLL;
      uint64_t v9 = "planner_overrides";
      goto LABEL_10;
    case 2:
      unint64_t v3 = 0xD00000000000001BLL;
      uint64_t v9 = "response_generation_overrides";
      goto LABEL_10;
    case 3:
      unint64_t v3 = 0xD00000000000001ALL;
      uint64_t v9 = "response_generation_catalog";
LABEL_10:
      unint64_t v8 = (unint64_t)v9 | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v4 == v8) {
    sub_253592A6C();
  }
  else {
    char v2 = sub_253592308();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}