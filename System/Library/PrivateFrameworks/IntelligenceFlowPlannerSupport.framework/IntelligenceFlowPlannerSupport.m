uint64_t AssetInfo.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssetInfo.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AssetInfo() + 20);
  return sub_2534629F4(v3, a1);
}

uint64_t type metadata accessor for AssetInfo()
{
  uint64_t result = qword_26B24A2E0;
  if (!qword_26B24A2E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2534629F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_253462A5C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t AssetInfo.metadata.getter()
{
  type metadata accessor for AssetInfo();
  return swift_bridgeObjectRetain();
}

uint64_t default argument 1 of EntitySpanMatchService.init(matcherRegistry:maxMatchTasks:)()
{
  return 3;
}

uint64_t default argument 1 of HandleEndedPayload.init(error:eventIds:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 2 of ModelCache.getModel<A>(modelType:prewarm:keepAlive:)()
{
  return 0;
}

uint64_t default argument 1 of Toolbox.init(toolDatabase:schemaProvider:clientActions:)@<X0>(uint64_t *a1@<X8>)
{
  if (qword_269CDA7D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_253B08400();
  sub_253462BD4(v2, (uint64_t)qword_269D7B660);
  uint64_t v3 = type metadata accessor for SharedAssistantSchemaProvider();
  sub_253462C0C();
  uint64_t result = sub_253B083C0();
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for SharedAssistantSchemaProvider;
  *a1 = result;
  return result;
}

uint64_t sub_253462BD4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_253462C0C()
{
  unint64_t result = qword_269CDB0D8;
  if (!qword_269CDB0D8)
  {
    type metadata accessor for SharedAssistantSchemaProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB0D8);
  }
  return result;
}

uint64_t default argument 2 of Toolbox.init(toolDatabase:schemaProvider:clientActions:)()
{
  return MEMORY[0x263F8EE78];
}

uint64_t default argument 0 of Session.StatementIdCounter.init(baseStatementIdIndex:)()
{
  return 1;
}

void default argument 5 of Session.Plan.init(prompt:promptResponse:statements:overrideId:source:program:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

unint64_t sub_253462C88()
{
  unint64_t result = qword_269CDB0E0;
  if (!qword_269CDB0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB0E0);
  }
  return result;
}

uint64_t default argument 3 of ActionResolverRequest.init(statementId:tool:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:isAuthenticated:)()
{
  return MEMORY[0x263F8EE88];
}

uint64_t _s30IntelligenceFlowPlannerSupport21ActionResolverRequestV11statementId4tool18resolvedParameters23unresolvedParameterSets013userSpecifiedL008isClientE00R9Confirmed0R13AuthenticatedAC0aB011StatementIDV_AA20GlobalToolIdentifierVSDyAA0N4PathVAA9CandidateVGShyAUGSDySSAL3ASTOAAE9FlatValueOGS3btcfcfA1__0()
{
  type metadata accessor for Candidate(0);
  sub_253462C88();
  return sub_253B095A0();
}

uint64_t default argument 3 of ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:isAuthenticated:)()
{
  return MEMORY[0x263F8EE88];
}

uint64_t default argument 2 of ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:clientQueryId:isAuthenticated:)()
{
  type metadata accessor for Candidate(0);
  return sub_253B095A0();
}

uint64_t default argument 3 of ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:clientQueryId:isAuthenticated:)()
{
  return MEMORY[0x263F8EE88];
}

uint64_t default argument 4 of ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:clientQueryId:isAuthenticated:)()
{
  type metadata accessor for AST.FlatValue(0);
  return sub_253B095A0();
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B05390();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248C70);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v15;
    swift_bridgeObjectRetain();
    id v16 = v15;
  }
  return v4;
}

uint64_t _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

void destroy for AssetInfo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B05390();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + *(int *)(a2 + 28));
}

void *initializeWithCopy for AssetInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B05390();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v13 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain();
  id v14 = v13;
  return a1;
}

void *assignWithCopy for AssetInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B05390();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  v15 = *(void **)((char *)a1 + v14);
  id v16 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v16;
  id v17 = v16;

  return a1;
}

_OWORD *initializeWithTake for AssetInfo(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B05390();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  return a1;
}

void *assignWithTake for AssetInfo(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B05390();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  id v16 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);

  return a1;
}

uint64_t getEnumTagSinglePayload for AssetInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534635E8);
}

uint64_t sub_2534635E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AssetInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253463688);
}

uint64_t sub_253463688(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248C70);
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v8, a2, a2, v7);
  }
  return result;
}

void sub_25346370C()
{
  sub_2534637B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2534637B0()
{
  if (!qword_26B248C80)
  {
    sub_253B05390();
    unint64_t v0 = sub_253B09E00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B248C80);
    }
  }
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_269CDB148)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_269CDB148);
    }
  }
}

uint64_t _s30IntelligenceFlowPlannerSupport16SearchExpressionV5query24isLowConfidenceKnowledge7pickOne28shouldOpenResultIfApplicableACSS_S3btcfcfA1__0()
{
  return 0;
}

void sub_253463868()
{
  sub_253465954();
  id v0 = sub_25353CE78();
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = objc_msgSend(v0, sel_bundlePath);
    uint64_t v3 = sub_253B096E0();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  qword_26B248FA8 = v3;
  *(void *)algn_26B248FB0 = v5;
}

uint64_t static AssetsManager.shared.getter@<X0>(void *a1@<X8>)
{
  if (qword_26B248FC0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_26B248FB0;
  *a1 = qword_26B248FA8;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void sub_253463970(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v54 = a5;
  sub_253B089F0();
  sub_253465998();
  uint64_t v49 = v10;
  uint64_t v50 = v9;
  MEMORY[0x270FA5388](v9);
  v48 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_253B05390();
  sub_253465998();
  uint64_t v13 = v12;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x270FA5388](v18);
  v52 = (char *)&v46 - v21;
  uint64_t v22 = *a1;
  if (a4) {
    goto LABEL_4;
  }
  if (*(void *)(v5 + 8))
  {
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRetain();
    v23 = v52;
    sub_253B05310();
    swift_bridgeObjectRelease();
    uint64_t v56 = v51;
    uint64_t v57 = a3;
    swift_bridgeObjectRetain();
    sub_253B09860();
    sub_253B05330();
    swift_bridgeObjectRelease();
    uint64_t v24 = v13;
    v25 = v23;
    v26 = v23;
    uint64_t v27 = v53;
    (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v26, v20, v53);
    switch((int)v22)
    {
      case 0:
        goto LABEL_6;
      case 4:
      case 5:
      case 7:
        sub_253465A08();
LABEL_6:
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v17, v25, v27);
        uint64_t v28 = v54;
        sub_253B05330();
        swift_bridgeObjectRelease();
        v29 = *(void (**)(char *, uint64_t))(v24 + 8);
        v29(v17, v27);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v28, 0, 1, v27);
        v29(v25, v27);
        break;
      default:
        sub_253B08340();
        v30 = sub_253B089D0();
        int v31 = sub_253B09D90();
        if (os_log_type_enabled(v30, (os_log_type_t)v31))
        {
          LODWORD(v51) = v31;
          uint64_t v32 = sub_253465A6C();
          uint64_t v47 = sub_253465A54();
          uint64_t v58 = v47;
          *(_DWORD *)uint64_t v32 = 136315394;
          uint64_t v33 = 0xD00000000000001ELL;
          switch(v22)
          {
            case 0:
              break;
            case 1:
            case 2:
            case 3:
            case 6:
            case 7:
              sub_253465A08();
              break;
            case 4:
            case 5:
              __break(1u);
              JUMPOUT(0x253463E98);
            default:
              JUMPOUT(0);
          }
          uint64_t v56 = sub_253464DF8(v33, 0x8000000253B0AF70, &v58);
          sub_253B09E80();
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 2080;
          v39 = v52;
          swift_beginAccess();
          sub_253464F34();
          uint64_t v40 = sub_253B0A480();
          uint64_t v55 = sub_253464DF8(v40, v41, &v58);
          sub_253B09E80();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_253460000, v30, (os_log_type_t)v51, "No folder name found for asset %s, using base URL %s", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          sub_2534659B4();
          v25 = v39;
          sub_2534659B4();
        }

        sub_2534659CC();
        v42();
        sub_253465A98();
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v43, v44, v45, v27);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v27);
        break;
    }
    sub_253465A14();
    return;
  }
  sub_253465A98();
  sub_253465A14();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, v35, v36, v37);
}

#error "253464400: call analysis failed (funcsize=516)"

void AssetsManager.uafAsset(for:set:usages:)(char *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_253B089F0();
  sub_253465998();
  uint64_t v53 = v10;
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  MEMORY[0x270FA5388](v13 - 8);
  sub_253465A3C();
  char v14 = *a1;
  int v15 = *a2;
  id v16 = objc_msgSend(self, sel_sharedManager);
  unint64_t v52 = (unint64_t)"l.language";
  unint64_t v51 = (unint64_t)"com.apple.if.planner";
  unint64_t v50 = (unint64_t)"com.apple.if.planner.overrides";
  id v17 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v18 = sub_253465600((uint64_t)v17, a3, v16);

  LOBYTE(v56) = v14;
  unint64_t v19 = static AssetUtils.assetName(for:with:)((unsigned __int8 *)&v56, a3);
  unint64_t v21 = v20;
  if (v18
    && (id v22 = v18,
        v23 = a4,
        uint64_t v24 = (void *)sub_253B096D0(),
        id v25 = objc_msgSend(v22, sel_assetNamed_, v24),
        v22,
        v24,
        a4 = v23,
        v25))
  {
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v25, sel_name);
    uint64_t v27 = sub_253B096E0();
    uint64_t v29 = v28;

    id v30 = objc_msgSend(v25, sel_location);
    if (v30)
    {
      int v31 = v30;
      sub_253B05340();

      uint64_t v32 = sub_253B05390();
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v32 = sub_253B05390();
      uint64_t v33 = 1;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v4, v33, 1, v32);
    id v46 = objc_msgSend(v25, sel_metadata);
    uint64_t v47 = sub_253B09580();

    *a4 = v27;
    a4[1] = v29;
    v48 = (int *)type metadata accessor for AssetInfo();
    sub_253464ECC(v4, (uint64_t)a4 + v48[5]);
    *(uint64_t *)((char *)a4 + v48[6]) = v47;
    *(uint64_t *)((char *)a4 + v48[7]) = (uint64_t)v18;
    sub_253465A2C();
  }
  else
  {
    sub_253B08340();
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_253B089D0();
    os_log_type_t v35 = sub_253B09D90();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v49 = a4;
      uint64_t v36 = sub_253465A6C();
      uint64_t v56 = sub_253465A54();
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_253464DF8(v19, v21, &v56);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2080;
      unint64_t v37 = 0xD00000000000001ELL;
      unint64_t v38 = v51 | 0x8000000000000000;
      if (v15 != 1)
      {
        unint64_t v37 = 0xD00000000000001CLL;
        unint64_t v38 = v50 | 0x8000000000000000;
      }
      if (v15) {
        uint64_t v39 = v37;
      }
      else {
        uint64_t v39 = 0xD000000000000014;
      }
      if (v15) {
        unint64_t v40 = v38;
      }
      else {
        unint64_t v40 = v52 | 0x8000000000000000;
      }
      uint64_t v55 = sub_253464DF8(v39, v40, &v56);
      sub_253B09E80();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_253460000, v34, v35, "Asset %s not found in asset set %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      sub_2534659B4();
      sub_2534659B4();

      sub_2534659CC();
      v41();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
    }
    type metadata accessor for AssetInfo();
    sub_253465A98();
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v42, v43, v44, v45);
  sub_253465A14();
}

uint64_t AssetsManager.info(for:locale:in:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v14 = sub_253462A5C(&qword_26B24A2F0);
  MEMORY[0x270FA5388](v14 - 8);
  sub_253465A3C();
  unsigned __int8 v15 = *a1;
  long long v25 = *v6;
  unsigned __int8 v24 = v15;
  AssetsManager.sideloadedAsset(for:locale:in:)(&v24, a2, a3, a4, a5);
  uint64_t v16 = type metadata accessor for AssetInfo();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v16) == 1)
  {
    sub_253465678(v7, &qword_26B24A2F0);
    LOBYTE(v25) = v15;
    unsigned __int8 v24 = 0x2010100010101uLL >> (8 * v15);
    unsigned __int8 v23 = v15;
    uint64_t v17 = static AssetUtils.getUsages(for:locale:)(&v23, a2, a3);
    AssetsManager.uafAsset(for:set:usages:)((char *)&v25, &v24, v17, a6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2534656D0(v7, (uint64_t)a6);
    sub_253465A2C();
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, v20, v21, v22);
  }
}

uint64_t sub_253464DF8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_253464F84(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_2534658F4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_2534658F4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_253464ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C((uint64_t *)&unk_26B248C70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_253464F34()
{
  unint64_t result = qword_269CDB390;
  if (!qword_269CDB390)
  {
    sub_253B05390();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB390);
  }
  return result;
}

uint64_t sub_253464F84(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_2534650DC((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_253B09E90();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_2534651B4(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = sub_253B0A0A0();
    if (!v8)
    {
      uint64_t result = sub_253B0A1C0();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_2534650DC(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_253B0A260();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_2534651B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25346524C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_2534653C0(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_2534653C0((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25346524C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v2 = sub_253B098A0();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = sub_253A43954(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_253B0A010();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  sub_253B0A260();
  __break(1u);
LABEL_14:
  uint64_t result = sub_253B0A1C0();
  __break(1u);
  return result;
}

char *sub_2534653C0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_253462A5C(&qword_269CDB398);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_253465570(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_253465498(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_253465498(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_253B0A260();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_253465570(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_253B0A260();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

id sub_253465600(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (void *)sub_253B09570();
  id v6 = objc_msgSend(a3, sel_retrieveAssetSet_usages_, a1, v5);

  return v6;
}

uint64_t sub_253465678(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t sub_2534656D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for AssetsManager(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AssetsManager()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AssetsManager(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AssetsManager(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for AssetsManager(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetsManager(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetsManager(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetsManager()
{
  return &type metadata for AssetsManager;
}

uint64_t _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_2534658F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_253465954()
{
  unint64_t result = qword_26B24A3B8;
  if (!qword_26B24A3B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B24A3B8);
  }
  return result;
}

void sub_2534659B4()
{
  JUMPOUT(0x25A269E60);
}

uint64_t sub_2534659EC()
{
  return v0;
}

uint64_t sub_253465A54()
{
  return swift_slowAlloc();
}

uint64_t sub_253465A6C()
{
  return swift_slowAlloc();
}

unint64_t AssetFolderName.rawValue.getter()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t IntelligenceEngineAsset.rawValue.getter()
{
  unint64_t result = 0xD00000000000001ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000027;
      break;
    case 3:
      unint64_t result = 0xD000000000000028;
      break;
    case 4:
      unint64_t result = 0xD000000000000030;
      break;
    case 5:
      unint64_t result = 0xD000000000000032;
      break;
    case 6:
      unint64_t result = 0xD000000000000020;
      break;
    case 7:
      unint64_t result = 0xD00000000000002FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t static AssetUtils.assetName(for:with:)(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t result = 0xD00000000000001ELL;
  uint64_t v5 = *a1;
  unint64_t v6 = 0xD000000000000030;
  switch(v5)
  {
    case 1:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000027;
      break;
    case 3:
      unint64_t result = 0xD000000000000028;
      break;
    case 4:
      goto LABEL_6;
    case 5:
      unint64_t v6 = 0xD000000000000032;
LABEL_6:
      unint64_t v7 = v6;
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_25346628C(0x75676E616C2E6772, 0xEB00000000656761, a2);
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t result = v7;
      break;
    case 6:
      unint64_t result = 0xD000000000000020;
      break;
    case 7:
      unint64_t result = 0xD00000000000002FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t IntelligenceEngineAssetSet.rawValue.getter()
{
  unint64_t v1 = 0xD00000000000001ELL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000001CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t static AssetUtils.getUsages(for:locale:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  switch(*a1)
  {
    case 4:
    case 5:
      sub_253462A5C(&qword_26B24A580);
      inited = (__n128 *)swift_initStackObject();
      unint64_t v6 = sub_253466C58(inited, (__n128)xmmword_253B22680);
      uint64_t v8 = v10 + 529;
      goto LABEL_6;
    case 6:
      sub_253462A5C(&qword_26B24A580);
      size_t v11 = (__n128 *)swift_initStackObject();
      uint64_t v12 = sub_253466C58(v11, (__n128)xmmword_253B22690);
      uint64_t v14 = (char *)sub_253466C88(v12, v13 + 1805);
      strcpy(v14 + 64, "nl.assistant");
      v14[77] = 0;
      *((_WORD *)v14 + 39) = -5120;
      *((void *)v14 + 10) = a2;
      *((void *)v14 + 11) = a3;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 7:
      sub_253462A5C(&qword_26B24A580);
      unsigned __int8 v15 = (__n128 *)swift_initStackObject();
      unint64_t v6 = sub_253466C58(v15, (__n128)xmmword_253B22680);
      goto LABEL_6;
    default:
      sub_253462A5C(&qword_26B24A580);
      uint64_t v5 = (__n128 *)swift_initStackObject();
      unint64_t v6 = sub_253466C58(v5, (__n128)xmmword_253B22680);
      uint64_t v8 = v7 + 264;
LABEL_6:
      sub_253466C88(v6, v8);
LABEL_7:
      swift_bridgeObjectRetain();
      return sub_253B095A0();
  }
}

IntelligenceFlowPlannerSupport::IntelligenceEngineAsset_optional __swiftcall IntelligenceEngineAsset.init(rawValue:)(Swift::String rawValue)
{
  sub_253466C70();
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v4 = 8;
  if (v2 < 8) {
    char v4 = v2;
  }
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_253465FBC(unsigned __int8 *a1, char *a2)
{
  return sub_25357C37C(*a1, *a2);
}

uint64_t sub_253465FC8()
{
  return sub_25397F834(*v0);
}

uint64_t sub_253465FD0()
{
  return sub_253980818();
}

uint64_t sub_253465FD8(uint64_t a1)
{
  return sub_253980A88(a1, *v1);
}

IntelligenceFlowPlannerSupport::IntelligenceEngineAsset_optional sub_253465FE0(Swift::String *a1)
{
  return IntelligenceEngineAsset.init(rawValue:)(*a1);
}

unint64_t sub_253465FEC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = IntelligenceEngineAsset.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

IntelligenceFlowPlannerSupport::AssetFolderName_optional __swiftcall AssetFolderName.init(rawValue:)(Swift::String rawValue)
{
  sub_253466C70();
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v4 = 4;
  if (v2 < 4) {
    char v4 = v2;
  }
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_253466060(unsigned __int8 *a1, char *a2)
{
  return sub_25357BB8C(*a1, *a2);
}

uint64_t sub_25346606C()
{
  return sub_25397F84C(*v0);
}

uint64_t sub_253466074()
{
  return sub_25398034C();
}

uint64_t sub_25346607C(uint64_t a1)
{
  return sub_253980C40(a1, *v1);
}

IntelligenceFlowPlannerSupport::AssetFolderName_optional sub_253466084(Swift::String *a1)
{
  return AssetFolderName.init(rawValue:)(*a1);
}

unint64_t sub_253466090@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AssetFolderName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

IntelligenceFlowPlannerSupport::AssetsUsageKey_optional __swiftcall AssetsUsageKey.init(rawValue:)(Swift::String rawValue)
{
  sub_253466C70();
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v4 = 5;
  if (v2 < 5) {
    char v4 = v2;
  }
  *unint64_t v1 = v4;
  return result;
}

uint64_t AssetsUsageKey.rawValue.getter()
{
  uint64_t result = 0x75676E616C2E6561;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x75676E616C2E6669;
      break;
    case 2:
      uint64_t result = 0x75676E616C2E6772;
      break;
    case 3:
      uint64_t result = 0x75676E616C2E6C6ELL;
      break;
    case 4:
      uint64_t result = 0x73697373612E6C6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_253466190(unsigned __int8 *a1, char *a2)
{
  return sub_25357BCCC(*a1, *a2);
}

uint64_t sub_25346619C()
{
  return sub_25397F864(*v0);
}

uint64_t sub_2534661A4()
{
  return sub_2539803FC();
}

uint64_t sub_2534661AC(uint64_t a1)
{
  return sub_253980C28(a1, *v1);
}

IntelligenceFlowPlannerSupport::AssetsUsageKey_optional sub_2534661B4(Swift::String *a1)
{
  return AssetsUsageKey.init(rawValue:)(*a1);
}

uint64_t sub_2534661C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AssetsUsageKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

IntelligenceFlowPlannerSupport::IntelligenceEngineAssetSet_optional __swiftcall IntelligenceEngineAssetSet.init(rawValue:)(Swift::String rawValue)
{
  sub_253466C70();
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *unint64_t v1 = v4;
  return result;
}

uint64_t sub_253466234(unsigned __int8 *a1, char *a2)
{
  return sub_25357C298(*a1, *a2);
}

uint64_t sub_253466240()
{
  return sub_25397F87C();
}

uint64_t sub_253466248(uint64_t a1)
{
  return sub_253980788(a1, *v1);
}

uint64_t sub_253466250()
{
  return sub_253980AA0();
}

IntelligenceFlowPlannerSupport::IntelligenceEngineAssetSet_optional sub_253466258(Swift::String *a1)
{
  return IntelligenceEngineAssetSet.init(rawValue:)(*a1);
}

unint64_t sub_253466264@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = IntelligenceEngineAssetSet.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25346628C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_25396E0AC();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

unint64_t sub_2534662E8()
{
  unint64_t result = qword_269CDB3A0;
  if (!qword_269CDB3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB3A0);
  }
  return result;
}

unint64_t sub_253466338()
{
  unint64_t result = qword_269CDB3A8;
  if (!qword_269CDB3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB3A8);
  }
  return result;
}

unint64_t sub_253466388()
{
  unint64_t result = qword_269CDB3B0;
  if (!qword_269CDB3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB3B0);
  }
  return result;
}

unint64_t sub_2534663D8()
{
  unint64_t result = qword_269CDB3B8;
  if (!qword_269CDB3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_269CDB3B8);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for IntelligenceEngineAsset(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IntelligenceEngineAsset(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for IntelligenceEngineAsset(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253466588);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_2534665B0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2534665BC(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void type metadata accessor for IntelligenceEngineAsset()
{
}

uint64_t getEnumTagSinglePayload for AssetFolderName(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetFolderName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253466724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for AssetFolderName()
{
}

uint64_t getEnumTagSinglePayload for AssetsUsageKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssetsUsageKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534668ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for AssetsUsageKey()
{
}

uint64_t getEnumTagSinglePayload for IntelligenceEngineAssetSet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for IntelligenceEngineAssetSet(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253466A34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for IntelligenceEngineAssetSet()
{
}

void type metadata accessor for AssetUtils()
{
}

uint64_t sub_253466A74@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_25396E0AC(), (v5 & 1) != 0))
  {
    unint64_t v6 = v4;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = sub_253B059D0();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, v7 + *(void *)(*(void *)(v8 - 8) + 72) * v6, v8);
    uint64_t v9 = a2;
    uint64_t v10 = 0;
    uint64_t v11 = 1;
    uint64_t v12 = v8;
  }
  else
  {
    sub_253B059D0();
    uint64_t v9 = sub_253466CB8();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
}

uint64_t sub_253466B2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_253466B84(a1, MEMORY[0x263F7FEB0], (uint64_t (*)(void))sub_25396E440, a2);
}

uint64_t sub_253466B58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_253466B84(a1, MEMORY[0x263F4C7E0], (uint64_t (*)(void))sub_25396E690, a2);
}

uint64_t sub_253466B84@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  if (*(void *)(a1 + 16) && (uint64_t v7 = a3(), (v8 & 1) != 0))
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = a2(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a4, v10 + *(void *)(*(void *)(v11 - 8) + 72) * v9, v11);
    uint64_t v12 = a4;
    uint64_t v13 = 0;
    uint64_t v14 = 1;
    uint64_t v15 = v11;
  }
  else
  {
    a2(0);
    uint64_t v12 = sub_253466CB8();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v12, v13, v14, v15);
}

__n128 *sub_253466C58(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

void *sub_253466C88@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  result[4] = a2;
  result[5] = 0xEB00000000656761;
  result[6] = v3;
  result[7] = v2;
  return result;
}

uint64_t sub_253466CA0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_253466CB8()
{
  return v0;
}

uint64_t GlobalEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  uint64_t v4 = swift_allocObject();
  GlobalEntityMatcherShim.init(maxEntityCount:)(a1, v3);
  return v4;
}

uint64_t GlobalEntityMatcherShim.init(maxEntityCount:)(uint64_t a1, char a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_defaultMaxEntityCount) = 5;
  BOOL v3 = a1 > 0 && (a2 & 1) == 0;
  *(void *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_knosisAnswerLimit) = 1000;
  uint64_t v4 = (void *)(v2
                + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId);
  *uint64_t v4 = 0xD00000000000001ELL;
  v4[1] = 0x8000000253B0BAA0;
  if (v3) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 5;
  }
  *(void *)(v2 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_maxEntityCount) = v5;
  sub_253B07B20();
  sub_25346CAF4();
  sub_25346CCF8();
  v6();
  return v2;
}

uint64_t sub_253466DF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_matcherType;
  sub_253B07B20();
  sub_25346CAF4();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t sub_253466E5C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_253B07790();
  v3[5] = v4;
  sub_25346CB34(v4);
  v3[6] = v5;
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_253466EFC, 0, 0);
}

uint64_t sub_253466EFC()
{
  uint64_t v28 = v0;
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x263F4E3B8], v3);
  char v4 = sub_253B07780();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    uint64_t v5 = sub_253B095E0();
    uint64_t v7 = v6;
    id v8 = sub_253469AA0();
    uint64_t v10 = v0[3];
    uint64_t v9 = v0[4];
    uint64_t v11 = v0[2];
    unint64_t v12 = sub_253469C7C(v5, v7);
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v8, sel_answers);
    sub_25346C8E0(0, (unint64_t *)&unk_269CDB3C8);
    unint64_t v14 = sub_253B09A60();

    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_2534672F0(v14, v9, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v15;
    sub_253467B5C(&v27);
    uint64_t v16 = (void *)swift_task_alloc();
    v16[2] = v9;
    v16[3] = v11;
    v16[4] = v10;
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = sub_2534674A0(v17, (void (*)(id, uint64_t, uint64_t, double))sub_253469D48);
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    uint64_t v19 = sub_253467BE4(*(void *)(v9 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_maxEntityCount), v18, MEMORY[0x263F4E598]);
    sub_253467FC4(v19, v20, v21, v22, (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_25350B90C);
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  swift_task_dealloc();
  long long v25 = (uint64_t (*)(uint64_t))v0[1];
  return v25(v24);
}

unint64_t sub_2534671A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (void *)(swift_bridgeObjectRetain() + 40);
    uint64_t v3 = MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t result = *(v2 - 1);
      if (*v2 >> 14 < result >> 14) {
        break;
      }
      uint64_t v5 = sub_253B09940();
      uint64_t v6 = MEMORY[0x25A268760](v5);
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2535228AC();
        uint64_t v3 = v11;
      }
      unint64_t v9 = *(void *)(v3 + 16);
      if (v9 >= *(void *)(v3 + 24) >> 1)
      {
        sub_2535228AC();
        uint64_t v3 = v12;
      }
      v2 += 2;
      *(void *)(v3 + 16) = v9 + 1;
      uint64_t v10 = v3 + 16 * v9;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v8;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_2534672F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_253B0A210())
  {
    unint64_t v23 = v3 & 0xC000000000000001;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v6 = 4;
    unint64_t v21 = v3;
    uint64_t v22 = v4;
    while (1)
    {
      id v7 = v23 ? (id)MEMORY[0x25A269060](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      sub_2534696E4(v7, a3);
      if (v11)
      {
        uint64_t v13 = v10;
        uint64_t v14 = v11;
        uint64_t v15 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253522928();
          uint64_t v5 = v18;
        }
        unint64_t v16 = *(void *)(v5 + 16);
        if (v16 >= *(void *)(v5 + 24) >> 1)
        {
          sub_253522928();
          uint64_t v5 = v19;
        }
        *(void *)(v5 + 16) = v16 + 1;
        uint64_t v17 = (void *)(v5 + 32 * v16);
        v17[4] = v8;
        v17[5] = v13;
        v17[6] = v14;
        v17[7] = v15;
        unint64_t v3 = v21;
      }
      else
      {
      }
      ++v6;
      if (v9 == v22) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2534674A0(uint64_t a1, void (*a2)(id, uint64_t, uint64_t, double))
{
  id v30 = a2;
  sub_253462A5C((uint64_t *)&unk_269CDB478);
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_253B07B60();
  uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v29 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v27 = (char *)v25 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return MEMORY[0x263F8EE78];
  }
  v25[2] = v2;
  uint64_t v26 = v9;
  uint64_t v28 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  swift_bridgeObjectRetain();
  v25[1] = a1;
  uint64_t v12 = (double *)(a1 + 56);
  uint64_t v13 = MEMORY[0x263F8EE78];
  do
  {
    double v14 = *v12;
    uint64_t v16 = *((void *)v12 - 2);
    uint64_t v15 = *((void *)v12 - 1);
    id v17 = *((id *)v12 - 3);
    swift_bridgeObjectRetain();
    v30(v17, v16, v15, v14);
    swift_bridgeObjectRelease();

    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v5, 1, v6) == 1)
    {
      sub_25346CAA8((uint64_t)v5, (uint64_t *)&unk_269CDB478);
    }
    else
    {
      uint64_t v18 = v27;
      uint64_t v19 = *v28;
      (*v28)(v27, v5, v6);
      v19(v29, v18, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2535228E0(0, *(void *)(v13 + 16) + 1, 1, v13);
        uint64_t v13 = v22;
      }
      unint64_t v21 = *(void *)(v13 + 16);
      unint64_t v20 = *(void *)(v13 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_2535228E0(v20 > 1, v21 + 1, 1, v13);
        uint64_t v13 = v23;
      }
      *(void *)(v13 + 16) = v21 + 1;
      v19((char *)(v13+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v21), v29, v6);
    }
    v12 += 4;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_25346777C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_253B0A210();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v8 = 4;
    uint64_t v24 = a3;
    uint64_t v25 = a2;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x25A269060](v8 - 4, a1);
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8);
      }
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v12 = sub_25346C7A0(v9, (SEL *)&selRef_predicateId);
      if (v13) {
        break;
      }

LABEL_25:
      ++v8;
      if (v11 == v6) {
        goto LABEL_26;
      }
    }
    if (v12 == a2 && v13 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {

LABEL_24:
        a2 = v25;
        goto LABEL_25;
      }
    }
    uint64_t v16 = sub_25346C7A0(v10, (SEL *)&selRef_objectID);
    uint64_t v18 = v17;

    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2535228AC();
        uint64_t v7 = v21;
      }
      unint64_t v19 = *(void *)(v7 + 16);
      if (v19 >= *(void *)(v7 + 24) >> 1)
      {
        sub_2535228AC();
        uint64_t v7 = v22;
      }
      *(void *)(v7 + 16) = v19 + 1;
      uint64_t v20 = v7 + 16 * v19;
      *(void *)(v20 + 32) = v16;
      *(void *)(v20 + 40) = v18;
      a3 = v24;
    }
    goto LABEL_24;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_253467974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_release();
    uint64_t v6 = MEMORY[0x263F8EE78];
    goto LABEL_16;
  }
  uint64_t v5 = swift_bridgeObjectRetain() + 40;
  uint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v7 = sub_253B095E0();
    uint64_t v9 = v8;
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_253469C7C(v7, v9);
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = sub_25353CEDC(v11);
    uint64_t v13 = sub_25353CEDC(v10);
    uint64_t v14 = sub_25346BBAC(v13, v12);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v14 + 16);
    swift_release();
    double v16 = (double)v15 / (double)*(uint64_t *)(a3 + 16);
    if ((~*(void *)&v16 & 0x7FF0000000000000) == 0 && (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    if (v16 <= 0.0) {
      goto LABEL_12;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_25352295C();
      uint64_t v6 = v19;
    }
    unint64_t v17 = *(void *)(v6 + 16);
    if (v17 >= *(void *)(v6 + 24) >> 1)
    {
      sub_25352295C();
      uint64_t v6 = v20;
    }
    *(void *)(v6 + 16) = v17 + 1;
    uint64_t v18 = v6 + 24 * v17;
    *(void *)(v18 + 32) = v7;
    *(void *)(v18 + 40) = v9;
    *(double *)(v18 + 48) = v16;
LABEL_13:
    v5 += 16;
    --v4;
  }
  while (v4);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_253467B5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_253A43F08();
    uint64_t v2 = v5;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v3;
  uint64_t result = sub_25346A408(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_253467BCC(uint64_t a1, uint64_t a2)
{
  return sub_253467BE4(a1, a2, type metadata accessor for ToolboxSearchOutput);
}

uint64_t sub_253467BE4(uint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t result = sub_25346C894(0, result, v5);
  if (v6) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = result;
  }
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v5 >= v7)
  {
    a3(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_253467C9C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_25346C894(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_253467D0C(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_253B0A210();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_25346C894(0, v3, v5);
  if (v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = result;
  }
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_253B0A210();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_253B0A210();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v11 + 1;
      sub_253B0A040();
      uint64_t v11 = v12;
    }
    while (v8 != v12);
  }
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_253B0A220();
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t sub_253467EBC(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_253B09830();
    uint64_t v1 = sub_253B09940();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

void sub_253467F7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_253467F94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_253467FAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_253467FC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  sub_253B0A500();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_9:
  swift_unknownObjectRelease();
  sub_25346CD04();
}

uint64_t sub_2534680B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_253B07B20();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_25346CB04();
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_269CDB4D0);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  uint64_t v76 = v10;
  uint64_t v11 = sub_253B079E0();
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CB04();
  uint64_t v13 = sub_253462A5C(&qword_269CDB3F0);
  uint64_t v14 = sub_25346CB4C(v13);
  MEMORY[0x270FA5388](v14);
  sub_25346CB04();
  uint64_t v73 = v15;
  sub_253B091F0();
  sub_253465998();
  MEMORY[0x270FA5388](v16);
  sub_25346CC6C();
  uint64_t v17 = sub_253462A5C(&qword_269CDB3F8);
  uint64_t v18 = sub_25346CB4C(v17);
  MEMORY[0x270FA5388](v18);
  sub_25346CB04();
  v75 = v19;
  uint64_t v20 = sub_253462A5C(&qword_26B248CC0);
  uint64_t v21 = sub_25346CB4C(v20);
  MEMORY[0x270FA5388](v21);
  sub_25346CC44();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_253B070B0();
  sub_253465998();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  sub_25346CC54();
  id v29 = objc_msgSend(a3, sel_facts);
  sub_25346C8E0(0, &qword_269CDB3E8);
  unint64_t v30 = sub_253B09A60();

  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_253B0A210();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_2534741E8(0, (v30 & 0xC000000000000001) == 0, v30);
    if ((v30 & 0xC000000000000001) != 0) {
      id v31 = (id)MEMORY[0x25A269060](0, v30);
    }
    else {
      id v31 = *(id *)(v30 + 32);
    }
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    id v33 = objc_msgSend(v32, sel_subjectId);

    sub_253B096E0();
    sub_253B07090();
    uint64_t v34 = sub_253B07080();
    uint64_t v36 = v35;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v4, v25);
    unint64_t v37 = (void *)sub_253469640(a3, v34, v36);
    swift_bridgeObjectRelease();
    if (v37[2])
    {
      uint64_t v38 = v37[5];
      uint64_t v72 = v37[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v80[0] = a1;
      v80[1] = a2;
      uint64_t v39 = sub_253B05630();
      sub_25346CC08(v24, v40, v41, v39);
      sub_25346C800();
      sub_253B09ED0();
      char v43 = v42;
      sub_25346CAA8(v24, &qword_26B248CC0);
      if (v43)
      {
        uint64_t v67 = sub_253B07B60();
        sub_25346CC08(a4, v68, v69, v67);
        swift_bridgeObjectRelease();
      }
      else
      {
        v80[0] = MEMORY[0x263F8EE80];
        id v44 = objc_msgSend(a3, sel_facts);
        unint64_t v45 = sub_253B09A60();

        sub_253468918(v45, v80);
        uint64_t v46 = swift_bridgeObjectRelease();
        MEMORY[0x270FA5388](v46);
        uint64_t v47 = swift_bridgeObjectRetain();
        sub_253468D64(v47, sub_25346C84C);
        swift_bridgeObjectRelease();
        sub_253B09010();
        uint64_t v48 = swift_allocBox();
        uint64_t v49 = (void *)swift_allocObject();
        uint64_t v50 = *(void *)(v74
                        + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId
                        + 8);
        v49[2] = *(void *)(v74
                           + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport23GlobalEntityMatcherShim_intelligencePlatformBundleId);
        v49[3] = v50;
        v49[4] = v72;
        v49[5] = v38;
        *uint64_t v5 = v49;
        sub_25346CCF8();
        v51();
        uint64_t v52 = sub_253B09330();
        sub_25346CC08(v73, v53, v54, v52);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_253B08FF0();
        uint64_t *v75 = v48;
        uint64_t v55 = sub_253B09120();
        sub_25346CAF4();
        sub_25346CCF8();
        v56();
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v75, 0, 1, v55);
        sub_253462A5C(&qword_269CDB408);
        uint64_t v57 = sub_253B07770();
        sub_25346CB34(v57);
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_253B22680;
        uint64_t v58 = sub_253B075C0();
        sub_25346CC08(v76, v59, v60, v58);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_253B079A0();
        sub_25346CCF8();
        v61();
        swift_bridgeObjectRetain();
        sub_253B076B0();
        sub_253B07B30();
        uint64_t v62 = sub_253B07B60();
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a4, 0, 1, v62);
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = sub_253B07B60();
      return sub_25346CC08(a4, v64, v65, v63);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v71 = sub_253B07B60();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a4, 1, 1, v71);
}

uint64_t sub_253468918(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = a2;
  uint64_t v5 = sub_253B09120();
  uint64_t v52 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v53 = (void *)((char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_253B0A210();
    if (v7) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  v45[0] = v3;
  unint64_t v55 = a1 & 0xC000000000000001;
  unsigned int v51 = *MEMORY[0x263F80488];
  int v50 = *MEMORY[0x263F804E8];
  unint64_t v48 = a1;
  uint64_t v49 = (void (**)(void))(v52 + 104);
  v45[1] = v52 + 32;
  uint64_t v46 = v7;
  uint64_t v8 = 4;
  uint64_t v47 = v5;
  while (1)
  {
    if (v55) {
      id v9 = (id)MEMORY[0x25A269060](v8 - 4, a1);
    }
    else {
      id v9 = *(id *)(a1 + 8 * v8);
    }
    uint64_t v3 = v9;
    uint64_t v10 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v56 = sub_25346C7A0(v9, (SEL *)&selRef_predicateId);
    if (v11) {
      break;
    }

LABEL_28:
    ++v8;
    if (v10 == v7) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = v11;
  uint64_t v13 = sub_25346C7A0(v3, (SEL *)&selRef_objectID);
  if (!v14)
  {
LABEL_27:

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  a1 = sub_253B090B0();
  uint64_t v17 = swift_allocBox();
  *uint64_t v18 = v15;
  v18[1] = v16;
  (*(void (**)(uint64_t *, void, unint64_t))(*(void *)(a1 - 8) + 104))(v18, v51, a1);
  *uint64_t v53 = v17;
  (*v49)();
  uint64_t v19 = v54;
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v57 = *v19;
  uint64_t v20 = v57;
  *uint64_t v19 = 0x8000000000000000;
  unint64_t v21 = sub_25396E0AC();
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v22 & 1) == 0;
  uint64_t v5 = v23 + v24;
  if (__OFADD__(v23, v24)) {
    goto LABEL_31;
  }
  a1 = v21;
  char v25 = v22;
  sub_253462A5C(&qword_269CDB418);
  char v26 = sub_253B0A190();
  uint64_t v27 = v57;
  if ((v26 & 1) == 0)
  {
LABEL_14:
    unint64_t v30 = v54;
    *uint64_t v54 = v27;
    swift_bridgeObjectRelease();
    id v31 = (void *)*v30;
    if ((v25 & 1) == 0)
    {
      v31[(a1 >> 6) + 8] |= 1 << a1;
      uint64_t v32 = (uint64_t *)(v31[6] + 16 * a1);
      *uint64_t v32 = v56;
      v32[1] = v12;
      *(void *)(v31[7] + 8 * a1) = MEMORY[0x263F8EE78];
      uint64_t v33 = v31[2];
      uint64_t v34 = v33 + 1;
      BOOL v35 = __OFADD__(v33, 1);
      swift_bridgeObjectRetain();
      if (v35) {
        goto LABEL_32;
      }
      v31[2] = v34;
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = v31[7];
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v36 + 8 * a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v36 + 8 * a1) = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_253522990(0, *(void *)(v37 + 16) + 1, 1, v37);
      uint64_t v37 = v42;
      *(void *)(v36 + 8 * a1) = v42;
    }
    unint64_t v40 = *(void *)(v37 + 16);
    unint64_t v39 = *(void *)(v37 + 24);
    if (v40 >= v39 >> 1)
    {
      sub_253522990(v39 > 1, v40 + 1, 1, v37);
      uint64_t v37 = v43;
      *(void *)(v36 + 8 * a1) = v43;
    }
    *(void *)(v37 + 16) = v40 + 1;
    unint64_t v41 = v37
        + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
        + *(void *)(v52 + 72) * v40;
    uint64_t v5 = v47;
    a1 = v48;
    uint64_t v7 = v46;
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v52 + 32))(v41, v53, v47);
    goto LABEL_27;
  }
  unint64_t v28 = sub_25396E0AC();
  if ((v25 & 1) == (v29 & 1))
  {
    a1 = v28;
    goto LABEL_14;
  }
  uint64_t result = sub_253B0A550();
  __break(1u);
  return result;
}

uint64_t sub_253468D64(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  sub_25397174C(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v19[4];
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v16, v17, v18);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }
  __break(1u);
  return result;
}

void sub_253468EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a1;
  v17[1] = a4;
  uint64_t v4 = sub_253B091F0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int64_t v7 = (void *)((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_253462A5C(&qword_269CDB3F8);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (void *)((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_253B08F70();
  uint64_t v11 = swift_allocBox();
  uint64_t v12 = sub_253B091B0();
  uint64_t v13 = swift_allocBox();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x263F80720], v12);
  *int64_t v7 = v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F80760], v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_253B08F40();
  uint64_t *v10 = v11;
  uint64_t v15 = *MEMORY[0x263F804A0];
  uint64_t v16 = sub_253B09120();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v10, v15, v16);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v16);
  sub_25346919C();
}

void sub_253469144()
{
}

void sub_253469170()
{
}

void sub_25346919C()
{
  sub_25346CCB0();
  uint64_t v22 = v0;
  uint64_t v23 = v1;
  v21[1] = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_253462A5C(v5);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_25346CC84();
  uint64_t v15 = v4(v14);
  sub_253465998();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v21 - v19;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v15) == 1)
  {
    sub_25346CAA8(v8, v6);
    sub_25346AF44();
    swift_bridgeObjectRelease();
    sub_25346CAA8(v13, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v20, v8, v15);
    sub_25346B2D4();
    swift_bridgeObjectRelease();
  }
  sub_253465A14();
}

void sub_253469304(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_253462A5C(&qword_269CDB428);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_25346CBDC();
  uint64_t v7 = sub_253B05870();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v13 = v12 - v11;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v7) == 1)
  {
    sub_25346CAA8(a1, &qword_269CDB428);
    sub_25346B0BC(v2);
    sub_253B05830();
    sub_25346CAF4();
    uint64_t v14 = sub_25346CBCC();
    v15(v14);
    sub_25346CAA8(v2, &qword_269CDB428);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v13, a1, v7);
    sub_25346B39C(v13, a2);
    sub_253B05830();
    sub_25346CAF4();
    (*(void (**)(uint64_t))(v16 + 8))(a2);
  }
  sub_25346CD04();
}

void sub_253469480(uint64_t a1)
{
  uint64_t v5 = sub_253462A5C(&qword_269CDB450);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25346CBDC();
  uint64_t v8 = type metadata accessor for AssistantSchema(v7);
  sub_253465998();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_25346CC6C();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v8) == 1)
  {
    sub_25346CAA8(a1, &qword_269CDB450);
    unint64_t v12 = sub_25396E650();
    if (v13)
    {
      unint64_t v14 = v12;
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *v1;
      *uint64_t v1 = 0x8000000000000000;
      sub_253462A5C(&qword_269CDB458);
      sub_253B0A190();
      sub_25346C96C(*(void *)(v16 + 56) + *(void *)(v10 + 72) * v14, v2);
      sub_253B0A1B0();
      *uint64_t v1 = v16;
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 1;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, v15, 1, v8);
    sub_25346CAA8(v2, &qword_269CDB450);
  }
  else
  {
    sub_25346C96C(a1, v3);
    sub_25346B41C();
  }
  sub_25346CD04();
}

uint64_t sub_253469640(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_msgSend(a1, sel_facts);
  sub_25346C8E0(0, &qword_269CDB3E8);
  unint64_t v6 = sub_253B09A60();

  swift_bridgeObjectRetain();
  uint64_t v7 = sub_25346777C(v6, a2, a3);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_2534696E4(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_253B070B0();
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388]();
  sub_25346CC54();
  sub_253B070A0();
  uint64_t v9 = sub_253B07080();
  uint64_t v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
  uint64_t v12 = sub_253469640(a1, v9, v11);
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_253467974(v12, v3, a2);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_253A8E834(v13);
  sub_253469814(v14);
  swift_bridgeObjectRelease();
  sub_25346CD04();
}

uint64_t sub_253469814(uint64_t a1)
{
  uint64_t result = sub_25397174C(a1, &v20);
  uint64_t v2 = v21;
  if (!v24)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_44;
    }
    int64_t v5 = (unint64_t)(v22 + 64) >> 6;
    if (v17 < v5)
    {
      unint64_t v18 = *(void *)(v21 + 8 * v17);
      int64_t v6 = v23 + 1;
      if (v18)
      {
LABEL_28:
        unint64_t v3 = (v18 - 1) & v18;
        unint64_t v4 = __clz(__rbit64(v18)) + (v6 << 6);
        goto LABEL_3;
      }
      int64_t v6 = v23 + 2;
      if (v23 + 2 < v5)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v6);
        if (v18) {
          goto LABEL_28;
        }
        int64_t v6 = v23 + 3;
        if (v23 + 3 < v5)
        {
          unint64_t v18 = *(void *)(v21 + 8 * v6);
          if (v18) {
            goto LABEL_28;
          }
          int64_t v6 = v23 + 4;
          if (v23 + 4 < v5)
          {
            unint64_t v18 = *(void *)(v21 + 8 * v6);
            if (v18) {
              goto LABEL_28;
            }
            int64_t v6 = v23 + 5;
            if (v23 + 5 < v5)
            {
              unint64_t v18 = *(void *)(v21 + 8 * v6);
              if (!v18)
              {
                int64_t v19 = v23 + 6;
                do
                {
                  if (v19 >= v5) {
                    goto LABEL_41;
                  }
                  unint64_t v18 = *(void *)(v21 + 8 * v19++);
                }
                while (!v18);
                int64_t v6 = v19 - 1;
              }
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRetain();
    sub_25346C71C((uint64_t)&v20);
    return 0;
  }
  unint64_t v3 = (v24 - 1) & v24;
  unint64_t v4 = __clz(__rbit64(v24)) | (v23 << 6);
  int64_t v5 = (unint64_t)(v22 + 64) >> 6;
  int64_t v6 = v23;
LABEL_3:
  uint64_t v7 = v20;
  uint64_t v8 = *(void *)(*(void *)(v20 + 48) + 16 * v4);
  double v9 = *(double *)(*(void *)(v20 + 56) + 8 * v4);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v3)
    {
      unint64_t v10 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v12 >= v5) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v5) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v5) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v5) {
            goto LABEL_24;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v5) {
              goto LABEL_24;
            }
            unint64_t v13 = *(void *)(v2 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v5)
              {
                unint64_t v13 = *(void *)(v2 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_24:
              swift_release();
              return v8;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v3 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v6 = v14;
LABEL_22:
    double v16 = *(double *)(*(void *)(v7 + 56) + 8 * v11);
    if (v9 < v16)
    {
      uint64_t v8 = *(void *)(*(void *)(v7 + 48) + 16 * v11);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      double v9 = v16;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

id sub_253469AA0()
{
  v9[2] = *(id *)MEMORY[0x263EF8340];
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F4E908]), sel_init);
  sub_253B0A000();
  swift_bridgeObjectRelease();
  v9[1] = (id)0x8000000253B0BB80;
  sub_253B09860();
  sub_253B09860();
  id v1 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1000);
  sub_25346C8E0(0, (unint64_t *)&qword_269CDB420);
  uint64_t v2 = (void *)sub_253B09DC0();
  id v3 = objc_allocWithZone(MEMORY[0x263F4E8B8]);
  id v4 = sub_25346A360(0xD00000000000001ELL, 0x8000000253B0BB80, 0xD000000000000011, 0x8000000253B0BBA0, v1, v2);
  v9[0] = 0;
  id v5 = objc_msgSend(v0, sel_executeKGQ_error_, v4, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    sub_253B052D0();

    swift_willThrow();
  }
  return v5;
}

unint64_t sub_253469C7C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F14040]), sel_initWithUnit_, 0);
  sub_25346C748(a1, a2, v4);
  uint64_t v5 = sub_253B09D40();
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_2534671A0(v5);
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t sub_253469D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2534680B8(*(void *)(v2 + 24), *(void *)(v2 + 32), a1, a2);
}

uint64_t GlobalEntityMatcherShim.deinit()
{
  sub_253B07B20();
  sub_25346CAF4();
  uint64_t v1 = sub_25346CBCC();
  v2(v1);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GlobalEntityMatcherShim.__deallocating_deinit()
{
  sub_253B07B20();
  sub_25346CAF4();
  uint64_t v1 = sub_25346CBCC();
  v2(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_253469E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_253466DF0(a1);
}

uint64_t sub_253469EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_253469F58;
  return sub_253466E5C(a1, a2);
}

uint64_t sub_253469F58()
{
  sub_25346CB18();
  uint64_t v6 = *v2;
  uint64_t v3 = swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v6 + 8);
  if (!v1) {
    uint64_t v3 = v0;
  }
  return v4(v3);
}

uint64_t sub_25346A030()
{
  return type metadata accessor for GlobalEntityMatcherShim();
}

uint64_t type metadata accessor for GlobalEntityMatcherShim()
{
  uint64_t result = qword_26B2493C8;
  if (!qword_26B2493C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25346A080()
{
  uint64_t result = sub_253B07B20();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for GlobalEntityMatcherShim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GlobalEntityMatcherShim);
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 120))(a1, a2 & 1);
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.getMatcherType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of GlobalEntityMatcherShim.matchEntitySpans(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_25346A28C;
  return v8(a1, a2);
}

uint64_t sub_25346A28C()
{
  sub_25346CB18();
  uint64_t v4 = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v4 + 8);
  return v2(v0);
}

id sub_25346A360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  unint64_t v10 = (void *)sub_253B096D0();
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v6, sel_initWithKGQ_query_limit_offset_, v9, v10, a5, a6);

  return v11;
}

uint64_t sub_25346A408(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_25346AA30(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t result = sub_2539DF6D8(v3 / 2);
  v95 = a1;
  uint64_t v96 = result;
  v100 = v6;
  uint64_t v98 = v3;
  if (v3 <= 0)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v38 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_90:
    if (v38 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v98 >= -1)
      {
        *(void *)(v96 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v87 = *v95;
    while (1)
    {
      unint64_t v88 = v38 - 2;
      if (v38 < 2) {
        break;
      }
      if (!v87) {
        goto LABEL_133;
      }
      uint64_t v89 = *(void *)(v9 + 32 + 16 * v88);
      uint64_t v90 = *(void *)(v9 + 32 + 16 * (v38 - 1) + 8);
      uint64_t result = sub_25346AAAC((char *)(v87 + 32 * v89), (char *)(v87 + 32 * *(void *)(v9 + 32 + 16 * (v38 - 1))), v87 + 32 * v90, v100);
      if (v1) {
        goto LABEL_86;
      }
      if (v90 < v89) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v9 = result;
      }
      if (v88 >= *(void *)(v9 + 16)) {
        goto LABEL_120;
      }
      v91 = (void *)(v9 + 32 + 16 * v88);
      void *v91 = v89;
      v91[1] = v90;
      unint64_t v92 = *(void *)(v9 + 16);
      if (v38 > v92) {
        goto LABEL_121;
      }
      uint64_t result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v38 - 1)), (const void *)(v9 + 32 + 16 * v38), 16 * (v92 - v38));
      *(void *)(v9 + 16) = v92 - 1;
      unint64_t v38 = v92 - 1;
      if (v92 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v93 = *a1 + 16;
  uint64_t v94 = *a1 + 88;
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v97 = v5;
  uint64_t v99 = *a1;
  while (1)
  {
    uint64_t v10 = v7++;
    if (v7 < v3)
    {
      double v11 = *(double *)(v8 + 32 * v7 + 24);
      double v12 = *(double *)(v8 + 32 * v10 + 24);
      uint64_t v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        unint64_t v13 = (double *)(v94 + 32 * v10);
        double v14 = v11;
        while (1)
        {
          double v15 = v14;
          double v14 = *v13;
          if (v12 < v11 == v15 >= *v13) {
            break;
          }
          ++v7;
          v13 += 4;
          if (v7 >= v3)
          {
            uint64_t v7 = v3;
            break;
          }
        }
      }
      if (v12 < v11)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          uint64_t v16 = 32 * v7;
          uint64_t v17 = 32 * v10;
          uint64_t v18 = v7;
          uint64_t v19 = v10;
          do
          {
            if (v19 != --v18)
            {
              if (!v8) {
                goto LABEL_132;
              }
              uint64_t v20 = (_OWORD *)(v8 + v17);
              uint64_t v21 = v8 + v16;
              long long v22 = *(_OWORD *)(v8 + v17);
              uint64_t v23 = *(void *)(v8 + v17 + 16);
              uint64_t v24 = *(void *)(v8 + v17 + 24);
              long long v25 = *(_OWORD *)(v8 + v16 - 16);
              _OWORD *v20 = *(_OWORD *)(v8 + v16 - 32);
              v20[1] = v25;
              *(_OWORD *)(v21 - 32) = v22;
              *(void *)(v21 - 16) = v23;
              *(void *)(v21 - 8) = v24;
            }
            ++v19;
            v16 -= 32;
            v17 += 32;
          }
          while (v19 < v18);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        uint64_t v26 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v26 >= v3) {
          uint64_t v26 = v3;
        }
        if (v26 < v10) {
          goto LABEL_128;
        }
        if (v7 != v26)
        {
          uint64_t v27 = v93 + 32 * v7;
          do
          {
            double v28 = *(double *)(v8 + 32 * v7 + 24);
            uint64_t v29 = v10;
            uint64_t v30 = v27;
            do
            {
              if (*(double *)(v30 - 24) >= v28) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              id v31 = (_OWORD *)(v30 - 16);
              long long v33 = *(_OWORD *)(v30 - 48);
              long long v32 = *(_OWORD *)(v30 - 32);
              *(void *)(v30 - 32) = *(void *)v30;
              v30 -= 32;
              uint64_t v34 = *(void *)(v30 + 16);
              uint64_t v35 = *(void *)(v30 + 24);
              *id v31 = v33;
              v31[1] = v32;
              *(void *)(v30 - 16) = v34;
              *(void *)(v30 - 8) = v35;
              *(double *)(v30 + 8) = v28;
              ++v29;
            }
            while (v7 != v29);
            ++v7;
            v27 += 32;
          }
          while (v7 != v26);
          uint64_t v7 = v26;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
      uint64_t v9 = result;
    }
    unint64_t v37 = *(void *)(v9 + 16);
    unint64_t v36 = *(void *)(v9 + 24);
    unint64_t v38 = v37 + 1;
    uint64_t v8 = v99;
    if (v37 >= v36 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v36 > 1), v37 + 1, 1, (char *)v9);
      uint64_t v8 = v99;
      uint64_t v9 = result;
    }
    *(void *)(v9 + 16) = v38;
    uint64_t v39 = v9 + 32;
    unint64_t v40 = (uint64_t *)(v9 + 32 + 16 * v37);
    *unint64_t v40 = v10;
    v40[1] = v7;
    if (v37) {
      break;
    }
    unint64_t v38 = 1;
LABEL_81:
    uint64_t v5 = v97;
    uint64_t v3 = v98;
    if (v7 >= v98) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v41 = v38 - 1;
    if (v38 >= 4)
    {
      unint64_t v46 = v39 + 16 * v38;
      uint64_t v47 = *(void *)(v46 - 64);
      uint64_t v48 = *(void *)(v46 - 56);
      BOOL v52 = __OFSUB__(v48, v47);
      uint64_t v49 = v48 - v47;
      if (v52) {
        goto LABEL_107;
      }
      uint64_t v51 = *(void *)(v46 - 48);
      uint64_t v50 = *(void *)(v46 - 40);
      BOOL v52 = __OFSUB__(v50, v51);
      uint64_t v44 = v50 - v51;
      char v45 = v52;
      if (v52) {
        goto LABEL_108;
      }
      unint64_t v53 = v38 - 2;
      uint64_t v54 = (uint64_t *)(v39 + 16 * (v38 - 2));
      uint64_t v56 = *v54;
      uint64_t v55 = v54[1];
      BOOL v52 = __OFSUB__(v55, v56);
      uint64_t v57 = v55 - v56;
      if (v52) {
        goto LABEL_109;
      }
      BOOL v52 = __OFADD__(v44, v57);
      uint64_t v58 = v44 + v57;
      if (v52) {
        goto LABEL_111;
      }
      if (v58 >= v49)
      {
        uint64_t v76 = (uint64_t *)(v39 + 16 * v41);
        uint64_t v78 = *v76;
        uint64_t v77 = v76[1];
        BOOL v52 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v52) {
          goto LABEL_117;
        }
        BOOL v69 = v44 < v79;
        goto LABEL_70;
      }
    }
    else
    {
      if (v38 != 3)
      {
        uint64_t v70 = *(void *)(v9 + 32);
        uint64_t v71 = *(void *)(v9 + 40);
        BOOL v52 = __OFSUB__(v71, v70);
        uint64_t v63 = v71 - v70;
        char v64 = v52;
        goto LABEL_64;
      }
      uint64_t v43 = *(void *)(v9 + 32);
      uint64_t v42 = *(void *)(v9 + 40);
      BOOL v52 = __OFSUB__(v42, v43);
      uint64_t v44 = v42 - v43;
      char v45 = v52;
    }
    if (v45) {
      goto LABEL_110;
    }
    unint64_t v53 = v38 - 2;
    uint64_t v59 = (uint64_t *)(v39 + 16 * (v38 - 2));
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    BOOL v62 = __OFSUB__(v60, v61);
    uint64_t v63 = v60 - v61;
    char v64 = v62;
    if (v62) {
      goto LABEL_112;
    }
    uint64_t v65 = (uint64_t *)(v39 + 16 * v41);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v52 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v52) {
      goto LABEL_114;
    }
    if (__OFADD__(v63, v68)) {
      goto LABEL_116;
    }
    if (v63 + v68 >= v44)
    {
      BOOL v69 = v44 < v68;
LABEL_70:
      if (v69) {
        unint64_t v41 = v53;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v64) {
      goto LABEL_113;
    }
    uint64_t v72 = (uint64_t *)(v39 + 16 * v41);
    uint64_t v74 = *v72;
    uint64_t v73 = v72[1];
    BOOL v52 = __OFSUB__(v73, v74);
    uint64_t v75 = v73 - v74;
    if (v52) {
      goto LABEL_115;
    }
    if (v75 < v63) {
      goto LABEL_81;
    }
LABEL_72:
    uint64_t v80 = v9;
    unint64_t v81 = v41 - 1;
    if (v41 - 1 >= v38)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    v82 = (uint64_t *)(v39 + 16 * v81);
    uint64_t v83 = *v82;
    v84 = (void *)(v39 + 16 * v41);
    uint64_t v85 = v84[1];
    uint64_t result = sub_25346AAAC((char *)(v8 + 32 * *v82), (char *)(v8 + 32 * *v84), v8 + 32 * v85, v100);
    if (v1) {
      break;
    }
    if (v85 < v83) {
      goto LABEL_104;
    }
    if (v41 > *(void *)(v80 + 16)) {
      goto LABEL_105;
    }
    uint64_t *v82 = v83;
    *(void *)(v39 + 16 * v81 + 8) = v85;
    unint64_t v86 = *(void *)(v80 + 16);
    if (v41 >= v86) {
      goto LABEL_106;
    }
    uint64_t v9 = v80;
    unint64_t v38 = v86 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v39 + 16 * v41), v84 + 2, 16 * (v86 - 1 - v41));
    *(void *)(v80 + 16) = v86 - 1;
    uint64_t v8 = v99;
    if (v86 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v98 < -1) {
    goto LABEL_125;
  }
  *(void *)(v96 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25346AA30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 32 * a3 + 16;
    while (2)
    {
      double v6 = *(double *)(v4 + 32 * a3 + 24);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (*(double *)(v8 - 24) >= v6) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = (_OWORD *)(v8 - 16);
        long long v11 = *(_OWORD *)(v8 - 48);
        long long v10 = *(_OWORD *)(v8 - 32);
        *(void *)(v8 - 32) = *(void *)v8;
        v8 -= 32;
        uint64_t v12 = *(void *)(v8 + 16);
        uint64_t v13 = *(void *)(v8 + 24);
        _OWORD *v9 = v11;
        v9[1] = v10;
        *(void *)(v8 - 16) = v12;
        *(void *)(v8 - 8) = v13;
        *(double *)(v8 + 8) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 32;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_25346AAAC(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  double v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 32;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 32;
  if (v9 >= v11)
  {
    sub_253524FC8(a2, (uint64_t)(a3 - (void)a2) / 32, a4);
    unint64_t v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32) {
      goto LABEL_41;
    }
    uint64_t v19 = (char *)(a3 - 32);
    while (1)
    {
      uint64_t v20 = v19 + 32;
      if (*((double *)v6 - 1) >= *(double *)(v12 - 8))
      {
        uint64_t v21 = (char *)(v12 - 32);
        BOOL v23 = v20 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 32;
        if (!v23) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v21 = v6 - 32;
        BOOL v22 = v20 != v6 || v19 >= v6;
        v6 -= 32;
        if (!v22) {
          goto LABEL_37;
        }
      }
      long long v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      *((_OWORD *)v19 + 1) = v24;
LABEL_37:
      v19 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_41;
      }
    }
  }
  sub_253524FC8(a1, (a2 - a1) / 32, a4);
  unint64_t v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    do
    {
      if (*((double *)v4 + 3) >= *((double *)v6 + 3))
      {
        BOOL v13 = v7 == v4;
        double v14 = v4;
        v4 += 32;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v13 = v7 == v6;
        double v14 = v6;
        v6 += 32;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }
      long long v17 = *((_OWORD *)v14 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v14;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 32;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  double v6 = v7;
LABEL_41:
  sub_253524FC8(v4, (uint64_t)(v12 - (void)v4) / 32, v6);
  return 1;
}

uint64_t sub_25346AC38(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_25346CBA0(a1, a7 + 8 * (a1 >> 6));
  uint64_t v9 = v8[6] + 32 * result;
  *(void *)uint64_t v9 = v10;
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 16) = v12;
  *(unsigned char *)(v9 + 24) = v13;
  *(void *)(v8[7] + 8 * result) = v14;
  uint64_t v15 = v8[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    v8[2] = v17;
  }
  return result;
}

uint64_t sub_25346AC80(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_25346CBA0(a1, a5 + 8 * (a1 >> 6));
  uint64_t v10 = (void *)(*(void *)(v9 + 48) + 16 * v8);
  void *v10 = v11;
  v10[1] = v12;
  uint64_t v13 = *(void *)(v9 + 56);
  uint64_t v14 = sub_25346CC84();
  v15(v14);
  sub_25346CAF4();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v16 + 32))(v13 + *(void *)(v16 + 72) * a1, a4);
  uint64_t v18 = *(void *)(a5 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v20;
  }
  return result;
}

uint64_t sub_25346AD18(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_253B05390();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_25346ADD0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_253B05830();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_253B05870();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_25346AEC4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_25346CBA0(a1, a4 + 8 * (a1 >> 6));
  *(void *)(*(void *)(v8 + 48) + 8 * v7) = v9;
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = type metadata accessor for AssistantSchema(0);
  sub_25346CB4C(v11);
  uint64_t result = sub_25346C96C(a3, v10 + *(void *)(v12 + 72) * a1);
  uint64_t v14 = *(void *)(a4 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(a4 + 16) = v16;
  }
  return result;
}

uint64_t sub_25346AF44()
{
  sub_25346CCB0();
  uint64_t v22 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  double v6 = v0;
  uint64_t v8 = v7;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_25396E0AC();
  char v11 = v10;
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v6;
    uint64_t *v6 = 0x8000000000000000;
    sub_253462A5C(v5);
    sub_253B0A190();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v21 + 56);
    uint64_t v13 = sub_25346CC84();
    uint64_t v14 = v3(v13);
    sub_25346CAF4();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(v8, v12 + *(void *)(v15 + 72) * v9, v14);
    sub_253B0A1B0();
    uint64_t *v6 = v21;
    swift_bridgeObjectRelease();
    uint64_t v16 = v8;
    uint64_t v17 = 0;
    uint64_t v18 = v14;
  }
  else
  {
    uint64_t v19 = sub_25346CC84();
    uint64_t v18 = v3(v19);
    uint64_t v16 = v8;
    uint64_t v17 = 1;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, v17, 1, v18);
}

uint64_t sub_25346B0BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  sub_25396E5A0();
  uint64_t v5 = v4;
  char v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_253462A5C(&qword_269CDB430);
    sub_253B0A190();
    uint64_t v8 = *(void *)(v16 + 48);
    uint64_t v9 = sub_253B05830();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v5, v9);
    uint64_t v10 = *(void *)(v16 + 56);
    uint64_t v11 = sub_253B05870();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10 + *(void *)(*(void *)(v11 - 8) + 72) * v5, v11);
    sub_25346C91C();
    sub_253B0A1B0();
    *uint64_t v2 = v16;
    swift_bridgeObjectRelease();
    uint64_t v12 = a1;
    uint64_t v13 = 0;
    uint64_t v14 = v11;
  }
  else
  {
    uint64_t v14 = sub_253B05870();
    uint64_t v12 = a1;
    uint64_t v13 = 1;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v12, v13, 1, v14);
}

uint64_t sub_25346B264()
{
  sub_25346CCB0();
  uint64_t v12 = v0;
  sub_25346CC90();
  sub_25346CB58();
  sub_25346B468();
  sub_25346CBF8(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25346B2D4()
{
  sub_25346CCB0();
  uint64_t v12 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_25346CC90();
  uint64_t v6 = sub_25346CB58();
  sub_25346B590(v6, v7, v8, v9, v5, v3);
  *uint64_t v0 = v11;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25346B350()
{
  sub_25346CCC4();
  uint64_t v0 = sub_25346CB7C();
  uint64_t v2 = sub_25346B70C(v0, v1);
  sub_25346CBF8(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25346B39C(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_25346B89C(a1, a2);
  *uint64_t v2 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25346B41C()
{
  sub_25346CCC4();
  sub_25346CB7C();
  uint64_t v0 = sub_25346BA8C();
  sub_25346CBF8(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  return swift_bridgeObjectRelease();
}

void sub_25346B468()
{
  sub_25346CCB0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_25396E2C8(v7, v5, v3, v1);
  sub_25346CBB8();
  if (v13)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v11;
  char v15 = v12;
  sub_253462A5C(&qword_269CDB470);
  if ((sub_253B0A190() & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v16 = sub_25346CCE4();
  unint64_t v20 = sub_25396E2C8(v16, v17, v18, v19);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_11:
    sub_253B0A550();
    __break(1u);
    return;
  }
  unint64_t v14 = v20;
LABEL_5:
  uint64_t v22 = *v0;
  if (v15)
  {
    uint64_t v23 = *(void *)(v22 + 56);
    sub_25346CA4C(*(void *)(v23 + 8 * v14));
    *(void *)(v23 + 8 * v14) = v10;
    sub_253465A14();
  }
  else
  {
    sub_25346AC38(v14, v8, v6, v4, v2, v10, v22);
    sub_25346CCE4();
    sub_253465A14();
    sub_25346CA34(v24, v25, v26, v27);
  }
}

uint64_t sub_25346B590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  sub_25396E0AC();
  sub_25346CBB8();
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v15 = v12;
  char v16 = v13;
  sub_253462A5C(a5);
  if ((sub_253B0A190() & 1) == 0) {
    goto LABEL_5;
  }
  unint64_t v17 = sub_25396E0AC();
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_13:
    uint64_t result = sub_253B0A550();
    __break(1u);
    return result;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = *v6;
  if (v16)
  {
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = sub_25346CC84();
    a6(v21);
    sub_25346CAF4();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40);
    uint64_t v25 = v24;
    uint64_t v26 = v20 + *(void *)(v22 + 72) * v15;
    return v23(v26, a1, v25);
  }
  else
  {
    sub_25346AC80(v15, a2, a3, a1, v19);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_25346B70C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)v2;
  uint64_t v6 = sub_253B05390();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)*v2;
  sub_25396E4F0();
  if (__OFADD__(v10[2], (v12 & 1) == 0))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v13 = v11;
  char v14 = v12;
  sub_253462A5C(&qword_269CDB448);
  if ((sub_253B0A190() & 1) == 0) {
    goto LABEL_5;
  }
  sub_25396E4F0();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_10:
    uint64_t result = sub_253B0A550();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v3;
  if (v14)
  {
    uint64_t v18 = v17[7];
    uint64_t result = swift_release();
    *(void *)(v18 + 8 * v13) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    return sub_25346AD18(v13, (uint64_t)v9, a1, v17);
  }
  return result;
}

uint64_t sub_25346B89C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)v2;
  uint64_t v6 = sub_253B05830();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)*v2;
  sub_25396E5A0();
  if (__OFADD__(v10[2], (v12 & 1) == 0))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v13 = v11;
  char v14 = v12;
  sub_253462A5C(&qword_269CDB430);
  if ((sub_253B0A190() & 1) == 0) {
    goto LABEL_5;
  }
  sub_25396E5A0();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_11:
    uint64_t result = sub_253B0A550();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v3;
  if (v14)
  {
    uint64_t v18 = v17[7];
    uint64_t v19 = sub_253B05870();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 40);
    uint64_t v22 = v19;
    uint64_t v23 = v18 + *(void *)(v20 + 72) * v13;
    return v21(v23, a1, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    return sub_25346ADD0(v13, (uint64_t)v9, a1, v17);
  }
}

uint64_t sub_25346BA8C()
{
  sub_25396E650();
  sub_25346CBB8();
  if (v1)
  {
    __break(1u);
LABEL_12:
    uint64_t result = sub_253B0A550();
    __break(1u);
    return result;
  }
  char v2 = v0;
  sub_253462A5C(&qword_269CDB458);
  if (sub_253B0A190())
  {
    sub_25396E650();
    if ((v2 & 1) != (v3 & 1)) {
      goto LABEL_12;
    }
  }
  if (v2)
  {
    uint64_t v4 = type metadata accessor for AssistantSchema(0);
    sub_25346CB4C(v4);
    sub_25346CD04();
    return sub_25346C9D0(v5, v6);
  }
  else
  {
    sub_25346CD04();
    return sub_25346AEC4(v9, v10, v11, v12);
  }
}

uint64_t sub_25346BBAC(uint64_t a1, uint64_t a2)
{
  v7[1] = *MEMORY[0x263EF8340];
  char v2 = *(unsigned char *)(a2 + 32);
  unint64_t v3 = (unint64_t)((1 << v2) + 63) >> 6;
  if (v2 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    MEMORY[0x270FA5388]();
    sub_253AE5AC4(0, v3, (void *)((char *)v7 - ((8 * v3 + 15) & 0x3FFFFFFFFFFFFFF0)));
    uint64_t v4 = sub_25346CC20();
    swift_release();
    if (!v3) {
      return v4;
    }
    swift_willThrow();

    __break(1u);
  }
  uint64_t v5 = (void *)swift_slowAlloc();
  sub_253AE5AC4(0, v3, v5);
  uint64_t v4 = sub_25346CC20();
  swift_release();
  if (!v3)
  {
    MEMORY[0x25A269E60](v5, -1, -1);
    return v4;
  }

  uint64_t result = MEMORY[0x25A269E60](v5, -1, -1);
  __break(1u);
  return result;
}

uint64_t sub_25346BD18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) >= *(void *)(a3 + 16))
  {
    int64_t v34 = 0;
    uint64_t v60 = a3 + 56;
    uint64_t v61 = 0;
    uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
    if (v35 < 64) {
      uint64_t v36 = ~(-1 << v35);
    }
    else {
      uint64_t v36 = -1;
    }
    unint64_t v37 = v36 & *(void *)(a3 + 56);
    int64_t v63 = (unint64_t)(v35 + 63) >> 6;
    uint64_t v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          unint64_t v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          unint64_t v40 = v39 | (v34 << 6);
        }
        else
        {
          int64_t v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63) {
            goto LABEL_79;
          }
          unint64_t v42 = *(void *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            int64_t v34 = v41 + 1;
            if (v41 + 1 >= v63) {
              goto LABEL_79;
            }
            unint64_t v42 = *(void *)(v60 + 8 * v34);
            if (!v42)
            {
              int64_t v34 = v41 + 2;
              if (v41 + 2 >= v63) {
                goto LABEL_79;
              }
              unint64_t v42 = *(void *)(v60 + 8 * v34);
              if (!v42)
              {
                int64_t v43 = v41 + 3;
                if (v43 >= v63) {
                  goto LABEL_79;
                }
                unint64_t v42 = *(void *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    int64_t v34 = v43 + 1;
                    if (__OFADD__(v43, 1)) {
                      goto LABEL_85;
                    }
                    if (v34 >= v63) {
                      break;
                    }
                    unint64_t v42 = *(void *)(v60 + 8 * v34);
                    ++v43;
                    if (v42) {
                      goto LABEL_61;
                    }
                  }
LABEL_79:
                  swift_retain();
                  return sub_25346C258(v57, a2, v61, v5);
                }
                int64_t v34 = v43;
              }
            }
          }
LABEL_61:
          unint64_t v37 = (v42 - 1) & v42;
          unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
        uint64_t v46 = *v44;
        uint64_t v45 = v44[1];
        sub_253B0A5F0();
        swift_bridgeObjectRetain();
        sub_253B09630();
        uint64_t v47 = sub_253B0A630();
        uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
        unint64_t v49 = v47 & ~v48;
        if ((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49)) {
          break;
        }
LABEL_78:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v50 = *(void *)(a4 + 48);
      uint64_t v51 = (void *)(v50 + 16 * v49);
      BOOL v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (sub_253B0A4C0() & 1) == 0)
      {
        uint64_t v53 = ~v48;
        do
        {
          unint64_t v49 = (v49 + 1) & v53;
          if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
            goto LABEL_78;
          }
          uint64_t v54 = (void *)(v50 + 16 * v49);
          BOOL v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (sub_253B0A4C0() & 1) == 0);
      }
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_83;
      }
    }
  }
  int64_t v6 = 0;
  uint64_t v58 = a4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  int64_t v59 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v61 = 0;
  uint64_t v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v62 = v6;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v13);
    int64_t v15 = v6 + 1;
    if (!v14)
    {
      int64_t v15 = v6 + 2;
      if (v6 + 2 >= v59) {
        goto LABEL_79;
      }
      unint64_t v14 = *(void *)(v58 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 3;
        if (v6 + 3 >= v59) {
          goto LABEL_79;
        }
        unint64_t v14 = *(void *)(v58 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v62 = v15;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_253B09630();
    uint64_t v20 = sub_253B0A630();
    uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    uint64_t v24 = 1 << v22;
    if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) == 0) {
      goto LABEL_36;
    }
    uint64_t v25 = *(void *)(a3 + 48);
    uint64_t v26 = (void *)(v25 + 16 * v22);
    BOOL v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (sub_253B0A4C0() & 1) != 0)
    {
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v28 = ~v21;
      for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
      {
        unint64_t v30 = i & v28;
        if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
          break;
        }
        id v31 = (void *)(v25 + 16 * v30);
        BOOL v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (sub_253B0A4C0() & 1) != 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v23 = v30 >> 6;
          uint64_t v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v6 = v62;
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  uint64_t v16 = v6 + 4;
  if (v6 + 4 >= v59) {
    goto LABEL_79;
  }
  unint64_t v14 = *(void *)(v58 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v59) {
      goto LABEL_79;
    }
    unint64_t v14 = *(void *)(v58 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t sub_25346C258(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_35:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_253462A5C(&qword_269CDB3E0);
  uint64_t result = sub_253B09FC0();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_25346C4E8()
{
  sub_25346CCB0();
  uint64_t v4 = v3;
  if (!v2)
  {
LABEL_35:
    swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = v2;
  if (*(void *)(v3 + 16) == v2)
  {
LABEL_36:
    sub_253465A14();
    return;
  }
  uint64_t v6 = v1;
  uint64_t v7 = v0;
  sub_253462A5C(&qword_269CDB440);
  uint64_t v8 = sub_253B09FC0();
  uint64_t v9 = v8;
  if (v6 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v7;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v8 + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= v6) {
      goto LABEL_35;
    }
    unint64_t v16 = v7[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v6) {
        goto LABEL_35;
      }
      unint64_t v16 = v7[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v6) {
          goto LABEL_35;
        }
        unint64_t v16 = v7[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t v19 = sub_253B0A5E0();
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v9 + 48) + 8 * v23) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= v6) {
    goto LABEL_35;
  }
  unint64_t v16 = v7[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_35;
    }
    unint64_t v16 = v7[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_25346C71C(uint64_t a1)
{
  return a1;
}

void sub_25346C748(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)sub_253B096D0();
  objc_msgSend(a3, sel_setString_, v4);
}

uint64_t sub_25346C7A0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_253B096E0();

  return v4;
}

unint64_t sub_25346C800()
{
  unint64_t result = qword_269CDB400;
  if (!qword_269CDB400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB400);
  }
  return result;
}

void sub_25346C84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253468EEC(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_25346C854()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25346C894(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_25346C8E0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_25346C91C()
{
  unint64_t result = qword_269CDB438;
  if (!qword_269CDB438)
  {
    sub_253B05830();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB438);
  }
  return result;
}

uint64_t sub_25346C96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssistantSchema(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25346C9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssistantSchema(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_25346CA34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_25346CA4C(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25346CAA8(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_25346CAF4();
  uint64_t v3 = sub_25346CBCC();
  v4(v3);
  return a1;
}

uint64_t sub_25346CB34(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_25346CB4C(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_25346CB58()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_25346CB7C()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_25346CBA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t sub_25346CBCC()
{
  return v0;
}

uint64_t sub_25346CBDC()
{
  return 0;
}

uint64_t sub_25346CBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_25346CC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 1, 1, a4);
}

uint64_t sub_25346CC20()
{
  return sub_25346BD18(v3, v2, v0, v1);
}

uint64_t sub_25346CC84()
{
  return 0;
}

uint64_t sub_25346CC90()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_25346CCC4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_25346CCE4()
{
  return v0;
}

uint64_t sub_25346CD18(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v5 = sub_253462A5C(&qword_269CDB4F0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v24 = *(void *)(v27 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v27);
  uint64_t v26 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v23 = (uint64_t)&v21 - v10;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = sub_253B0A210())
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    unint64_t v25 = a3 & 0xC000000000000001;
    uint64_t v13 = 4;
    unint64_t v22 = a3;
    while (1)
    {
      id v14 = v25 ? (id)MEMORY[0x25A269060](v13 - 4, a3) : *(id *)(a3 + 8 * v13);
      uint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1)) {
        break;
      }
      id v29 = v14;
      v28(&v29);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12;
      }

      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v27) == 1)
      {
        sub_253472458((uint64_t)v7, &qword_269CDB4F0);
      }
      else
      {
        uint64_t v17 = v23;
        sub_2534720AC((uint64_t)v7, v23, (uint64_t *)&unk_269CDB490);
        sub_2534720AC(v17, v26, (uint64_t *)&unk_269CDB490);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = sub_253522BC0(0, *(void *)(v12 + 16) + 1, 1, v12);
        }
        unint64_t v19 = *(void *)(v12 + 16);
        unint64_t v18 = *(void *)(v12 + 24);
        if (v19 >= v18 >> 1) {
          uint64_t v12 = sub_253522BC0(v18 > 1, v19 + 1, 1, v12);
        }
        *(void *)(v12 + 16) = v19 + 1;
        sub_2534720AC(v26, v12+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v19, (uint64_t *)&unk_269CDB490);
        a3 = v22;
      }
      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_25346D040(uint64_t *a1)
{
  uint64_t v2 = *(void *)(sub_253462A5C((uint64_t *)&unk_269CDB490) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_2539717D8();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v7[1] = v5;
  uint64_t result = sub_253470510(v7);
  *a1 = v3;
  return result;
}

uint64_t sub_25346D0EC(uint64_t a1)
{
  return sub_25346D110(a1);
}

uint64_t sub_25346D110(uint64_t a1)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  v9[0] = 0;
  id v3 = objc_msgSend(v1, sel_matchSpans_error_, a1, v9);
  id v4 = v9[0];
  if (v3)
  {
    uint64_t v5 = v3;
    sub_25346C8E0(0, &qword_269CDB508);
    uint64_t v2 = sub_253B09A60();
    id v6 = v4;
  }
  else
  {
    id v7 = v9[0];
    sub_253B052D0();

    swift_willThrow();
  }
  return v2;
}

uint64_t SiriEntityMatcherShim.__allocating_init(maxEntityCount:)(uint64_t a1, char a2)
{
  v50[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = sub_253B07B20();
  sub_2534727C4();
  uint64_t v49 = v5;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v48 = v8 - v7;
  uint64_t v9 = sub_253B05630();
  sub_2534727C4();
  uint64_t v47 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = sub_253462A5C(&qword_26B248CC0);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_2534727F8();
  uint64_t v19 = v17 - v18;
  MEMORY[0x270FA5388](v20);
  unint64_t v22 = (char *)&v45 - v21;
  id v23 = objc_msgSend(self, sel_indexMatcher);
  v50[0] = 0;
  id v24 = objc_msgSend(v23, sel_indexLocaleWithUserId_error_, 0, v50);
  id v25 = v50[0];
  if (v24)
  {
    uint64_t v26 = v24;
    sub_253B05610();
    id v27 = v25;

    uint64_t v28 = 0;
  }
  else
  {
    id v29 = v50[0];
    uint64_t v30 = sub_253B052D0();
    uint64_t v46 = v14;
    uint64_t v31 = a1;
    char v32 = a2;
    uint64_t v33 = v4;
    int64_t v34 = (void *)v30;

    swift_willThrow();
    uint64_t v35 = v34;
    uint64_t v4 = v33;
    a2 = v32;
    a1 = v31;
    uint64_t v14 = v46;

    uint64_t v28 = 1;
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v22, v28, 1, v9);
  sub_253472348((uint64_t)v22, v19, &qword_26B248CC0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v19, 1, v9) == 1)
  {
    id v36 = v23;
    sub_253B05620();
    sub_253472458(v19, &qword_26B248CC0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v14, v19, v9);
    id v37 = v23;
  }
  sub_25346C8E0(0, &qword_26B24A3A8);
  id v38 = sub_25346D5A0(v14);

  sub_253472458((uint64_t)v22, &qword_26B248CC0);
  uint64_t v40 = v48;
  uint64_t v39 = v49;
  (*(void (**)(uint64_t, void, uint64_t))(v49 + 104))(v48, *MEMORY[0x263F4E568], v4);
  type metadata accessor for SiriEntityMatcherShim();
  uint64_t v41 = swift_allocObject();
  unint64_t v42 = (void *)(v41 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);
  v42[3] = sub_25346C8E0(0, &qword_26B24A3B0);
  v42[4] = &protocol witness table for SEMSpanMatcher;
  *unint64_t v42 = v23;
  *(void *)(v41 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer) = v38;
  uint64_t v43 = v41 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount;
  *(void *)uint64_t v43 = a1;
  *(unsigned char *)(v43 + 8) = a2 & 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType, v40, v4);
  return v41;
}

id sub_25346D5A0(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = (void *)sub_253B055F0();
  id v4 = objc_msgSend(v2, sel_initWithLocale_, v3);

  uint64_t v5 = sub_253B05630();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

uint64_t SiriEntityMatcherShim.__allocating_init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25346D6B4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_253471DD0);
}

uint64_t type metadata accessor for SiriEntityMatcherShim()
{
  uint64_t result = qword_26B249260;
  if (!qword_26B249260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SiriEntityMatcherShim.init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25346D6B4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_253471F64);
}

uint64_t sub_25346D6B4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = a2 & 1;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(a3 + 32);
  sub_253471F14(a3, v13);
  sub_2534727C4();
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  (*(void (**)(uint64_t))(v19 + 16))(v17 - v16);
  uint64_t v20 = a6(a1, v12, v18, a4, a5, v6, v13, v14);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a3);
  return v20;
}

uint64_t sub_25346D7B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType;
  sub_253B07B20();
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a1, v3, v4);
}

uint64_t sub_25346D81C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_253B091F0();
  v3[5] = v4;
  sub_25346CB34(v4);
  v3[6] = v5;
  v3[7] = sub_253472828();
  uint64_t v6 = sub_253B089F0();
  v3[8] = v6;
  sub_25346CB34(v6);
  v3[9] = v7;
  v3[10] = sub_253472828();
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  v3[11] = v8;
  sub_25346CB34(v8);
  v3[12] = v9;
  v3[13] = sub_253472828();
  uint64_t v10 = sub_253462A5C(&qword_269CDB3F8);
  sub_25346CB4C(v10);
  v3[14] = sub_2534727DC();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  uint64_t v11 = sub_253B07770();
  v3[17] = v11;
  sub_25346CB34(v11);
  v3[18] = v12;
  v3[19] = sub_2534727DC();
  v3[20] = swift_task_alloc();
  uint64_t v13 = sub_253462A5C(&qword_269CDB4A0);
  v3[21] = v13;
  sub_25346CB4C(v13);
  v3[22] = sub_253472828();
  uint64_t v14 = sub_253462A5C(qword_269CDB4A8);
  sub_25346CB4C(v14);
  v3[23] = sub_2534727DC();
  v3[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25346D9E8, 0, 0);
}

uint64_t sub_25346D9E8()
{
  v82 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer);
  uint64_t v3 = (void *)sub_253B096D0();
  id v4 = objc_msgSend(v2, sel_queryFromText_, v3);

  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher + 24);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher + 32);
  sub_253472068((void *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher), v5);
  unint64_t v7 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v6 + 8))(v4, v5, v6);
  uint64_t v9 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = v0[2];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25346E440(v7, v8, v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v75 = v0[21];
  uint64_t v12 = v0[18];
  uint64_t v63 = v0[12];
  uint64_t v64 = v11;
  uint64_t v71 = v0[11];
  uint64_t v70 = (void (**)(uint64_t))(v12 + 32);
  unint64_t v13 = *(void *)(v11 + 16);
  BOOL v69 = (void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  uint64_t v74 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  int64_t v62 = (void (**)(uint64_t, uint64_t))(v0[6] + 8);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  unint64_t v67 = v13;
  id v68 = v4;
  while (1)
  {
    if (v15 == v13)
    {
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0[23], 1, 1, v0[21]);
      unint64_t v16 = v13;
    }
    else
    {
      if (v15 >= *(void *)(v64 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v17 = (unint64_t *)v0[23];
      uint64_t v18 = v0[21];
      unint64_t v16 = v15 + 1;
      uint64_t v19 = v0[22] + *(int *)(v75 + 48);
      sub_253472348(v64+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(void *)(v63 + 72) * v15, v19, (uint64_t *)&unk_269CDB490);
      uint64_t v20 = (uint64_t)v17 + *(int *)(v75 + 48);
      *uint64_t v17 = v15;
      sub_2534720AC(v19, v20, (uint64_t *)&unk_269CDB490);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v18);
    }
    uint64_t v21 = v0[24];
    uint64_t v22 = v0[21];
    sub_2534720AC(v0[23], v21, qword_269CDB4A8);
    int v23 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v21, 1, v22);
    id v24 = (uint64_t *)v0[24];
    if (v23 == 1) {
      break;
    }
    uint64_t v25 = v0[20];
    unint64_t v76 = v16;
    uint64_t v77 = v0[19];
    uint64_t v27 = v0[16];
    uint64_t v26 = v0[17];
    uint64_t v79 = v0[15];
    uint64_t v28 = v0[13];
    uint64_t v72 = *v24;
    uint64_t v29 = *(int *)(v71 + 48);
    uint64_t v30 = (uint64_t)v24 + *(int *)(v75 + 48) + v29;
    uint64_t v31 = v28 + v29;
    char v32 = *v70;
    (*v70)(v28);
    sub_2534720AC(v30, v31, &qword_269CDB3F8);
    ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v25, v28, v26);
    sub_2534720AC(v31, v27, &qword_269CDB3F8);
    sub_253B08320();
    (*v69)(v77, v25, v26);
    sub_253472348(v27, v79, &qword_269CDB3F8);
    uint64_t v33 = sub_253B089D0();
    os_log_type_t v34 = sub_253B09D70();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = v0[19];
      uint64_t v36 = v0[17];
      uint64_t v38 = v0[14];
      uint64_t v37 = v0[15];
      uint64_t v39 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      v81[0] = v78;
      *(_DWORD *)uint64_t v39 = 134218498;
      *(void *)(v39 + 4) = v72;
      *(_WORD *)(v39 + 12) = 2080;
      uint64_t v40 = sub_253B076F0();
      *(void *)(v39 + 14) = sub_253464DF8(v40, v41, v81);
      swift_bridgeObjectRelease();
      uint64_t v80 = *v74;
      (*v74)(v35, v36);
      *(_WORD *)(v39 + 22) = 2080;
      sub_253472348(v37, v38, &qword_269CDB3F8);
      uint64_t v42 = sub_253B09120();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v38, 1, v42) == 1)
      {
        sub_253472458(v0[14], &qword_269CDB3F8);
        unint64_t v43 = 0xE700000000000000;
        uint64_t v44 = 0x6E776F6E6B6E75;
      }
      else
      {
        uint64_t v52 = v0[7];
        uint64_t v53 = v0[5];
        sub_253B090C0();
        sub_2534659CC();
        v54();
        uint64_t v44 = sub_253B091C0();
        unint64_t v43 = v55;
        (*v62)(v52, v53);
      }
      uint64_t v73 = v0[20];
      uint64_t v56 = v0[15];
      uint64_t v65 = v0[16];
      uint64_t v66 = v0[17];
      *(void *)(v39 + 24) = sub_253464DF8(v44, v43, v81);
      swift_bridgeObjectRelease();
      sub_253472458(v56, &qword_269CDB3F8);
      _os_log_impl(&dword_253460000, v33, v34, "[SiriEntityMatcherShim] Span match [%ld]: %s \nWith entity type: %s", (uint8_t *)v39, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x25A269E60](v78, -1, -1);
      MEMORY[0x25A269E60](v39, -1, -1);

      sub_2534659CC();
      v57();
      sub_253472458(v65, &qword_269CDB3F8);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v80)(v73, v66);
    }
    else
    {
      uint64_t v45 = v0[19];
      uint64_t v46 = v0[20];
      uint64_t v48 = v0[16];
      uint64_t v47 = v0[17];
      uint64_t v49 = v0[15];

      sub_253472458(v49, &qword_269CDB3F8);
      uint64_t v50 = *v74;
      (*v74)(v45, v47);
      sub_2534659CC();
      v51();
      sub_253472458(v48, &qword_269CDB3F8);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v50)(v46, v47);
    }
    unint64_t v13 = v67;
    id v4 = v68;
    unint64_t v15 = v76;
  }
  swift_bridgeObjectRelease();
  sub_25346FEFC(v64);
  uint64_t v59 = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = sub_25346F294(v59);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v61 = (uint64_t (*)(uint64_t))v0[1];
  return v61(v60);
}

uint64_t sub_25346E1BC@<X0>(void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t result = sub_25346E5CC(*a1, a2, a3);
  if (!v4)
  {
    uint64_t v29 = v9;
    uint64_t v30 = v8;
    uint64_t v33 = v12;
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v32 = *(void *)(result + 16);
    if (v32)
    {
      v27[1] = 0;
      unint64_t v17 = 0;
      uint64_t v18 = v29;
      uint64_t v19 = v30;
      uint64_t v31 = result;
      while (v17 < *(void *)(result + 16))
      {
        unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        uint64_t v21 = *(void *)(v18 + 72);
        sub_253472348(result + v20 + v21 * v17, (uint64_t)v14, (uint64_t *)&unk_269CDB490);
        uint64_t v22 = (uint64_t)&v14[*(int *)(v19 + 48)];
        uint64_t v23 = sub_253B09120();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v22, 1, v23) == 1)
        {
          sub_253472458((uint64_t)v14, (uint64_t *)&unk_269CDB490);
        }
        else
        {
          sub_2534720AC((uint64_t)v14, (uint64_t)v33, (uint64_t *)&unk_269CDB490);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_2539E6518();
          }
          uint64_t v24 = v34;
          unint64_t v25 = *(void *)(v34 + 16);
          if (v25 >= *(void *)(v34 + 24) >> 1)
          {
            sub_2539E6518();
            uint64_t v24 = v34;
          }
          *(void *)(v24 + 16) = v25 + 1;
          sub_2534720AC((uint64_t)v33, v24 + v20 + v25 * v21, (uint64_t *)&unk_269CDB490);
          uint64_t v18 = v29;
          uint64_t v19 = v30;
        }
        ++v17;
        uint64_t result = v31;
        if (v32 == v17)
        {
          uint64_t v16 = v34;
          uint64_t v26 = v28;
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v26 = v28;
LABEL_15:
      uint64_t result = swift_bridgeObjectRelease();
      void *v26 = v16;
    }
  }
  return result;
}

uint64_t sub_25346E440(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = sub_253B0A210())
  {
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x25A269060](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      uint64_t v16 = v9;
      sub_25346E1BC(&v16, a3, a4, &v15);
      if (v4)
      {
        swift_bridgeObjectRelease();

        uint64_t v12 = v17;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return v12;
      }

      sub_253477E84(v15);
      ++v8;
      if (v11 == v7)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v12 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v12 = MEMORY[0x263F8EE78];
LABEL_15:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_25346E5CC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_253B079E0();
  sub_2534727C4();
  uint64_t v66 = v8;
  uint64_t v67 = v7;
  MEMORY[0x270FA5388](v7);
  sub_25346CC44();
  unint64_t v11 = v10 - v9;
  uint64_t v12 = sub_253462A5C((uint64_t *)&unk_269CDB4D0);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_2534727F8();
  uint64_t v16 = v14 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v57 - v18;
  id v20 = objc_msgSend(a1, sel_spanInfo);
  uint64_t v21 = (char *)objc_msgSend(v20, sel_spanRange);
  uint64_t v23 = &v21[v22];
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  sub_25346C800();
  BOOL v69 = v19;
  swift_bridgeObjectRetain();
  id v68 = v20;
  uint64_t v64 = sub_253B097F0();
  uint64_t v72 = a2;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  swift_bridgeObjectRetain();
  unint64_t v25 = v68;
  uint64_t v24 = (uint64_t)v69;
  a2 = sub_253B097F0();
  sub_25346EC08((__int16)objc_msgSend(v25, sel_aliasMatchOptions), v24);
  objc_msgSend(v25, sel_maxTokenCount);
  objc_msgSend(v25, sel_matchedTokenCount);
  sub_253472348(v24, v16, (uint64_t *)&unk_269CDB4D0);
  sub_253B079A0();
  id v3 = objc_msgSend(a1, sel_entityInfo);
  self;
  uint64_t v26 = (void *)swift_dynamicCastObjCClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    uint64_t v44 = sub_253B07B70();
    sub_2534723E4(&qword_269CDB4E0, MEMORY[0x263F4E5C8]);
    sub_253472808();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104))(v45, *MEMORY[0x263F4E5C0], v44);
    swift_willThrow();

LABEL_23:
    sub_253472458(v24, (uint64_t *)&unk_269CDB4D0);
    sub_2534659CC();
    v48();
    return (uint64_t)v3;
  }
  uint64_t v27 = (uint64_t)v26;
  uint64_t v28 = sub_253471D6C(v26);
  if (!v28)
  {
    uint64_t v46 = sub_253B07B70();
    sub_2534723E4(&qword_269CDB4E0, MEMORY[0x263F4E5C8]);
    sub_253472808();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v46 - 8) + 104))(v47, *MEMORY[0x263F4E5B8], v46);
    swift_willThrow();

    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  uint64_t v23 = (char *)v28;
  uint64_t v58 = v27;
  unint64_t v63 = v11;
  id v29 = objc_msgSend(a1, sel_fieldMatches);
  sub_25346C8E0(0, &qword_269CDB4E8);
  unint64_t v11 = sub_253B09A60();

  if (!(v11 >> 62))
  {
    uint64_t v30 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    goto LABEL_6;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  uint64_t result = sub_253B0A210();
  uint64_t v30 = result;
LABEL_6:
  uint64_t v32 = v72;
  id v61 = v3;
  uint64_t v62 = (uint64_t)a1;
  unint64_t v59 = (unint64_t)v23;
  uint64_t v60 = a2;
  if (!v30)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
LABEL_25:
    uint64_t v49 = swift_bridgeObjectRelease_n();
    MEMORY[0x270FA5388](v49);
    unint64_t v50 = v59;
    uint64_t v51 = v62;
    unint64_t v52 = v63;
    *(&v57 - 10) = v58;
    *(&v57 - 9) = v51;
    uint64_t v53 = v64;
    *(&v57 - 8) = v34;
    *(&v57 - 7) = v53;
    *(&v57 - 6) = v60;
    *(&v57 - 5) = v32;
    uint64_t v54 = v68;
    *(&v57 - 4) = a3;
    *(&v57 - 3) = (uint64_t)v54;
    uint64_t v55 = v65;
    *(&v57 - 2) = v52;
    *(&v57 - 1) = v55;
    id v3 = (id)sub_25346CD18((void (*)(id *))sub_2534723A4, (uint64_t)(&v57 - 12), v50);
    sub_253472458((uint64_t)v69, (uint64_t *)&unk_269CDB4D0);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_2534659CC();
    v56();
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  if (v30 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = MEMORY[0x263F8EE78];
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v35 = (id)MEMORY[0x25A269060](v33, v11);
      }
      else {
        id v35 = *(id *)(v11 + 8 * v33 + 32);
      }
      uint64_t v36 = v35;
      id v37 = objc_msgSend(v35, sel_entityFieldInfo);
      self;
      uint64_t v38 = (void *)swift_dynamicCastObjCClass();
      if (v38)
      {
        uint64_t v39 = a3;
        unsigned __int16 v40 = (unsigned __int16)objc_msgSend(v38, sel_fieldType);

        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_253522BD4();
          uint64_t v34 = v42;
        }
        unint64_t v41 = *(void *)(v34 + 16);
        if (v41 >= *(void *)(v34 + 24) >> 1)
        {
          sub_253522BD4();
          uint64_t v34 = v43;
        }
        *(void *)(v34 + 16) = v41 + 1;
        *(_WORD *)(v34 + 2 * v41 + 32) = v40;
        a3 = v39;
      }
      else
      {

        swift_unknownObjectRelease();
      }
      ++v33;
      uint64_t v32 = v72;
    }
    while (v30 != v33);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_25346EC08@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253B075C0();
  sub_2534727C4();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_2534727F8();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v19 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v19 - v15;
  v19[3] = 0;
  sub_2534723E4(&qword_269CDB500, MEMORY[0x263F4E1A0]);
  sub_253B0A6F0();
  switch(a1)
  {
    case 1:
      sub_253B07550();
      goto LABEL_6;
    case 2:
      sub_253B075A0();
      goto LABEL_6;
    case 4:
      sub_253B07590();
      goto LABEL_6;
    case 8:
      sub_253B07580();
LABEL_6:
      sub_253A5732C((uint64_t)v14, v10);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v17(v10, v4);
      v17((uint64_t)v14, v4);
      break;
    default:
      break;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v16, v4);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a2, 0, 1, v4);
}

uint64_t sub_25346EE14@<X0>(id *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v60 = a9;
  uint64_t v59 = a8;
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v54 = a5;
  id v57 = a4;
  uint64_t v52 = sub_253B07B20();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v53 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_253B079E0();
  uint64_t v48 = *(void *)(v16 - 8);
  uint64_t v49 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_253462A5C(&qword_269CDB3F8);
  MEMORY[0x270FA5388](v18 - 8);
  id v20 = (void *)((char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_253B09120();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v58 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = objc_msgSend(*a1, sel_sourceItemIdentifier);
  uint64_t v25 = sub_253B096E0();
  uint64_t v27 = v26;

  id v46 = a3;
  id v28 = objc_msgSend(a3, sel_spanValue);
  uint64_t v29 = sub_253B096E0();
  uint64_t v31 = v30;

  uint64_t v47 = v25;
  uint64_t v32 = (uint64_t)v57;
  id v57 = a2;
  sub_253472840(v25, v27, v29, v31, v32, v20);
  swift_bridgeObjectRelease();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21) == 1)
  {
    swift_bridgeObjectRelease();
    sub_253472458((uint64_t)v20, &qword_269CDB3F8);
    uint64_t v33 = sub_253462A5C((uint64_t *)&unk_269CDB490);
    uint64_t v34 = v60;
    uint64_t v35 = 1;
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t *, uint64_t))(v22 + 32);
    v36(v58, v20, v21);
    swift_bridgeObjectRetain();
    id v37 = objc_msgSend(v46, sel_spanValue);
    uint64_t v38 = (void *)sub_253B096E0();
    v45[1] = v39;
    id v46 = v38;

    objc_msgSend(a10, sel_matchScore);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v51, a11, v49);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v53, a12 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType, v52);
    id v40 = objc_msgSend(v57, sel_sourceIdentifierOrConstant);
    sub_253B096E0();

    uint64_t v41 = v60;
    sub_253B076B0();
    uint64_t v42 = sub_253462A5C((uint64_t *)&unk_269CDB490);
    uint64_t v43 = v41 + *(int *)(v42 + 48);
    v36((char *)v43, (uint64_t *)v58, v21);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v43, 0, 1, v21);
    uint64_t v34 = v41;
    uint64_t v35 = 0;
    uint64_t v33 = v42;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, v35, 1, v33);
}

uint64_t sub_25346F294(uint64_t a1)
{
  uint64_t v64 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v2 = MEMORY[0x270FA5388](v64);
  uint64_t v62 = (uint64_t)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v63 = (char *)v55 - v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v55 - v7;
  uint64_t v9 = MEMORY[0x263F8EE80];
  id v68 = (void *)MEMORY[0x263F8EE80];
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = (v11 + 32) & ~v11;
    uint64_t v13 = a1 + v12;
    uint64_t v14 = *(void *)(v6 + 72);
    uint64_t v60 = v12;
    uint64_t v58 = v14 + v12;
    uint64_t v57 = v11 | 7;
    v55[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v67 = (void *)MEMORY[0x263F8EE80];
    long long v56 = xmmword_253B22680;
    id v61 = v8;
    uint64_t v59 = v14;
    while (1)
    {
      uint64_t v65 = v13;
      uint64_t v66 = v10;
      sub_253472348(v13, (uint64_t)v8, (uint64_t *)&unk_269CDB490);
      uint64_t v15 = v63;
      uint64_t v16 = *(int *)(v64 + 48);
      uint64_t v17 = (uint64_t)&v63[v16];
      uint64_t v18 = (uint64_t)&v8[v16];
      uint64_t v19 = sub_253B07770();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v8, v19);
      sub_253472348(v18, v17, &qword_269CDB3F8);
      uint64_t v21 = sub_253B07750();
      uint64_t v23 = v22;
      uint64_t v24 = sub_253B07740();
      uint64_t v26 = v25;
      uint64_t v27 = sub_253B07730();
      uint64_t v29 = v28;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
      *(void *)&long long v69 = v21;
      *((void *)&v69 + 1) = v23;
      *(void *)&long long v70 = v24;
      *((void *)&v70 + 1) = v26;
      *(void *)&long long v71 = v27;
      *((void *)&v71 + 1) = v29;
      sub_253472458(v17, &qword_269CDB3F8);
      uint64_t v30 = v67;
      unint64_t v32 = sub_25396E398((uint64_t *)&v69);
      uint64_t v33 = v30[2];
      BOOL v34 = (v31 & 1) == 0;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        break;
      }
      char v36 = v31;
      if (v30[3] < v35)
      {
        sub_253AE4714(v35, 1);
        uint64_t v30 = v68;
        unint64_t v37 = sub_25396E398((uint64_t *)&v69);
        if ((v36 & 1) != (v38 & 1)) {
          goto LABEL_20;
        }
        unint64_t v32 = v37;
      }
      uint64_t v67 = v30;
      if (v36)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v39 = v30[7];
        uint64_t v8 = v61;
        sub_2534720AC((uint64_t)v61, v62, (uint64_t *)&unk_269CDB490);
        uint64_t v40 = *(void *)(v39 + 8 * v32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v39 + 8 * v32) = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v40 = sub_253522BC0(0, *(void *)(v40 + 16) + 1, 1, v40);
          *(void *)(v39 + 8 * v32) = v40;
        }
        uint64_t v42 = v59;
        unint64_t v44 = *(void *)(v40 + 16);
        unint64_t v43 = *(void *)(v40 + 24);
        if (v44 >= v43 >> 1)
        {
          uint64_t v40 = sub_253522BC0(v43 > 1, v44 + 1, 1, v40);
          *(void *)(v39 + 8 * v32) = v40;
        }
        uint64_t v46 = v65;
        uint64_t v45 = v66;
        *(void *)(v40 + 16) = v44 + 1;
        sub_2534720AC(v62, v40 + v60 + v44 * v42, (uint64_t *)&unk_269CDB490);
      }
      else
      {
        sub_253462A5C(&qword_269CDB510);
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = v56;
        uint64_t v8 = v61;
        sub_2534720AC((uint64_t)v61, v47 + v60, (uint64_t *)&unk_269CDB490);
        v30[(v32 >> 6) + 8] |= 1 << v32;
        uint64_t v48 = (_OWORD *)(v30[6] + 48 * v32);
        long long v49 = v70;
        _OWORD *v48 = v69;
        v48[1] = v49;
        v48[2] = v71;
        *(void *)(v30[7] + 8 * v32) = v47;
        uint64_t v50 = v30[2];
        BOOL v51 = __OFADD__(v50, 1);
        uint64_t v52 = v50 + 1;
        if (v51) {
          goto LABEL_19;
        }
        v30[2] = v52;
        uint64_t v46 = v65;
        uint64_t v45 = v66;
        uint64_t v42 = v59;
      }
      uint64_t v13 = v46 + v42;
      uint64_t v10 = v45 - 1;
      if (!v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v9 = (uint64_t)v67;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = sub_253B0A550();
    __break(1u);
  }
  else
  {
LABEL_17:
    uint64_t v53 = sub_25346FBB8(v9);
    swift_release();
    return v53;
  }
  return result;
}

uint64_t sub_25346F724@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  long long v49 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v48 = (char *)&v40 - v8;
  uint64_t v52 = sub_253B07770();
  uint64_t v9 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  BOOL v51 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253462A5C(&qword_269CDB4F0);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v44 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_253462A5C(&qword_269CDB3F8);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v40 = (char *)&v40 - v17;
    uint64_t v41 = v16;
    uint64_t v43 = a2;
    uint64_t v53 = MEMORY[0x263F8EE78];
    sub_2539E655C();
    unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v42 = a1;
    uint64_t v21 = a1 + v20;
    uint64_t v22 = *(void *)(v5 + 72);
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v46 = v22;
    uint64_t v50 = v9;
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v25 = v51;
    uint64_t v24 = v52;
    uint64_t v47 = v4;
    uint64_t v26 = (uint64_t)v48;
    do
    {
      sub_253472348(v21, v26, (uint64_t *)&unk_269CDB490);
      uint64_t v27 = *(int *)(v4 + 48);
      uint64_t v28 = v23;
      uint64_t v29 = v49;
      uint64_t v30 = (uint64_t)&v49[v27];
      uint64_t v31 = v26 + v27;
      (*v45)(v49, v26, v24);
      sub_253472348(v31, v30, &qword_269CDB3F8);
      unint64_t v32 = *v28;
      uint64_t v33 = v29;
      uint64_t v23 = v28;
      (*v28)(v25, v33, v24);
      sub_253472458(v30, &qword_269CDB3F8);
      sub_253472458(v26, (uint64_t *)&unk_269CDB490);
      uint64_t v34 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2539E655C();
        uint64_t v34 = v53;
      }
      unint64_t v35 = *(void *)(v34 + 16);
      if (v35 >= *(void *)(v34 + 24) >> 1)
      {
        sub_2539E655C();
        uint64_t v34 = v53;
      }
      *(void *)(v34 + 16) = v35 + 1;
      uint64_t v25 = v51;
      unint64_t v36 = v34
          + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
          + *(void *)(v50 + 72) * v35;
      uint64_t v24 = v52;
      v32((char *)v36, v51, v52);
      uint64_t v53 = v34;
      uint64_t v4 = v47;
      v21 += v46;
      --v19;
    }
    while (v19);
    a1 = v42;
    uint64_t v9 = v50;
    uint64_t v18 = v40;
    uint64_t v16 = v41;
  }
  uint64_t v37 = (uint64_t)v44;
  sub_253981220(a1);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v37, 1, v4) == 1)
  {
    sub_253472458(v37, &qword_269CDB4F0);
    uint64_t v38 = sub_253B09120();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 1, 1, v38);
  }
  else
  {
    sub_2534720AC(v37 + *(int *)(v4 + 48), (uint64_t)v18, &qword_269CDB3F8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v52);
  }
  sub_253472348((uint64_t)v18, (uint64_t)v16, &qword_269CDB3F8);
  sub_253B07B30();
  return sub_253472458((uint64_t)v18, &qword_269CDB3F8);
}

uint64_t sub_25346FBB8(uint64_t a1)
{
  uint64_t v3 = sub_253B07B60();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (!v7) {
    return v8;
  }
  uint64_t v20 = v1;
  uint64_t v36 = MEMORY[0x263F8EE78];
  sub_2539E64B4();
  uint64_t v8 = v36;
  uint64_t result = sub_253A71D6C(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v11 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      uint64_t v12 = a1 + 64;
      uint64_t v23 = &v32;
      uint64_t v24 = &v31;
      uint64_t v22 = v27 + 32;
      uint64_t v25 = a1 + 64;
      uint64_t v21 = a1;
      while ((*(void *)(v12 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
      {
        if (v10 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        uint64_t v28 = v7;
        uint64_t v29 = v10;
        uint64_t v13 = *(void *)(a1 + 56);
        uint64_t v14 = (long long *)(*(void *)(a1 + 48) + 48 * v11);
        long long v15 = v14[2];
        long long v16 = *v14;
        long long v31 = v14[1];
        long long v32 = v15;
        long long v30 = v16;
        long long v17 = *v24;
        long long v33 = v16;
        long long v34 = v17;
        v35[0] = *v23;
        uint64_t v18 = *(void *)(v13 + 8 * v11);
        sub_25347242C((uint64_t)&v33);
        sub_25347242C((uint64_t)&v34);
        sub_25347242C((uint64_t)v35);
        swift_bridgeObjectRetain();
        sub_25347242C((uint64_t)&v33);
        sub_25347242C((uint64_t)&v34);
        sub_25347242C((uint64_t)v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_25346F724(v18, (uint64_t)v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v8;
        unint64_t v19 = *(void *)(v8 + 16);
        if (v19 >= *(void *)(v8 + 24) >> 1)
        {
          sub_2539E64B4();
          uint64_t v8 = v36;
        }
        *(void *)(v8 + 16) = v19 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v27 + 32))(v8+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v19, v6, v26);
        a1 = v21;
        uint64_t v12 = v25;
        if ((uint64_t)v11 >= -(-1 << *(unsigned char *)(v21 + 32))) {
          goto LABEL_19;
        }
        if ((*(void *)(v25 + 8 * (v11 >> 6)) & (1 << v11)) == 0) {
          goto LABEL_20;
        }
        if (v29 != *(_DWORD *)(v21 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = sub_253B09F70();
        uint64_t v7 = v28 - 1;
        if (v28 == 1) {
          return v8;
        }
        unint64_t v11 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v10 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_25346FEFC(uint64_t a1)
{
  uint64_t v7 = a1;
  swift_bridgeObjectRetain();
  sub_25346D040(&v7);
  uint64_t v3 = v7;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount + 8)) {
    return;
  }
  unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount);
  if ((int64_t)v4 >= *(void *)(a1 + 16)) {
    return;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)(v7 + 16) < v4)
  {
LABEL_10:
    __break(1u);
    swift_release();
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(sub_253462A5C((uint64_t *)&unk_269CDB490) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_253467F7C(v3, v6, 0, (2 * v4) | 1);
}

uint64_t sub_253470008()
{
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_253B09630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534700A8(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_253B0A4C0(), uint64_t result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_253B0A4C0(), uint64_t result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5])
      {
        return 1;
      }
      else
      {
        return sub_253B0A4C0();
      }
    }
  }
  return result;
}

uint64_t sub_253470158()
{
  return sub_253B0A630();
}

uint64_t sub_253470204()
{
  return sub_253470158();
}

uint64_t sub_253470240()
{
  return sub_253470008();
}

uint64_t sub_25347027C()
{
  return sub_253B0A630();
}

uint64_t sub_25347032C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  void v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_2534700A8(v7, v8) & 1;
}

uint64_t SiriEntityMatcherShim.deinit()
{
  sub_253B07B20();
  sub_25346CAF4();
  sub_2534659CC();
  v1();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);

  return v0;
}

uint64_t SiriEntityMatcherShim.__deallocating_deinit()
{
  SiriEntityMatcherShim.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_253470444@<X0>(uint64_t a1@<X8>)
{
  return sub_25346D7B0(a1);
}

uint64_t sub_253470468(uint64_t a1, uint64_t a2)
{
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *long long v5 = v2;
  v5[1] = sub_253469F58;
  return sub_25346D81C(a1, a2);
}

uint64_t sub_253470510(void *a1)
{
  uint64_t v184 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v3 = *(void *)(v184 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v184);
  uint64_t v173 = (uint64_t)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v185 = (uint64_t)&v163 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v181 = (char *)&v163 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v180 = (char *)&v163 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v192 = (uint64_t)&v163 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v191 = (uint64_t)&v163 - v14;
  uint64_t v15 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v15)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15) {
        return sub_2534712C0(0, v15, 1, a1);
      }
      return result;
    }
    goto LABEL_139;
  }
  uint64_t v167 = result;
  uint64_t v176 = v1;
  uint64_t result = sub_2539DF6E4(v15 / 2);
  uint64_t v164 = result;
  unint64_t v175 = v17;
  uint64_t v165 = v15;
  if (v15 <= 0)
  {
    unint64_t v19 = (char *)MEMORY[0x263F8EE78];
    unint64_t v103 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_101:
    if (v103 < 2)
    {
LABEL_115:
      uint64_t result = swift_bridgeObjectRelease();
      if (v165 >= -1)
      {
        *(void *)(v164 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_144;
    }
    uint64_t v155 = *a1;
    while (1)
    {
      unint64_t v156 = v103 - 2;
      if (v103 < 2) {
        break;
      }
      if (!v155) {
        goto LABEL_148;
      }
      uint64_t v157 = (uint64_t)v19;
      uint64_t v158 = *(void *)&v19[16 * v156 + 32];
      uint64_t v159 = *(void *)&v19[16 * v103 + 24];
      uint64_t v160 = v176;
      uint64_t result = sub_2534716A8(v155 + *(void *)(v3 + 72) * v158, v155 + *(void *)(v3 + 72) * *(void *)&v19[16 * v103 + 16], v155 + *(void *)(v3 + 72) * v159, v175);
      uint64_t v176 = v160;
      if (v160) {
        goto LABEL_113;
      }
      if (v159 < v158) {
        goto LABEL_134;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v157 = result;
      }
      if (v156 >= *(void *)(v157 + 16)) {
        goto LABEL_135;
      }
      v161 = (void *)(v157 + 32 + 16 * v156);
      void *v161 = v158;
      v161[1] = v159;
      unint64_t v162 = *(void *)(v157 + 16);
      if (v103 > v162) {
        goto LABEL_136;
      }
      uint64_t result = (uint64_t)memmove((void *)(v157 + 32 + 16 * (v103 - 1)), (const void *)(v157 + 32 + 16 * v103), 16 * (v162 - v103));
      unint64_t v19 = (char *)v157;
      *(void *)(v157 + 16) = v162 - 1;
      unint64_t v103 = v162 - 1;
      if (v162 <= 2) {
        goto LABEL_115;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return result;
  }
  uint64_t v18 = 0;
  unint64_t v19 = (char *)MEMORY[0x263F8EE78];
  uint64_t v20 = v15;
  v182 = a1;
  uint64_t v166 = v3;
  while (1)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v18 + 1;
    v172 = v19;
    if (v18 + 1 < v20)
    {
      uint64_t v168 = *a1;
      uint64_t v23 = v168;
      uint64_t v24 = *(void *)(v3 + 72);
      uint64_t v188 = v24;
      uint64_t v189 = v18 + 1;
      uint64_t v25 = v191;
      sub_253472348(v168 + v24 * v22, v191, (uint64_t *)&unk_269CDB490);
      sub_253472348(v23 + v24 * v21, v192, (uint64_t *)&unk_269CDB490);
      uint64_t v174 = v21;
      uint64_t v26 = *(int *)(v184 + 48);
      uint64_t v27 = v180;
      uint64_t v28 = (uint64_t)&v180[v26];
      v190 = &v180[v26];
      uint64_t v29 = v25;
      uint64_t v30 = v25 + v26;
      uint64_t v31 = sub_253B07770();
      uint64_t v32 = *(void *)(v31 - 8);
      long long v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
      v33(v27, v29, v31);
      sub_253472348(v30, v28, &qword_269CDB3F8);
      sub_253B076D0();
      float v35 = v34;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
      v36(v27, v31);
      uint64_t v37 = *(int *)(v184 + 48);
      uint64_t v38 = v181;
      uint64_t v39 = (uint64_t)&v181[v37];
      uint64_t v40 = v192 + v37;
      v178 = (void (*)(char *))v33;
      uint64_t v179 = v32 + 16;
      ((void (*)(char *))v33)(v181);
      sub_253472348(v40, v39, &qword_269CDB3F8);
      sub_253B076D0();
      uint64_t v41 = v188;
      float v43 = v42;
      unint64_t v44 = v38;
      uint64_t v21 = v174;
      uint64_t v186 = v32 + 8;
      uint64_t v187 = v31;
      v177 = (char *)v36;
      v36(v44, v31);
      sub_253472458(v39, &qword_269CDB3F8);
      sub_253472458((uint64_t)v190, &qword_269CDB3F8);
      sub_253472458(v192, (uint64_t *)&unk_269CDB490);
      uint64_t result = sub_253472458(v191, (uint64_t *)&unk_269CDB490);
      uint64_t v22 = v21 + 2;
      if (v21 + 2 < v20)
      {
        uint64_t v170 = v41 * v189;
        uint64_t v45 = v168;
        uint64_t v169 = v41 * v22;
        uint64_t v171 = v20;
        while (1)
        {
          uint64_t v183 = v22;
          LODWORD(v190) = v43 < v35;
          uint64_t v46 = v191;
          sub_253472348(v45 + v169, v191, (uint64_t *)&unk_269CDB490);
          sub_253472348(v45 + v170, v192, (uint64_t *)&unk_269CDB490);
          uint64_t v47 = v184;
          uint64_t v48 = *(int *)(v184 + 48);
          long long v49 = v180;
          uint64_t v50 = (uint64_t)&v180[v48];
          uint64_t v189 = (uint64_t)&v180[v48];
          uint64_t v51 = v46 + v48;
          uint64_t v52 = v46;
          uint64_t v53 = v187;
          uint64_t v54 = v178;
          ((void (*)(char *, uint64_t, uint64_t))v178)(v180, v52, v187);
          sub_253472348(v51, v50, &qword_269CDB3F8);
          sub_253B076D0();
          float v56 = v55;
          uint64_t v57 = (void (*)(char *, uint64_t))v177;
          ((void (*)(char *, uint64_t))v177)(v49, v53);
          uint64_t v58 = *(int *)(v47 + 48);
          uint64_t v59 = v181;
          uint64_t v60 = (uint64_t)&v181[v58];
          uint64_t v61 = v192 + v58;
          v54(v181);
          sub_253472348(v61, v60, &qword_269CDB3F8);
          sub_253B076D0();
          float v63 = v62;
          v57(v59, v53);
          sub_253472458(v60, &qword_269CDB3F8);
          sub_253472458(v189, &qword_269CDB3F8);
          sub_253472458(v192, (uint64_t *)&unk_269CDB490);
          uint64_t result = sub_253472458(v191, (uint64_t *)&unk_269CDB490);
          if (v190 == v63 >= v56) {
            break;
          }
          uint64_t v22 = v183 + 1;
          uint64_t v41 = v188;
          v45 += v188;
          uint64_t v20 = v171;
          if (v183 + 1 >= v171)
          {
            uint64_t v22 = v171;
            uint64_t v21 = v174;
            goto LABEL_11;
          }
        }
        uint64_t v22 = v183;
        uint64_t v21 = v174;
        uint64_t v20 = v171;
        uint64_t v41 = v188;
      }
LABEL_11:
      uint64_t v3 = v166;
      a1 = v182;
      if (v43 < v35)
      {
        if (v22 < v21) {
          goto LABEL_141;
        }
        if (v21 < v22)
        {
          uint64_t v171 = v20;
          uint64_t v64 = 0;
          uint64_t v65 = v21;
          uint64_t v66 = v41 * (v22 - 1);
          uint64_t v67 = v22 * v41;
          uint64_t v68 = v65;
          uint64_t v69 = v65 * v41;
          do
          {
            if (v68 != v22 + v64 - 1)
            {
              uint64_t v70 = v168;
              if (!v168) {
                goto LABEL_147;
              }
              unint64_t v71 = v168 + v69;
              v190 = (char *)(v168 + v66);
              sub_2534720AC(v168 + v69, v173, (uint64_t *)&unk_269CDB490);
              if (v69 < v66 || v71 >= v70 + v67)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v41 = v188;
              }
              else
              {
                uint64_t v41 = v188;
                if (v69 != v66) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              uint64_t result = sub_2534720AC(v173, (uint64_t)v190, (uint64_t *)&unk_269CDB490);
            }
            ++v68;
            --v64;
            v66 -= v41;
            v67 -= v41;
            v69 += v41;
          }
          while (v68 < v22 + v64);
          a1 = v182;
          uint64_t v21 = v174;
          uint64_t v20 = v171;
        }
      }
    }
    if (v22 < v20)
    {
      if (__OFSUB__(v22, v21)) {
        goto LABEL_138;
      }
      if (v22 - v21 < v167)
      {
        if (__OFADD__(v21, v167)) {
          goto LABEL_142;
        }
        if (v21 + v167 >= v20) {
          uint64_t v73 = v20;
        }
        else {
          uint64_t v73 = v21 + v167;
        }
        if (v73 < v21) {
          goto LABEL_143;
        }
        if (v22 != v73)
        {
          uint64_t v174 = v21;
          uint64_t v74 = *(char **)(v3 + 72);
          uint64_t v75 = (void)v74 * (v22 - 1);
          v177 = v74;
          uint64_t v76 = v22 * (void)v74;
          uint64_t v171 = v73;
          do
          {
            uint64_t v77 = 0;
            uint64_t v78 = v174;
            uint64_t v183 = v22;
            v178 = (void (*)(char *))v76;
            uint64_t v179 = v75;
            while (1)
            {
              uint64_t v188 = v78;
              uint64_t v79 = *a1;
              uint64_t v187 = v76 + v77;
              uint64_t v80 = v191;
              sub_253472348(v76 + v77 + v79, v191, (uint64_t *)&unk_269CDB490);
              uint64_t v186 = v75 + v77;
              sub_253472348(v75 + v77 + v79, v192, (uint64_t *)&unk_269CDB490);
              uint64_t v81 = v184;
              uint64_t v82 = *(int *)(v184 + 48);
              uint64_t v83 = v180;
              uint64_t v84 = (uint64_t)&v180[v82];
              uint64_t v189 = v80 + v82;
              v190 = &v180[v82];
              uint64_t v85 = v80;
              uint64_t v86 = sub_253B07770();
              uint64_t v87 = *(void *)(v86 - 8);
              unint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
              v88(v83, v85, v86);
              sub_253472348(v189, v84, &qword_269CDB3F8);
              sub_253B076D0();
              float v90 = v89;
              v91 = *(void (**)(char *, uint64_t))(v87 + 8);
              v91(v83, v86);
              uint64_t v92 = *(int *)(v81 + 48);
              uint64_t v93 = v181;
              uint64_t v94 = (uint64_t)&v181[v92];
              uint64_t v95 = v192 + v92;
              ((void (*)(char *))v88)(v181);
              sub_253472348(v95, v94, &qword_269CDB3F8);
              sub_253B076D0();
              float v97 = v96;
              v91(v93, v86);
              sub_253472458(v94, &qword_269CDB3F8);
              sub_253472458((uint64_t)v190, &qword_269CDB3F8);
              sub_253472458(v192, (uint64_t *)&unk_269CDB490);
              uint64_t result = sub_253472458(v191, (uint64_t *)&unk_269CDB490);
              if (v97 >= v90) {
                break;
              }
              a1 = v182;
              uint64_t v98 = *v182;
              if (!*v182) {
                goto LABEL_145;
              }
              uint64_t v76 = (uint64_t)v178;
              uint64_t v75 = v179;
              uint64_t v99 = v98 + v179 + v77;
              sub_2534720AC((uint64_t)v178 + v98 + v77, v185, (uint64_t *)&unk_269CDB490);
              uint64_t v100 = v183;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_2534720AC(v185, v99, (uint64_t *)&unk_269CDB490);
              v77 -= (uint64_t)v177;
              uint64_t v78 = v188 + 1;
              if (v100 == v188 + 1) {
                goto LABEL_44;
              }
            }
            a1 = v182;
            uint64_t v100 = v183;
            uint64_t v76 = (uint64_t)v178;
            uint64_t v75 = v179;
LABEL_44:
            uint64_t v22 = v100 + 1;
            v75 += (uint64_t)v177;
            v76 += (uint64_t)v177;
          }
          while (v22 != v171);
          uint64_t v22 = v171;
          uint64_t v3 = v166;
          uint64_t v21 = v174;
        }
      }
    }
    if (v22 < v21) {
      goto LABEL_137;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      unint64_t v19 = v172;
    }
    else
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *((void *)v172 + 2) + 1, 1, v172);
      unint64_t v19 = (char *)result;
    }
    unint64_t v102 = *((void *)v19 + 2);
    unint64_t v101 = *((void *)v19 + 3);
    unint64_t v103 = v102 + 1;
    uint64_t v183 = v22;
    if (v102 >= v101 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v101 > 1), v102 + 1, 1, v19);
      unint64_t v19 = (char *)result;
    }
    *((void *)v19 + 2) = v103;
    v104 = v19 + 32;
    v105 = &v19[16 * v102 + 32];
    uint64_t v106 = v183;
    *(void *)v105 = v21;
    *((void *)v105 + 1) = v106;
    if (v102) {
      break;
    }
    unint64_t v103 = 1;
LABEL_94:
    uint64_t v20 = a1[1];
    uint64_t v18 = v183;
    if (v183 >= v20) {
      goto LABEL_101;
    }
  }
  while (1)
  {
    unint64_t v107 = v103 - 1;
    if (v103 >= 4)
    {
      v112 = &v104[16 * v103];
      uint64_t v113 = *((void *)v112 - 8);
      uint64_t v114 = *((void *)v112 - 7);
      BOOL v118 = __OFSUB__(v114, v113);
      uint64_t v115 = v114 - v113;
      if (v118) {
        goto LABEL_122;
      }
      uint64_t v117 = *((void *)v112 - 6);
      uint64_t v116 = *((void *)v112 - 5);
      BOOL v118 = __OFSUB__(v116, v117);
      uint64_t v110 = v116 - v117;
      char v111 = v118;
      if (v118) {
        goto LABEL_123;
      }
      unint64_t v119 = v103 - 2;
      v120 = &v104[16 * v103 - 32];
      uint64_t v122 = *(void *)v120;
      uint64_t v121 = *((void *)v120 + 1);
      BOOL v118 = __OFSUB__(v121, v122);
      uint64_t v123 = v121 - v122;
      if (v118) {
        goto LABEL_124;
      }
      BOOL v118 = __OFADD__(v110, v123);
      uint64_t v124 = v110 + v123;
      if (v118) {
        goto LABEL_126;
      }
      if (v124 >= v115)
      {
        v142 = &v104[16 * v107];
        uint64_t v144 = *(void *)v142;
        uint64_t v143 = *((void *)v142 + 1);
        BOOL v118 = __OFSUB__(v143, v144);
        uint64_t v145 = v143 - v144;
        if (v118) {
          goto LABEL_132;
        }
        BOOL v135 = v110 < v145;
        goto LABEL_83;
      }
    }
    else
    {
      if (v103 != 3)
      {
        uint64_t v136 = *((void *)v19 + 4);
        uint64_t v137 = *((void *)v19 + 5);
        BOOL v118 = __OFSUB__(v137, v136);
        uint64_t v129 = v137 - v136;
        char v130 = v118;
        goto LABEL_77;
      }
      uint64_t v109 = *((void *)v19 + 4);
      uint64_t v108 = *((void *)v19 + 5);
      BOOL v118 = __OFSUB__(v108, v109);
      uint64_t v110 = v108 - v109;
      char v111 = v118;
    }
    if (v111) {
      goto LABEL_125;
    }
    unint64_t v119 = v103 - 2;
    v125 = &v104[16 * v103 - 32];
    uint64_t v127 = *(void *)v125;
    uint64_t v126 = *((void *)v125 + 1);
    BOOL v128 = __OFSUB__(v126, v127);
    uint64_t v129 = v126 - v127;
    char v130 = v128;
    if (v128) {
      goto LABEL_127;
    }
    v131 = &v104[16 * v107];
    uint64_t v133 = *(void *)v131;
    uint64_t v132 = *((void *)v131 + 1);
    BOOL v118 = __OFSUB__(v132, v133);
    uint64_t v134 = v132 - v133;
    if (v118) {
      goto LABEL_129;
    }
    if (__OFADD__(v129, v134)) {
      goto LABEL_131;
    }
    if (v129 + v134 >= v110)
    {
      BOOL v135 = v110 < v134;
LABEL_83:
      if (v135) {
        unint64_t v107 = v119;
      }
      goto LABEL_85;
    }
LABEL_77:
    if (v130) {
      goto LABEL_128;
    }
    v138 = &v104[16 * v107];
    uint64_t v140 = *(void *)v138;
    uint64_t v139 = *((void *)v138 + 1);
    BOOL v118 = __OFSUB__(v139, v140);
    uint64_t v141 = v139 - v140;
    if (v118) {
      goto LABEL_130;
    }
    if (v141 < v129) {
      goto LABEL_94;
    }
LABEL_85:
    unint64_t v146 = v107 - 1;
    if (v107 - 1 >= v103)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    uint64_t v147 = *a1;
    if (!*a1) {
      goto LABEL_146;
    }
    v148 = v19;
    v149 = &v104[16 * v146];
    uint64_t v150 = *(void *)v149;
    v151 = &v104[16 * v107];
    uint64_t v152 = *((void *)v151 + 1);
    uint64_t v153 = v176;
    uint64_t result = sub_2534716A8(v147 + *(void *)(v3 + 72) * *(void *)v149, v147 + *(void *)(v3 + 72) * *(void *)v151, v147 + *(void *)(v3 + 72) * v152, v175);
    uint64_t v176 = v153;
    if (v153) {
      break;
    }
    if (v152 < v150) {
      goto LABEL_119;
    }
    if (v107 > *((void *)v148 + 2)) {
      goto LABEL_120;
    }
    *(void *)v149 = v150;
    *(void *)&v104[16 * v146 + 8] = v152;
    unint64_t v154 = *((void *)v148 + 2);
    if (v107 >= v154) {
      goto LABEL_121;
    }
    unint64_t v103 = v154 - 1;
    uint64_t result = (uint64_t)memmove(&v104[16 * v107], v151 + 16, 16 * (v154 - 1 - v107));
    unint64_t v19 = v148;
    *((void *)v148 + 2) = v154 - 1;
    a1 = v182;
    if (v154 <= 2) {
      goto LABEL_94;
    }
  }
LABEL_113:
  uint64_t result = swift_bridgeObjectRelease();
  if (v165 < -1) {
    goto LABEL_140;
  }
  *(void *)(v164 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534712C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v54 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v7 = MEMORY[0x270FA5388](v54);
  uint64_t v55 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  long long v49 = (char *)&v44 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)&v44 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v62 = (uint64_t)&v44 - v14;
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v61 = (uint64_t)&v44 - v17;
  uint64_t v53 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v18 = *(void *)(v16 + 72);
    uint64_t v19 = v18 * (v53 - 1);
    uint64_t v50 = v18;
    uint64_t v20 = v18 * v53;
    uint64_t v47 = a4;
    while (2)
    {
      uint64_t v21 = 0;
      uint64_t v58 = v46;
      uint64_t v51 = v20;
      uint64_t v52 = v19;
      do
      {
        uint64_t v22 = *a4;
        uint64_t v57 = v20 + v21;
        uint64_t v23 = v61;
        sub_253472348(v20 + v21 + v22, v61, (uint64_t *)&unk_269CDB490);
        uint64_t v56 = v19 + v21;
        sub_253472348(v19 + v21 + v22, v62, (uint64_t *)&unk_269CDB490);
        uint64_t v24 = v54;
        uint64_t v25 = *(int *)(v54 + 48);
        uint64_t v26 = v48;
        uint64_t v27 = (uint64_t)&v48[v25];
        uint64_t v59 = v23 + v25;
        uint64_t v60 = &v48[v25];
        uint64_t v28 = v23;
        uint64_t v29 = sub_253B07770();
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
        v31(v26, v28, v29);
        sub_253472348(v59, v27, &qword_269CDB3F8);
        sub_253B076D0();
        float v33 = v32;
        float v34 = *(void (**)(char *, uint64_t))(v30 + 8);
        v34(v26, v29);
        uint64_t v35 = *(int *)(v24 + 48);
        uint64_t v36 = v49;
        uint64_t v37 = (uint64_t)&v49[v35];
        uint64_t v38 = v62 + v35;
        ((void (*)(char *))v31)(v49);
        uint64_t v20 = v51;
        a4 = v47;
        sub_253472348(v38, v37, &qword_269CDB3F8);
        sub_253B076D0();
        float v40 = v39;
        v34(v36, v29);
        uint64_t v41 = v37;
        uint64_t v19 = v52;
        sub_253472458(v41, &qword_269CDB3F8);
        sub_253472458((uint64_t)v60, &qword_269CDB3F8);
        sub_253472458(v62, (uint64_t *)&unk_269CDB490);
        uint64_t result = sub_253472458(v61, (uint64_t *)&unk_269CDB490);
        if (v40 >= v33) {
          break;
        }
        uint64_t v42 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v43 = v42 + v19 + v21;
        sub_2534720AC(v42 + v20 + v21, v55, (uint64_t *)&unk_269CDB490);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_2534720AC(v55, v43, (uint64_t *)&unk_269CDB490);
        v21 -= v50;
        ++v58;
      }
      while (v53 != v58);
      v19 += v50;
      v20 += v50;
      if (++v53 != v45) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_2534716A8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v93 = sub_253462A5C((uint64_t *)&unk_269CDB490);
  uint64_t v8 = MEMORY[0x270FA5388](v93);
  unint64_t v88 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v87 = (char *)&v78 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v86 = (uint64_t)&v78 - v13;
  uint64_t result = MEMORY[0x270FA5388](v12);
  uint64_t v95 = (uint64_t)&v78 - v15;
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  int64_t v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_72;
  }
  int64_t v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_73;
  }
  uint64_t v22 = v18 / v17;
  uint64_t v23 = v20 / v17;
  uint64_t v85 = v17;
  if (v18 / v17 >= v20 / v17)
  {
    uint64_t result = sub_2535250D8(a2, v20 / v17);
    unint64_t v24 = a4 + v23 * v17;
    if (v23 * v17 >= 1 && a1 < a2)
    {
      uint64_t v79 = -v17;
      unint64_t v90 = a1;
      unint64_t v91 = a4;
      do
      {
        unint64_t v94 = a2;
        unint64_t v89 = v24;
        uint64_t v50 = v79;
        unint64_t v92 = a3 + v79;
        unint64_t v81 = v24 + v79;
        unint64_t v82 = a3;
        uint64_t v51 = v95;
        sub_253472348(v24 + v79, v95, (uint64_t *)&unk_269CDB490);
        unint64_t v80 = a2 + v50;
        uint64_t v52 = v86;
        sub_253472348(a2 + v50, v86, (uint64_t *)&unk_269CDB490);
        uint64_t v53 = v93;
        uint64_t v54 = *(int *)(v93 + 48);
        uint64_t v55 = v87;
        uint64_t v56 = (uint64_t)&v87[v54];
        uint64_t v83 = v51 + v54;
        uint64_t v84 = &v87[v54];
        uint64_t v57 = sub_253B07770();
        uint64_t v58 = *(void *)(v57 - 8);
        uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
        v59(v55, v51, v57);
        sub_253472348(v83, v56, &qword_269CDB3F8);
        sub_253B076D0();
        float v61 = v60;
        uint64_t v62 = *(void (**)(char *, uint64_t))(v58 + 8);
        v62(v55, v57);
        uint64_t v63 = *(int *)(v53 + 48);
        uint64_t v64 = v88;
        uint64_t v65 = (uint64_t)&v88[v63];
        uint64_t v66 = v52 + v63;
        v59(v88, v52, v57);
        sub_253472348(v66, v65, &qword_269CDB3F8);
        sub_253B076D0();
        float v68 = v67;
        v62(v64, v57);
        sub_253472458(v65, &qword_269CDB3F8);
        sub_253472458((uint64_t)v84, &qword_269CDB3F8);
        sub_253472458(v52, (uint64_t *)&unk_269CDB490);
        uint64_t result = sub_253472458(v95, (uint64_t *)&unk_269CDB490);
        if (v68 >= v61)
        {
          a3 = v92;
          BOOL v71 = v82 < v89 || v92 >= v89;
          a2 = v94;
          if (v71)
          {
            unint64_t v72 = v81;
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
            unint64_t v24 = v72;
            a4 = v91;
          }
          else
          {
            a4 = v91;
            if (v82 == v89)
            {
              unint64_t v24 = v81;
            }
            else
            {
              unint64_t v73 = v81;
              uint64_t result = swift_arrayInitWithTakeBackToFront();
              unint64_t v24 = v73;
            }
          }
          unint64_t v74 = v90;
          uint64_t v17 = v85;
        }
        else
        {
          unint64_t v69 = v89;
          a3 = v92;
          if (v82 < v94 || v92 >= v94)
          {
            a2 = v80;
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
            a4 = v91;
          }
          else
          {
            a4 = v91;
            a2 = v80;
            if (v82 != v94) {
              uint64_t result = swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v74 = v90;
          uint64_t v17 = v85;
          unint64_t v24 = v69;
        }
      }
      while (v24 > a4 && a2 > v74);
    }
  }
  else
  {
    uint64_t result = sub_2535250D8(a1, v18 / v17);
    unint64_t v24 = a4 + v22 * v17;
    if (v22 * v17 >= 1 && a2 < a3)
    {
      unint64_t v92 = a3;
      unint64_t v89 = a4 + v22 * v17;
      uint64_t v26 = v86;
      do
      {
        unint64_t v94 = a2;
        unint64_t v90 = a1;
        unint64_t v91 = a4;
        uint64_t v27 = v95;
        sub_253472348(a2, v95, (uint64_t *)&unk_269CDB490);
        sub_253472348(a4, v26, (uint64_t *)&unk_269CDB490);
        uint64_t v28 = v93;
        uint64_t v29 = *(int *)(v93 + 48);
        uint64_t v30 = v87;
        uint64_t v31 = (uint64_t)&v87[v29];
        uint64_t v83 = v27 + v29;
        uint64_t v84 = &v87[v29];
        uint64_t v32 = sub_253B07770();
        uint64_t v33 = *(void *)(v32 - 8);
        float v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
        v34(v30, v27, v32);
        sub_253472348(v83, v31, &qword_269CDB3F8);
        sub_253B076D0();
        float v36 = v35;
        uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
        v37(v30, v32);
        uint64_t v38 = *(int *)(v28 + 48);
        float v39 = v88;
        uint64_t v40 = (uint64_t)&v88[v38];
        uint64_t v41 = v26 + v38;
        v34(v88, v26, v32);
        sub_253472348(v41, v40, &qword_269CDB3F8);
        sub_253B076D0();
        float v43 = v42;
        v37(v39, v32);
        sub_253472458(v40, &qword_269CDB3F8);
        sub_253472458((uint64_t)v84, &qword_269CDB3F8);
        sub_253472458(v26, (uint64_t *)&unk_269CDB490);
        uint64_t result = sub_253472458(v95, (uint64_t *)&unk_269CDB490);
        if (v43 >= v36)
        {
          a2 = v94;
          uint64_t v17 = v85;
          unint64_t v44 = v90;
          a4 = v91 + v85;
          if (v90 < v91 || v90 >= a4)
          {
LABEL_28:
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
            unint64_t v46 = v92;
            goto LABEL_31;
          }
          unint64_t v46 = v92;
          if (v90 != v91) {
LABEL_30:
          }
            uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        else
        {
          uint64_t v17 = v85;
          a2 = v94 + v85;
          unint64_t v44 = v90;
          a4 = v91;
          if (v90 < v94 || v90 >= a2) {
            goto LABEL_28;
          }
          unint64_t v46 = v92;
          if (v90 != v94) {
            goto LABEL_30;
          }
        }
LABEL_31:
        unint64_t v24 = v89;
        a1 = v44 + v17;
      }
      while (a4 < v89 && a2 < v46);
    }
  }
  int64_t v76 = v24 - a4;
  if (v17 != -1 || v76 != 0x8000000000000000)
  {
    sub_2535250D8(a4, v76 / v17);
    return 1;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_253471D6C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_allMetaContent);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_253462A5C(&qword_269CDB4F8);
  uint64_t v3 = sub_253B09A60();

  return v3;
}

uint64_t sub_253471DD0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a7 - 8);
  char v15 = a2 & 1;
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEntityMatcherShim();
  uint64_t v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a3, a7);
  uint64_t v19 = sub_253471F64(a1, v15, (uint64_t)v17, a4, a5, v18, a7, a8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a3, a7);
  return v19;
}

uint64_t sub_253471F14(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_253471F64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v15 = (uint64_t *)(a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_spanMatcher);
  v15[3] = a7;
  v15[4] = a8;
  uint64_t v16 = sub_2534724A8(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v16, a3, a7);
  *(void *)(a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_tokenizer) = a4;
  uint64_t v17 = a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_maxEntityCount;
  *(void *)uint64_t v17 = a1;
  *(unsigned char *)(v17 + 8) = a2 & 1;
  uint64_t v18 = a6 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport21SiriEntityMatcherShim_matcherType;
  uint64_t v19 = sub_253B07B20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a5, v19);
  return a6;
}

void *sub_253472068(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_2534720AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t dispatch thunk of SpanMatcher.matchSpans(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_253472130()
{
  return type metadata accessor for SiriEntityMatcherShim();
}

uint64_t sub_253472138()
{
  uint64_t result = sub_253B07B20();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SiriEntityMatcherShim(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SiriEntityMatcherShim);
}

uint64_t dispatch thunk of SiriEntityMatcherShim.__allocating_init(maxEntityCount:spanMatcher:tokenizer:matcherType:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 112))(a1, a2 & 1);
}

uint64_t dispatch thunk of SiriEntityMatcherShim.getMatcherType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SiriEntityMatcherShim.matchEntitySpans(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 128) + **(int **)(*(void *)v2 + 128));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_25346A28C;
  return v8(a1, a2);
}

uint64_t sub_253472348(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_2534723A4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25346EE14(a1, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2, *(void **)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t sub_2534723E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25347242C(uint64_t a1)
{
  return a1;
}

uint64_t sub_253472458(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t *sub_2534724A8(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t initializeBufferWithCopyOfBuffer for SiriEntityMatcherShim.GroupingKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SiriEntityMatcherShim.GroupingKey()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SiriEntityMatcherShim.GroupingKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SiriEntityMatcherShim.GroupingKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SiriEntityMatcherShim.GroupingKey(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for SiriEntityMatcherShim.GroupingKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriEntityMatcherShim.GroupingKey(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriEntityMatcherShim.GroupingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriEntityMatcherShim.GroupingKey()
{
  return &type metadata for SiriEntityMatcherShim.GroupingKey;
}

unint64_t sub_253472778()
{
  unint64_t result = qword_269CDB518;
  if (!qword_269CDB518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB518);
  }
  return result;
}

uint64_t sub_2534727DC()
{
  return swift_task_alloc();
}

uint64_t sub_253472808()
{
  return swift_allocError();
}

uint64_t sub_253472828()
{
  return swift_task_alloc();
}

uint64_t sub_253472840@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  v137[1] = a3;
  v137[2] = a4;
  v142._countAndFlagsBits = a1;
  v142._object = a2;
  uint64_t v143 = a6;
  sub_253B091F0();
  sub_253465998();
  v137[3] = v10;
  v137[4] = v9;
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  v138 = v11;
  uint64_t v12 = sub_253462A5C(&qword_269CDB3F0);
  MEMORY[0x270FA5388](v12 - 8);
  sub_25346CB04();
  uint64_t v139 = v13;
  sub_253B089F0();
  sub_253465998();
  uint64_t v140 = v14;
  uint64_t v141 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)v137 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  unint64_t v24 = (char *)v137 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)v137 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (uint8_t *)v137 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (uint8_t *)v137 - v32;
  MEMORY[0x270FA5388](v31);
  float v35 = (uint8_t *)v137 - v34;
  unsigned int v36 = objc_msgSend(v7, sel_itemType);
  switch(v36)
  {
    case 0x1E0Au:
      id v46 = objc_msgSend(v7, sel_content);
      self;
      uint64_t v47 = (void *)swift_dynamicCastObjCClass();
      if (!v47)
      {

        sub_253B08320();
        BOOL v128 = sub_253B089D0();
        os_log_type_t v129 = sub_253B09D80();
        if (os_log_type_enabled(v128, v129))
        {
          char v130 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v130 = 0;
          _os_log_impl(&dword_253460000, v128, v129, "[SiriEntityMatcherShim] CCItemType_Home entity is missing content and cannot be converted to a TypedValue.entityIdentifier, skipping.", v130, 2u);
          sub_2534659B4();
        }

        sub_2534742EC();
        BOOL v118 = v24;
        goto LABEL_53;
      }
      uint64_t v48 = sub_25347444C((int)objc_msgSend(v47, sel_entityType));
      if (!v49)
      {
        sub_253B08320();
        uint64_t v133 = sub_253B089D0();
        os_log_type_t v134 = sub_253B09D80();
        if (os_log_type_enabled(v133, v134))
        {
          BOOL v135 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v135 = 0;
          _os_log_impl(&dword_253460000, v133, v134, "[SiriEntityMatcherShim] couldn't find corresponding SiriOntology.IdentifierConstants type name for given CCItemType_Home entity.", v135, 2u);
          sub_2534659B4();
        }

        sub_2534742EC();
        BOOL v118 = v27;
        goto LABEL_53;
      }
      uint64_t v50 = v48;
      uint64_t v51 = v49;
      sub_253B08FB0();
      uint64_t v52 = swift_allocBox();
      uint64_t v53 = (void *)sub_253474434();
      v53[2] = sub_253B096E0();
      v53[3] = v54;
      v53[4] = v50;
      v53[5] = v51;
      void *v138 = v53;
      sub_25346CCF8();
      v55();
      uint64_t v56 = sub_253B09330();
      sub_253474328(v56);
      sub_253474400();

      uint64_t v57 = v143;
      *uint64_t v143 = v52;
      goto LABEL_22;
    case 0xB8EDu:
      id v58 = objc_msgSend(v7, sel_content);
      self;
      uint64_t v59 = (void *)swift_dynamicCastObjCClass();
      if (v59 && (uint64_t v60 = sub_25346C7A0(v59, (SEL *)&selRef_typeIdentifier), v61))
      {
        uint64_t v62 = v60;
        uint64_t v52 = v61;
        uint64_t v63 = sub_25346C7A0(v7, (SEL *)&selRef_sourceIdentifier);
        object = v142._object;
        if (v64)
        {
          uint64_t v66 = v63;
          uint64_t v67 = v64;
          sub_253B08FB0();
          uint64_t v68 = swift_allocBox();
          unint64_t v69 = (void *)sub_253474434();
          v69[2] = v66;
          v69[3] = v67;
          v69[4] = v62;
          v69[5] = v52;
          void *v138 = v69;
          sub_25346CCF8();
          v70();
          uint64_t v71 = sub_253B09330();
          sub_2534743BC(v71);
          swift_bridgeObjectRetain();
          sub_253B08FA0();

          uint64_t v57 = v143;
          *uint64_t v143 = v68;
LABEL_22:
          sub_253B09120();
          sub_2534742F8();
          sub_25346CCF8();
          v84();
          uint64_t v85 = (uint64_t)v57;
LABEL_23:
          uint64_t v86 = 0;
          uint64_t v87 = v52;
          return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v85, v86, 1, v87);
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        object = v142._object;
      }
      sub_253B08320();
      swift_bridgeObjectRetain_n();
      uint64_t v110 = sub_253B089D0();
      os_log_type_t v111 = sub_253B09D80();
      if (os_log_type_enabled(v110, v111))
      {
        sub_2534743A0();
        uint64_t v112 = sub_253474384();
        sub_2534743F4(v112);
        *(_DWORD *)uint64_t v33 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v113 = sub_253464DF8(v142._countAndFlagsBits, (unint64_t)object, &v145);
        sub_2534742C4(v113);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v110, v111, "[SiriEntityMatcherShim] SEM Cascade Entity with id %s is an AppIntentsEntity match, but we don't have enough info to construct TypedValue for it. Skipping", v33, 0xCu);
        sub_25347430C();
        sub_2534659B4();
        sub_2534659B4();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_2534742EC();
      uint64_t v132 = v33;
      goto LABEL_56;
    case 0x69F2u:
      if (!*(void *)(a5 + 16) || (unint64_t v72 = sub_253474520(*(_WORD *)(a5 + 32)), !v73))
      {
        sub_253B08320();
        uint64_t v114 = sub_253B089D0();
        os_log_type_t v115 = sub_253B09D80();
        if (os_log_type_enabled(v114, v115))
        {
          uint64_t v116 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v116 = 0;
          _os_log_impl(&dword_253460000, v114, v115, "[SiriEntityMatcherShim] couldn't find corresponding type name for given CCItemType_FindMyDevice entity.", v116, 2u);
          sub_2534659B4();
        }

        sub_2534742EC();
        BOOL v118 = v21;
        goto LABEL_53;
      }
      unint64_t v74 = v72;
      uint64_t v75 = v73;
      sub_253B08FB0();
      uint64_t v76 = swift_allocBox();
      uint64_t v52 = v77;
      uint64_t v78 = (void *)sub_253474434();
      v78[2] = sub_253B096E0();
      v78[3] = v79;
      v78[4] = v74;
      v78[5] = v75;
      void *v138 = v78;
      sub_25346CCF8();
      v80();
      uint64_t v81 = sub_253B09330();
      sub_253474328(v81);
      sub_253474400();
      uint64_t v57 = v143;
      *uint64_t v143 = v76;
      goto LABEL_22;
    case 0x8E52u:
      sub_253B090B0();
      uint64_t v52 = swift_allocBox();
      uint64_t v82 = sub_253B09330();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v139, 1, 1, v82);
      swift_bridgeObjectRetain();
      sub_253B09030();
      sub_25346CCF8();
      v83();
      uint64_t v57 = v143;
      *uint64_t v143 = v52;
      goto LABEL_22;
    case 0xA673u:
      id v88 = objc_msgSend(v7, sel_content);
      self;
      unint64_t v89 = (void *)swift_dynamicCastObjCClass();
      if (v89 && (uint64_t v90 = sub_25346C7A0(v89, (SEL *)&selRef_typeIdentifier), v91))
      {
        uint64_t v92 = v90;
        uint64_t v52 = v91;
        uint64_t v93 = sub_25346C7A0(v7, (SEL *)&selRef_sourceIdentifier);
        uint64_t v95 = v142._object;
        if (v94)
        {
          uint64_t v96 = v93;
          uint64_t v97 = v94;
          sub_253B08F90();
          uint64_t v98 = swift_allocBox();
          uint64_t v99 = (void *)sub_253474434();
          v99[2] = v96;
          v99[3] = v97;
          v99[4] = v92;
          v99[5] = v52;
          void *v138 = v99;
          sub_25346CCF8();
          v100();
          uint64_t v101 = sub_253B09330();
          sub_2534743BC(v101);
          swift_bridgeObjectRetain();
          sub_253B08F80();

          unint64_t v102 = v143;
          *uint64_t v143 = v98;
          sub_253B09120();
          sub_2534742F8();
          sub_25346CCF8();
          v103();
          uint64_t v85 = (uint64_t)v102;
          goto LABEL_23;
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        uint64_t v95 = v142._object;
      }
      sub_253B08320();
      swift_bridgeObjectRetain_n();
      unint64_t v119 = sub_253B089D0();
      os_log_type_t v120 = sub_253B09D80();
      if (os_log_type_enabled(v119, v120))
      {
        sub_2534743A0();
        uint64_t v121 = sub_253474384();
        sub_2534743F4(v121);
        *(_DWORD *)uint64_t v30 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v122 = sub_253464DF8(v142._countAndFlagsBits, (unint64_t)v95, &v145);
        sub_2534742C4(v122);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_253460000, v119, v120, "[SiriEntityMatcherShim] SEM Cascade Entity with id %s is an AppIntentsEnum match, but we don't have enough info to construct TypedValue for it. Skipping", v30, 0xCu);
        sub_25347430C();
        sub_2534659B4();
        sub_2534659B4();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_2534742EC();
      uint64_t v132 = v30;
      goto LABEL_56;
  }
  if (v36 != 19668)
  {
    sub_253B08320();
    v104 = v142._object;
    swift_bridgeObjectRetain_n();
    id v105 = v7;
    uint64_t v106 = sub_253B089D0();
    os_log_type_t v107 = sub_253B09D70();
    if (os_log_type_enabled(v106, v107))
    {
      swift_slowAlloc();
      uint64_t v108 = sub_253474384();
      sub_2534743F4(v108);
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v144 = sub_253464DF8(v142._countAndFlagsBits, (unint64_t)v104, &v145);
      sub_253B09E80();
      swift_bridgeObjectRelease_n();
      *((_WORD *)v18 + 6) = 512;
      unsigned __int16 v109 = (unsigned __int16)objc_msgSend(v105, sel_itemType);

      LOWORD(v144) = v109;
      sub_253B09E80();

      _os_log_impl(&dword_253460000, v106, v107, "[SiriEntityMatcherShim] SEM Cascade Entity with id %s has a item type %hu that cannot be converted to TypedValue. Skipping", (uint8_t *)v18, 0x10u);
      sub_25347430C();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_2534742EC();
    BOOL v118 = v18;
LABEL_53:
    v117(v118, v140);
    uint64_t v87 = sub_253B09120();
    uint64_t v85 = (uint64_t)v143;
LABEL_57:
    uint64_t v86 = 1;
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v85, v86, 1, v87);
  }
  id v37 = objc_msgSend(v7, sel_content);
  self;
  uint64_t v38 = swift_dynamicCastObjCClass();
  float v39 = v142._object;
  if (!v38)
  {

    sub_253B08320();
    swift_bridgeObjectRetain_n();
    uint64_t v123 = sub_253B089D0();
    os_log_type_t v124 = sub_253B09D80();
    if (os_log_type_enabled(v123, v124))
    {
      v125 = (uint8_t *)sub_2534743A0();
      uint64_t v126 = swift_slowAlloc();
      sub_2534743F4(v126);
      *(_DWORD *)v125 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v127 = sub_253464DF8(v142._countAndFlagsBits, (unint64_t)v39, &v145);
      sub_2534742C4(v127);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_253460000, v123, v124, "[SiriEntityMatcherShim] cannot get person content from CCContactContent with id %s", v125, 0xCu);
      sub_25347430C();
      sub_2534659B4();
      sub_2534659B4();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_2534742EC();
    uint64_t v132 = v35;
LABEL_56:
    v131(v132, v140);
    uint64_t v136 = v143;
    uint64_t v87 = sub_253B09120();
    uint64_t v85 = (uint64_t)v136;
    goto LABEL_57;
  }
  CCContactContent.getAsINPerson(contactId:)(v142);
  uint64_t v40 = sub_253B090B0();
  uint64_t v41 = swift_allocBox();
  sub_253B09060();

  sub_25346CCF8();
  v42();
  uint64_t v43 = (uint64_t)v143;
  *uint64_t v143 = v41;
  sub_253B09120();
  sub_2534742F8();
  sub_25346CCF8();
  v44();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v43, 0, 1, v40);
}

INPerson __swiftcall CCContactContent.getAsINPerson(contactId:)(Swift::String contactId)
{
  uint64_t object = (uint64_t)contactId._object;
  uint64_t countAndFlagsBits = contactId._countAndFlagsBits;
  uint64_t v3 = sub_253462A5C(&qword_269CDB520);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v68 - v7;
  uint64_t v9 = sub_253B052B0();
  sub_253465998();
  uint64_t v71 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v81 = v12;
  sub_25346C7A0(v1, (SEL *)&selRef_namePrefix);
  uint64_t v14 = v13;
  sub_25346C7A0(v1, (SEL *)&selRef_givenName);
  uint64_t v80 = v15;
  uint64_t v16 = sub_25346C7A0(v1, (SEL *)&selRef_middleName);
  uint64_t v78 = v17;
  uint64_t v79 = v16;
  uint64_t v18 = sub_25346C7A0(v1, (SEL *)&selRef_familyName);
  uint64_t v76 = v19;
  uint64_t v77 = v18;
  uint64_t v20 = sub_25346C7A0(v1, (SEL *)&selRef_nameSuffix);
  uint64_t v74 = v21;
  uint64_t v75 = v20;
  sub_25346C7A0(v1, (SEL *)&selRef_nickname);
  BOOL v22 = sub_253473E4C();
  uint64_t v82 = v9;
  uint64_t v70 = object;
  unint64_t v72 = v6;
  if (v22)
  {
    uint64_t v23 = sub_25346C7A0(v1, (SEL *)&selRef_phoneticGivenName);
    v68[2] = v24;
    v68[3] = v23;
    uint64_t v25 = sub_25346C7A0(v1, (SEL *)&selRef_phoneticMiddleName);
    v68[0] = v26;
    v68[1] = v25;
    sub_25346C7A0(v1, (SEL *)&selRef_phoneticFamilyName);
    uint64_t object = v14;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v6, 1, 1, v82);
    uint64_t v9 = v82;
    sub_253B05240();
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, v27, 1, v9);
  sub_253B05240();
  v83[0] = MEMORY[0x263F8EE78];
  unint64_t v28 = sub_253474210(v1, (SEL *)&selRef_phoneNumbers, (unint64_t *)&unk_269CDB538);
  if (v28)
  {
    unint64_t v29 = v28;
    unint64_t v69 = v1;
    if (v28 >> 62) {
      goto LABEL_17;
    }
    uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v30; uint64_t v30 = sub_253B0A210())
    {
      uint64_t v31 = 4;
      while (1)
      {
        id v32 = (v29 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x25A269060](v31 - 4, v29)
            : *(id *)(v29 + 8 * v31);
        uint64_t v33 = v32;
        uint64_t v34 = v31 - 3;
        if (__OFADD__(v31 - 4, 1)) {
          break;
        }
        uint64_t object = (uint64_t)sub_253473F0C((SEL *)&selRef_stringValue, 2);
        MEMORY[0x25A268A40]();
        sub_253474420();
        if (v35) {
          sub_253474368();
        }
        sub_253B09B30();
        sub_253B09AA0();

        ++v31;
        if (v34 == v30) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_18:
    swift_bridgeObjectRelease_n();
    uint64_t v9 = v82;
    unint64_t v1 = v69;
  }
  unint64_t v36 = sub_253474210(v1, (SEL *)&selRef_emailAddresses, &qword_269CDB530);
  if (v36)
  {
    unint64_t v37 = v36;
    if (v36 >> 62) {
      goto LABEL_32;
    }
    uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v38; uint64_t v38 = sub_253B0A210())
    {
      uint64_t v39 = 4;
      while (1)
      {
        unint64_t v1 = (void *)(v39 - 4);
        id v40 = (v37 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x25A269060](v39 - 4, v37)
            : *(id *)(v37 + 8 * v39);
        uint64_t v41 = v40;
        uint64_t v42 = v39 - 3;
        if (__OFADD__(v1, 1)) {
          break;
        }
        uint64_t object = (uint64_t)sub_253473F0C((SEL *)&selRef_email, 1);
        unint64_t v1 = v83;
        MEMORY[0x25A268A40]();
        sub_253474420();
        if (v35) {
          sub_253474368();
        }
        sub_253B09B30();
        sub_253B09AA0();

        ++v39;
        if (v42 == v38) {
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain();
    }
LABEL_33:
    swift_bridgeObjectRelease_n();
    uint64_t v9 = v82;
  }
  unint64_t v43 = v83[0];
  if (v83[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_253B0A210();
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_39;
    }
  }
  else if (*(void *)((v83[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_39;
  }
  id v44 = objc_allocWithZone(MEMORY[0x263F0FD20]);
  sub_253473FAC(0, 0, 0);
  unint64_t v1 = v83;
  MEMORY[0x25A268A40]();
  if (*(void *)((v83[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v83[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_253474368();
  }
  sub_253B09B30();
  sub_253B09AA0();
  unint64_t v43 = v83[0];
LABEL_39:
  if ((v43 & 0xC000000000000001) != 0)
  {
    uint64_t v45 = (void *)MEMORY[0x25A269060](0, v43);
  }
  else
  {
    if (!*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v45 = *(id *)(v43 + 32);
  }
  unint64_t v1 = v45;
  uint64_t object = v43 >> 62;
  if (!(v43 >> 62))
  {
    uint64_t v46 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v46 > 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_45;
    }
    goto LABEL_62;
  }
LABEL_57:
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_253B0A210();
  swift_bridgeObjectRelease();
  if (v60 < 2) {
    goto LABEL_62;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v46 = sub_253B0A210();
  result.super.isa = (Class)swift_bridgeObjectRelease();
  if (v46 < 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_253B0A210();
    result.super.isa = (Class)swift_bridgeObjectRelease();
    if (v62 >= 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_253B0A210();
      swift_bridgeObjectRelease();
      if (v63 >= v46)
      {
LABEL_45:
        if ((v43 & 0xC000000000000001) != 0 && v46 != 1)
        {
          sub_25346C8E0(0, &qword_269CDB528);
          uint64_t v47 = 1;
          do
          {
            uint64_t v48 = v47 + 1;
            sub_253B0A040();
            uint64_t v47 = v48;
          }
          while (v46 != v48);
        }
        if (object)
        {
          swift_bridgeObjectRetain();
          uint64_t v49 = sub_253B0A220();
          uint64_t v50 = v53;
          uint64_t v51 = v54;
          unint64_t v52 = v55;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v49 = v43 & 0xFFFFFFFFFFFFFF8;
          uint64_t v50 = (v43 & 0xFFFFFFFFFFFFFF8) + 32;
          uint64_t v51 = 1;
          unint64_t v52 = (2 * v46) | 1;
        }
        uint64_t v56 = v70;
        sub_253467F94(v49, v50, v51, v52);
        uint64_t v58 = v57;
        goto LABEL_63;
      }
      __break(1u);
LABEL_62:
      uint64_t v58 = 0;
      uint64_t v56 = v70;
LABEL_63:
      uint64_t v65 = v71;
      uint64_t v64 = (uint64_t)v72;
      uint64_t v66 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v72, v81, v9);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v64, 0, 1, v9);
      objc_allocWithZone(MEMORY[0x263F0FD18]);
      swift_bridgeObjectRetain();
      id v67 = sub_253474018(v1, v64, 0, 0, 0, countAndFlagsBits, v56, 0, 0, v58, 0);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v9);
      swift_bridgeObjectRelease();
      return (INPerson)v67;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_253473E4C()
{
  sub_25346C7A0(v0, (SEL *)&selRef_phoneticGivenName);
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_2534743E0();
    if (v2) {
      return 1;
    }
  }
  sub_25346C7A0(v0, (SEL *)&selRef_phoneticMiddleName);
  if (v3)
  {
    swift_bridgeObjectRelease();
    sub_2534743E0();
    if (v4) {
      return 1;
    }
  }
  uint64_t v5 = sub_25346C7A0(v0, (SEL *)&selRef_phoneticFamilyName);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  swift_bridgeObjectRelease();
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFLL;
  }
  return v9 != 0;
}

id sub_253473F0C(SEL *a1, uint64_t a2)
{
  sub_25346C7A0(v2, (SEL *)&selRef_label);
  if (v5)
  {
    unint64_t v6 = (void *)sub_253B096D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v7 = sub_25346C7A0(v2, a1);
  uint64_t v9 = v8;
  id v10 = objc_allocWithZone(MEMORY[0x263F0FD20]);
  return sub_253AF7AC8(v7, v9, a2, v6);
}

id sub_253473FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = (void *)sub_253B096D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = objc_msgSend(v3, sel_initWithValue_type_, v5, a3);

  return v6;
}

id sub_253474018(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = sub_253B052B0();
  uint64_t v17 = 0;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v16) != 1)
  {
    uint64_t v17 = (void *)sub_253B05270();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
  if (a4)
  {
    uint64_t v18 = (void *)sub_253B096D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (a7)
  {
    uint64_t v19 = (void *)sub_253B096D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (a9)
  {
    uint64_t v20 = (void *)sub_253B096D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (a10)
  {
    sub_25346C8E0(0, &qword_269CDB528);
    uint64_t v21 = (void *)sub_253B09A50();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = objc_msgSend(v24, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_aliases_suggestionType_, a1, v17, v18, a5, v19, v20, v21, a11);

  return v22;
}

unint64_t sub_2534741EC(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_253474210(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  sub_25346C8E0(0, a3);
  uint64_t v6 = sub_253B09A60();

  return v6;
}

uint64_t sub_253474284()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2534742C4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B09E80();
}

uint64_t sub_25347430C()
{
  return swift_arrayDestroy();
}

uint64_t sub_253474328(uint64_t a1)
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(*(void *)(v1 - 144), 1, 1, a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_253474368()
{
  return sub_253B09AD0();
}

uint64_t sub_253474384()
{
  return swift_slowAlloc();
}

uint64_t sub_2534743A0()
{
  return swift_slowAlloc();
}

uint64_t sub_2534743BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 - 144);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v4, 1, 1, a1);
}

uint64_t sub_2534743F4(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_253474400()
{
  return sub_253B08FA0();
}

uint64_t sub_253474434()
{
  return swift_allocObject();
}

uint64_t sub_25347444C(int a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = sub_253B096E0();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_253474520(unsigned __int16 a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1 - 27131 < 2) {
    return 0xD000000000000015;
  }
  if (a1 != 27126)
  {
    if (a1 == 27127) {
      return 0xD000000000000015;
    }
    return 0;
  }
  return result;
}

uint64_t sub_253474588(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B07B20();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v5);
  unint64_t v36 = (char *)&v27 - v10;
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v40 = MEMORY[0x263F8EE78];
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v35 = a2;
  uint64_t v31 = v12;
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v29 = a1 + 32;
    uint64_t v30 = a1;
    uint64_t v33 = v9 + 16;
    uint64_t v34 = a2 + 56;
    uint64_t v14 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v28 = v9;
    while (v13 < *(void *)(a1 + 16))
    {
      unint64_t v32 = v13;
      sub_253476B80(v29 + 40 * v13, (uint64_t)&v38);
      sub_253472068(&v38, v39);
      sub_253B081E0();
      uint64_t v15 = v35;
      if (*(void *)(v35 + 16)
        && (sub_253476BE4(&qword_269CDB570, 255, MEMORY[0x263F4E580]),
            uint64_t v16 = sub_253B095C0(),
            uint64_t v17 = -1 << *(unsigned char *)(v15 + 32),
            unint64_t v18 = v16 & ~v17,
            ((*(void *)(v34 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) != 0))
      {
        uint64_t v19 = ~v17;
        uint64_t v20 = *(void *)(v28 + 72);
        uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v21(v7, *(void *)(v15 + 48) + v20 * v18, v4);
          sub_253476BE4(&qword_269CDB578, 255, MEMORY[0x263F4E580]);
          char v22 = sub_253B096B0();
          uint64_t v23 = *v14;
          (*v14)(v7, v4);
          if (v22) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v19;
          uint64_t v15 = v35;
          if (((*(void *)(v34 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
            goto LABEL_9;
          }
        }
        v23(v36, v4);
        sub_253476C2C(&v38, (uint64_t)v37);
        uint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2539E65C0(0, *(void *)(v24 + 16) + 1, 1);
          uint64_t v24 = v40;
        }
        a1 = v30;
        unint64_t v26 = *(void *)(v24 + 16);
        unint64_t v25 = *(void *)(v24 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_2539E65C0((void *)(v25 > 1), v26 + 1, 1);
          uint64_t v24 = v40;
        }
        *(void *)(v24 + 16) = v26 + 1;
        uint64_t result = sub_253476C2C(v37, v24 + 40 * v26 + 32);
      }
      else
      {
LABEL_9:
        (*v14)(v36, v4);
        uint64_t result = _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v38);
        a1 = v30;
      }
      unint64_t v13 = v32 + 1;
      if (v32 + 1 == v31)
      {
        uint64_t v11 = v40;
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t EntitySpanMatchService.__allocating_init(maxMatchTasks:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  EntitySpanMatchService.init(maxMatchTasks:)(a1);
  return v2;
}

uint64_t EntitySpanMatchService.init(maxMatchTasks:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_defaultActor_initialize();
  sub_253462A5C(&qword_26B24A570);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_253B22690;
  uint64_t v5 = type metadata accessor for SiriEntityMatcherShim();
  uint64_t v6 = SiriEntityMatcherShim.__allocating_init(maxEntityCount:)(0, 1);
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = sub_253476BE4((unint64_t *)&unk_26B249250, 255, (void (*)(uint64_t))type metadata accessor for SiriEntityMatcherShim);
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = type metadata accessor for GlobalEntityMatcherShim();
  swift_allocObject();
  uint64_t v8 = GlobalEntityMatcherShim.init(maxEntityCount:)(0, 1);
  *(void *)(v4 + 96) = v7;
  *(void *)(v4 + 104) = sub_253476BE4(&qword_26B2493C0, 255, (void (*)(uint64_t))type metadata accessor for GlobalEntityMatcherShim);
  *(void *)(v4 + 72) = v8;
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = a1;
  return v2;
}

uint64_t EntitySpanMatchService.__allocating_init(matcherRegistry:maxMatchTasks:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = a2;
  return v4;
}

uint64_t EntitySpanMatchService.init(matcherRegistry:maxMatchTasks:)(uint64_t a1, uint64_t a2)
{
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return v2;
}

uint64_t sub_253474B38()
{
  sub_253477168();
  v1[8] = v2;
  v1[9] = v0;
  v1[6] = v3;
  v1[7] = v4;
  uint64_t v5 = sub_253B089F0();
  v1[10] = v5;
  sub_25346CB34(v5);
  v1[11] = v6;
  v1[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_253474BD4, v0, 0);
}

uint64_t sub_253474BD4()
{
  uint64_t v23 = v0;
  sub_253B08320();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_253B089D0();
  os_log_type_t v2 = sub_253B09D70();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = v0[7];
    uint64_t v4 = v0[6];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = sub_2534772AC();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    v0[5] = sub_253464DF8(v4, v3, &v22);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v1, v2, "[EntitySpanMatchService] start finding entity matches for %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    sub_2534659CC();
    v7(v6);
  }
  else
  {
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v12 = v0[8];
  uint64_t v11 = v0[9];
  uint64_t v13 = *(void *)(v11 + 112);
  v0[2] = v13;
  swift_bridgeObjectRetain();
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_253474588(v13, v12);
    v0[2] = v13;
    uint64_t v11 = v0[9];
  }
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  v0[3] = MEMORY[0x263F8EE78];
  if (*(void *)(v13 + 16) >= *(void *)(v11 + 120)) {
    uint64_t v16 = *(void *)(v11 + 120);
  }
  else {
    uint64_t v16 = *(void *)(v13 + 16);
  }
  v0[4] = v16;
  sub_253462A5C(&qword_269CDB548);
  sub_253476BE4(&qword_269CDB550, v17, (void (*)(uint64_t))type metadata accessor for EntitySpanMatchService);
  unint64_t v18 = (void *)swift_task_alloc();
  v0[13] = v18;
  v18[2] = v16;
  v18[3] = v0 + 2;
  v18[4] = v15;
  v18[5] = v14;
  v18[6] = v0 + 4;
  v18[7] = v0 + 3;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[14] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_253474F00;
  uint64_t v24 = MEMORY[0x263F8EE60] + 8;
  sub_253477238();
  return MEMORY[0x270FA22B8]();
}

uint64_t sub_253474F00()
{
  sub_253477168();
  sub_253477088();
  uint64_t v3 = v2;
  sub_2534771FC();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_253477158();
  void *v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = sub_253475060;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 72);
    swift_task_dealloc();
    uint64_t v8 = sub_253474FF0;
    uint64_t v7 = v9;
  }
  return MEMORY[0x270FA2498](v8, v7, 0);
}

uint64_t sub_253474FF0()
{
  sub_253477168();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_253475060()
{
  sub_253477168();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_2534771C0();
  return v0();
}

uint64_t type metadata accessor for EntitySpanMatchService()
{
  return self;
}

uint64_t sub_2534750F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[43] = a7;
  v8[44] = a8;
  v8[41] = a5;
  v8[42] = a6;
  v8[39] = a3;
  v8[40] = a4;
  v8[38] = a2;
  sub_253462A5C(&qword_26B24A398);
  v8[45] = swift_task_alloc();
  v8[46] = swift_task_alloc();
  v8[47] = swift_task_alloc();
  v8[48] = swift_task_alloc();
  uint64_t v9 = sub_253B07B20();
  v8[49] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[50] = v10;
  v8[51] = *(void *)(v10 + 64);
  v8[52] = swift_task_alloc();
  v8[53] = swift_task_alloc();
  v8[54] = swift_task_alloc();
  uint64_t v11 = sub_253462A5C(&qword_269CDB580);
  v8[55] = v11;
  v8[56] = *(void *)(v11 - 8);
  v8[57] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_2534752A0, 0, 0);
}

uint64_t sub_2534752A0()
{
  uint64_t v1 = *(void *)(v0 + 312);
  if (v1 < 0)
  {
LABEL_21:
    __break(1u);
    return MEMORY[0x270FA2058]();
  }
  uint64_t v2 = *(void *)(v0 + 408);
  if (v1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (void *)(v0 + 16);
    uint64_t v30 = (long long *)(v0 + 56);
    uint64_t v5 = v2 + 7;
    uint64_t v29 = *(void *)(v0 + 400);
    uint64_t v6 = 32;
    uint64_t v31 = v2 + 7;
    while (1)
    {
      uint64_t v7 = **(void **)(v0 + 320);
      if (v3 >= *(void *)(v7 + 16)) {
        break;
      }
      unint64_t v36 = v3;
      uint64_t v8 = *(void *)(v0 + 424);
      uint64_t v9 = *(void *)(v0 + 432);
      uint64_t v10 = *(void *)(v0 + 384);
      uint64_t v11 = *(void *)(v0 + 392);
      uint64_t v34 = *(void *)(v0 + 376);
      uint64_t v35 = v6;
      uint64_t v32 = *(void *)(v0 + 328);
      uint64_t v33 = *(void *)(v0 + 336);
      sub_253476B80(v7 + v6, (uint64_t)v4);
      sub_253472068(v4, *(void *)(v0 + 40));
      sub_253B081E0();
      uint64_t v12 = sub_253B09BF0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v10, 1, 1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v8, v9, v11);
      sub_253476B80((uint64_t)v4, (uint64_t)v30);
      unint64_t v13 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      unint64_t v14 = (v13 + v5) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v15 + v13, v8, v11);
      sub_253476C2C(v30, v15 + v14);
      uint64_t v16 = (void *)(v15 + ((v14 + 47) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v16 = v32;
      v16[1] = v33;
      sub_253476D20(v10, v34);
      LODWORD(v14) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v34, 1, v12);
      swift_bridgeObjectRetain();
      if (v14 == 1)
      {
        sub_253476D88(*(void *)(v0 + 376));
      }
      else
      {
        sub_253B09BE0();
        sub_2534659CC();
        v17();
      }
      if (*(void *)(v15 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v18 = sub_253B09BA0();
        uint64_t v20 = v19;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v4 = (void *)(v0 + 16);
      uint64_t v21 = **(void **)(v0 + 304);
      sub_253462A5C(&qword_269CDB548);
      uint64_t v22 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v22 = v0 + 176;
        *(void *)(v0 + 176) = 0;
        *(void *)(v0 + 184) = 0;
        *(void *)(v0 + 192) = v18;
        *(void *)(v0 + 200) = v20;
      }
      unint64_t v3 = v36 + 1;
      uint64_t v23 = *(void *)(v0 + 384);
      uint64_t v24 = *(void *)(v0 + 312);
      *(void *)(v0 + 264) = 1;
      *(void *)(v0 + 272) = v22;
      *(void *)(v0 + 280) = v21;
      swift_task_create();
      swift_release();
      sub_253476D88(v23);
      sub_2534659CC();
      v25();
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 16);
      uint64_t v6 = v35 + 40;
      BOOL v26 = v36 + 1 == v24;
      uint64_t v5 = v31;
      if (v26) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = v2 + 7;
LABEL_17:
  *(void *)(v0 + 464) = v5;
  *(void *)(v0 + 472) = sub_253462A5C(&qword_269CDB548);
  sub_253462A5C(&qword_26B24A590);
  sub_253B09C10();
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_2534756D4;
  sub_25347719C();
  return MEMORY[0x270FA2058]();
}

uint64_t sub_2534756D4()
{
  sub_253477168();
  sub_253477088();
  uint64_t v1 = *v0;
  sub_253477158();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_25347719C();
  return MEMORY[0x270FA2498](v3, v4, v5);
}

uint64_t sub_2534757B0()
{
  uint64_t v1 = *(void *)(v0 + 288);
  if (v1)
  {
    uint64_t v2 = **(void **)(v0 + 344);
    uint64_t v3 = **(void **)(v0 + 320);
    if (v2 >= *(void *)(v3 + 16)) {
      goto LABEL_17;
    }
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 416);
      uint64_t v5 = *(void *)(v0 + 424);
      uint64_t v6 = *(void *)(v0 + 400);
      uint64_t v28 = *(void *)(v0 + 288);
      uint64_t v29 = *(void *)(v0 + 392);
      uint64_t v7 = *(void *)(v0 + 368);
      uint64_t v34 = *(void *)(v0 + 360);
      uint64_t v33 = *(void *)(v0 + 336);
      uint64_t v31 = *(void *)(v0 + 464);
      uint64_t v32 = *(void *)(v0 + 328);
      sub_253476B80(v3 + 40 * v2 + 32, v0 + 136);
      sub_253472068((void *)(v0 + 136), *(void *)(v0 + 160));
      sub_253B081E0();
      uint64_t v30 = sub_253B09BF0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v7, 1, 1, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v29);
      sub_253476B80(v0 + 136, v0 + 96);
      unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      unint64_t v9 = (v8 + v31) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v8, v5, v29);
      sub_253476C2C((long long *)(v0 + 96), v10 + v9);
      uint64_t v11 = (void *)(v10 + ((v9 + 47) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v11 = v32;
      v11[1] = v33;
      sub_253476D20(v7, v34);
      LODWORD(v7) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v34, 1, v30);
      swift_bridgeObjectRetain();
      if (v7 == 1)
      {
        sub_253476D88(*(void *)(v0 + 360));
      }
      else
      {
        sub_253B09BE0();
        sub_2534659CC();
        v16(v15);
      }
      if (*(void *)(v10 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v17 = sub_253B09BA0();
        uint64_t v19 = v18;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v20 = **(void **)(v0 + 304);
      uint64_t v21 = v19 | v17;
      if (v19 | v17)
      {
        uint64_t v21 = v0 + 208;
        *(void *)(v0 + 208) = 0;
        *(void *)(v0 + 216) = 0;
        *(void *)(v0 + 224) = v17;
        *(void *)(v0 + 232) = v19;
      }
      uint64_t v22 = *(void *)(v0 + 416);
      uint64_t v24 = *(void *)(v0 + 392);
      uint64_t v23 = *(void *)(v0 + 400);
      uint64_t v25 = *(void *)(v0 + 368);
      BOOL v26 = *(void **)(v0 + 344);
      *(void *)(v0 + 240) = 1;
      *(void *)(v0 + 248) = v21;
      *(void *)(v0 + 256) = v20;
      swift_task_create();
      swift_release();
      sub_253476D88(v25);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      if (!__OFADD__(*v26, 1))
      {
        **(void **)(v0 + 344) = *v26 + 1;
        _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + 136);
        uint64_t v1 = v28;
LABEL_17:
        sub_253477EB8(v1);
        uint64_t v27 = (void *)swift_task_alloc();
        *(void *)(v0 + 480) = v27;
        *uint64_t v27 = v0;
        v27[1] = sub_2534756D4;
        sub_25347719C();
        return MEMORY[0x270FA2058]();
      }
    }
    __break(1u);
    return MEMORY[0x270FA2058]();
  }
  sub_2534771CC();
  sub_253477128();
  v12();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_253475C08()
{
  sub_2534771CC();
  sub_253477128();
  v0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_2534771C0();
  return v1();
}

uint64_t sub_253475CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v9 = v2[7];
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_25347720C(v11);
  *uint64_t v12 = v13;
  v12[1] = sub_253477080;
  return sub_2534750F8(a1, a2, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_253475DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[6] = a1;
  uint64_t v8 = sub_253B07B20();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  uint64_t v9 = sub_253B089F0();
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_253475EEC, 0, 0);
}

uint64_t sub_253475EEC()
{
  uint64_t v19 = v0;
  sub_253477254();
  uint64_t v1 = sub_253477100();
  v2(v1);
  uint64_t v3 = (void *)sub_253B089D0();
  os_log_type_t v4 = sub_253B09D60();
  if (sub_25347721C(v4))
  {
    uint64_t v5 = (_DWORD *)sub_2534770CC();
    uint64_t v18 = sub_2534772AC();
    *uint64_t v5 = 136315138;
    uint64_t v6 = sub_253B07B10();
    uint64_t v8 = (void (*)(void))v7;
    uint64_t v9 = sub_253464DF8(v6, v7, &v18);
    sub_253477174(v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_2534771E4();
    ((void (*)(uint64_t))v8)(v10);
    sub_25347728C(&dword_253460000, v11, v12, "[EntitySpanMatchService] finding span matches with %s");
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    uint64_t v3 = *(void **)(v17 + 8);
    sub_253477128();
    ((void (*)(void))v3)();
  }
  else
  {
    uint64_t v8 = *(void (**)(void))(*(void *)(v0 + 96) + 8);
    sub_253477128();
    v8();

    uint64_t v13 = sub_253477278();
    ((void (*)(uint64_t))v3)(v13);
  }
  *(void *)(v0 + 168) = v3;
  *(void *)(v0 + 176) = v8;
  sub_253472068(*(void **)(v0 + 64), *(void *)(*(void *)(v0 + 64) + 24));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_253476098;
  sub_2534771A8();
  sub_253477238();
  return MEMORY[0x270F41980]();
}

uint64_t sub_253476098()
{
  sub_253477088();
  uint64_t v3 = v2;
  sub_2534771FC();
  *os_log_type_t v4 = v3;
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 192) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_2534771C0();
    return v6();
  }
  else
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v8, v9, v10);
  }
}

uint64_t sub_2534761C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  v7[6] = a1;
  uint64_t v8 = sub_253B07B20();
  v7[11] = v8;
  v7[12] = *(void *)(v8 - 8);
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  uint64_t v9 = sub_253B089F0();
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25347630C, 0, 0);
}

uint64_t sub_25347630C()
{
  uint64_t v19 = v0;
  sub_253477254();
  uint64_t v1 = sub_253477100();
  v2(v1);
  uint64_t v3 = (void *)sub_253B089D0();
  os_log_type_t v4 = sub_253B09D60();
  if (sub_25347721C(v4))
  {
    uint64_t v5 = (_DWORD *)sub_2534770CC();
    uint64_t v18 = sub_2534772AC();
    *uint64_t v5 = 136315138;
    uint64_t v6 = sub_253B07B10();
    uint64_t v8 = (void (*)(void))v7;
    uint64_t v9 = sub_253464DF8(v6, v7, &v18);
    sub_253477174(v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_2534771E4();
    ((void (*)(uint64_t))v8)(v10);
    sub_25347728C(&dword_253460000, v11, v12, "[EntitySpanMatchService] finding span matches with %s");
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    uint64_t v3 = *(void **)(v17 + 8);
    sub_253477128();
    ((void (*)(void))v3)();
  }
  else
  {
    uint64_t v8 = *(void (**)(void))(*(void *)(v0 + 96) + 8);
    sub_253477128();
    v8();

    uint64_t v13 = sub_253477278();
    ((void (*)(uint64_t))v3)(v13);
  }
  *(void *)(v0 + 168) = v3;
  *(void *)(v0 + 176) = v8;
  sub_253472068(*(void **)(v0 + 64), *(void *)(*(void *)(v0 + 64) + 24));
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v14;
  *unint64_t v14 = v0;
  v14[1] = sub_2534764B8;
  sub_2534771A8();
  sub_253477238();
  return MEMORY[0x270F41980]();
}

uint64_t sub_2534764B8()
{
  sub_253477088();
  uint64_t v3 = v2;
  sub_2534771FC();
  *os_log_type_t v4 = v3;
  *os_log_type_t v4 = *v1;
  *(void *)(v3 + 192) = v5;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_2534771C0();
    return v6();
  }
  else
  {
    sub_25347719C();
    return MEMORY[0x270FA2498](v8, v9, v10);
  }
}

uint64_t sub_2534765E8()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 56);
  sub_253B08320();
  v1(v2, v4, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_253B089D0();
  os_log_type_t v6 = sub_253B09D60();
  if (sub_25347721C(v6))
  {
    uint64_t v7 = *(void *)(v0 + 192);
    uint64_t v8 = sub_2534772AC();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218498;
    *(void *)(v0 + 16) = *(void *)(v7 + 16);
    uint64_t v23 = v22;
    sub_253B09E80();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v9 = sub_253B07B10();
    *(void *)(v0 + 24) = sub_253464DF8(v9, v10, &v23);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    sub_253477128();
    v11();
    *(_WORD *)(v8 + 22) = 2080;
    uint64_t v12 = sub_253B07B60();
    uint64_t v13 = MEMORY[0x25A268AE0](v7, v12);
    *(void *)(v0 + 32) = sub_253464DF8(v13, v14, &v23);
    sub_253B09E80();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v5, (os_log_type_t)v4, "[EntitySpanMatchService] found %ld span matches with %s: %s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    sub_2534659B4();
    sub_2534659B4();

    sub_253477128();
    v15();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v18 = *(void *)(v0 + 120);
    sub_2534659CC();
    v19();
    swift_bridgeObjectRelease_n();

    v16(v17, v18);
  }
  **(void **)(v0 + 48) = *(void *)(v0 + 192);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t EntitySpanMatchService.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t EntitySpanMatchService.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x270FA2418](v0);
}

uint64_t EntitySpanMatchService.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_25347693C()
{
  return EntitySpanMatchService.unownedExecutor.getter();
}

uint64_t method lookup function for EntitySpanMatchService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EntitySpanMatchService);
}

uint64_t dispatch thunk of EntitySpanMatchService.__allocating_init(maxMatchTasks:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of EntitySpanMatchService.__allocating_init(matcherRegistry:maxMatchTasks:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of EntitySpanMatchService.findMatches(query:matcherOverrides:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 144)
                                                          + **(int **)(*(void *)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_253476AB4;
  return v10(a1, a2, a3);
}

uint64_t sub_253476AB4()
{
  sub_253477168();
  uint64_t v2 = v1;
  sub_253477088();
  uint64_t v3 = *v0;
  sub_253477158();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_253476B80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_253476BE4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253476C2C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_253476C48()
{
  uint64_t v0 = sub_253B07B20();
  sub_25346CB34(v0);
  sub_2534770A0();
  uint64_t v1 = swift_task_alloc();
  long long v2 = (void *)sub_25347720C(v1);
  *long long v2 = v3;
  v2[1] = sub_253477080;
  uint64_t v4 = sub_253477134();
  return sub_253475DA8(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_253476D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B24A398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_253476D88(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_26B24A398);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_253476DEC()
{
  uint64_t v1 = sub_253B07B20();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0 + v6);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_253476EE8()
{
  uint64_t v0 = sub_253B07B20();
  sub_25346CB34(v0);
  sub_2534770A0();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_25347720C(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_253476FC0;
  uint64_t v4 = sub_253477134();
  return sub_2534761C8(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_253476FC0()
{
  sub_253477168();
  sub_253477088();
  uint64_t v1 = *v0;
  sub_253477158();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_2534771C0();
  return v3();
}

uint64_t sub_2534770CC()
{
  return swift_slowAlloc();
}

uint64_t sub_253477100()
{
  *(void *)(v1 + 152) = *(void *)(v2 + 16);
  *(void *)(v1 + 160) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v0;
}

uint64_t sub_253477134()
{
  return v0;
}

uint64_t sub_253477174(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return sub_253B09E80();
}

uint64_t sub_2534771A8()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_2534771C0()
{
  return v0 + 8;
}

uint64_t sub_2534771E4()
{
  return v0;
}

uint64_t sub_25347720C(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

BOOL sub_25347721C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_253477254()
{
  return sub_253B08320();
}

uint64_t sub_253477278()
{
  return v0;
}

void sub_25347728C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_2534772AC()
{
  return swift_slowAlloc();
}

uint64_t IntelligenceFlowError.errorHierarchy.getter()
{
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_253B22CB0;
  *(void *)(v0 + 32) = sub_253B05920();
  sub_253B09AA0();
  return v0;
}

uint64_t sub_253477334(uint64_t a1)
{
  uint64_t v2 = sub_2534782FC(&qword_269CDB5B0, MEMORY[0x263F4BF78]);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_2534773A0(uint64_t a1)
{
  uint64_t v2 = sub_2534782FC(&qword_269CDB5B0, MEMORY[0x263F4BF78]);
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t NSError.errorHierarchy.getter()
{
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_253B22CB0;
  *(void *)(v1 + 32) = v0;
  uint64_t v4 = v1;
  sub_253B09AA0();
  id v2 = v0;
  return v4;
}

uint64_t sub_253477488()
{
  return NSError.errorHierarchy.getter();
}

uint64_t sub_2534774AC()
{
  uint64_t v0 = type metadata accessor for SessionCoordinatorError();
  MEMORY[0x270FA5388](v0);
  id v2 = (char *)&v14[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B22CB0;
  sub_2534782A8();
  sub_2534782FC(&qword_269CDB5E0, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  uint64_t v4 = sub_253B0A4A0();
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    sub_253478398((uint64_t)v2, (void (*)(void))type metadata accessor for SessionCoordinatorError);
  }
  else
  {
    os_log_type_t v5 = (void *)swift_allocError();
    sub_253478344();
  }
  uint64_t v6 = sub_253B052C0();

  *(void *)(v3 + 32) = v6;
  v14[0] = v3;
  sub_253B09AA0();
  uint64_t v7 = v14[0];
  SessionCoordinatorError.innerError.getter(v14);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_253472068(v14, v15);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v13 = v7;
  sub_253477EF8(v10);
  uint64_t v11 = v13;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v14);
  return v11;
}

uint64_t sub_25347769C()
{
  uint64_t v0 = type metadata accessor for ExecutorError();
  MEMORY[0x270FA5388](v0);
  id v2 = (char *)&v14[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B22CB0;
  sub_2534782A8();
  sub_2534782FC(&qword_269CDB5F0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  uint64_t v4 = sub_253B0A4A0();
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    sub_253478398((uint64_t)v2, (void (*)(void))type metadata accessor for ExecutorError);
  }
  else
  {
    os_log_type_t v5 = (void *)swift_allocError();
    sub_253478344();
  }
  uint64_t v6 = sub_253B052C0();

  *(void *)(v3 + 32) = v6;
  v14[0] = v3;
  sub_253B09AA0();
  uint64_t v7 = v14[0];
  ExecutorError.innerError.getter(v14);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_253472068(v14, v15);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v13 = v7;
  sub_253477EF8(v10);
  uint64_t v11 = v13;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v14);
  return v11;
}

uint64_t sub_25347788C()
{
  uint64_t v0 = type metadata accessor for SessionError();
  MEMORY[0x270FA5388](v0);
  id v2 = (char *)&v14[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B22CB0;
  sub_2534782A8();
  sub_2534782FC(&qword_269CDB5D8, (void (*)(uint64_t))type metadata accessor for SessionError);
  uint64_t v4 = sub_253B0A4A0();
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    sub_253478398((uint64_t)v2, (void (*)(void))type metadata accessor for SessionError);
  }
  else
  {
    os_log_type_t v5 = (void *)swift_allocError();
    sub_253478344();
  }
  uint64_t v6 = sub_253B052C0();

  *(void *)(v3 + 32) = v6;
  v14[0] = v3;
  sub_253B09AA0();
  uint64_t v7 = v14[0];
  SessionError.innerError.getter((uint64_t)v14);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_253472068(v14, v15);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v13 = v7;
  sub_253477EF8(v10);
  uint64_t v11 = v13;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v14);
  return v11;
}

uint64_t sub_253477A7C()
{
  uint64_t v0 = type metadata accessor for PlannerError();
  MEMORY[0x270FA5388](v0);
  id v2 = (char *)&v14[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_253B22CB0;
  sub_2534782A8();
  sub_2534782FC(&qword_269CDB5E8, (void (*)(uint64_t))type metadata accessor for PlannerError);
  uint64_t v4 = sub_253B0A4A0();
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    sub_253478398((uint64_t)v2, (void (*)(void))type metadata accessor for PlannerError);
  }
  else
  {
    os_log_type_t v5 = (void *)swift_allocError();
    sub_253478344();
  }
  uint64_t v6 = sub_253B052C0();

  *(void *)(v3 + 32) = v6;
  v14[0] = v3;
  sub_253B09AA0();
  uint64_t v7 = v14[0];
  PlannerError.innerError.getter(v14);
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  sub_253472068(v14, v15);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v13 = v7;
  sub_253477EF8(v10);
  uint64_t v11 = v13;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v14);
  return v11;
}

uint64_t ErrorHierarchyStep.errorHierarchy.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CDB5A8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_253B22CB0;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  uint64_t v10 = sub_253B0A4A0();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
  }
  else
  {
    uint64_t v11 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v12, v8, a1);
  }
  uint64_t v13 = sub_253B052C0();

  *(void *)(v9 + 32) = v13;
  v21[0] = v9;
  sub_253B09AA0();
  uint64_t v14 = v21[0];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v21, a1, a2);
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  sub_253472068(v21, v22);
  unint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  uint64_t v20 = v14;
  sub_253477EF8(v17);
  uint64_t v18 = v20;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v21);
  return v18;
}

void sub_253477E84(uint64_t a1)
{
}

void sub_253477EB8(uint64_t a1)
{
}

uint64_t sub_253477EF8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x25A269070](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t result = sub_253478ECC(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(uint64_t, void, uint64_t))sub_2539DFEAC, &qword_269CDB618, &qword_269CDB610, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_253AF7DE4);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_253B09AA0();
}

uint64_t sub_2534780F8(uint64_t a1)
{
  uint64_t result = sub_2534782FC(&qword_269CDB5B0, MEMORY[0x263F4BF78]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_253478150()
{
  return sub_2534782FC(&qword_269CDB5B8, MEMORY[0x263F4BF78]);
}

uint64_t sub_253478198(uint64_t a1)
{
  uint64_t result = sub_2534782FC(&qword_269CDB5C0, (void (*)(uint64_t))sub_2534781F0);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2534781F0()
{
  unint64_t result = qword_269CDB5C8;
  if (!qword_269CDB5C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269CDB5C8);
  }
  return result;
}

uint64_t sub_253478230()
{
  return sub_2534782FC(&qword_269CDB5D0, (void (*)(uint64_t))sub_2534781F0);
}

uint64_t dispatch thunk of ErrorHierarchy.errorHierarchy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ErrorHierarchyStep.innerError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2534782A8()
{
  uint64_t v2 = sub_2534791A8();
  v3(v2);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t sub_2534782FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253478344()
{
  uint64_t v2 = sub_2534791A8();
  v3(v2);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t sub_253478398(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void sub_2534783F0()
{
  sub_25347913C();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_253479170() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_2534791BC();
    sub_2535228AC();
    uint64_t v2 = v6;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_253479150();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v8 = sub_253479188();
  sub_2539DFBF8(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_253479164();
  if (!v5)
  {
    *(void *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_25347849C(uint64_t a1)
{
}

void sub_2534784DC(uint64_t a1)
{
}

void sub_253478510(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_253479198();
  if (v9)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v10 = v8;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  if (!sub_253479170() || v4 > *(void *)(v3 + 24) >> 1)
  {
    sub_2534791BC();
    uint64_t v3 = v12();
  }
  if (!*(void *)(v1 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = (*(void *)(v3 + 24) >> 1) - v13;
  uint64_t v15 = *(void *)(sub_253462A5C(v10) - 8);
  if (v14 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v11(v1 + v16, v5, v3 + v16 + *(void *)(v15 + 72) * v13);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v2 = v3;
    return;
  }
  sub_253479164();
  if (!v9)
  {
    *(void *)(v3 + 16) = v17;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_253478634(uint64_t a1)
{
}

uint64_t sub_253478674(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_253B09800();
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v10 = v6;
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v11 = *(void *)(v7 + 24) >> 1, v11 < v9))
  {
    sub_253523380();
    uint64_t v7 = v12;
    uint64_t v11 = *(void *)(v12 + 24) >> 1;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v14 = v11 - v13;
  uint64_t v15 = (uint64_t)sub_253478E10(&v27, (uint64_t *)(v7 + 16 * v13 + 32), v11 - v13, a1, a2);
  if (v15 < v10) {
    goto LABEL_12;
  }
  if (v15 >= 1)
  {
    uint64_t v16 = *(void *)(v7 + 16);
    BOOL v17 = __OFADD__(v16, v15);
    uint64_t v18 = v16 + v15;
    if (v17)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v7 + 16) = v18;
  }
  if (v15 == v14)
  {
LABEL_13:
    a1 = *(void *)(v7 + 16);
    uint64_t v20 = sub_253B09890();
    if (!v21) {
      goto LABEL_10;
    }
    while (1)
    {
      uint64_t v22 = *(void *)(v7 + 24) >> 1;
      if (v22 < a1 + 1)
      {
        uint64_t v24 = v20;
        uint64_t v25 = v21;
        sub_253523380();
        uint64_t v21 = v25;
        uint64_t v7 = v26;
        uint64_t v20 = v24;
        uint64_t v22 = *(void *)(v7 + 24) >> 1;
      }
      if (a1 < v22) {
        break;
      }
LABEL_20:
      *(void *)(v7 + 16) = a1;
    }
    uint64_t v23 = (void *)(v7 + 16 * a1 + 40);
    while (1)
    {
      *(v23 - 1) = v20;
      void *v23 = v21;
      ++a1;
      uint64_t v20 = sub_253B09890();
      if (!v21) {
        break;
      }
      v23 += 2;
      if (a1 >= v22) {
        goto LABEL_20;
      }
    }
LABEL_22:
    *(void *)(v7 + 16) = a1;
  }
LABEL_10:
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v7;
  return result;
}

void sub_253478814()
{
  sub_25347913C();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_253479170() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_253523590();
    uint64_t v2 = v6;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_253479150();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = (char *)sub_253479188();
  sub_2539E03CC(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_253479164();
  if (!v5)
  {
    *(void *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_2534788C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a4 >> 1;
  uint64_t v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_253479198();
  if (v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v9;
  if (!sub_253479170() || (uint64_t v14 = *(void *)(v5 + 24) >> 1, v14 < v6))
  {
    sub_253523590();
    uint64_t v5 = v15;
    uint64_t v14 = *(void *)(v15 + 24) >> 1;
  }
  if (v7 == v12)
  {
    if (v8 <= 0)
    {
LABEL_13:
      swift_unknownObjectRelease();
      *uint64_t v4 = v5;
      return;
    }
    __break(1u);
  }
  uint64_t v16 = *(void *)(v5 + 16);
  if (v14 - v16 < v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_2539E03CC((char *)(v13 + 2 * v12), v8, (char *)(v5 + 2 * v16 + 32));
  if (v8 <= 0) {
    goto LABEL_13;
  }
  sub_253479164();
  if (!v11)
  {
    *(void *)(v5 + 16) = v17;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
}

void sub_2534789BC()
{
  sub_25347913C();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!sub_253479170() || v4 > *(void *)(v2 + 24) >> 1)
  {
    sub_2534791BC();
    sub_253523678();
    uint64_t v2 = v6;
  }
  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  sub_253479150();
  if (v7 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = (void *)sub_253479188();
  sub_2539E0478(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v2;
    return;
  }
  sub_253479164();
  if (!v5)
  {
    *(void *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void sub_253478A68(uint64_t a1)
{
}

void sub_253478AA8(uint64_t a1)
{
}

void sub_253478AE8(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_253479198();
  if (v9)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  if (!sub_253479170() || v4 > *(void *)(v3 + 24) >> 1)
  {
    sub_2534791BC();
    uint64_t v3 = v12();
  }
  if (!*(void *)(v1 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = (*(void *)(v3 + 24) >> 1) - v13;
  uint64_t v15 = *(void *)(v10(0) - 8);
  if (v14 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v11(v1 + v16, v5, v3 + v16 + *(void *)(v15 + 72) * v13);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v2 = v3;
    return;
  }
  sub_253479164();
  if (!v9)
  {
    *(void *)(v3 + 16) = v17;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_253478C10(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x25A269070](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t result = sub_253478ECC(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(uint64_t, void, uint64_t))sub_2539DFD94, &qword_269CDB600, &qword_269CDB5F8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_253AF7E34);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_253B09AA0();
}

void *sub_253478E10(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v12 = a4;
  unint64_t v13 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v14 = v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_14:
    *uint64_t v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (void *)v7;
  }
  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = sub_253B09890();
      if (!v11) {
        break;
      }
      ++v9;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_253478ECC(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_253B0A210();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (v13)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_253B0A210();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          uint64_t v17 = sub_2534790C4(a5, a6);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v15; ++i)
          {
            uint64_t v19 = sub_253462A5C(a6);
            uint64_t v20 = (void (*)(unsigned char *, void))a7(v23, i, a3, v19, v17);
            id v22 = *v21;
            v20(v23, 0);
            *(void *)(v13 + 8 * i) = v22;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v13);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_25347907C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_2534790C4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport18ErrorHierarchyStepPAAE9errorCodeSivg_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _s30IntelligenceFlowPlannerSupport18ErrorHierarchyStepPAAE11errorDomainSSvgZ_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_253479170()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_253479188()
{
  return v0 + 32;
}

uint64_t sub_2534791A8()
{
  return 0;
}

BOOL sub_2534791C8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_2534791D8()
{
  return sub_253B0A600();
}

uint64_t sub_253479200(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEF65747563657845)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25347930C()
{
  return 2;
}

uint64_t sub_253479314()
{
  return sub_253B0A630();
}

uint64_t sub_25347935C()
{
  return 0;
}

uint64_t sub_253479368(char a1)
{
  if (a1) {
    return 0x6F5464656C696166;
  }
  else {
    return 0x726568746FLL;
  }
}

BOOL sub_2534793A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2534791C8(*a1, *a2);
}

uint64_t sub_2534793B4()
{
  return sub_253479314();
}

uint64_t sub_2534793BC()
{
  return sub_2534791D8();
}

uint64_t sub_2534793C4()
{
  return sub_253B0A630();
}

uint64_t sub_253479408()
{
  return sub_253479368(*v0);
}

uint64_t sub_253479410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253479200(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253479438()
{
  return sub_25347935C();
}

uint64_t sub_253479458@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25347930C();
  *a1 = result;
  return result;
}

uint64_t sub_253479480(uint64_t a1)
{
  unint64_t v2 = sub_25347A270();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534794BC(uint64_t a1)
{
  unint64_t v2 = sub_25347A270();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534794F8()
{
  return 1;
}

uint64_t _s7ToolKit12TypeInstanceO30IntelligenceFlowPlannerSupportE06pythonC0SSvg_0()
{
  return 0;
}

uint64_t _s30IntelligenceFlowPlannerSupport17SafetyModeReleaseV2eeoiySbAC_ACtFZ_0()
{
  return 1;
}

uint64_t sub_25347952C()
{
  return sub_253B0A600();
}

uint64_t sub_253479554(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534795C4()
{
  return sub_253B0A630();
}

uint64_t sub_253479608()
{
  return 12383;
}

uint64_t sub_253479618@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2534794F8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_253479644(uint64_t a1)
{
  unint64_t v2 = sub_25347A2BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253479680(uint64_t a1)
{
  unint64_t v2 = sub_25347A2BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534796C8()
{
  return sub_253B0A630();
}

uint64_t sub_25347970C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253479554(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253479738()
{
  return sub_25347935C();
}

uint64_t sub_253479754@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s30IntelligenceFlowPlannerSupport17SafetyModeReleaseV2eeoiySbAC_ACtFZ_0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_253479780(uint64_t a1)
{
  unint64_t v2 = sub_25347A308();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534797BC(uint64_t a1)
{
  unint64_t v2 = sub_25347A308();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534797F8(uint64_t a1)
{
  uint64_t v2 = sub_25347AA44(&qword_269CDB6B8, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_253479864(uint64_t a1)
{
  uint64_t v2 = sub_25347AA44(&qword_269CDB6B8, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  return MEMORY[0x270EF2668](a1, v2);
}

void ExecutorError.innerError.getter(uint64_t *a1@<X8>)
{
  type metadata accessor for ExecutorError();
  sub_25347B88C();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  sub_253479B1C(v1, (uint64_t)&v14 - v7);
  uint64_t v9 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_253479B1C(v1, (uint64_t)v6);
    sub_25347AA44(&qword_269CDB5F0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
    uint64_t v10 = (void *)swift_allocError();
    sub_253479B80((uint64_t)v6, v11);
    uint64_t v12 = sub_253B052C0();
    a1[3] = sub_2534781F0();
    a1[4] = sub_25347AA44(&qword_269CDB628, (void (*)(uint64_t))sub_2534781F0);

    *a1 = v12;
  }
  else
  {
    a1[3] = v9;
    a1[4] = sub_25347AA44(&qword_269CDB620, MEMORY[0x263F4BF78]);
    sub_2534724A8(a1);
    sub_25347B88C();
    (*(void (**)(void))(v13 + 32))();
  }
}

uint64_t type metadata accessor for ExecutorError()
{
  uint64_t result = qword_26B248FC8;
  if (!qword_26B248FC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_253479B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecutorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_253479B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExecutorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ExecutorError.errorCodeValue.getter()
{
  uint64_t v1 = type metadata accessor for ExecutorError();
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_25346CC44();
  uint64_t v5 = v4 - v3;
  sub_253479B1C(v0, v4 - v3);
  uint64_t v6 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v5, 1, v6) == 1) {
    return 2;
  }
  sub_253479C7C(v5);
  return 1;
}

uint64_t sub_253479C7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExecutorError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static ExecutorError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05940();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_25346CC44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for ExecutorError();
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CC44();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = sub_253462A5C(&qword_269CDB630);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_25346CC44();
  uint64_t v20 = v19 - v18;
  uint64_t v22 = v19 - v18 + *(int *)(v21 + 56);
  sub_253479B1C(a1, v19 - v18);
  sub_253479B1C(a2, v22);
  sub_25347B84C(v20);
  if (!v24)
  {
    sub_253479B1C(v20, v15);
    sub_25347B84C(v22);
    if (!v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v22, v4);
      char v23 = sub_253B05930();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v25(v10, v4);
      v25(v15, v4);
      sub_253479C7C(v20);
      return v23 & 1;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v4);
LABEL_9:
    sub_253479EC4(v20);
    char v23 = 0;
    return v23 & 1;
  }
  sub_25347B84C(v22);
  if (!v24) {
    goto LABEL_9;
  }
  sub_253479C7C(v20);
  char v23 = 1;
  return v23 & 1;
}

uint64_t sub_253479EC4(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDB630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ExecutorError.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDB638);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDB640);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  uint64_t v4 = sub_253B05940();
  sub_253465998();
  uint64_t v22 = v5;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ExecutorError();
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  sub_253462A5C(&qword_269CDB648);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  sub_253472068(a1, a1[3]);
  sub_25347A270();
  sub_253B0A680();
  sub_253479B1C(v21, v14);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v4) == 1)
  {
    sub_25347A2BC();
    sub_253B0A3A0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v9, v14, v4);
    sub_25347A308();
    sub_253B0A3A0();
    sub_25347AA44(&qword_269CDB668, MEMORY[0x263F4BF78]);
    sub_253B0A440();
    sub_2534659CC();
    v20();
  }
  sub_2534659CC();
  v16();
  uint64_t v17 = sub_25347B838();
  return v18(v17);
}

unint64_t sub_25347A270()
{
  unint64_t result = qword_269CDB650;
  if (!qword_269CDB650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB650);
  }
  return result;
}

unint64_t sub_25347A2BC()
{
  unint64_t result = qword_269CDB658;
  if (!qword_269CDB658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB658);
  }
  return result;
}

unint64_t sub_25347A308()
{
  unint64_t result = qword_269CDB660;
  if (!qword_269CDB660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB660);
  }
  return result;
}

uint64_t ExecutorError.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  sub_253462A5C(&qword_269CDB670);
  sub_253465998();
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  uint64_t v52 = v5;
  sub_253462A5C(&qword_269CDB678);
  sub_253465998();
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  sub_25346CB04();
  uint64_t v54 = v8;
  uint64_t v9 = sub_253462A5C(&qword_269CDB680);
  sub_253465998();
  uint64_t v53 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for ExecutorError();
  sub_25347B88C();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v44 - v20;
  sub_253472068(a1, a1[3]);
  sub_25347A270();
  uint64_t v22 = v55;
  sub_253B0A660();
  if (v22) {
    goto LABEL_8;
  }
  id v44 = v19;
  uint64_t v45 = v21;
  uint64_t v46 = a1;
  uint64_t v23 = sub_253B0A390();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v55 = v14;
  if (!v24
    || (int v56 = *(unsigned __int8 *)(v23 + 32),
        sub_25347B790(1, v24, v23, v23 + 32, 0, (2 * v24) | 1),
        uint64_t v26 = v25,
        unint64_t v28 = v27,
        swift_bridgeObjectRelease(),
        v26 != v28 >> 1))
  {
    uint64_t v33 = v53;
    sub_253B0A090();
    swift_allocError();
    uint64_t v35 = v34;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v35 = v15;
    uint64_t v36 = v55;
    sub_253B0A2D0();
    sub_253B0A080();
    sub_25347B88C();
    (*(void (**)(uint64_t *))(v37 + 104))(v35);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v9);
    a1 = v46;
LABEL_8:
    uint64_t v38 = (uint64_t)a1;
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
  }
  if (v56)
  {
    char v58 = 1;
    sub_25347A2BC();
    sub_25347B86C();
    sub_2534659CC();
    v29();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v30();
    uint64_t v31 = sub_253B05940();
    uint64_t v32 = (uint64_t)v45;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v45, 1, 1, v31);
  }
  else
  {
    char v57 = 0;
    sub_25347A308();
    sub_25347B86C();
    uint64_t v40 = sub_253B05940();
    sub_25347AA44(&qword_269CDB690, MEMORY[0x263F4BF78]);
    uint64_t v41 = (uint64_t)v44;
    sub_253B0A370();
    sub_2534659CC();
    v42();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v43();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v41, 0, 1, v40);
    uint64_t v32 = (uint64_t)v45;
    sub_253479B80(v41, (uint64_t)v45);
  }
  sub_253479B80(v32, v51);
  uint64_t v38 = (uint64_t)v46;
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
}

uint64_t sub_25347A888@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ExecutorError.init(from:)(a1, a2);
}

uint64_t sub_25347A8A0(void *a1)
{
  return ExecutorError.encode(to:)(a1);
}

uint64_t sub_25347A8C0(void *a1)
{
  a1[1] = sub_25347AA44(&qword_269CDB698, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  a1[2] = sub_25347AA44(&qword_269CDB6A0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  a1[3] = sub_25347AA44(&qword_269CDB6A8, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  uint64_t result = sub_25347AA44(&qword_269CDB6B0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  a1[4] = result;
  return result;
}

uint64_t sub_25347A994(uint64_t a1)
{
  uint64_t result = sub_25347AA44(&qword_269CDB698, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347A9EC(uint64_t a1)
{
  uint64_t result = sub_25347AA44(&qword_269CDB6B8, (void (*)(uint64_t))type metadata accessor for ExecutorError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347AA44(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25347AA8C()
{
  return sub_25347AA44(&qword_269CDB5F0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
}

uint64_t *initializeBufferWithCopyOfBuffer for ExecutorError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_253B05940();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ExecutorError(uint64_t a1)
{
  uint64_t v2 = sub_253B05940();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ExecutorError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for ExecutorError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B05940();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for ExecutorError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for ExecutorError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B05940();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutorError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25347B07C);
}

uint64_t sub_25347B07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05940();
  unsigned int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ExecutorError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25347B0D8);
}

uint64_t sub_25347B0D8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_253B05940();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, v5, a3, v6);
}

uint64_t sub_25347B134(uint64_t a1)
{
  uint64_t v2 = sub_253B05940();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v2);
}

uint64_t sub_25347B178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05940();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, 1, v4);
}

uint64_t sub_25347B1C4()
{
  uint64_t result = sub_253B05940();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExecutorError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExecutorError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25347B390);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_25347B3B8(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutorError.CodingKeys()
{
  return &type metadata for ExecutorError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ExecutorError.OtherCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ExecutorError.OtherCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25347B4C4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutorError.OtherCodingKeys()
{
  return &type metadata for ExecutorError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for ExecutorError.FailedToExecuteCodingKeys()
{
  return &type metadata for ExecutorError.FailedToExecuteCodingKeys;
}

unint64_t sub_25347B510()
{
  unint64_t result = qword_269CDB6C0;
  if (!qword_269CDB6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6C0);
  }
  return result;
}

unint64_t sub_25347B560()
{
  unint64_t result = qword_269CDB6C8;
  if (!qword_269CDB6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6C8);
  }
  return result;
}

unint64_t sub_25347B5B0()
{
  unint64_t result = qword_269CDB6D0;
  if (!qword_269CDB6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6D0);
  }
  return result;
}

unint64_t sub_25347B600()
{
  unint64_t result = qword_269CDB6D8;
  if (!qword_269CDB6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6D8);
  }
  return result;
}

unint64_t sub_25347B650()
{
  unint64_t result = qword_269CDB6E0;
  if (!qword_269CDB6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6E0);
  }
  return result;
}

unint64_t sub_25347B6A0()
{
  unint64_t result = qword_269CDB6E8;
  if (!qword_269CDB6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6E8);
  }
  return result;
}

unint64_t sub_25347B6F0()
{
  unint64_t result = qword_269CDB6F0;
  if (!qword_269CDB6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6F0);
  }
  return result;
}

unint64_t sub_25347B740()
{
  unint64_t result = qword_269CDB6F8;
  if (!qword_269CDB6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB6F8);
  }
  return result;
}

uint64_t sub_25347B790(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport13ExecutorErrorO16errorDomainValueSSvgZ_0()
{
  return 0x726F747563657845;
}

uint64_t sub_25347B838()
{
  return v0;
}

uint64_t sub_25347B84C(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v1);
}

uint64_t sub_25347B86C()
{
  return sub_253B0A2C0();
}

uint64_t sub_25347B898(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5464656C696166 && a2 == 0xEC0000006E616C50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25347B998(char a1)
{
  if (a1) {
    return 0x6F5464656C696166;
  }
  else {
    return 0x726568746FLL;
  }
}

uint64_t sub_25347B9D4()
{
  return sub_25347B998(*v0);
}

uint64_t sub_25347B9DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25347B898(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25347BA04(uint64_t a1)
{
  unint64_t v2 = sub_25347C5E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347BA40(uint64_t a1)
{
  unint64_t v2 = sub_25347C5E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347BA7C(uint64_t a1)
{
  unint64_t v2 = sub_25347C630();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347BAB8(uint64_t a1)
{
  unint64_t v2 = sub_25347C630();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347BAF4(uint64_t a1)
{
  unint64_t v2 = sub_25347C67C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347BB30(uint64_t a1)
{
  unint64_t v2 = sub_25347C67C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347BB6C(uint64_t a1)
{
  uint64_t v2 = sub_25347CDBC(&qword_269CDB770, (void (*)(uint64_t))type metadata accessor for PlannerError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25347BBD8(uint64_t a1)
{
  uint64_t v2 = sub_25347CDBC(&qword_269CDB770, (void (*)(uint64_t))type metadata accessor for PlannerError);
  return MEMORY[0x270EF2668](a1, v2);
}

void PlannerError.innerError.getter(uint64_t *a1@<X8>)
{
  type metadata accessor for PlannerError();
  sub_25347B88C();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int v8 = (char *)&v14 - v7;
  sub_25347BE90(v1, (uint64_t)&v14 - v7);
  uint64_t v9 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9) == 1)
  {
    sub_25347BE90(v1, (uint64_t)v6);
    sub_25347CDBC(&qword_269CDB5E8, (void (*)(uint64_t))type metadata accessor for PlannerError);
    uint64_t v10 = (void *)swift_allocError();
    sub_25347BEF4((uint64_t)v6, v11);
    uint64_t v12 = sub_253B052C0();
    a1[3] = sub_2534781F0();
    a1[4] = sub_25347CDBC(&qword_269CDB628, (void (*)(uint64_t))sub_2534781F0);

    *a1 = v12;
  }
  else
  {
    a1[3] = v9;
    a1[4] = sub_25347CDBC(&qword_269CDB620, MEMORY[0x263F4BF78]);
    sub_2534724A8(a1);
    sub_25347B88C();
    (*(void (**)(void))(v13 + 32))();
  }
}

uint64_t type metadata accessor for PlannerError()
{
  uint64_t result = qword_26B248F38;
  if (!qword_26B248F38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25347BE90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25347BEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PlannerError.errorCodeValue.getter()
{
  uint64_t v1 = type metadata accessor for PlannerError();
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_25346CC44();
  uint64_t v5 = v4 - v3;
  sub_25347BE90(v0, v4 - v3);
  uint64_t v6 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v5, 1, v6) == 1) {
    return 2;
  }
  sub_25347BFF0(v5);
  return 1;
}

uint64_t sub_25347BFF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlannerError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static PlannerError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05940();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_25346CC44();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for PlannerError();
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CC44();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = sub_253462A5C(&qword_269CDB700);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_25346CC44();
  uint64_t v20 = v19 - v18;
  uint64_t v22 = v19 - v18 + *(int *)(v21 + 56);
  sub_25347BE90(a1, v19 - v18);
  sub_25347BE90(a2, v22);
  sub_25347B84C(v20);
  if (!v24)
  {
    sub_25347BE90(v20, v15);
    sub_25347B84C(v22);
    if (!v24)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v22, v4);
      char v23 = sub_253B05930();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v25(v10, v4);
      v25(v15, v4);
      sub_25347BFF0(v20);
      return v23 & 1;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v4);
LABEL_9:
    sub_25347C238(v20);
    char v23 = 0;
    return v23 & 1;
  }
  sub_25347B84C(v22);
  if (!v24) {
    goto LABEL_9;
  }
  sub_25347BFF0(v20);
  char v23 = 1;
  return v23 & 1;
}

uint64_t sub_25347C238(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDB700);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PlannerError.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDB708);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDB710);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  uint64_t v4 = sub_253B05940();
  sub_253465998();
  uint64_t v22 = v5;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for PlannerError();
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  sub_253462A5C(&qword_269CDB718);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  sub_253472068(a1, a1[3]);
  sub_25347C5E4();
  sub_253B0A680();
  sub_25347BE90(v21, v14);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v4) == 1)
  {
    sub_25347C630();
    sub_253B0A3A0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v9, v14, v4);
    sub_25347C67C();
    sub_253B0A3A0();
    sub_25347CDBC(&qword_269CDB668, MEMORY[0x263F4BF78]);
    sub_253B0A440();
    sub_2534659CC();
    v20();
  }
  sub_2534659CC();
  v16();
  uint64_t v17 = sub_25347B838();
  return v18(v17);
}

unint64_t sub_25347C5E4()
{
  unint64_t result = qword_269CDB720;
  if (!qword_269CDB720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB720);
  }
  return result;
}

unint64_t sub_25347C630()
{
  unint64_t result = qword_269CDB728;
  if (!qword_269CDB728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB728);
  }
  return result;
}

unint64_t sub_25347C67C()
{
  unint64_t result = qword_269CDB730;
  if (!qword_269CDB730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB730);
  }
  return result;
}

uint64_t PlannerError.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a2;
  sub_253462A5C(&qword_269CDB738);
  sub_253465998();
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  uint64_t v52 = v5;
  sub_253462A5C(&qword_269CDB740);
  sub_253465998();
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  MEMORY[0x270FA5388](v6);
  sub_25346CB04();
  uint64_t v54 = v8;
  uint64_t v9 = sub_253462A5C(&qword_269CDB748);
  sub_253465998();
  uint64_t v53 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for PlannerError();
  sub_25347B88C();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v44 - v20;
  sub_253472068(a1, a1[3]);
  sub_25347C5E4();
  uint64_t v22 = v55;
  sub_253B0A660();
  if (v22) {
    goto LABEL_8;
  }
  id v44 = v19;
  uint64_t v45 = v21;
  uint64_t v46 = a1;
  uint64_t v23 = sub_253B0A390();
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v55 = v14;
  if (!v24
    || (int v56 = *(unsigned __int8 *)(v23 + 32),
        sub_25347B78C(1, v24, v23, v23 + 32, 0, (2 * v24) | 1),
        uint64_t v26 = v25,
        unint64_t v28 = v27,
        swift_bridgeObjectRelease(),
        v26 != v28 >> 1))
  {
    uint64_t v33 = v53;
    sub_253B0A090();
    swift_allocError();
    uint64_t v35 = v34;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v35 = v15;
    uint64_t v36 = v55;
    sub_253B0A2D0();
    sub_253B0A080();
    sub_25347B88C();
    (*(void (**)(uint64_t *))(v37 + 104))(v35);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v9);
    a1 = v46;
LABEL_8:
    uint64_t v38 = (uint64_t)a1;
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
  }
  if (v56)
  {
    char v58 = 1;
    sub_25347C630();
    sub_25347B86C();
    sub_2534659CC();
    v29();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v30();
    uint64_t v31 = sub_253B05940();
    uint64_t v32 = (uint64_t)v45;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v45, 1, 1, v31);
  }
  else
  {
    char v57 = 0;
    sub_25347C67C();
    sub_25347B86C();
    uint64_t v40 = sub_253B05940();
    sub_25347CDBC(&qword_269CDB690, MEMORY[0x263F4BF78]);
    uint64_t v41 = (uint64_t)v44;
    sub_253B0A370();
    sub_2534659CC();
    v42();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v43();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v41, 0, 1, v40);
    uint64_t v32 = (uint64_t)v45;
    sub_25347BEF4(v41, (uint64_t)v45);
  }
  sub_25347BEF4(v32, v51);
  uint64_t v38 = (uint64_t)v46;
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v38);
}

uint64_t sub_25347CBFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlannerError.init(from:)(a1, a2);
}

uint64_t sub_25347CC14(void *a1)
{
  return PlannerError.encode(to:)(a1);
}

uint64_t sub_25347CC38(void *a1)
{
  a1[1] = sub_25347CDBC(&qword_269CDB750, (void (*)(uint64_t))type metadata accessor for PlannerError);
  a1[2] = sub_25347CDBC(&qword_269CDB758, (void (*)(uint64_t))type metadata accessor for PlannerError);
  a1[3] = sub_25347CDBC(&qword_269CDB760, (void (*)(uint64_t))type metadata accessor for PlannerError);
  uint64_t result = sub_25347CDBC(&qword_269CDB768, (void (*)(uint64_t))type metadata accessor for PlannerError);
  a1[4] = result;
  return result;
}

uint64_t sub_25347CD0C(uint64_t a1)
{
  uint64_t result = sub_25347CDBC(&qword_269CDB750, (void (*)(uint64_t))type metadata accessor for PlannerError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347CD64(uint64_t a1)
{
  uint64_t result = sub_25347CDBC(&qword_269CDB770, (void (*)(uint64_t))type metadata accessor for PlannerError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347CDBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25347CE04()
{
  return sub_25347CDBC(&qword_269CDB5E8, (void (*)(uint64_t))type metadata accessor for PlannerError);
}

uint64_t getEnumTagSinglePayload for PlannerError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25347CE60);
}

uint64_t sub_25347CE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B05940();
  unsigned int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PlannerError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25347CEBC);
}

uint64_t sub_25347CEBC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_253B05940();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, v5, a3, v6);
}

unsigned char *storeEnumTagSinglePayload for PlannerError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25347CFE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlannerError.CodingKeys()
{
  return &type metadata for PlannerError.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PlannerError.OtherCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25347D0B8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlannerError.OtherCodingKeys()
{
  return &type metadata for PlannerError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for PlannerError.FailedToPlanCodingKeys()
{
  return &type metadata for PlannerError.FailedToPlanCodingKeys;
}

unint64_t sub_25347D104()
{
  unint64_t result = qword_269CDB778;
  if (!qword_269CDB778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB778);
  }
  return result;
}

unint64_t sub_25347D154()
{
  unint64_t result = qword_269CDB780;
  if (!qword_269CDB780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB780);
  }
  return result;
}

unint64_t sub_25347D1A4()
{
  unint64_t result = qword_269CDB788;
  if (!qword_269CDB788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB788);
  }
  return result;
}

unint64_t sub_25347D1F4()
{
  unint64_t result = qword_269CDB790;
  if (!qword_269CDB790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB790);
  }
  return result;
}

unint64_t sub_25347D244()
{
  unint64_t result = qword_269CDB798;
  if (!qword_269CDB798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB798);
  }
  return result;
}

unint64_t sub_25347D294()
{
  unint64_t result = qword_269CDB7A0;
  if (!qword_269CDB7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7A0);
  }
  return result;
}

unint64_t sub_25347D2E4()
{
  unint64_t result = qword_269CDB7A8;
  if (!qword_269CDB7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7A8);
  }
  return result;
}

unint64_t sub_25347D334()
{
  unint64_t result = qword_269CDB7B0;
  if (!qword_269CDB7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7B0);
  }
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport0C5ErrorO16errorDomainValueSSvgZ_0()
{
  return 0x4572656E6E616C50;
}

BOOL sub_25347D3A0(char a1, char a2)
{
  return a1 == a2;
}

uint64_t _s16IntelligenceFlow3ASTO0aB14PlannerSupportE8PrefixOpO4hash4intoys6HasherVz_tF_0()
{
  return sub_253B0A600();
}

uint64_t sub_25347D3D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000253B0BD10 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000253B0BD30)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_25347D51C()
{
  return 3;
}

uint64_t sub_25347D524()
{
  return sub_253B0A630();
}

uint64_t sub_25347D56C(char a1)
{
  if (!a1) {
    return 0x726568746FLL;
  }
  if (a1 == 1) {
    return 0xD000000000000017;
  }
  return 0xD00000000000001ALL;
}

BOOL sub_25347D5C4(char *a1, char *a2)
{
  return sub_25347D3A0(*a1, *a2);
}

uint64_t sub_25347D5D0()
{
  return sub_25347D524();
}

uint64_t sub_25347D5D8()
{
  return _s16IntelligenceFlow3ASTO0aB14PlannerSupportE8PrefixOpO4hash4intoys6HasherVz_tF_0();
}

uint64_t sub_25347D5E0()
{
  return sub_25347D56C(*v0);
}

uint64_t sub_25347D5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25347D3D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25347D610@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25347D51C();
  *a1 = result;
  return result;
}

uint64_t sub_25347D638(uint64_t a1)
{
  unint64_t v2 = sub_25347E470();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347D674(uint64_t a1)
{
  unint64_t v2 = sub_25347E470();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347D6B0()
{
  return sub_2534795C4();
}

uint64_t sub_25347D6CC(uint64_t a1)
{
  unint64_t v2 = sub_25347E4BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347D708(uint64_t a1)
{
  unint64_t v2 = sub_25347E4BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347D744(uint64_t a1)
{
  unint64_t v2 = sub_25347E508();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347D780(uint64_t a1)
{
  unint64_t v2 = sub_25347E508();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347D7BC(uint64_t a1)
{
  unint64_t v2 = sub_25347E554();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25347D7F8(uint64_t a1)
{
  unint64_t v2 = sub_25347E554();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25347D834(uint64_t a1)
{
  uint64_t v2 = sub_25347EEF8(&qword_269CDB840, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25347D8A0(uint64_t a1)
{
  uint64_t v2 = sub_25347EEF8(&qword_269CDB840, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  return MEMORY[0x270EF2668](a1, v2);
}

unint64_t static SessionCoordinatorError.errorDomainValue.getter()
{
  return 0xD000000000000017;
}

uint64_t SessionCoordinatorError.innerError.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v4);
  sub_25346CC44();
  uint64_t v7 = v6 - v5;
  sub_25347DA7C(v2, v6 - v5);
  swift_getEnumCaseMultiPayload();
  uint64_t v8 = sub_253B05940();
  a1[3] = v8;
  a1[4] = sub_25347EEF8(&qword_269CDB620, MEMORY[0x263F4BF78]);
  uint64_t v9 = sub_2534724A8(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v9, v7, v8);
}

uint64_t type metadata accessor for SessionCoordinatorError()
{
  uint64_t result = qword_26B2493D8;
  if (!qword_26B2493D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25347DA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SessionCoordinatorError.errorCodeValue.getter()
{
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v1);
  sub_25346CC44();
  uint64_t v4 = v3 - v2;
  sub_25347DA7C(v0, v3 - v2);
  uint64_t v5 = qword_253B23D00[(int)swift_getEnumCaseMultiPayload()];
  sub_25347DB74(v4);
  return v5;
}

uint64_t sub_25347DB74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static SessionCoordinatorError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v37 = sub_253B05940();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_2534659D8();
  v36[1] = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  MEMORY[0x270FA5388](v8);
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v36 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v36 - v16;
  uint64_t v18 = sub_253462A5C(&qword_269CDB7B8);
  MEMORY[0x270FA5388](v18 - 8);
  sub_25346CC44();
  uint64_t v21 = v20 - v19;
  uint64_t v23 = v20 - v19 + *(int *)(v22 + 56);
  sub_25347DA7C(a1, v20 - v19);
  sub_25347DA7C(v38, v23);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_25347DA7C(v21, (uint64_t)v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_25347FA84();
        v25();
        char v26 = sub_253B05930();
        unint64_t v27 = *(void (**)(void))(v4 + 8);
        sub_25347FB18();
        v27();
        sub_25347FB18();
        v27();
LABEL_12:
        sub_25347DB74(v21);
        return v26 & 1;
      }
    }
    else
    {
      sub_25347DA7C(v21, (uint64_t)v12);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v28 = v37;
        sub_25347FA84();
        v29();
        char v26 = sub_253B05930();
        uint64_t v30 = *(void (**)(void))(v4 + 8);
        sub_25347FB18();
        v30();
        ((void (*)(char *, uint64_t))v30)(v12, v28);
        goto LABEL_12;
      }
    }
  }
  else
  {
    sub_25347DA7C(v21, (uint64_t)v17);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v32 = v37;
      sub_25347FA84();
      v33();
      char v26 = sub_253B05930();
      uint64_t v34 = *(void (**)(void))(v4 + 8);
      sub_25347FB18();
      v34();
      ((void (*)(char *, uint64_t))v34)(v17, v32);
      goto LABEL_12;
    }
  }
  sub_25347FB18();
  v31();
  sub_25347DF38(v21);
  char v26 = 0;
  return v26 & 1;
}

uint64_t sub_25347DF38(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDB7B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SessionCoordinatorError.encode(to:)(void *a1)
{
  uint64_t v51 = sub_253462A5C(&qword_269CDB7C0);
  sub_253465998();
  uint64_t v42 = v3;
  MEMORY[0x270FA5388](v4);
  sub_25347FA68(v5, v41);
  sub_253462A5C(&qword_269CDB7C8);
  sub_253465998();
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  MEMORY[0x270FA5388](v6);
  sub_25346CB04();
  uint64_t v47 = v8;
  uint64_t v46 = sub_253462A5C(&qword_269CDB7D0);
  sub_253465998();
  uint64_t v43 = v9;
  MEMORY[0x270FA5388](v10);
  sub_25346CB04();
  uint64_t v52 = v11;
  uint64_t v12 = sub_253B05940();
  sub_253465998();
  uint64_t v54 = v13;
  MEMORY[0x270FA5388](v14);
  sub_2534659D8();
  uint64_t v45 = v15;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  id v44 = (char *)&v41 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v41 - v19;
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v21);
  sub_25346CC44();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_253462A5C(&qword_269CDB7D8);
  sub_253465998();
  uint64_t v53 = v26;
  MEMORY[0x270FA5388](v27);
  sub_25347FAAC();
  sub_253472068(a1, a1[3]);
  sub_25347E470();
  sub_253B0A680();
  sub_25347DA7C(v55, v24);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v29 = v12;
    uint64_t v30 = v54;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = v44;
      sub_25347FA84();
      v31();
      char v57 = 1;
      sub_25347E508();
      uint64_t v32 = v47;
      sub_25347FADC();
      sub_25347EEF8(&qword_269CDB668, MEMORY[0x263F4BF78]);
      uint64_t v33 = v49;
      sub_25347FB44();
      uint64_t v34 = v48;
    }
    else
    {
      uint64_t v20 = v45;
      sub_25347FA84();
      v38();
      char v58 = 2;
      sub_25347E4BC();
      uint64_t v32 = v50;
      sub_25347FADC();
      sub_25347EEF8(&qword_269CDB668, MEMORY[0x263F4BF78]);
      uint64_t v33 = v51;
      sub_25347FB44();
      uint64_t v34 = v42;
    }
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  else
  {
    uint64_t v35 = v54;
    sub_25347FA84();
    v36();
    char v56 = 0;
    sub_25347E554();
    sub_253B0A3A0();
    sub_25347EEF8(&qword_269CDB668, MEMORY[0x263F4BF78]);
    uint64_t v37 = v46;
    sub_253B0A440();
    uint64_t v29 = v12;
    uint64_t v30 = v35;
    uint64_t v24 = v25;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v52, v37);
  }
  uint64_t v39 = v53;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v29);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v1, v24);
}

unint64_t sub_25347E470()
{
  unint64_t result = qword_269CDB7E0;
  if (!qword_269CDB7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7E0);
  }
  return result;
}

unint64_t sub_25347E4BC()
{
  unint64_t result = qword_269CDB7E8;
  if (!qword_269CDB7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7E8);
  }
  return result;
}

unint64_t sub_25347E508()
{
  unint64_t result = qword_269CDB7F0;
  if (!qword_269CDB7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7F0);
  }
  return result;
}

unint64_t sub_25347E554()
{
  unint64_t result = qword_269CDB7F8;
  if (!qword_269CDB7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB7F8);
  }
  return result;
}

uint64_t SessionCoordinatorError.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v74 = sub_253462A5C(&qword_269CDB800);
  sub_253465998();
  uint64_t v71 = v4;
  MEMORY[0x270FA5388](v5);
  sub_25346CB04();
  uint64_t v79 = v6;
  uint64_t v73 = sub_253462A5C(&qword_269CDB808);
  sub_253465998();
  uint64_t v70 = v7;
  MEMORY[0x270FA5388](v8);
  sub_25346CB04();
  uint64_t v76 = v9;
  uint64_t v72 = sub_253462A5C(&qword_269CDB810);
  sub_253465998();
  uint64_t v69 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25347FA68(v12, v63);
  sub_253462A5C(&qword_269CDB818);
  sub_253465998();
  uint64_t v77 = v14;
  uint64_t v78 = v13;
  MEMORY[0x270FA5388](v13);
  sub_25347FAAC();
  uint64_t v15 = type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v63 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v63 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v63 - v26;
  uint64_t v28 = a1[3];
  uint64_t v80 = a1;
  sub_253472068(a1, v28);
  sub_25347E470();
  uint64_t v29 = v81;
  sub_253B0A660();
  if (!v29)
  {
    uint64_t v64 = v22;
    uint64_t v65 = v27;
    uint64_t v66 = v25;
    id v67 = v19;
    uint64_t v31 = v78;
    uint64_t v68 = v15;
    uint64_t v81 = v2;
    uint64_t v32 = sub_253B0A390();
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      uint64_t v34 = v31;
      int v35 = *(unsigned __int8 *)(v32 + 32);
      sub_25347B78C(1, v33, v32, v32 + 32, 0, (2 * v33) | 1);
      uint64_t v37 = v36;
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      if (v37 == v39 >> 1)
      {
        if (v35)
        {
          if (v35 == 1)
          {
            char v83 = 1;
            sub_25347E508();
            sub_25347FA40();
            sub_253B05940();
            sub_25347EEF8(&qword_269CDB690, MEMORY[0x263F4BF78]);
            uint64_t v40 = (uint64_t)v64;
            sub_253B0A370();
            uint64_t v30 = (uint64_t)v80;
            uint64_t v48 = sub_25347FA90();
            v49(v48);
            swift_unknownObjectRelease();
            uint64_t v50 = sub_25347FB00();
            v51(v50);
            swift_storeEnumTagMultiPayload();
            uint64_t v52 = v40;
LABEL_15:
            uint64_t v62 = (uint64_t)v65;
            sub_25347ECC8(v52, (uint64_t)v65);
            sub_25347ECC8(v62, v75);
            return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v30);
          }
          char v84 = 2;
          sub_25347E4BC();
          sub_25347FA40();
          sub_253B05940();
          sub_25347EEF8(&qword_269CDB690, MEMORY[0x263F4BF78]);
          sub_25347FB24();
          uint64_t v30 = (uint64_t)v80;
          uint64_t v58 = sub_25347FA0C();
          v59(v58);
          swift_unknownObjectRelease();
          uint64_t v60 = sub_25347FAC4();
          v61(v60);
          uint64_t v57 = (uint64_t)v67;
        }
        else
        {
          char v82 = 0;
          sub_25347E554();
          sub_25347FA40();
          sub_253B05940();
          sub_25347EEF8(&qword_269CDB690, MEMORY[0x263F4BF78]);
          sub_25347FB24();
          uint64_t v30 = (uint64_t)v80;
          uint64_t v53 = sub_25347FA0C();
          v54(v53);
          swift_unknownObjectRelease();
          uint64_t v55 = sub_25347FA24();
          v56(v55);
          uint64_t v57 = (uint64_t)v66;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v52 = v57;
        goto LABEL_15;
      }
      uint64_t v30 = (uint64_t)v80;
      uint64_t v41 = v77;
      uint64_t v31 = v34;
    }
    else
    {
      uint64_t v30 = (uint64_t)v80;
      uint64_t v41 = v77;
    }
    uint64_t v42 = v68;
    uint64_t v43 = sub_253B0A090();
    swift_allocError();
    uint64_t v45 = v44;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v45 = v42;
    uint64_t v46 = v81;
    sub_253B0A2D0();
    sub_253B0A080();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v45, *MEMORY[0x263F8DCB0], v43);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v46, v31);
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v30);
  }
  uint64_t v30 = (uint64_t)v80;
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v30);
}

unint64_t sub_25347EC68()
{
  return 0xD000000000000017;
}

uint64_t sub_25347EC8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SessionCoordinatorError.init(from:)(a1, a2);
}

uint64_t sub_25347ECA4(void *a1)
{
  return SessionCoordinatorError.encode(to:)(a1);
}

uint64_t sub_25347ECC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionCoordinatorError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25347ED2C(void *a1)
{
  a1[1] = sub_25347EEF8(&qword_269CDB820, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  a1[2] = sub_25347EEF8(&qword_269CDB828, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  a1[3] = sub_25347EEF8(&qword_269CDB830, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  uint64_t result = sub_25347EEF8(&qword_269CDB838, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  a1[4] = result;
  return result;
}

uint64_t sub_25347EE00(uint64_t a1)
{
  uint64_t result = sub_25347EEF8(&qword_269CDB820, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347EE58(uint64_t a1)
{
  uint64_t result = sub_25347EEF8(&qword_269CDB840, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25347EEB0()
{
  return sub_25347EEF8(&qword_269CDB5E0, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
}

uint64_t sub_25347EEF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionCoordinatorError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_253B05940();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SessionCoordinatorError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    uint64_t v3 = sub_253B05940();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

uint64_t initializeWithCopy for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_253B05940();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25347DB74(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_253B05940();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_253B05940();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for SessionCoordinatorError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25347DB74(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_253B05940();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25347F3AC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25347F3BC()
{
  uint64_t result = sub_253B05940();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SessionCoordinatorError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25347F514);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.CodingKeys()
{
  return &type metadata for SessionCoordinatorError.CodingKeys;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.OtherCodingKeys()
{
  return &type metadata for SessionCoordinatorError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys()
{
  return &type metadata for SessionCoordinatorError.FailedToWriteTranscriptCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorO15OtherCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25347F610);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionCoordinatorError.FailedToConvertClientEventCodingKeys()
{
  return &type metadata for SessionCoordinatorError.FailedToConvertClientEventCodingKeys;
}

unint64_t sub_25347F64C()
{
  unint64_t result = qword_269CDB848;
  if (!qword_269CDB848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB848);
  }
  return result;
}

unint64_t sub_25347F69C()
{
  unint64_t result = qword_269CDB850;
  if (!qword_269CDB850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB850);
  }
  return result;
}

unint64_t sub_25347F6EC()
{
  unint64_t result = qword_269CDB858;
  if (!qword_269CDB858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB858);
  }
  return result;
}

unint64_t sub_25347F73C()
{
  unint64_t result = qword_269CDB860;
  if (!qword_269CDB860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB860);
  }
  return result;
}

unint64_t sub_25347F78C()
{
  unint64_t result = qword_269CDB868;
  if (!qword_269CDB868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB868);
  }
  return result;
}

unint64_t sub_25347F7DC()
{
  unint64_t result = qword_269CDB870;
  if (!qword_269CDB870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB870);
  }
  return result;
}

unint64_t sub_25347F82C()
{
  unint64_t result = qword_269CDB878;
  if (!qword_269CDB878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB878);
  }
  return result;
}

unint64_t sub_25347F87C()
{
  unint64_t result = qword_269CDB880;
  if (!qword_269CDB880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB880);
  }
  return result;
}

unint64_t sub_25347F8CC()
{
  unint64_t result = qword_269CDB888;
  if (!qword_269CDB888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB888);
  }
  return result;
}

unint64_t sub_25347F91C()
{
  unint64_t result = qword_269CDB890;
  if (!qword_269CDB890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB890);
  }
  return result;
}

unint64_t sub_25347F96C()
{
  unint64_t result = qword_269CDB898;
  if (!qword_269CDB898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB898);
  }
  return result;
}

unint64_t sub_25347F9BC()
{
  unint64_t result = qword_269CDB8A0;
  if (!qword_269CDB8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8A0);
  }
  return result;
}

uint64_t sub_25347FA0C()
{
  return v0;
}

uint64_t sub_25347FA24()
{
  return v0;
}

uint64_t sub_25347FA40()
{
  return sub_253B0A2C0();
}

void sub_25347FA68(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_25347FA90()
{
  return v0;
}

uint64_t sub_25347FAC4()
{
  return v0;
}

uint64_t sub_25347FADC()
{
  return sub_253B0A3A0();
}

uint64_t sub_25347FB00()
{
  return v0;
}

uint64_t sub_25347FB24()
{
  return sub_253B0A370();
}

uint64_t sub_25347FB44()
{
  return sub_253B0A440();
}

void sub_25347FB64()
{
}

unint64_t sub_25347FB78()
{
  return 0xD000000000000017;
}

uint64_t sub_25347FB94()
{
  return 0x456E6F6973736553;
}

uint64_t sub_25347FBB4()
{
  return sub_25347FC34((uint64_t (*)(void))type metadata accessor for ExecutorError, (void (*)(void))type metadata accessor for ExecutorError, (void (*)(void))type metadata accessor for ExecutorError);
}

uint64_t sub_25347FBF4()
{
  return sub_25347FC34((uint64_t (*)(void))type metadata accessor for PlannerError, (void (*)(void))type metadata accessor for PlannerError, (void (*)(void))type metadata accessor for PlannerError);
}

uint64_t sub_25347FC34(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  uint64_t v6 = v3;
  uint64_t v7 = a1(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v12 - v8;
  sub_253483504(v6, (uint64_t)&v12 - v8, a2);
  uint64_t v10 = sub_253B05940();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10) == 1) {
    return 2;
  }
  sub_253480D90((uint64_t)v9, a3);
  return 1;
}

uint64_t sub_25347FCF8()
{
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_25348366C();
  sub_253483504(v0, v1, (void (*)(void))type metadata accessor for SessionCoordinatorError);
  uint64_t v3 = qword_253B24458[(int)swift_getEnumCaseMultiPayload()];
  sub_253480D90(v1, (void (*)(void))type metadata accessor for SessionCoordinatorError);
  return v3;
}

uint64_t sub_25347FDAC()
{
  uint64_t v1 = type metadata accessor for SessionError();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253483504(v0, (uint64_t)v3, (void (*)(void))type metadata accessor for SessionError);
  uint64_t v4 = swift_getEnumCaseMultiPayload() + 1;
  sub_253480D90((uint64_t)v3, (void (*)(void))type metadata accessor for SessionError);
  return v4;
}

uint64_t sub_25347FE74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000253B0BD50 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x4572656E6E616C70 && a2 == 0xEC000000726F7272;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0x726F747563657865 && a2 == 0xED0000726F727245)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

uint64_t sub_253480054()
{
  return 4;
}

unint64_t sub_25348005C(char a1)
{
  unint64_t result = 0x726568746FLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x4572656E6E616C70;
      break;
    case 3:
      unint64_t result = 0x726F747563657865;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_253480104()
{
  return sub_25348005C(*v0);
}

uint64_t sub_25348010C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25347FE74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253480134@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_253480054();
  *a1 = result;
  return result;
}

uint64_t sub_25348015C(uint64_t a1)
{
  unint64_t v2 = sub_2534814B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253480198(uint64_t a1)
{
  unint64_t v2 = sub_2534814B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534801D4(uint64_t a1)
{
  unint64_t v2 = sub_2534814FC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253480210(uint64_t a1)
{
  unint64_t v2 = sub_2534814FC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25348024C(uint64_t a1)
{
  unint64_t v2 = sub_2534815E0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253480288(uint64_t a1)
{
  unint64_t v2 = sub_2534815E0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534802C4(uint64_t a1)
{
  unint64_t v2 = sub_253481548();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253480300(uint64_t a1)
{
  unint64_t v2 = sub_253481548();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25348033C(uint64_t a1)
{
  unint64_t v2 = sub_253481594();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253480378(uint64_t a1)
{
  unint64_t v2 = sub_253481594();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534803B4(uint64_t a1)
{
  uint64_t v2 = sub_2534820C0(&qword_269CDB948, (void (*)(uint64_t))type metadata accessor for SessionError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_253480420(uint64_t a1)
{
  uint64_t v2 = sub_2534820C0(&qword_269CDB948, (void (*)(uint64_t))type metadata accessor for SessionError);
  return MEMORY[0x270EF2668](a1, v2);
}

void static SessionError.errorDomainValue.getter()
{
}

uint64_t SessionError.innerError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for SessionError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_2534835B0();
  sub_253483504(v3, v1, (void (*)(void))type metadata accessor for SessionError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(void *)(a1 + 24) = type metadata accessor for SessionCoordinatorError();
      uint64_t v14 = sub_2534820C0(&qword_269CDB820, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
      uint64_t v11 = sub_2534836E4(v14);
      uint64_t v12 = type metadata accessor for SessionCoordinatorError;
      goto LABEL_6;
    case 2u:
      *(void *)(a1 + 24) = type metadata accessor for PlannerError();
      uint64_t v10 = sub_2534820C0(&qword_269CDB750, (void (*)(uint64_t))type metadata accessor for PlannerError);
      uint64_t v11 = sub_2534836E4(v10);
      uint64_t v12 = type metadata accessor for PlannerError;
      goto LABEL_6;
    case 3u:
      *(void *)(a1 + 24) = type metadata accessor for ExecutorError();
      uint64_t v13 = sub_2534820C0(&qword_269CDB698, (void (*)(uint64_t))type metadata accessor for ExecutorError);
      uint64_t v11 = sub_2534836E4(v13);
      uint64_t v12 = type metadata accessor for ExecutorError;
LABEL_6:
      uint64_t result = sub_253481E94(v1, (uint64_t)v11, (void (*)(void))v12);
      break;
    default:
      uint64_t v6 = sub_253B05940();
      *(void *)(a1 + 24) = v6;
      uint64_t v7 = sub_2534820C0(&qword_269CDB620, MEMORY[0x263F4BF78]);
      char v8 = sub_2534836E4(v7);
      uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v8, v1, v6);
      break;
  }
  return result;
}

uint64_t type metadata accessor for SessionError()
{
  uint64_t result = qword_26B248F78;
  if (!qword_26B248F78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SessionError.errorCodeValue.getter()
{
  type metadata accessor for SessionError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_25348366C();
  sub_253483504(v0, v1, (void (*)(void))type metadata accessor for SessionError);
  uint64_t v3 = swift_getEnumCaseMultiPayload() + 1;
  sub_253480D90(v1, (void (*)(void))type metadata accessor for SessionError);
  return v3;
}

uint64_t static SessionError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for ExecutorError();
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_25346CB04();
  uint64_t v47 = v6;
  sub_253483660();
  uint64_t v7 = type metadata accessor for PlannerError();
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_25346CB04();
  uint64_t v46 = v9;
  sub_253483660();
  uint64_t v10 = type metadata accessor for SessionCoordinatorError();
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v45 = v12;
  sub_253483660();
  uint64_t v13 = sub_253B05940();
  sub_253465998();
  uint64_t v48 = v14;
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = (char *)(v17 - v16);
  type metadata accessor for SessionError();
  sub_25346CAF4();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  sub_2534836BC();
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v45 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v45 - v27;
  uint64_t v29 = sub_253462A5C(&qword_269CDB8A8);
  uint64_t v30 = sub_25346CB4C(v29);
  MEMORY[0x270FA5388](v30);
  sub_2534835B0();
  uint64_t v32 = v2 + *(int *)(v31 + 56);
  sub_253483504(v49, v2, (void (*)(void))type metadata accessor for SessionError);
  sub_253483504(v50, v32, (void (*)(void))type metadata accessor for SessionError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_253483504(v2, (uint64_t)v26, (void (*)(void))type metadata accessor for SessionError);
      if (sub_2534836A4() == 1)
      {
        uint64_t v34 = v45;
        sub_253481E94(v32, v45, (void (*)(void))type metadata accessor for SessionCoordinatorError);
        char v35 = static SessionCoordinatorError.== infix(_:_:)((uint64_t)v26, v34);
        uint64_t v36 = type metadata accessor for SessionCoordinatorError;
        sub_253480D90(v34, (void (*)(void))type metadata accessor for SessionCoordinatorError);
        uint64_t v37 = (uint64_t)v26;
        goto LABEL_10;
      }
      uint64_t v40 = type metadata accessor for SessionCoordinatorError;
      uint64_t v41 = (uint64_t)v26;
      goto LABEL_14;
    case 2u:
      sub_253483504(v2, v3, (void (*)(void))type metadata accessor for SessionError);
      if (sub_2534836A4() == 2)
      {
        uint64_t v38 = v46;
        sub_253481E94(v32, v46, (void (*)(void))type metadata accessor for PlannerError);
        char v35 = static PlannerError.== infix(_:_:)(v3, v38);
        uint64_t v36 = type metadata accessor for PlannerError;
        sub_253480D90(v38, (void (*)(void))type metadata accessor for PlannerError);
        uint64_t v37 = v3;
        goto LABEL_10;
      }
      uint64_t v40 = type metadata accessor for PlannerError;
      uint64_t v41 = v3;
      goto LABEL_14;
    case 3u:
      sub_253483504(v2, (uint64_t)v22, (void (*)(void))type metadata accessor for SessionError);
      if (sub_2534836A4() == 3)
      {
        uint64_t v39 = v47;
        sub_253481E94(v32, v47, (void (*)(void))type metadata accessor for ExecutorError);
        char v35 = static ExecutorError.== infix(_:_:)((uint64_t)v22, v39);
        uint64_t v36 = type metadata accessor for ExecutorError;
        sub_253480D90(v39, (void (*)(void))type metadata accessor for ExecutorError);
        uint64_t v37 = (uint64_t)v22;
LABEL_10:
        sub_253480D90(v37, (void (*)(void))v36);
        goto LABEL_17;
      }
      uint64_t v40 = type metadata accessor for ExecutorError;
      uint64_t v41 = (uint64_t)v22;
LABEL_14:
      sub_253480D90(v41, (void (*)(void))v40);
      goto LABEL_15;
    default:
      sub_253483504(v2, (uint64_t)v28, (void (*)(void))type metadata accessor for SessionError);
      if (sub_2534836A4())
      {
        sub_2534659CC();
        v33();
LABEL_15:
        sub_253480D30(v2);
        char v35 = 0;
      }
      else
      {
        uint64_t v42 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v18, v32, v13);
        char v35 = sub_253B05930();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v42 + 8);
        v43(v18, v13);
        v43(v28, v13);
LABEL_17:
        sub_253480D90(v2, (void (*)(void))type metadata accessor for SessionError);
      }
      return v35 & 1;
  }
}

uint64_t sub_253480D30(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDB8A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_253480D90(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return a1;
}

uint64_t SessionError.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDB8B0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253483628(v4, v36);
  type metadata accessor for ExecutorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_253483644(v6, v37);
  sub_253462A5C(&qword_269CDB8B8);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_25346CB04();
  sub_253483660();
  type metadata accessor for PlannerError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_25346CB04();
  uint64_t v40 = v9;
  sub_253462A5C(&qword_269CDB8C0);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_25346CB04();
  sub_253483660();
  type metadata accessor for SessionCoordinatorError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v39 = v12;
  sub_253462A5C(&qword_269CDB8C8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_25348360C();
  uint64_t v14 = sub_253B05940();
  sub_253465998();
  uint64_t v38 = v15;
  MEMORY[0x270FA5388](v16);
  sub_25346CC44();
  uint64_t v19 = v18 - v17;
  type metadata accessor for SessionError();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v20);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDB8D0);
  sub_253465998();
  uint64_t v42 = v22;
  uint64_t v43 = v21;
  MEMORY[0x270FA5388](v21);
  sub_25346CC44();
  uint64_t v25 = v24 - v23;
  sub_253472068(a1, a1[3]);
  sub_2534814B0();
  sub_253B0A680();
  sub_253483504(v44, v1, (void (*)(void))type metadata accessor for SessionError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v28 = v39;
      sub_253481E94(v1, v39, (void (*)(void))type metadata accessor for SessionCoordinatorError);
      sub_253481594();
      sub_2534835C8();
      sub_2534820C0(&qword_269CDB830, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
      sub_253B0A440();
      sub_25348357C();
      v32();
      uint64_t v30 = type metadata accessor for SessionCoordinatorError;
      goto LABEL_6;
    case 2u:
      uint64_t v28 = v40;
      sub_253481E94(v1, v40, (void (*)(void))type metadata accessor for PlannerError);
      sub_253481548();
      sub_2534835C8();
      sub_2534820C0(&qword_269CDB760, (void (*)(uint64_t))type metadata accessor for PlannerError);
      sub_253B0A440();
      sub_25348357C();
      v29();
      uint64_t v30 = type metadata accessor for PlannerError;
      goto LABEL_6;
    case 3u:
      uint64_t v28 = v41;
      sub_253481E94(v1, v41, (void (*)(void))type metadata accessor for ExecutorError);
      sub_2534814FC();
      sub_2534835C8();
      sub_2534820C0(&qword_269CDB6A8, (void (*)(uint64_t))type metadata accessor for ExecutorError);
      sub_253B0A440();
      sub_25348357C();
      v31();
      uint64_t v30 = type metadata accessor for ExecutorError;
LABEL_6:
      sub_253480D90(v28, (void (*)(void))v30);
      uint64_t v33 = sub_253483694();
      uint64_t result = v35(v33, v34);
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v19, v1, v14);
      sub_2534815E0();
      sub_253B0A3A0();
      sub_2534820C0(&qword_269CDB668, MEMORY[0x263F4BF78]);
      sub_253B0A440();
      sub_2534659CC();
      v26();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v19, v14);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v25, v43);
      break;
  }
  return result;
}

unint64_t sub_2534814B0()
{
  unint64_t result = qword_269CDB8D8;
  if (!qword_269CDB8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8D8);
  }
  return result;
}

unint64_t sub_2534814FC()
{
  unint64_t result = qword_269CDB8E0;
  if (!qword_269CDB8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8E0);
  }
  return result;
}

unint64_t sub_253481548()
{
  unint64_t result = qword_269CDB8E8;
  if (!qword_269CDB8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8E8);
  }
  return result;
}

unint64_t sub_253481594()
{
  unint64_t result = qword_269CDB8F0;
  if (!qword_269CDB8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8F0);
  }
  return result;
}

unint64_t sub_2534815E0()
{
  unint64_t result = qword_269CDB8F8;
  if (!qword_269CDB8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB8F8);
  }
  return result;
}

uint64_t SessionError.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v78 = sub_253462A5C(&qword_269CDB900);
  sub_253465998();
  uint64_t v74 = v5;
  MEMORY[0x270FA5388](v6);
  sub_253483628(v7, (uint64_t)v63);
  sub_253462A5C(&qword_269CDB908);
  sub_253465998();
  uint64_t v72 = v9;
  uint64_t v73 = v8;
  MEMORY[0x270FA5388](v8);
  sub_253483644(v10, (uint64_t)v63);
  sub_253462A5C(&qword_269CDB910);
  sub_253465998();
  uint64_t v70 = v12;
  uint64_t v71 = v11;
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v77 = v13;
  sub_253462A5C(&qword_269CDB918);
  sub_253465998();
  uint64_t v68 = v15;
  uint64_t v69 = v14;
  MEMORY[0x270FA5388](v14);
  sub_25346CB04();
  uint64_t v76 = v16;
  sub_253462A5C(&qword_269CDB920);
  sub_253465998();
  uint64_t v79 = v18;
  uint64_t v80 = v17;
  MEMORY[0x270FA5388](v17);
  sub_25348360C();
  uint64_t v81 = type metadata accessor for SessionError();
  sub_25346CAF4();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v63 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v63 - v27;
  MEMORY[0x270FA5388](v26);
  sub_2534836BC();
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = a1[3];
  char v82 = a1;
  sub_253472068(a1, v32);
  sub_2534814B0();
  uint64_t v33 = v83;
  sub_253B0A660();
  if (v33) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v82);
  }
  uint64_t v64 = v28;
  uint64_t v65 = v25;
  uint64_t v66 = v2;
  uint64_t v63 = v22;
  id v67 = v31;
  uint64_t v34 = v80;
  uint64_t v83 = v3;
  uint64_t v35 = sub_253B0A390();
  uint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
    uint64_t v42 = v81;
    goto LABEL_7;
  }
  uint64_t v37 = *(unsigned __int8 *)(v35 + 32);
  sub_25347B78C(1, v36, v35, v35 + 32, 0, (2 * v36) | 1);
  uint64_t v39 = v38;
  unint64_t v41 = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = v81;
  if (v39 != v41 >> 1)
  {
LABEL_7:
    uint64_t v44 = sub_253B0A090();
    swift_allocError();
    uint64_t v46 = v45;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v46 = v42;
    uint64_t v47 = v83;
    sub_253B0A2D0();
    sub_253B0A080();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, *MEMORY[0x263F8DCB0], v44);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v47, v34);
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v82);
  }
  uint64_t v43 = (uint64_t)v67;
  switch(v37)
  {
    case 1:
      char v85 = 1;
      sub_253481594();
      sub_25348358C();
      type metadata accessor for SessionCoordinatorError();
      sub_2534820C0(&qword_269CDB828, (void (*)(uint64_t))type metadata accessor for SessionCoordinatorError);
      sub_2534835EC();
      sub_25348357C();
      v53();
      swift_unknownObjectRelease();
      uint64_t v54 = sub_253483564();
      v55(v54);
      uint64_t v52 = (uint64_t)v64;
      goto LABEL_12;
    case 2:
      char v86 = 2;
      sub_253481548();
      sub_25348358C();
      type metadata accessor for PlannerError();
      sub_2534820C0(&qword_269CDB758, (void (*)(uint64_t))type metadata accessor for PlannerError);
      sub_2534835EC();
      sub_25348357C();
      v56();
      swift_unknownObjectRelease();
      uint64_t v57 = sub_253483564();
      v58(v57);
      uint64_t v52 = (uint64_t)v65;
      goto LABEL_12;
    case 3:
      char v87 = 3;
      sub_2534814FC();
      sub_25348358C();
      type metadata accessor for ExecutorError();
      sub_2534820C0(&qword_269CDB6A0, (void (*)(uint64_t))type metadata accessor for ExecutorError);
      uint64_t v49 = (uint64_t)v63;
      sub_253B0A370();
      sub_2534836D0();
      sub_2534659CC();
      v59();
      swift_unknownObjectRelease();
      uint64_t v60 = sub_253483564();
      v61(v60);
      swift_storeEnumTagMultiPayload();
      uint64_t v62 = v49;
      uint64_t v43 = (uint64_t)v67;
      goto LABEL_13;
    default:
      char v84 = 0;
      sub_2534815E0();
      sub_25348358C();
      sub_253B05940();
      sub_2534820C0(&qword_269CDB690, MEMORY[0x263F4BF78]);
      sub_2534835EC();
      sub_25348357C();
      v50();
      swift_unknownObjectRelease();
      sub_253483694();
      sub_2534659CC();
      v51();
      uint64_t v52 = v66;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      uint64_t v62 = v52;
LABEL_13:
      sub_253481E94(v62, v43, (void (*)(void))type metadata accessor for SessionError);
      sub_253481E94(v43, v75, (void (*)(void))type metadata accessor for SessionError);
      break;
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v82);
}

uint64_t sub_253481E58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SessionError.init(from:)(a1, a2);
}

uint64_t sub_253481E70(void *a1)
{
  return SessionError.encode(to:)(a1);
}

uint64_t sub_253481E94(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_253481EF4(void *a1)
{
  a1[1] = sub_2534820C0(&qword_269CDB928, (void (*)(uint64_t))type metadata accessor for SessionError);
  a1[2] = sub_2534820C0(&qword_269CDB930, (void (*)(uint64_t))type metadata accessor for SessionError);
  a1[3] = sub_2534820C0(&qword_269CDB938, (void (*)(uint64_t))type metadata accessor for SessionError);
  uint64_t result = sub_2534820C0(&qword_269CDB940, (void (*)(uint64_t))type metadata accessor for SessionError);
  a1[4] = result;
  return result;
}

uint64_t sub_253481FC8(uint64_t a1)
{
  uint64_t result = sub_2534820C0(&qword_269CDB928, (void (*)(uint64_t))type metadata accessor for SessionError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_253482020(uint64_t a1)
{
  uint64_t result = sub_2534820C0(&qword_269CDB948, (void (*)(uint64_t))type metadata accessor for SessionError);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_253482078()
{
  return sub_2534820C0(&qword_269CDB5D8, (void (*)(uint64_t))type metadata accessor for SessionError);
}

uint64_t sub_2534820C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for SessionCoordinatorError();
        swift_getEnumCaseMultiPayload();
        uint64_t v8 = sub_253B05940();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v9 = sub_253B05940();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v9))
        {
          uint64_t v10 = type metadata accessor for PlannerError();
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v9);
        }
        break;
      case 3u:
        uint64_t v11 = sub_253B05940();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v11))
        {
          uint64_t v12 = type metadata accessor for ExecutorError();
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v11);
        }
        break;
      default:
        uint64_t v6 = sub_253B05940();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SessionError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      goto LABEL_5;
    case 1:
      type metadata accessor for SessionCoordinatorError();
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result >= 3) {
        return result;
      }
LABEL_5:
      uint64_t v3 = sub_253B05940();
LABEL_6:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    case 2:
    case 3:
      uint64_t v3 = sub_253B05940();
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v3);
      if (!result) {
        goto LABEL_6;
      }
      return result;
    default:
      return result;
  }
}

void *initializeWithCopy for SessionError(void *a1, const void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      type metadata accessor for SessionCoordinatorError();
      swift_getEnumCaseMultiPayload();
      uint64_t v5 = sub_253B05940();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v6 = sub_253B05940();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6)) {
        goto LABEL_9;
      }
      uint64_t v7 = type metadata accessor for PlannerError();
      goto LABEL_8;
    case 3u:
      uint64_t v6 = sub_253B05940();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = type metadata accessor for ExecutorError();
LABEL_8:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
LABEL_9:
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      }
      break;
    default:
      uint64_t v4 = sub_253B05940();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for SessionError(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_253480D90((uint64_t)a1, (void (*)(void))type metadata accessor for SessionError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for SessionCoordinatorError();
        swift_getEnumCaseMultiPayload();
        uint64_t v5 = sub_253B05940();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v6 = sub_253B05940();
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6)) {
          goto LABEL_10;
        }
        uint64_t v7 = type metadata accessor for PlannerError();
        goto LABEL_9;
      case 3u:
        uint64_t v6 = sub_253B05940();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
        {
          uint64_t v7 = type metadata accessor for ExecutorError();
LABEL_9:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
LABEL_10:
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
        }
        break;
      default:
        uint64_t v4 = sub_253B05940();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for SessionError(void *a1, const void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      type metadata accessor for SessionCoordinatorError();
      swift_getEnumCaseMultiPayload();
      uint64_t v5 = sub_253B05940();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      uint64_t v6 = sub_253B05940();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6)) {
        goto LABEL_9;
      }
      uint64_t v7 = type metadata accessor for PlannerError();
      goto LABEL_8;
    case 3u:
      uint64_t v6 = sub_253B05940();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = type metadata accessor for ExecutorError();
LABEL_8:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
LABEL_9:
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      }
      break;
    default:
      uint64_t v4 = sub_253B05940();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for SessionError(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_253480D90((uint64_t)a1, (void (*)(void))type metadata accessor for SessionError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        type metadata accessor for SessionCoordinatorError();
        swift_getEnumCaseMultiPayload();
        uint64_t v5 = sub_253B05940();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v6 = sub_253B05940();
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6)) {
          goto LABEL_10;
        }
        uint64_t v7 = type metadata accessor for PlannerError();
        goto LABEL_9;
      case 3u:
        uint64_t v6 = sub_253B05940();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
        {
          uint64_t v7 = type metadata accessor for ExecutorError();
LABEL_9:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
LABEL_10:
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
        }
        break;
      default:
        uint64_t v4 = sub_253B05940();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_253482D0C()
{
  uint64_t result = sub_253B05940();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SessionCoordinatorError();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PlannerError();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for ExecutorError();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SessionError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253482F14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionError.CodingKeys()
{
  return &type metadata for SessionError.CodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.OtherCodingKeys()
{
  return &type metadata for SessionError.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.SessionCoordinatorErrorCodingKeys()
{
  return &type metadata for SessionError.SessionCoordinatorErrorCodingKeys;
}

ValueMetadata *type metadata accessor for SessionError.PlannerErrorCodingKeys()
{
  return &type metadata for SessionError.PlannerErrorCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport12SessionErrorO15OtherCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25348301CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionError.ExecutorErrorCodingKeys()
{
  return &type metadata for SessionError.ExecutorErrorCodingKeys;
}

unint64_t sub_253483058()
{
  unint64_t result = qword_269CDB950;
  if (!qword_269CDB950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB950);
  }
  return result;
}

unint64_t sub_2534830A8()
{
  unint64_t result = qword_269CDB958;
  if (!qword_269CDB958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB958);
  }
  return result;
}

unint64_t sub_2534830F8()
{
  unint64_t result = qword_269CDB960;
  if (!qword_269CDB960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB960);
  }
  return result;
}

unint64_t sub_253483148()
{
  unint64_t result = qword_269CDB968;
  if (!qword_269CDB968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB968);
  }
  return result;
}

unint64_t sub_253483198()
{
  unint64_t result = qword_269CDB970;
  if (!qword_269CDB970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB970);
  }
  return result;
}

unint64_t sub_2534831E8()
{
  unint64_t result = qword_269CDB978;
  if (!qword_269CDB978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB978);
  }
  return result;
}

unint64_t sub_253483238()
{
  unint64_t result = qword_269CDB980;
  if (!qword_269CDB980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB980);
  }
  return result;
}

unint64_t sub_253483288()
{
  unint64_t result = qword_269CDB988;
  if (!qword_269CDB988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB988);
  }
  return result;
}

unint64_t sub_2534832D8()
{
  unint64_t result = qword_269CDB990;
  if (!qword_269CDB990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB990);
  }
  return result;
}

unint64_t sub_253483328()
{
  unint64_t result = qword_269CDB998;
  if (!qword_269CDB998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB998);
  }
  return result;
}

unint64_t sub_253483378()
{
  unint64_t result = qword_269CDB9A0;
  if (!qword_269CDB9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9A0);
  }
  return result;
}

unint64_t sub_2534833C8()
{
  unint64_t result = qword_269CDB9A8;
  if (!qword_269CDB9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9A8);
  }
  return result;
}

unint64_t sub_253483418()
{
  unint64_t result = qword_269CDB9B0;
  if (!qword_269CDB9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9B0);
  }
  return result;
}

unint64_t sub_253483468()
{
  unint64_t result = qword_269CDB9B8;
  if (!qword_269CDB9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9B8);
  }
  return result;
}

unint64_t sub_2534834B8()
{
  unint64_t result = qword_269CDB9C0;
  if (!qword_269CDB9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9C0);
  }
  return result;
}

uint64_t sub_253483504(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_253483564()
{
  return v0;
}

uint64_t sub_25348358C()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534835C8()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534835EC()
{
  return sub_253B0A370();
}

uint64_t sub_25348360C()
{
  return 0;
}

void sub_253483628(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_253483644(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_253483660()
{
  return 0;
}

uint64_t sub_253483694()
{
  return v0;
}

uint64_t sub_2534836A4()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_2534836D0()
{
  return v0;
}

uint64_t *sub_2534836E4(uint64_t a1)
{
  v1[4] = a1;
  return sub_2534724A8(v1);
}

uint64_t ContextRetrievalServiceInput.query.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::ContextRetrievalServiceInput __swiftcall ContextRetrievalServiceInput.init(query:)(IntelligenceFlowPlannerSupport::ContextRetrievalServiceInput query)
{
  *uint64_t v1 = query;
  return query;
}

uint64_t sub_253483734(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7972657571 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534837B4()
{
  return 0x7972657571;
}

uint64_t sub_2534837CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253483734(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534837F8(uint64_t a1)
{
  unint64_t v2 = sub_253483960();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253483834(uint64_t a1)
{
  unint64_t v2 = sub_253483960();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContextRetrievalServiceInput.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v3 = sub_253462A5C(&qword_269CDB9C8);
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  sub_253472068(v2, v2[3]);
  sub_253483960();
  sub_253B0A680();
  sub_253B0A3F0();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v3);
  sub_2534847C8();
}

unint64_t sub_253483960()
{
  unint64_t result = qword_269CDB9D0;
  if (!qword_269CDB9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9D0);
  }
  return result;
}

void ContextRetrievalServiceInput.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDB9D8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534847E0();
  sub_253472068(v2, v2[3]);
  sub_253483960();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v6 = sub_253B0A320();
    uint64_t v8 = v7;
    uint64_t v9 = sub_2534847B0();
    v10(v9);
    *uint64_t v4 = v6;
    v4[1] = v8;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  sub_2534847C8();
}

void sub_253483AB4()
{
}

void sub_253483ACC()
{
}

uint64_t ContextRetrievalServiceOutput.requiredContext.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContextRetrievalServiceOutput.utteranceContext.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContextRetrievalServiceOutput.init(requiredContext:utteranceContext:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_253483AFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465726975716572 && a2 == 0xEF747865746E6F43;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0BD90)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253483C10(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x6465726975716572;
  }
}

uint64_t sub_253483C58()
{
  return sub_253483C10(*v0);
}

uint64_t sub_253483C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253483AFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253483C88(uint64_t a1)
{
  unint64_t v2 = sub_253483E68();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253483CC4(uint64_t a1)
{
  unint64_t v2 = sub_253483E68();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContextRetrievalServiceOutput.encode(to:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v4 = sub_253462A5C(&qword_269CDB9E0);
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v0 + 8);
  sub_253472068(v3, v3[3]);
  sub_253483E68();
  sub_253B0A680();
  char v11 = 0;
  sub_253462A5C(&qword_269CDB9F0);
  sub_253484078((unint64_t *)&qword_269CDB9F8, &qword_269CDBA00);
  sub_253484784();
  if (!v1)
  {
    char v11 = 1;
    sub_253484784();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  sub_2534847C8();
}

unint64_t sub_253483E68()
{
  unint64_t result = qword_269CDB9E8;
  if (!qword_269CDB9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9E8);
  }
  return result;
}

void ContextRetrievalServiceOutput.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_253462A5C(&qword_269CDBA08);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_253472068(v12, v12[3]);
  sub_253483E68();
  sub_253B0A660();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  }
  else
  {
    sub_253462A5C(&qword_269CDB9F0);
    sub_253484078((unint64_t *)&qword_269CDBA10, &qword_269CDBA18);
    sub_253484754();
    swift_bridgeObjectRetain();
    sub_253484754();
    uint64_t v16 = sub_253484810();
    v17(v16);
    *uint64_t v14 = a10;
    v14[1] = a10;
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2534847C8();
}

uint64_t sub_253484078(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_269CDB9F0);
    sub_2534840F8(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2534840F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_253B07AB0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25348413C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ContextRetrievalServiceOutput.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_253484154()
{
}

uint64_t getEnumTagSinglePayload for ContextRetrievalServiceInput(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContextRetrievalServiceInput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalServiceInput()
{
  return &type metadata for ContextRetrievalServiceInput;
}

uint64_t destroy for ContextRetrievalServiceOutput()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s30IntelligenceFlowPlannerSupport29ContextRetrievalServiceOutputVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContextRetrievalServiceOutput(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ContextRetrievalServiceOutput(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextRetrievalServiceOutput(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContextRetrievalServiceOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalServiceOutput()
{
  return &type metadata for ContextRetrievalServiceOutput;
}

unsigned char *storeEnumTagSinglePayload for ContextRetrievalServiceOutput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253484468);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalServiceOutput.CodingKeys()
{
  return &type metadata for ContextRetrievalServiceOutput.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ContextRetrievalServiceInput.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25348453CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalServiceInput.CodingKeys()
{
  return &type metadata for ContextRetrievalServiceInput.CodingKeys;
}

unint64_t sub_253484578()
{
  unint64_t result = qword_269CDBA20;
  if (!qword_269CDBA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA20);
  }
  return result;
}

unint64_t sub_2534845C8()
{
  unint64_t result = qword_269CDBA28;
  if (!qword_269CDBA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA28);
  }
  return result;
}

unint64_t sub_253484618()
{
  unint64_t result = qword_269CDBA30;
  if (!qword_269CDBA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA30);
  }
  return result;
}

unint64_t sub_253484668()
{
  unint64_t result = qword_269CDBA38;
  if (!qword_269CDBA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA38);
  }
  return result;
}

unint64_t sub_2534846B8()
{
  unint64_t result = qword_269CDBA40;
  if (!qword_269CDBA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA40);
  }
  return result;
}

unint64_t sub_253484708()
{
  unint64_t result = qword_269CDBA48;
  if (!qword_269CDBA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA48);
  }
  return result;
}

uint64_t sub_253484754()
{
  return sub_253B0A370();
}

uint64_t sub_253484784()
{
  return sub_253B0A440();
}

uint64_t sub_2534847B0()
{
  return v0;
}

uint64_t sub_253484810()
{
  return v0;
}

uint64_t ContextRetrievalInput.contextType.getter@<X0>(uint64_t a1@<X8>)
{
  sub_253B07680();
  sub_25346CAF4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t ContextRetrievalInput.sourceType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ContextRetrievalInput() + 20);
  return sub_253484910(v3, a1);
}

uint64_t type metadata accessor for ContextRetrievalInput()
{
  uint64_t result = qword_26B240EC8;
  if (!qword_26B240EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_253484910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B240F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ContextRetrievalInput.init(contextType:sourceType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_253B07680();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, a1);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for ContextRetrievalInput() + 20);
  return sub_253484A00(a2, v7);
}

uint64_t sub_253484A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B240F38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_253484A68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x54747865746E6F63 && a2 == 0xEB00000000657079;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7954656372756F73 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_253484B7C(char a1)
{
  if (a1) {
    return 0x7954656372756F73;
  }
  else {
    return 0x54747865746E6F63;
  }
}

uint64_t sub_253484BC0()
{
  return sub_253484B7C(*v0);
}

uint64_t sub_253484BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253484A68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_253484BF0(uint64_t a1)
{
  unint64_t v2 = sub_253484E38();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253484C2C(uint64_t a1)
{
  unint64_t v2 = sub_253484E38();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContextRetrievalInput.encode(to:)(void *a1)
{
  uint64_t v3 = sub_253462A5C(&qword_26B240F98);
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v9 = v8 - v7;
  sub_253472068(a1, a1[3]);
  sub_253484E38();
  sub_253B0A680();
  sub_253B07680();
  sub_2534857E0(&qword_26B240F48, MEMORY[0x263F4E2E8]);
  sub_253B0A440();
  if (!v1)
  {
    type metadata accessor for ContextRetrievalInput();
    sub_253B07610();
    sub_2534857E0(&qword_26B240F30, MEMORY[0x263F4E1D0]);
    sub_253B0A3E0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

unint64_t sub_253484E38()
{
  unint64_t result = qword_26B240F58;
  if (!qword_26B240F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F58);
  }
  return result;
}

uint64_t ContextRetrievalInput.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_253462A5C(&qword_26B240F38);
  MEMORY[0x270FA5388](v5 - 8);
  sub_2534847E0();
  uint64_t v22 = sub_253B07680();
  sub_253465998();
  uint64_t v20 = v6;
  MEMORY[0x270FA5388](v7);
  sub_25346CC44();
  uint64_t v21 = v9 - v8;
  sub_253462A5C(&qword_269CDBA50);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v11 = type metadata accessor for ContextRetrievalInput();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  sub_25346CC44();
  uint64_t v15 = v14 - v13;
  sub_253472068(a1, a1[3]);
  sub_253484E38();
  sub_253B0A660();
  if (v2) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  sub_2534857E0(&qword_269CDBA58, MEMORY[0x263F4E2E8]);
  sub_253B0A370();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v15, v21, v22);
  sub_253B07610();
  sub_2534857E0(&qword_269CDBA60, MEMORY[0x263F4E1D0]);
  sub_253B0A310();
  uint64_t v16 = sub_253486618();
  v17(v16);
  sub_253484A00(v3, v15 + *(int *)(v11 + 20));
  sub_2534851B8(v15, a2);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  return sub_25348521C(v15);
}

uint64_t sub_2534851B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContextRetrievalInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25348521C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContextRetrievalInput();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_253485278@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ContextRetrievalInput.init(from:)(a1, a2);
}

uint64_t sub_253485290(void *a1)
{
  return ContextRetrievalInput.encode(to:)(a1);
}

uint64_t ContextRetrievalOutput.contextValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContextRetrievalOutput.init(contextValues:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_2534852B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x56747865746E6F63 && a2 == 0xED00007365756C61)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253485364()
{
  return 0x56747865746E6F63;
}

uint64_t sub_25348538C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534852B8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534853B8(uint64_t a1)
{
  unint64_t v2 = sub_25348558C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534853F4(uint64_t a1)
{
  unint64_t v2 = sub_25348558C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContextRetrievalOutput.encode(to:)(void *a1)
{
  uint64_t v2 = sub_253462A5C(qword_26B240FA0);
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253472068(a1, a1[3]);
  sub_25348558C();
  sub_253B0A680();
  sub_253462A5C(&qword_26B240F88);
  sub_25348574C(&qword_26B240F90, &qword_26B240F50);
  sub_253B0A440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

unint64_t sub_25348558C()
{
  unint64_t result = qword_26B240F70;
  if (!qword_26B240F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F70);
  }
  return result;
}

uint64_t ContextRetrievalOutput.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = sub_253462A5C(&qword_269CDBA68);
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_2534847E0();
  sub_253472068(a1, a1[3]);
  sub_25348558C();
  sub_253B0A660();
  if (!v2)
  {
    sub_253462A5C(&qword_26B240F88);
    sub_25348574C(&qword_269CDBA70, &qword_269CDBA78);
    sub_253B0A370();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    *a2 = v11;
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

uint64_t sub_25348574C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_26B240F88);
    sub_2534857E0(a2, MEMORY[0x263F4E408]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2534857E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253485828@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ContextRetrievalOutput.init(from:)(a1, a2);
}

uint64_t sub_253485840(void *a1)
{
  return ContextRetrievalOutput.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextRetrievalInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B07680();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B07610();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_253462A5C(&qword_26B240F38);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t destroy for ContextRetrievalInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B07680();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B07610();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B07680();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B07610();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C(&qword_26B240F38);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B07680();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B07610();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_253462A5C(&qword_26B240F38);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B07680();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B07610();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C(&qword_26B240F38);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B07680();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B07610();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_253462A5C(&qword_26B240F38);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253485FFC);
}

uint64_t sub_253485FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253B07680();
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = sub_253462A5C(&qword_26B240F38);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ContextRetrievalInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253486090);
}

uint64_t sub_253486090(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253B07680();
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = sub_253462A5C(&qword_26B240F38);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, a2, a2, v10);
}

void sub_253486118()
{
  sub_253B07680();
  if (v0 <= 0x3F)
  {
    sub_2534861E0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_2534861E0()
{
  if (!qword_26B240F40)
  {
    sub_253B07610();
    unint64_t v0 = sub_253B09E00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B240F40);
    }
  }
}

ValueMetadata *type metadata accessor for ContextRetrievalOutput()
{
  return &type metadata for ContextRetrievalOutput;
}

unsigned char *storeEnumTagSinglePayload for ContextRetrievalOutput.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2534862E4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalOutput.CodingKeys()
{
  return &type metadata for ContextRetrievalOutput.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ContextRetrievalInput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534863E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextRetrievalInput.CodingKeys()
{
  return &type metadata for ContextRetrievalInput.CodingKeys;
}

unint64_t sub_253486424()
{
  unint64_t result = qword_269CDBA80;
  if (!qword_269CDBA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA80);
  }
  return result;
}

unint64_t sub_253486474()
{
  unint64_t result = qword_269CDBA88;
  if (!qword_269CDBA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA88);
  }
  return result;
}

unint64_t sub_2534864C4()
{
  unint64_t result = qword_26B240F80;
  if (!qword_26B240F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F80);
  }
  return result;
}

unint64_t sub_253486514()
{
  unint64_t result = qword_26B240F78;
  if (!qword_26B240F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F78);
  }
  return result;
}

unint64_t sub_253486564()
{
  unint64_t result = qword_26B240F68;
  if (!qword_26B240F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F68);
  }
  return result;
}

unint64_t sub_2534865B4()
{
  unint64_t result = qword_26B240F60;
  if (!qword_26B240F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B240F60);
  }
  return result;
}

uint64_t sub_253486618()
{
  return v0;
}

uint64_t static FeatureStoreWrapper.runReplayableOperation<A, B>(interactionId:input:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_253B05690();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v12 + 16) = v17;
  *uint64_t v17 = v12;
  v17[1] = sub_25348673C;
  return MEMORY[0x270F286B8](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_25348673C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

ValueMetadata *type metadata accessor for FeatureStoreWrapper()
{
  return &type metadata for FeatureStoreWrapper;
}

uint64_t InsertVariablesRequest.variables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t InsertVariablesRequest.init(variables:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_253486850(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656C626169726176 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534868E4()
{
  return 0x656C626169726176;
}

uint64_t sub_253486904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253486850(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253486930(uint64_t a1)
{
  unint64_t v2 = sub_253486AC4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25348696C(uint64_t a1)
{
  unint64_t v2 = sub_253486AC4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t InsertVariablesRequest.encode(to:)(void *a1)
{
  uint64_t v3 = sub_253462A5C(&qword_269CDBA98);
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  sub_253472068(a1, a1[3]);
  sub_253486AC4();
  sub_253B0A680();
  sub_253462A5C(&qword_269CDBAA8);
  sub_253486B10();
  sub_253B0A440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
}

unint64_t sub_253486AC4()
{
  unint64_t result = qword_269CDBAA0;
  if (!qword_269CDBAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAA0);
  }
  return result;
}

unint64_t sub_253486B10()
{
  unint64_t result = qword_269CDBAB0;
  if (!qword_269CDBAB0)
  {
    sub_25347907C(&qword_269CDBAA8);
    sub_253486D7C(&qword_269CDBAB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAB0);
  }
  return result;
}

uint64_t InsertVariablesRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = sub_253462A5C(&qword_269CDBAC0);
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_2534847E0();
  sub_253472068(a1, a1[3]);
  sub_253486AC4();
  sub_253B0A660();
  if (!v2)
  {
    sub_253462A5C(&qword_269CDBAA8);
    sub_253486CE4();
    sub_253B0A370();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
    *a2 = v11;
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

unint64_t sub_253486CE4()
{
  unint64_t result = qword_269CDBAC8;
  if (!qword_269CDBAC8)
  {
    sub_25347907C(&qword_269CDBAA8);
    sub_253486D7C(&qword_269CDBAD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAC8);
  }
  return result;
}

uint64_t sub_253486D7C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_253B09120();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253486DC0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return InsertVariablesRequest.init(from:)(a1, a2);
}

uint64_t sub_253486DD8(void *a1)
{
  return InsertVariablesRequest.encode(to:)(a1);
}

uint64_t sub_253486DF4(uint64_t a1)
{
  unint64_t v2 = sub_253486F54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253486E30(uint64_t a1)
{
  unint64_t v2 = sub_253486F54();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t InsertVariablesResult.encode(to:)(void *a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDBAD8);
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(a1, a1[3]);
  sub_253486F54();
  sub_253B0A680();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

unint64_t sub_253486F54()
{
  unint64_t result = qword_269CDBAE0;
  if (!qword_269CDBAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAE0);
  }
  return result;
}

uint64_t InsertVariablesResult.init(from:)(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
}

uint64_t sub_253486FC8(uint64_t a1)
{
  return InsertVariablesResult.init(from:)(a1);
}

uint64_t sub_253486FE0(void *a1)
{
  return InsertVariablesResult.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for InsertVariablesRequest()
{
  return &type metadata for InsertVariablesRequest;
}

ValueMetadata *type metadata accessor for InsertVariablesResult()
{
  return &type metadata for InsertVariablesResult;
}

ValueMetadata *type metadata accessor for InsertVariablesResult.CodingKeys()
{
  return &type metadata for InsertVariablesResult.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for InsertVariablesRequest.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2534870C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for InsertVariablesRequest.CodingKeys()
{
  return &type metadata for InsertVariablesRequest.CodingKeys;
}

unint64_t sub_253487100()
{
  unint64_t result = qword_269CDBAE8;
  if (!qword_269CDBAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAE8);
  }
  return result;
}

unint64_t sub_253487150()
{
  unint64_t result = qword_269CDBAF0;
  if (!qword_269CDBAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAF0);
  }
  return result;
}

unint64_t sub_2534871A0()
{
  unint64_t result = qword_269CDBAF8;
  if (!qword_269CDBAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBAF8);
  }
  return result;
}

unint64_t sub_2534871F0()
{
  unint64_t result = qword_269CDBB00;
  if (!qword_269CDBB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB00);
  }
  return result;
}

unint64_t sub_253487240()
{
  unint64_t result = qword_269CDBB08;
  if (!qword_269CDBB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB08);
  }
  return result;
}

uint64_t Session.InstrumentableEvent.init(event:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2534872D8(a1, a4);
  uint64_t result = type metadata accessor for Session.InstrumentableEvent();
  uint64_t v8 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_2534872D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Session.InstrumentableEvent()
{
  uint64_t result = qword_26B249F60;
  if (!qword_26B249F60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Session.InstrumentableEvent.event.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_253487938(v1, a1, (void (*)(void))type metadata accessor for Session.Event);
}

uint64_t Session.InstrumentableEvent.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Session.InstrumentableEvent() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2534873F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E657665 && a2 == 0xE500000000000000;
  if (v2 || (sub_25349667C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000253B0BDB0 || (sub_25349667C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = sub_25349667C();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_253487530(char a1)
{
  if (!a1) {
    return 0x746E657665;
  }
  if (a1 == 1) {
    return 0xD000000000000014;
  }
  return 0x7470697263736564;
}

uint64_t sub_253487590()
{
  return sub_253487530(*v0);
}

uint64_t sub_253487598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534873F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_2534875C0(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_2534875CC(uint64_t a1)
{
  unint64_t v2 = sub_2534878EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253487608(uint64_t a1)
{
  unint64_t v2 = sub_2534878EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Session.InstrumentableEvent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  type metadata accessor for Session.Event(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v4);
  sub_25346CB04();
  uint64_t v25 = v5;
  uint64_t v26 = sub_253462A5C(&qword_269CDBB10);
  sub_253465998();
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v7);
  sub_2534966B0();
  uint64_t v8 = type metadata accessor for Session.InstrumentableEvent();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(a1, a1[3]);
  sub_2534878EC();
  sub_253B0A660();
  if (v2) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  }
  uint64_t v22 = v8;
  char v28 = 0;
  sub_253487CF0(&qword_269CDBB18, (void (*)(uint64_t))type metadata accessor for Session.Event);
  uint64_t v12 = v25;
  sub_253B0A370();
  sub_2534872D8(v12, (uint64_t)v11);
  char v27 = 2;
  uint64_t v13 = sub_253B0A320();
  uint64_t v15 = v14;
  uint64_t v16 = sub_253496698();
  v17(v16);
  uint64_t v18 = v23;
  uint64_t v19 = (uint64_t *)&v11[*(int *)(v22 + 20)];
  *uint64_t v19 = v13;
  v19[1] = v15;
  sub_253487938((uint64_t)v11, v18, (void (*)(void))type metadata accessor for Session.InstrumentableEvent);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
  return sub_253491A24((uint64_t)v11, (void (*)(void))type metadata accessor for Session.InstrumentableEvent);
}

unint64_t sub_2534878EC()
{
  unint64_t result = qword_26B249F50;
  if (!qword_26B249F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F50);
  }
  return result;
}

uint64_t sub_253487938(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t Session.InstrumentableEvent.encode(to:)(void *a1)
{
  type metadata accessor for Session.Event(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  uint64_t v21 = v4;
  type metadata accessor for TranscriptProtoEvent(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_2534966B0();
  uint64_t v6 = sub_253462A5C(&qword_26B24A3D8);
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(a1, a1[3]);
  sub_2534878EC();
  uint64_t v12 = v22;
  sub_253B0A680();
  LOBYTE(v24) = 0;
  sub_253487CF0(&qword_26B24A2C0, (void (*)(uint64_t))type metadata accessor for Session.Event);
  uint64_t v13 = v23;
  sub_253B0A440();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  }
  sub_253487938(v12, v21, (void (*)(void))type metadata accessor for Session.Event);
  TranscriptProtoEvent.init(handwritten:)();
  uint64_t v14 = v1;
  uint64_t v15 = v6;
  sub_253487CF0(&qword_26B2491D8, (void (*)(uint64_t))type metadata accessor for TranscriptProtoEvent);
  uint64_t v17 = sub_253B073D0();
  unint64_t v19 = v18;
  uint64_t v24 = v17;
  unint64_t v25 = v18;
  char v26 = 1;
  sub_253487D38();
  sub_253B0A440();
  type metadata accessor for Session.InstrumentableEvent();
  LOBYTE(v24) = 2;
  sub_253B0A3F0();
  sub_253487D84(v17, v19);
  sub_253491A24(v14, (void (*)(void))type metadata accessor for TranscriptProtoEvent);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v15);
}

uint64_t sub_253487CF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_253487D38()
{
  unint64_t result = qword_26B248C88;
  if (!qword_26B248C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248C88);
  }
  return result;
}

uint64_t sub_253487D84(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_253487DDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Session.InstrumentableEvent.init(from:)(a1, a2);
}

uint64_t sub_253487DF4(void *a1)
{
  return Session.InstrumentableEvent.encode(to:)(a1);
}

uint64_t *_s14descr27033EE49O19InstrumentableEventVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = sub_253B055C0();
  uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  uint64_t v9 = (int *)type metadata accessor for Session.Event(0);
  v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
  uint64_t v10 = v9[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2 + v10, 1, v7))
  {
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8((uint64_t *)v11, (uint64_t *)v12, v7);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, 0, 1, v7);
  }
  uint64_t v15 = v9[7];
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for Session.Event.Payload(0);
  uint64_t v417 = v7;
  uint64_t v415 = a3;
  v416 = (void (*)(void *, const void *, uint64_t))v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v19 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17, v19);
      uint64_t v20 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v21 = (void *)(v16 + v20);
      uint64_t v22 = (const void *)(v17 + v20);
      uint64_t v23 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23))
      {
        uint64_t v24 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
      }
      goto LABEL_165;
    case 1u:
      uint64_t v25 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v25;
      *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
      uint64_t v26 = type metadata accessor for TextQuery(0);
      uint64_t v27 = *(int *)(v26 + 24);
      v403 = (void *)(v16 + v27);
      __dstd = (void *)(v17 + v27);
      char v28 = v9;
      uint64_t v29 = sub_253B059D0();
      uint64_t v30 = *(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v31 = v29;
      uint64_t v9 = v28;
      v30(v403, __dstd, v31);
      uint64_t v32 = *(int *)(v26 + 28);
      uint64_t v33 = (void *)(v16 + v32);
      uint64_t v34 = (void *)(v17 + v32);
      uint64_t v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 2u:
      *(void *)uint64_t v16 = *(void *)v17;
      *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
      uint64_t v36 = *(void *)(v17 + 24);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 3u:
      v404 = (void *)type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v395 = v9;
      switch(EnumCaseMultiPayload)
      {
        case 3:
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v7))
          {
            uint64_t v278 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v278 - 8) + 64));
          }
          else
          {
            v8((uint64_t *)v16, (uint64_t *)v17, v7);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v7);
          }
          v283 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v8((uint64_t *)(v16 + v283[5]), (uint64_t *)(v17 + v283[5]), v7);
          uint64_t v284 = v283[6];
          v285 = (void *)(v16 + v284);
          v286 = (const void *)(v17 + v284);
          uint64_t v287 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v288 = sub_253B09120();
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v288 - 8) + 16))(v285, v286, v288);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v285, v286, *(void *)(*(void *)(v287 - 8) + 64));
          }
          uint64_t v289 = v283[7];
          uint64_t v290 = v16 + v289;
          uint64_t v291 = v17 + v289;
          uint64_t v292 = sub_253B059D0();
          v293 = *(void (**)(uint64_t, uint64_t))(*(void *)(v292 - 8) + 16);
          __dsta = (void *)v292;
          v293(v290, v291);
          uint64_t v294 = v283[8];
          v295 = (void *)(v16 + v294);
          v296 = (void *)(v17 + v294);
          uint64_t v297 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          int v298 = swift_getEnumCaseMultiPayload();
          if (v298 == 1)
          {
            void *v295 = *v296;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v298)
            {
              memcpy(v295, v296, *(void *)(*(void *)(v297 - 8) + 64));
              break;
            }
            uint64_t v299 = v296[1];
            void *v295 = *v296;
            v295[1] = v299;
            uint64_t v300 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v380 = (char *)v295 + v300;
            v301 = (char *)v296 + v300;
            swift_bridgeObjectRetain();
            ((void (*)(char *, char *, void *))v293)(v380, v301, __dsta);
          }
          swift_storeEnumTagMultiPayload();
          break;
        case 2:
          *(void *)uint64_t v16 = *(void *)v17;
          swift_bridgeObjectRetain();
          break;
        case 1:
          uint64_t v38 = *(void *)(v17 + 8);
          *(void *)uint64_t v16 = *(void *)v17;
          *(void *)(v16 + 8) = v38;
          uint64_t v39 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dste = (void *)(v16 + v39);
          uint64_t v40 = v17 + v39;
          uint64_t v41 = sub_253B059D0();
          uint64_t v42 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16);
          swift_bridgeObjectRetain();
          v42(__dste, v40, v41);
          break;
        default:
          memcpy((void *)v16, (const void *)v17, *(void *)(*(v404 - 1) + 64));
          goto LABEL_139;
      }
      swift_storeEnumTagMultiPayload();
LABEL_139:
      uint64_t v321 = type metadata accessor for Request(0);
      *(unsigned char *)(v16 + *(int *)(v321 + 20)) = *(unsigned char *)(v17 + *(int *)(v321 + 20));
      __dstc = (int *)v321;
      uint64_t v322 = *(int *)(v321 + 24);
      v413 = (void *)(v16 + v322);
      v323 = (void *)(v17 + v322);
      uint64_t v324 = type metadata accessor for RequestPrescribedPlan(0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v323, 1, v324))
      {
        uint64_t v325 = sub_253462A5C(&qword_269CDBB20);
        memcpy(v413, v323, *(void *)(*(void *)(v325 - 8) + 64));
      }
      else
      {
        v382 = v323;
        uint64_t v385 = v324;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v326 = v323[1];
            uint64_t v327 = (uint64_t)v413;
            void *v413 = *v323;
            v413[1] = v326;
            *((_WORD *)v413 + 8) = *((_WORD *)v323 + 8);
            swift_bridgeObjectRetain();
            uint64_t v328 = v385;
            goto LABEL_157;
          case 1u:
            uint64_t v335 = v323[1];
            uint64_t v327 = (uint64_t)v413;
            void *v413 = *v323;
            v413[1] = v335;
            swift_bridgeObjectRetain();
            uint64_t v328 = v385;
            goto LABEL_157;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            uint64_t v336 = v323[1];
            uint64_t v327 = (uint64_t)v413;
            void *v413 = *v323;
            v413[1] = v336;
            *((unsigned char *)v413 + 16) = *((unsigned char *)v323 + 16);
            swift_bridgeObjectRetain();
            uint64_t v328 = v385;
            goto LABEL_157;
          case 6u:
            uint64_t v337 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v337 - 8) + 16))(v413, v323, v337);
            uint64_t v338 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            v339 = (char *)v413 + v338;
            v340 = (char *)v323 + v338;
            uint64_t v327 = (uint64_t)v413;
            *(void *)v339 = *(void *)v340;
            v339[8] = v340[8];
            uint64_t v328 = v385;
LABEL_157:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            uint64_t v328 = v324;
            uint64_t v327 = (uint64_t)v413;
            memcpy(v413, v382, *(void *)(*(void *)(v385 - 8) + 64));
            break;
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v327, 0, 1, v328);
      }
      uint64_t v341 = __dstc[7];
      v342 = (void *)(v16 + v341);
      v343 = (const void *)(v17 + v341);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v341, 1, v7))
      {
        uint64_t v344 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v342, v343, *(void *)(*(void *)(v344 - 8) + 64));
      }
      else
      {
        v416(v342, v343, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v342, 0, 1, v7);
      }
      uint64_t v345 = __dstc[8];
      v227 = (void *)(v16 + v345);
      v228 = (void *)(v17 + v345);
      uint64_t v229 = v228[1];
      uint64_t v9 = v395;
      if (v229)
      {
LABEL_163:
        void *v227 = *v228;
        v227[1] = v229;
        v227[2] = v228[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_165;
      }
      *(_OWORD *)v227 = *(_OWORD *)v228;
      v227[2] = v228[2];
LABEL_165:
      swift_storeEnumTagMultiPayload();
LABEL_166:
      uint64_t v346 = v9[8];
      v347 = (uint64_t *)((char *)a1 + v346);
      v348 = (uint64_t *)((char *)a2 + v346);
      uint64_t v349 = v348[1];
      void *v347 = *v348;
      v347[1] = v349;
      uint64_t v350 = v9[9];
      v351 = (uint64_t *)((char *)a1 + v350);
      v352 = (uint64_t *)((char *)a2 + v350);
      uint64_t v353 = v352[1];
      void *v351 = *v352;
      v351[1] = v353;
      uint64_t v354 = v9[10];
      v355 = (uint64_t *)((char *)a1 + v354);
      v356 = (uint64_t *)((char *)a2 + v354);
      uint64_t v357 = v356[1];
      void *v355 = *v356;
      v355[1] = v357;
      uint64_t v358 = v9[11];
      v359 = (uint64_t *)((char *)a1 + v358);
      v360 = (uint64_t *)((char *)a2 + v358);
      uint64_t v361 = v360[1];
      void *v359 = *v360;
      v359[1] = v361;
      uint64_t v362 = v9[12];
      v363 = (char *)a1 + v362;
      v364 = v9;
      v365 = (char *)a2 + v362;
      uint64_t v366 = sub_253B05550();
      v414 = *(void (**)(char *, char *, uint64_t))(*(void *)(v366 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v414(v363, v365, v366);
      v367 = (int *)type metadata accessor for Timepoint();
      *(void *)&v363[v367[5]] = *(void *)&v365[v367[5]];
      *(void *)&v363[v367[6]] = *(void *)&v365[v367[6]];
      v416(&v363[v367[7]], &v365[v367[7]], v417);
      uint64_t v368 = v364[13];
      v369 = (uint64_t *)((char *)a1 + v368);
      v370 = (uint64_t *)((char *)a2 + v368);
      uint64_t v371 = v370[1];
      void *v369 = *v370;
      v369[1] = v371;
      uint64_t v372 = v364[14];
      v373 = (char *)a1 + v372;
      v374 = (char *)a2 + v372;
      *(void *)v373 = *(void *)v374;
      v373[8] = v374[8];
      *(uint64_t *)((char *)a1 + v364[15]) = *(uint64_t *)((char *)a2 + v364[15]);
      uint64_t v375 = *(int *)(v415 + 20);
      v376 = (uint64_t *)((char *)a1 + v375);
      v377 = (uint64_t *)((char *)a2 + v375);
      uint64_t v378 = v377[1];
      void *v376 = *v377;
      v376[1] = v378;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 4u:
      uint64_t v43 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v43;
      uint64_t v44 = *(void *)(v17 + 24);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = v44;
      uint64_t v45 = *(void *)(v17 + 40);
      *(void *)(v16 + 32) = *(void *)(v17 + 32);
      *(void *)(v16 + 40) = v45;
      *(void *)(v16 + 48) = *(void *)(v17 + 48);
      *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 5u:
      uint64_t v46 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v16, v17, v46);
      uint64_t v47 = (int *)type metadata accessor for Action(0);
      uint64_t v48 = v47[5];
      uint64_t v49 = (void *)(v16 + v48);
      uint64_t v50 = (uint64_t *)(v17 + v48);
      uint64_t v52 = *v50;
      uint64_t v51 = v50[1];
      *uint64_t v49 = v52;
      v49[1] = v51;
      *(unsigned char *)(v16 + v47[6]) = *(unsigned char *)(v17 + v47[6]);
      *(void *)(v16 + v47[7]) = *(void *)(v17 + v47[7]);
      uint64_t v53 = v47[8];
      uint64_t v54 = (void *)(v16 + v53);
      uint64_t v55 = (void *)(v17 + v53);
      uint64_t v56 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v47[9];
      uint64_t v58 = (void *)(v16 + v57);
      uint64_t v59 = (void *)(v17 + v57);
      uint64_t v60 = v59[1];
      *uint64_t v58 = *v59;
      v58[1] = v60;
      uint64_t v61 = v9;
      uint64_t v62 = v59[3];
      v58[2] = v59[2];
      v58[3] = v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = v61;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 6u:
      uint64_t v63 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v63))
      {
        uint64_t v64 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v16, v17, v63);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v63);
      }
      uint64_t v201 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v16 + *(int *)(v201 + 20), v17 + *(int *)(v201 + 20), v63);
      goto LABEL_165;
    case 7u:
      uint64_t v65 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v16, v17, v65);
      uint64_t v66 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v67 = v66[5];
      uint64_t v68 = (void *)(v16 + v67);
      uint64_t v69 = (uint64_t *)(v17 + v67);
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      *uint64_t v68 = v71;
      v68[1] = v70;
      *(void *)(v16 + v66[6]) = *(void *)(v17 + v66[6]);
      uint64_t v72 = v66[7];
      uint64_t v73 = (void *)(v16 + v72);
      uint64_t v74 = (void *)(v17 + v72);
      uint64_t v75 = v74[1];
      *uint64_t v73 = *v74;
      v73[1] = v75;
      uint64_t v76 = v66[8];
      uint64_t v77 = (void *)(v16 + v76);
      uint64_t v78 = (void *)(v17 + v76);
      uint64_t v79 = v9;
      uint64_t v80 = v78[1];
      *uint64_t v77 = *v78;
      v77[1] = v80;
      *(void *)(v16 + v66[9]) = *(void *)(v17 + v66[9]);
      *(void *)(v16 + v66[10]) = *(void *)(v17 + v66[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = v79;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 8u:
      uint64_t v81 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 16))(v16, v17, v81);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v16 + *(int *)(Step + 20)) = *(void *)(v17 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 9u:
      uint64_t v83 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(v16, v17, v83);
      uint64_t v84 = type metadata accessor for VariableStep(0);
      *(void *)(v16 + *(int *)(v84 + 20)) = *(void *)(v17 + *(int *)(v84 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v16 = *(void *)v17;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v110 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v110;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xCu:
      uint64_t v85 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v85;
      uint64_t v86 = *(void *)(v17 + 24);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = v86;
      uint64_t v87 = *(void *)(v17 + 40);
      *(void *)(v16 + 32) = *(void *)(v17 + 32);
      *(void *)(v16 + 40) = v87;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v279 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v279 - 8) + 16))(v16, v17, v279);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v280 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v280)) {
            goto LABEL_119;
          }
          uint64_t v281 = type metadata accessor for PlannerError();
          goto LABEL_114;
        case 3u:
          uint64_t v280 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v280))
          {
            uint64_t v281 = type metadata accessor for ExecutorError();
LABEL_114:
            memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v281 - 8) + 64));
          }
          else
          {
LABEL_119:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v280 - 8) + 16))(v16, v17, v280);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v280);
          }
          break;
        default:
          uint64_t v88 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16))(v16, v17, v88);
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      goto LABEL_166;
    case 0xEu:
      uint64_t v89 = *(void *)v17;
      unint64_t v90 = *(void *)(v17 + 8);
      sub_25348A9C8(*(void *)v17, v90);
      *(void *)uint64_t v16 = v89;
      *(void *)(v16 + 8) = v90;
      uint64_t v91 = *(void *)(v17 + 16);
      unint64_t v92 = *(void *)(v17 + 24);
      sub_25348A9C8(v91, v92);
      *(void *)(v16 + 16) = v91;
      *(void *)(v16 + 24) = v92;
      uint64_t v93 = *(void *)(v17 + 40);
      *(void *)(v16 + 32) = *(void *)(v17 + 32);
      *(void *)(v16 + 40) = v93;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xFu:
      uint64_t v94 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(v16, v17, v94);
      goto LABEL_165;
    case 0x10u:
      v396 = v9;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v7))
      {
        uint64_t v95 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v16, (uint64_t *)v17, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v7);
      }
      v256 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      v257 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v256(v16 + v257[5], v17 + v257[5], v7);
      uint64_t v258 = v257[6];
      v259 = (void *)(v16 + v258);
      v260 = (const void *)(v17 + v258);
      uint64_t v261 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v262 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v262 - 8) + 16))(v259, v260, v262);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v259, v260, *(void *)(*(void *)(v261 - 8) + 64));
      }
      uint64_t v263 = v257[7];
      uint64_t v264 = v16 + v263;
      uint64_t v265 = v17 + v263;
      uint64_t v266 = sub_253B059D0();
      v267 = (void **)(*(void *)(v266 - 8) + 16);
      v412 = (void (*)(char *, char *, uint64_t))*v267;
      ((void (*)(uint64_t, uint64_t, uint64_t))*v267)(v264, v265, v266);
      uint64_t v268 = v257[8];
      v269 = (void *)(v16 + v268);
      v270 = (void *)(v17 + v268);
      uint64_t v271 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v272 = swift_getEnumCaseMultiPayload();
      if (v272 == 1)
      {
        void *v269 = *v270;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v272)
        {
          memcpy(v269, v270, *(void *)(*(void *)(v271 - 8) + 64));
LABEL_104:
          uint64_t v9 = v396;
          goto LABEL_165;
        }
        uint64_t v273 = v270[1];
        void *v269 = *v270;
        v269[1] = v273;
        uint64_t v274 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v275 = (char *)v269 + v274;
        v276 = (char *)v270 + v274;
        swift_bridgeObjectRetain();
        v412(v275, v276, v266);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_104;
    case 0x11u:
      v397 = v9;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v7))
      {
        uint64_t v96 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v96 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v16, (uint64_t *)v17, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v7);
      }
      uint64_t v202 = type metadata accessor for ActionStepResult(0);
      uint64_t v203 = *(int *)(v202 + 20);
      v204 = (void *)(v16 + v203);
      v205 = (void *)(v17 + v203);
      uint64_t v206 = v205[1];
      void *v204 = *v205;
      v204[1] = v206;
      v410 = (int *)v202;
      uint64_t v207 = *(int *)(v202 + 24);
      uint64_t v208 = v16 + v207;
      __dsth = (char *)(v17 + v207);
      uint64_t v209 = sub_253B05AB0();
      v210 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v209 - 8) + 16);
      swift_bridgeObjectRetain();
      v210(v208, __dsth, v209);
      uint64_t v211 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      v212 = (void *)(v208 + v211);
      v213 = &__dsth[v211];
      uint64_t v214 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v213, 1, v214))
      {
        uint64_t v215 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v212, v213, *(void *)(*(void *)(v215 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v214 - 8) + 16))(v212, v213, v214);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v212, 0, 1, v214);
      }
      uint64_t v241 = v410[7];
      v242 = (void *)(v16 + v241);
      v243 = (void *)(v17 + v241);
      uint64_t v244 = v243[1];
      void *v242 = *v243;
      v242[1] = v244;
      swift_bridgeObjectRetain();
      goto LABEL_82;
    case 0x12u:
      *(void *)uint64_t v16 = *(void *)v17;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v98 = *(int *)(StepResults + 20);
      v405 = (void *)(v16 + v98);
      __dstf = (void *)(v17 + v98);
      uint64_t v99 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      uint64_t v100 = sub_253B059D0();
      v383 = *(void (**)(void *, void *, uint64_t))(*(void *)(v100 - 8) + 16);
      swift_bridgeObjectRetain();
      v383(v405, __dstf, v100);
      v99(v16 + *(int *)(StepResults + 24), v17 + *(int *)(StepResults + 24), v7);
      goto LABEL_165;
    case 0x13u:
      uint64_t v101 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(v16, v17, v101);
      goto LABEL_165;
    case 0x14u:
      uint64_t v102 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(v16, v17, v102);
      unint64_t v103 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v16 + v103[5]) = *(void *)(v17 + v103[5]);
      *(void *)(v16 + v103[6]) = *(void *)(v17 + v103[6]);
      *(void *)(v16 + v103[7]) = *(void *)(v17 + v103[7]);
      *(unsigned char *)(v16 + v103[8]) = *(unsigned char *)(v17 + v103[8]);
      *(unsigned char *)(v16 + v103[9]) = *(unsigned char *)(v17 + v103[9]);
      *(unsigned char *)(v16 + v103[10]) = *(unsigned char *)(v17 + v103[10]);
      uint64_t v104 = v103[11];
      id v105 = (void *)(v16 + v104);
      uint64_t v106 = (void *)(v17 + v104);
      uint64_t v107 = v106[1];
      void *v105 = *v106;
      v105[1] = v107;
      uint64_t v108 = v106[3];
      v105[2] = v106[2];
      v105[3] = v108;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x16u:
    case 0x24u:
      uint64_t v109 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v109;
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Bu:
      uint64_t v111 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Cu:
      uint64_t v112 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v112;
      uint64_t v113 = *(void *)(v17 + 24);
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      *(void *)(v16 + 24) = v113;
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v17 + 32);
      uint64_t v114 = *(void *)(v17 + 40);
      uint64_t v115 = *(void *)(v17 + 48);
      *(void *)(v16 + 40) = v114;
      *(void *)(v16 + 48) = v115;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Eu:
      uint64_t v116 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(v16, v17, v116);
      goto LABEL_165;
    case 0x1Fu:
      v398 = v9;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v7))
      {
        uint64_t v117 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v16, (uint64_t *)v17, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v7);
      }
      uint64_t v216 = type metadata accessor for StatementResult(0);
      uint64_t v217 = *(int *)(v216 + 20);
      uint64_t v218 = v16 + v217;
      uint64_t v219 = v17 + v217;
      uint64_t v220 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v220 - 8) + 16))(v218, v219, v220);
      uint64_t v221 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v222 = (void *)(v218 + v221);
      v223 = (const void *)(v219 + v221);
      uint64_t v224 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v223, 1, v224))
      {
        uint64_t v225 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v222, v223, *(void *)(*(void *)(v225 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v224 - 8) + 16))(v222, v223, v224);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v222, 0, 1, v224);
      }
      uint64_t v245 = *(int *)(v216 + 24);
      v411 = (void *)(v16 + v245);
      uint64_t v246 = v17 + v245;
      uint64_t v247 = sub_253B059D0();
      v248 = (int *)v216;
      v249 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v247 - 8) + 16);
      v249(v411, v246, v247);
      v249((void *)(v16 + v248[7]), v17 + v248[7], v247);
      v249((void *)(v16 + v248[8]), v17 + v248[8], v247);
      uint64_t v250 = v248[9];
      v251 = (void *)(v16 + v250);
      v252 = (void *)(v17 + v250);
      uint64_t v253 = v252[1];
      if (v253)
      {
        void *v251 = *v252;
        v251[1] = v253;
        uint64_t v254 = v252[3];
        v251[2] = v252[2];
        v251[3] = v254;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v255 = *((_OWORD *)v252 + 1);
        *(_OWORD *)v251 = *(_OWORD *)v252;
        *((_OWORD *)v251 + 1) = v255;
      }
      uint64_t v9 = v398;
      goto LABEL_165;
    case 0x20u:
      v399 = v9;
      uint64_t v118 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v118;
      uint64_t v119 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v120 = *(int *)(v119 + 20);
      uint64_t v121 = (void *)(v16 + v120);
      uint64_t v122 = (const void *)(v17 + v120);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v122, 1, v7))
      {
        uint64_t v123 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        v416(v121, v122, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v121, 0, 1, v7);
      }
      uint64_t v226 = *(int *)(v119 + 24);
      v227 = (void *)(v16 + v226);
      v228 = (void *)(v17 + v226);
      uint64_t v229 = v228[1];
      uint64_t v9 = v399;
      if (v229) {
        goto LABEL_163;
      }
      *(_OWORD *)v227 = *(_OWORD *)v228;
      v227[2] = v228[2];
      goto LABEL_165;
    case 0x21u:
      v400 = v9;
      *(void *)uint64_t v16 = *(void *)v17;
      uint64_t v124 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v125 = *(int *)(v124 + 20);
      uint64_t v126 = (void *)(v16 + v125);
      uint64_t v127 = (const void *)(v17 + v125);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v127, 1, v7))
      {
        uint64_t v128 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
      }
      else
      {
        v416(v126, v127, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v126, 0, 1, v7);
      }
      uint64_t v277 = *(int *)(v124 + 24);
      v227 = (void *)(v16 + v277);
      v228 = (void *)(v17 + v277);
      uint64_t v229 = v228[1];
      uint64_t v9 = v400;
      if (v229) {
        goto LABEL_163;
      }
      *(_OWORD *)v227 = *(_OWORD *)v228;
      v227[2] = v228[2];
      goto LABEL_165;
    case 0x22u:
      v406 = (void *)type metadata accessor for RequestContent(0);
      int v129 = swift_getEnumCaseMultiPayload();
      v401 = v9;
      if (v129 != 3)
      {
        if (v129 == 2)
        {
          *(void *)uint64_t v16 = *(void *)v17;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v129 != 1)
          {
            memcpy((void *)v16, (const void *)v17, *(void *)(*(v406 - 1) + 64));
            goto LABEL_148;
          }
          uint64_t v130 = *(void *)(v17 + 8);
          *(void *)uint64_t v16 = *(void *)v17;
          *(void *)(v16 + 8) = v130;
          uint64_t v131 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dstg = (void *)(v16 + v131);
          uint64_t v132 = v17 + v131;
          uint64_t v133 = sub_253B059D0();
          os_log_type_t v134 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v133 - 8) + 16);
          swift_bridgeObjectRetain();
          v134(__dstg, v132, v133);
          uint64_t v7 = v417;
        }
LABEL_147:
        swift_storeEnumTagMultiPayload();
LABEL_148:
        uint64_t v329 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v330 = *(int *)(v329 + 20);
        v331 = (void *)(v16 + v330);
        v332 = (const void *)(v17 + v330);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v330, 1, v7))
        {
          uint64_t v333 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v331, v332, *(void *)(*(void *)(v333 - 8) + 64));
        }
        else
        {
          v416(v331, v332, v7);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v331, 0, 1, v7);
        }
        uint64_t v334 = *(int *)(v329 + 24);
        v227 = (void *)(v16 + v334);
        v228 = (void *)(v17 + v334);
        uint64_t v229 = v228[1];
        uint64_t v9 = v401;
        if (!v229)
        {
          *(_OWORD *)v227 = *(_OWORD *)v228;
          v227[2] = v228[2];
          goto LABEL_165;
        }
        goto LABEL_163;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v7))
      {
        uint64_t v282 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v282 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v16, (uint64_t *)v17, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v7);
      }
      v302 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v8((uint64_t *)(v16 + v302[5]), (uint64_t *)(v17 + v302[5]), v7);
      uint64_t v303 = v302[6];
      v304 = (void *)(v16 + v303);
      v305 = (const void *)(v17 + v303);
      uint64_t v306 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v307 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v307 - 8) + 16))(v304, v305, v307);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v304, v305, *(void *)(*(void *)(v306 - 8) + 64));
      }
      uint64_t v308 = v302[7];
      uint64_t v309 = v16 + v308;
      uint64_t v310 = v17 + v308;
      uint64_t v311 = sub_253B059D0();
      v312 = (void (**)(uint64_t, uint64_t))(*(void *)(v311 - 8) + 16);
      v384 = *v312;
      __dstb = (void *)v311;
      (*v312)(v309, v310);
      uint64_t v313 = v302[8];
      v314 = (void *)(v16 + v313);
      v315 = (void *)(v17 + v313);
      uint64_t v316 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v317 = swift_getEnumCaseMultiPayload();
      if (v317 == 1)
      {
        void *v314 = *v315;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v317)
        {
          memcpy(v314, v315, *(void *)(*(void *)(v316 - 8) + 64));
          goto LABEL_146;
        }
        uint64_t v318 = v315[1];
        void *v314 = *v315;
        v314[1] = v318;
        uint64_t v319 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v381 = (char *)v314 + v319;
        v320 = (char *)v315 + v319;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v384)(v381, v320, __dstb);
      }
      swift_storeEnumTagMultiPayload();
LABEL_146:
      uint64_t v7 = v417;
      goto LABEL_147;
    case 0x23u:
      uint64_t v135 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 16))(v16, v17, v135);
      uint64_t v136 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v137 = *(int *)(v136 + 20);
      uint64_t v138 = v16 + v137;
      uint64_t v139 = v17 + v137;
      uint64_t v140 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16))(v138, v139, v140);
      *(void *)(v16 + *(int *)(v136 + 24)) = *(void *)(v17 + *(int *)(v136 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x25u:
      uint64_t v141 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 16))(v16, v17, v141);
      uint64_t v142 = type metadata accessor for ToolResolution(0);
      uint64_t v143 = *(int *)(v142 + 20);
      v407 = (void *)(v16 + v143);
      uint64_t v144 = v17 + v143;
      uint64_t v145 = v9;
      uint64_t v146 = sub_253B059D0();
      uint64_t v147 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v146 - 8) + 16);
      v147(v407, v144, v146);
      uint64_t v148 = v146;
      uint64_t v9 = v145;
      v147((void *)(v16 + *(int *)(v142 + 24)), v17 + *(int *)(v142 + 24), v148);
      goto LABEL_165;
    case 0x26u:
      v402 = v9;
      uint64_t v149 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v149;
      uint64_t v150 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v151 = v150[5];
      uint64_t v152 = (void *)(v16 + v151);
      uint64_t v153 = (const void *)(v17 + v151);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v153, 1, v7))
      {
        uint64_t v154 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
      }
      else
      {
        v416(v152, v153, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v152, 0, 1, v7);
      }
      *(unsigned char *)(v16 + v150[6]) = *(unsigned char *)(v17 + v150[6]);
      uint64_t v230 = v150[7];
      uint64_t v231 = v16 + v230;
      uint64_t v232 = v17 + v230;
      uint64_t v233 = sub_253B059D0();
      v234 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v233 - 8) + 16);
      uint64_t v235 = v231;
      v236 = *v234;
      (*v234)(v235, v232, v233);
      uint64_t v237 = v150[8];
      v238 = (void *)(v16 + v237);
      v239 = (const void *)(v17 + v237);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v239, 1, v233))
      {
        uint64_t v240 = sub_253462A5C(&qword_269CDB460);
        memcpy(v238, v239, *(void *)(*(void *)(v240 - 8) + 64));
      }
      else
      {
        v236((uint64_t)v238, (uint64_t)v239, v233);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v238, 0, 1, v233);
      }
      uint64_t v9 = v402;
      goto LABEL_165;
    case 0x27u:
      v397 = v9;
      v8((uint64_t *)v16, (uint64_t *)v17, v7);
      uint64_t v155 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v16 + v155[5]) = *(unsigned char *)(v17 + v155[5]);
      uint64_t v156 = v155[6];
      uint64_t v157 = v16 + v156;
      uint64_t v158 = v17 + v156;
      uint64_t v159 = sub_253B059D0();
      uint64_t v160 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
      uint64_t v161 = v158;
      unint64_t v162 = *v160;
      (*v160)(v157, v161, v159);
      uint64_t v163 = v155[7];
      uint64_t v164 = (void *)(v16 + v163);
      uint64_t v165 = (const void *)(v17 + v163);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v165, 1, v159))
      {
        uint64_t v166 = sub_253462A5C(&qword_269CDB460);
        memcpy(v164, v165, *(void *)(*(void *)(v166 - 8) + 64));
      }
      else
      {
        v162((uint64_t)v164, (uint64_t)v165, v159);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v164, 0, 1, v159);
      }
      goto LABEL_82;
    case 0x28u:
      uint64_t v167 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 16))(v16, v17, v167);
      uint64_t v168 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v169 = *(int *)(v168 + 20);
      uint64_t v170 = v16 + v169;
      uint64_t v171 = v17 + v169;
      uint64_t v172 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 16))(v170, v171, v172);
      uint64_t v173 = *(int *)(v168 + 24);
      uint64_t v174 = v16 + v173;
      uint64_t v175 = v17 + v173;
      uint64_t v176 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 16))(v174, v175, v176);
      goto LABEL_165;
    case 0x29u:
      uint64_t v177 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 16))(v16, v17, v177);
      uint64_t v178 = type metadata accessor for TypeConversionResult(0);
      uint64_t v179 = *(int *)(v178 + 20);
      v408 = (void *)(v16 + v179);
      uint64_t v180 = v17 + v179;
      v181 = v9;
      uint64_t v182 = sub_253B059D0();
      uint64_t v183 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v182 - 8) + 16);
      v183(v408, v180, v182);
      uint64_t v184 = v182;
      uint64_t v9 = v181;
      v183((void *)(v16 + *(int *)(v178 + 24)), v17 + *(int *)(v178 + 24), v184);
      goto LABEL_165;
    case 0x2Au:
      v397 = v9;
      uint64_t v185 = *(void *)(v17 + 8);
      *(void *)uint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v185;
      *(void *)(v16 + 16) = *(void *)(v17 + 16);
      DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v186 = DecorationResult[7];
      __dst = (void *)(v16 + v186);
      uint64_t v187 = (const void *)(v17 + v186);
      uint64_t v188 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v187, 1, v188))
      {
        uint64_t v189 = sub_253462A5C(&qword_269CDBB30);
        memcpy(__dst, v187, *(void *)(*(void *)(v189 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v188 - 8) + 16))(__dst, v187, v188);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dst, 0, 1, v188);
      }
      *(void *)(v16 + DecorationResult[8]) = *(void *)(v17 + DecorationResult[8]);
      *(void *)(v16 + DecorationResult[9]) = *(void *)(v17 + DecorationResult[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_82:
      swift_storeEnumTagMultiPayload();
      uint64_t v9 = v397;
      goto LABEL_166;
    case 0x2Cu:
      uint64_t v190 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v190 - 8) + 16))(v16, v17, v190);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v192 = *(int *)(DecorationPrePlannerResult + 20);
      v193 = (void *)(v16 + v192);
      v194 = (uint64_t *)(v17 + v192);
      uint64_t v196 = *v194;
      uint64_t v195 = v194[1];
      void *v193 = v196;
      v193[1] = v195;
      uint64_t v197 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v198 = v16 + v197;
      v199 = (uint64_t *)(v17 + v197);
      uint64_t v200 = *v199;
      LOBYTE(v199) = *((unsigned char *)v199 + 8);
      *(void *)uint64_t v198 = v200;
      *(unsigned char *)(v198 + 8) = (_BYTE)v199;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    default:
      memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v18 - 8) + 64));
      goto LABEL_166;
  }
}

uint64_t sub_25348A9C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwxx(uint64_t a1)
{
  uint64_t v2 = sub_253B055C0();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(a1, v2);
  uint64_t v4 = (int *)type metadata accessor for Session.Event(0);
  v3(a1 + v4[5], v2);
  uint64_t v5 = a1 + v4[6];
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v5, 1, v2)) {
    v3(v5, v2);
  }
  uint64_t v6 = a1 + v4[7];
  type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v7 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      v6 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v8 = sub_253B05CB0();
LABEL_21:
      uint64_t v15 = v8;
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v8))
      {
        uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
        uint64_t v16 = v6;
        goto LABEL_23;
      }
      goto LABEL_110;
    case 1u:
      swift_bridgeObjectRelease();
      uint64_t v9 = v6 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      uint64_t v10 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
      goto LABEL_109;
    case 2u:
    case 0x16u:
    case 0x1Bu:
    case 0x24u:
      goto LABEL_108;
    case 3u:
      type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload != 2)
        {
          if (EnumCaseMultiPayload == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v12 = v6 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v13 = sub_253B059D0();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
          }
          goto LABEL_96;
        }
LABEL_95:
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v2)) {
        v3(v6, v2);
      }
      uint64_t v77 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v3(v6 + v77[5], v2);
      uint64_t v78 = v6 + v77[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v79 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v78, v79);
      }
      uint64_t v80 = v6 + v77[7];
      uint64_t v81 = sub_253B059D0();
      char v82 = *(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8);
      v82(v80, v81);
      uint64_t v83 = v6 + v77[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v84 = swift_getEnumCaseMultiPayload();
      if (v84 == 1) {
        goto LABEL_95;
      }
      if (!v84)
      {
        swift_bridgeObjectRelease();
        uint64_t v85 = type metadata accessor for RequestContent.TextContent(0);
        v82(v83 + *(int *)(v85 + 20), v81);
      }
LABEL_96:
      uint64_t v94 = (int *)type metadata accessor for Request(0);
      uint64_t v95 = v6 + v94[6];
      uint64_t v96 = type metadata accessor for RequestPrescribedPlan(0);
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v95, 1, v96))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            swift_bridgeObjectRelease();
            break;
          case 6u:
            uint64_t v104 = sub_253B059D0();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v95, v104);
            break;
          default:
            break;
        }
      }
      uint64_t v97 = v6 + v94[7];
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v97, 1, v2)) {
        v3(v97, v2);
      }
      if (!*(void *)(v6 + v94[8] + 8)) {
        goto LABEL_110;
      }
LABEL_108:
      swift_bridgeObjectRelease();
LABEL_109:
      swift_bridgeObjectRelease();
LABEL_110:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v100 = a1 + v4[12];
      uint64_t v101 = sub_253B05550();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v101 - 8) + 8))(v100, v101);
      uint64_t v102 = type metadata accessor for Timepoint();
      v3(v100 + *(int *)(v102 + 28), v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 4u:
    case 0x1Cu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_108;
    case 5u:
      uint64_t v14 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v6, v14);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_108;
    case 6u:
      uint64_t v15 = sub_253B059D0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v15)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v6, v15);
      }
      uint64_t v16 = v6 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
LABEL_23:
      uint64_t v21 = v15;
      goto LABEL_94;
    case 7u:
      uint64_t v18 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v6, v18);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 8u:
      uint64_t v19 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v6, v19);
      type metadata accessor for QueryStep(0);
      goto LABEL_109;
    case 9u:
      uint64_t v20 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v6, v20);
      type metadata accessor for VariableStep(0);
      goto LABEL_109;
    case 0xAu:
    case 0xBu:
    case 0x15u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x1Du:
      goto LABEL_109;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_92;
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          if (swift_getEnumCaseMultiPayload() > 2) {
            goto LABEL_110;
          }
LABEL_92:
          uint64_t v22 = sub_253B05940();
          break;
        case 2u:
        case 3u:
          uint64_t v8 = sub_253B05940();
          goto LABEL_21;
        default:
          goto LABEL_110;
      }
      goto LABEL_93;
    case 0xEu:
      sub_253487D84(*(void *)v6, *(void *)(v6 + 8));
      sub_253487D84(*(void *)(v6 + 16), *(void *)(v6 + 24));
      goto LABEL_109;
    case 0xFu:
      uint64_t v22 = sub_253B059F0();
      goto LABEL_93;
    case 0x10u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v2)) {
        v3(v6, v2);
      }
      uint64_t v23 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v3(v6 + v23[5], v2);
      uint64_t v24 = v6 + v23[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v25 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
      }
      uint64_t v26 = v6 + v23[7];
      uint64_t v27 = sub_253B059D0();
      id v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
      v105(v26, v27);
      uint64_t v28 = v6 + v23[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v29 = swift_getEnumCaseMultiPayload();
      if (v29 == 1) {
        goto LABEL_109;
      }
      if (v29) {
        goto LABEL_110;
      }
      swift_bridgeObjectRelease();
      uint64_t v30 = v28 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_63:
      v105(v30, v27);
      goto LABEL_110;
    case 0x11u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v2)) {
        v3(v6, v2);
      }
      uint64_t v31 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      uint64_t v32 = v6 + *(int *)(v31 + 24);
      uint64_t v33 = sub_253B05AB0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v32, v33);
      uint64_t v34 = v32 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v35 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v34, 1, v35)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v34, v35);
      }
      goto LABEL_109;
    case 0x12u:
      swift_bridgeObjectRelease();
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v37 = v6 + *(int *)(StepResults + 20);
      uint64_t v38 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
      v3(v6 + *(int *)(StepResults + 24), v2);
      goto LABEL_110;
    case 0x13u:
      uint64_t v22 = sub_253B05CF0();
      goto LABEL_93;
    case 0x14u:
      uint64_t v39 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v6, v39);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_108;
    case 0x1Eu:
      uint64_t v22 = sub_253B06720();
      goto LABEL_93;
    case 0x1Fu:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v2)) {
        v3(v6, v2);
      }
      uint64_t v40 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v41 = v6 + v40[5];
      uint64_t v42 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
      uint64_t v43 = v41 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v44 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v43, 1, v44)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
      }
      uint64_t v106 = v6 + v40[6];
      uint64_t v45 = sub_253B059D0();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8);
      v46(v106, v45);
      v46(v6 + v40[7], v45);
      v46(v6 + v40[8], v45);
      if (*(void *)(v6 + v40[9] + 8)) {
        goto LABEL_108;
      }
      goto LABEL_110;
    case 0x20u:
      swift_bridgeObjectRelease();
      uint64_t v47 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_105;
    case 0x21u:
      swift_bridgeObjectRelease();
      uint64_t v47 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_105;
    case 0x22u:
      type metadata accessor for RequestContent(0);
      int v48 = swift_getEnumCaseMultiPayload();
      if (v48 == 3)
      {
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v2)) {
          v3(v6, v2);
        }
        uint64_t v86 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v3(v6 + v86[5], v2);
        uint64_t v87 = v6 + v86[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v88 = sub_253B09120();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(v87, v88);
        }
        uint64_t v89 = v6 + v86[7];
        uint64_t v90 = sub_253B059D0();
        uint64_t v108 = *(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8);
        v108(v89, v90);
        uint64_t v91 = v6 + v86[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v92 = swift_getEnumCaseMultiPayload();
        if (v92 != 1)
        {
          if (!v92)
          {
            swift_bridgeObjectRelease();
            uint64_t v93 = type metadata accessor for RequestContent.TextContent(0);
            v108(v91 + *(int *)(v93 + 20), v90);
          }
          goto LABEL_104;
        }
      }
      else if (v48 != 2)
      {
        if (v48 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v49 = v6 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v50 = sub_253B059D0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v49, v50);
        }
LABEL_104:
        uint64_t v47 = type metadata accessor for ExternalAgentRequest(0);
LABEL_105:
        uint64_t v98 = v47;
        uint64_t v99 = v6 + *(int *)(v47 + 20);
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v99, 1, v2)) {
          v3(v99, v2);
        }
        if (!*(void *)(v6 + *(int *)(v98 + 24) + 8)) {
          goto LABEL_110;
        }
        goto LABEL_108;
      }
      swift_bridgeObjectRelease();
      goto LABEL_104;
    case 0x23u:
      uint64_t v51 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v6, v51);
      uint64_t v52 = v6 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      uint64_t v53 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
      goto LABEL_109;
    case 0x25u:
      uint64_t v54 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v6, v54);
      uint64_t v55 = type metadata accessor for ToolResolution(0);
      goto LABEL_68;
    case 0x26u:
      swift_bridgeObjectRelease();
      uint64_t v56 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v57 = v6 + v56[5];
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v57, 1, v2)) {
        v3(v57, v2);
      }
      uint64_t v58 = v6 + v56[7];
      uint64_t v27 = sub_253B059D0();
      uint64_t v59 = (void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
      id v105 = *v59;
      (*v59)(v58, v27);
      uint64_t v60 = v6 + v56[8];
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v60, 1, v27)) {
        goto LABEL_110;
      }
      uint64_t v30 = v60;
      goto LABEL_63;
    case 0x27u:
      v3(v6, v2);
      uint64_t v61 = type metadata accessor for ClientUndoRedoRequest(0);
      uint64_t v62 = v6 + *(int *)(v61 + 24);
      uint64_t v63 = sub_253B059D0();
      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8);
      v64(v62, v63);
      uint64_t v65 = v6 + *(int *)(v61 + 28);
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v65, 1, v63)) {
        v64(v65, v63);
      }
      goto LABEL_110;
    case 0x28u:
      uint64_t v66 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 8))(v6, v66);
      uint64_t v67 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v68 = v6 + *(int *)(v67 + 20);
      uint64_t v69 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8))(v68, v69);
      v6 += *(int *)(v67 + 24);
      uint64_t v22 = sub_253B059D0();
LABEL_93:
      uint64_t v21 = v22;
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
      uint64_t v16 = v6;
LABEL_94:
      v17(v16, v21);
      goto LABEL_110;
    case 0x29u:
      uint64_t v70 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8))(v6, v70);
      uint64_t v55 = type metadata accessor for TypeConversionResult(0);
LABEL_68:
      uint64_t v71 = v55;
      uint64_t v107 = v6 + *(int *)(v55 + 20);
      uint64_t v72 = sub_253B059D0();
      uint64_t v73 = *(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8);
      v73(v107, v72);
      v73(v6 + *(int *)(v71 + 24), v72);
      goto LABEL_110;
    case 0x2Au:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v74 = v6 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      uint64_t v75 = sub_253B08270();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v74, 1, v75)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(v74, v75);
      }
      goto LABEL_108;
    case 0x2Cu:
      uint64_t v76 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(v6, v76);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_109;
    default:
      goto LABEL_110;
  }
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for Session.Event(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2 + v9, 1, v6))
  {
    uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = v8[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Session.Event.Payload(0);
  v410 = (void (*)(void *, const void *, uint64_t))v7;
  uint64_t v411 = v6;
  uint64_t v409 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v17 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v14, v15, v17);
      uint64_t v18 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v19 = (void *)(v14 + v18);
      uint64_t v20 = (const void *)(v15 + v18);
      uint64_t v21 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21))
      {
        uint64_t v22 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
      }
      goto LABEL_165;
    case 1u:
      uint64_t v23 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v23;
      *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
      uint64_t v24 = type metadata accessor for TextQuery(0);
      uint64_t v25 = *(int *)(v24 + 24);
      v399 = (void *)(v14 + v25);
      __dstd = (void *)(v15 + v25);
      uint64_t v26 = sub_253B059D0();
      uint64_t v27 = *(void (**)(void *, void *, uint64_t))(*(void *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      v27(v399, __dstd, v26);
      uint64_t v28 = *(int *)(v24 + 28);
      int v29 = (void *)(v14 + v28);
      uint64_t v30 = (void *)(v15 + v28);
      uint64_t v31 = v30[1];
      *int v29 = *v30;
      v29[1] = v31;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 2u:
      *(void *)uint64_t v14 = *(void *)v15;
      *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
      uint64_t v32 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 3u:
      uint64_t v33 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v391 = v8;
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)uint64_t v14 = *(void *)v15;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v33 - 8) + 64));
            goto LABEL_139;
          }
          uint64_t v35 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v35;
          uint64_t v36 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v380 = v15 + v36;
          __dste = (void *)(v14 + v36);
          uint64_t v37 = sub_253B059D0();
          uint64_t v38 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
          swift_bridgeObjectRetain();
          v38(__dste, v380, v37);
          uint64_t v6 = v411;
        }
LABEL_138:
        swift_storeEnumTagMultiPayload();
LABEL_139:
        uint64_t v316 = type metadata accessor for Request(0);
        *(unsigned char *)(v14 + *(int *)(v316 + 20)) = *(unsigned char *)(v15 + *(int *)(v316 + 20));
        v407 = (int *)v316;
        uint64_t v317 = *(int *)(v316 + 24);
        uint64_t v318 = (void *)(v14 + v317);
        uint64_t v319 = (void *)(v15 + v317);
        uint64_t v320 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v319, 1, v320))
        {
          uint64_t v321 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v318, v319, *(void *)(*(void *)(v321 - 8) + 64));
          uint64_t v322 = v407;
        }
        else
        {
          __dstc = (void *)v320;
          uint64_t v323 = (uint64_t)v318;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v324 = v319[1];
              *uint64_t v318 = *v319;
              v318[1] = v324;
              *((_WORD *)v318 + 8) = *((_WORD *)v319 + 8);
              swift_bridgeObjectRetain();
              uint64_t v325 = (uint64_t)__dstc;
              goto LABEL_158;
            case 1u:
              uint64_t v333 = v319[1];
              *uint64_t v318 = *v319;
              v318[1] = v333;
              swift_bridgeObjectRetain();
              uint64_t v325 = (uint64_t)__dstc;
              goto LABEL_158;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v334 = v319[1];
              *uint64_t v318 = *v319;
              v318[1] = v334;
              *((unsigned char *)v318 + 16) = *((unsigned char *)v319 + 16);
              swift_bridgeObjectRetain();
              uint64_t v325 = (uint64_t)__dstc;
              goto LABEL_158;
            case 6u:
              uint64_t v335 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v335 - 8) + 16))(v318, v319, v335);
              uint64_t v336 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v337 = (char *)v318 + v336;
              uint64_t v338 = (char *)v319 + v336;
              *(void *)uint64_t v337 = *(void *)v338;
              v337[8] = v338[8];
              uint64_t v325 = (uint64_t)__dstc;
LABEL_158:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              uint64_t v323 = (uint64_t)v318;
              v332 = v319;
              uint64_t v325 = (uint64_t)__dstc;
              memcpy(v318, v332, *(void *)(*(__dstc - 1) + 64));
              break;
          }
          uint64_t v322 = v407;
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v323, 0, 1, v325);
        }
        uint64_t v339 = v322[7];
        v340 = (void *)(v14 + v339);
        uint64_t v341 = (const void *)(v15 + v339);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15 + v339, 1, v6))
        {
          uint64_t v342 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v340, v341, *(void *)(*(void *)(v342 - 8) + 64));
        }
        else
        {
          v410(v340, v341, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v340, 0, 1, v6);
        }
        uint64_t v343 = v322[8];
        uint64_t v222 = v14 + v343;
        uint64_t v223 = v15 + v343;
        uint64_t v224 = *(void *)(v223 + 8);
        uint64_t v8 = v391;
        if (!v224)
        {
          *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
          *(void *)(v222 + 16) = *(void *)(v223 + 16);
          goto LABEL_165;
        }
LABEL_152:
        *(void *)uint64_t v222 = *(void *)v223;
        *(void *)(v222 + 8) = v224;
        *(void *)(v222 + 16) = *(void *)(v223 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_165;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v6))
      {
        uint64_t v273 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v273 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v6);
      }
      uint64_t v278 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v7(v14 + v278[5], v15 + v278[5], v6);
      uint64_t v279 = v278[6];
      uint64_t v280 = (void *)(v14 + v279);
      uint64_t v281 = (const void *)(v15 + v279);
      uint64_t v282 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v283 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v283 - 8) + 16))(v280, v281, v283);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v280, v281, *(void *)(*(void *)(v282 - 8) + 64));
      }
      uint64_t v284 = v278[7];
      uint64_t v285 = v14 + v284;
      uint64_t v286 = v15 + v284;
      uint64_t v287 = sub_253B059D0();
      uint64_t v288 = *(void (**)(uint64_t, uint64_t))(*(void *)(v287 - 8) + 16);
      __dsta = (void *)v287;
      v288(v285, v286);
      uint64_t v289 = v278[8];
      uint64_t v290 = (void *)(v14 + v289);
      uint64_t v291 = (void *)(v15 + v289);
      uint64_t v292 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v293 = swift_getEnumCaseMultiPayload();
      if (v293 == 1)
      {
        *uint64_t v290 = *v291;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v293)
        {
          memcpy(v290, v291, *(void *)(*(void *)(v292 - 8) + 64));
          goto LABEL_137;
        }
        uint64_t v294 = v291[1];
        *uint64_t v290 = *v291;
        v290[1] = v294;
        uint64_t v295 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v378 = (char *)v290 + v295;
        v296 = (char *)v291 + v295;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v288)(v378, v296, __dsta);
      }
      swift_storeEnumTagMultiPayload();
LABEL_137:
      uint64_t v6 = v411;
      goto LABEL_138;
    case 4u:
      uint64_t v39 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v39;
      uint64_t v40 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v40;
      uint64_t v41 = *(void *)(v15 + 40);
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
      *(void *)(v14 + 40) = v41;
      *(void *)(v14 + 48) = *(void *)(v15 + 48);
      *(unsigned char *)(v14 + 56) = *(unsigned char *)(v15 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 5u:
      uint64_t v42 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v14, v15, v42);
      uint64_t v43 = (int *)type metadata accessor for Action(0);
      uint64_t v44 = v43[5];
      uint64_t v45 = (void *)(v14 + v44);
      uint64_t v46 = (uint64_t *)(v15 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *uint64_t v45 = v48;
      v45[1] = v47;
      *(unsigned char *)(v14 + v43[6]) = *(unsigned char *)(v15 + v43[6]);
      *(void *)(v14 + v43[7]) = *(void *)(v15 + v43[7]);
      uint64_t v49 = v43[8];
      uint64_t v50 = (void *)(v14 + v49);
      uint64_t v51 = (void *)(v15 + v49);
      uint64_t v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      uint64_t v53 = v43[9];
      uint64_t v54 = (void *)(v14 + v53);
      uint64_t v55 = (void *)(v15 + v53);
      uint64_t v56 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v55[3];
      v54[2] = v55[2];
      v54[3] = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 6u:
      uint64_t v58 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v58))
      {
        uint64_t v59 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v14, v15, v58);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v58);
      }
      uint64_t v196 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v14 + *(int *)(v196 + 20), v15 + *(int *)(v196 + 20), v58);
      goto LABEL_165;
    case 7u:
      uint64_t v60 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v14, v15, v60);
      uint64_t v61 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v62 = v61[5];
      uint64_t v63 = (void *)(v14 + v62);
      uint64_t v64 = (uint64_t *)(v15 + v62);
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      *uint64_t v63 = v66;
      v63[1] = v65;
      *(void *)(v14 + v61[6]) = *(void *)(v15 + v61[6]);
      uint64_t v67 = v61[7];
      uint64_t v68 = (void *)(v14 + v67);
      uint64_t v69 = (void *)(v15 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v61[8];
      uint64_t v72 = (void *)(v14 + v71);
      uint64_t v73 = (void *)(v15 + v71);
      uint64_t v74 = v73[1];
      *uint64_t v72 = *v73;
      v72[1] = v74;
      *(void *)(v14 + v61[9]) = *(void *)(v15 + v61[9]);
      *(void *)(v14 + v61[10]) = *(void *)(v15 + v61[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 8u:
      uint64_t v75 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16))(v14, v15, v75);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v14 + *(int *)(Step + 20)) = *(void *)(v15 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 9u:
      uint64_t v77 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v14, v15, v77);
      uint64_t v78 = type metadata accessor for VariableStep(0);
      *(void *)(v14 + *(int *)(v78 + 20)) = *(void *)(v15 + *(int *)(v78 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v14 = *(void *)v15;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v105 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v105;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xCu:
      uint64_t v79 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v79;
      uint64_t v80 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v80;
      uint64_t v81 = *(void *)(v15 + 40);
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
      *(void *)(v14 + 40) = v81;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v274 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v274 - 8) + 16))(v14, v15, v274);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v275 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v275)) {
            goto LABEL_118;
          }
          uint64_t v276 = type metadata accessor for PlannerError();
          goto LABEL_113;
        case 3u:
          uint64_t v275 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v275))
          {
            uint64_t v276 = type metadata accessor for ExecutorError();
LABEL_113:
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v276 - 8) + 64));
          }
          else
          {
LABEL_118:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 16))(v14, v15, v275);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v275);
          }
          break;
        default:
          uint64_t v82 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(v14, v15, v82);
          break;
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      goto LABEL_166;
    case 0xEu:
      uint64_t v83 = *(void *)v15;
      unint64_t v84 = *(void *)(v15 + 8);
      sub_25348A9C8(*(void *)v15, v84);
      *(void *)uint64_t v14 = v83;
      *(void *)(v14 + 8) = v84;
      uint64_t v85 = *(void *)(v15 + 16);
      unint64_t v86 = *(void *)(v15 + 24);
      sub_25348A9C8(v85, v86);
      *(void *)(v14 + 16) = v85;
      *(void *)(v14 + 24) = v86;
      uint64_t v87 = *(void *)(v15 + 40);
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
      *(void *)(v14 + 40) = v87;
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0xFu:
      uint64_t v88 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16))(v14, v15, v88);
      goto LABEL_165;
    case 0x10u:
      v392 = v8;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v6))
      {
        uint64_t v89 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v6);
      }
      uint64_t v90 = v7;
      v252 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v90(v14 + v252[5], v15 + v252[5], v6);
      uint64_t v253 = v252[6];
      uint64_t v254 = (void *)(v14 + v253);
      long long v255 = (const void *)(v15 + v253);
      uint64_t v256 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v257 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v257 - 8) + 16))(v254, v255, v257);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v254, v255, *(void *)(*(void *)(v256 - 8) + 64));
      }
      uint64_t v258 = v252[7];
      uint64_t v259 = v14 + v258;
      uint64_t v260 = v15 + v258;
      uint64_t v261 = sub_253B059D0();
      uint64_t v262 = (void **)(*(void *)(v261 - 8) + 16);
      v406 = (void (*)(char *, char *, uint64_t))*v262;
      ((void (*)(uint64_t, uint64_t, uint64_t))*v262)(v259, v260, v261);
      uint64_t v263 = v252[8];
      uint64_t v264 = (void *)(v14 + v263);
      uint64_t v265 = (void *)(v15 + v263);
      uint64_t v266 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v267 = swift_getEnumCaseMultiPayload();
      if (v267 == 1)
      {
        *uint64_t v264 = *v265;
        swift_bridgeObjectRetain();
        goto LABEL_101;
      }
      if (!v267)
      {
        uint64_t v268 = v265[1];
        *uint64_t v264 = *v265;
        v264[1] = v268;
        uint64_t v269 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v270 = (char *)v264 + v269;
        uint64_t v271 = (char *)v265 + v269;
        swift_bridgeObjectRetain();
        v406(v270, v271, v261);
LABEL_101:
        swift_storeEnumTagMultiPayload();
        goto LABEL_103;
      }
      memcpy(v264, v265, *(void *)(*(void *)(v266 - 8) + 64));
LABEL_103:
      uint64_t v8 = v392;
LABEL_165:
      swift_storeEnumTagMultiPayload();
LABEL_166:
      uint64_t v344 = v8[8];
      uint64_t v345 = (void *)(a1 + v344);
      uint64_t v346 = (void *)(a2 + v344);
      uint64_t v347 = v346[1];
      *uint64_t v345 = *v346;
      v345[1] = v347;
      uint64_t v348 = v8[9];
      uint64_t v349 = (void *)(a1 + v348);
      uint64_t v350 = (void *)(a2 + v348);
      uint64_t v351 = v350[1];
      *uint64_t v349 = *v350;
      v349[1] = v351;
      uint64_t v352 = v8[10];
      uint64_t v353 = (void *)(a1 + v352);
      uint64_t v354 = (void *)(a2 + v352);
      uint64_t v355 = v354[1];
      *uint64_t v353 = *v354;
      v353[1] = v355;
      uint64_t v356 = v8[11];
      uint64_t v357 = (void *)(a1 + v356);
      uint64_t v358 = (void *)(a2 + v356);
      uint64_t v359 = v358[1];
      *uint64_t v357 = *v358;
      v357[1] = v359;
      uint64_t v360 = v8[12];
      uint64_t v361 = a1 + v360;
      uint64_t v362 = v8;
      uint64_t v363 = a2 + v360;
      uint64_t v364 = sub_253B05550();
      v408 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v364 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v408(v361, v363, v364);
      v365 = (int *)type metadata accessor for Timepoint();
      *(void *)(v361 + v365[5]) = *(void *)(v363 + v365[5]);
      *(void *)(v361 + v365[6]) = *(void *)(v363 + v365[6]);
      v410((void *)(v361 + v365[7]), (const void *)(v363 + v365[7]), v411);
      uint64_t v366 = v362[13];
      v367 = (void *)(a1 + v366);
      uint64_t v368 = (void *)(a2 + v366);
      uint64_t v369 = v368[1];
      void *v367 = *v368;
      v367[1] = v369;
      uint64_t v370 = v362[14];
      uint64_t v371 = a1 + v370;
      uint64_t v372 = a2 + v370;
      *(void *)uint64_t v371 = *(void *)v372;
      *(unsigned char *)(v371 + 8) = *(unsigned char *)(v372 + 8);
      *(void *)(a1 + v362[15]) = *(void *)(a2 + v362[15]);
      uint64_t v373 = *(int *)(v409 + 20);
      v374 = (void *)(a1 + v373);
      uint64_t v375 = (void *)(a2 + v373);
      uint64_t v376 = v375[1];
      void *v374 = *v375;
      v374[1] = v376;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 0x11u:
      v393 = v8;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v6))
      {
        uint64_t v91 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v6);
      }
      uint64_t v197 = type metadata accessor for ActionStepResult(0);
      uint64_t v198 = *(int *)(v197 + 20);
      v199 = (void *)(v14 + v198);
      uint64_t v200 = (void *)(v15 + v198);
      uint64_t v201 = v200[1];
      void *v199 = *v200;
      v199[1] = v201;
      v404 = (int *)v197;
      uint64_t v202 = *(int *)(v197 + 24);
      uint64_t v203 = v14 + v202;
      uint64_t v204 = v15 + v202;
      uint64_t v205 = sub_253B05AB0();
      uint64_t v206 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v205 - 8) + 16);
      swift_bridgeObjectRetain();
      v206(v203, v204, v205);
      uint64_t v207 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v208 = (void *)(v203 + v207);
      uint64_t v209 = (const void *)(v204 + v207);
      uint64_t v210 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v209, 1, v210))
      {
        uint64_t v211 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v208, v209, *(void *)(*(void *)(v211 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v210 - 8) + 16))(v208, v209, v210);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v208, 0, 1, v210);
      }
      uint64_t v236 = v404[7];
      uint64_t v237 = (void *)(v14 + v236);
      v238 = (void *)(v15 + v236);
      uint64_t v239 = v238[1];
      *uint64_t v237 = *v238;
      v237[1] = v239;
      swift_bridgeObjectRetain();
      goto LABEL_80;
    case 0x12u:
      *(void *)uint64_t v14 = *(void *)v15;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v93 = *(int *)(StepResults + 20);
      v400 = (void *)(v14 + v93);
      __dstf = (void *)(v15 + v93);
      uint64_t v94 = v7;
      uint64_t v95 = sub_253B059D0();
      v381 = *(void (**)(void *, void *, uint64_t))(*(void *)(v95 - 8) + 16);
      swift_bridgeObjectRetain();
      v381(v400, __dstf, v95);
      v94(v14 + *(int *)(StepResults + 24), v15 + *(int *)(StepResults + 24), v6);
      goto LABEL_165;
    case 0x13u:
      uint64_t v96 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v14, v15, v96);
      goto LABEL_165;
    case 0x14u:
      uint64_t v97 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v14, v15, v97);
      uint64_t v98 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v14 + v98[5]) = *(void *)(v15 + v98[5]);
      *(void *)(v14 + v98[6]) = *(void *)(v15 + v98[6]);
      *(void *)(v14 + v98[7]) = *(void *)(v15 + v98[7]);
      *(unsigned char *)(v14 + v98[8]) = *(unsigned char *)(v15 + v98[8]);
      *(unsigned char *)(v14 + v98[9]) = *(unsigned char *)(v15 + v98[9]);
      *(unsigned char *)(v14 + v98[10]) = *(unsigned char *)(v15 + v98[10]);
      uint64_t v99 = v98[11];
      uint64_t v100 = (void *)(v14 + v99);
      uint64_t v101 = (void *)(v15 + v99);
      uint64_t v102 = v101[1];
      void *v100 = *v101;
      v100[1] = v102;
      uint64_t v103 = v101[3];
      v100[2] = v101[2];
      v100[3] = v103;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x16u:
    case 0x24u:
      uint64_t v104 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v104;
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Bu:
      uint64_t v106 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v106;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Cu:
      uint64_t v107 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v107;
      uint64_t v108 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v108;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 32);
      uint64_t v109 = *(void *)(v15 + 40);
      uint64_t v110 = *(void *)(v15 + 48);
      *(void *)(v14 + 40) = v109;
      *(void *)(v14 + 48) = v110;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x1Eu:
      uint64_t v111 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 16))(v14, v15, v111);
      goto LABEL_165;
    case 0x1Fu:
      v394 = v8;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v6))
      {
        uint64_t v112 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v112 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v6);
      }
      uint64_t v212 = type metadata accessor for StatementResult(0);
      uint64_t v213 = *(int *)(v212 + 20);
      uint64_t v214 = v14 + v213;
      uint64_t v215 = v15 + v213;
      uint64_t v216 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 16))(v214, v215, v216);
      uint64_t v217 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v405 = (void *)(v214 + v217);
      uint64_t v218 = (const void *)(v215 + v217);
      uint64_t v219 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v218, 1, v219))
      {
        uint64_t v220 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v405, v218, *(void *)(*(void *)(v220 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v219 - 8) + 16))(v405, v218, v219);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v405, 0, 1, v219);
      }
      uint64_t v240 = *(int *)(v212 + 24);
      uint64_t v241 = v14 + v240;
      uint64_t v242 = v15 + v240;
      uint64_t v243 = sub_253B059D0();
      uint64_t v244 = (int *)v212;
      uint64_t v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v243 - 8) + 16);
      v245(v241, v242, v243);
      v245(v14 + v244[7], v15 + v244[7], v243);
      v245(v14 + v244[8], v15 + v244[8], v243);
      uint64_t v246 = v244[9];
      uint64_t v247 = (void *)(v14 + v246);
      v248 = (void *)(v15 + v246);
      uint64_t v249 = v248[1];
      if (v249)
      {
        *uint64_t v247 = *v248;
        v247[1] = v249;
        uint64_t v250 = v248[3];
        v247[2] = v248[2];
        v247[3] = v250;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v251 = *((_OWORD *)v248 + 1);
        *(_OWORD *)uint64_t v247 = *(_OWORD *)v248;
        *((_OWORD *)v247 + 1) = v251;
      }
      uint64_t v8 = v394;
      goto LABEL_165;
    case 0x20u:
      v395 = v8;
      uint64_t v113 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v113;
      uint64_t v114 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v115 = *(int *)(v114 + 20);
      uint64_t v116 = (void *)(v14 + v115);
      uint64_t v117 = (const void *)(v15 + v115);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v117, 1, v6))
      {
        uint64_t v118 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
      }
      else
      {
        v410(v116, v117, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v116, 0, 1, v6);
      }
      uint64_t v221 = *(int *)(v114 + 24);
      uint64_t v222 = v14 + v221;
      uint64_t v223 = v15 + v221;
      uint64_t v224 = *(void *)(v223 + 8);
      uint64_t v8 = v395;
      if (v224) {
        goto LABEL_152;
      }
      *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
      *(void *)(v222 + 16) = *(void *)(v223 + 16);
      goto LABEL_165;
    case 0x21u:
      v396 = v8;
      *(void *)uint64_t v14 = *(void *)v15;
      uint64_t v119 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v120 = *(int *)(v119 + 20);
      uint64_t v121 = (void *)(v14 + v120);
      uint64_t v122 = (const void *)(v15 + v120);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v122, 1, v6))
      {
        uint64_t v123 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        v410(v121, v122, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v121, 0, 1, v6);
      }
      uint64_t v8 = v396;
      uint64_t v272 = *(int *)(v119 + 24);
      uint64_t v222 = v14 + v272;
      uint64_t v223 = v15 + v272;
      uint64_t v224 = *(void *)(v223 + 8);
      if (v224) {
        goto LABEL_152;
      }
      *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
      *(void *)(v222 + 16) = *(void *)(v223 + 16);
      goto LABEL_165;
    case 0x22u:
      uint64_t v124 = type metadata accessor for RequestContent(0);
      int v125 = swift_getEnumCaseMultiPayload();
      v397 = v8;
      if (v125 != 3)
      {
        if (v125 == 2)
        {
          *(void *)uint64_t v14 = *(void *)v15;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v125 != 1)
          {
            memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v124 - 8) + 64));
            goto LABEL_148;
          }
          uint64_t v126 = *(void *)(v15 + 8);
          *(void *)uint64_t v14 = *(void *)v15;
          *(void *)(v14 + 8) = v126;
          uint64_t v127 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v382 = v15 + v127;
          __dstg = (void *)(v14 + v127);
          uint64_t v128 = sub_253B059D0();
          int v129 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v128 - 8) + 16);
          swift_bridgeObjectRetain();
          v129(__dstg, v382, v128);
          uint64_t v6 = v411;
        }
LABEL_147:
        swift_storeEnumTagMultiPayload();
LABEL_148:
        uint64_t v326 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v327 = *(int *)(v326 + 20);
        uint64_t v328 = (void *)(v14 + v327);
        uint64_t v329 = (const void *)(v15 + v327);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15 + v327, 1, v6))
        {
          uint64_t v330 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v328, v329, *(void *)(*(void *)(v330 - 8) + 64));
        }
        else
        {
          v410(v328, v329, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v328, 0, 1, v6);
        }
        uint64_t v331 = *(int *)(v326 + 24);
        uint64_t v222 = v14 + v331;
        uint64_t v223 = v15 + v331;
        uint64_t v224 = *(void *)(v223 + 8);
        uint64_t v8 = v397;
        if (!v224)
        {
          *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
          *(void *)(v222 + 16) = *(void *)(v223 + 16);
          goto LABEL_165;
        }
        goto LABEL_152;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v15, 1, v6))
      {
        uint64_t v277 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v277 - 8) + 64));
      }
      else
      {
        v7(v14, v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, 0, 1, v6);
      }
      uint64_t v297 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v7(v14 + v297[5], v15 + v297[5], v6);
      uint64_t v298 = v297[6];
      uint64_t v299 = (void *)(v14 + v298);
      uint64_t v300 = (const void *)(v15 + v298);
      uint64_t v301 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v302 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v302 - 8) + 16))(v299, v300, v302);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v299, v300, *(void *)(*(void *)(v301 - 8) + 64));
      }
      uint64_t v303 = v297[7];
      uint64_t v304 = v14 + v303;
      uint64_t v305 = v15 + v303;
      uint64_t v306 = sub_253B059D0();
      uint64_t v307 = *(void (**)(uint64_t, uint64_t))(*(void *)(v306 - 8) + 16);
      __dstb = (void *)v306;
      v307(v304, v305);
      uint64_t v308 = v297[8];
      uint64_t v309 = (void *)(v14 + v308);
      uint64_t v310 = (void *)(v15 + v308);
      uint64_t v311 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v312 = swift_getEnumCaseMultiPayload();
      if (v312 == 1)
      {
        *uint64_t v309 = *v310;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v312)
        {
          memcpy(v309, v310, *(void *)(*(void *)(v311 - 8) + 64));
          goto LABEL_146;
        }
        uint64_t v313 = v310[1];
        *uint64_t v309 = *v310;
        v309[1] = v313;
        uint64_t v314 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v379 = (char *)v309 + v314;
        v315 = (char *)v310 + v314;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v307)(v379, v315, __dstb);
      }
      swift_storeEnumTagMultiPayload();
LABEL_146:
      uint64_t v6 = v411;
      goto LABEL_147;
    case 0x23u:
      uint64_t v130 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(v14, v15, v130);
      uint64_t v131 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v132 = *(int *)(v131 + 20);
      uint64_t v133 = v14 + v132;
      uint64_t v134 = v15 + v132;
      uint64_t v135 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 16))(v133, v134, v135);
      *(void *)(v14 + *(int *)(v131 + 24)) = *(void *)(v15 + *(int *)(v131 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_165;
    case 0x25u:
      uint64_t v136 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(v14, v15, v136);
      uint64_t v137 = type metadata accessor for ToolResolution(0);
      uint64_t v138 = *(int *)(v137 + 20);
      v401 = (void *)(v14 + v138);
      uint64_t v139 = v15 + v138;
      uint64_t v140 = v8;
      uint64_t v141 = sub_253B059D0();
      uint64_t v142 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v141 - 8) + 16);
      v142(v401, v139, v141);
      uint64_t v143 = v141;
      uint64_t v8 = v140;
      v142((void *)(v14 + *(int *)(v137 + 24)), v15 + *(int *)(v137 + 24), v143);
      goto LABEL_165;
    case 0x26u:
      v398 = v8;
      uint64_t v144 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v144;
      uint64_t v145 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v146 = v145[5];
      uint64_t v147 = (void *)(v14 + v146);
      uint64_t v148 = (const void *)(v15 + v146);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v148, 1, v6))
      {
        uint64_t v149 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v147, v148, *(void *)(*(void *)(v149 - 8) + 64));
      }
      else
      {
        v410(v147, v148, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v147, 0, 1, v6);
      }
      *(unsigned char *)(v14 + v145[6]) = *(unsigned char *)(v15 + v145[6]);
      uint64_t v225 = v145[7];
      uint64_t v226 = v14 + v225;
      uint64_t v227 = v15 + v225;
      uint64_t v228 = sub_253B059D0();
      uint64_t v229 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 16);
      uint64_t v230 = v226;
      uint64_t v231 = *v229;
      (*v229)(v230, v227, v228);
      uint64_t v232 = v145[8];
      uint64_t v233 = (void *)(v14 + v232);
      v234 = (const void *)(v15 + v232);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v234, 1, v228))
      {
        uint64_t v235 = sub_253462A5C(&qword_269CDB460);
        memcpy(v233, v234, *(void *)(*(void *)(v235 - 8) + 64));
      }
      else
      {
        v231((uint64_t)v233, (uint64_t)v234, v228);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v233, 0, 1, v228);
      }
      uint64_t v8 = v398;
      goto LABEL_165;
    case 0x27u:
      v393 = v8;
      v7(v14, v15, v6);
      uint64_t v150 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v14 + v150[5]) = *(unsigned char *)(v15 + v150[5]);
      uint64_t v151 = v150[6];
      uint64_t v152 = v14 + v151;
      uint64_t v153 = v15 + v151;
      uint64_t v154 = sub_253B059D0();
      uint64_t v155 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v154 - 8) + 16);
      uint64_t v156 = v153;
      uint64_t v157 = *v155;
      (*v155)(v152, v156, v154);
      uint64_t v158 = v150[7];
      uint64_t v159 = (void *)(v14 + v158);
      uint64_t v160 = (const void *)(v15 + v158);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v160, 1, v154))
      {
        uint64_t v161 = sub_253462A5C(&qword_269CDB460);
        memcpy(v159, v160, *(void *)(*(void *)(v161 - 8) + 64));
      }
      else
      {
        v157((uint64_t)v159, (uint64_t)v160, v154);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v159, 0, 1, v154);
      }
      goto LABEL_80;
    case 0x28u:
      uint64_t v162 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16))(v14, v15, v162);
      uint64_t v163 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v164 = *(int *)(v163 + 20);
      uint64_t v165 = v14 + v164;
      uint64_t v166 = v15 + v164;
      uint64_t v167 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 16))(v165, v166, v167);
      uint64_t v168 = *(int *)(v163 + 24);
      uint64_t v169 = v14 + v168;
      uint64_t v170 = v15 + v168;
      uint64_t v171 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 16))(v169, v170, v171);
      goto LABEL_165;
    case 0x29u:
      uint64_t v172 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 16))(v14, v15, v172);
      uint64_t v173 = type metadata accessor for TypeConversionResult(0);
      uint64_t v174 = *(int *)(v173 + 20);
      v402 = (void *)(v14 + v174);
      uint64_t v175 = v15 + v174;
      uint64_t v176 = v8;
      uint64_t v177 = sub_253B059D0();
      uint64_t v178 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v177 - 8) + 16);
      v178(v402, v175, v177);
      uint64_t v179 = v177;
      uint64_t v8 = v176;
      v178((void *)(v14 + *(int *)(v173 + 24)), v15 + *(int *)(v173 + 24), v179);
      goto LABEL_165;
    case 0x2Au:
      v393 = v8;
      uint64_t v180 = *(void *)(v15 + 8);
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = v180;
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v181 = DecorationResult[7];
      __dst = (void *)(v14 + v181);
      uint64_t v182 = (const void *)(v15 + v181);
      uint64_t v183 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v182, 1, v183))
      {
        uint64_t v184 = sub_253462A5C(&qword_269CDBB30);
        memcpy(__dst, v182, *(void *)(*(void *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v183 - 8) + 16))(__dst, v182, v183);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dst, 0, 1, v183);
      }
      *(void *)(v14 + DecorationResult[8]) = *(void *)(v15 + DecorationResult[8]);
      *(void *)(v14 + DecorationResult[9]) = *(void *)(v15 + DecorationResult[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_80:
      swift_storeEnumTagMultiPayload();
      uint64_t v8 = v393;
      goto LABEL_166;
    case 0x2Cu:
      uint64_t v185 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 16))(v14, v15, v185);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v187 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v188 = (void *)(v14 + v187);
      uint64_t v189 = (uint64_t *)(v15 + v187);
      uint64_t v191 = *v189;
      uint64_t v190 = v189[1];
      *uint64_t v188 = v191;
      v188[1] = v190;
      uint64_t v192 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v193 = v14 + v192;
      v194 = (uint64_t *)(v15 + v192);
      uint64_t v195 = *v194;
      LOBYTE(v194) = *((unsigned char *)v194 + 8);
      *(void *)uint64_t v193 = v195;
      *(unsigned char *)(v193 + 8) = (_BYTE)v194;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_165;
    default:
      memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v16 - 8) + 64));
      goto LABEL_166;
  }
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  __dst = *(void **)(v6 - 8);
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for Session.Event(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v9, 1, v6);
  int v13 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      ((void (*)(void *, const void *, uint64_t))__dst[2])(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    ((void (*)(void *, uint64_t))__dst[1])(v10, v6);
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v7((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  if (a1 != a2)
  {
    uint64_t v15 = v8[7];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    sub_253491A24(a1 + v15, (void (*)(void))type metadata accessor for Session.Event.Payload);
    uint64_t v18 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v365 = v7;
        uint64_t v19 = sub_253B05D70();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17, v19);
        uint64_t v20 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v21 = (void *)(v16 + v20);
        uint64_t v22 = (const void *)(v17 + v20);
        uint64_t v23 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23))
        {
          uint64_t v24 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
        }
        goto LABEL_66;
      case 1u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
        uint64_t v366 = v7;
        uint64_t v25 = type metadata accessor for TextQuery(0);
        uint64_t v26 = *(int *)(v25 + 24);
        __dstf = (void *)(v16 + v26);
        uint64_t v346 = v17 + v26;
        uint64_t v27 = sub_253B059D0();
        uint64_t v333 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
        swift_bridgeObjectRetain();
        v333(__dstf, v346, v27);
        uint64_t v28 = *(int *)(v25 + 28);
        uint64_t v7 = v366;
        int v29 = (void *)(v16 + v28);
        uint64_t v30 = (void *)(v17 + v28);
        *int v29 = *v30;
        v29[1] = v30[1];
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 2u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 3u:
        uint64_t v31 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v354 = a3;
        v367 = v7;
        if (EnumCaseMultiPayload != 3)
        {
          if (EnumCaseMultiPayload == 2)
          {
            *(void *)uint64_t v16 = *(void *)v17;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v31 - 8) + 64));
              goto LABEL_148;
            }
            *(void *)uint64_t v16 = *(void *)v17;
            *(void *)(v16 + 8) = *(void *)(v17 + 8);
            uint64_t v33 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v328 = v17 + v33;
            uint64_t v334 = (void *)(v16 + v33);
            uint64_t v34 = sub_253B059D0();
            uint64_t v35 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
            swift_bridgeObjectRetain();
            v35(v334, v328, v34);
          }
          goto LABEL_147;
        }
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v254 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v254 - 8) + 64));
          long long v255 = __dst;
        }
        else
        {
          long long v255 = __dst;
          ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v261 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        ((void (*)(uint64_t, uint64_t, uint64_t))v255[2])(v16 + v261[5], v17 + v261[5], v6);
        uint64_t v262 = v261[6];
        uint64_t v341 = (void *)(v16 + v262);
        uint64_t v263 = (const void *)(v17 + v262);
        uint64_t v264 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v265 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v265 - 8) + 16))(v341, v263, v265);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v341, v263, *(void *)(*(void *)(v264 - 8) + 64));
        }
        uint64_t v266 = v261[7];
        uint64_t v267 = v16 + v266;
        uint64_t v268 = v17 + v266;
        uint64_t v269 = sub_253B059D0();
        uint64_t v331 = *(void (**)(uint64_t, uint64_t))(*(void *)(v269 - 8) + 16);
        uint64_t v342 = (void *)v269;
        v331(v267, v268);
        uint64_t v270 = v261[8];
        uint64_t v271 = (void *)(v16 + v270);
        uint64_t v272 = (void *)(v17 + v270);
        uint64_t v273 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v274 = swift_getEnumCaseMultiPayload();
        if (v274 == 1)
        {
          *uint64_t v271 = *v272;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v274)
          {
            memcpy(v271, v272, *(void *)(*(void *)(v273 - 8) + 64));
LABEL_147:
            swift_storeEnumTagMultiPayload();
LABEL_148:
            uint64_t v294 = type metadata accessor for Request(0);
            *(unsigned char *)(v16 + *(int *)(v294 + 20)) = *(unsigned char *)(v17 + *(int *)(v294 + 20));
            uint64_t v353 = v294;
            uint64_t v295 = *(int *)(v294 + 24);
            v296 = (void *)(v16 + v295);
            uint64_t v297 = (void *)(v17 + v295);
            uint64_t v298 = type metadata accessor for RequestPrescribedPlan(0);
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v297, 1, v298))
            {
              uint64_t v299 = sub_253462A5C(&qword_269CDBB20);
              memcpy(v296, v297, *(void *)(*(void *)(v299 - 8) + 64));
              uint64_t v300 = v353;
            }
            else
            {
              uint64_t v345 = (void *)v298;
              uint64_t v301 = (uint64_t)v296;
              switch(swift_getEnumCaseMultiPayload())
              {
                case 0u:
                  void *v296 = *v297;
                  v296[1] = v297[1];
                  *((unsigned char *)v296 + 16) = *((unsigned char *)v297 + 16);
                  *((unsigned char *)v296 + 17) = *((unsigned char *)v297 + 17);
                  swift_bridgeObjectRetain();
                  uint64_t v302 = (uint64_t)v345;
                  goto LABEL_167;
                case 1u:
                  void *v296 = *v297;
                  v296[1] = v297[1];
                  swift_bridgeObjectRetain();
                  uint64_t v302 = (uint64_t)v345;
                  goto LABEL_167;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                  void *v296 = *v297;
                  v296[1] = v297[1];
                  *((unsigned char *)v296 + 16) = *((unsigned char *)v297 + 16);
                  swift_bridgeObjectRetain();
                  uint64_t v302 = (uint64_t)v345;
                  goto LABEL_167;
                case 6u:
                  uint64_t v313 = sub_253B059D0();
                  (*(void (**)(void *, void *, uint64_t))(*(void *)(v313 - 8) + 16))(v296, v297, v313);
                  uint64_t v314 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
                  v315 = (char *)v296 + v314;
                  uint64_t v316 = (char *)v297 + v314;
                  char v317 = v316[8];
                  *(void *)v315 = *(void *)v316;
                  v315[8] = v317;
                  uint64_t v302 = (uint64_t)v345;
LABEL_167:
                  swift_storeEnumTagMultiPayload();
                  break;
                default:
                  uint64_t v301 = (uint64_t)v296;
                  int v312 = v297;
                  uint64_t v302 = (uint64_t)v345;
                  memcpy(v296, v312, *(void *)(*(v345 - 1) + 64));
                  break;
              }
              uint64_t v300 = v353;
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v301, 0, 1, v302);
            }
            uint64_t v318 = *(int *)(v300 + 28);
            uint64_t v319 = (void *)(v16 + v318);
            uint64_t v320 = (const void *)(v17 + v318);
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v318, 1, v6))
            {
              uint64_t v321 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
              memcpy(v319, v320, *(void *)(*(void *)(v321 - 8) + 64));
            }
            else
            {
              ((void (*)(void *, const void *, uint64_t))__dst[2])(v319, v320, v6);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v319, 0, 1, v6);
            }
            uint64_t v322 = *(int *)(v300 + 32);
            uint64_t v323 = (void *)(v16 + v322);
            uint64_t v324 = (void *)(v17 + v322);
            a3 = v354;
            if (v324[1])
            {
              void *v323 = *v324;
              v323[1] = v324[1];
              v323[2] = v324[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v325 = *(_OWORD *)v324;
              v323[2] = v324[2];
              *(_OWORD *)uint64_t v323 = v325;
            }
            uint64_t v7 = v367;
LABEL_85:
            swift_storeEnumTagMultiPayload();
            break;
          }
          *uint64_t v271 = *v272;
          v271[1] = v272[1];
          uint64_t v275 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v326 = (char *)v271 + v275;
          uint64_t v276 = (char *)v272 + v275;
          swift_bridgeObjectRetain();
          ((void (*)(char *, char *, void *))v331)(v326, v276, v342);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_147;
      case 4u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        *(void *)(v16 + 48) = *(void *)(v17 + 48);
        *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 5u:
        uint64_t v36 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v16, v17, v36);
        uint64_t v37 = (int *)type metadata accessor for Action(0);
        uint64_t v38 = v37[5];
        uint64_t v39 = (void *)(v16 + v38);
        uint64_t v40 = (void *)(v17 + v38);
        void *v39 = *v40;
        v39[1] = v40[1];
        *(unsigned char *)(v16 + v37[6]) = *(unsigned char *)(v17 + v37[6]);
        *(void *)(v16 + v37[7]) = *(void *)(v17 + v37[7]);
        uint64_t v41 = v37[8];
        uint64_t v42 = (void *)(v16 + v41);
        uint64_t v43 = (void *)(v17 + v41);
        *uint64_t v42 = *v43;
        v42[1] = v43[1];
        uint64_t v44 = v37[9];
        uint64_t v45 = (void *)(v16 + v44);
        uint64_t v46 = (void *)(v17 + v44);
        *uint64_t v45 = *v46;
        v45[1] = v46[1];
        void v45[2] = v46[2];
        v45[3] = v46[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 6u:
        uint64_t v47 = v7;
        uint64_t v48 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v48))
        {
          uint64_t v49 = sub_253462A5C(&qword_269CDB460);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v16, v17, v48);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v48);
        }
        uint64_t v160 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v16 + *(int *)(v160 + 20), v17 + *(int *)(v160 + 20), v48);
        swift_storeEnumTagMultiPayload();
        uint64_t v7 = v47;
        break;
      case 7u:
        uint64_t v50 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v16, v17, v50);
        uint64_t v51 = (int *)type metadata accessor for ClientAction(0);
        uint64_t v52 = v51[5];
        uint64_t v53 = (void *)(v16 + v52);
        uint64_t v54 = (void *)(v17 + v52);
        *uint64_t v53 = *v54;
        v53[1] = v54[1];
        *(void *)(v16 + v51[6]) = *(void *)(v17 + v51[6]);
        uint64_t v55 = v51[7];
        uint64_t v56 = (void *)(v16 + v55);
        uint64_t v57 = (void *)(v17 + v55);
        *uint64_t v56 = *v57;
        v56[1] = v57[1];
        uint64_t v58 = v51[8];
        uint64_t v59 = (void *)(v16 + v58);
        uint64_t v60 = (void *)(v17 + v58);
        *uint64_t v59 = *v60;
        v59[1] = v60[1];
        *(void *)(v16 + v51[9]) = *(void *)(v17 + v51[9]);
        *(void *)(v16 + v51[10]) = *(void *)(v17 + v51[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 8u:
        uint64_t v61 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(v16, v17, v61);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)(v16 + *(int *)(Step + 20)) = *(void *)(v17 + *(int *)(Step + 20));
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 9u:
        uint64_t v63 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v16, v17, v63);
        uint64_t v64 = type metadata accessor for VariableStep(0);
        *(void *)(v16 + *(int *)(v64 + 20)) = *(void *)(v17 + *(int *)(v64 + 20));
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0xAu:
      case 0x15u:
      case 0x1Du:
        *(void *)uint64_t v16 = *(void *)v17;
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0xBu:
      case 0x17u:
      case 0x18u:
      case 0x1Au:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0xCu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v256 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 16))(v16, v17, v256);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v257 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v257)) {
              goto LABEL_128;
            }
            uint64_t v258 = type metadata accessor for PlannerError();
            goto LABEL_123;
          case 3u:
            uint64_t v257 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v257))
            {
              uint64_t v258 = type metadata accessor for ExecutorError();
LABEL_123:
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v258 - 8) + 64));
            }
            else
            {
LABEL_128:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v257 - 8) + 16))(v16, v17, v257);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v257);
            }
            break;
          default:
            uint64_t v65 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v16, v17, v65);
            break;
        }
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        uint64_t v66 = *(void *)v17;
        unint64_t v67 = *(void *)(v17 + 8);
        sub_25348A9C8(*(void *)v17, v67);
        *(void *)uint64_t v16 = v66;
        *(void *)(v16 + 8) = v67;
        uint64_t v68 = *(void *)(v17 + 16);
        unint64_t v69 = *(void *)(v17 + 24);
        sub_25348A9C8(v68, v69);
        *(void *)(v16 + 16) = v68;
        *(void *)(v16 + 24) = v69;
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0xFu:
        uint64_t v70 = sub_253B059F0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v16, v17, v70);
        goto LABEL_85;
      case 0x10u:
        uint64_t v355 = a3;
        uint64_t v368 = v7;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v71 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v71 - 8) + 64));
          uint64_t v72 = __dst;
        }
        else
        {
          uint64_t v72 = __dst;
          ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        v234 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        ((void (*)(uint64_t, uint64_t, uint64_t))v72[2])(v16 + v234[5], v17 + v234[5], v6);
        uint64_t v235 = v234[6];
        __dstd = (void *)(v16 + v235);
        uint64_t v236 = (const void *)(v17 + v235);
        uint64_t v237 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v238 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v238 - 8) + 16))(__dstd, v236, v238);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dstd, v236, *(void *)(*(void *)(v237 - 8) + 64));
        }
        uint64_t v239 = v234[7];
        uint64_t v240 = v16 + v239;
        uint64_t v241 = v17 + v239;
        uint64_t v242 = sub_253B059D0();
        __dste = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 16);
        __dste(v240, v241, v242);
        uint64_t v243 = v234[8];
        uint64_t v244 = (void *)(v16 + v243);
        uint64_t v245 = (void *)(v17 + v243);
        uint64_t v246 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v247 = swift_getEnumCaseMultiPayload();
        if (v247 == 1)
        {
          *uint64_t v244 = *v245;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v247)
          {
            memcpy(v244, v245, *(void *)(*(void *)(v246 - 8) + 64));
LABEL_113:
            a3 = v355;
            uint64_t v7 = v368;
            goto LABEL_85;
          }
          *uint64_t v244 = *v245;
          v244[1] = v245[1];
          uint64_t v248 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v340 = (char *)v244 + v248;
          uint64_t v249 = (char *)v245 + v248;
          swift_bridgeObjectRetain();
          __dste((uint64_t)v340, (uint64_t)v249, v242);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_113;
      case 0x11u:
        uint64_t v356 = a3;
        uint64_t v369 = v7;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v73 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v161 = type metadata accessor for ActionStepResult(0);
        uint64_t v162 = *(int *)(v161 + 20);
        uint64_t v163 = (void *)(v16 + v162);
        uint64_t v164 = (void *)(v17 + v162);
        *uint64_t v163 = *v164;
        v163[1] = v164[1];
        __dstb = (int *)v161;
        uint64_t v165 = *(int *)(v161 + 24);
        uint64_t v166 = v16 + v165;
        uint64_t v351 = v17 + v165;
        uint64_t v167 = sub_253B05AB0();
        uint64_t v338 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 16);
        swift_bridgeObjectRetain();
        v338(v166, v351, v167);
        uint64_t v168 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v169 = (void *)(v166 + v168);
        uint64_t v170 = (const void *)(v351 + v168);
        uint64_t v171 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v170, 1, v171))
        {
          uint64_t v172 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v169, v170, *(void *)(*(void *)(v172 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v171 - 8) + 16))(v169, v170, v171);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v169, 0, 1, v171);
        }
        uint64_t v7 = v369;
        uint64_t v222 = __dstb[7];
        uint64_t v223 = (void *)(v16 + v222);
        uint64_t v224 = (void *)(v17 + v222);
        void *v223 = *v224;
        v223[1] = v224[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        a3 = v356;
        break;
      case 0x12u:
        *(void *)uint64_t v16 = *(void *)v17;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v75 = *(int *)(StepResults + 20);
        uint64_t v335 = (void *)(v17 + v75);
        uint64_t v347 = v16 + v75;
        uint64_t v370 = v7;
        uint64_t v76 = sub_253B059D0();
        uint64_t v329 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v76 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v77 = v76;
        uint64_t v7 = v370;
        v329(v347, v335, v77);
        ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16 + *(int *)(StepResults + 24), v17 + *(int *)(StepResults + 24), v6);
        goto LABEL_85;
      case 0x13u:
        uint64_t v78 = sub_253B05CF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 16))(v16, v17, v78);
        goto LABEL_85;
      case 0x14u:
        uint64_t v79 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v16, v17, v79);
        uint64_t v80 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)(v16 + v80[5]) = *(void *)(v17 + v80[5]);
        *(void *)(v16 + v80[6]) = *(void *)(v17 + v80[6]);
        *(void *)(v16 + v80[7]) = *(void *)(v17 + v80[7]);
        *(unsigned char *)(v16 + v80[8]) = *(unsigned char *)(v17 + v80[8]);
        *(unsigned char *)(v16 + v80[9]) = *(unsigned char *)(v17 + v80[9]);
        *(unsigned char *)(v16 + v80[10]) = *(unsigned char *)(v17 + v80[10]);
        uint64_t v81 = v80[11];
        uint64_t v82 = (void *)(v16 + v81);
        uint64_t v83 = (void *)(v17 + v81);
        void *v82 = *v83;
        v82[1] = v83[1];
        v82[2] = v83[2];
        v82[3] = v83[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x16u:
      case 0x24u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x1Bu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x1Cu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        *(void *)(v16 + 48) = *(void *)(v17 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x1Eu:
        uint64_t v84 = sub_253B06720();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(v16, v17, v84);
        goto LABEL_85;
      case 0x1Fu:
        uint64_t v357 = a3;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v85 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v352 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v173 = v352[5];
        uint64_t v174 = v16 + v173;
        uint64_t v175 = v17 + v173;
        uint64_t v176 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 16))(v174, v175, v176);
        uint64_t v177 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        __dstc = (void *)(v174 + v177);
        uint64_t v178 = (const void *)(v175 + v177);
        uint64_t v179 = sub_253B06820();
        uint64_t v376 = v7;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v178, 1, v179))
        {
          uint64_t v180 = sub_253462A5C(&qword_269CDBB28);
          memcpy(__dstc, v178, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v179 - 8) + 16))(__dstc, v178, v179);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstc, 0, 1, v179);
        }
        uint64_t v225 = v352;
        uint64_t v226 = v352[6];
        __dstuint64_t i = (void *)(v16 + v226);
        uint64_t v339 = (void *)(v17 + v226);
        uint64_t v227 = sub_253B059D0();
        uint64_t v228 = *(void (**)(void *, void *, uint64_t))(*(void *)(v227 - 8) + 16);
        v228(__dsti, v339, v227);
        v228((void *)(v16 + v225[7]), (void *)(v17 + v225[7]), v227);
        v228((void *)(v16 + v225[8]), (void *)(v17 + v225[8]), v227);
        uint64_t v229 = v352[9];
        uint64_t v230 = (void *)(v16 + v229);
        uint64_t v231 = (void *)(v17 + v229);
        if (v231[1])
        {
          *uint64_t v230 = *v231;
          v230[1] = v231[1];
          v230[2] = v231[2];
          v230[3] = v231[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v233 = *((_OWORD *)v231 + 1);
          *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
          *((_OWORD *)v230 + 1) = v233;
        }
        a3 = v357;
        uint64_t v7 = v376;
        goto LABEL_85;
      case 0x20u:
        uint64_t v371 = v7;
        uint64_t v358 = a3;
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        uint64_t v86 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v87 = *(int *)(v86 + 20);
        uint64_t v88 = (void *)(v16 + v87);
        uint64_t v89 = (const void *)(v17 + v87);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v89, 1, v6))
        {
          uint64_t v90 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
        }
        else
        {
          ((void (*)(void *, const void *, uint64_t))__dst[2])(v88, v89, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v88, 0, 1, v6);
        }
        uint64_t v181 = *(int *)(v86 + 24);
        uint64_t v182 = (void *)(v16 + v181);
        uint64_t v183 = (void *)(v17 + v181);
        a3 = v358;
        if (v183[1])
        {
          void *v182 = *v183;
          v182[1] = v183[1];
          v182[2] = v183[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v232 = *(_OWORD *)v183;
          v182[2] = v183[2];
          *(_OWORD *)uint64_t v182 = v232;
        }
        uint64_t v7 = v371;
        goto LABEL_85;
      case 0x21u:
        uint64_t v372 = v7;
        uint64_t v359 = a3;
        *(void *)uint64_t v16 = *(void *)v17;
        uint64_t v91 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v92 = *(int *)(v91 + 20);
        uint64_t v93 = (void *)(v16 + v92);
        uint64_t v94 = (const void *)(v17 + v92);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v94, 1, v6))
        {
          uint64_t v95 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v93, v94, *(void *)(*(void *)(v95 - 8) + 64));
        }
        else
        {
          ((void (*)(void *, const void *, uint64_t))__dst[2])(v93, v94, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v93, 0, 1, v6);
        }
        a3 = v359;
        uint64_t v250 = *(int *)(v91 + 24);
        long long v251 = (void *)(v16 + v250);
        v252 = (void *)(v17 + v250);
        if (v252[1])
        {
          void *v251 = *v252;
          v251[1] = v252[1];
          v251[2] = v252[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v253 = *(_OWORD *)v252;
          v251[2] = v252[2];
          *(_OWORD *)long long v251 = v253;
        }
        uint64_t v7 = v372;
        goto LABEL_85;
      case 0x22u:
        uint64_t v96 = type metadata accessor for RequestContent(0);
        int v97 = swift_getEnumCaseMultiPayload();
        uint64_t v360 = a3;
        uint64_t v373 = v7;
        if (v97 != 3)
        {
          if (v97 == 2)
          {
            *(void *)uint64_t v16 = *(void *)v17;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v97 != 1)
            {
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v96 - 8) + 64));
              goto LABEL_156;
            }
            *(void *)uint64_t v16 = *(void *)v17;
            *(void *)(v16 + 8) = *(void *)(v17 + 8);
            uint64_t v98 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v330 = v17 + v98;
            uint64_t v336 = (void *)(v16 + v98);
            uint64_t v99 = sub_253B059D0();
            uint64_t v100 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16);
            swift_bridgeObjectRetain();
            v100(v336, v330, v99);
          }
          goto LABEL_155;
        }
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v259 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v259 - 8) + 64));
          uint64_t v260 = __dst;
        }
        else
        {
          uint64_t v260 = __dst;
          ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v277 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        ((void (*)(uint64_t, uint64_t, uint64_t))v260[2])(v16 + v277[5], v17 + v277[5], v6);
        uint64_t v278 = v277[6];
        uint64_t v343 = (void *)(v16 + v278);
        uint64_t v279 = (const void *)(v17 + v278);
        uint64_t v280 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v281 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v281 - 8) + 16))(v343, v279, v281);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v343, v279, *(void *)(*(void *)(v280 - 8) + 64));
        }
        uint64_t v282 = v277[7];
        uint64_t v283 = v16 + v282;
        uint64_t v284 = v17 + v282;
        uint64_t v285 = sub_253B059D0();
        uint64_t v286 = (void (**)(uint64_t, uint64_t))(*(void *)(v285 - 8) + 16);
        v332 = *v286;
        uint64_t v344 = (void *)v285;
        (*v286)(v283, v284);
        uint64_t v287 = v277[8];
        uint64_t v288 = (void *)(v16 + v287);
        uint64_t v289 = (void *)(v17 + v287);
        uint64_t v290 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v291 = swift_getEnumCaseMultiPayload();
        if (v291 == 1)
        {
          *uint64_t v288 = *v289;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v291)
          {
            memcpy(v288, v289, *(void *)(*(void *)(v290 - 8) + 64));
LABEL_155:
            swift_storeEnumTagMultiPayload();
LABEL_156:
            uint64_t v303 = type metadata accessor for ExternalAgentRequest(0);
            uint64_t v304 = *(int *)(v303 + 20);
            uint64_t v305 = (void *)(v16 + v304);
            uint64_t v306 = (const void *)(v17 + v304);
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v304, 1, v6))
            {
              uint64_t v307 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
              memcpy(v305, v306, *(void *)(*(void *)(v307 - 8) + 64));
            }
            else
            {
              ((void (*)(void *, const void *, uint64_t))__dst[2])(v305, v306, v6);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v305, 0, 1, v6);
            }
            uint64_t v308 = *(int *)(v303 + 24);
            uint64_t v309 = (void *)(v16 + v308);
            uint64_t v310 = (void *)(v17 + v308);
            a3 = v360;
            if (v310[1])
            {
              *uint64_t v309 = *v310;
              v309[1] = v310[1];
              v309[2] = v310[2];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v311 = *(_OWORD *)v310;
              v309[2] = v310[2];
              *(_OWORD *)uint64_t v309 = v311;
            }
            uint64_t v7 = v373;
            goto LABEL_85;
          }
          *uint64_t v288 = *v289;
          v288[1] = v289[1];
          uint64_t v292 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v327 = (char *)v288 + v292;
          int v293 = (char *)v289 + v292;
          swift_bridgeObjectRetain();
          ((void (*)(char *, char *, void *))v332)(v327, v293, v344);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_155;
      case 0x23u:
        uint64_t v101 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(v16, v17, v101);
        uint64_t v102 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v103 = *(int *)(v102 + 20);
        v374 = v7;
        uint64_t v104 = v16 + v103;
        uint64_t v105 = v17 + v103;
        uint64_t v106 = sub_253B06850();
        uint64_t v107 = v105;
        uint64_t v7 = v374;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v107, v106);
        *(void *)(v16 + *(int *)(v102 + 24)) = *(void *)(v17 + *(int *)(v102 + 24));
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x25u:
        uint64_t v108 = sub_253B08B30();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v16, v17, v108);
        uint64_t v109 = type metadata accessor for ToolResolution(0);
        uint64_t v110 = *(int *)(v109 + 20);
        __dstg = (void *)(v16 + v110);
        uint64_t v348 = v17 + v110;
        uint64_t v361 = a3;
        uint64_t v111 = sub_253B059D0();
        uint64_t v112 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v111 - 8) + 16);
        v112(__dstg, v348, v111);
        uint64_t v113 = v111;
        a3 = v361;
        v112((void *)(v16 + *(int *)(v109 + 24)), v17 + *(int *)(v109 + 24), v113);
        goto LABEL_85;
      case 0x26u:
        v365 = v7;
        uint64_t v362 = a3;
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        uint64_t v114 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v115 = v114[5];
        uint64_t v116 = (void *)(v16 + v115);
        uint64_t v117 = (const void *)(v17 + v115);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v117, 1, v6))
        {
          uint64_t v118 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          ((void (*)(void *, const void *, uint64_t))__dst[2])(v116, v117, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v116, 0, 1, v6);
        }
        *(unsigned char *)(v16 + v114[6]) = *(unsigned char *)(v17 + v114[6]);
        uint64_t v184 = v114[7];
        uint64_t v185 = v16 + v184;
        uint64_t v186 = v17 + v184;
        uint64_t v187 = sub_253B059D0();
        uint64_t v188 = v185;
        uint64_t v189 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 16);
        v189(v188, v186, v187);
        uint64_t v190 = v114[8];
        uint64_t v191 = (void *)(v16 + v190);
        uint64_t v192 = (const void *)(v17 + v190);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v192, 1, v187))
        {
          uint64_t v193 = sub_253462A5C(&qword_269CDB460);
          memcpy(v191, v192, *(void *)(*(void *)(v193 - 8) + 64));
        }
        else
        {
          v189((uint64_t)v191, (uint64_t)v192, v187);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v191, 0, 1, v187);
        }
        a3 = v362;
        goto LABEL_66;
      case 0x27u:
        v365 = v7;
        uint64_t v363 = a3;
        ((void (*)(uint64_t, uint64_t, uint64_t))__dst[2])(v16, v17, v6);
        uint64_t v119 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *(unsigned char *)(v16 + v119[5]) = *(unsigned char *)(v17 + v119[5]);
        uint64_t v120 = v119[6];
        uint64_t v121 = v16 + v120;
        uint64_t v122 = v17 + v120;
        uint64_t v123 = sub_253B059D0();
        uint64_t v124 = v122;
        int v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 16);
        v125(v121, v124, v123);
        uint64_t v126 = v119[7];
        uint64_t v127 = (void *)(v16 + v126);
        uint64_t v128 = (const void *)(v17 + v126);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v128, 1, v123))
        {
          uint64_t v129 = sub_253462A5C(&qword_269CDB460);
          memcpy(v127, v128, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          v125((uint64_t)v127, (uint64_t)v128, v123);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v127, 0, 1, v123);
        }
        a3 = v363;
LABEL_66:
        swift_storeEnumTagMultiPayload();
        uint64_t v7 = v365;
        break;
      case 0x28u:
        uint64_t v130 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(v16, v17, v130);
        uint64_t v131 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v132 = *(int *)(v131 + 20);
        uint64_t v375 = v7;
        uint64_t v133 = v16 + v132;
        uint64_t v134 = v17 + v132;
        uint64_t v135 = sub_253B09150();
        uint64_t v136 = v134;
        uint64_t v7 = v375;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 16))(v133, v136, v135);
        uint64_t v137 = *(int *)(v131 + 24);
        uint64_t v138 = v16 + v137;
        uint64_t v139 = v17 + v137;
        uint64_t v140 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16))(v138, v139, v140);
        goto LABEL_85;
      case 0x29u:
        uint64_t v141 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 16))(v16, v17, v141);
        uint64_t v142 = type metadata accessor for TypeConversionResult(0);
        uint64_t v143 = *(int *)(v142 + 20);
        __dsth = (void *)(v16 + v143);
        uint64_t v349 = v17 + v143;
        uint64_t v364 = a3;
        uint64_t v144 = sub_253B059D0();
        uint64_t v145 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16);
        v145(__dsth, v349, v144);
        uint64_t v146 = v144;
        a3 = v364;
        v145((void *)(v16 + *(int *)(v142 + 24)), v17 + *(int *)(v142 + 24), v146);
        goto LABEL_85;
      case 0x2Au:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        uint64_t DecorationResult = type metadata accessor for QueryDecorationResult(0);
        uint64_t v148 = *(int *)(DecorationResult + 28);
        __dsta = (void *)(v16 + v148);
        uint64_t v337 = (void *)(v17 + v148);
        uint64_t v350 = DecorationResult;
        uint64_t v149 = sub_253B08270();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v337, 1, v149))
        {
          uint64_t v150 = sub_253462A5C(&qword_269CDBB30);
          memcpy(__dsta, v337, *(void *)(*(void *)(v150 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v149 - 8) + 16))(__dsta, v337, v149);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v149);
        }
        *(void *)(v16 + *(int *)(v350 + 32)) = *(void *)(v17 + *(int *)(v350 + 32));
        *(void *)(v16 + *(int *)(v350 + 36)) = *(void *)(v17 + *(int *)(v350 + 36));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      case 0x2Cu:
        uint64_t v151 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v151 - 8) + 16))(v16, v17, v151);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        uint64_t v153 = *(int *)(DecorationPrePlannerResult + 20);
        uint64_t v154 = (void *)(v16 + v153);
        uint64_t v155 = (void *)(v17 + v153);
        *uint64_t v154 = *v155;
        v154[1] = v155[1];
        uint64_t v156 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v157 = v16 + v156;
        uint64_t v158 = (uint64_t *)(v17 + v156);
        uint64_t v159 = *v158;
        LOBYTE(v158) = *((unsigned char *)v158 + 8);
        *(void *)uint64_t v157 = v159;
        *(unsigned char *)(v157 + 8) = (_BYTE)v158;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_85;
      default:
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v194 = v8[8];
  uint64_t v195 = (void *)(a1 + v194);
  uint64_t v196 = (void *)(a2 + v194);
  *uint64_t v195 = *v196;
  v195[1] = v196[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v197 = v8[9];
  uint64_t v198 = (void *)(a1 + v197);
  v199 = (void *)(a2 + v197);
  *uint64_t v198 = *v199;
  v198[1] = v199[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v200 = v8[10];
  uint64_t v201 = (void *)(a1 + v200);
  uint64_t v202 = (void *)(a2 + v200);
  *uint64_t v201 = *v202;
  v201[1] = v202[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v203 = v8[11];
  uint64_t v204 = (void *)(a1 + v203);
  uint64_t v205 = (void *)(a2 + v203);
  void *v204 = *v205;
  v204[1] = v205[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v206 = v8[12];
  uint64_t v207 = a1 + v206;
  uint64_t v208 = a2 + v206;
  uint64_t v209 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 24))(v207, v208, v209);
  uint64_t v210 = (int *)type metadata accessor for Timepoint();
  *(void *)(v207 + v210[5]) = *(void *)(v208 + v210[5]);
  *(void *)(v207 + v210[6]) = *(void *)(v208 + v210[6]);
  v7(v207 + v210[7], v208 + v210[7], v6);
  uint64_t v211 = v8[13];
  uint64_t v212 = (void *)(a1 + v211);
  uint64_t v213 = (void *)(a2 + v211);
  void *v212 = *v213;
  v212[1] = v213[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v214 = v8[14];
  uint64_t v215 = a1 + v214;
  uint64_t v216 = (uint64_t *)(a2 + v214);
  uint64_t v217 = *v216;
  *(unsigned char *)(v215 + 8) = *((unsigned char *)v216 + 8);
  *(void *)uint64_t v215 = v217;
  *(void *)(a1 + v8[15]) = *(void *)(a2 + v8[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v218 = *(int *)(a3 + 20);
  uint64_t v219 = (void *)(a1 + v218);
  uint64_t v220 = (void *)(a2 + v218);
  *uint64_t v219 = *v220;
  v219[1] = v220[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_253491A24(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for Session.Event(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v288 = a3;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2 + v9, 1, v6))
  {
    uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
  }
  uint64_t v13 = v8[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v17 = sub_253B05D70();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
      uint64_t v18 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v19 = (char *)v14 + v18;
      uint64_t v20 = (char *)v15 + v18;
      uint64_t v21 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21))
      {
        uint64_t v22 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
      }
      goto LABEL_77;
    case 1u:
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((unsigned char *)v14 + 16) = *((unsigned char *)v15 + 16);
      uint64_t v23 = type metadata accessor for TextQuery(0);
      uint64_t v24 = *(int *)(v23 + 24);
      uint64_t v25 = (char *)v14 + v24;
      uint64_t v26 = v7;
      uint64_t v27 = (char *)v15 + v24;
      uint64_t v28 = sub_253B059D0();
      int v29 = v27;
      uint64_t v7 = v26;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v29, v28);
      *(_OWORD *)((char *)v14 + *(int *)(v23 + 28)) = *(_OWORD *)((char *)v15 + *(int *)(v23 + 28));
      goto LABEL_77;
    case 3u:
      uint64_t v104 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v283 = (void (*)(char *, char *, uint64_t))v7;
      if (EnumCaseMultiPayload == 3)
      {
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
        {
          uint64_t v221 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v14, v15, *(void *)(*(void *)(v221 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v14, (uint64_t)v15, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
        }
        uint64_t v238 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v7((uint64_t)v14 + v238[5], (uint64_t)v15 + v238[5], v6);
        uint64_t v239 = v238[6];
        __dstc = (char *)v14 + v239;
        uint64_t v240 = (char *)v15 + v239;
        uint64_t v241 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v242 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v242 - 8) + 32))(__dstc, v240, v242);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dstc, v240, *(void *)(*(void *)(v241 - 8) + 64));
        }
        uint64_t v243 = v238[7];
        uint64_t v244 = (char *)v14 + v243;
        uint64_t v245 = (char *)v15 + v243;
        uint64_t v246 = sub_253B059D0();
        __dstd = *(void (**)(char *, char *, uint64_t))(*(void *)(v246 - 8) + 32);
        __dstd(v244, v245, v246);
        uint64_t v247 = v238[8];
        uint64_t v248 = (_OWORD *)((char *)v14 + v247);
        uint64_t v249 = (_OWORD *)((char *)v15 + v247);
        uint64_t v250 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
        }
        else
        {
          _OWORD *v248 = *v249;
          uint64_t v253 = type metadata accessor for RequestContent.TextContent(0);
          __dstd((char *)v248 + *(int *)(v253 + 20), (char *)v249 + *(int *)(v253 + 20), v246);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v14, v15, *(void *)(*(void *)(v104 - 8) + 64));
          goto LABEL_121;
        }
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        uint64_t v106 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v107 = (char *)v14 + v106;
        uint64_t v108 = (char *)v15 + v106;
        uint64_t v109 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v107, v108, v109);
      }
      swift_storeEnumTagMultiPayload();
LABEL_121:
      uint64_t v254 = (int *)type metadata accessor for Request(0);
      *((unsigned char *)v14 + v254[5]) = *((unsigned char *)v15 + v254[5]);
      uint64_t v255 = v254[6];
      uint64_t v256 = (char *)v14 + v255;
      uint64_t v257 = (char *)v15 + v255;
      uint64_t v258 = type metadata accessor for RequestPrescribedPlan(0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v257, 1, v258))
      {
        uint64_t v259 = sub_253462A5C(&qword_269CDBB20);
        memcpy(v256, v257, *(void *)(*(void *)(v259 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 6)
        {
          uint64_t v260 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 32))(v256, v257, v260);
          uint64_t v261 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
          uint64_t v262 = &v256[v261];
          uint64_t v263 = &v257[v261];
          *(void *)uint64_t v262 = *(void *)v263;
          v262[8] = v263[8];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v256, v257, *(void *)(*(void *)(v258 - 8) + 64));
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v256, 0, 1, v258);
      }
      uint64_t v264 = v254[7];
      uint64_t v265 = (char *)v14 + v264;
      uint64_t v266 = (char *)v15 + v264;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v264, 1, v6))
      {
        uint64_t v267 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v265, v266, *(void *)(*(void *)(v267 - 8) + 64));
      }
      else
      {
        v283(v265, v266, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v265, 0, 1, v6);
      }
      uint64_t v268 = v254[8];
      uint64_t v269 = (char *)v14 + v268;
      uint64_t v270 = (char *)v15 + v268;
      *(_OWORD *)uint64_t v269 = *(_OWORD *)v270;
      *((void *)v269 + 2) = *((void *)v270 + 2);
      goto LABEL_131;
    case 5u:
      uint64_t v30 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 32))(v14, v15, v30);
      uint64_t v31 = (int *)type metadata accessor for Action(0);
      *(_OWORD *)((char *)v14 + v31[5]) = *(_OWORD *)((char *)v15 + v31[5]);
      *((unsigned char *)v14 + v31[6]) = *((unsigned char *)v15 + v31[6]);
      *(void *)((char *)v14 + v31[7]) = *(void *)((char *)v15 + v31[7]);
      *(_OWORD *)((char *)v14 + v31[8]) = *(_OWORD *)((char *)v15 + v31[8]);
      uint64_t v32 = v31[9];
      uint64_t v33 = (_OWORD *)((char *)v14 + v32);
      uint64_t v34 = (_OWORD *)((char *)v15 + v32);
      long long v35 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v35;
      goto LABEL_77;
    case 6u:
      uint64_t v36 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v36))
      {
        uint64_t v37 = sub_253462A5C(&qword_269CDB460);
        memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v36 - 8) + 32))(v14, v15, v36);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v36);
      }
      uint64_t v148 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))((char *)v14 + *(int *)(v148 + 20), (char *)v15 + *(int *)(v148 + 20), v36);
      goto LABEL_77;
    case 7u:
      uint64_t v110 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v110 - 8) + 32))(v14, v15, v110);
      uint64_t v111 = (int *)type metadata accessor for ClientAction(0);
      *(_OWORD *)((char *)v14 + v111[5]) = *(_OWORD *)((char *)v15 + v111[5]);
      *(void *)((char *)v14 + v111[6]) = *(void *)((char *)v15 + v111[6]);
      *(_OWORD *)((char *)v14 + v111[7]) = *(_OWORD *)((char *)v15 + v111[7]);
      *(_OWORD *)((char *)v14 + v111[8]) = *(_OWORD *)((char *)v15 + v111[8]);
      *(void *)((char *)v14 + v111[9]) = *(void *)((char *)v15 + v111[9]);
      *(void *)((char *)v14 + v111[10]) = *(void *)((char *)v15 + v111[10]);
      goto LABEL_77;
    case 8u:
      uint64_t v38 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 32))(v14, v15, v38);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)((char *)v14 + *(int *)(Step + 20)) = *(void *)((char *)v15 + *(int *)(Step + 20));
      goto LABEL_77;
    case 9u:
      uint64_t v40 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 32))(v14, v15, v40);
      uint64_t v41 = type metadata accessor for VariableStep(0);
      *(void *)((char *)v14 + *(int *)(v41 + 20)) = *(void *)((char *)v15 + *(int *)(v41 + 20));
      goto LABEL_77;
    case 0xDu:
      uint64_t v282 = v7;
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v224 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v224 - 8) + 32))(v14, v15, v224);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v222 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v222)) {
            goto LABEL_99;
          }
          uint64_t v223 = type metadata accessor for PlannerError();
          goto LABEL_98;
        case 3u:
          uint64_t v222 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v222))
          {
            uint64_t v223 = type metadata accessor for ExecutorError();
LABEL_98:
            memcpy(v14, v15, *(void *)(*(void *)(v223 - 8) + 64));
          }
          else
          {
LABEL_99:
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v222 - 8) + 32))(v14, v15, v222);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v222);
          }
          break;
        default:
          uint64_t v112 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v112 - 8) + 32))(v14, v15, v112);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_101;
    case 0xFu:
      uint64_t v113 = sub_253B059F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v113 - 8) + 32))(v14, v15, v113);
      goto LABEL_77;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
      {
        uint64_t v114 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v14, v15, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
      }
      uint64_t v172 = v7;
      uint64_t v173 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      uint64_t v287 = v172;
      v172((uint64_t)v14 + v173[5], (uint64_t)v15 + v173[5], v6);
      uint64_t v174 = v173[6];
      uint64_t v175 = (char *)v14 + v174;
      uint64_t v176 = (char *)v15 + v174;
      uint64_t v177 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v178 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v178 - 8) + 32))(v175, v176, v178);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v175, v176, *(void *)(*(void *)(v177 - 8) + 64));
      }
      uint64_t v179 = v173[7];
      uint64_t v180 = (char *)v14 + v179;
      uint64_t v181 = (char *)v15 + v179;
      uint64_t v182 = sub_253B059D0();
      uint64_t v183 = v180;
      uint64_t v184 = *(void (**)(char *, char *, uint64_t))(*(void *)(v182 - 8) + 32);
      v184(v183, v181, v182);
      uint64_t v185 = v173[8];
      uint64_t v186 = (_OWORD *)((char *)v14 + v185);
      uint64_t v187 = (_OWORD *)((char *)v15 + v185);
      uint64_t v188 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
      }
      else
      {
        *uint64_t v186 = *v187;
        uint64_t v211 = type metadata accessor for RequestContent.TextContent(0);
        v184((char *)v186 + *(int *)(v211 + 20), (char *)v187 + *(int *)(v211 + 20), v182);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v68 = v288;
      uint64_t v7 = v287;
      goto LABEL_84;
    case 0x11u:
      uint64_t v282 = v7;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
      {
        uint64_t v42 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v14, v15, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
      }
      uint64_t v149 = (int *)type metadata accessor for ActionStepResult(0);
      *(_OWORD *)((char *)v14 + v149[5]) = *(_OWORD *)((char *)v15 + v149[5]);
      uint64_t v150 = v149[6];
      uint64_t v151 = (char *)v14 + v150;
      uint64_t v152 = (char *)v15 + v150;
      uint64_t v153 = sub_253B05AB0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 32))(v151, v152, v153);
      uint64_t v154 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v155 = &v151[v154];
      uint64_t v156 = &v152[v154];
      uint64_t v157 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v156, 1, v157))
      {
        uint64_t v158 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 32))(v155, v156, v157);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v155, 0, 1, v157);
      }
      *(_OWORD *)((char *)v14 + v149[7]) = *(_OWORD *)((char *)v15 + v149[7]);
      goto LABEL_101;
    case 0x12u:
      *uint64_t v14 = *v15;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v44 = *(int *)(StepResults + 20);
      uint64_t v45 = (char *)v14 + v44;
      uint64_t v46 = v7;
      uint64_t v47 = (char *)v15 + v44;
      uint64_t v48 = sub_253B059D0();
      uint64_t v49 = v47;
      uint64_t v7 = v46;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v45, v49, v48);
      v46((uint64_t)v14 + *(int *)(StepResults + 24), (uint64_t)v15 + *(int *)(StepResults + 24), v6);
      goto LABEL_77;
    case 0x13u:
      uint64_t v115 = sub_253B05CF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v115 - 8) + 32))(v14, v15, v115);
      goto LABEL_77;
    case 0x14u:
      uint64_t v116 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v116 - 8) + 32))(v14, v15, v116);
      uint64_t v117 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)((char *)v14 + v117[5]) = *(void *)((char *)v15 + v117[5]);
      *(void *)((char *)v14 + v117[6]) = *(void *)((char *)v15 + v117[6]);
      *(void *)((char *)v14 + v117[7]) = *(void *)((char *)v15 + v117[7]);
      *((unsigned char *)v14 + v117[8]) = *((unsigned char *)v15 + v117[8]);
      *((unsigned char *)v14 + v117[9]) = *((unsigned char *)v15 + v117[9]);
      *((unsigned char *)v14 + v117[10]) = *((unsigned char *)v15 + v117[10]);
      uint64_t v118 = v117[11];
      uint64_t v119 = (_OWORD *)((char *)v14 + v118);
      uint64_t v120 = (_OWORD *)((char *)v15 + v118);
      long long v121 = v120[1];
      *uint64_t v119 = *v120;
      v119[1] = v121;
      goto LABEL_77;
    case 0x1Eu:
      uint64_t v122 = sub_253B06720();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v122 - 8) + 32))(v14, v15, v122);
      goto LABEL_77;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
      {
        uint64_t v123 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v14, v15, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v14, (uint64_t)v15, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
      }
      __dst = (int *)type metadata accessor for StatementResult(0);
      uint64_t v189 = __dst[5];
      uint64_t v190 = (char *)v14 + v189;
      uint64_t v191 = (char *)v15 + v189;
      uint64_t v192 = sub_253B06850();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v192 - 8) + 32))(v190, v191, v192);
      uint64_t v193 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v194 = &v190[v193];
      uint64_t v195 = &v191[v193];
      uint64_t v196 = sub_253B06820();
      uint64_t v282 = v7;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v195, 1, v196))
      {
        uint64_t v197 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v194, v195, *(void *)(*(void *)(v197 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32))(v194, v195, v196);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v194, 0, 1, v196);
      }
      uint64_t v212 = __dst;
      uint64_t v213 = __dst[6];
      uint64_t v271 = (char *)v15 + v213;
      int v274 = (char *)v14 + v213;
      uint64_t v214 = sub_253B059D0();
      uint64_t v215 = *(void (**)(char *, char *, uint64_t))(*(void *)(v214 - 8) + 32);
      v215(v274, v271, v214);
      v215((char *)v14 + v212[7], (char *)v15 + v212[7], v214);
      v215((char *)v14 + v212[8], (char *)v15 + v212[8], v214);
      uint64_t v216 = __dst[9];
      uint64_t v217 = (_OWORD *)((char *)v14 + v216);
      uint64_t v218 = (_OWORD *)((char *)v15 + v216);
      long long v219 = v218[1];
      *uint64_t v217 = *v218;
      v217[1] = v219;
LABEL_101:
      swift_storeEnumTagMultiPayload();
      uint64_t v68 = v288;
      goto LABEL_102;
    case 0x20u:
      uint64_t v285 = v7;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      uint64_t v124 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v125 = *(int *)(v124 + 20);
      uint64_t v126 = (char *)v14 + v125;
      uint64_t v127 = (char *)v15 + v125;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v125, 1, v6))
      {
        uint64_t v128 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
        uint64_t v7 = v285;
      }
      else
      {
        v285((uint64_t)v126, (uint64_t)v127, v6);
        uint64_t v198 = (uint64_t)v126;
        uint64_t v7 = v285;
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v198, 0, 1, v6);
      }
      uint64_t v199 = *(int *)(v124 + 24);
      uint64_t v200 = (char *)v14 + v199;
      uint64_t v201 = (char *)v15 + v199;
      *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
      *((void *)v200 + 2) = *((void *)v201 + 2);
      goto LABEL_77;
    case 0x21u:
      uint64_t v283 = (void (*)(char *, char *, uint64_t))v7;
      *uint64_t v14 = *v15;
      uint64_t v50 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v51 = *(int *)(v50 + 20);
      uint64_t v52 = (char *)v14 + v51;
      uint64_t v53 = (char *)v15 + v51;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v51, 1, v6)) {
        goto LABEL_18;
      }
      goto LABEL_55;
    case 0x22u:
      uint64_t v55 = type metadata accessor for RequestContent(0);
      int v56 = swift_getEnumCaseMultiPayload();
      uint64_t v283 = (void (*)(char *, char *, uint64_t))v7;
      if (v56 == 3)
      {
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
        {
          uint64_t v220 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v14, v15, *(void *)(*(void *)(v220 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v14, (uint64_t)v15, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
        }
        uint64_t v225 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v7((uint64_t)v14 + v225[5], (uint64_t)v15 + v225[5], v6);
        uint64_t v226 = v225[6];
        __dsta = (char *)v14 + v226;
        uint64_t v227 = (char *)v15 + v226;
        uint64_t v228 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v229 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v229 - 8) + 32))(__dsta, v227, v229);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dsta, v227, *(void *)(*(void *)(v228 - 8) + 64));
        }
        uint64_t v230 = v225[7];
        uint64_t v231 = (char *)v14 + v230;
        long long v232 = (char *)v15 + v230;
        uint64_t v233 = sub_253B059D0();
        __dstb = *(void (**)(char *, char *, uint64_t))(*(void *)(v233 - 8) + 32);
        __dstb(v231, v232, v233);
        uint64_t v234 = v225[8];
        uint64_t v235 = (_OWORD *)((char *)v14 + v234);
        uint64_t v236 = (_OWORD *)((char *)v15 + v234);
        uint64_t v237 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v235, v236, *(void *)(*(void *)(v237 - 8) + 64));
        }
        else
        {
          *uint64_t v235 = *v236;
          uint64_t v251 = type metadata accessor for RequestContent.TextContent(0);
          __dstb((char *)v235 + *(int *)(v251 + 20), (char *)v236 + *(int *)(v251 + 20), v233);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (v56 != 1)
        {
          memcpy(v14, v15, *(void *)(*(void *)(v55 - 8) + 64));
          goto LABEL_117;
        }
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        uint64_t v57 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v58 = (char *)v14 + v57;
        uint64_t v59 = (char *)v15 + v57;
        uint64_t v60 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v58, v59, v60);
      }
      swift_storeEnumTagMultiPayload();
LABEL_117:
      uint64_t v50 = type metadata accessor for ExternalAgentRequest(0);
      uint64_t v252 = *(int *)(v50 + 20);
      uint64_t v52 = (char *)v14 + v252;
      uint64_t v53 = (char *)v15 + v252;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v252, 1, v6))
      {
LABEL_18:
        uint64_t v54 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
LABEL_55:
        v283(v52, v53, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v52, 0, 1, v6);
      }
      uint64_t v159 = *(int *)(v50 + 24);
      uint64_t v160 = (char *)v14 + v159;
      uint64_t v161 = (char *)v15 + v159;
      *(_OWORD *)uint64_t v160 = *(_OWORD *)v161;
      *((void *)v160 + 2) = *((void *)v161 + 2);
LABEL_131:
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v283;
LABEL_78:
      uint64_t v68 = v288;
LABEL_79:
      *(_OWORD *)(a1 + v8[8]) = *(_OWORD *)(a2 + v8[8]);
      *(_OWORD *)(a1 + v8[9]) = *(_OWORD *)(a2 + v8[9]);
      *(_OWORD *)(a1 + v8[10]) = *(_OWORD *)(a2 + v8[10]);
      *(_OWORD *)(a1 + v8[11]) = *(_OWORD *)(a2 + v8[11]);
      uint64_t v202 = v8[12];
      uint64_t v203 = a1 + v202;
      uint64_t v204 = a2 + v202;
      uint64_t v205 = sub_253B05550();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v205 - 8) + 32))(v203, v204, v205);
      uint64_t v206 = (int *)type metadata accessor for Timepoint();
      *(void *)(v203 + v206[5]) = *(void *)(v204 + v206[5]);
      *(void *)(v203 + v206[6]) = *(void *)(v204 + v206[6]);
      v7(v203 + v206[7], v204 + v206[7], v6);
      *(_OWORD *)(a1 + v8[13]) = *(_OWORD *)(a2 + v8[13]);
      uint64_t v207 = v8[14];
      uint64_t v208 = a1 + v207;
      uint64_t v209 = a2 + v207;
      *(void *)uint64_t v208 = *(void *)v209;
      *(unsigned char *)(v208 + 8) = *(unsigned char *)(v209 + 8);
      *(void *)(a1 + v8[15]) = *(void *)(a2 + v8[15]);
      *(_OWORD *)(a1 + *(int *)(v68 + 20)) = *(_OWORD *)(a2 + *(int *)(v68 + 20));
      return a1;
    case 0x23u:
      uint64_t v129 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v129 - 8) + 32))(v14, v15, v129);
      uint64_t v130 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v131 = *(int *)(v130 + 20);
      uint64_t v132 = (char *)v14 + v131;
      uint64_t v133 = v7;
      uint64_t v134 = (char *)v15 + v131;
      uint64_t v135 = sub_253B06850();
      uint64_t v136 = v134;
      uint64_t v7 = v133;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32))(v132, v136, v135);
      *(void *)((char *)v14 + *(int *)(v130 + 24)) = *(void *)((char *)v15 + *(int *)(v130 + 24));
      goto LABEL_77;
    case 0x25u:
      uint64_t v61 = sub_253B08B30();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v61 - 8) + 32))(v14, v15, v61);
      uint64_t v62 = type metadata accessor for ToolResolution(0);
      uint64_t v63 = *(int *)(v62 + 20);
      uint64_t v272 = (char *)v15 + v63;
      __dste = (char *)v14 + v63;
      uint64_t v64 = sub_253B059D0();
      uint64_t v65 = *(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 32);
      v65(__dste, v272, v64);
      uint64_t v66 = *(int *)(v62 + 24);
      unint64_t v67 = (char *)v15 + v66;
      uint64_t v68 = v288;
      v65((char *)v14 + v66, v67, v64);
      goto LABEL_84;
    case 0x26u:
      uint64_t v284 = (void (*)(char *, char *, uint64_t))v7;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      unint64_t v69 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v70 = v69[5];
      uint64_t v71 = (char *)v14 + v70;
      uint64_t v72 = (char *)v15 + v70;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v70, 1, v6))
      {
        uint64_t v73 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
      }
      else
      {
        v284(v71, v72, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v71, 0, 1, v6);
      }
      *((unsigned char *)v14 + v69[6]) = *((unsigned char *)v15 + v69[6]);
      uint64_t v162 = v69[7];
      uint64_t v163 = (char *)v14 + v162;
      uint64_t v164 = (char *)v15 + v162;
      uint64_t v165 = sub_253B059D0();
      uint64_t v166 = v164;
      uint64_t v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
      v167(v163, v166, v165);
      uint64_t v168 = v69[8];
      uint64_t v169 = (char *)v14 + v168;
      uint64_t v170 = (char *)v15 + v168;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v168, 1, v165))
      {
        uint64_t v171 = sub_253462A5C(&qword_269CDB460);
        memcpy(v169, v170, *(void *)(*(void *)(v171 - 8) + 64));
      }
      else
      {
        v167(v169, v170, v165);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v169, 0, 1, v165);
      }
      uint64_t v68 = v288;
      uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v284;
      swift_storeEnumTagMultiPayload();
      goto LABEL_79;
    case 0x27u:
      uint64_t v282 = v7;
      v7((uint64_t)v14, (uint64_t)v15, v6);
      uint64_t v74 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *((unsigned char *)v14 + v74[5]) = *((unsigned char *)v15 + v74[5]);
      uint64_t v75 = v74[6];
      uint64_t v76 = (char *)v14 + v75;
      uint64_t v77 = (char *)v15 + v75;
      uint64_t v78 = sub_253B059D0();
      uint64_t v79 = v77;
      uint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32);
      v80(v76, v79, v78);
      uint64_t v81 = v74[7];
      uint64_t v82 = (char *)v14 + v81;
      uint64_t v83 = (char *)v15 + v81;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15 + v81, 1, v78))
      {
        uint64_t v84 = sub_253462A5C(&qword_269CDB460);
        memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
      }
      else
      {
        v80(v82, v83, v78);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v82, 0, 1, v78);
      }
      uint64_t v68 = v288;
      swift_storeEnumTagMultiPayload();
LABEL_102:
      uint64_t v7 = v282;
      goto LABEL_79;
    case 0x28u:
      uint64_t v85 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v85 - 8) + 32))(v14, v15, v85);
      uint64_t v86 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v87 = *(int *)(v86 + 20);
      uint64_t v88 = (char *)v14 + v87;
      uint64_t v89 = v7;
      uint64_t v90 = (char *)v15 + v87;
      uint64_t v91 = sub_253B09150();
      uint64_t v92 = v90;
      uint64_t v7 = v89;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v88, v92, v91);
      uint64_t v93 = *(int *)(v86 + 24);
      uint64_t v94 = (char *)v14 + v93;
      uint64_t v95 = (char *)v15 + v93;
      uint64_t v96 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v94, v95, v96);
      goto LABEL_77;
    case 0x29u:
      uint64_t v97 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v97 - 8) + 32))(v14, v15, v97);
      uint64_t v98 = type metadata accessor for TypeConversionResult(0);
      uint64_t v99 = *(int *)(v98 + 20);
      uint64_t v273 = (char *)v15 + v99;
      __dstf = (char *)v14 + v99;
      uint64_t v100 = sub_253B059D0();
      uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32);
      v101(__dstf, v273, v100);
      uint64_t v102 = *(int *)(v98 + 24);
      uint64_t v103 = (char *)v15 + v102;
      uint64_t v68 = v288;
      v101((char *)v14 + v102, v103, v100);
LABEL_84:
      swift_storeEnumTagMultiPayload();
      goto LABEL_79;
    case 0x2Au:
      uint64_t v286 = v7;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      v14[2] = v15[2];
      uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v138 = DecorationResult[7];
      uint64_t v139 = (char *)v14 + v138;
      uint64_t v140 = (char *)v15 + v138;
      uint64_t v141 = sub_253B08270();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v140, 1, v141))
      {
        uint64_t v142 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v139, v140, *(void *)(*(void *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32))(v139, v140, v141);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v139, 0, 1, v141);
      }
      uint64_t v7 = v286;
      *(void *)((char *)v14 + DecorationResult[8]) = *(void *)((char *)v15 + DecorationResult[8]);
      *(void *)((char *)v14 + DecorationResult[9]) = *(void *)((char *)v15 + DecorationResult[9]);
      swift_storeEnumTagMultiPayload();
      uint64_t v68 = v288;
      goto LABEL_79;
    case 0x2Cu:
      uint64_t v143 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v143 - 8) + 32))(v14, v15, v143);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      *(_OWORD *)((char *)v14 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v15
                                                                                       + *(int *)(DecorationPrePlannerResult
                                                                                                + 20));
      uint64_t v145 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v146 = (char *)v14 + v145;
      uint64_t v147 = (char *)v15 + v145;
      v146[8] = v147[8];
      *(void *)uint64_t v146 = *(void *)v147;
LABEL_77:
      swift_storeEnumTagMultiPayload();
      goto LABEL_78;
    default:
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      goto LABEL_78;
  }
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for Session.Event(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  uint64_t v10 = v9[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  int v13 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v10, 1, v6);
  int v14 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v12, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v11, v12, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
LABEL_6:
    uint64_t v15 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v11, (uint64_t)v12, v6);
LABEL_7:
  if (a1 != a2)
  {
    uint64_t v318 = v8;
    uint64_t v16 = v9[7];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (void *)(a2 + v16);
    sub_253491A24(a1 + v16, (void (*)(void))type metadata accessor for Session.Event.Payload);
    uint64_t v19 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v20 = a3;
        uint64_t v21 = sub_253B05D70();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 32))(v17, v18, v21);
        uint64_t v22 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v23 = (char *)v17 + v22;
        uint64_t v24 = (char *)v18 + v22;
        uint64_t v25 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v24, 1, v25))
        {
          uint64_t v26 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v23, 0, 1, v25);
        }
        swift_storeEnumTagMultiPayload();
        a3 = v20;
        goto LABEL_135;
      case 1u:
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        *((unsigned char *)v17 + 16) = *((unsigned char *)v18 + 16);
        uint64_t v27 = type metadata accessor for TextQuery(0);
        uint64_t v28 = *(int *)(v27 + 24);
        int v29 = (char *)v17 + v28;
        uint64_t v30 = a3;
        uint64_t v31 = (char *)v18 + v28;
        uint64_t v32 = sub_253B059D0();
        uint64_t v33 = v31;
        a3 = v30;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v29, v33, v32);
        *(_OWORD *)((char *)v17 + *(int *)(v27 + 28)) = *(_OWORD *)((char *)v18 + *(int *)(v27 + 28));
        goto LABEL_134;
      case 3u:
        uint64_t v102 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v316 = a3;
        if (EnumCaseMultiPayload == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v6))
          {
            uint64_t v203 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v17, v18, *(void *)(*(void *)(v203 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v6);
          }
          uint64_t v219 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(v219 + 20), (char *)v18 + *(int *)(v219 + 20), v6);
          uint64_t v309 = v219;
          uint64_t v220 = *(int *)(v219 + 24);
          uint64_t v221 = (char *)v17 + v220;
          uint64_t v222 = (char *)v18 + v220;
          uint64_t v223 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v224 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v224 - 8) + 32))(v221, v222, v224);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
          }
          uint64_t v225 = *(int *)(v309 + 28);
          uint64_t v226 = (char *)v17 + v225;
          uint64_t v227 = (char *)v18 + v225;
          uint64_t v228 = sub_253B059D0();
          v296 = *(void (**)(char *, char *))(*(void *)(v228 - 8) + 32);
          uint64_t v298 = v228;
          v296(v226, v227);
          uint64_t v229 = *(int *)(v309 + 32);
          uint64_t v230 = (_OWORD *)((char *)v17 + v229);
          uint64_t v231 = (_OWORD *)((char *)v18 + v229);
          uint64_t v232 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v230, v231, *(void *)(*(void *)(v232 - 8) + 64));
          }
          else
          {
            *uint64_t v230 = *v231;
            uint64_t v239 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, uint64_t))v296)((char *)v230 + *(int *)(v239 + 20), (char *)v231 + *(int *)(v239 + 20), v298);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(v17, v18, *(void *)(*(void *)(v102 - 8) + 64));
            goto LABEL_124;
          }
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
          uint64_t v104 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v105 = (char *)v17 + v104;
          uint64_t v106 = (char *)v18 + v104;
          uint64_t v107 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 32))(v105, v106, v107);
        }
        swift_storeEnumTagMultiPayload();
LABEL_124:
        uint64_t v240 = (int *)type metadata accessor for Request(0);
        *((unsigned char *)v17 + v240[5]) = *((unsigned char *)v18 + v240[5]);
        uint64_t v241 = v240[6];
        uint64_t v242 = (char *)v17 + v241;
        uint64_t v243 = (char *)v18 + v241;
        uint64_t v310 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v243, 1, v310))
        {
          uint64_t v244 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
          a3 = v316;
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v245 = sub_253B059D0();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v245 - 8) + 32))(v242, v243, v245);
            uint64_t v246 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            uint64_t v247 = &v242[v246];
            uint64_t v248 = &v243[v246];
            *(void *)uint64_t v247 = *(void *)v248;
            v247[8] = v248[8];
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v242, v243, *(void *)(*(void *)(v310 - 8) + 64));
          }
          a3 = v316;
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v242, 0, 1, v310);
        }
        long long v311 = v240;
        uint64_t v249 = v240[7];
        uint64_t v250 = (char *)v17 + v249;
        uint64_t v251 = (char *)v18 + v249;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v249, 1, v6))
        {
          uint64_t v252 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v250, v251, *(void *)(*(void *)(v252 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v250, v251, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v250, 0, 1, v6);
        }
        uint64_t v253 = v311[8];
        uint64_t v254 = (char *)v17 + v253;
        uint64_t v255 = (char *)v18 + v253;
        *(_OWORD *)uint64_t v254 = *(_OWORD *)v255;
        *((void *)v254 + 2) = *((void *)v255 + 2);
LABEL_134:
        swift_storeEnumTagMultiPayload();
        goto LABEL_135;
      case 5u:
        uint64_t v34 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v34 - 8) + 32))(v17, v18, v34);
        long long v35 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)((char *)v17 + v35[5]) = *(_OWORD *)((char *)v18 + v35[5]);
        *((unsigned char *)v17 + v35[6]) = *((unsigned char *)v18 + v35[6]);
        *(void *)((char *)v17 + v35[7]) = *(void *)((char *)v18 + v35[7]);
        *(_OWORD *)((char *)v17 + v35[8]) = *(_OWORD *)((char *)v18 + v35[8]);
        uint64_t v36 = v35[9];
        uint64_t v37 = (_OWORD *)((char *)v17 + v36);
        uint64_t v38 = (_OWORD *)((char *)v18 + v36);
        long long v39 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v39;
        goto LABEL_134;
      case 6u:
        uint64_t v40 = a3;
        uint64_t v41 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v41))
        {
          uint64_t v42 = sub_253462A5C(&qword_269CDB460);
          memcpy(v17, v18, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v41 - 8) + 32))(v17, v18, v41);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v41);
        }
        uint64_t v146 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))((char *)v17 + *(int *)(v146 + 20), (char *)v18 + *(int *)(v146 + 20), v41);
        swift_storeEnumTagMultiPayload();
        a3 = v40;
        goto LABEL_135;
      case 7u:
        uint64_t v108 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v108 - 8) + 32))(v17, v18, v108);
        uint64_t v109 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)((char *)v17 + v109[5]) = *(_OWORD *)((char *)v18 + v109[5]);
        *(void *)((char *)v17 + v109[6]) = *(void *)((char *)v18 + v109[6]);
        *(_OWORD *)((char *)v17 + v109[7]) = *(_OWORD *)((char *)v18 + v109[7]);
        *(_OWORD *)((char *)v17 + v109[8]) = *(_OWORD *)((char *)v18 + v109[8]);
        *(void *)((char *)v17 + v109[9]) = *(void *)((char *)v18 + v109[9]);
        *(void *)((char *)v17 + v109[10]) = *(void *)((char *)v18 + v109[10]);
        goto LABEL_134;
      case 8u:
        uint64_t v43 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v43 - 8) + 32))(v17, v18, v43);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)((char *)v17 + *(int *)(Step + 20)) = *(void *)((char *)v18 + *(int *)(Step + 20));
        goto LABEL_134;
      case 9u:
        uint64_t v45 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 32))(v17, v18, v45);
        uint64_t v46 = type metadata accessor for VariableStep(0);
        *(void *)((char *)v17 + *(int *)(v46 + 20)) = *(void *)((char *)v18 + *(int *)(v46 + 20));
        goto LABEL_134;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v206 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v206 - 8) + 32))(v17, v18, v206);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v204 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v204))goto LABEL_101; {
            uint64_t v205 = type metadata accessor for PlannerError();
            }
            goto LABEL_100;
          case 3u:
            uint64_t v204 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v204))
            {
              uint64_t v205 = type metadata accessor for ExecutorError();
LABEL_100:
              memcpy(v17, v18, *(void *)(*(void *)(v205 - 8) + 64));
            }
            else
            {
LABEL_101:
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v204 - 8) + 32))(v17, v18, v204);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v204);
            }
            break;
          default:
            uint64_t v110 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v110 - 8) + 32))(v17, v18, v110);
            break;
        }
        uint64_t v8 = v318;
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xFu:
        uint64_t v111 = sub_253B059F0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v111 - 8) + 32))(v17, v18, v111);
        goto LABEL_134;
      case 0x10u:
        uint64_t v317 = a3;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v6))
        {
          uint64_t v112 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v17, v18, *(void *)(*(void *)(v112 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v6);
        }
        uint64_t v165 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + v165[5], (char *)v18 + v165[5], v6);
        uint64_t v166 = v165[6];
        uint64_t v167 = (char *)v17 + v166;
        uint64_t v168 = (char *)v18 + v166;
        uint64_t v169 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v170 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 32))(v167, v168, v170);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
        }
        uint64_t v171 = v165[7];
        uint64_t v172 = (char *)v17 + v171;
        uint64_t v173 = (char *)v18 + v171;
        uint64_t v174 = sub_253B059D0();
        uint64_t v175 = v173;
        uint64_t v176 = *(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 32);
        v176(v172, v175, v174);
        uint64_t v177 = v165[8];
        uint64_t v178 = (_OWORD *)((char *)v17 + v177);
        uint64_t v179 = (_OWORD *)((char *)v18 + v177);
        uint64_t v180 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v178, v179, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          *uint64_t v178 = *v179;
          uint64_t v193 = type metadata accessor for RequestContent.TextContent(0);
          v176((char *)v178 + *(int *)(v193 + 20), (char *)v179 + *(int *)(v193 + 20), v174);
          swift_storeEnumTagMultiPayload();
        }
        a3 = v317;
        uint64_t v8 = v318;
        goto LABEL_86;
      case 0x11u:
        uint64_t v312 = a3;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v6))
        {
          uint64_t v47 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v17, v18, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v6);
        }
        uint64_t v147 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)((char *)v17 + v147[5]) = *(_OWORD *)((char *)v18 + v147[5]);
        uint64_t v148 = v147[6];
        uint64_t v149 = (char *)v17 + v148;
        uint64_t v150 = (char *)v18 + v148;
        uint64_t v151 = sub_253B05AB0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32))(v149, v150, v151);
        uint64_t v152 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v153 = &v149[v152];
        uint64_t v154 = &v150[v152];
        uint64_t v155 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v154, 1, v155))
        {
          uint64_t v156 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 32))(v153, v154, v155);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v153, 0, 1, v155);
        }
        *(_OWORD *)((char *)v17 + v147[7]) = *(_OWORD *)((char *)v18 + v147[7]);
        goto LABEL_121;
      case 0x12u:
        *uint64_t v17 = *v18;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v49 = *(int *)(StepResults + 20);
        uint64_t v313 = a3;
        uint64_t v50 = (char *)v17 + v49;
        uint64_t v51 = (char *)v18 + v49;
        uint64_t v52 = sub_253B059D0();
        uint64_t v53 = v51;
        a3 = v313;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32))(v50, v53, v52);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(StepResults + 24), (char *)v18 + *(int *)(StepResults + 24), v6);
        goto LABEL_134;
      case 0x13u:
        uint64_t v113 = sub_253B05CF0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v113 - 8) + 32))(v17, v18, v113);
        goto LABEL_134;
      case 0x14u:
        uint64_t v114 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v114 - 8) + 32))(v17, v18, v114);
        uint64_t v115 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)((char *)v17 + v115[5]) = *(void *)((char *)v18 + v115[5]);
        *(void *)((char *)v17 + v115[6]) = *(void *)((char *)v18 + v115[6]);
        *(void *)((char *)v17 + v115[7]) = *(void *)((char *)v18 + v115[7]);
        *((unsigned char *)v17 + v115[8]) = *((unsigned char *)v18 + v115[8]);
        *((unsigned char *)v17 + v115[9]) = *((unsigned char *)v18 + v115[9]);
        *((unsigned char *)v17 + v115[10]) = *((unsigned char *)v18 + v115[10]);
        uint64_t v116 = v115[11];
        uint64_t v117 = (_OWORD *)((char *)v17 + v116);
        uint64_t v118 = (_OWORD *)((char *)v18 + v116);
        long long v119 = v118[1];
        *uint64_t v117 = *v118;
        v117[1] = v119;
        goto LABEL_134;
      case 0x1Eu:
        uint64_t v120 = sub_253B06720();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v120 - 8) + 32))(v17, v18, v120);
        goto LABEL_134;
      case 0x1Fu:
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v6))
        {
          uint64_t v121 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v17, v18, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v6);
        }
        uint64_t v307 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v181 = v307[5];
        uint64_t v182 = (char *)v17 + v181;
        uint64_t v183 = (char *)v18 + v181;
        uint64_t v184 = sub_253B06850();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32))(v182, v183, v184);
        uint64_t v185 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v186 = &v182[v185];
        uint64_t v187 = &v183[v185];
        uint64_t v188 = sub_253B06820();
        uint64_t v312 = a3;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v187, 1, v188))
        {
          uint64_t v189 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v186, v187, *(void *)(*(void *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v188 - 8) + 32))(v186, v187, v188);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v186, 0, 1, v188);
        }
        uint64_t v194 = v307;
        uint64_t v195 = v307[6];
        uint64_t v297 = (char *)v18 + v195;
        __dstd = (char *)v17 + v195;
        uint64_t v196 = sub_253B059D0();
        uint64_t v197 = *(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 32);
        v197(__dstd, v297, v196);
        v197((char *)v17 + v194[7], (char *)v18 + v194[7], v196);
        v197((char *)v17 + v194[8], (char *)v18 + v194[8], v196);
        uint64_t v198 = v307[9];
        uint64_t v199 = (_OWORD *)((char *)v17 + v198);
        uint64_t v200 = (_OWORD *)((char *)v18 + v198);
        long long v201 = v200[1];
        _OWORD *v199 = *v200;
        v199[1] = v201;
        goto LABEL_121;
      case 0x20u:
        uint64_t v312 = a3;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        uint64_t v122 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v123 = *(int *)(v122 + 20);
        uint64_t v124 = (char *)v17 + v123;
        uint64_t v125 = (char *)v18 + v123;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v123, 1, v6))
        {
          uint64_t v126 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v124, v125, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v124, v125, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v124, 0, 1, v6);
        }
        uint64_t v190 = *(int *)(v122 + 24);
        uint64_t v191 = (char *)v17 + v190;
        uint64_t v192 = (char *)v18 + v190;
        *(_OWORD *)uint64_t v191 = *(_OWORD *)v192;
        *((void *)v191 + 2) = *((void *)v192 + 2);
        goto LABEL_121;
      case 0x21u:
        uint64_t v312 = a3;
        *uint64_t v17 = *v18;
        uint64_t v54 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v55 = *(int *)(v54 + 20);
        int v56 = (char *)v17 + v55;
        uint64_t v57 = (char *)v18 + v55;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v55, 1, v6))goto LABEL_118; {
        goto LABEL_119;
        }
      case 0x22u:
        uint64_t v58 = type metadata accessor for RequestContent(0);
        int v59 = swift_getEnumCaseMultiPayload();
        uint64_t v312 = a3;
        if (v59 == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v6))
          {
            uint64_t v202 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v17, v18, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v6);
          }
          uint64_t v207 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v17 + *(int *)(v207 + 20), (char *)v18 + *(int *)(v207 + 20), v6);
          uint64_t v208 = *(int *)(v207 + 24);
          __dst = (char *)v17 + v208;
          uint64_t v308 = v207;
          uint64_t v209 = (char *)v18 + v208;
          uint64_t v210 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v211 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 32))(__dst, v209, v211);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dst, v209, *(void *)(*(void *)(v210 - 8) + 64));
          }
          uint64_t v212 = *(int *)(v308 + 28);
          uint64_t v213 = (char *)v17 + v212;
          uint64_t v214 = (char *)v18 + v212;
          __dsta = (void *)sub_253B059D0();
          uint64_t v295 = *(void (**)(char *, char *))(*(__dsta - 1) + 32);
          v295(v213, v214);
          uint64_t v215 = *(int *)(v308 + 32);
          uint64_t v216 = (_OWORD *)((char *)v17 + v215);
          uint64_t v217 = (_OWORD *)((char *)v18 + v215);
          uint64_t v218 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v216, v217, *(void *)(*(void *)(v218 - 8) + 64));
          }
          else
          {
            *uint64_t v216 = *v217;
            uint64_t v233 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, void *))v295)((char *)v216 + *(int *)(v233 + 20), (char *)v217 + *(int *)(v233 + 20), __dsta);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (v59 != 1)
          {
            memcpy(v17, v18, *(void *)(*(void *)(v58 - 8) + 64));
            goto LABEL_117;
          }
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
          uint64_t v60 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v61 = (char *)v17 + v60;
          uint64_t v62 = (char *)v18 + v60;
          uint64_t v63 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v61, v62, v63);
        }
        swift_storeEnumTagMultiPayload();
LABEL_117:
        uint64_t v54 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v234 = *(int *)(v54 + 20);
        int v56 = (char *)v17 + v234;
        uint64_t v57 = (char *)v18 + v234;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v234, 1, v6))
        {
LABEL_118:
          uint64_t v235 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v56, v57, *(void *)(*(void *)(v235 - 8) + 64));
        }
        else
        {
LABEL_119:
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v56, v57, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v56, 0, 1, v6);
        }
        uint64_t v236 = *(int *)(v54 + 24);
        uint64_t v237 = (char *)v17 + v236;
        uint64_t v238 = (char *)v18 + v236;
        *(_OWORD *)uint64_t v237 = *(_OWORD *)v238;
        *((void *)v237 + 2) = *((void *)v238 + 2);
LABEL_121:
        swift_storeEnumTagMultiPayload();
        a3 = v312;
LABEL_135:
        uint64_t v8 = v318;
        break;
      case 0x23u:
        uint64_t v127 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v127 - 8) + 32))(v17, v18, v127);
        uint64_t v128 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v129 = *(int *)(v128 + 20);
        uint64_t v130 = (char *)v17 + v129;
        uint64_t v131 = a3;
        uint64_t v132 = (char *)v18 + v129;
        uint64_t v133 = sub_253B06850();
        uint64_t v134 = v132;
        a3 = v131;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v133 - 8) + 32))(v130, v134, v133);
        *(void *)((char *)v17 + *(int *)(v128 + 24)) = *(void *)((char *)v18 + *(int *)(v128 + 24));
        goto LABEL_134;
      case 0x25u:
        uint64_t v64 = sub_253B08B30();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v64 - 8) + 32))(v17, v18, v64);
        uint64_t v65 = type metadata accessor for ToolResolution(0);
        uint64_t v66 = *(int *)(v65 + 20);
        __dstb = (char *)v18 + v66;
        uint64_t v304 = (char *)v17 + v66;
        uint64_t v67 = sub_253B059D0();
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32);
        v68(v304, __dstb, v67);
        v68((char *)v17 + *(int *)(v65 + 24), (char *)v18 + *(int *)(v65 + 24), v67);
        goto LABEL_134;
      case 0x26u:
        uint64_t v314 = a3;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        unint64_t v69 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v70 = v69[5];
        uint64_t v71 = (char *)v17 + v70;
        uint64_t v72 = (char *)v18 + v70;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v70, 1, v6))
        {
          uint64_t v73 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v71, v72, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v71, 0, 1, v6);
        }
        *((unsigned char *)v17 + v69[6]) = *((unsigned char *)v18 + v69[6]);
        uint64_t v157 = v69[7];
        uint64_t v158 = (char *)v17 + v157;
        uint64_t v159 = (char *)v18 + v157;
        uint64_t v160 = sub_253B059D0();
        uint64_t v306 = *(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 32);
        v306(v158, v159, v160);
        uint64_t v161 = v69[8];
        uint64_t v162 = (char *)v17 + v161;
        uint64_t v163 = (char *)v18 + v161;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v161, 1, v160))
        {
          uint64_t v164 = sub_253462A5C(&qword_269CDB460);
          memcpy(v162, v163, *(void *)(*(void *)(v164 - 8) + 64));
        }
        else
        {
          v306(v162, v163, v160);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v162, 0, 1, v160);
        }
        a3 = v314;
        uint64_t v8 = v318;
        goto LABEL_86;
      case 0x27u:
        uint64_t v315 = a3;
        (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v6);
        uint64_t v74 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *((unsigned char *)v17 + v74[5]) = *((unsigned char *)v18 + v74[5]);
        uint64_t v75 = v74[6];
        uint64_t v76 = (char *)v17 + v75;
        uint64_t v77 = (char *)v18 + v75;
        uint64_t v78 = sub_253B059D0();
        uint64_t v79 = v77;
        uint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 32);
        v80(v76, v79, v78);
        uint64_t v81 = v74[7];
        uint64_t v82 = (char *)v17 + v81;
        uint64_t v83 = (char *)v18 + v81;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18 + v81, 1, v78))
        {
          uint64_t v84 = sub_253462A5C(&qword_269CDB460);
          memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          v80(v82, v83, v78);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v82, 0, 1, v78);
        }
        a3 = v315;
        uint64_t v8 = v318;
LABEL_86:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x28u:
        uint64_t v85 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v85 - 8) + 32))(v17, v18, v85);
        uint64_t v86 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v87 = *(int *)(v86 + 20);
        uint64_t v88 = (char *)v17 + v87;
        uint64_t v89 = a3;
        uint64_t v90 = (char *)v18 + v87;
        uint64_t v91 = sub_253B09150();
        uint64_t v92 = v90;
        a3 = v89;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v88, v92, v91);
        uint64_t v93 = *(int *)(v86 + 24);
        uint64_t v94 = (char *)v17 + v93;
        uint64_t v95 = (char *)v18 + v93;
        uint64_t v96 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v94, v95, v96);
        goto LABEL_134;
      case 0x29u:
        uint64_t v97 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v97 - 8) + 32))(v17, v18, v97);
        uint64_t v98 = type metadata accessor for TypeConversionResult(0);
        uint64_t v99 = *(int *)(v98 + 20);
        __dstc = (char *)v18 + v99;
        uint64_t v305 = (char *)v17 + v99;
        uint64_t v100 = sub_253B059D0();
        uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32);
        v101(v305, __dstc, v100);
        v101((char *)v17 + *(int *)(v98 + 24), (char *)v18 + *(int *)(v98 + 24), v100);
        goto LABEL_134;
      case 0x2Au:
        uint64_t v312 = a3;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        void v17[2] = v18[2];
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v136 = DecorationResult[7];
        uint64_t v137 = (char *)v17 + v136;
        uint64_t v138 = (char *)v18 + v136;
        uint64_t v139 = sub_253B08270();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v138, 1, v139))
        {
          uint64_t v140 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v137, v138, *(void *)(*(void *)(v140 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v137, v138, v139);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v137, 0, 1, v139);
        }
        *(void *)((char *)v17 + DecorationResult[8]) = *(void *)((char *)v18 + DecorationResult[8]);
        *(void *)((char *)v17 + DecorationResult[9]) = *(void *)((char *)v18 + DecorationResult[9]);
        goto LABEL_121;
      case 0x2Cu:
        uint64_t v141 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v141 - 8) + 32))(v17, v18, v141);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)((char *)v17 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v18
                                                                                         + *(int *)(DecorationPrePlannerResult
                                                                                                  + 20));
        uint64_t v143 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v144 = (char *)v17 + v143;
        uint64_t v145 = (char *)v18 + v143;
        v144[8] = v145[8];
        *(void *)uint64_t v144 = *(void *)v145;
        goto LABEL_134;
      default:
        memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
        goto LABEL_135;
    }
  }
  uint64_t v256 = v9[8];
  uint64_t v257 = (void *)(a1 + v256);
  uint64_t v258 = (uint64_t *)(a2 + v256);
  uint64_t v260 = *v258;
  uint64_t v259 = v258[1];
  void *v257 = v260;
  v257[1] = v259;
  swift_bridgeObjectRelease();
  uint64_t v261 = v9[9];
  uint64_t v262 = (void *)(a1 + v261);
  uint64_t v263 = (uint64_t *)(a2 + v261);
  uint64_t v265 = *v263;
  uint64_t v264 = v263[1];
  *uint64_t v262 = v265;
  v262[1] = v264;
  swift_bridgeObjectRelease();
  uint64_t v266 = v9[10];
  uint64_t v267 = (void *)(a1 + v266);
  uint64_t v268 = (uint64_t *)(a2 + v266);
  uint64_t v270 = *v268;
  uint64_t v269 = v268[1];
  *uint64_t v267 = v270;
  v267[1] = v269;
  swift_bridgeObjectRelease();
  uint64_t v271 = v9[11];
  uint64_t v272 = (void *)(a1 + v271);
  uint64_t v273 = (uint64_t *)(a2 + v271);
  uint64_t v275 = *v273;
  uint64_t v274 = v273[1];
  *uint64_t v272 = v275;
  v272[1] = v274;
  swift_bridgeObjectRelease();
  uint64_t v276 = v9[12];
  uint64_t v277 = a1 + v276;
  uint64_t v278 = a2 + v276;
  uint64_t v279 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v279 - 8) + 40))(v277, v278, v279);
  uint64_t v280 = (int *)type metadata accessor for Timepoint();
  *(void *)(v277 + v280[5]) = *(void *)(v278 + v280[5]);
  *(void *)(v277 + v280[6]) = *(void *)(v278 + v280[6]);
  v8(v277 + v280[7], v278 + v280[7], v6);
  uint64_t v281 = v9[13];
  uint64_t v282 = (void *)(a1 + v281);
  uint64_t v283 = (uint64_t *)(a2 + v281);
  uint64_t v285 = *v283;
  uint64_t v284 = v283[1];
  *uint64_t v282 = v285;
  v282[1] = v284;
  swift_bridgeObjectRelease();
  uint64_t v286 = v9[14];
  uint64_t v287 = a1 + v286;
  uint64_t v288 = a2 + v286;
  *(void *)uint64_t v287 = *(void *)v288;
  *(unsigned char *)(v287 + 8) = *(unsigned char *)(v288 + 8);
  *(void *)(a1 + v9[15]) = *(void *)(a2 + v9[15]);
  swift_bridgeObjectRelease();
  uint64_t v289 = *(int *)(a3 + 20);
  uint64_t v290 = (void *)(a1 + v289);
  int v291 = (uint64_t *)(a2 + v289);
  uint64_t v293 = *v291;
  uint64_t v292 = v291[1];
  *uint64_t v290 = v293;
  v290[1] = v292;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534962C4);
}

uint64_t sub_2534962C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Session.Event(0);
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t _s14descr27033EE49O19InstrumentableEventVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253496368);
}

void sub_253496368(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Session.Event(0);
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t sub_2534963F4()
{
  uint64_t result = type metadata accessor for Session.Event(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *_s14descr27033EE49O19InstrumentableEventV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253496554);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14descr27033EE49O19InstrumentableEventV10CodingKeysOMa()
{
  return &_s14descr27033EE49O19InstrumentableEventV10CodingKeysON;
}

unint64_t sub_253496590()
{
  unint64_t result = qword_269CDBB38;
  if (!qword_269CDBB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB38);
  }
  return result;
}

unint64_t sub_2534965E0()
{
  unint64_t result = qword_26B241218;
  if (!qword_26B241218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B241218);
  }
  return result;
}

unint64_t sub_253496630()
{
  unint64_t result = qword_26B249F58;
  if (!qword_26B249F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F58);
  }
  return result;
}

uint64_t sub_25349667C()
{
  return sub_253B0A4C0();
}

uint64_t sub_253496698()
{
  return v0;
}

uint64_t PlannerInferenceRequest.promptRequest.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::PlannerInferenceRequest __swiftcall PlannerInferenceRequest.init(promptRequest:)(IntelligenceFlowPlannerSupport::PlannerInferenceRequest promptRequest)
{
  *uint64_t v1 = promptRequest;
  return promptRequest;
}

uint64_t sub_253496700(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x655274706D6F7270 && a2 == 0xED00007473657571)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534967AC()
{
  return 0x655274706D6F7270;
}

uint64_t sub_2534967D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253496700(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253496800(uint64_t a1)
{
  unint64_t v2 = sub_2534968B4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25349683C(uint64_t a1)
{
  unint64_t v2 = sub_2534968B4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PlannerInferenceRequest.encode(to:)()
{
}

unint64_t sub_2534968B4()
{
  unint64_t result = qword_269CDBB48;
  if (!qword_269CDBB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB48);
  }
  return result;
}

void PlannerInferenceRequest.init(from:)()
{
}

void sub_25349693C()
{
}

void sub_253496954()
{
}

uint64_t sub_25349696C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x655274706D6F7270 && a2 == 0xEE0065736E6F7073)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253496A18()
{
  return 0x655274706D6F7270;
}

uint64_t sub_253496A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25349696C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253496A6C(uint64_t a1)
{
  unint64_t v2 = sub_253496C20();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253496AA8(uint64_t a1)
{
  unint64_t v2 = sub_253496C20();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PlannerInferenceResponse.encode(to:)()
{
}

void sub_253496B20()
{
  sub_2534847F8();
  uint64_t v9 = v1;
  char v3 = v2;
  uint64_t v5 = sub_253462A5C(v4);
  sub_253465998();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_2534966B0();
  sub_253472068(v3, v3[3]);
  v9();
  sub_253B0A680();
  sub_253B0A3F0();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  sub_2534847C8();
}

unint64_t sub_253496C20()
{
  unint64_t result = qword_269CDBB60;
  if (!qword_269CDBB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB60);
  }
  return result;
}

void PlannerInferenceResponse.init(from:)()
{
}

void sub_253496CA8()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  char v4 = v3;
  int v13 = v5;
  sub_253462A5C(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253472068(v4, v4[3]);
  v2();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v8 = sub_253B0A320();
    uint64_t v10 = v9;
    uint64_t v11 = sub_2534988EC();
    v12(v11);
    *int v13 = v8;
    v13[1] = v10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  sub_2534847C8();
}

void sub_253496DD0()
{
}

void sub_253496DE8()
{
}

uint64_t ResponseGenerationInferenceRequest.init(responseGenerationInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2534972B8(a1, a2, (void (*)(void))type metadata accessor for ResponseGenerationInput);
}

uint64_t sub_253496E30(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000253B0BDD0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_253496EB8()
{
  return 0xD000000000000017;
}

uint64_t sub_253496ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253496E30(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253496F04(uint64_t a1)
{
  unint64_t v2 = sub_25349708C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253496F40(uint64_t a1)
{
  unint64_t v2 = sub_25349708C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResponseGenerationInferenceRequest.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDBB70);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_253472068(a1, a1[3]);
  sub_25349708C();
  sub_253498940();
  type metadata accessor for ResponseGenerationInput(0);
  sub_253497900(&qword_269CDBB80, (void (*)(uint64_t))type metadata accessor for ResponseGenerationInput);
  sub_2534988C4();
  uint64_t v3 = sub_253498870();
  return v4(v3);
}

unint64_t sub_25349708C()
{
  unint64_t result = qword_269CDBB78;
  if (!qword_269CDBB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBB78);
  }
  return result;
}

void ResponseGenerationInferenceRequest.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v14 = sub_253498904(v13);
  type metadata accessor for ResponseGenerationInput(v14);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534988A8(v16, v22);
  sub_253462A5C(&qword_269CDBB88);
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_25349888C();
  uint64_t v19 = type metadata accessor for ResponseGenerationInferenceRequest(v18);
  MEMORY[0x270FA5388](v19 - 8);
  sub_2534966B0();
  sub_253472068(v10, v10[3]);
  sub_25349708C();
  sub_25349892C();
  sub_253B0A660();
  if (!v11)
  {
    sub_253497900(&qword_269CDBB90, (void (*)(uint64_t))type metadata accessor for ResponseGenerationInput);
    sub_253B0A370();
    uint64_t v20 = sub_253498850();
    v21(v20);
    sub_2534972B8(a10, v12, (void (*)(void))type metadata accessor for ResponseGenerationInput);
    sub_2534972B8(v12, v23, (void (*)(void))type metadata accessor for ResponseGenerationInferenceRequest);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v10);
  sub_2534847C8();
}

uint64_t type metadata accessor for ResponseGenerationInferenceRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBBC0);
}

uint64_t sub_2534972B8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void sub_253497318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ResponseGenerationInferenceRequest.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

uint64_t sub_253497330(void *a1)
{
  return ResponseGenerationInferenceRequest.encode(to:)(a1);
}

uint64_t ResponseGenerationInferenceResponse.systemResponse.getter@<X0>(uint64_t a1@<X8>)
{
  sub_253B06720();
  sub_25346CAF4();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t ResponseGenerationInferenceResponse.init(systemResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_253B06720();
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  return v6(a2, a1, v4);
}

uint64_t sub_25349740C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65526D6574737973 && a2 == 0xEE0065736E6F7073)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534974B8()
{
  return 0x65526D6574737973;
}

uint64_t sub_2534974E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25349740C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25349750C(uint64_t a1)
{
  unint64_t v2 = sub_253497694();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253497548(uint64_t a1)
{
  unint64_t v2 = sub_253497694();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResponseGenerationInferenceResponse.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDBB98);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_253472068(a1, a1[3]);
  sub_253497694();
  sub_253498940();
  sub_253B06720();
  sub_253497900(&qword_269CDBBA8, MEMORY[0x263F4C6B8]);
  sub_2534988C4();
  uint64_t v3 = sub_253498870();
  return v4(v3);
}

unint64_t sub_253497694()
{
  unint64_t result = qword_269CDBBA0;
  if (!qword_269CDBBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBBA0);
  }
  return result;
}

void ResponseGenerationInferenceResponse.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  sub_253498904(v13);
  uint64_t v14 = sub_253B06720();
  sub_253465998();
  uint64_t v24 = v15;
  MEMORY[0x270FA5388](v16);
  sub_2534988A8(v17, v23);
  sub_253462A5C(&qword_269CDBBB0);
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = sub_25349888C();
  uint64_t v20 = type metadata accessor for ResponseGenerationInferenceResponse(v19);
  MEMORY[0x270FA5388](v20 - 8);
  sub_2534966B0();
  sub_253472068(v10, v10[3]);
  sub_253497694();
  sub_25349892C();
  sub_253B0A660();
  if (!v11)
  {
    sub_253497900(&qword_269CDBBB8, MEMORY[0x263F4C6B8]);
    sub_253B0A370();
    uint64_t v21 = sub_253498850();
    v22(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v12, a10, v14);
    sub_2534972B8(v12, v25, (void (*)(void))type metadata accessor for ResponseGenerationInferenceResponse);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v10);
  sub_2534847C8();
}

uint64_t type metadata accessor for ResponseGenerationInferenceResponse(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBBD0);
}

uint64_t sub_2534978CC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_253497900(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_253497948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ResponseGenerationInferenceResponse.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

uint64_t sub_253497960(void *a1)
{
  return ResponseGenerationInferenceResponse.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PlannerInferenceRequest()
{
  return &type metadata for PlannerInferenceRequest;
}

ValueMetadata *type metadata accessor for PlannerInferenceResponse()
{
  return &type metadata for PlannerInferenceResponse;
}

void *initializeBufferWithCopyOfBuffer for ResponseGenerationInferenceRequest(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ResponseGenerationInput(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(v4 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B05630();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *((unsigned char *)a1 + v6[6]) = *((unsigned char *)a2 + v6[6]);
    uint64_t v13 = v6[7];
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ResponseGenerationInferenceRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for ResponseGenerationInput(0) + 20);
  uint64_t v3 = sub_253B05630();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ResponseGenerationInferenceRequest(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  int v5 = (int *)type metadata accessor for ResponseGenerationInput(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B05630();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  *((unsigned char *)a1 + v5[6]) = *((unsigned char *)a2 + v5[6]);
  uint64_t v11 = v5[7];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ResponseGenerationInferenceRequest(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for ResponseGenerationInput(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_253B05630();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  *((unsigned char *)a1 + v4[6]) = *((unsigned char *)a2 + v4[6]);
  uint64_t v9 = v4[7];
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v4[8]) = *(void *)((char *)a2 + v4[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ResponseGenerationInferenceRequest(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = (int *)type metadata accessor for ResponseGenerationInput(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_253B05630();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  *((unsigned char *)a1 + v4[6]) = *((unsigned char *)a2 + v4[6]);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  *(void *)((char *)a1 + v4[8]) = *(void *)((char *)a2 + v4[8]);
  return a1;
}

void *assignWithTake for ResponseGenerationInferenceRequest(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for ResponseGenerationInput(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B05630();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *((unsigned char *)a1 + v5[6]) = *((unsigned char *)a2 + v5[6]);
  uint64_t v10 = v5[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationInferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253497F0C);
}

uint64_t sub_253497F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResponseGenerationInput(0);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationInferenceRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253497F68);
}

uint64_t sub_253497F68()
{
  type metadata accessor for ResponseGenerationInput(0);
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_253497FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2534982E8(a1, a2, a3, type metadata accessor for ResponseGenerationInput);
}

uint64_t initializeBufferWithCopyOfBuffer for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for ResponseGenerationInferenceResponse(uint64_t a1)
{
  uint64_t v2 = sub_253B06720();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253498234);
}

uint64_t sub_253498234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B06720();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResponseGenerationInferenceResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253498290);
}

uint64_t sub_253498290()
{
  sub_253B06720();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_2534982D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2534982E8(a1, a2, a3, MEMORY[0x263F4C6B8]);
}

uint64_t sub_2534982E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponseGenerationInferenceResponse.CodingKeys()
{
  return &type metadata for ResponseGenerationInferenceResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for ResponseGenerationInferenceRequest.CodingKeys()
{
  return &type metadata for ResponseGenerationInferenceRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for PlannerInferenceResponse.CodingKeys()
{
  return &type metadata for PlannerInferenceResponse.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport35ResponseGenerationInferenceResponseV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x253498448);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlannerInferenceRequest.CodingKeys()
{
  return &type metadata for PlannerInferenceRequest.CodingKeys;
}

unint64_t sub_253498484()
{
  unint64_t result = qword_269CDBBE0;
  if (!qword_269CDBBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBBE0);
  }
  return result;
}

unint64_t sub_2534984D4()
{
  unint64_t result = qword_269CDBBE8;
  if (!qword_269CDBBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBBE8);
  }
  return result;
}

unint64_t sub_253498524()
{
  unint64_t result = qword_269CDBBF0;
  if (!qword_269CDBBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBBF0);
  }
  return result;
}

unint64_t sub_253498574()
{
  unint64_t result = qword_269CDBBF8;
  if (!qword_269CDBBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBBF8);
  }
  return result;
}

unint64_t sub_2534985C4()
{
  unint64_t result = qword_269CDBC00;
  if (!qword_269CDBC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC00);
  }
  return result;
}

unint64_t sub_253498614()
{
  unint64_t result = qword_269CDBC08;
  if (!qword_269CDBC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC08);
  }
  return result;
}

unint64_t sub_253498664()
{
  unint64_t result = qword_269CDBC10;
  if (!qword_269CDBC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC10);
  }
  return result;
}

unint64_t sub_2534986B4()
{
  unint64_t result = qword_269CDBC18;
  if (!qword_269CDBC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC18);
  }
  return result;
}

unint64_t sub_253498704()
{
  unint64_t result = qword_269CDBC20;
  if (!qword_269CDBC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC20);
  }
  return result;
}

unint64_t sub_253498754()
{
  unint64_t result = qword_269CDBC28;
  if (!qword_269CDBC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC28);
  }
  return result;
}

unint64_t sub_2534987A4()
{
  unint64_t result = qword_269CDBC30;
  if (!qword_269CDBC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC30);
  }
  return result;
}

unint64_t sub_2534987F4()
{
  unint64_t result = qword_269CDBC38;
  if (!qword_269CDBC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC38);
  }
  return result;
}

uint64_t sub_253498850()
{
  return v0;
}

uint64_t sub_253498870()
{
  return v0;
}

uint64_t sub_25349888C()
{
  return 0;
}

void sub_2534988A8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 72) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_2534988C4()
{
  return sub_253B0A440();
}

uint64_t sub_2534988EC()
{
  return v0;
}

uint64_t sub_253498904@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return 0;
}

uint64_t sub_253498918()
{
  return v0;
}

uint64_t sub_253498940()
{
  return sub_253B0A680();
}

uint64_t PlannerSpanMatchServiceInput.query.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::PlannerSpanMatchServiceInput __swiftcall PlannerSpanMatchServiceInput.init(query:)(IntelligenceFlowPlannerSupport::PlannerSpanMatchServiceInput query)
{
  *uint64_t v1 = query;
  return query;
}

uint64_t sub_253498998(uint64_t a1)
{
  unint64_t v2 = sub_253498B10();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534989D4(uint64_t a1)
{
  unint64_t v2 = sub_253498B10();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PlannerSpanMatchServiceInput.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  uint64_t v24 = v23;
  uint64_t v25 = sub_253462A5C(&qword_269CDBC40);
  sub_253465998();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(v24, v24[3]);
  sub_253498B10();
  sub_253B0A680();
  sub_253B0A3F0();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v25);
  sub_2534847C8();
}

unint64_t sub_253498B10()
{
  unint64_t result = qword_269CDBC48;
  if (!qword_269CDBC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC48);
  }
  return result;
}

void PlannerSpanMatchServiceInput.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  unsigned int v4 = v3;
  sub_253462A5C(&qword_269CDBC50);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253472068(v2, v2[3]);
  sub_253498B10();
  sub_2534994B4();
  if (!v0)
  {
    uint64_t v6 = sub_253B0A320();
    uint64_t v8 = v7;
    uint64_t v9 = sub_2534847B0();
    v10(v9);
    *unsigned int v4 = v6;
    v4[1] = v8;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  sub_2534847C8();
}

void sub_253498C60()
{
}

#error "253498C84: call analysis failed (funcsize=6)"

uint64_t PlannerSpanMatchServiceOutput.matches.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlannerSpanMatchServiceOutput.init(matches:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_253498CA0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7365686374616DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253498D28()
{
  return 0x7365686374616DLL;
}

uint64_t sub_253498D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_253498CA0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_253498D70(uint64_t a1)
{
  unint64_t v2 = sub_253498F3C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_253498DAC(uint64_t a1)
{
  unint64_t v2 = sub_253498F3C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PlannerSpanMatchServiceOutput.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v25 = sub_253462A5C(&qword_269CDBC58);
  sub_253465998();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *v20;
  sub_253472068(v24, v24[3]);
  sub_253498F3C();
  sub_253B0A680();
  a10 = v31;
  sub_253462A5C(&qword_269CDB548);
  sub_2534990D8((unint64_t *)&qword_269CDBC68, &qword_269CDBC70);
  sub_253B0A440();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v25);
  sub_2534847C8();
}

unint64_t sub_253498F3C()
{
  unint64_t result = qword_269CDBC60;
  if (!qword_269CDBC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC60);
  }
  return result;
}

void PlannerSpanMatchServiceOutput.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_253462A5C(&qword_269CDBC78);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_253472068(v12, v12[3]);
  sub_253498F3C();
  sub_2534994B4();
  if (!v10)
  {
    sub_253462A5C(&qword_269CDB548);
    sub_2534990D8((unint64_t *)&qword_269CDBC80, &qword_269CDBC88);
    sub_253B0A370();
    uint64_t v16 = sub_2534847B0();
    v17(v16);
    *uint64_t v14 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  sub_2534847C8();
}

uint64_t sub_2534990D8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25347907C(&qword_269CDB548);
    sub_253499158(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253499158(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_253B07B60();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25349919C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PlannerSpanMatchServiceOutput.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

#error "2534991C0: call analysis failed (funcsize=6)"

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceInput()
{
  return &type metadata for PlannerSpanMatchServiceInput;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceOutput()
{
  return &type metadata for PlannerSpanMatchServiceOutput;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceOutput.CodingKeys()
{
  return &type metadata for PlannerSpanMatchServiceOutput.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport29PlannerSpanMatchServiceOutputV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25349929CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlannerSpanMatchServiceInput.CodingKeys()
{
  return &type metadata for PlannerSpanMatchServiceInput.CodingKeys;
}

unint64_t sub_2534992D8()
{
  unint64_t result = qword_269CDBC90;
  if (!qword_269CDBC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC90);
  }
  return result;
}

unint64_t sub_253499328()
{
  unint64_t result = qword_269CDBC98;
  if (!qword_269CDBC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC98);
  }
  return result;
}

unint64_t sub_253499378()
{
  unint64_t result = qword_269CDBCA0;
  if (!qword_269CDBCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCA0);
  }
  return result;
}

unint64_t sub_2534993C8()
{
  unint64_t result = qword_269CDBCA8;
  if (!qword_269CDBCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCA8);
  }
  return result;
}

unint64_t sub_253499418()
{
  unint64_t result = qword_269CDBCB0;
  if (!qword_269CDBCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCB0);
  }
  return result;
}

unint64_t sub_253499468()
{
  unint64_t result = qword_269CDBCB8;
  if (!qword_269CDBCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCB8);
  }
  return result;
}

uint64_t sub_2534994B4()
{
  return sub_253B0A660();
}

uint64_t Session.SessionEnded.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_253B055C0();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Session.SessionEnded.init(sessionId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253B055C0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t sub_2534995AC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_253499640()
{
  return 0x496E6F6973736573;
}

uint64_t sub_253499660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534995AC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25349968C(uint64_t a1)
{
  unint64_t v2 = sub_253499834();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534996C8(uint64_t a1)
{
  unint64_t v2 = sub_253499834();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Session.SessionEnded.encode(to:)(void *a1)
{
  uint64_t v2 = sub_253462A5C(&qword_26B24A3D0);
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253472068(a1, a1[3]);
  sub_253499834();
  sub_253B0A680();
  sub_253B055C0();
  sub_253499ACC(&qword_26B248CA0);
  sub_253B0A440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

unint64_t sub_253499834()
{
  unint64_t result = qword_26B249EC8;
  if (!qword_26B249EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249EC8);
  }
  return result;
}

uint64_t Session.SessionEnded.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_253B055C0();
  sub_253465998();
  uint64_t v20 = v5;
  MEMORY[0x270FA5388](v6);
  sub_25346CC44();
  uint64_t v23 = v8 - v7;
  uint64_t v9 = sub_253462A5C(&qword_269CDBCC0);
  sub_253465998();
  uint64_t v22 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Session.SessionEnded();
  MEMORY[0x270FA5388](v15 - 8);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  sub_253472068(a1, a1[3]);
  sub_253499834();
  sub_253B0A660();
  if (!v2)
  {
    sub_253499ACC(&qword_269CDBCC8);
    sub_253B0A370();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v14, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v18, v23, v4);
    sub_253499B10(v18, a2);
  }
  return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)a1);
}

uint64_t type metadata accessor for Session.SessionEnded()
{
  uint64_t result = qword_26B249EE0;
  if (!qword_26B249EE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_253499ACC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_253B055C0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_253499B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Session.SessionEnded();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_253499B74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Session.SessionEnded.init(from:)(a1, a2);
}

uint64_t sub_253499B8C(void *a1)
{
  return Session.SessionEnded.encode(to:)(a1);
}

uint64_t _s14descr27033EE49O12SessionEndedVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t _s14descr27033EE49O12SessionEndedVwxx(uint64_t a1)
{
  uint64_t v2 = sub_253B055C0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t _s14descr27033EE49O12SessionEndedVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s14descr27033EE49O12SessionEndedVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s14descr27033EE49O12SessionEndedVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s14descr27033EE49O12SessionEndedVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t _s14descr27033EE49O12SessionEndedVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253499E18);
}

uint64_t sub_253499E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v4);
}

uint64_t _s14descr27033EE49O12SessionEndedVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253499E74);
}

uint64_t sub_253499E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, a2, v4);
}

uint64_t sub_253499EC0()
{
  uint64_t result = sub_253B055C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *_s14descr27033EE49O12SessionEndedV10CodingKeysOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x253499FE8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s14descr27033EE49O12SessionEndedV10CodingKeysOMa()
{
  return &_s14descr27033EE49O12SessionEndedV10CodingKeysON;
}

unint64_t sub_25349A024()
{
  unint64_t result = qword_269CDBCD0;
  if (!qword_269CDBCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCD0);
  }
  return result;
}

unint64_t sub_25349A074()
{
  unint64_t result = qword_26B249ED8;
  if (!qword_26B249ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249ED8);
  }
  return result;
}

unint64_t sub_25349A0C4()
{
  unint64_t result = qword_26B249ED0;
  if (!qword_26B249ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249ED0);
  }
  return result;
}

uint64_t ToolExecutionSessionResolveInput.deferredValue.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25349AA10(MEMORY[0x263F803C0], a1);
}

uint64_t ToolExecutionSessionResolveInput.init(deferredValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25349AA90(a1, MEMORY[0x263F803C0], a2);
}

uint64_t sub_25349A140(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6465727265666564 && a2 == 0xED000065756C6156)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25349A1EC()
{
  return 0x6465727265666564;
}

uint64_t sub_25349A214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25349A140(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25349A240(uint64_t a1)
{
  unint64_t v2 = sub_25349A3FC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25349A27C(uint64_t a1)
{
  unint64_t v2 = sub_25349A3FC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ToolExecutionSessionResolveInput.encode(to:)(void *a1)
{
  uint64_t v2 = sub_253462A5C(&qword_269CDBCD8);
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_253472068(a1, a1[3]);
  sub_25349A3FC();
  sub_253B0A680();
  sub_253B09020();
  sub_25349A920(&qword_269CDBCE8, MEMORY[0x263F803C0]);
  sub_253B0A440();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
}

unint64_t sub_25349A3FC()
{
  unint64_t result = qword_269CDBCE0;
  if (!qword_269CDBCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBCE0);
  }
  return result;
}

void ToolExecutionSessionResolveInput.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v19 = v3;
  sub_253B09020();
  sub_253465998();
  v18[1] = v4;
  MEMORY[0x270FA5388](v5);
  sub_2534988A8(v6, v18[0]);
  sub_253462A5C(&qword_269CDBCF0);
  sub_253465998();
  uint64_t v20 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_25349888C();
  uint64_t v10 = type metadata accessor for ToolExecutionSessionResolveInput(v9);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25349C5C8();
  sub_25349A3FC();
  sub_25349C594();
  if (!v0)
  {
    sub_25349A920(&qword_269CDBCF8, MEMORY[0x263F803C0]);
    sub_25349C568();
    uint64_t v14 = sub_253498850();
    v15(v14);
    uint64_t v16 = sub_25349C548();
    v17(v16);
    sub_25349A968((uint64_t)v13, v19, (void (*)(void))type metadata accessor for ToolExecutionSessionResolveInput);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
  sub_2534847C8();
}

uint64_t type metadata accessor for ToolExecutionSessionResolveInput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBD48);
}

void sub_25349A600()
{
}

uint64_t sub_25349A618(void *a1)
{
  return ToolExecutionSessionResolveInput.encode(to:)(a1);
}

uint64_t ToolExecutionSessionResolveOutput.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25349AA10(MEMORY[0x263F80508], a1);
}

uint64_t ToolExecutionSessionResolveOutput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25349AA90(a1, MEMORY[0x263F80508], a2);
}

uint64_t sub_25349A664(uint64_t a1)
{
  unint64_t v2 = sub_25349A72C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25349A6A0(uint64_t a1)
{
  unint64_t v2 = sub_25349A72C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolExecutionSessionResolveOutput.encode(to:)()
{
}

unint64_t sub_25349A72C()
{
  unint64_t result = qword_269CDBD08;
  if (!qword_269CDBD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBD08);
  }
  return result;
}

void ToolExecutionSessionResolveOutput.init(from:)()
{
  sub_2534847F8();
  sub_25349C5FC(v2);
  sub_253465998();
  v17[1] = v3;
  MEMORY[0x270FA5388](v4);
  sub_2534988A8(v5, v17[0]);
  sub_253462A5C(&qword_269CDBD10);
  sub_253465998();
  v17[3] = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_25349888C();
  uint64_t v9 = type metadata accessor for ToolExecutionSessionResolveOutput(v8);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25349C5C8();
  sub_25349A72C();
  sub_25349C594();
  if (!v1)
  {
    sub_25349A920(&qword_269CDBAD0, MEMORY[0x263F80508]);
    sub_25349C568();
    uint64_t v13 = sub_253498850();
    v14(v13);
    uint64_t v15 = sub_25349C548();
    v16(v15);
    sub_25349A968((uint64_t)v12, v17[2], (void (*)(void))type metadata accessor for ToolExecutionSessionResolveOutput);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534847C8();
}

uint64_t type metadata accessor for ToolExecutionSessionResolveOutput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBD58);
}

uint64_t sub_25349A920(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25349A968(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

void sub_25349A9C8()
{
}

void sub_25349A9E0()
{
}

uint64_t ToolExecutionSessionHydrateInput.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25349AA10(MEMORY[0x263F80508], a1);
}

uint64_t sub_25349AA10@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  return v6(a2, v2, v4);
}

uint64_t ToolExecutionSessionHydrateInput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25349AA90(a1, MEMORY[0x263F80508], a2);
}

uint64_t sub_25349AA90@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  a2(0);
  sub_25346CAF4();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  return v7(a3, a1, v5);
}

uint64_t sub_25349AAF8()
{
  return 0x65756C6176;
}

uint64_t sub_25349AB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25349B060(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_25349AB38(uint64_t a1)
{
  unint64_t v2 = sub_25349AD58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25349AB74(uint64_t a1)
{
  unint64_t v2 = sub_25349AD58();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolExecutionSessionHydrateInput.encode(to:)()
{
}

void sub_25349AC00()
{
  sub_2534847F8();
  uint64_t v15 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v8 = sub_253462A5C(v7);
  sub_253465998();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(v6, v6[3]);
  v3();
  sub_253B0A680();
  sub_253B09120();
  sub_25349A920(&qword_269CDBAB8, MEMORY[0x263F80508]);
  v15(v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  sub_2534847C8();
}

unint64_t sub_25349AD58()
{
  unint64_t result = qword_269CDBD20;
  if (!qword_269CDBD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBD20);
  }
  return result;
}

void ToolExecutionSessionHydrateInput.init(from:)()
{
  sub_2534847F8();
  sub_25349C5FC(v2);
  sub_253465998();
  v17[1] = v3;
  MEMORY[0x270FA5388](v4);
  sub_2534988A8(v5, v17[0]);
  sub_253462A5C(&qword_269CDBD28);
  sub_253465998();
  v17[3] = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_25349888C();
  uint64_t v9 = type metadata accessor for ToolExecutionSessionHydrateInput(v8);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25349C5C8();
  sub_25349AD58();
  sub_25349C594();
  if (!v1)
  {
    sub_25349A920(&qword_269CDBAD0, MEMORY[0x263F80508]);
    sub_25349C568();
    uint64_t v13 = sub_253498850();
    v14(v13);
    uint64_t v15 = sub_25349C548();
    v16(v15);
    sub_25349A968((uint64_t)v12, v17[2], (void (*)(void))type metadata accessor for ToolExecutionSessionHydrateInput);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534847C8();
}

uint64_t type metadata accessor for ToolExecutionSessionHydrateInput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBD68);
}

void sub_25349AF4C()
{
}

void sub_25349AF64()
{
}

uint64_t ToolExecutionSessionHydrateOutput.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25349AF88(v1, a1);
}

uint64_t sub_25349AF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDB3F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ToolExecutionSessionHydrateOutput.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25349AFF8(a1, a2);
}

uint64_t sub_25349AFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDB3F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25349B060(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25349B0E0(uint64_t a1)
{
  unint64_t v2 = sub_25349B1A8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25349B11C(uint64_t a1)
{
  unint64_t v2 = sub_25349B1A8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolExecutionSessionHydrateOutput.encode(to:)()
{
}

unint64_t sub_25349B1A8()
{
  unint64_t result = qword_269CDBD38;
  if (!qword_269CDBD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBD38);
  }
  return result;
}

void ToolExecutionSessionHydrateOutput.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v20 = v3;
  uint64_t v4 = sub_253462A5C(&qword_269CDB3F8);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_253462A5C(&qword_269CDBD40);
  sub_253465998();
  uint64_t v21 = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC44();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for ToolExecutionSessionHydrateOutput(0);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(v2, v2[3]);
  sub_25349B1A8();
  sub_253B0A660();
  if (!v0)
  {
    sub_253B09120();
    sub_25349A920(&qword_269CDBAD0, MEMORY[0x263F80508]);
    sub_253B0A310();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v14, v9);
    sub_25349AFF8(v8, (uint64_t)v18);
    sub_25349A968((uint64_t)v18, v20, (void (*)(void))type metadata accessor for ToolExecutionSessionHydrateOutput);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  sub_2534847C8();
}

uint64_t type metadata accessor for ToolExecutionSessionHydrateOutput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDBD78);
}

void sub_25349B41C()
{
}

void sub_25349B434()
{
}

uint64_t initializeBufferWithCopyOfBuffer for ToolExecutionSessionResolveInput()
{
  return sub_25349B6EC();
}

uint64_t destroy for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2)
{
  return sub_25349B748(a1, a2, MEMORY[0x263F803C0]);
}

uint64_t initializeWithCopy for ToolExecutionSessionResolveInput()
{
  return sub_25349B7A8();
}

uint64_t assignWithCopy for ToolExecutionSessionResolveInput()
{
  return sub_25349B7F4();
}

uint64_t initializeWithTake for ToolExecutionSessionResolveInput()
{
  return sub_25349B840();
}

uint64_t assignWithTake for ToolExecutionSessionResolveInput()
{
  return sub_25349B88C();
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25349B4F0);
}

uint64_t sub_25349B4F0()
{
  sub_253B09020();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionResolveInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25349B544);
}

uint64_t sub_25349B544()
{
  sub_253B09020();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_25349B584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25349BF78(a1, a2, a3, MEMORY[0x263F803C0]);
}

uint64_t initializeBufferWithCopyOfBuffer for ToolExecutionSessionResolveOutput()
{
  return sub_25349B6EC();
}

uint64_t destroy for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2)
{
  return sub_25349B748(a1, a2, MEMORY[0x263F80508]);
}

uint64_t initializeWithCopy for ToolExecutionSessionResolveOutput()
{
  return sub_25349B7A8();
}

uint64_t assignWithCopy for ToolExecutionSessionResolveOutput()
{
  return sub_25349B7F4();
}

uint64_t initializeWithTake for ToolExecutionSessionResolveOutput()
{
  return sub_25349B840();
}

uint64_t assignWithTake for ToolExecutionSessionResolveOutput()
{
  return sub_25349B88C();
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25349B640);
}

uint64_t sub_25349B640()
{
  sub_253B09120();
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionResolveOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25349B694);
}

uint64_t sub_25349B694()
{
  sub_253B09120();
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_25349B6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25349BF78(a1, a2, a3, MEMORY[0x263F80508]);
}

uint64_t sub_25349B6EC()
{
  uint64_t v2 = sub_25349C534();
  v3(v2);
  sub_25346CAF4();
  uint64_t v6 = *v5;
  return v6(v1, v0, v4);
}

uint64_t sub_25349B748(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  return v6(a1, v4);
}

uint64_t sub_25349B7A8()
{
  uint64_t v1 = sub_25349C534();
  v2(v1);
  sub_25346CAF4();
  uint64_t v3 = sub_25349C5B8();
  v4(v3);
  return v0;
}

uint64_t sub_25349B7F4()
{
  uint64_t v1 = sub_25349C534();
  v2(v1);
  sub_25346CAF4();
  uint64_t v3 = sub_25349C5B8();
  v4(v3);
  return v0;
}

uint64_t sub_25349B840()
{
  uint64_t v1 = sub_25349C534();
  v2(v1);
  sub_25346CAF4();
  uint64_t v3 = sub_25349C5B8();
  v4(v3);
  return v0;
}

uint64_t sub_25349B88C()
{
  uint64_t v1 = sub_25349C534();
  v2(v1);
  sub_25346CAF4();
  uint64_t v3 = sub_25349C5B8();
  v4(v3);
  return v0;
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionHydrateInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25349C52C);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionHydrateInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25349C528);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolExecutionSessionHydrateOutput(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_253462A5C(&qword_269CDB3F8) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_253B09120();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ToolExecutionSessionHydrateOutput(uint64_t a1)
{
  uint64_t v2 = sub_253B09120();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B09120();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_253462A5C(&qword_269CDB3F8);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B09120();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_253462A5C(&qword_269CDB3F8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B09120();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4))
  {
    uint64_t v5 = sub_253462A5C(&qword_269CDB3F8);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ToolExecutionSessionHydrateOutput(void *a1, const void *a2)
{
  uint64_t v4 = sub_253B09120();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v4);
  int v6 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_253462A5C(&qword_269CDB3F8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolExecutionSessionHydrateOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25349BEC4);
}

uint64_t sub_25349BEC4()
{
  sub_253462A5C(&qword_269CDB3F8);
  uint64_t v0 = sub_25349C5EC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolExecutionSessionHydrateOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25349BF1C);
}

uint64_t sub_25349BF1C()
{
  sub_253462A5C(&qword_269CDB3F8);
  uint64_t v0 = sub_253498918();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_25349BF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25349BF78(a1, a2, a3, (uint64_t (*)(uint64_t))sub_25349C008);
}

uint64_t sub_25349BF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_25349C008()
{
  if (!qword_269CDBD88)
  {
    sub_253B09120();
    unint64_t v0 = sub_253B09E00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269CDBD88);
    }
  }
}

ValueMetadata *type metadata accessor for ToolExecutionSessionHydrateOutput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionHydrateOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionHydrateInput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionHydrateInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionResolveOutput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionResolveOutput.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport33ToolExecutionSessionHydrateOutputV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25349C130);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolExecutionSessionResolveInput.CodingKeys()
{
  return &type metadata for ToolExecutionSessionResolveInput.CodingKeys;
}

unint64_t sub_25349C16C()
{
  unint64_t result = qword_269CDBD90;
  if (!qword_269CDBD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBD90);
  }
  return result;
}

unint64_t sub_25349C1BC()
{
  unint64_t result = qword_269CDBD98;
  if (!qword_269CDBD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBD98);
  }
  return result;
}

unint64_t sub_25349C20C()
{
  unint64_t result = qword_269CDBDA0;
  if (!qword_269CDBDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDA0);
  }
  return result;
}

unint64_t sub_25349C25C()
{
  unint64_t result = qword_269CDBDA8;
  if (!qword_269CDBDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDA8);
  }
  return result;
}

unint64_t sub_25349C2AC()
{
  unint64_t result = qword_269CDBDB0;
  if (!qword_269CDBDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDB0);
  }
  return result;
}

unint64_t sub_25349C2FC()
{
  unint64_t result = qword_269CDBDB8;
  if (!qword_269CDBDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDB8);
  }
  return result;
}

unint64_t sub_25349C34C()
{
  unint64_t result = qword_269CDBDC0;
  if (!qword_269CDBDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDC0);
  }
  return result;
}

unint64_t sub_25349C39C()
{
  unint64_t result = qword_269CDBDC8;
  if (!qword_269CDBDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDC8);
  }
  return result;
}

unint64_t sub_25349C3EC()
{
  unint64_t result = qword_269CDBDD0;
  if (!qword_269CDBDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDD0);
  }
  return result;
}

unint64_t sub_25349C43C()
{
  unint64_t result = qword_269CDBDD8;
  if (!qword_269CDBDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDD8);
  }
  return result;
}

unint64_t sub_25349C48C()
{
  unint64_t result = qword_269CDBDE0;
  if (!qword_269CDBDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDE0);
  }
  return result;
}

unint64_t sub_25349C4DC()
{
  unint64_t result = qword_269CDBDE8;
  if (!qword_269CDBDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBDE8);
  }
  return result;
}

uint64_t sub_25349C534()
{
  return 0;
}

uint64_t sub_25349C548()
{
  return v0;
}

uint64_t sub_25349C568()
{
  return sub_253B0A370();
}

uint64_t sub_25349C594()
{
  return sub_253B0A660();
}

uint64_t sub_25349C5B8()
{
  return v0;
}

void *sub_25349C5C8()
{
  return sub_253472068(v0, v0[3]);
}

uint64_t sub_25349C5EC()
{
  return v0;
}

uint64_t sub_25349C5FC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B09120();
}

uint64_t dispatch thunk of EventSending.publisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventSending.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of EventSending.sendAsync(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + **(int **)(a3 + 24));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25348673C;
  return v9(a1, a2, a3);
}

uint64_t ODPEventPayload.description.getter()
{
  type metadata accessor for ODPEventPayload(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v1);
  sub_25346CC44();
  uint64_t v4 = v3 - v2;
  sub_25349CCA4(v0, v3 - v2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0xD000000000000012;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0x736F706D6F636544;
    case 2:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0x6F6365446B736154;
    case 3:
    case 15:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0xD000000000000013;
    case 4:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0x6576656972746552;
    case 5:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0xD000000000000016;
    case 7:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      goto LABEL_24;
    case 8:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0xD000000000000015;
    case 9:
      swift_bridgeObjectRelease();
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4 + 16);
      return 0xD000000000000016;
    case 10:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4);
      return 0x656E65476E616C50;
    case 11:
    case 18:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4);
      goto LABEL_24;
    case 12:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4);
      return 0x5065747563657845;
    case 13:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4);
      return 0x636578456E616C50;
    case 14:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0xD000000000000011;
    case 16:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for Session.Event);
      return 0x697263736E617254;
    case 17:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      return 0x64656C696146;
    case 19:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v4);
      return 0xD000000000000022;
    case 20:
      return result;
    case 21:
      return 0x65746172656E6547;
    case 22:
      return 0x74616C756D726F46;
    case 23:
      return 0xD000000000000014;
    case 24:
      return 0x6E616C706552;
    case 25:
LABEL_24:
      uint64_t result = 0xD000000000000010;
      break;
    case 26:
      uint64_t result = 0x706D6F436B736154;
      break;
    default:
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for ODPEventPayload);
      uint64_t result = 0xD000000000000014;
      break;
  }
  return result;
}

uint64_t type metadata accessor for ODPEventPayload(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249088);
}

uint64_t sub_25349CCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ODPEventPayload(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25349CD08(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_25346CAF4();
  uint64_t v3 = sub_25346CBCC();
  v4(v3);
  return a1;
}

uint64_t ODPEventPayload.debugDescription.getter()
{
  type metadata accessor for Session.Event(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v1);
  sub_25346CC44();
  uint64_t v4 = v3 - v2;
  type metadata accessor for ODPEventPayload(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  sub_25349CCA4(v0, v7 - v6);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = 0x7265755172657355;
      unint64_t v10 = 0xEB00000000203A79;
      goto LABEL_14;
    case 2u:
      uint64_t v13 = *(void *)v8;
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534ACF64(0xD000000000000011);
      MEMORY[0x25A268AE0](v13, MEMORY[0x263F8D310]);
      swift_bridgeObjectRelease();
      sub_253B09860();
      goto LABEL_19;
    case 3u:
    case 6u:
      uint64_t v9 = 0x3D726F727245;
      unint64_t v10 = 0xE600000000000000;
      goto LABEL_14;
    case 4u:
      uint64_t v14 = *(void *)v8;
      sub_2534ACFBC();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      sub_2534ACF64(v15);
      MEMORY[0x25A268A80](v14, MEMORY[0x263F8D310]);
      sub_253B09860();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 5u:
      uint64_t v17 = *(void *)v8;
      uint64_t v16 = *(void *)(v8 + 8);
      uint64_t v18 = *(void *)(v8 + 16);
      sub_2534ACF2C();
      sub_253B0A000();
      sub_253B09860();
      MEMORY[0x25A268A80](v17, MEMORY[0x263F8D310]);
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      sub_253B09860();
      uint64_t v19 = sub_253462A5C(&qword_269CDBDF8);
      MEMORY[0x25A268A80](v16, v19);
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2534ACFDC();
      sub_253B09860();
      MEMORY[0x25A268A80](v18, v19);
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253B09860();
      return sub_2534ACF74();
    case 7u:
      uint64_t v9 = 0x2D2074706D6F7250;
      unint64_t v10 = 0xE900000000000020;
      goto LABEL_14;
    case 8u:
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      uint64_t v12 = v20 + 15;
      goto LABEL_18;
    case 9u:
      sub_25349D48C((long long *)(v8 + 16), &v33);
      sub_253B0A000();
      sub_2534ACF20();
      sub_253B09860();
      sub_253B09780();
      swift_bridgeObjectRelease();
      sub_253B09860();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    case 0xAu:
    case 0xCu:
      sub_2534ACF3C();
      sub_253B0A000();
      sub_2534ACF20();
      goto LABEL_22;
    case 0xBu:
    case 0xDu:
      sub_2534ACF80();
      sub_2534ACFDC();
      goto LABEL_22;
    case 0xEu:
      uint64_t v9 = 0x203A726F727245;
      unint64_t v10 = 0xE700000000000000;
LABEL_14:
      *(void *)&long long v33 = v9;
      *((void *)&v33 + 1) = v10;
      sub_253B09860();
      goto LABEL_19;
    case 0xFu:
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      uint64_t v12 = v21 + 13;
      goto LABEL_18;
    case 0x10u:
      sub_2534872D8(v8, v4);
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534ACF64(0xD000000000000011);
      Session.Event.Payload.description.getter(v22, v23, v24, v25, v26, v27, v28, v29, v31, v32, v33, *((uint64_t *)&v33 + 1), v34, v35, v36, v37, v38, v39, v40,
        v41);
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      sub_25349CD08(v4, (void (*)(void))type metadata accessor for Session.Event);
      return sub_2534ACF74();
    case 0x11u:
      sub_2534ACFBC();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      goto LABEL_18;
    case 0x12u:
      sub_2534ACF3C();
      sub_253B0A000();
LABEL_22:
      sub_253B09860();
      sub_253462A5C(&qword_269CDBDF8);
      sub_253B0A170();
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v33);
      return sub_2534ACF74();
    case 0x13u:
      _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v8);
      sub_2534ACF20();
      return sub_2534ACF74();
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x18u:
    case 0x19u:
      return sub_2534ACF74();
    case 0x17u:
    case 0x1Au:
      sub_2534ACF20();
      return sub_2534ACF74();
    default:
      sub_2534ACF2C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534ACF20();
      uint64_t v12 = v11 + 14;
LABEL_18:
      sub_2534ACF64(v12);
      sub_253B09860();
LABEL_19:
      swift_bridgeObjectRelease();
      return sub_2534ACF74();
  }
}

_OWORD *sub_25349D48C(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t ODPEvent.payload.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25349CCA4(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, a1);
}

uint64_t ODPEvent.timestamp.getter()
{
  sub_253B05550();
  sub_25346CAF4();
  uint64_t v0 = sub_2534ACF74();
  return v1(v0);
}

uint64_t ODPEvent.machAbsoluteTime.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_machAbsoluteTime);
}

unint64_t ODPEvent.description.getter()
{
  return sub_25349D5E8(30, 0x20726F6620, 0xE500000000000000, (void (*)(uint64_t))ODPEventPayload.description.getter);
}

unint64_t sub_25349D564()
{
  unint64_t result = qword_26B248C98;
  if (!qword_26B248C98)
  {
    sub_253B05550();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248C98);
  }
  return result;
}

unint64_t ODPEvent.debugDescription.getter()
{
  return sub_25349D5E8(41, 0xD000000000000010, 0x8000000253B0C270, (void (*)(uint64_t))ODPEventPayload.debugDescription.getter);
}

unint64_t sub_25349D5E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  sub_253B0A000();
  swift_bridgeObjectRelease();
  sub_253B05550();
  sub_25349D564();
  sub_253B0A480();
  sub_253B09860();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_253B09860();
  a4(v5);
  sub_253B09860();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t ODPEvent.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  ODPEvent.init(_:)(a1);
  return v2;
}

uint64_t ODPEvent.init(_:)(uint64_t a1)
{
  uint64_t v3 = sub_253B05550();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  sub_25346CC44();
  uint64_t v7 = v6 - v5;
  sub_25349CCA4(a1, v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload);
  sub_253B05520();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_timestamp, v7, v3);
  uint64_t v8 = mach_absolute_time();
  sub_25349CD08(a1, (void (*)(void))type metadata accessor for ODPEventPayload);
  *(void *)(v1 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_machAbsoluteTime) = v8;
  return v1;
}

uint64_t ODPEvent.deinit()
{
  sub_25349CD08(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, (void (*)(void))type metadata accessor for ODPEventPayload);
  sub_253B05550();
  sub_25346CAF4();
  uint64_t v1 = sub_25346CBCC();
  v2(v1);
  return v0;
}

uint64_t ODPEvent.__deallocating_deinit()
{
  sub_25349CD08(v0 + OBJC_IVAR____TtC30IntelligenceFlowPlannerSupport8ODPEvent_payload, (void (*)(void))type metadata accessor for ODPEventPayload);
  sub_253B05550();
  sub_25346CAF4();
  uint64_t v1 = sub_25346CBCC();
  v2(v1);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x270FA0228](v0, v3, v4);
}

unint64_t sub_25349D95C()
{
  return ODPEvent.description.getter();
}

unint64_t sub_25349D980()
{
  return ODPEvent.debugDescription.getter();
}

uint64_t ODPEventOverrides.orchestrationID.getter()
{
  return sub_2534ACF74();
}

uint64_t ODPEventOverrides.resultCandidateID.getter()
{
  return sub_2534ACF74();
}

uint64_t ODPEventOverrides.taskID.getter()
{
  return sub_2534ACF74();
}

uint64_t ODPEventOverrides.interactionID.getter()
{
  return sub_2534ACF74();
}

char *initializeBufferWithCopyOfBuffer for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v6 = *(void *)(a3 - 8);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v7;
      swift_bridgeObjectRetain();
      goto LABEL_174;
    case 2u:
    case 4u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_174;
    case 5u:
      uint64_t v9 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v9;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_174;
    case 9u:
      uint64_t v10 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v10;
      uint64_t v11 = a2 + 16;
      uint64_t v12 = *((void *)a2 + 7);
      long long v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v13;
      *((void *)a1 + 7) = v12;
      uint64_t v14 = v13;
      uint64_t v15 = **(void (***)(char *, char *, uint64_t))(v13 - 8);
      swift_bridgeObjectRetain();
      v15(a1 + 16, v11, v14);
      goto LABEL_174;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      uint64_t v16 = *((void *)a2 + 5);
      long long v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v17;
      *((void *)a1 + 5) = v16;
      (**(void (***)(void *, const void *))(v17 - 8))(a1, a2);
      goto LABEL_174;
    case 0x10u:
      uint64_t v18 = sub_253B055C0();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(a1, a2, v18);
      uint64_t v20 = (int *)type metadata accessor for Session.Event(0);
      v19(&a1[v20[5]], &a2[v20[5]], v18);
      uint64_t v21 = v20[6];
      uint64_t v22 = &a1[v21];
      uint64_t v23 = &a2[v21];
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&a2[v21], 1, v18))
      {
        uint64_t v24 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        v19(v22, v23, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v22, 0, 1, v18);
      }
      break;
    case 0x13u:
      uint64_t v25 = *((void *)a2 + 3);
      *((void *)a1 + 3) = v25;
      (**(void (***)(void *, const void *))(v25 - 8))(a1, a2);
      goto LABEL_174;
    default:
      memcpy(a1, a2, *(void *)(v6 + 64));
      return a1;
  }
  uint64_t v26 = v20[7];
  uint64_t v27 = (uint64_t)&a1[v26];
  uint64_t v28 = (uint64_t)&a2[v26];
  uint64_t v29 = type metadata accessor for Session.Event.Payload(0);
  uint64_t v404 = v18;
  v405 = (void (*)(void *, const void *, uint64_t))v19;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v30 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v27, v28, v30);
      uint64_t v31 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v32 = (void *)(v27 + v31);
      long long v33 = (const void *)(v28 + v31);
      uint64_t v34 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v33, 1, v34))
      {
        uint64_t v35 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v32, 0, 1, v34);
      }
      goto LABEL_172;
    case 1u:
      uint64_t v36 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v36;
      *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
      uint64_t v37 = type metadata accessor for TextQuery(0);
      uint64_t v38 = *(int *)(v37 + 24);
      __dstj = (void *)(v27 + v38);
      uint64_t v375 = (void *)(v28 + v38);
      uint64_t v39 = sub_253B059D0();
      uint64_t v40 = *(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16);
      swift_bridgeObjectRetain();
      v40(__dstj, v375, v39);
      uint64_t v41 = *(int *)(v37 + 28);
      uint64_t v42 = (void *)(v27 + v41);
      uint64_t v43 = (void *)(v28 + v41);
      uint64_t v44 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v44;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 2u:
      *(void *)uint64_t v27 = *(void *)v28;
      *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
      uint64_t v45 = *(void *)(v28 + 24);
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      *(void *)(v27 + 24) = v45;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 3u:
      __dst = (void *)type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          swift_bridgeObjectRetain();
          goto LABEL_114;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v47 = *(void *)(v28 + 8);
          *(void *)uint64_t v27 = *(void *)v28;
          *(void *)(v27 + 8) = v47;
          uint64_t v48 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v372 = v28 + v48;
          uint64_t v376 = (void *)(v27 + v48);
          uint64_t v49 = sub_253B059D0();
          uint64_t v50 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16);
          swift_bridgeObjectRetain();
          v50(v376, v372, v49);
          uint64_t v18 = v404;
LABEL_114:
          swift_storeEnumTagMultiPayload();
          goto LABEL_147;
        }
        memcpy((void *)v27, (const void *)v28, *(void *)(*(__dst - 1) + 64));
LABEL_147:
        uint64_t v314 = type metadata accessor for Request(0);
        *(unsigned char *)(v27 + *(int *)(v314 + 20)) = *(unsigned char *)(v28 + *(int *)(v314 + 20));
        __dstuint64_t i = (int *)v314;
        uint64_t v315 = *(int *)(v314 + 24);
        v384 = (void *)(v27 + v315);
        uint64_t v316 = (void *)(v28 + v315);
        uint64_t v317 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v316, 1, v317))
        {
          uint64_t v318 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v384, v316, *(void *)(*(void *)(v318 - 8) + 64));
        }
        else
        {
          __src = v316;
          uint64_t v374 = v317;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v319 = v316[1];
              uint64_t v320 = (uint64_t)v384;
              void *v384 = *v316;
              v384[1] = v319;
              *((_WORD *)v384 + 8) = *((_WORD *)v316 + 8);
              swift_bridgeObjectRetain();
              uint64_t v321 = v374;
              goto LABEL_164;
            case 1u:
              uint64_t v328 = v316[1];
              uint64_t v320 = (uint64_t)v384;
              void *v384 = *v316;
              v384[1] = v328;
              swift_bridgeObjectRetain();
              uint64_t v321 = v374;
              goto LABEL_164;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v329 = v316[1];
              uint64_t v320 = (uint64_t)v384;
              void *v384 = *v316;
              v384[1] = v329;
              *((unsigned char *)v384 + 16) = *((unsigned char *)v316 + 16);
              swift_bridgeObjectRetain();
              uint64_t v321 = v374;
              goto LABEL_164;
            case 6u:
              uint64_t v330 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v330 - 8) + 16))(v384, v316, v330);
              uint64_t v331 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              v332 = (char *)v384 + v331;
              uint64_t v333 = (char *)v316 + v331;
              uint64_t v320 = (uint64_t)v384;
              *(void *)v332 = *(void *)v333;
              v332[8] = v333[8];
              uint64_t v321 = v374;
LABEL_164:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              uint64_t v321 = v317;
              uint64_t v320 = (uint64_t)v384;
              memcpy(v384, __src, *(void *)(*(void *)(v374 - 8) + 64));
              break;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v320, 0, 1, v321);
        }
        uint64_t v334 = __dsti[7];
        uint64_t v335 = (void *)(v27 + v334);
        uint64_t v336 = (const void *)(v28 + v334);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28 + v334, 1, v18))
        {
          uint64_t v337 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v335, v336, *(void *)(*(void *)(v337 - 8) + 64));
        }
        else
        {
          v405(v335, v336, v18);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v335, 0, 1, v18);
        }
        uint64_t v338 = __dsti[8];
        uint64_t v221 = v27 + v338;
        uint64_t v222 = v28 + v338;
        uint64_t v223 = *(void *)(v222 + 8);
        if (!v223)
        {
          *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
          *(void *)(v221 + 16) = *(void *)(v222 + 16);
          goto LABEL_172;
        }
        goto LABEL_170;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v18))
      {
        uint64_t v271 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v271 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v18);
      }
      uint64_t v276 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v19((char *)(v27 + v276[5]), (char *)(v28 + v276[5]), v18);
      uint64_t v277 = v276[6];
      uint64_t v278 = (void *)(v27 + v277);
      uint64_t v279 = (const void *)(v28 + v277);
      uint64_t v280 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v281 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v281 - 8) + 16))(v278, v279, v281);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v278, v279, *(void *)(*(void *)(v280 - 8) + 64));
      }
      uint64_t v282 = v276[7];
      uint64_t v283 = v27 + v282;
      uint64_t v284 = v28 + v282;
      uint64_t v285 = sub_253B059D0();
      uint64_t v286 = *(void (**)(uint64_t, uint64_t))(*(void *)(v285 - 8) + 16);
      uint64_t v382 = (void *)v285;
      v286(v283, v284);
      uint64_t v287 = v276[8];
      uint64_t v288 = (void *)(v27 + v287);
      uint64_t v289 = (void *)(v28 + v287);
      uint64_t v290 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v291 = swift_getEnumCaseMultiPayload();
      if (v291 == 1)
      {
        *uint64_t v288 = *v289;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v291)
        {
          memcpy(v288, v289, *(void *)(*(void *)(v290 - 8) + 64));
          goto LABEL_146;
        }
        uint64_t v292 = v289[1];
        *uint64_t v288 = *v289;
        v288[1] = v292;
        uint64_t v293 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __srca = (char *)v288 + v293;
        uint64_t v294 = (char *)v289 + v293;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v286)(__srca, v294, v382);
      }
      swift_storeEnumTagMultiPayload();
LABEL_146:
      swift_storeEnumTagMultiPayload();
      uint64_t v18 = v404;
      goto LABEL_147;
    case 4u:
      uint64_t v51 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v51;
      uint64_t v52 = *(void *)(v28 + 24);
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      *(void *)(v27 + 24) = v52;
      uint64_t v53 = *(void *)(v28 + 40);
      *(void *)(v27 + 32) = *(void *)(v28 + 32);
      *(void *)(v27 + 40) = v53;
      *(void *)(v27 + 48) = *(void *)(v28 + 48);
      *(unsigned char *)(v27 + 56) = *(unsigned char *)(v28 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 5u:
      uint64_t v54 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v27, v28, v54);
      uint64_t v55 = (int *)type metadata accessor for Action(0);
      uint64_t v56 = v55[5];
      uint64_t v57 = (void *)(v27 + v56);
      uint64_t v58 = (uint64_t *)(v28 + v56);
      uint64_t v60 = *v58;
      uint64_t v59 = v58[1];
      *uint64_t v57 = v60;
      v57[1] = v59;
      *(unsigned char *)(v27 + v55[6]) = *(unsigned char *)(v28 + v55[6]);
      *(void *)(v27 + v55[7]) = *(void *)(v28 + v55[7]);
      uint64_t v61 = v55[8];
      uint64_t v62 = (void *)(v27 + v61);
      uint64_t v63 = (void *)(v28 + v61);
      uint64_t v64 = v63[1];
      *uint64_t v62 = *v63;
      v62[1] = v64;
      uint64_t v65 = v55[9];
      uint64_t v66 = (void *)(v27 + v65);
      uint64_t v67 = (void *)(v28 + v65);
      uint64_t v68 = v67[1];
      *uint64_t v66 = *v67;
      v66[1] = v68;
      uint64_t v69 = v67[3];
      v66[2] = v67[2];
      v66[3] = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 6u:
      uint64_t v70 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v70))
      {
        uint64_t v71 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v27, v28, v70);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v70);
      }
      uint64_t v196 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v27 + *(int *)(v196 + 20), v28 + *(int *)(v196 + 20), v70);
      goto LABEL_172;
    case 7u:
      uint64_t v72 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v27, v28, v72);
      uint64_t v73 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v74 = v73[5];
      uint64_t v75 = (void *)(v27 + v74);
      uint64_t v76 = (uint64_t *)(v28 + v74);
      uint64_t v78 = *v76;
      uint64_t v77 = v76[1];
      void *v75 = v78;
      v75[1] = v77;
      *(void *)(v27 + v73[6]) = *(void *)(v28 + v73[6]);
      uint64_t v79 = v73[7];
      uint64_t v80 = (void *)(v27 + v79);
      uint64_t v81 = (void *)(v28 + v79);
      uint64_t v82 = v81[1];
      *uint64_t v80 = *v81;
      v80[1] = v82;
      uint64_t v83 = v73[8];
      uint64_t v84 = (void *)(v27 + v83);
      uint64_t v85 = (void *)(v28 + v83);
      uint64_t v86 = v85[1];
      void *v84 = *v85;
      v84[1] = v86;
      *(void *)(v27 + v73[9]) = *(void *)(v28 + v73[9]);
      *(void *)(v27 + v73[10]) = *(void *)(v28 + v73[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 8u:
      uint64_t v87 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v27, v28, v87);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v27 + *(int *)(Step + 20)) = *(void *)(v28 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 9u:
      uint64_t v89 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(v27, v28, v89);
      uint64_t v90 = type metadata accessor for VariableStep(0);
      *(void *)(v27 + *(int *)(v90 + 20)) = *(void *)(v28 + *(int *)(v90 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v27 = *(void *)v28;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v117 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v117;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0xCu:
      uint64_t v91 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v91;
      uint64_t v92 = *(void *)(v28 + 24);
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      *(void *)(v27 + 24) = v92;
      uint64_t v93 = *(void *)(v28 + 32);
      uint64_t v94 = *(void *)(v28 + 40);
      *(void *)(v27 + 32) = v93;
      *(void *)(v27 + 40) = v94;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v272 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 16))(v27, v28, v272);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v273 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v273)) {
            goto LABEL_127;
          }
          uint64_t v274 = type metadata accessor for PlannerError();
          goto LABEL_121;
        case 3u:
          uint64_t v273 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v273))
          {
            uint64_t v274 = type metadata accessor for ExecutorError();
LABEL_121:
            memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v274 - 8) + 64));
          }
          else
          {
LABEL_127:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v273 - 8) + 16))(v27, v28, v273);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v273);
          }
          break;
        default:
          uint64_t v95 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 16))(v27, v28, v95);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_172;
    case 0xEu:
      uint64_t v96 = *(void *)v28;
      unint64_t v97 = *(void *)(v28 + 8);
      sub_25348A9C8(*(void *)v28, v97);
      *(void *)uint64_t v27 = v96;
      *(void *)(v27 + 8) = v97;
      uint64_t v98 = *(void *)(v28 + 16);
      unint64_t v99 = *(void *)(v28 + 24);
      sub_25348A9C8(v98, v99);
      *(void *)(v27 + 16) = v98;
      *(void *)(v27 + 24) = v99;
      uint64_t v100 = *(void *)(v28 + 40);
      *(void *)(v27 + 32) = *(void *)(v28 + 32);
      *(void *)(v27 + 40) = v100;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0xFu:
      uint64_t v101 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(v27, v28, v101);
      goto LABEL_172;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v18))
      {
        uint64_t v102 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v102 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v18);
      }
      uint64_t v250 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v405((void *)(v27 + v250[5]), (const void *)(v28 + v250[5]), v18);
      uint64_t v251 = v250[6];
      uint64_t v252 = (void *)(v27 + v251);
      uint64_t v253 = (const void *)(v28 + v251);
      uint64_t v254 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      v386 = v20;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v255 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v255 - 8) + 16))(v252, v253, v255);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v252, v253, *(void *)(*(void *)(v254 - 8) + 64));
      }
      uint64_t v256 = v250[7];
      uint64_t v257 = v27 + v256;
      uint64_t v258 = v28 + v256;
      uint64_t v259 = sub_253B059D0();
      uint64_t v260 = *(void (**)(uint64_t, uint64_t))(*(void *)(v259 - 8) + 16);
      __dsth = (void *)v259;
      v260(v257, v258);
      uint64_t v261 = v250[8];
      uint64_t v262 = (void *)(v27 + v261);
      uint64_t v263 = (void *)(v28 + v261);
      uint64_t v264 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v265 = swift_getEnumCaseMultiPayload();
      if (v265 == 1)
      {
        *uint64_t v262 = *v263;
        swift_bridgeObjectRetain();
        goto LABEL_108;
      }
      if (!v265)
      {
        uint64_t v266 = v263[1];
        *uint64_t v262 = *v263;
        v262[1] = v266;
        uint64_t v267 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v268 = (char *)v262 + v267;
        uint64_t v269 = (char *)v263 + v267;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v260)(v268, v269, __dsth);
LABEL_108:
        swift_storeEnumTagMultiPayload();
        goto LABEL_110;
      }
      memcpy(v262, v263, *(void *)(*(void *)(v264 - 8) + 64));
LABEL_110:
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = v386;
LABEL_173:
      uint64_t v339 = v20[8];
      v340 = &a1[v339];
      uint64_t v341 = &a2[v339];
      uint64_t v342 = *((void *)v341 + 1);
      *(void *)v340 = *(void *)v341;
      *((void *)v340 + 1) = v342;
      uint64_t v343 = v20[9];
      uint64_t v344 = &a1[v343];
      uint64_t v345 = &a2[v343];
      uint64_t v346 = *((void *)v345 + 1);
      *(void *)uint64_t v344 = *(void *)v345;
      *((void *)v344 + 1) = v346;
      uint64_t v347 = v20[10];
      uint64_t v348 = &a1[v347];
      uint64_t v349 = &a2[v347];
      uint64_t v350 = *((void *)v349 + 1);
      *(void *)uint64_t v348 = *(void *)v349;
      *((void *)v348 + 1) = v350;
      uint64_t v351 = v20[11];
      uint64_t v352 = &a1[v351];
      uint64_t v353 = &a2[v351];
      uint64_t v354 = *((void *)v353 + 1);
      *(void *)uint64_t v352 = *(void *)v353;
      *((void *)v352 + 1) = v354;
      uint64_t v355 = v20[12];
      uint64_t v356 = &a1[v355];
      uint64_t v357 = &a2[v355];
      uint64_t v358 = v20;
      uint64_t v359 = sub_253B05550();
      v403 = *(void (**)(char *, char *, uint64_t))(*(void *)(v359 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v403(v356, v357, v359);
      uint64_t v360 = (int *)type metadata accessor for Timepoint();
      *(void *)&v356[v360[5]] = *(void *)&v357[v360[5]];
      *(void *)&v356[v360[6]] = *(void *)&v357[v360[6]];
      v405(&v356[v360[7]], &v357[v360[7]], v404);
      uint64_t v361 = v358[13];
      uint64_t v362 = &a1[v361];
      uint64_t v363 = &a2[v361];
      uint64_t v364 = *((void *)v363 + 1);
      *(void *)uint64_t v362 = *(void *)v363;
      *((void *)v362 + 1) = v364;
      uint64_t v365 = v358[14];
      uint64_t v366 = &a1[v365];
      v367 = &a2[v365];
      *(void *)uint64_t v366 = *(void *)v367;
      v366[8] = v367[8];
      *(void *)&a1[v358[15]] = *(void *)&a2[v358[15]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_174:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v18))
      {
        uint64_t v103 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v18);
      }
      uint64_t v197 = type metadata accessor for ActionStepResult(0);
      uint64_t v198 = *(int *)(v197 + 20);
      uint64_t v199 = (void *)(v27 + v198);
      uint64_t v200 = (void *)(v28 + v198);
      uint64_t v201 = v200[1];
      void *v199 = *v200;
      v199[1] = v201;
      __dstf = (int *)v197;
      uint64_t v202 = *(int *)(v197 + 24);
      uint64_t v203 = v27 + v202;
      v381 = (char *)(v28 + v202);
      uint64_t v204 = sub_253B05AB0();
      uint64_t v205 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v204 - 8) + 16);
      swift_bridgeObjectRetain();
      v205(v203, v381, v204);
      uint64_t v206 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v207 = (void *)(v203 + v206);
      uint64_t v208 = &v381[v206];
      uint64_t v209 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v208, 1, v209))
      {
        uint64_t v210 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v207, v208, *(void *)(*(void *)(v210 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v209 - 8) + 16))(v207, v208, v209);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v207, 0, 1, v209);
      }
      uint64_t v235 = __dstf[7];
      uint64_t v236 = (void *)(v27 + v235);
      uint64_t v237 = (void *)(v28 + v235);
      uint64_t v238 = v237[1];
      *uint64_t v236 = *v237;
      v236[1] = v238;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x12u:
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v105 = *(int *)(StepResults + 20);
      __dstk = (void *)(v27 + v105);
      v377 = (void *)(v28 + v105);
      uint64_t v106 = sub_253B059D0();
      uint64_t v107 = *(void (**)(void *, void *, uint64_t))(*(void *)(v106 - 8) + 16);
      swift_bridgeObjectRetain();
      v107(__dstk, v377, v106);
      v405((void *)(v27 + *(int *)(StepResults + 24)), (const void *)(v28 + *(int *)(StepResults + 24)), v404);
      goto LABEL_172;
    case 0x13u:
      uint64_t v108 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v27, v28, v108);
      goto LABEL_172;
    case 0x14u:
      uint64_t v109 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v27, v28, v109);
      uint64_t v110 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v27 + v110[5]) = *(void *)(v28 + v110[5]);
      *(void *)(v27 + v110[6]) = *(void *)(v28 + v110[6]);
      *(void *)(v27 + v110[7]) = *(void *)(v28 + v110[7]);
      *(unsigned char *)(v27 + v110[8]) = *(unsigned char *)(v28 + v110[8]);
      *(unsigned char *)(v27 + v110[9]) = *(unsigned char *)(v28 + v110[9]);
      *(unsigned char *)(v27 + v110[10]) = *(unsigned char *)(v28 + v110[10]);
      uint64_t v111 = v110[11];
      uint64_t v112 = (void *)(v27 + v111);
      uint64_t v113 = (void *)(v28 + v111);
      uint64_t v114 = v113[1];
      void *v112 = *v113;
      v112[1] = v114;
      uint64_t v115 = v113[3];
      v112[2] = v113[2];
      v112[3] = v115;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x16u:
    case 0x24u:
      uint64_t v116 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v116;
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x1Bu:
      uint64_t v118 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v118;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x1Cu:
      uint64_t v119 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v119;
      uint64_t v120 = *(void *)(v28 + 24);
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      *(void *)(v27 + 24) = v120;
      *(_DWORD *)(v27 + 32) = *(_DWORD *)(v28 + 32);
      uint64_t v122 = *(void *)(v28 + 40);
      uint64_t v121 = *(void *)(v28 + 48);
      *(void *)(v27 + 40) = v122;
      *(void *)(v27 + 48) = v121;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x1Eu:
      uint64_t v123 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 16))(v27, v28, v123);
      goto LABEL_172;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v18))
      {
        uint64_t v124 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v124 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v18);
      }
      uint64_t v211 = type metadata accessor for StatementResult(0);
      uint64_t v212 = *(int *)(v211 + 20);
      uint64_t v213 = v27 + v212;
      uint64_t v214 = v28 + v212;
      uint64_t v215 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 16))(v213, v214, v215);
      uint64_t v216 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      __dstg = (void *)(v213 + v216);
      uint64_t v217 = (const void *)(v214 + v216);
      uint64_t v218 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v217, 1, v218))
      {
        uint64_t v219 = sub_253462A5C(&qword_269CDBB28);
        memcpy(__dstg, v217, *(void *)(*(void *)(v219 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v218 - 8) + 16))(__dstg, v217, v218);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstg, 0, 1, v218);
      }
      uint64_t v239 = *(int *)(v211 + 24);
      __dsto = (void *)(v27 + v239);
      uint64_t v240 = v28 + v239;
      uint64_t v241 = sub_253B059D0();
      uint64_t v242 = (int *)v211;
      uint64_t v243 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v241 - 8) + 16);
      v243(__dsto, v240, v241);
      v243((void *)(v27 + v242[7]), v28 + v242[7], v241);
      v243((void *)(v27 + v242[8]), v28 + v242[8], v241);
      uint64_t v244 = v242[9];
      uint64_t v245 = (void *)(v27 + v244);
      uint64_t v246 = (void *)(v28 + v244);
      uint64_t v247 = v246[1];
      if (v247)
      {
        *uint64_t v245 = *v246;
        v245[1] = v247;
        uint64_t v248 = v246[3];
        v245[2] = v246[2];
        v245[3] = v248;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v249 = *((_OWORD *)v246 + 1);
        *(_OWORD *)uint64_t v245 = *(_OWORD *)v246;
        *((_OWORD *)v245 + 1) = v249;
      }
      goto LABEL_172;
    case 0x20u:
      uint64_t v125 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v125;
      uint64_t v126 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v127 = *(int *)(v126 + 20);
      __dsta = (void *)(v27 + v127);
      uint64_t v128 = (const void *)(v28 + v127);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v128, 1, v18))
      {
        uint64_t v129 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dsta, v128, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        v405(__dsta, v128, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v18);
      }
      uint64_t v220 = *(int *)(v126 + 24);
      uint64_t v221 = v27 + v220;
      uint64_t v222 = v28 + v220;
      uint64_t v223 = *(void *)(v222 + 8);
      if (v223) {
        goto LABEL_170;
      }
      *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
      *(void *)(v221 + 16) = *(void *)(v222 + 16);
      goto LABEL_172;
    case 0x21u:
      *(void *)uint64_t v27 = *(void *)v28;
      uint64_t v130 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v131 = *(int *)(v130 + 20);
      __dstb = (void *)(v27 + v131);
      uint64_t v132 = (const void *)(v28 + v131);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v132, 1, v18))
      {
        uint64_t v133 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dstb, v132, *(void *)(*(void *)(v133 - 8) + 64));
      }
      else
      {
        v405(__dstb, v132, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstb, 0, 1, v18);
      }
      uint64_t v270 = *(int *)(v130 + 24);
      uint64_t v221 = v27 + v270;
      uint64_t v222 = v28 + v270;
      uint64_t v223 = *(void *)(v222 + 8);
      if (v223) {
        goto LABEL_170;
      }
      *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
      *(void *)(v221 + 16) = *(void *)(v222 + 16);
      goto LABEL_172;
    case 0x22u:
      __dstc = (void *)type metadata accessor for RequestContent(0);
      int v134 = swift_getEnumCaseMultiPayload();
      if (v134 != 3)
      {
        if (v134 == 2)
        {
          *(void *)uint64_t v27 = *(void *)v28;
          swift_bridgeObjectRetain();
          goto LABEL_125;
        }
        if (v134 == 1)
        {
          uint64_t v135 = *(void *)(v28 + 8);
          *(void *)uint64_t v27 = *(void *)v28;
          *(void *)(v27 + 8) = v135;
          uint64_t v136 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v373 = v28 + v136;
          uint64_t v378 = (void *)(v27 + v136);
          uint64_t v137 = sub_253B059D0();
          uint64_t v138 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16);
          swift_bridgeObjectRetain();
          v138(v378, v373, v137);
          uint64_t v18 = v404;
LABEL_125:
          swift_storeEnumTagMultiPayload();
          goto LABEL_155;
        }
        memcpy((void *)v27, (const void *)v28, *(void *)(*(__dstc - 1) + 64));
LABEL_155:
        uint64_t v322 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v323 = *(int *)(v322 + 20);
        uint64_t v324 = (void *)(v27 + v323);
        long long v325 = (const void *)(v28 + v323);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28 + v323, 1, v18))
        {
          uint64_t v326 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v324, v325, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          v405(v324, v325, v18);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v324, 0, 1, v18);
        }
        uint64_t v327 = *(int *)(v322 + 24);
        uint64_t v221 = v27 + v327;
        uint64_t v222 = v28 + v327;
        uint64_t v223 = *(void *)(v222 + 8);
        if (!v223)
        {
          *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
          *(void *)(v221 + 16) = *(void *)(v222 + 16);
LABEL_172:
          swift_storeEnumTagMultiPayload();
          goto LABEL_173;
        }
LABEL_170:
        *(void *)uint64_t v221 = *(void *)v222;
        *(void *)(v221 + 8) = v223;
        *(void *)(v221 + 16) = *(void *)(v222 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_172;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v28, 1, v18))
      {
        uint64_t v275 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v275 - 8) + 64));
      }
      else
      {
        v19((char *)v27, (char *)v28, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, 0, 1, v18);
      }
      uint64_t v295 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v19((char *)(v27 + v295[5]), (char *)(v28 + v295[5]), v18);
      uint64_t v296 = v295[6];
      uint64_t v297 = (void *)(v27 + v296);
      uint64_t v298 = (const void *)(v28 + v296);
      uint64_t v299 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v300 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v300 - 8) + 16))(v297, v298, v300);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v297, v298, *(void *)(*(void *)(v299 - 8) + 64));
      }
      uint64_t v301 = v295[7];
      uint64_t v302 = v27 + v301;
      uint64_t v303 = v28 + v301;
      uint64_t v304 = sub_253B059D0();
      uint64_t v305 = *(void (**)(uint64_t, uint64_t))(*(void *)(v304 - 8) + 16);
      v383 = (void *)v304;
      v305(v302, v303);
      uint64_t v306 = v295[8];
      uint64_t v307 = (void *)(v27 + v306);
      uint64_t v308 = (void *)(v28 + v306);
      uint64_t v309 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v310 = swift_getEnumCaseMultiPayload();
      if (v310 == 1)
      {
        *uint64_t v307 = *v308;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v310)
        {
          memcpy(v307, v308, *(void *)(*(void *)(v309 - 8) + 64));
          goto LABEL_154;
        }
        uint64_t v311 = v308[1];
        *uint64_t v307 = *v308;
        v307[1] = v311;
        uint64_t v312 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __srcb = (char *)v307 + v312;
        uint64_t v313 = (char *)v308 + v312;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v305)(__srcb, v313, v383);
      }
      swift_storeEnumTagMultiPayload();
LABEL_154:
      swift_storeEnumTagMultiPayload();
      uint64_t v18 = v404;
      goto LABEL_155;
    case 0x23u:
      uint64_t v139 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 16))(v27, v28, v139);
      uint64_t v140 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v141 = *(int *)(v140 + 20);
      uint64_t v142 = v27 + v141;
      uint64_t v143 = v28 + v141;
      uint64_t v144 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16))(v142, v143, v144);
      *(void *)(v27 + *(int *)(v140 + 24)) = *(void *)(v28 + *(int *)(v140 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x25u:
      uint64_t v145 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 16))(v27, v28, v145);
      uint64_t v146 = type metadata accessor for ToolResolution(0);
      uint64_t v147 = *(int *)(v146 + 20);
      __dstl = (void *)(v27 + v147);
      uint64_t v148 = v28 + v147;
      uint64_t v149 = sub_253B059D0();
      uint64_t v150 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v149 - 8) + 16);
      v150(__dstl, v148, v149);
      v150((void *)(v27 + *(int *)(v146 + 24)), v28 + *(int *)(v146 + 24), v149);
      goto LABEL_172;
    case 0x26u:
      uint64_t v151 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v151;
      __dstd = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v152 = __dstd[5];
      v379 = (void *)(v27 + v152);
      uint64_t v153 = (void *)(v28 + v152);
      swift_bridgeObjectRetain();
      uint64_t v385 = v20;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v153, 1, v18))
      {
        uint64_t v154 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v379, v153, *(void *)(*(void *)(v154 - 8) + 64));
      }
      else
      {
        v19((char *)v379, (char *)v153, v18);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v379, 0, 1, v18);
      }
      *(unsigned char *)(v27 + __dstd[6]) = *(unsigned char *)(v28 + __dstd[6]);
      uint64_t v224 = __dstd[7];
      uint64_t v225 = v27 + v224;
      uint64_t v226 = v28 + v224;
      uint64_t v227 = sub_253B059D0();
      uint64_t v228 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v227 - 8) + 16);
      uint64_t v229 = v226;
      uint64_t v230 = *v228;
      (*v228)(v225, v229, v227);
      uint64_t v231 = __dstd[8];
      uint64_t v232 = (void *)(v27 + v231);
      uint64_t v233 = (const void *)(v28 + v231);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v233, 1, v227))
      {
        uint64_t v234 = sub_253462A5C(&qword_269CDB460);
        memcpy(v232, v233, *(void *)(*(void *)(v234 - 8) + 64));
      }
      else
      {
        v230((uint64_t)v232, (uint64_t)v233, v227);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v232, 0, 1, v227);
      }
      uint64_t v20 = v385;
      goto LABEL_172;
    case 0x27u:
      v386 = v20;
      v19((char *)v27, (char *)v28, v18);
      uint64_t v155 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v27 + v155[5]) = *(unsigned char *)(v28 + v155[5]);
      uint64_t v156 = v155[6];
      uint64_t v157 = v27 + v156;
      __dstm = (void *)(v28 + v156);
      uint64_t v158 = sub_253B059D0();
      uint64_t v159 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v158 - 8) + 16);
      v159(v157, __dstm, v158);
      uint64_t v160 = v155[7];
      uint64_t v161 = (void *)(v27 + v160);
      uint64_t v162 = (void *)(v28 + v160);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v162, 1, v158))
      {
        uint64_t v163 = sub_253462A5C(&qword_269CDB460);
        memcpy(v161, v162, *(void *)(*(void *)(v163 - 8) + 64));
      }
      else
      {
        v159((uint64_t)v161, v162, v158);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v161, 0, 1, v158);
      }
      goto LABEL_110;
    case 0x28u:
      uint64_t v164 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 16))(v27, v28, v164);
      uint64_t v165 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v166 = *(int *)(v165 + 20);
      uint64_t v167 = v27 + v166;
      uint64_t v168 = v28 + v166;
      uint64_t v169 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 16))(v167, v168, v169);
      uint64_t v170 = *(int *)(v165 + 24);
      uint64_t v171 = v27 + v170;
      uint64_t v172 = v28 + v170;
      uint64_t v173 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 16))(v171, v172, v173);
      goto LABEL_172;
    case 0x29u:
      uint64_t v174 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 16))(v27, v28, v174);
      uint64_t v175 = type metadata accessor for TypeConversionResult(0);
      uint64_t v176 = *(int *)(v175 + 20);
      __dstn = (void *)(v27 + v176);
      uint64_t v177 = v28 + v176;
      uint64_t v178 = sub_253B059D0();
      uint64_t v179 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v178 - 8) + 16);
      v179(__dstn, v177, v178);
      v179((void *)(v27 + *(int *)(v175 + 24)), v28 + *(int *)(v175 + 24), v178);
      goto LABEL_172;
    case 0x2Au:
      uint64_t v180 = *(void *)(v28 + 8);
      *(void *)uint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = v180;
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      __dste = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v181 = __dste[7];
      uint64_t v380 = (void *)(v27 + v181);
      uint64_t v182 = (const void *)(v28 + v181);
      uint64_t v183 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v182, 1, v183))
      {
        uint64_t v184 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v380, v182, *(void *)(*(void *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v183 - 8) + 16))(v380, v182, v183);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v380, 0, 1, v183);
      }
      *(void *)(v27 + __dste[8]) = *(void *)(v28 + __dste[8]);
      *(void *)(v27 + __dste[9]) = *(void *)(v28 + __dste[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 0x2Cu:
      uint64_t v185 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 16))(v27, v28, v185);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v187 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v188 = (void *)(v27 + v187);
      uint64_t v189 = (uint64_t *)(v28 + v187);
      uint64_t v191 = *v189;
      uint64_t v190 = v189[1];
      *uint64_t v188 = v191;
      v188[1] = v190;
      uint64_t v192 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v193 = v27 + v192;
      uint64_t v194 = (uint64_t *)(v28 + v192);
      uint64_t v195 = *v194;
      LOBYTE(v194) = *((unsigned char *)v194 + 8);
      *(void *)uint64_t v193 = v195;
      *(unsigned char *)(v193 + 8) = (_BYTE)v194;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    default:
      memcpy((void *)v27, (const void *)v28, *(void *)(*(void *)(v29 - 8) + 64));
      goto LABEL_173;
  }
}

uint64_t destroy for ODPEventPayload(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 17:
      goto LABEL_2;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 9:
      swift_bridgeObjectRelease();
      uint64_t v3 = a1 + 16;
      return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
    case 19:
      uint64_t v3 = a1;
      return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    case 16:
      uint64_t v4 = sub_253B055C0();
      int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      v5(a1, v4);
      uint64_t v6 = (int *)type metadata accessor for Session.Event(0);
      v5(a1 + v6[5], v4);
      uint64_t v7 = a1 + v6[6];
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
        v5(v7, v4);
      }
      break;
    default:
      return result;
  }
  uint64_t v8 = a1 + v6[7];
  type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v9 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      v8 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v10 = sub_253B05CB0();
LABEL_29:
      uint64_t v17 = v10;
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v10))
      {
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
        uint64_t v18 = v8;
        goto LABEL_31;
      }
      goto LABEL_119;
    case 1u:
      swift_bridgeObjectRelease();
      uint64_t v11 = v8 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      uint64_t v12 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
      goto LABEL_118;
    case 2u:
    case 0x16u:
    case 0x1Bu:
    case 0x24u:
      goto LABEL_117;
    case 3u:
      type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v4)) {
          v5(v8, v4);
        }
        uint64_t v85 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v5(v8 + v85[5], v4);
        uint64_t v86 = v8 + v85[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v87 = sub_253B09120();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8))(v86, v87);
        }
        uint64_t v88 = v8 + v85[7];
        uint64_t v89 = sub_253B059D0();
        uint64_t v90 = (void (**)(uint64_t, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v88;
        uint64_t v92 = *v90;
        (*v90)(v91, v89);
        uint64_t v93 = v8 + v85[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v94 = swift_getEnumCaseMultiPayload();
        if (v94 != 1)
        {
          if (!v94)
          {
            swift_bridgeObjectRelease();
            uint64_t v95 = type metadata accessor for RequestContent.TextContent(0);
            v92(v93 + *(int *)(v95 + 20), v89);
          }
          goto LABEL_105;
        }
      }
      else if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v8 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v15 = sub_253B059D0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
        }
LABEL_105:
        uint64_t v107 = (int *)type metadata accessor for Request(0);
        uint64_t v108 = v8 + v107[6];
        uint64_t v109 = type metadata accessor for RequestPrescribedPlan(0);
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v108, 1, v109))
        {
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              swift_bridgeObjectRelease();
              break;
            case 6u:
              uint64_t v117 = sub_253B059D0();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8))(v108, v117);
              break;
            default:
              break;
          }
        }
        uint64_t v110 = v8 + v107[7];
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v110, 1, v4)) {
          v5(v110, v4);
        }
        uint64_t v111 = v107[8];
        goto LABEL_116;
      }
      swift_bridgeObjectRelease();
      goto LABEL_105;
    case 4u:
    case 0x1Cu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_117;
    case 5u:
      uint64_t v16 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v8, v16);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_117;
    case 6u:
      uint64_t v17 = sub_253B059D0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v8, v17);
      }
      uint64_t v18 = v8 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
LABEL_31:
      uint64_t v23 = v17;
      goto LABEL_103;
    case 7u:
      uint64_t v20 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v8, v20);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_118;
    case 8u:
      uint64_t v21 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v8, v21);
      type metadata accessor for QueryStep(0);
      goto LABEL_118;
    case 9u:
      uint64_t v22 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v8, v22);
      type metadata accessor for VariableStep(0);
      goto LABEL_118;
    case 0xAu:
    case 0xBu:
    case 0x15u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x1Du:
      goto LABEL_118;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_118;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_101;
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          if (swift_getEnumCaseMultiPayload() > 2) {
            goto LABEL_119;
          }
LABEL_101:
          uint64_t v24 = sub_253B05940();
          break;
        case 2u:
        case 3u:
          uint64_t v10 = sub_253B05940();
          goto LABEL_29;
        default:
          goto LABEL_119;
      }
      goto LABEL_102;
    case 0xEu:
      sub_253487D84(*(void *)v8, *(void *)(v8 + 8));
      sub_253487D84(*(void *)(v8 + 16), *(void *)(v8 + 24));
      goto LABEL_118;
    case 0xFu:
      uint64_t v24 = sub_253B059F0();
      goto LABEL_102;
    case 0x10u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v4)) {
        v5(v8, v4);
      }
      uint64_t v25 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v8 + v25[5], v4);
      uint64_t v26 = v8 + v25[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v27 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
      }
      uint64_t v28 = v8 + v25[7];
      uint64_t v29 = sub_253B059D0();
      uint64_t v30 = (void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
      uint64_t v31 = v28;
      uint64_t v32 = *v30;
      (*v30)(v31, v29);
      uint64_t v33 = v8 + v25[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 1) {
        goto LABEL_118;
      }
      if (v34) {
        goto LABEL_119;
      }
      swift_bridgeObjectRelease();
      uint64_t v35 = v33 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_72:
      uint64_t v67 = v29;
LABEL_75:
      v32(v35, v67);
      goto LABEL_119;
    case 0x11u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v4)) {
        v5(v8, v4);
      }
      uint64_t v36 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      uint64_t v37 = v8 + *(int *)(v36 + 24);
      uint64_t v38 = sub_253B05AB0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
      uint64_t v39 = v37 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v40 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v39, 1, v40)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
      }
      goto LABEL_118;
    case 0x12u:
      swift_bridgeObjectRelease();
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v42 = v8 + *(int *)(StepResults + 20);
      uint64_t v43 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
      v5(v8 + *(int *)(StepResults + 24), v4);
      goto LABEL_119;
    case 0x13u:
      uint64_t v24 = sub_253B05CF0();
      goto LABEL_102;
    case 0x14u:
      uint64_t v44 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(v8, v44);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_117;
    case 0x1Eu:
      uint64_t v24 = sub_253B06720();
      goto LABEL_102;
    case 0x1Fu:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v4)) {
        v5(v8, v4);
      }
      uint64_t v45 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v46 = v8 + v45[5];
      uint64_t v47 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
      uint64_t v48 = v46 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v49 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v48, 1, v49)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v48, v49);
      }
      uint64_t v118 = v8 + v45[6];
      uint64_t v50 = sub_253B059D0();
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8);
      v51(v118, v50);
      v51(v8 + v45[7], v50);
      v51(v8 + v45[8], v50);
      if (*(void *)(v8 + v45[9] + 8)) {
        goto LABEL_117;
      }
      goto LABEL_119;
    case 0x20u:
      swift_bridgeObjectRelease();
      uint64_t v52 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_113;
    case 0x21u:
      swift_bridgeObjectRelease();
      uint64_t v52 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_113;
    case 0x22u:
      type metadata accessor for RequestContent(0);
      int v53 = swift_getEnumCaseMultiPayload();
      if (v53 != 3)
      {
        if (v53 != 2)
        {
          if (v53 == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v54 = v8 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v55 = sub_253B059D0();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v54, v55);
          }
          goto LABEL_112;
        }
LABEL_111:
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v4)) {
        v5(v8, v4);
      }
      uint64_t v96 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v8 + v96[5], v4);
      uint64_t v97 = v8 + v96[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v98 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v98 - 8) + 8))(v97, v98);
      }
      uint64_t v99 = v8 + v96[7];
      uint64_t v100 = sub_253B059D0();
      uint64_t v101 = (void (**)(uint64_t, uint64_t))(*(void *)(v100 - 8) + 8);
      uint64_t v102 = v99;
      uint64_t v103 = *v101;
      (*v101)(v102, v100);
      uint64_t v104 = v8 + v96[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v105 = swift_getEnumCaseMultiPayload();
      if (v105 == 1) {
        goto LABEL_111;
      }
      if (!v105)
      {
        swift_bridgeObjectRelease();
        uint64_t v106 = type metadata accessor for RequestContent.TextContent(0);
        v103(v104 + *(int *)(v106 + 20), v100);
      }
LABEL_112:
      uint64_t v52 = type metadata accessor for ExternalAgentRequest(0);
LABEL_113:
      uint64_t v112 = v52;
      uint64_t v113 = v8 + *(int *)(v52 + 20);
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v113, 1, v4)) {
        v5(v113, v4);
      }
      uint64_t v111 = *(int *)(v112 + 24);
LABEL_116:
      if (*(void *)(v8 + v111 + 8))
      {
LABEL_117:
        swift_bridgeObjectRelease();
LABEL_118:
        swift_bridgeObjectRelease();
      }
LABEL_119:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v114 = a1 + v6[12];
      uint64_t v115 = sub_253B05550();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 - 8) + 8))(v114, v115);
      uint64_t v116 = type metadata accessor for Timepoint();
      v5(v114 + *(int *)(v116 + 28), v4);
      swift_bridgeObjectRelease();
LABEL_2:
      return swift_bridgeObjectRelease();
    case 0x23u:
      uint64_t v56 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v8, v56);
      uint64_t v57 = v8 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      uint64_t v58 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v57, v58);
      goto LABEL_118;
    case 0x25u:
      uint64_t v59 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(v8, v59);
      uint64_t v60 = type metadata accessor for ToolResolution(0);
      goto LABEL_78;
    case 0x26u:
      swift_bridgeObjectRelease();
      uint64_t v61 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v62 = v8 + v61[5];
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v62, 1, v4)) {
        v5(v62, v4);
      }
      uint64_t v63 = v8 + v61[7];
      uint64_t v29 = sub_253B059D0();
      uint64_t v64 = (void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
      uint64_t v65 = v63;
      uint64_t v32 = *v64;
      (*v64)(v65, v29);
      uint64_t v66 = v8 + v61[8];
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v66, 1, v29)) {
        goto LABEL_119;
      }
      uint64_t v35 = v66;
      goto LABEL_72;
    case 0x27u:
      v5(v8, v4);
      uint64_t v68 = type metadata accessor for ClientUndoRedoRequest(0);
      uint64_t v69 = v8 + *(int *)(v68 + 24);
      uint64_t v70 = sub_253B059D0();
      uint64_t v71 = (void (**)(uint64_t, uint64_t))(*(void *)(v70 - 8) + 8);
      uint64_t v72 = v69;
      uint64_t v32 = *v71;
      (*v71)(v72, v70);
      uint64_t v73 = v8 + *(int *)(v68 + 28);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v73, 1, v70)) {
        goto LABEL_119;
      }
      uint64_t v35 = v73;
      uint64_t v67 = v70;
      goto LABEL_75;
    case 0x28u:
      uint64_t v74 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(v8, v74);
      uint64_t v75 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v76 = v8 + *(int *)(v75 + 20);
      uint64_t v77 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8))(v76, v77);
      v8 += *(int *)(v75 + 24);
      uint64_t v24 = sub_253B059D0();
LABEL_102:
      uint64_t v23 = v24;
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
      uint64_t v18 = v8;
LABEL_103:
      v19(v18, v23);
      goto LABEL_119;
    case 0x29u:
      uint64_t v78 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v8, v78);
      uint64_t v60 = type metadata accessor for TypeConversionResult(0);
LABEL_78:
      uint64_t v79 = v60;
      uint64_t v119 = v8 + *(int *)(v60 + 20);
      uint64_t v80 = sub_253B059D0();
      uint64_t v81 = *(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8);
      v81(v119, v80);
      v81(v8 + *(int *)(v79 + 24), v80);
      goto LABEL_119;
    case 0x2Au:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v82 = v8 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      uint64_t v83 = sub_253B08270();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v82, 1, v83)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v82, v83);
      }
      goto LABEL_117;
    case 0x2Cu:
      uint64_t v84 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v8, v84);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_118;
    default:
      goto LABEL_119;
  }
}

char *initializeWithCopy for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v6;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 2u:
    case 4u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 5u:
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v7;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_172;
    case 9u:
      uint64_t v8 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v8;
      uint64_t v9 = a2 + 16;
      uint64_t v10 = *((void *)a2 + 7);
      long long v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v11;
      *((void *)a1 + 7) = v10;
      uint64_t v12 = v11;
      long long v13 = **(void (***)(char *, char *, uint64_t))(v11 - 8);
      swift_bridgeObjectRetain();
      v13(a1 + 16, v9, v12);
      goto LABEL_172;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      uint64_t v14 = *((void *)a2 + 5);
      long long v15 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v15;
      *((void *)a1 + 5) = v14;
      (**(void (***)(void *, const void *))(v15 - 8))(a1, a2);
      goto LABEL_172;
    case 0x10u:
      uint64_t v16 = sub_253B055C0();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      v17(a1, a2, v16);
      uint64_t v18 = (int *)type metadata accessor for Session.Event(0);
      v17(&a1[v18[5]], &a2[v18[5]], v16);
      uint64_t v19 = v18[6];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&a2[v19], 1, v16))
      {
        uint64_t v22 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        v17(v20, v21, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v20, 0, 1, v16);
      }
      break;
    case 0x13u:
      uint64_t v23 = *((void *)a2 + 3);
      *((void *)a1 + 3) = v23;
      (**(void (***)(void *, const void *))(v23 - 8))(a1, a2);
      goto LABEL_172;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
  uint64_t v24 = v18[7];
  uint64_t v25 = (uint64_t)&a1[v24];
  uint64_t v26 = (uint64_t)&a2[v24];
  uint64_t v27 = type metadata accessor for Session.Event.Payload(0);
  uint64_t v403 = v16;
  uint64_t v404 = (void (*)(void *, const void *, uint64_t))v17;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v28 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v25, v26, v28);
      uint64_t v29 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v30 = (void *)(v25 + v29);
      uint64_t v31 = (const void *)(v26 + v29);
      uint64_t v32 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v31, 1, v32))
      {
        uint64_t v33 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v30, 0, 1, v32);
      }
      goto LABEL_170;
    case 1u:
      uint64_t v34 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v34;
      *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
      uint64_t v35 = type metadata accessor for TextQuery(0);
      uint64_t v36 = *(int *)(v35 + 24);
      __dstj = (void *)(v25 + v36);
      uint64_t v374 = (void *)(v26 + v36);
      uint64_t v37 = sub_253B059D0();
      uint64_t v38 = *(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      v38(__dstj, v374, v37);
      uint64_t v39 = *(int *)(v35 + 28);
      uint64_t v40 = (void *)(v25 + v39);
      uint64_t v41 = (void *)(v26 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 2u:
      *(void *)uint64_t v25 = *(void *)v26;
      *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
      uint64_t v43 = *(void *)(v26 + 24);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      *(void *)(v25 + 24) = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 3u:
      __dst = (void *)type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)uint64_t v25 = *(void *)v26;
          swift_bridgeObjectRetain();
          goto LABEL_112;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v45 = *(void *)(v26 + 8);
          *(void *)uint64_t v25 = *(void *)v26;
          *(void *)(v25 + 8) = v45;
          uint64_t v46 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v371 = v26 + v46;
          uint64_t v375 = (void *)(v25 + v46);
          uint64_t v47 = sub_253B059D0();
          uint64_t v48 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
          swift_bridgeObjectRetain();
          v48(v375, v371, v47);
          uint64_t v16 = v403;
LABEL_112:
          swift_storeEnumTagMultiPayload();
          goto LABEL_145;
        }
        memcpy((void *)v25, (const void *)v26, *(void *)(*(__dst - 1) + 64));
LABEL_145:
        uint64_t v313 = type metadata accessor for Request(0);
        *(unsigned char *)(v25 + *(int *)(v313 + 20)) = *(unsigned char *)(v26 + *(int *)(v313 + 20));
        v383 = (int *)v313;
        uint64_t v314 = *(int *)(v313 + 24);
        __dstuint64_t i = (void *)(v25 + v314);
        uint64_t v315 = (void *)(v26 + v314);
        uint64_t v316 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v315, 1, v316))
        {
          uint64_t v317 = sub_253462A5C(&qword_269CDBB20);
          memcpy(__dsti, v315, *(void *)(*(void *)(v317 - 8) + 64));
        }
        else
        {
          uint64_t v370 = v315;
          uint64_t v373 = v316;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v318 = v315[1];
              uint64_t v319 = (uint64_t)__dsti;
              *__dstuint64_t i = *v315;
              __dsti[1] = v318;
              *((_WORD *)__dsti + 8) = *((_WORD *)v315 + 8);
              swift_bridgeObjectRetain();
              uint64_t v320 = v373;
              goto LABEL_162;
            case 1u:
              uint64_t v327 = v315[1];
              uint64_t v319 = (uint64_t)__dsti;
              *__dstuint64_t i = *v315;
              __dsti[1] = v327;
              swift_bridgeObjectRetain();
              uint64_t v320 = v373;
              goto LABEL_162;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v328 = v315[1];
              uint64_t v319 = (uint64_t)__dsti;
              *__dstuint64_t i = *v315;
              __dsti[1] = v328;
              *((unsigned char *)__dsti + 16) = *((unsigned char *)v315 + 16);
              swift_bridgeObjectRetain();
              uint64_t v320 = v373;
              goto LABEL_162;
            case 6u:
              uint64_t v329 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v329 - 8) + 16))(__dsti, v315, v329);
              uint64_t v330 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v331 = (char *)__dsti + v330;
              v332 = (char *)v315 + v330;
              uint64_t v319 = (uint64_t)__dsti;
              *(void *)uint64_t v331 = *(void *)v332;
              v331[8] = v332[8];
              uint64_t v320 = v373;
LABEL_162:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              uint64_t v320 = v316;
              uint64_t v319 = (uint64_t)__dsti;
              memcpy(__dsti, v370, *(void *)(*(void *)(v373 - 8) + 64));
              break;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v319, 0, 1, v320);
        }
        uint64_t v333 = v383[7];
        uint64_t v334 = (void *)(v25 + v333);
        uint64_t v335 = (const void *)(v26 + v333);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26 + v333, 1, v16))
        {
          uint64_t v336 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v334, v335, *(void *)(*(void *)(v336 - 8) + 64));
        }
        else
        {
          v404(v334, v335, v16);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v334, 0, 1, v16);
        }
        uint64_t v337 = v383[8];
        uint64_t v219 = v25 + v337;
        uint64_t v220 = v26 + v337;
        uint64_t v221 = *(void *)(v220 + 8);
        if (!v221)
        {
          *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
          *(void *)(v219 + 16) = *(void *)(v220 + 16);
          goto LABEL_170;
        }
        goto LABEL_168;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v16))
      {
        uint64_t v270 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v270 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v16);
      }
      uint64_t v275 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v17((char *)(v25 + v275[5]), (char *)(v26 + v275[5]), v16);
      uint64_t v276 = v275[6];
      uint64_t v277 = (void *)(v25 + v276);
      uint64_t v278 = (const void *)(v26 + v276);
      uint64_t v279 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v280 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v280 - 8) + 16))(v277, v278, v280);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
      }
      uint64_t v281 = v275[7];
      uint64_t v282 = v25 + v281;
      uint64_t v283 = v26 + v281;
      uint64_t v284 = sub_253B059D0();
      uint64_t v285 = *(void (**)(uint64_t, uint64_t))(*(void *)(v284 - 8) + 16);
      v381 = (void *)v284;
      v285(v282, v283);
      uint64_t v286 = v275[8];
      uint64_t v287 = (void *)(v25 + v286);
      uint64_t v288 = (void *)(v26 + v286);
      uint64_t v289 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v290 = swift_getEnumCaseMultiPayload();
      if (v290 == 1)
      {
        *uint64_t v287 = *v288;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v290)
        {
          memcpy(v287, v288, *(void *)(*(void *)(v289 - 8) + 64));
          goto LABEL_144;
        }
        uint64_t v291 = v288[1];
        *uint64_t v287 = *v288;
        v287[1] = v291;
        uint64_t v292 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v368 = (char *)v287 + v292;
        uint64_t v293 = (char *)v288 + v292;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v285)(v368, v293, v381);
      }
      swift_storeEnumTagMultiPayload();
LABEL_144:
      swift_storeEnumTagMultiPayload();
      uint64_t v16 = v403;
      goto LABEL_145;
    case 4u:
      uint64_t v49 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v49;
      uint64_t v50 = *(void *)(v26 + 24);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      *(void *)(v25 + 24) = v50;
      uint64_t v51 = *(void *)(v26 + 40);
      *(void *)(v25 + 32) = *(void *)(v26 + 32);
      *(void *)(v25 + 40) = v51;
      *(void *)(v25 + 48) = *(void *)(v26 + 48);
      *(unsigned char *)(v25 + 56) = *(unsigned char *)(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 5u:
      uint64_t v52 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v25, v26, v52);
      int v53 = (int *)type metadata accessor for Action(0);
      uint64_t v54 = v53[5];
      uint64_t v55 = (void *)(v25 + v54);
      uint64_t v56 = (uint64_t *)(v26 + v54);
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      *uint64_t v55 = v58;
      v55[1] = v57;
      *(unsigned char *)(v25 + v53[6]) = *(unsigned char *)(v26 + v53[6]);
      *(void *)(v25 + v53[7]) = *(void *)(v26 + v53[7]);
      uint64_t v59 = v53[8];
      uint64_t v60 = (void *)(v25 + v59);
      uint64_t v61 = (void *)(v26 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      uint64_t v63 = v53[9];
      uint64_t v64 = (void *)(v25 + v63);
      uint64_t v65 = (void *)(v26 + v63);
      uint64_t v66 = v65[1];
      *uint64_t v64 = *v65;
      v64[1] = v66;
      uint64_t v67 = v65[3];
      v64[2] = v65[2];
      v64[3] = v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 6u:
      uint64_t v68 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v68))
      {
        uint64_t v69 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v25, v26, v68);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v68);
      }
      uint64_t v194 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v25 + *(int *)(v194 + 20), v26 + *(int *)(v194 + 20), v68);
      goto LABEL_170;
    case 7u:
      uint64_t v70 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v25, v26, v70);
      uint64_t v71 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v72 = v71[5];
      uint64_t v73 = (void *)(v25 + v72);
      uint64_t v74 = (uint64_t *)(v26 + v72);
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      *uint64_t v73 = v76;
      v73[1] = v75;
      *(void *)(v25 + v71[6]) = *(void *)(v26 + v71[6]);
      uint64_t v77 = v71[7];
      uint64_t v78 = (void *)(v25 + v77);
      uint64_t v79 = (void *)(v26 + v77);
      uint64_t v80 = v79[1];
      *uint64_t v78 = *v79;
      v78[1] = v80;
      uint64_t v81 = v71[8];
      uint64_t v82 = (void *)(v25 + v81);
      uint64_t v83 = (void *)(v26 + v81);
      uint64_t v84 = v83[1];
      void *v82 = *v83;
      v82[1] = v84;
      *(void *)(v25 + v71[9]) = *(void *)(v26 + v71[9]);
      *(void *)(v25 + v71[10]) = *(void *)(v26 + v71[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 8u:
      uint64_t v85 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v25, v26, v85);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v25 + *(int *)(Step + 20)) = *(void *)(v26 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 9u:
      uint64_t v87 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v25, v26, v87);
      uint64_t v88 = type metadata accessor for VariableStep(0);
      *(void *)(v25 + *(int *)(v88 + 20)) = *(void *)(v26 + *(int *)(v88 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v25 = *(void *)v26;
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v115 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v115;
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0xCu:
      uint64_t v89 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v89;
      uint64_t v90 = *(void *)(v26 + 24);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      *(void *)(v25 + 24) = v90;
      uint64_t v91 = *(void *)(v26 + 32);
      uint64_t v92 = *(void *)(v26 + 40);
      *(void *)(v25 + 32) = v91;
      *(void *)(v25 + 40) = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v271 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v271 - 8) + 16))(v25, v26, v271);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v272 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v272)) {
            goto LABEL_125;
          }
          uint64_t v273 = type metadata accessor for PlannerError();
          goto LABEL_119;
        case 3u:
          uint64_t v272 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v272))
          {
            uint64_t v273 = type metadata accessor for ExecutorError();
LABEL_119:
            memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v273 - 8) + 64));
          }
          else
          {
LABEL_125:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 16))(v25, v26, v272);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v272);
          }
          break;
        default:
          uint64_t v93 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v25, v26, v93);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_170;
    case 0xEu:
      uint64_t v94 = *(void *)v26;
      unint64_t v95 = *(void *)(v26 + 8);
      sub_25348A9C8(*(void *)v26, v95);
      *(void *)uint64_t v25 = v94;
      *(void *)(v25 + 8) = v95;
      uint64_t v96 = *(void *)(v26 + 16);
      unint64_t v97 = *(void *)(v26 + 24);
      sub_25348A9C8(v96, v97);
      *(void *)(v25 + 16) = v96;
      *(void *)(v25 + 24) = v97;
      uint64_t v98 = *(void *)(v26 + 40);
      *(void *)(v25 + 32) = *(void *)(v26 + 32);
      *(void *)(v25 + 40) = v98;
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0xFu:
      uint64_t v99 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v25, v26, v99);
      goto LABEL_170;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v16))
      {
        uint64_t v100 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v16);
      }
      uint64_t v248 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
      long long v249 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v248(v25 + v249[5], v26 + v249[5], v16);
      uint64_t v250 = v249[6];
      uint64_t v251 = (void *)(v25 + v250);
      uint64_t v252 = (const void *)(v26 + v250);
      uint64_t v253 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      uint64_t v385 = v18;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v254 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v254 - 8) + 16))(v251, v252, v254);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
      }
      uint64_t v255 = v249[7];
      uint64_t v256 = v25 + v255;
      uint64_t v257 = v26 + v255;
      uint64_t v258 = sub_253B059D0();
      uint64_t v259 = *(void (**)(uint64_t, uint64_t))(*(void *)(v258 - 8) + 16);
      __dsth = (void *)v258;
      v259(v256, v257);
      uint64_t v260 = v249[8];
      uint64_t v261 = (void *)(v25 + v260);
      uint64_t v262 = (void *)(v26 + v260);
      uint64_t v263 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v264 = swift_getEnumCaseMultiPayload();
      if (v264 == 1)
      {
        *uint64_t v261 = *v262;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v264)
        {
          memcpy(v261, v262, *(void *)(*(void *)(v263 - 8) + 64));
LABEL_108:
          swift_storeEnumTagMultiPayload();
          uint64_t v18 = v385;
          goto LABEL_171;
        }
        uint64_t v265 = v262[1];
        *uint64_t v261 = *v262;
        v261[1] = v265;
        uint64_t v266 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v267 = (char *)v261 + v266;
        uint64_t v268 = (char *)v262 + v266;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v259)(v267, v268, __dsth);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_108;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v16))
      {
        uint64_t v101 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v101 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v16);
      }
      uint64_t v195 = type metadata accessor for ActionStepResult(0);
      uint64_t v196 = *(int *)(v195 + 20);
      uint64_t v197 = (void *)(v25 + v196);
      uint64_t v198 = (void *)(v26 + v196);
      uint64_t v199 = v198[1];
      *uint64_t v197 = *v198;
      v197[1] = v199;
      __dstf = (int *)v195;
      uint64_t v200 = *(int *)(v195 + 24);
      uint64_t v201 = v25 + v200;
      uint64_t v380 = (char *)(v26 + v200);
      uint64_t v202 = sub_253B05AB0();
      uint64_t v203 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v202 - 8) + 16);
      swift_bridgeObjectRetain();
      v203(v201, v380, v202);
      uint64_t v204 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v205 = (void *)(v201 + v204);
      uint64_t v206 = &v380[v204];
      uint64_t v207 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v206, 1, v207))
      {
        uint64_t v208 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v205, v206, *(void *)(*(void *)(v208 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v207 - 8) + 16))(v205, v206, v207);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v205, 0, 1, v207);
      }
      uint64_t v233 = __dstf[7];
      uint64_t v234 = (void *)(v25 + v233);
      uint64_t v235 = (void *)(v26 + v233);
      uint64_t v236 = v235[1];
      void *v234 = *v235;
      v234[1] = v236;
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x12u:
      *(void *)uint64_t v25 = *(void *)v26;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v103 = *(int *)(StepResults + 20);
      __dstk = (void *)(v25 + v103);
      uint64_t v376 = (void *)(v26 + v103);
      uint64_t v104 = sub_253B059D0();
      int v105 = *(void (**)(void *, void *, uint64_t))(*(void *)(v104 - 8) + 16);
      swift_bridgeObjectRetain();
      v105(__dstk, v376, v104);
      v404((void *)(v25 + *(int *)(StepResults + 24)), (const void *)(v26 + *(int *)(StepResults + 24)), v403);
      goto LABEL_170;
    case 0x13u:
      uint64_t v106 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(v25, v26, v106);
      goto LABEL_170;
    case 0x14u:
      uint64_t v107 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 16))(v25, v26, v107);
      uint64_t v108 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v25 + v108[5]) = *(void *)(v26 + v108[5]);
      *(void *)(v25 + v108[6]) = *(void *)(v26 + v108[6]);
      *(void *)(v25 + v108[7]) = *(void *)(v26 + v108[7]);
      *(unsigned char *)(v25 + v108[8]) = *(unsigned char *)(v26 + v108[8]);
      *(unsigned char *)(v25 + v108[9]) = *(unsigned char *)(v26 + v108[9]);
      *(unsigned char *)(v25 + v108[10]) = *(unsigned char *)(v26 + v108[10]);
      uint64_t v109 = v108[11];
      uint64_t v110 = (void *)(v25 + v109);
      uint64_t v111 = (void *)(v26 + v109);
      uint64_t v112 = v111[1];
      *uint64_t v110 = *v111;
      v110[1] = v112;
      uint64_t v113 = v111[3];
      v110[2] = v111[2];
      v110[3] = v113;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x16u:
    case 0x24u:
      uint64_t v114 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v114;
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x1Bu:
      uint64_t v116 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v116;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x1Cu:
      uint64_t v117 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v117;
      uint64_t v118 = *(void *)(v26 + 24);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      *(void *)(v25 + 24) = v118;
      *(_DWORD *)(v25 + 32) = *(_DWORD *)(v26 + 32);
      uint64_t v120 = *(void *)(v26 + 40);
      uint64_t v119 = *(void *)(v26 + 48);
      *(void *)(v25 + 40) = v120;
      *(void *)(v25 + 48) = v119;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x1Eu:
      uint64_t v121 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 16))(v25, v26, v121);
      goto LABEL_170;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v16))
      {
        uint64_t v122 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v122 - 8) + 64));
      }
      else
      {
        v17((char *)v25, (char *)v26, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v16);
      }
      uint64_t v209 = type metadata accessor for StatementResult(0);
      uint64_t v210 = *(int *)(v209 + 20);
      uint64_t v211 = v25 + v210;
      uint64_t v212 = v26 + v210;
      uint64_t v213 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 16))(v211, v212, v213);
      uint64_t v214 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      __dstg = (void *)(v211 + v214);
      uint64_t v215 = (const void *)(v212 + v214);
      uint64_t v216 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v215, 1, v216))
      {
        uint64_t v217 = sub_253462A5C(&qword_269CDBB28);
        memcpy(__dstg, v215, *(void *)(*(void *)(v217 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v216 - 8) + 16))(__dstg, v215, v216);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstg, 0, 1, v216);
      }
      uint64_t v237 = *(int *)(v209 + 24);
      __dsto = (void *)(v25 + v237);
      uint64_t v238 = v26 + v237;
      uint64_t v239 = sub_253B059D0();
      uint64_t v240 = (int *)v209;
      uint64_t v241 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v239 - 8) + 16);
      v241(__dsto, v238, v239);
      v241((void *)(v25 + v240[7]), v26 + v240[7], v239);
      v241((void *)(v25 + v240[8]), v26 + v240[8], v239);
      uint64_t v242 = v240[9];
      uint64_t v243 = (void *)(v25 + v242);
      uint64_t v244 = (void *)(v26 + v242);
      uint64_t v245 = v244[1];
      if (v245)
      {
        void *v243 = *v244;
        v243[1] = v245;
        uint64_t v246 = v244[3];
        v243[2] = v244[2];
        v243[3] = v246;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v247 = *((_OWORD *)v244 + 1);
        *(_OWORD *)uint64_t v243 = *(_OWORD *)v244;
        *((_OWORD *)v243 + 1) = v247;
      }
      goto LABEL_170;
    case 0x20u:
      uint64_t v123 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v123;
      uint64_t v124 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v125 = *(int *)(v124 + 20);
      __dsta = (void *)(v25 + v125);
      uint64_t v126 = (const void *)(v26 + v125);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v126, 1, v16))
      {
        uint64_t v127 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dsta, v126, *(void *)(*(void *)(v127 - 8) + 64));
      }
      else
      {
        v404(__dsta, v126, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v16);
      }
      uint64_t v218 = *(int *)(v124 + 24);
      uint64_t v219 = v25 + v218;
      uint64_t v220 = v26 + v218;
      uint64_t v221 = *(void *)(v220 + 8);
      if (v221) {
        goto LABEL_168;
      }
      *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
      *(void *)(v219 + 16) = *(void *)(v220 + 16);
      goto LABEL_170;
    case 0x21u:
      *(void *)uint64_t v25 = *(void *)v26;
      uint64_t v128 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v129 = *(int *)(v128 + 20);
      __dstb = (void *)(v25 + v129);
      uint64_t v130 = (const void *)(v26 + v129);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v130, 1, v16))
      {
        uint64_t v131 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dstb, v130, *(void *)(*(void *)(v131 - 8) + 64));
      }
      else
      {
        v404(__dstb, v130, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstb, 0, 1, v16);
      }
      uint64_t v269 = *(int *)(v128 + 24);
      uint64_t v219 = v25 + v269;
      uint64_t v220 = v26 + v269;
      uint64_t v221 = *(void *)(v220 + 8);
      if (v221) {
        goto LABEL_168;
      }
      *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
      *(void *)(v219 + 16) = *(void *)(v220 + 16);
      goto LABEL_170;
    case 0x22u:
      __dstc = (void *)type metadata accessor for RequestContent(0);
      int v132 = swift_getEnumCaseMultiPayload();
      switch(v132)
      {
        case 3:
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26, 1, v16))
          {
            uint64_t v274 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v274 - 8) + 64));
          }
          else
          {
            v17((char *)v25, (char *)v26, v16);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v25, 0, 1, v16);
          }
          uint64_t v294 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v17((char *)(v25 + v294[5]), (char *)(v26 + v294[5]), v16);
          uint64_t v295 = v294[6];
          uint64_t v296 = (void *)(v25 + v295);
          uint64_t v297 = (const void *)(v26 + v295);
          uint64_t v298 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v299 = sub_253B09120();
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v299 - 8) + 16))(v296, v297, v299);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v296, v297, *(void *)(*(void *)(v298 - 8) + 64));
          }
          uint64_t v300 = v294[7];
          uint64_t v301 = v25 + v300;
          uint64_t v302 = v26 + v300;
          uint64_t v303 = sub_253B059D0();
          uint64_t v304 = *(void (**)(uint64_t, uint64_t))(*(void *)(v303 - 8) + 16);
          uint64_t v382 = (void *)v303;
          v304(v301, v302);
          uint64_t v305 = v294[8];
          uint64_t v306 = (void *)(v25 + v305);
          uint64_t v307 = (void *)(v26 + v305);
          uint64_t v308 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          int v309 = swift_getEnumCaseMultiPayload();
          if (v309 == 1)
          {
            *uint64_t v306 = *v307;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v309)
            {
              memcpy(v306, v307, *(void *)(*(void *)(v308 - 8) + 64));
              goto LABEL_152;
            }
            uint64_t v310 = v307[1];
            *uint64_t v306 = *v307;
            v306[1] = v310;
            uint64_t v311 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v369 = (char *)v306 + v311;
            uint64_t v312 = (char *)v307 + v311;
            swift_bridgeObjectRetain();
            ((void (*)(char *, char *, void *))v304)(v369, v312, v382);
          }
          swift_storeEnumTagMultiPayload();
LABEL_152:
          swift_storeEnumTagMultiPayload();
          uint64_t v16 = v403;
          goto LABEL_153;
        case 2:
          *(void *)uint64_t v25 = *(void *)v26;
          swift_bridgeObjectRetain();
          goto LABEL_123;
        case 1:
          uint64_t v133 = *(void *)(v26 + 8);
          *(void *)uint64_t v25 = *(void *)v26;
          *(void *)(v25 + 8) = v133;
          uint64_t v134 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v372 = v26 + v134;
          v377 = (void *)(v25 + v134);
          uint64_t v135 = sub_253B059D0();
          uint64_t v136 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v135 - 8) + 16);
          swift_bridgeObjectRetain();
          v136(v377, v372, v135);
          uint64_t v16 = v403;
LABEL_123:
          swift_storeEnumTagMultiPayload();
          goto LABEL_153;
      }
      memcpy((void *)v25, (const void *)v26, *(void *)(*(__dstc - 1) + 64));
LABEL_153:
      uint64_t v321 = type metadata accessor for ExternalAgentRequest(0);
      uint64_t v322 = *(int *)(v321 + 20);
      uint64_t v323 = (void *)(v25 + v322);
      uint64_t v324 = (const void *)(v26 + v322);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v26 + v322, 1, v16))
      {
        uint64_t v325 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v323, v324, *(void *)(*(void *)(v325 - 8) + 64));
      }
      else
      {
        v404(v323, v324, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v323, 0, 1, v16);
      }
      uint64_t v326 = *(int *)(v321 + 24);
      uint64_t v219 = v25 + v326;
      uint64_t v220 = v26 + v326;
      uint64_t v221 = *(void *)(v220 + 8);
      if (v221)
      {
LABEL_168:
        *(void *)uint64_t v219 = *(void *)v220;
        *(void *)(v219 + 8) = v221;
        *(void *)(v219 + 16) = *(void *)(v220 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_170;
      }
      *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
      *(void *)(v219 + 16) = *(void *)(v220 + 16);
LABEL_170:
      swift_storeEnumTagMultiPayload();
LABEL_171:
      uint64_t v338 = v18[8];
      uint64_t v339 = &a1[v338];
      v340 = &a2[v338];
      uint64_t v341 = *((void *)v340 + 1);
      *(void *)uint64_t v339 = *(void *)v340;
      *((void *)v339 + 1) = v341;
      uint64_t v342 = v18[9];
      uint64_t v343 = &a1[v342];
      uint64_t v344 = &a2[v342];
      uint64_t v345 = *((void *)v344 + 1);
      *(void *)uint64_t v343 = *(void *)v344;
      *((void *)v343 + 1) = v345;
      uint64_t v346 = v18[10];
      uint64_t v347 = &a1[v346];
      uint64_t v348 = &a2[v346];
      uint64_t v349 = *((void *)v348 + 1);
      *(void *)uint64_t v347 = *(void *)v348;
      *((void *)v347 + 1) = v349;
      uint64_t v350 = v18[11];
      uint64_t v351 = &a1[v350];
      uint64_t v352 = &a2[v350];
      uint64_t v353 = *((void *)v352 + 1);
      *(void *)uint64_t v351 = *(void *)v352;
      *((void *)v351 + 1) = v353;
      uint64_t v354 = v18[12];
      uint64_t v355 = &a1[v354];
      uint64_t v356 = &a2[v354];
      uint64_t v357 = v18;
      uint64_t v358 = sub_253B05550();
      v402 = *(void (**)(char *, char *, uint64_t))(*(void *)(v358 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v402(v355, v356, v358);
      uint64_t v359 = (int *)type metadata accessor for Timepoint();
      *(void *)&v355[v359[5]] = *(void *)&v356[v359[5]];
      *(void *)&v355[v359[6]] = *(void *)&v356[v359[6]];
      v404(&v355[v359[7]], &v356[v359[7]], v403);
      uint64_t v360 = v357[13];
      uint64_t v361 = &a1[v360];
      uint64_t v362 = &a2[v360];
      uint64_t v363 = *((void *)v362 + 1);
      *(void *)uint64_t v361 = *(void *)v362;
      *((void *)v361 + 1) = v363;
      uint64_t v364 = v357[14];
      uint64_t v365 = &a1[v364];
      uint64_t v366 = &a2[v364];
      *(void *)uint64_t v365 = *(void *)v366;
      v365[8] = v366[8];
      *(void *)&a1[v357[15]] = *(void *)&a2[v357[15]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_172:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x23u:
      uint64_t v137 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16))(v25, v26, v137);
      uint64_t v138 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v139 = *(int *)(v138 + 20);
      uint64_t v140 = v25 + v139;
      uint64_t v141 = v26 + v139;
      uint64_t v142 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 16))(v140, v141, v142);
      *(void *)(v25 + *(int *)(v138 + 24)) = *(void *)(v26 + *(int *)(v138 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x25u:
      uint64_t v143 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 16))(v25, v26, v143);
      uint64_t v144 = type metadata accessor for ToolResolution(0);
      uint64_t v145 = *(int *)(v144 + 20);
      __dstl = (void *)(v25 + v145);
      uint64_t v146 = v26 + v145;
      uint64_t v147 = sub_253B059D0();
      uint64_t v148 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v147 - 8) + 16);
      v148(__dstl, v146, v147);
      v148((void *)(v25 + *(int *)(v144 + 24)), v26 + *(int *)(v144 + 24), v147);
      goto LABEL_170;
    case 0x26u:
      uint64_t v149 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v149;
      __dstd = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v150 = __dstd[5];
      uint64_t v378 = (void *)(v25 + v150);
      uint64_t v151 = (void *)(v26 + v150);
      swift_bridgeObjectRetain();
      v384 = v18;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v151, 1, v16))
      {
        uint64_t v152 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v378, v151, *(void *)(*(void *)(v152 - 8) + 64));
      }
      else
      {
        v17((char *)v378, (char *)v151, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v378, 0, 1, v16);
      }
      *(unsigned char *)(v25 + __dstd[6]) = *(unsigned char *)(v26 + __dstd[6]);
      uint64_t v222 = __dstd[7];
      uint64_t v223 = v25 + v222;
      uint64_t v224 = v26 + v222;
      uint64_t v225 = sub_253B059D0();
      uint64_t v226 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 16);
      uint64_t v227 = v224;
      uint64_t v228 = *v226;
      (*v226)(v223, v227, v225);
      uint64_t v229 = __dstd[8];
      uint64_t v230 = (void *)(v25 + v229);
      uint64_t v231 = (const void *)(v26 + v229);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v231, 1, v225))
      {
        uint64_t v232 = sub_253462A5C(&qword_269CDB460);
        memcpy(v230, v231, *(void *)(*(void *)(v232 - 8) + 64));
      }
      else
      {
        v228((uint64_t)v230, (uint64_t)v231, v225);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v230, 0, 1, v225);
      }
      uint64_t v18 = v384;
      goto LABEL_170;
    case 0x27u:
      uint64_t v385 = v18;
      v17((char *)v25, (char *)v26, v16);
      uint64_t v153 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v25 + v153[5]) = *(unsigned char *)(v26 + v153[5]);
      uint64_t v154 = v153[6];
      uint64_t v155 = v25 + v154;
      __dstm = (void *)(v26 + v154);
      uint64_t v156 = sub_253B059D0();
      uint64_t v157 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v156 - 8) + 16);
      v157(v155, __dstm, v156);
      uint64_t v158 = v153[7];
      uint64_t v159 = (void *)(v25 + v158);
      uint64_t v160 = (void *)(v26 + v158);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v160, 1, v156))
      {
        uint64_t v161 = sub_253462A5C(&qword_269CDB460);
        memcpy(v159, v160, *(void *)(*(void *)(v161 - 8) + 64));
      }
      else
      {
        v157((uint64_t)v159, v160, v156);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v159, 0, 1, v156);
      }
      goto LABEL_108;
    case 0x28u:
      uint64_t v162 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16))(v25, v26, v162);
      uint64_t v163 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v164 = *(int *)(v163 + 20);
      uint64_t v165 = v25 + v164;
      uint64_t v166 = v26 + v164;
      uint64_t v167 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 16))(v165, v166, v167);
      uint64_t v168 = *(int *)(v163 + 24);
      uint64_t v169 = v25 + v168;
      uint64_t v170 = v26 + v168;
      uint64_t v171 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 16))(v169, v170, v171);
      goto LABEL_170;
    case 0x29u:
      uint64_t v172 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 16))(v25, v26, v172);
      uint64_t v173 = type metadata accessor for TypeConversionResult(0);
      uint64_t v174 = *(int *)(v173 + 20);
      __dstn = (void *)(v25 + v174);
      uint64_t v175 = v26 + v174;
      uint64_t v176 = sub_253B059D0();
      uint64_t v177 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v176 - 8) + 16);
      v177(__dstn, v175, v176);
      v177((void *)(v25 + *(int *)(v173 + 24)), v26 + *(int *)(v173 + 24), v176);
      goto LABEL_170;
    case 0x2Au:
      uint64_t v178 = *(void *)(v26 + 8);
      *(void *)uint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v178;
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      __dste = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v179 = __dste[7];
      v379 = (void *)(v25 + v179);
      uint64_t v180 = (const void *)(v26 + v179);
      uint64_t v181 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v180, 1, v181))
      {
        uint64_t v182 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v379, v180, *(void *)(*(void *)(v182 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v181 - 8) + 16))(v379, v180, v181);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v379, 0, 1, v181);
      }
      *(void *)(v25 + __dste[8]) = *(void *)(v26 + __dste[8]);
      *(void *)(v25 + __dste[9]) = *(void *)(v26 + __dste[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    case 0x2Cu:
      uint64_t v183 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v183 - 8) + 16))(v25, v26, v183);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v185 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v186 = (void *)(v25 + v185);
      uint64_t v187 = (uint64_t *)(v26 + v185);
      uint64_t v189 = *v187;
      uint64_t v188 = v187[1];
      *uint64_t v186 = v189;
      v186[1] = v188;
      uint64_t v190 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v191 = v25 + v190;
      uint64_t v192 = (uint64_t *)(v26 + v190);
      uint64_t v193 = *v192;
      LOBYTE(v192) = *((unsigned char *)v192 + 8);
      *(void *)uint64_t v191 = v193;
      *(unsigned char *)(v191 + 8) = (_BYTE)v192;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_170;
    default:
      memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v27 - 8) + 64));
      goto LABEL_171;
  }
}

void *assignWithCopy for ODPEventPayload(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_25349CD08((uint64_t)a1, (void (*)(void))type metadata accessor for ODPEventPayload);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
    case 6u:
    case 7u:
    case 8u:
    case 0xEu:
    case 0xFu:
    case 0x11u:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      goto LABEL_173;
    case 2u:
    case 4u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_173;
    case 5u:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_173;
    case 9u:
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v6 = (char *)(a2 + 2);
      uint64_t v7 = a2[5];
      a1[5] = v7;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      uint64_t v8 = **(void (***)(void *, char *, uint64_t))(v7 - 8);
      swift_bridgeObjectRetain();
      v8(a1 + 2, v6, v7);
      goto LABEL_173;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x12u:
      uint64_t v9 = a2[3];
      a1[3] = v9;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      (**(void (***)(void *, const void *))(v9 - 8))(a1, a2);
      goto LABEL_173;
    case 0x10u:
      uint64_t v10 = sub_253B055C0();
      long long v11 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      uint64_t v12 = (int *)type metadata accessor for Session.Event(0);
      v11((char *)a1 + v12[5], (char *)a2 + v12[5], v10);
      uint64_t v13 = v12[6];
      uint64_t v14 = (char *)a1 + v13;
      long long v15 = (char *)a2 + v13;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2 + v13, 1, v10))
      {
        uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        v11(v14, v15, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v10);
      }
      break;
    case 0x13u:
      uint64_t v17 = a2[3];
      a1[3] = v17;
      (**(void (***)(void *, const void *))(v17 - 8))(a1, a2);
      goto LABEL_173;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
  uint64_t v18 = v12[7];
  uint64_t v19 = (uint64_t)a1 + v18;
  uint64_t v20 = (uint64_t)a2 + v18;
  uint64_t v21 = type metadata accessor for Session.Event.Payload(0);
  uint64_t v350 = v10;
  uint64_t v351 = v11;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v22 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v19, v20, v22);
      uint64_t v23 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v24 = (void *)(v19 + v23);
      uint64_t v25 = (const void *)(v20 + v23);
      uint64_t v26 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v25, 1, v26))
      {
        uint64_t v27 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v24, 0, 1, v26);
      }
      goto LABEL_171;
    case 1u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
      uint64_t v28 = type metadata accessor for TextQuery(0);
      uint64_t v29 = *(int *)(v28 + 24);
      __dstj = (void *)(v19 + v29);
      uint64_t v321 = (void *)(v20 + v29);
      uint64_t v30 = sub_253B059D0();
      uint64_t v31 = *(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(__dstj, v321, v30);
      uint64_t v32 = *(int *)(v28 + 28);
      uint64_t v33 = (void *)(v19 + v32);
      uint64_t v34 = (void *)(v20 + v32);
      *uint64_t v33 = *v34;
      v33[1] = v34[1];
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 2u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      *(void *)(v19 + 24) = *(void *)(v20 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 3u:
      __dst = (void *)type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)uint64_t v19 = *(void *)v20;
          swift_bridgeObjectRetain();
          goto LABEL_113;
        }
        if (EnumCaseMultiPayload == 1)
        {
          *(void *)uint64_t v19 = *(void *)v20;
          *(void *)(v19 + 8) = *(void *)(v20 + 8);
          uint64_t v36 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v318 = v20 + v36;
          uint64_t v322 = (void *)(v19 + v36);
          uint64_t v37 = sub_253B059D0();
          uint64_t v38 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
          swift_bridgeObjectRetain();
          v38(v322, v318, v37);
          uint64_t v10 = v350;
LABEL_113:
          swift_storeEnumTagMultiPayload();
          goto LABEL_146;
        }
        memcpy((void *)v19, (const void *)v20, *(void *)(*(__dst - 1) + 64));
LABEL_146:
        uint64_t v264 = type metadata accessor for Request(0);
        *(unsigned char *)(v19 + *(int *)(v264 + 20)) = *(unsigned char *)(v20 + *(int *)(v264 + 20));
        __dstuint64_t i = (int *)v264;
        uint64_t v265 = *(int *)(v264 + 24);
        uint64_t v330 = (void *)(v19 + v265);
        uint64_t v266 = (void *)(v20 + v265);
        uint64_t v267 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v266, 1, v267))
        {
          uint64_t v268 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v330, v266, *(void *)(*(void *)(v268 - 8) + 64));
        }
        else
        {
          __src = v266;
          uint64_t v320 = v267;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v269 = (uint64_t)v330;
              *uint64_t v330 = *v266;
              v330[1] = v266[1];
              *((unsigned char *)v330 + 16) = *((unsigned char *)v266 + 16);
              *((unsigned char *)v330 + 17) = *((unsigned char *)v266 + 17);
              swift_bridgeObjectRetain();
              uint64_t v270 = v320;
              goto LABEL_163;
            case 1u:
              uint64_t v269 = (uint64_t)v330;
              *uint64_t v330 = *v266;
              v330[1] = v266[1];
              swift_bridgeObjectRetain();
              uint64_t v270 = v320;
              goto LABEL_163;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v269 = (uint64_t)v330;
              *uint64_t v330 = *v266;
              v330[1] = v266[1];
              *((unsigned char *)v330 + 16) = *((unsigned char *)v266 + 16);
              swift_bridgeObjectRetain();
              uint64_t v270 = v320;
              goto LABEL_163;
            case 6u:
              uint64_t v278 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v278 - 8) + 16))(v330, v266, v278);
              uint64_t v279 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v280 = (char *)v330 + v279;
              uint64_t v281 = (char *)v266 + v279;
              uint64_t v269 = (uint64_t)v330;
              char v282 = v281[8];
              *(void *)uint64_t v280 = *(void *)v281;
              v280[8] = v282;
              uint64_t v270 = v320;
LABEL_163:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              uint64_t v270 = v267;
              uint64_t v269 = (uint64_t)v330;
              memcpy(v330, __src, *(void *)(*(void *)(v320 - 8) + 64));
              break;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v269, 0, 1, v270);
        }
        uint64_t v283 = __dsti[7];
        uint64_t v284 = (void *)(v19 + v283);
        uint64_t v285 = (const void *)(v20 + v283);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20 + v283, 1, v10))
        {
          uint64_t v286 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v284, v285, *(void *)(*(void *)(v286 - 8) + 64));
        }
        else
        {
          v351(v284, v285, v10);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v284, 0, 1, v10);
        }
        uint64_t v287 = __dsti[8];
        uint64_t v176 = v19 + v287;
        uint64_t v177 = (long long *)(v20 + v287);
        if (!*((void *)v177 + 1))
        {
          long long v288 = *v177;
          *(void *)(v176 + 16) = *((void *)v177 + 2);
          *(_OWORD *)uint64_t v176 = v288;
          goto LABEL_171;
        }
        goto LABEL_169;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v10))
      {
        uint64_t v223 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v223 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v10);
      }
      uint64_t v228 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v11((void *)(v19 + v228[5]), (const void *)(v20 + v228[5]), v10);
      uint64_t v229 = v228[6];
      uint64_t v230 = (void *)(v19 + v229);
      uint64_t v231 = (const void *)(v20 + v229);
      uint64_t v232 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v233 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v233 - 8) + 16))(v230, v231, v233);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v230, v231, *(void *)(*(void *)(v232 - 8) + 64));
      }
      uint64_t v234 = v228[7];
      uint64_t v235 = v19 + v234;
      uint64_t v236 = v20 + v234;
      uint64_t v237 = sub_253B059D0();
      uint64_t v238 = *(void (**)(uint64_t, uint64_t))(*(void *)(v237 - 8) + 16);
      uint64_t v328 = (void *)v237;
      v238(v235, v236);
      uint64_t v239 = v228[8];
      uint64_t v240 = (void *)(v19 + v239);
      uint64_t v241 = (void *)(v20 + v239);
      uint64_t v242 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v243 = swift_getEnumCaseMultiPayload();
      if (v243 == 1)
      {
        *uint64_t v240 = *v241;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v243)
        {
          memcpy(v240, v241, *(void *)(*(void *)(v242 - 8) + 64));
          goto LABEL_145;
        }
        *uint64_t v240 = *v241;
        v240[1] = v241[1];
        uint64_t v244 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __srca = (char *)v240 + v244;
        uint64_t v245 = (char *)v241 + v244;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v238)(__srca, v245, v328);
      }
      swift_storeEnumTagMultiPayload();
LABEL_145:
      swift_storeEnumTagMultiPayload();
      uint64_t v10 = v350;
      goto LABEL_146;
    case 4u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      *(void *)(v19 + 24) = *(void *)(v20 + 24);
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      *(void *)(v19 + 40) = *(void *)(v20 + 40);
      *(void *)(v19 + 48) = *(void *)(v20 + 48);
      *(unsigned char *)(v19 + 56) = *(unsigned char *)(v20 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 5u:
      uint64_t v39 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v19, v20, v39);
      uint64_t v40 = (int *)type metadata accessor for Action(0);
      uint64_t v41 = v40[5];
      uint64_t v42 = (void *)(v19 + v41);
      uint64_t v43 = (void *)(v20 + v41);
      *uint64_t v42 = *v43;
      v42[1] = v43[1];
      *(unsigned char *)(v19 + v40[6]) = *(unsigned char *)(v20 + v40[6]);
      *(void *)(v19 + v40[7]) = *(void *)(v20 + v40[7]);
      uint64_t v44 = v40[8];
      uint64_t v45 = (void *)(v19 + v44);
      uint64_t v46 = (void *)(v20 + v44);
      *uint64_t v45 = *v46;
      v45[1] = v46[1];
      uint64_t v47 = v40[9];
      uint64_t v48 = (void *)(v19 + v47);
      uint64_t v49 = (void *)(v20 + v47);
      void *v48 = *v49;
      v48[1] = v49[1];
      v48[2] = v49[2];
      v48[3] = v49[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 6u:
      uint64_t v50 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v50))
      {
        uint64_t v51 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v19, v20, v50);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v50);
      }
      uint64_t v152 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v19 + *(int *)(v152 + 20), v20 + *(int *)(v152 + 20), v50);
      goto LABEL_171;
    case 7u:
      uint64_t v52 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v19, v20, v52);
      int v53 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v54 = v53[5];
      uint64_t v55 = (void *)(v19 + v54);
      uint64_t v56 = (void *)(v20 + v54);
      *uint64_t v55 = *v56;
      v55[1] = v56[1];
      *(void *)(v19 + v53[6]) = *(void *)(v20 + v53[6]);
      uint64_t v57 = v53[7];
      uint64_t v58 = (void *)(v19 + v57);
      uint64_t v59 = (void *)(v20 + v57);
      *uint64_t v58 = *v59;
      v58[1] = v59[1];
      uint64_t v60 = v53[8];
      uint64_t v61 = (void *)(v19 + v60);
      uint64_t v62 = (void *)(v20 + v60);
      *uint64_t v61 = *v62;
      v61[1] = v62[1];
      *(void *)(v19 + v53[9]) = *(void *)(v20 + v53[9]);
      *(void *)(v19 + v53[10]) = *(void *)(v20 + v53[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 8u:
      uint64_t v63 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v19, v20, v63);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v19 + *(int *)(Step + 20)) = *(void *)(v20 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 9u:
      uint64_t v65 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v19, v20, v65);
      uint64_t v66 = type metadata accessor for VariableStep(0);
      *(void *)(v19 + *(int *)(v66 + 20)) = *(void *)(v20 + *(int *)(v66 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v19 = *(void *)v20;
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0xCu:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      *(void *)(v19 + 24) = *(void *)(v20 + 24);
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      *(void *)(v19 + 40) = *(void *)(v20 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v224 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 16))(v19, v20, v224);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v225 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v225)) {
            goto LABEL_126;
          }
          uint64_t v226 = type metadata accessor for PlannerError();
          goto LABEL_120;
        case 3u:
          uint64_t v225 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v225))
          {
            uint64_t v226 = type metadata accessor for ExecutorError();
LABEL_120:
            memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v226 - 8) + 64));
          }
          else
          {
LABEL_126:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 16))(v19, v20, v225);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v225);
          }
          break;
        default:
          uint64_t v67 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v19, v20, v67);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_171;
    case 0xEu:
      uint64_t v68 = *(void *)v20;
      unint64_t v69 = *(void *)(v20 + 8);
      sub_25348A9C8(*(void *)v20, v69);
      *(void *)uint64_t v19 = v68;
      *(void *)(v19 + 8) = v69;
      uint64_t v70 = *(void *)(v20 + 16);
      unint64_t v71 = *(void *)(v20 + 24);
      sub_25348A9C8(v70, v71);
      *(void *)(v19 + 16) = v70;
      *(void *)(v19 + 24) = v71;
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      *(void *)(v19 + 40) = *(void *)(v20 + 40);
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0xFu:
      uint64_t v72 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v19, v20, v72);
      goto LABEL_171;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v10))
      {
        uint64_t v73 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v73 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v10);
      }
      uint64_t v202 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v351((void *)(v19 + v202[5]), (const void *)(v20 + v202[5]), v10);
      uint64_t v203 = v202[6];
      uint64_t v204 = (void *)(v19 + v203);
      uint64_t v205 = (const void *)(v20 + v203);
      uint64_t v206 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      v332 = v12;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v207 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v207 - 8) + 16))(v204, v205, v207);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v204, v205, *(void *)(*(void *)(v206 - 8) + 64));
      }
      uint64_t v208 = v202[7];
      uint64_t v209 = v19 + v208;
      uint64_t v210 = v20 + v208;
      uint64_t v211 = sub_253B059D0();
      uint64_t v212 = *(void (**)(uint64_t, uint64_t))(*(void *)(v211 - 8) + 16);
      __dsth = (void *)v211;
      v212(v209, v210);
      uint64_t v213 = v202[8];
      uint64_t v214 = (void *)(v19 + v213);
      uint64_t v215 = (void *)(v20 + v213);
      uint64_t v216 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v217 = swift_getEnumCaseMultiPayload();
      if (v217 == 1)
      {
        *uint64_t v214 = *v215;
        swift_bridgeObjectRetain();
        goto LABEL_107;
      }
      if (!v217)
      {
        *uint64_t v214 = *v215;
        v214[1] = v215[1];
        uint64_t v218 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v219 = (char *)v214 + v218;
        uint64_t v220 = (char *)v215 + v218;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v212)(v219, v220, __dsth);
LABEL_107:
        swift_storeEnumTagMultiPayload();
        goto LABEL_109;
      }
      memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
LABEL_109:
      swift_storeEnumTagMultiPayload();
      uint64_t v12 = v332;
LABEL_172:
      uint64_t v289 = v12[8];
      int v290 = (void *)((char *)a1 + v289);
      uint64_t v291 = (void *)((char *)a2 + v289);
      *int v290 = *v291;
      v290[1] = v291[1];
      uint64_t v292 = v12[9];
      uint64_t v293 = (void *)((char *)a1 + v292);
      uint64_t v294 = (void *)((char *)a2 + v292);
      *uint64_t v293 = *v294;
      v293[1] = v294[1];
      uint64_t v295 = v12[10];
      uint64_t v296 = (void *)((char *)a1 + v295);
      uint64_t v297 = (void *)((char *)a2 + v295);
      void *v296 = *v297;
      v296[1] = v297[1];
      uint64_t v298 = v12[11];
      uint64_t v299 = (void *)((char *)a1 + v298);
      uint64_t v300 = (void *)((char *)a2 + v298);
      *uint64_t v299 = *v300;
      v299[1] = v300[1];
      uint64_t v301 = v12[12];
      uint64_t v302 = (char *)a1 + v301;
      uint64_t v303 = (char *)a2 + v301;
      uint64_t v304 = v12;
      uint64_t v305 = sub_253B05550();
      uint64_t v349 = *(void (**)(char *, char *, uint64_t))(*(void *)(v305 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v349(v302, v303, v305);
      uint64_t v306 = (int *)type metadata accessor for Timepoint();
      *(void *)&v302[v306[5]] = *(void *)&v303[v306[5]];
      *(void *)&v302[v306[6]] = *(void *)&v303[v306[6]];
      v351(&v302[v306[7]], &v303[v306[7]], v350);
      uint64_t v307 = v304[13];
      uint64_t v308 = (void *)((char *)a1 + v307);
      int v309 = (void *)((char *)a2 + v307);
      *uint64_t v308 = *v309;
      v308[1] = v309[1];
      uint64_t v310 = v304[14];
      uint64_t v311 = (char *)a1 + v310;
      uint64_t v312 = (char *)a2 + v310;
      char v313 = v312[8];
      *(void *)uint64_t v311 = *(void *)v312;
      v311[8] = v313;
      *(void *)((char *)a1 + v304[15]) = *(void *)((char *)a2 + v304[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_173:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v10))
      {
        uint64_t v74 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v10);
      }
      uint64_t v153 = type metadata accessor for ActionStepResult(0);
      uint64_t v154 = *(int *)(v153 + 20);
      uint64_t v155 = (void *)(v19 + v154);
      uint64_t v156 = (void *)(v20 + v154);
      *uint64_t v155 = *v156;
      v155[1] = v156[1];
      __dstf = (int *)v153;
      uint64_t v157 = *(int *)(v153 + 24);
      uint64_t v158 = v19 + v157;
      uint64_t v327 = (char *)(v20 + v157);
      uint64_t v159 = sub_253B05AB0();
      uint64_t v160 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v159 - 8) + 16);
      swift_bridgeObjectRetain();
      v160(v158, v327, v159);
      uint64_t v161 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v162 = (void *)(v158 + v161);
      uint64_t v163 = &v327[v161];
      uint64_t v164 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v163, 1, v164))
      {
        uint64_t v165 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v162, v163, *(void *)(*(void *)(v165 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v164 - 8) + 16))(v162, v163, v164);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v162, 0, 1, v164);
      }
      uint64_t v189 = __dstf[7];
      uint64_t v190 = (void *)(v19 + v189);
      uint64_t v191 = (void *)(v20 + v189);
      void *v190 = *v191;
      v190[1] = v191[1];
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x12u:
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v76 = *(int *)(StepResults + 20);
      __dstk = (void *)(v19 + v76);
      uint64_t v323 = (void *)(v20 + v76);
      uint64_t v77 = sub_253B059D0();
      uint64_t v78 = *(void (**)(void *, void *, uint64_t))(*(void *)(v77 - 8) + 16);
      swift_bridgeObjectRetain();
      v78(__dstk, v323, v77);
      v351((void *)(v19 + *(int *)(StepResults + 24)), (const void *)(v20 + *(int *)(StepResults + 24)), v350);
      goto LABEL_171;
    case 0x13u:
      uint64_t v79 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v19, v20, v79);
      goto LABEL_171;
    case 0x14u:
      uint64_t v80 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v19, v20, v80);
      uint64_t v81 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v19 + v81[5]) = *(void *)(v20 + v81[5]);
      *(void *)(v19 + v81[6]) = *(void *)(v20 + v81[6]);
      *(void *)(v19 + v81[7]) = *(void *)(v20 + v81[7]);
      *(unsigned char *)(v19 + v81[8]) = *(unsigned char *)(v20 + v81[8]);
      *(unsigned char *)(v19 + v81[9]) = *(unsigned char *)(v20 + v81[9]);
      *(unsigned char *)(v19 + v81[10]) = *(unsigned char *)(v20 + v81[10]);
      uint64_t v82 = v81[11];
      uint64_t v83 = (void *)(v19 + v82);
      uint64_t v84 = (void *)(v20 + v82);
      *uint64_t v83 = *v84;
      v83[1] = v84[1];
      void v83[2] = v84[2];
      v83[3] = v84[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x16u:
    case 0x24u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x1Bu:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x1Cu:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      *(void *)(v19 + 24) = *(void *)(v20 + 24);
      *(_DWORD *)(v19 + 32) = *(_DWORD *)(v20 + 32);
      *(void *)(v19 + 40) = *(void *)(v20 + 40);
      *(void *)(v19 + 48) = *(void *)(v20 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x1Eu:
      uint64_t v85 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v19, v20, v85);
      goto LABEL_171;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v10))
      {
        uint64_t v86 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v86 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v10);
      }
      uint64_t v166 = type metadata accessor for StatementResult(0);
      uint64_t v167 = *(int *)(v166 + 20);
      uint64_t v168 = v19 + v167;
      uint64_t v169 = v20 + v167;
      uint64_t v170 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 16))(v168, v169, v170);
      uint64_t v171 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      __dstg = (void *)(v168 + v171);
      uint64_t v172 = (const void *)(v169 + v171);
      uint64_t v173 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v172, 1, v173))
      {
        uint64_t v174 = sub_253462A5C(&qword_269CDBB28);
        memcpy(__dstg, v172, *(void *)(*(void *)(v174 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v173 - 8) + 16))(__dstg, v172, v173);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstg, 0, 1, v173);
      }
      uint64_t v192 = *(int *)(v166 + 24);
      __dsto = (void *)(v19 + v192);
      uint64_t v193 = v20 + v192;
      uint64_t v194 = sub_253B059D0();
      uint64_t v195 = (int *)v166;
      uint64_t v196 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v194 - 8) + 16);
      v196(__dsto, v193, v194);
      v196((void *)(v19 + v195[7]), v20 + v195[7], v194);
      v196((void *)(v19 + v195[8]), v20 + v195[8], v194);
      uint64_t v197 = v195[9];
      uint64_t v198 = (void *)(v19 + v197);
      uint64_t v199 = (void *)(v20 + v197);
      if (v199[1])
      {
        *uint64_t v198 = *v199;
        v198[1] = v199[1];
        v198[2] = v199[2];
        v198[3] = v199[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v201 = *((_OWORD *)v199 + 1);
        *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
        *((_OWORD *)v198 + 1) = v201;
      }
      goto LABEL_171;
    case 0x20u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      uint64_t v87 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v88 = *(int *)(v87 + 20);
      __dsta = (void *)(v19 + v88);
      uint64_t v89 = (const void *)(v20 + v88);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v89, 1, v10))
      {
        uint64_t v90 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dsta, v89, *(void *)(*(void *)(v90 - 8) + 64));
      }
      else
      {
        v351(__dsta, v89, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v10);
      }
      uint64_t v175 = *(int *)(v87 + 24);
      uint64_t v176 = v19 + v175;
      uint64_t v177 = (long long *)(v20 + v175);
      if (*((void *)v177 + 1)) {
        goto LABEL_169;
      }
      long long v200 = *v177;
      *(void *)(v176 + 16) = *((void *)v177 + 2);
      *(_OWORD *)uint64_t v176 = v200;
      goto LABEL_171;
    case 0x21u:
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t v91 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v92 = *(int *)(v91 + 20);
      __dstb = (void *)(v19 + v92);
      uint64_t v93 = (const void *)(v20 + v92);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v93, 1, v10))
      {
        uint64_t v94 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(__dstb, v93, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        v351(__dstb, v93, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dstb, 0, 1, v10);
      }
      uint64_t v221 = *(int *)(v91 + 24);
      uint64_t v176 = v19 + v221;
      uint64_t v177 = (long long *)(v20 + v221);
      if (*((void *)v177 + 1)) {
        goto LABEL_169;
      }
      long long v222 = *v177;
      *(void *)(v176 + 16) = *((void *)v177 + 2);
      *(_OWORD *)uint64_t v176 = v222;
      goto LABEL_171;
    case 0x22u:
      __dstc = (void *)type metadata accessor for RequestContent(0);
      int v95 = swift_getEnumCaseMultiPayload();
      if (v95 != 3)
      {
        if (v95 == 2)
        {
          *(void *)uint64_t v19 = *(void *)v20;
          swift_bridgeObjectRetain();
          goto LABEL_124;
        }
        if (v95 == 1)
        {
          *(void *)uint64_t v19 = *(void *)v20;
          *(void *)(v19 + 8) = *(void *)(v20 + 8);
          uint64_t v96 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v319 = v20 + v96;
          uint64_t v324 = (void *)(v19 + v96);
          uint64_t v97 = sub_253B059D0();
          uint64_t v98 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16);
          swift_bridgeObjectRetain();
          v98(v324, v319, v97);
          uint64_t v10 = v350;
LABEL_124:
          swift_storeEnumTagMultiPayload();
          goto LABEL_154;
        }
        memcpy((void *)v19, (const void *)v20, *(void *)(*(__dstc - 1) + 64));
LABEL_154:
        uint64_t v271 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v272 = *(int *)(v271 + 20);
        uint64_t v273 = (void *)(v19 + v272);
        uint64_t v274 = (const void *)(v20 + v272);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20 + v272, 1, v10))
        {
          uint64_t v275 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v273, v274, *(void *)(*(void *)(v275 - 8) + 64));
        }
        else
        {
          v351(v273, v274, v10);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v273, 0, 1, v10);
        }
        uint64_t v276 = *(int *)(v271 + 24);
        uint64_t v176 = v19 + v276;
        uint64_t v177 = (long long *)(v20 + v276);
        if (!*((void *)v177 + 1))
        {
          long long v277 = *v177;
          *(void *)(v176 + 16) = *((void *)v177 + 2);
          *(_OWORD *)uint64_t v176 = v277;
LABEL_171:
          swift_storeEnumTagMultiPayload();
          goto LABEL_172;
        }
LABEL_169:
        *(void *)uint64_t v176 = *(void *)v177;
        *(void *)(v176 + 8) = *((void *)v177 + 1);
        *(void *)(v176 + 16) = *((void *)v177 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_171;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v20, 1, v10))
      {
        uint64_t v227 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v227 - 8) + 64));
      }
      else
      {
        v11((void *)v19, (const void *)v20, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v19, 0, 1, v10);
      }
      uint64_t v246 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v11((void *)(v19 + v246[5]), (const void *)(v20 + v246[5]), v10);
      uint64_t v247 = v246[6];
      uint64_t v248 = (void *)(v19 + v247);
      long long v249 = (const void *)(v20 + v247);
      uint64_t v250 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v251 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v251 - 8) + 16))(v248, v249, v251);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
      }
      uint64_t v252 = v246[7];
      uint64_t v253 = v19 + v252;
      uint64_t v254 = v20 + v252;
      uint64_t v255 = sub_253B059D0();
      uint64_t v256 = *(void (**)(uint64_t, uint64_t))(*(void *)(v255 - 8) + 16);
      uint64_t v329 = (void *)v255;
      v256(v253, v254);
      uint64_t v257 = v246[8];
      uint64_t v258 = (void *)(v19 + v257);
      uint64_t v259 = (void *)(v20 + v257);
      uint64_t v260 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v261 = swift_getEnumCaseMultiPayload();
      if (v261 == 1)
      {
        *uint64_t v258 = *v259;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v261)
        {
          memcpy(v258, v259, *(void *)(*(void *)(v260 - 8) + 64));
          goto LABEL_153;
        }
        *uint64_t v258 = *v259;
        v258[1] = v259[1];
        uint64_t v262 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __srcb = (char *)v258 + v262;
        uint64_t v263 = (char *)v259 + v262;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v256)(__srcb, v263, v329);
      }
      swift_storeEnumTagMultiPayload();
LABEL_153:
      swift_storeEnumTagMultiPayload();
      uint64_t v10 = v350;
      goto LABEL_154;
    case 0x23u:
      uint64_t v99 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v19, v20, v99);
      uint64_t v100 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v101 = *(int *)(v100 + 20);
      uint64_t v102 = v19 + v101;
      uint64_t v103 = v20 + v101;
      uint64_t v104 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
      *(void *)(v19 + *(int *)(v100 + 24)) = *(void *)(v20 + *(int *)(v100 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x25u:
      uint64_t v105 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v19, v20, v105);
      uint64_t v106 = type metadata accessor for ToolResolution(0);
      uint64_t v107 = *(int *)(v106 + 20);
      __dstl = (void *)(v19 + v107);
      uint64_t v108 = v20 + v107;
      uint64_t v109 = sub_253B059D0();
      uint64_t v110 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16);
      v110(__dstl, v108, v109);
      v110((void *)(v19 + *(int *)(v106 + 24)), v20 + *(int *)(v106 + 24), v109);
      goto LABEL_171;
    case 0x26u:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      __dstd = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v111 = __dstd[5];
      uint64_t v325 = (void *)(v19 + v111);
      uint64_t v112 = (void *)(v20 + v111);
      swift_bridgeObjectRetain();
      uint64_t v331 = v12;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v112, 1, v10))
      {
        uint64_t v113 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v325, v112, *(void *)(*(void *)(v113 - 8) + 64));
      }
      else
      {
        v11(v325, v112, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v325, 0, 1, v10);
      }
      *(unsigned char *)(v19 + __dstd[6]) = *(unsigned char *)(v20 + __dstd[6]);
      uint64_t v178 = __dstd[7];
      uint64_t v179 = v19 + v178;
      uint64_t v180 = v20 + v178;
      uint64_t v181 = sub_253B059D0();
      uint64_t v182 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v181 - 8) + 16);
      uint64_t v183 = v180;
      uint64_t v184 = *v182;
      (*v182)(v179, v183, v181);
      uint64_t v185 = __dstd[8];
      uint64_t v186 = (void *)(v19 + v185);
      uint64_t v187 = (const void *)(v20 + v185);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v187, 1, v181))
      {
        uint64_t v188 = sub_253462A5C(&qword_269CDB460);
        memcpy(v186, v187, *(void *)(*(void *)(v188 - 8) + 64));
      }
      else
      {
        v184((uint64_t)v186, (uint64_t)v187, v181);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v186, 0, 1, v181);
      }
      uint64_t v12 = v331;
      goto LABEL_171;
    case 0x27u:
      v332 = v12;
      v11((void *)v19, (const void *)v20, v10);
      uint64_t v114 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v19 + v114[5]) = *(unsigned char *)(v20 + v114[5]);
      uint64_t v115 = v114[6];
      uint64_t v116 = v19 + v115;
      __dstm = (void *)(v20 + v115);
      uint64_t v117 = sub_253B059D0();
      uint64_t v118 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v117 - 8) + 16);
      v118(v116, __dstm, v117);
      uint64_t v119 = v114[7];
      uint64_t v120 = (void *)(v19 + v119);
      uint64_t v121 = (void *)(v20 + v119);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v121, 1, v117))
      {
        uint64_t v122 = sub_253462A5C(&qword_269CDB460);
        memcpy(v120, v121, *(void *)(*(void *)(v122 - 8) + 64));
      }
      else
      {
        v118((uint64_t)v120, v121, v117);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v120, 0, 1, v117);
      }
      goto LABEL_109;
    case 0x28u:
      uint64_t v123 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 16))(v19, v20, v123);
      uint64_t v124 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v125 = *(int *)(v124 + 20);
      uint64_t v126 = v19 + v125;
      uint64_t v127 = v20 + v125;
      uint64_t v128 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
      uint64_t v129 = *(int *)(v124 + 24);
      uint64_t v130 = v19 + v129;
      uint64_t v131 = v20 + v129;
      uint64_t v132 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 16))(v130, v131, v132);
      goto LABEL_171;
    case 0x29u:
      uint64_t v133 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 16))(v19, v20, v133);
      uint64_t v134 = type metadata accessor for TypeConversionResult(0);
      uint64_t v135 = *(int *)(v134 + 20);
      __dstn = (void *)(v19 + v135);
      uint64_t v136 = v20 + v135;
      uint64_t v137 = sub_253B059D0();
      uint64_t v138 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16);
      v138(__dstn, v136, v137);
      v138((void *)(v19 + *(int *)(v134 + 24)), v20 + *(int *)(v134 + 24), v137);
      goto LABEL_171;
    case 0x2Au:
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = *(void *)(v20 + 8);
      *(void *)(v19 + 16) = *(void *)(v20 + 16);
      __dste = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v139 = __dste[7];
      uint64_t v326 = (void *)(v19 + v139);
      uint64_t v140 = (const void *)(v20 + v139);
      uint64_t v141 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v140, 1, v141))
      {
        uint64_t v142 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v326, v140, *(void *)(*(void *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v141 - 8) + 16))(v326, v140, v141);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v326, 0, 1, v141);
      }
      *(void *)(v19 + __dste[8]) = *(void *)(v20 + __dste[8]);
      *(void *)(v19 + __dste[9]) = *(void *)(v20 + __dste[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    case 0x2Cu:
      uint64_t v143 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 16))(v19, v20, v143);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v145 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v146 = (void *)(v19 + v145);
      uint64_t v147 = (void *)(v20 + v145);
      *uint64_t v146 = *v147;
      v146[1] = v147[1];
      uint64_t v148 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v149 = v19 + v148;
      uint64_t v150 = (uint64_t *)(v20 + v148);
      uint64_t v151 = *v150;
      LOBYTE(v150) = *((unsigned char *)v150 + 8);
      *(void *)uint64_t v149 = v151;
      *(unsigned char *)(v149 + 8) = (_BYTE)v150;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_171;
    default:
      memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v21 - 8) + 64));
      goto LABEL_172;
  }
}

char *initializeWithTake for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 16)
  {
    uint64_t v6 = sub_253B055C0();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for Session.Event(0);
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    long long v11 = &a2[v9];
    uint64_t v311 = v6;
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&a2[v9], 1, v6))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      v7(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
    }
    uint64_t v13 = v8[7];
    uint64_t v14 = &a1[v13];
    long long v15 = &a2[v13];
    uint64_t v16 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v17 = sub_253B05D70();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
        uint64_t v18 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v19 = &v14[v18];
        uint64_t v20 = &v15[v18];
        uint64_t v21 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21))
        {
          uint64_t v22 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
        }
        goto LABEL_130;
      case 1u:
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        uint64_t v23 = type metadata accessor for TextQuery(0);
        uint64_t v24 = *(int *)(v23 + 24);
        uint64_t v25 = &v14[v24];
        uint64_t v26 = v7;
        uint64_t v27 = &v15[v24];
        uint64_t v28 = sub_253B059D0();
        uint64_t v29 = v27;
        uint64_t v7 = v26;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v29, v28);
        *(_OWORD *)&v14[*(int *)(v23 + 28)] = *(_OWORD *)&v15[*(int *)(v23 + 28)];
        goto LABEL_130;
      case 3u:
        uint64_t v286 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v308 = v7;
        if (EnumCaseMultiPayload == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
          {
            uint64_t v206 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v14, v15, *(void *)(*(void *)(v206 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
          }
          uint64_t v224 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v7(&v14[v224[5]], &v15[v224[5]], v6);
          uint64_t v225 = v224[6];
          uint64_t v302 = v14;
          __dstd = &v14[v225];
          uint64_t v226 = &v15[v225];
          uint64_t v227 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v228 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v228 - 8) + 32))(__dstd, v226, v228);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dstd, v226, *(void *)(*(void *)(v227 - 8) + 64));
          }
          uint64_t v229 = v224[7];
          uint64_t v230 = &v302[v229];
          uint64_t v231 = &v15[v229];
          uint64_t v232 = sub_253B059D0();
          __dste = *(void (**)(char *, char *, uint64_t))(*(void *)(v232 - 8) + 32);
          __dste(v230, v231, v232);
          uint64_t v233 = v224[8];
          uint64_t v234 = &v302[v233];
          uint64_t v235 = &v15[v233];
          uint64_t v236 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v234, v235, *(void *)(*(void *)(v236 - 8) + 64));
          }
          else
          {
            *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
            uint64_t v248 = type metadata accessor for RequestContent.TextContent(0);
            __dste(&v234[*(int *)(v248 + 20)], &v235[*(int *)(v248 + 20)], v232);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v14 = v302;
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(v14, v15, *(void *)(*(void *)(v286 - 8) + 64));
            goto LABEL_120;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          uint64_t v103 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v104 = v14;
          uint64_t v105 = &v14[v103];
          uint64_t v106 = &v15[v103];
          uint64_t v107 = sub_253B059D0();
          uint64_t v108 = v105;
          uint64_t v14 = v104;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 32))(v108, v106, v107);
        }
        swift_storeEnumTagMultiPayload();
LABEL_120:
        long long v249 = (int *)type metadata accessor for Request(0);
        v14[v249[5]] = v15[v249[5]];
        uint64_t v250 = v249[6];
        uint64_t v251 = &v14[v250];
        uint64_t v252 = &v15[v250];
        uint64_t v303 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v252, 1, v303))
        {
          uint64_t v253 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v254 = sub_253B059D0();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v254 - 8) + 32))(v251, v252, v254);
            uint64_t v255 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            uint64_t v256 = &v251[v255];
            uint64_t v257 = &v252[v255];
            *(void *)uint64_t v256 = *(void *)v257;
            v256[8] = v257[8];
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v251, v252, *(void *)(*(void *)(v303 - 8) + 64));
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v251, 0, 1, v303);
        }
        uint64_t v7 = v308;
        uint64_t v304 = v249;
        uint64_t v258 = v249[7];
        uint64_t v259 = v14;
        uint64_t v260 = &v14[v258];
        int v261 = &v15[v258];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v258], 1, v6))
        {
          uint64_t v262 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v260, v261, *(void *)(*(void *)(v262 - 8) + 64));
        }
        else
        {
          v308(v260, v261, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v260, 0, 1, v6);
        }
        uint64_t v263 = v304[8];
        uint64_t v264 = (char *)v259 + v263;
        uint64_t v265 = &v15[v263];
        *(_OWORD *)uint64_t v264 = *(_OWORD *)v265;
        *((void *)v264 + 2) = *((void *)v265 + 2);
        goto LABEL_130;
      case 5u:
        uint64_t v30 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v14, v15, v30);
        uint64_t v31 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)&v14[v31[5]] = *(_OWORD *)&v15[v31[5]];
        v14[v31[6]] = v15[v31[6]];
        *(void *)&v14[v31[7]] = *(void *)&v15[v31[7]];
        *(_OWORD *)&v14[v31[8]] = *(_OWORD *)&v15[v31[8]];
        uint64_t v32 = v31[9];
        uint64_t v33 = &v14[v32];
        uint64_t v34 = &v15[v32];
        long long v35 = *((_OWORD *)v34 + 1);
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
        *((_OWORD *)v33 + 1) = v35;
        goto LABEL_130;
      case 6u:
        uint64_t v36 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v36))
        {
          uint64_t v37 = sub_253462A5C(&qword_269CDB460);
          memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v14, v15, v36);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v36);
        }
        uint64_t v148 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(&v14[*(int *)(v148 + 20)], &v15[*(int *)(v148 + 20)], v36);
        goto LABEL_130;
      case 7u:
        uint64_t v109 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v14, v15, v109);
        uint64_t v110 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)&v14[v110[5]] = *(_OWORD *)&v15[v110[5]];
        *(void *)&v14[v110[6]] = *(void *)&v15[v110[6]];
        *(_OWORD *)&v14[v110[7]] = *(_OWORD *)&v15[v110[7]];
        *(_OWORD *)&v14[v110[8]] = *(_OWORD *)&v15[v110[8]];
        *(void *)&v14[v110[9]] = *(void *)&v15[v110[9]];
        *(void *)&v14[v110[10]] = *(void *)&v15[v110[10]];
        goto LABEL_130;
      case 8u:
        uint64_t v38 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v14, v15, v38);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)&v14[*(int *)(Step + 20)] = *(void *)&v15[*(int *)(Step + 20)];
        goto LABEL_130;
      case 9u:
        uint64_t v40 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v14, v15, v40);
        uint64_t v41 = type metadata accessor for VariableStep(0);
        *(void *)&v14[*(int *)(v41 + 20)] = *(void *)&v15[*(int *)(v41 + 20)];
        goto LABEL_130;
      case 0xDu:
        uint64_t v305 = v7;
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v210 = sub_253B05940();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v210 - 8) + 32))(v14, v15, v210);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v207 = v14;
            uint64_t v208 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v208))goto LABEL_95; {
            uint64_t v209 = type metadata accessor for PlannerError();
            }
            goto LABEL_94;
          case 3u:
            uint64_t v207 = v14;
            uint64_t v208 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v208))
            {
              uint64_t v209 = type metadata accessor for ExecutorError();
LABEL_94:
              memcpy(v207, v15, *(void *)(*(void *)(v209 - 8) + 64));
            }
            else
            {
LABEL_95:
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v208 - 8) + 32))(v207, v15, v208);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v207, 0, 1, v208);
            }
            break;
          default:
            uint64_t v111 = sub_253B05940();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 32))(v14, v15, v111);
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_97;
      case 0xFu:
        uint64_t v112 = sub_253B059F0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32))(v14, v15, v112);
        goto LABEL_130;
      case 0x10u:
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
        {
          uint64_t v113 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v14, v15, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
        }
        uint64_t v168 = v15;
        uint64_t v169 = type metadata accessor for RequestContent.SystemPromptResolution(0);
        uint64_t v310 = v7;
        v7(&v14[*(int *)(v169 + 20)], &v168[*(int *)(v169 + 20)], v311);
        uint64_t v288 = v169;
        uint64_t v298 = v14;
        uint64_t v170 = *(int *)(v169 + 24);
        uint64_t v171 = &v14[v170];
        uint64_t v172 = &v168[v170];
        uint64_t v173 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v174 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 32))(v171, v172, v174);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
        }
        uint64_t v175 = *(int *)(v288 + 28);
        uint64_t v176 = (char *)v298 + v175;
        uint64_t v177 = &v168[v175];
        uint64_t v178 = sub_253B059D0();
        uint64_t v275 = *(void (**)(char *, char *))(*(void *)(v178 - 8) + 32);
        __dst = (void *)v178;
        v275(v176, v177);
        uint64_t v179 = *(int *)(v288 + 32);
        uint64_t v180 = (_OWORD *)((char *)v298 + v179);
        uint64_t v181 = &v168[v179];
        uint64_t v182 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v180, v181, *(void *)(*(void *)(v182 - 8) + 64));
        }
        else
        {
          _OWORD *v180 = *(_OWORD *)v181;
          uint64_t v195 = type metadata accessor for RequestContent.TextContent(0);
          ((void (*)(char *, char *, void *))v275)((char *)v180 + *(int *)(v195 + 20), &v181[*(int *)(v195 + 20)], __dst);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v7 = v310;
        goto LABEL_130;
      case 0x11u:
        uint64_t v305 = v7;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
        {
          uint64_t v42 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v14, v15, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
        }
        uint64_t v149 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)&v14[v149[5]] = *(_OWORD *)&v15[v149[5]];
        uint64_t v150 = v149[6];
        uint64_t v297 = v14;
        uint64_t v151 = &v14[v150];
        uint64_t v152 = &v15[v150];
        uint64_t v153 = sub_253B05AB0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 32))(v151, v152, v153);
        uint64_t v154 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v155 = &v151[v154];
        uint64_t v156 = &v152[v154];
        uint64_t v157 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v156, 1, v157))
        {
          uint64_t v158 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 32))(v155, v156, v157);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v155, 0, 1, v157);
        }
        *(_OWORD *)((char *)v297 + v149[7]) = *(_OWORD *)&v15[v149[7]];
        goto LABEL_97;
      case 0x12u:
        *(void *)uint64_t v14 = *(void *)v15;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v44 = *(int *)(StepResults + 20);
        uint64_t v45 = &v14[v44];
        uint64_t v46 = v7;
        uint64_t v47 = &v15[v44];
        uint64_t v48 = sub_253B059D0();
        uint64_t v49 = v47;
        uint64_t v7 = v46;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v45, v49, v48);
        v46(&v14[*(int *)(StepResults + 24)], &v15[*(int *)(StepResults + 24)], v311);
        goto LABEL_130;
      case 0x13u:
        uint64_t v114 = sub_253B05CF0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 32))(v14, v15, v114);
        goto LABEL_130;
      case 0x14u:
        uint64_t v115 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v14, v15, v115);
        uint64_t v116 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)&v14[v116[5]] = *(void *)&v15[v116[5]];
        *(void *)&v14[v116[6]] = *(void *)&v15[v116[6]];
        *(void *)&v14[v116[7]] = *(void *)&v15[v116[7]];
        v14[v116[8]] = v15[v116[8]];
        v14[v116[9]] = v15[v116[9]];
        v14[v116[10]] = v15[v116[10]];
        uint64_t v117 = v116[11];
        uint64_t v118 = &v14[v117];
        uint64_t v119 = &v15[v117];
        long long v120 = *((_OWORD *)v119 + 1);
        *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
        *((_OWORD *)v118 + 1) = v120;
        goto LABEL_130;
      case 0x1Eu:
        uint64_t v121 = sub_253B06720();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32))(v14, v15, v121);
        goto LABEL_130;
      case 0x1Fu:
        uint64_t v305 = v7;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
        {
          uint64_t v122 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v14, v15, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          v7(v14, v15, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
        }
        uint64_t v289 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v299 = v14;
        uint64_t v183 = v289[5];
        uint64_t v184 = &v14[v183];
        uint64_t v185 = &v15[v183];
        uint64_t v186 = sub_253B06850();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v186 - 8) + 32))(v184, v185, v186);
        uint64_t v187 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        __dsta = &v184[v187];
        uint64_t v188 = &v185[v187];
        uint64_t v189 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v188, 1, v189))
        {
          uint64_t v190 = sub_253462A5C(&qword_269CDBB28);
          memcpy(__dsta, v188, *(void *)(*(void *)(v190 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v189 - 8) + 32))(__dsta, v188, v189);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v189);
        }
        uint64_t v196 = v289;
        uint64_t v197 = v299;
        uint64_t v198 = v289[6];
        uint64_t v300 = &v299[v198];
        __dstf = &v15[v198];
        uint64_t v199 = sub_253B059D0();
        long long v200 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 32);
        v200(v300, __dstf, v199);
        v200(&v197[v196[7]], &v15[v196[7]], v199);
        v200(&v197[v196[8]], &v15[v196[8]], v199);
        uint64_t v201 = v289[9];
        uint64_t v202 = &v197[v201];
        uint64_t v203 = &v15[v201];
        long long v204 = *((_OWORD *)v203 + 1);
        *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
        *((_OWORD *)v202 + 1) = v204;
        goto LABEL_97;
      case 0x20u:
        uint64_t v123 = v7;
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        uint64_t v124 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v125 = *(int *)(v124 + 20);
        uint64_t v295 = v14;
        uint64_t v126 = &v14[v125];
        uint64_t v127 = &v15[v125];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v125], 1, v6))
        {
          uint64_t v128 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
          uint64_t v7 = v123;
        }
        else
        {
          uint64_t v191 = v127;
          uint64_t v7 = v123;
          v123(v126, v191, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v126, 0, 1, v6);
        }
        uint64_t v192 = *(int *)(v124 + 24);
        uint64_t v193 = (char *)v295 + v192;
        uint64_t v194 = &v15[v192];
        *(_OWORD *)uint64_t v193 = *(_OWORD *)v194;
        *((void *)v193 + 2) = *((void *)v194 + 2);
        goto LABEL_130;
      case 0x21u:
        uint64_t v50 = v7;
        *(void *)uint64_t v14 = *(void *)v15;
        uint64_t v51 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v52 = *(int *)(v51 + 20);
        int v290 = v14;
        int v53 = &v14[v52];
        uint64_t v54 = &v15[v52];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v52], 1, v6))
        {
          uint64_t v55 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
          uint64_t v7 = v50;
        }
        else
        {
          uint64_t v159 = v54;
          uint64_t v7 = v50;
          v50(v53, v159, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v53, 0, 1, v6);
        }
        uint64_t v160 = *(int *)(v51 + 24);
        uint64_t v161 = (char *)v290 + v160;
        uint64_t v162 = &v15[v160];
        *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
        *((void *)v161 + 2) = *((void *)v162 + 2);
        goto LABEL_130;
      case 0x22u:
        uint64_t v283 = type metadata accessor for RequestContent(0);
        int v56 = swift_getEnumCaseMultiPayload();
        uint64_t v306 = v7;
        if (v56 == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
          {
            uint64_t v205 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v14, v15, *(void *)(*(void *)(v205 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
          }
          uint64_t v211 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v7(&v14[v211[5]], &v15[v211[5]], v6);
          uint64_t v212 = v211[6];
          uint64_t v301 = v14;
          __dstb = &v14[v212];
          uint64_t v213 = &v15[v212];
          uint64_t v214 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v215 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32))(__dstb, v213, v215);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dstb, v213, *(void *)(*(void *)(v214 - 8) + 64));
          }
          uint64_t v216 = v211[7];
          int v217 = &v301[v216];
          uint64_t v218 = &v15[v216];
          uint64_t v219 = sub_253B059D0();
          __dstc = *(void (**)(char *, char *, uint64_t))(*(void *)(v219 - 8) + 32);
          __dstc(v217, v218, v219);
          uint64_t v220 = v211[8];
          uint64_t v221 = &v301[v220];
          long long v222 = &v15[v220];
          uint64_t v223 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
          }
          else
          {
            *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
            uint64_t v237 = type metadata accessor for RequestContent.TextContent(0);
            __dstc(&v221[*(int *)(v237 + 20)], &v222[*(int *)(v237 + 20)], v219);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v14 = v301;
        }
        else
        {
          if (v56 != 1)
          {
            memcpy(v14, v15, *(void *)(*(void *)(v283 - 8) + 64));
            goto LABEL_113;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          uint64_t v57 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v58 = v14;
          uint64_t v59 = &v14[v57];
          uint64_t v60 = &v15[v57];
          uint64_t v61 = sub_253B059D0();
          uint64_t v62 = v59;
          uint64_t v14 = v58;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v62, v60, v61);
        }
        swift_storeEnumTagMultiPayload();
LABEL_113:
        uint64_t v238 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v239 = *(int *)(v238 + 20);
        uint64_t v240 = v14;
        uint64_t v241 = &v14[v239];
        uint64_t v242 = &v15[v239];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v239], 1, v6))
        {
          uint64_t v243 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
          uint64_t v7 = v306;
        }
        else
        {
          uint64_t v244 = v242;
          uint64_t v7 = v306;
          v306(v241, v244, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v241, 0, 1, v6);
        }
        uint64_t v245 = *(int *)(v238 + 24);
        uint64_t v246 = (char *)v240 + v245;
        uint64_t v247 = &v15[v245];
        *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
        *((void *)v246 + 2) = *((void *)v247 + 2);
LABEL_130:
        swift_storeEnumTagMultiPayload();
LABEL_131:
        *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
        *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
        *(_OWORD *)&a1[v8[10]] = *(_OWORD *)&a2[v8[10]];
        *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
        uint64_t v266 = v8[12];
        uint64_t v267 = &a1[v266];
        uint64_t v268 = &a2[v266];
        uint64_t v269 = sub_253B05550();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 32))(v267, v268, v269);
        uint64_t v270 = (int *)type metadata accessor for Timepoint();
        *(void *)&v267[v270[5]] = *(void *)&v268[v270[5]];
        *(void *)&v267[v270[6]] = *(void *)&v268[v270[6]];
        v7(&v267[v270[7]], &v268[v270[7]], v311);
        *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
        uint64_t v271 = v8[14];
        uint64_t v272 = &a1[v271];
        uint64_t v273 = &a2[v271];
        *(void *)uint64_t v272 = *(void *)v273;
        v272[8] = v273[8];
        *(void *)&a1[v8[15]] = *(void *)&a2[v8[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x23u:
        uint64_t v129 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 32))(v14, v15, v129);
        uint64_t v130 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v131 = *(int *)(v130 + 20);
        uint64_t v132 = &v14[v131];
        uint64_t v133 = v7;
        uint64_t v134 = &v15[v131];
        uint64_t v135 = sub_253B06850();
        uint64_t v136 = v134;
        uint64_t v7 = v133;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32))(v132, v136, v135);
        *(void *)&v14[*(int *)(v130 + 24)] = *(void *)&v15[*(int *)(v130 + 24)];
        goto LABEL_130;
      case 0x25u:
        uint64_t v63 = sub_253B08B30();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v14, v15, v63);
        uint64_t v64 = type metadata accessor for ToolResolution(0);
        uint64_t v65 = *(int *)(v64 + 20);
        uint64_t v284 = &v15[v65];
        uint64_t v291 = &v14[v65];
        uint64_t v66 = sub_253B059D0();
        uint64_t v307 = v7;
        uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32);
        v67(v291, v284, v66);
        v67(&v14[*(int *)(v64 + 24)], &v15[*(int *)(v64 + 24)], v66);
        uint64_t v7 = v307;
        goto LABEL_130;
      case 0x26u:
        uint64_t v305 = v7;
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        uint64_t v68 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v69 = v68[5];
        uint64_t v292 = v14;
        uint64_t v70 = &v14[v69];
        unint64_t v71 = &v15[v69];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v69], 1, v6))
        {
          uint64_t v72 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          v305(v70, v71, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v70, 0, 1, v6);
        }
        *((unsigned char *)v292 + v68[6]) = v15[v68[6]];
        uint64_t v163 = v68[7];
        uint64_t v287 = (char *)v292 + v163;
        uint64_t v164 = &v15[v163];
        uint64_t v165 = sub_253B059D0();
        uint64_t v166 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
        v166(v287, v164, v165);
        uint64_t v167 = v68[8];
        uint64_t v79 = (char *)v292 + v167;
        uint64_t v80 = &v15[v167];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v80, 1, v165)) {
          goto LABEL_28;
        }
        v166(v79, v80, v165);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v79, 0, 1, v165);
        goto LABEL_97;
      case 0x27u:
        uint64_t v305 = v7;
        v7(v14, v15, v6);
        uint64_t v73 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        v14[v73[5]] = v15[v73[5]];
        uint64_t v74 = v73[6];
        uint64_t v75 = &v14[v74];
        uint64_t v293 = &v15[v74];
        uint64_t v76 = sub_253B059D0();
        uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32);
        v77(v75, v293, v76);
        uint64_t v78 = v73[7];
        uint64_t v79 = &v14[v78];
        uint64_t v80 = &v15[v78];
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v80, 1, v76))
        {
LABEL_28:
          uint64_t v81 = sub_253462A5C(&qword_269CDB460);
          memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          v77(v79, v80, v76);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v79, 0, 1, v76);
        }
LABEL_97:
        swift_storeEnumTagMultiPayload();
        uint64_t v7 = v305;
        goto LABEL_131;
      case 0x28u:
        uint64_t v82 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v14, v15, v82);
        uint64_t v83 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v84 = v14;
        uint64_t v85 = v83;
        uint64_t v86 = *(int *)(v83 + 20);
        uint64_t v87 = (char *)v84 + v86;
        uint64_t v88 = v84;
        uint64_t v89 = v7;
        uint64_t v90 = &v15[v86];
        uint64_t v91 = sub_253B09150();
        uint64_t v92 = v90;
        uint64_t v7 = v89;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v87, v92, v91);
        uint64_t v93 = *(int *)(v85 + 24);
        uint64_t v94 = (uint64_t)v88 + v93;
        int v95 = &v15[v93];
        uint64_t v96 = sub_253B059D0();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v94, v95, v96);
        goto LABEL_130;
      case 0x29u:
        uint64_t v97 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 32))(v14, v15, v97);
        uint64_t v98 = type metadata accessor for TypeConversionResult(0);
        uint64_t v99 = *(int *)(v98 + 20);
        uint64_t v285 = &v15[v99];
        uint64_t v294 = &v14[v99];
        uint64_t v100 = sub_253B059D0();
        uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32);
        v101(v294, v285, v100);
        v101(&v14[*(int *)(v98 + 24)], &v15[*(int *)(v98 + 24)], v100);
        goto LABEL_130;
      case 0x2Au:
        int v309 = v7;
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        *((void *)v14 + 2) = *((void *)v15 + 2);
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v138 = DecorationResult[7];
        uint64_t v296 = v14;
        uint64_t v139 = &v14[v138];
        uint64_t v140 = &v15[v138];
        uint64_t v141 = sub_253B08270();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v140, 1, v141))
        {
          uint64_t v142 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v139, v140, *(void *)(*(void *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32))(v139, v140, v141);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v139, 0, 1, v141);
        }
        uint64_t v7 = v309;
        *(void *)((char *)v296 + DecorationResult[8]) = *(void *)&v15[DecorationResult[8]];
        *(void *)((char *)v296 + DecorationResult[9]) = *(void *)&v15[DecorationResult[9]];
        goto LABEL_130;
      case 0x2Cu:
        uint64_t v143 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 32))(v14, v15, v143);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)&v14[*(int *)(DecorationPrePlannerResult + 20)] = *(_OWORD *)&v15[*(int *)(DecorationPrePlannerResult
                                                                                            + 20)];
        uint64_t v145 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v146 = &v14[v145];
        uint64_t v147 = &v15[v145];
        v146[8] = v147[8];
        *(void *)uint64_t v146 = *(void *)v147;
        goto LABEL_130;
      default:
        memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
        goto LABEL_131;
    }
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ODPEventPayload(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_25349CD08((uint64_t)a1, (void (*)(void))type metadata accessor for ODPEventPayload);
    if (swift_getEnumCaseMultiPayload() == 16)
    {
      uint64_t v6 = sub_253B055C0();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for Session.Event(0);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      long long v11 = &a2[v9];
      uint64_t v311 = v6;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&a2[v9], 1, v6))
      {
        uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        v7(v10, v11, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
      }
      uint64_t v13 = v8[7];
      uint64_t v14 = &a1[v13];
      long long v15 = &a2[v13];
      uint64_t v16 = type metadata accessor for Session.Event.Payload(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v17 = sub_253B05D70();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
          uint64_t v18 = *(int *)(type metadata accessor for SessionStart(0) + 20);
          uint64_t v19 = &v14[v18];
          uint64_t v20 = &v15[v18];
          uint64_t v21 = sub_253B05CB0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21))
          {
            uint64_t v22 = sub_253462A5C(&qword_26B248CD0);
            memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
          }
          goto LABEL_131;
        case 1u:
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          v14[16] = v15[16];
          uint64_t v23 = type metadata accessor for TextQuery(0);
          uint64_t v24 = *(int *)(v23 + 24);
          uint64_t v25 = &v14[v24];
          uint64_t v26 = v7;
          uint64_t v27 = &v15[v24];
          uint64_t v28 = sub_253B059D0();
          uint64_t v29 = v27;
          uint64_t v7 = v26;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v25, v29, v28);
          *(_OWORD *)&v14[*(int *)(v23 + 28)] = *(_OWORD *)&v15[*(int *)(v23 + 28)];
          goto LABEL_131;
        case 3u:
          uint64_t v286 = type metadata accessor for RequestContent(0);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v308 = v7;
          if (EnumCaseMultiPayload == 3)
          {
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
            {
              uint64_t v206 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
              memcpy(v14, v15, *(void *)(*(void *)(v206 - 8) + 64));
            }
            else
            {
              v7(v14, v15, v6);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
            }
            uint64_t v224 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
            v7(&v14[v224[5]], &v15[v224[5]], v6);
            uint64_t v225 = v224[6];
            uint64_t v302 = v14;
            __dstd = &v14[v225];
            uint64_t v226 = &v15[v225];
            uint64_t v227 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v228 = sub_253B09120();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v228 - 8) + 32))(__dstd, v226, v228);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(__dstd, v226, *(void *)(*(void *)(v227 - 8) + 64));
            }
            uint64_t v229 = v224[7];
            uint64_t v230 = &v302[v229];
            uint64_t v231 = &v15[v229];
            uint64_t v232 = sub_253B059D0();
            __dste = *(void (**)(char *, char *, uint64_t))(*(void *)(v232 - 8) + 32);
            __dste(v230, v231, v232);
            uint64_t v233 = v224[8];
            uint64_t v234 = &v302[v233];
            uint64_t v235 = &v15[v233];
            uint64_t v236 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v234, v235, *(void *)(*(void *)(v236 - 8) + 64));
            }
            else
            {
              *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
              uint64_t v248 = type metadata accessor for RequestContent.TextContent(0);
              __dste(&v234[*(int *)(v248 + 20)], &v235[*(int *)(v248 + 20)], v232);
              swift_storeEnumTagMultiPayload();
            }
            uint64_t v14 = v302;
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy(v14, v15, *(void *)(*(void *)(v286 - 8) + 64));
              goto LABEL_121;
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
            uint64_t v103 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v104 = v14;
            uint64_t v105 = &v14[v103];
            uint64_t v106 = &v15[v103];
            uint64_t v107 = sub_253B059D0();
            uint64_t v108 = v105;
            uint64_t v14 = v104;
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 32))(v108, v106, v107);
          }
          swift_storeEnumTagMultiPayload();
LABEL_121:
          long long v249 = (int *)type metadata accessor for Request(0);
          v14[v249[5]] = v15[v249[5]];
          uint64_t v250 = v249[6];
          uint64_t v251 = &v14[v250];
          uint64_t v252 = &v15[v250];
          uint64_t v303 = type metadata accessor for RequestPrescribedPlan(0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v252, 1, v303))
          {
            uint64_t v253 = sub_253462A5C(&qword_269CDBB20);
            memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              uint64_t v254 = sub_253B059D0();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v254 - 8) + 32))(v251, v252, v254);
              uint64_t v255 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v256 = &v251[v255];
              uint64_t v257 = &v252[v255];
              *(void *)uint64_t v256 = *(void *)v257;
              v256[8] = v257[8];
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v251, v252, *(void *)(*(void *)(v303 - 8) + 64));
            }
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v251, 0, 1, v303);
          }
          uint64_t v7 = v308;
          uint64_t v304 = v249;
          uint64_t v258 = v249[7];
          uint64_t v259 = v14;
          uint64_t v260 = &v14[v258];
          int v261 = &v15[v258];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v258], 1, v6))
          {
            uint64_t v262 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v260, v261, *(void *)(*(void *)(v262 - 8) + 64));
          }
          else
          {
            v308(v260, v261, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v260, 0, 1, v6);
          }
          uint64_t v263 = v304[8];
          uint64_t v264 = (char *)v259 + v263;
          uint64_t v265 = &v15[v263];
          *(_OWORD *)uint64_t v264 = *(_OWORD *)v265;
          *((void *)v264 + 2) = *((void *)v265 + 2);
          goto LABEL_131;
        case 5u:
          uint64_t v30 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v14, v15, v30);
          uint64_t v31 = (int *)type metadata accessor for Action(0);
          *(_OWORD *)&v14[v31[5]] = *(_OWORD *)&v15[v31[5]];
          v14[v31[6]] = v15[v31[6]];
          *(void *)&v14[v31[7]] = *(void *)&v15[v31[7]];
          *(_OWORD *)&v14[v31[8]] = *(_OWORD *)&v15[v31[8]];
          uint64_t v32 = v31[9];
          uint64_t v33 = &v14[v32];
          uint64_t v34 = &v15[v32];
          long long v35 = *((_OWORD *)v34 + 1);
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *((_OWORD *)v33 + 1) = v35;
          goto LABEL_131;
        case 6u:
          uint64_t v36 = sub_253B059D0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v36))
          {
            uint64_t v37 = sub_253462A5C(&qword_269CDB460);
            memcpy(v14, v15, *(void *)(*(void *)(v37 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v14, v15, v36);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v36);
          }
          uint64_t v148 = type metadata accessor for ActionCancellation(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(&v14[*(int *)(v148 + 20)], &v15[*(int *)(v148 + 20)], v36);
          goto LABEL_131;
        case 7u:
          uint64_t v109 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v14, v15, v109);
          uint64_t v110 = (int *)type metadata accessor for ClientAction(0);
          *(_OWORD *)&v14[v110[5]] = *(_OWORD *)&v15[v110[5]];
          *(void *)&v14[v110[6]] = *(void *)&v15[v110[6]];
          *(_OWORD *)&v14[v110[7]] = *(_OWORD *)&v15[v110[7]];
          *(_OWORD *)&v14[v110[8]] = *(_OWORD *)&v15[v110[8]];
          *(void *)&v14[v110[9]] = *(void *)&v15[v110[9]];
          *(void *)&v14[v110[10]] = *(void *)&v15[v110[10]];
          goto LABEL_131;
        case 8u:
          uint64_t v38 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v14, v15, v38);
          uint64_t Step = type metadata accessor for QueryStep(0);
          *(void *)&v14[*(int *)(Step + 20)] = *(void *)&v15[*(int *)(Step + 20)];
          goto LABEL_131;
        case 9u:
          uint64_t v40 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v14, v15, v40);
          uint64_t v41 = type metadata accessor for VariableStep(0);
          *(void *)&v14[*(int *)(v41 + 20)] = *(void *)&v15[*(int *)(v41 + 20)];
          goto LABEL_131;
        case 0xDu:
          uint64_t v305 = v7;
          type metadata accessor for SessionError();
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              type metadata accessor for SessionCoordinatorError();
              swift_getEnumCaseMultiPayload();
              uint64_t v210 = sub_253B05940();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v210 - 8) + 32))(v14, v15, v210);
              swift_storeEnumTagMultiPayload();
              break;
            case 2u:
              uint64_t v207 = v14;
              uint64_t v208 = sub_253B05940();
              if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v208))goto LABEL_96; {
              uint64_t v209 = type metadata accessor for PlannerError();
              }
              goto LABEL_95;
            case 3u:
              uint64_t v207 = v14;
              uint64_t v208 = sub_253B05940();
              if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v208))
              {
                uint64_t v209 = type metadata accessor for ExecutorError();
LABEL_95:
                memcpy(v207, v15, *(void *)(*(void *)(v209 - 8) + 64));
              }
              else
              {
LABEL_96:
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v208 - 8) + 32))(v207, v15, v208);
                _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v207, 0, 1, v208);
              }
              break;
            default:
              uint64_t v111 = sub_253B05940();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 32))(v14, v15, v111);
              break;
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_98;
        case 0xFu:
          uint64_t v112 = sub_253B059F0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v112 - 8) + 32))(v14, v15, v112);
          goto LABEL_131;
        case 0x10u:
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
          {
            uint64_t v113 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v14, v15, *(void *)(*(void *)(v113 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
          }
          uint64_t v168 = v15;
          uint64_t v169 = type metadata accessor for RequestContent.SystemPromptResolution(0);
          uint64_t v310 = v7;
          v7(&v14[*(int *)(v169 + 20)], &v168[*(int *)(v169 + 20)], v311);
          uint64_t v288 = v169;
          uint64_t v298 = v14;
          uint64_t v170 = *(int *)(v169 + 24);
          uint64_t v171 = &v14[v170];
          uint64_t v172 = &v168[v170];
          uint64_t v173 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v174 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 32))(v171, v172, v174);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
          }
          uint64_t v175 = *(int *)(v288 + 28);
          uint64_t v176 = (char *)v298 + v175;
          uint64_t v177 = &v168[v175];
          uint64_t v178 = sub_253B059D0();
          uint64_t v275 = *(void (**)(char *, char *))(*(void *)(v178 - 8) + 32);
          __dst = (void *)v178;
          v275(v176, v177);
          uint64_t v179 = *(int *)(v288 + 32);
          uint64_t v180 = (_OWORD *)((char *)v298 + v179);
          uint64_t v181 = &v168[v179];
          uint64_t v182 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v180, v181, *(void *)(*(void *)(v182 - 8) + 64));
          }
          else
          {
            _OWORD *v180 = *(_OWORD *)v181;
            uint64_t v195 = type metadata accessor for RequestContent.TextContent(0);
            ((void (*)(char *, char *, void *))v275)((char *)v180 + *(int *)(v195 + 20), &v181[*(int *)(v195 + 20)], __dst);
            swift_storeEnumTagMultiPayload();
          }
          uint64_t v7 = v310;
          goto LABEL_131;
        case 0x11u:
          uint64_t v305 = v7;
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
          {
            uint64_t v42 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v14, v15, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
          }
          uint64_t v149 = (int *)type metadata accessor for ActionStepResult(0);
          *(_OWORD *)&v14[v149[5]] = *(_OWORD *)&v15[v149[5]];
          uint64_t v150 = v149[6];
          uint64_t v297 = v14;
          uint64_t v151 = &v14[v150];
          uint64_t v152 = &v15[v150];
          uint64_t v153 = sub_253B05AB0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 32))(v151, v152, v153);
          uint64_t v154 = *(int *)(type metadata accessor for ActionResult(0) + 20);
          uint64_t v155 = &v151[v154];
          uint64_t v156 = &v152[v154];
          uint64_t v157 = sub_253B06820();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v156, 1, v157))
          {
            uint64_t v158 = sub_253462A5C(&qword_269CDBB28);
            memcpy(v155, v156, *(void *)(*(void *)(v158 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 32))(v155, v156, v157);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v155, 0, 1, v157);
          }
          *(_OWORD *)((char *)v297 + v149[7]) = *(_OWORD *)&v15[v149[7]];
          goto LABEL_98;
        case 0x12u:
          *(void *)uint64_t v14 = *(void *)v15;
          uint64_t StepResults = type metadata accessor for QueryStepResults(0);
          uint64_t v44 = *(int *)(StepResults + 20);
          uint64_t v45 = &v14[v44];
          uint64_t v46 = v7;
          uint64_t v47 = &v15[v44];
          uint64_t v48 = sub_253B059D0();
          uint64_t v49 = v47;
          uint64_t v7 = v46;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v45, v49, v48);
          v46(&v14[*(int *)(StepResults + 24)], &v15[*(int *)(StepResults + 24)], v311);
          goto LABEL_131;
        case 0x13u:
          uint64_t v114 = sub_253B05CF0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 32))(v14, v15, v114);
          goto LABEL_131;
        case 0x14u:
          uint64_t v115 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v115 - 8) + 32))(v14, v15, v115);
          uint64_t v116 = (int *)type metadata accessor for ActionResolverRequest(0);
          *(void *)&v14[v116[5]] = *(void *)&v15[v116[5]];
          *(void *)&v14[v116[6]] = *(void *)&v15[v116[6]];
          *(void *)&v14[v116[7]] = *(void *)&v15[v116[7]];
          v14[v116[8]] = v15[v116[8]];
          v14[v116[9]] = v15[v116[9]];
          v14[v116[10]] = v15[v116[10]];
          uint64_t v117 = v116[11];
          uint64_t v118 = &v14[v117];
          uint64_t v119 = &v15[v117];
          long long v120 = *((_OWORD *)v119 + 1);
          *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
          *((_OWORD *)v118 + 1) = v120;
          goto LABEL_131;
        case 0x1Eu:
          uint64_t v121 = sub_253B06720();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v121 - 8) + 32))(v14, v15, v121);
          goto LABEL_131;
        case 0x1Fu:
          uint64_t v305 = v7;
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
          {
            uint64_t v122 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v14, v15, *(void *)(*(void *)(v122 - 8) + 64));
          }
          else
          {
            v7(v14, v15, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
          }
          uint64_t v289 = (int *)type metadata accessor for StatementResult(0);
          uint64_t v299 = v14;
          uint64_t v183 = v289[5];
          uint64_t v184 = &v14[v183];
          uint64_t v185 = &v15[v183];
          uint64_t v186 = sub_253B06850();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v186 - 8) + 32))(v184, v185, v186);
          uint64_t v187 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
          __dsta = &v184[v187];
          uint64_t v188 = &v185[v187];
          uint64_t v189 = sub_253B06820();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v188, 1, v189))
          {
            uint64_t v190 = sub_253462A5C(&qword_269CDBB28);
            memcpy(__dsta, v188, *(void *)(*(void *)(v190 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v189 - 8) + 32))(__dsta, v188, v189);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v189);
          }
          uint64_t v196 = v289;
          uint64_t v197 = v299;
          uint64_t v198 = v289[6];
          uint64_t v300 = &v299[v198];
          __dstf = &v15[v198];
          uint64_t v199 = sub_253B059D0();
          long long v200 = *(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 32);
          v200(v300, __dstf, v199);
          v200(&v197[v196[7]], &v15[v196[7]], v199);
          v200(&v197[v196[8]], &v15[v196[8]], v199);
          uint64_t v201 = v289[9];
          uint64_t v202 = &v197[v201];
          uint64_t v203 = &v15[v201];
          long long v204 = *((_OWORD *)v203 + 1);
          *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
          *((_OWORD *)v202 + 1) = v204;
          goto LABEL_98;
        case 0x20u:
          uint64_t v123 = v7;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          uint64_t v124 = type metadata accessor for ExternalAgentTextQuery(0);
          uint64_t v125 = *(int *)(v124 + 20);
          uint64_t v295 = v14;
          uint64_t v126 = &v14[v125];
          uint64_t v127 = &v15[v125];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v125], 1, v6))
          {
            uint64_t v128 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
            uint64_t v7 = v123;
          }
          else
          {
            uint64_t v191 = v127;
            uint64_t v7 = v123;
            v123(v126, v191, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v126, 0, 1, v6);
          }
          uint64_t v192 = *(int *)(v124 + 24);
          uint64_t v193 = (char *)v295 + v192;
          uint64_t v194 = &v15[v192];
          *(_OWORD *)uint64_t v193 = *(_OWORD *)v194;
          *((void *)v193 + 2) = *((void *)v194 + 2);
          goto LABEL_131;
        case 0x21u:
          uint64_t v50 = v7;
          *(void *)uint64_t v14 = *(void *)v15;
          uint64_t v51 = type metadata accessor for ExternalAgentSpeechQuery(0);
          uint64_t v52 = *(int *)(v51 + 20);
          int v290 = v14;
          int v53 = &v14[v52];
          uint64_t v54 = &v15[v52];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v52], 1, v6))
          {
            uint64_t v55 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
            uint64_t v7 = v50;
          }
          else
          {
            uint64_t v159 = v54;
            uint64_t v7 = v50;
            v50(v53, v159, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v53, 0, 1, v6);
          }
          uint64_t v160 = *(int *)(v51 + 24);
          uint64_t v161 = (char *)v290 + v160;
          uint64_t v162 = &v15[v160];
          *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
          *((void *)v161 + 2) = *((void *)v162 + 2);
          goto LABEL_131;
        case 0x22u:
          uint64_t v283 = type metadata accessor for RequestContent(0);
          int v56 = swift_getEnumCaseMultiPayload();
          uint64_t v306 = v7;
          if (v56 == 3)
          {
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v6))
            {
              uint64_t v205 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
              memcpy(v14, v15, *(void *)(*(void *)(v205 - 8) + 64));
            }
            else
            {
              v7(v14, v15, v6);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v6);
            }
            uint64_t v211 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
            v7(&v14[v211[5]], &v15[v211[5]], v6);
            uint64_t v212 = v211[6];
            uint64_t v301 = v14;
            __dstb = &v14[v212];
            uint64_t v213 = &v15[v212];
            uint64_t v214 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v215 = sub_253B09120();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32))(__dstb, v213, v215);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(__dstb, v213, *(void *)(*(void *)(v214 - 8) + 64));
            }
            uint64_t v216 = v211[7];
            int v217 = &v301[v216];
            uint64_t v218 = &v15[v216];
            uint64_t v219 = sub_253B059D0();
            __dstc = *(void (**)(char *, char *, uint64_t))(*(void *)(v219 - 8) + 32);
            __dstc(v217, v218, v219);
            uint64_t v220 = v211[8];
            uint64_t v221 = &v301[v220];
            long long v222 = &v15[v220];
            uint64_t v223 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
            if (swift_getEnumCaseMultiPayload())
            {
              memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
            }
            else
            {
              *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
              uint64_t v237 = type metadata accessor for RequestContent.TextContent(0);
              __dstc(&v221[*(int *)(v237 + 20)], &v222[*(int *)(v237 + 20)], v219);
              swift_storeEnumTagMultiPayload();
            }
            uint64_t v14 = v301;
          }
          else
          {
            if (v56 != 1)
            {
              memcpy(v14, v15, *(void *)(*(void *)(v283 - 8) + 64));
              goto LABEL_114;
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
            uint64_t v57 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v58 = v14;
            uint64_t v59 = &v14[v57];
            uint64_t v60 = &v15[v57];
            uint64_t v61 = sub_253B059D0();
            uint64_t v62 = v59;
            uint64_t v14 = v58;
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 32))(v62, v60, v61);
          }
          swift_storeEnumTagMultiPayload();
LABEL_114:
          uint64_t v238 = type metadata accessor for ExternalAgentRequest(0);
          uint64_t v239 = *(int *)(v238 + 20);
          uint64_t v240 = v14;
          uint64_t v241 = &v14[v239];
          uint64_t v242 = &v15[v239];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v239], 1, v6))
          {
            uint64_t v243 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
            uint64_t v7 = v306;
          }
          else
          {
            uint64_t v244 = v242;
            uint64_t v7 = v306;
            v306(v241, v244, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v241, 0, 1, v6);
          }
          uint64_t v245 = *(int *)(v238 + 24);
          uint64_t v246 = (char *)v240 + v245;
          uint64_t v247 = &v15[v245];
          *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
          *((void *)v246 + 2) = *((void *)v247 + 2);
LABEL_131:
          swift_storeEnumTagMultiPayload();
LABEL_132:
          *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
          *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
          *(_OWORD *)&a1[v8[10]] = *(_OWORD *)&a2[v8[10]];
          *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
          uint64_t v266 = v8[12];
          uint64_t v267 = &a1[v266];
          uint64_t v268 = &a2[v266];
          uint64_t v269 = sub_253B05550();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v269 - 8) + 32))(v267, v268, v269);
          uint64_t v270 = (int *)type metadata accessor for Timepoint();
          *(void *)&v267[v270[5]] = *(void *)&v268[v270[5]];
          *(void *)&v267[v270[6]] = *(void *)&v268[v270[6]];
          v7(&v267[v270[7]], &v268[v270[7]], v311);
          *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
          uint64_t v271 = v8[14];
          uint64_t v272 = &a1[v271];
          uint64_t v273 = &a2[v271];
          *(void *)uint64_t v272 = *(void *)v273;
          v272[8] = v273[8];
          *(void *)&a1[v8[15]] = *(void *)&a2[v8[15]];
          swift_storeEnumTagMultiPayload();
          break;
        case 0x23u:
          uint64_t v129 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 32))(v14, v15, v129);
          uint64_t v130 = type metadata accessor for ExternalAgentOutcome(0);
          uint64_t v131 = *(int *)(v130 + 20);
          uint64_t v132 = &v14[v131];
          uint64_t v133 = v7;
          uint64_t v134 = &v15[v131];
          uint64_t v135 = sub_253B06850();
          uint64_t v136 = v134;
          uint64_t v7 = v133;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v135 - 8) + 32))(v132, v136, v135);
          *(void *)&v14[*(int *)(v130 + 24)] = *(void *)&v15[*(int *)(v130 + 24)];
          goto LABEL_131;
        case 0x25u:
          uint64_t v63 = sub_253B08B30();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v14, v15, v63);
          uint64_t v64 = type metadata accessor for ToolResolution(0);
          uint64_t v65 = *(int *)(v64 + 20);
          uint64_t v284 = &v15[v65];
          uint64_t v291 = &v14[v65];
          uint64_t v66 = sub_253B059D0();
          uint64_t v307 = v7;
          uint64_t v67 = *(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 32);
          v67(v291, v284, v66);
          v67(&v14[*(int *)(v64 + 24)], &v15[*(int *)(v64 + 24)], v66);
          uint64_t v7 = v307;
          goto LABEL_131;
        case 0x26u:
          uint64_t v305 = v7;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          uint64_t v68 = (int *)type metadata accessor for UndoRedoRequest(0);
          uint64_t v69 = v68[5];
          uint64_t v292 = v14;
          uint64_t v70 = &v14[v69];
          unint64_t v71 = &v15[v69];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)&v15[v69], 1, v6))
          {
            uint64_t v72 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
          }
          else
          {
            v305(v70, v71, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v70, 0, 1, v6);
          }
          *((unsigned char *)v292 + v68[6]) = v15[v68[6]];
          uint64_t v163 = v68[7];
          uint64_t v287 = (char *)v292 + v163;
          uint64_t v164 = &v15[v163];
          uint64_t v165 = sub_253B059D0();
          uint64_t v166 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
          v166(v287, v164, v165);
          uint64_t v167 = v68[8];
          uint64_t v79 = (char *)v292 + v167;
          uint64_t v80 = &v15[v167];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v80, 1, v165)) {
            goto LABEL_29;
          }
          v166(v79, v80, v165);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v79, 0, 1, v165);
          goto LABEL_98;
        case 0x27u:
          uint64_t v305 = v7;
          v7(v14, v15, v6);
          uint64_t v73 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
          v14[v73[5]] = v15[v73[5]];
          uint64_t v74 = v73[6];
          uint64_t v75 = &v14[v74];
          uint64_t v293 = &v15[v74];
          uint64_t v76 = sub_253B059D0();
          uint64_t v77 = *(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32);
          v77(v75, v293, v76);
          uint64_t v78 = v73[7];
          uint64_t v79 = &v14[v78];
          uint64_t v80 = &v15[v78];
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v80, 1, v76))
          {
LABEL_29:
            uint64_t v81 = sub_253462A5C(&qword_269CDB460);
            memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
          }
          else
          {
            v77(v79, v80, v76);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v79, 0, 1, v76);
          }
LABEL_98:
          swift_storeEnumTagMultiPayload();
          uint64_t v7 = v305;
          goto LABEL_132;
        case 0x28u:
          uint64_t v82 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v14, v15, v82);
          uint64_t v83 = type metadata accessor for TypeConversionRequest(0);
          uint64_t v84 = v14;
          uint64_t v85 = v83;
          uint64_t v86 = *(int *)(v83 + 20);
          uint64_t v87 = (char *)v84 + v86;
          uint64_t v88 = v84;
          uint64_t v89 = v7;
          uint64_t v90 = &v15[v86];
          uint64_t v91 = sub_253B09150();
          uint64_t v92 = v90;
          uint64_t v7 = v89;
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v87, v92, v91);
          uint64_t v93 = *(int *)(v85 + 24);
          uint64_t v94 = (uint64_t)v88 + v93;
          int v95 = &v15[v93];
          uint64_t v96 = sub_253B059D0();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v96 - 8) + 32))(v94, v95, v96);
          goto LABEL_131;
        case 0x29u:
          uint64_t v97 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 32))(v14, v15, v97);
          uint64_t v98 = type metadata accessor for TypeConversionResult(0);
          uint64_t v99 = *(int *)(v98 + 20);
          uint64_t v285 = &v15[v99];
          uint64_t v294 = &v14[v99];
          uint64_t v100 = sub_253B059D0();
          uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 32);
          v101(v294, v285, v100);
          v101(&v14[*(int *)(v98 + 24)], &v15[*(int *)(v98 + 24)], v100);
          goto LABEL_131;
        case 0x2Au:
          int v309 = v7;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          *((void *)v14 + 2) = *((void *)v15 + 2);
          uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
          uint64_t v138 = DecorationResult[7];
          uint64_t v296 = v14;
          uint64_t v139 = &v14[v138];
          uint64_t v140 = &v15[v138];
          uint64_t v141 = sub_253B08270();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v140, 1, v141))
          {
            uint64_t v142 = sub_253462A5C(&qword_269CDBB30);
            memcpy(v139, v140, *(void *)(*(void *)(v142 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32))(v139, v140, v141);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v139, 0, 1, v141);
          }
          uint64_t v7 = v309;
          *(void *)((char *)v296 + DecorationResult[8]) = *(void *)&v15[DecorationResult[8]];
          *(void *)((char *)v296 + DecorationResult[9]) = *(void *)&v15[DecorationResult[9]];
          goto LABEL_131;
        case 0x2Cu:
          uint64_t v143 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 32))(v14, v15, v143);
          uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
          *(_OWORD *)&v14[*(int *)(DecorationPrePlannerResult + 20)] = *(_OWORD *)&v15[*(int *)(DecorationPrePlannerResult
                                                                                              + 20)];
          uint64_t v145 = *(int *)(DecorationPrePlannerResult + 24);
          uint64_t v146 = &v14[v145];
          uint64_t v147 = &v15[v145];
          v146[8] = v147[8];
          *(void *)uint64_t v146 = *(void *)v147;
          goto LABEL_131;
        default:
          memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
          goto LABEL_132;
      }
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_2534ACA64()
{
  uint64_t result = type metadata accessor for Session.Event(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_2534ACB4C()
{
  return type metadata accessor for ODPEvent(0);
}

uint64_t type metadata accessor for ODPEvent(uint64_t a1)
{
  return sub_2534978CC(a1, qword_26B24A2C8);
}

uint64_t sub_2534ACB74()
{
  uint64_t result = type metadata accessor for ODPEventPayload(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B05550();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for ODPEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ODPEvent);
}

uint64_t dispatch thunk of ODPEvent.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for ODPEventOverrides()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ODPEventOverrides(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ODPEventOverrides(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ODPEventOverrides(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for ODPEventOverrides(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ODPEventOverrides(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ODPEventOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ODPEventOverrides()
{
  return &type metadata for ODPEventOverrides;
}

void sub_2534ACF2C()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
}

_OWORD *sub_2534ACF3C()
{
  __n128 result = sub_25349D48C(v0, (_OWORD *)(v1 - 96));
  *(void *)(v1 - 112) = 0;
  *(void *)(v1 - 104) = 0xE000000000000000;
  return result;
}

void sub_2534ACF64(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_2534ACF74()
{
  return v0;
}

uint64_t sub_2534ACF80()
{
  sub_25349D48C(v0, (_OWORD *)(v1 - 96));
  *(void *)(v1 - 112) = 0;
  *(void *)(v1 - 104) = 0xE000000000000000;
  return sub_253B0A000();
}

uint64_t sub_2534ACFBC()
{
  *(void *)(v0 - 96) = 0;
  *(void *)(v0 - 88) = 0xE000000000000000;
  return sub_253B0A000();
}

unint64_t sub_2534ACFDC()
{
  return 0xD000000000000013;
}

uint64_t static ImpendingRequestDetectedTelemetry.insert(sessionState:clientRequestId:queryEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_253462A5C(&qword_26B248D20);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_253462A5C(&qword_26B248D30);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_253462A5C(&qword_26B248D58);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v20 = sub_25346CB4C(v19);
  MEMORY[0x270FA5388](v20);
  sub_25346CC44();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = sub_253B085E0();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  sub_25346CC44();
  uint64_t v28 = v27 - v26;
  Session.Transcript.formingTraceIds()(v27 - v26);
  uint64_t v29 = sub_253B055C0();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v23, a4, v29);
  sub_2534AD3FC();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v31, v32, v33, v29);
  sub_253B08540();
  swift_bridgeObjectRetain();
  sub_253B08550();
  type metadata accessor for TelemetryStream();
  sub_253B088C0();
  sub_253B088D0();
  sub_2534AD3FC();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, v35, v36, v37);
  sub_2534B3980(v28, v18);
  sub_2534AD348(v18);
  sub_253B086C0();
  uint64_t v38 = *MEMORY[0x263F4EA70];
  uint64_t v39 = sub_253B08500();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 104))(v13, v38, v39);
  sub_2534AD3FC();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v41, v42, v43, v39);
  sub_253B08510();
  uint64_t v44 = *MEMORY[0x263F4E948];
  uint64_t v45 = sub_253B08480();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 104))(v8, v44, v45);
  sub_2534AD3FC();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v47, v48, v49, v45);
  sub_253B084A0();
  static TelemetryStream.insert(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
}

uint64_t sub_2534AD348(uint64_t a1)
{
  uint64_t v2 = sub_253462A5C(&qword_26B248D58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ImpendingRequestDetectedTelemetry.deinit()
{
  return v0;
}

uint64_t ImpendingRequestDetectedTelemetry.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ImpendingRequestDetectedTelemetry()
{
  return self;
}

uint64_t method lookup function for ImpendingRequestDetectedTelemetry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImpendingRequestDetectedTelemetry);
}

uint64_t IntelligenceFlowIdentifiers.sessionSpanId.getter()
{
  uint64_t v0 = sub_253B055C0();
  MEMORY[0x270FA5388](v0 - 8);
  sub_25346CC44();
  sub_253B08590();
  if (v1)
  {
    return _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  }
  else
  {
    sub_253B085B0();
    sub_253B0A480();
    return sub_253B05590();
  }
}

uint64_t static IntelligenceFlowIdentifiers.combinedIdentifier(sessionId:spanId:)(uint64_t a1)
{
  uint64_t v2 = sub_253B055C0();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25346CC44();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_253B085E0();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_25346CC44();
  uint64_t v15 = v14 - v13;
  sub_253B085D0();
  sub_253B085A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, a1, v2);
  sub_253B085C0();
  IntelligenceFlowIdentifiers.sessionSpanId.getter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
}

uint64_t sub_2534AD61C()
{
  uint64_t v0 = sub_253B089F0();
  sub_2534AF1BC(v0, qword_269CDBE00);
  sub_253462BD4(v0, (uint64_t)qword_269CDBE00);
  return sub_253B089E0();
}

void static PlanGenerationTelemetry.started(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v94 = a4;
  uint64_t v87 = a2;
  uint64_t v88 = a3;
  uint64_t v100 = a1;
  uint64_t v8 = sub_253462A5C(&qword_26B248D20);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  uint64_t v99 = v10;
  uint64_t v11 = sub_253462A5C(&qword_26B248D30);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CB04();
  uint64_t v96 = v13;
  uint64_t v14 = sub_253462A5C(&qword_26B248D58);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_2534AF260(v16, v83);
  sub_253B08530();
  sub_253465998();
  uint64_t v97 = v18;
  uint64_t v98 = v17;
  MEMORY[0x270FA5388](v17);
  sub_25346CB04();
  uint64_t v92 = v19;
  uint64_t v20 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v21 = sub_25346CB4C(v20);
  MEMORY[0x270FA5388](v21);
  sub_25348366C();
  uint64_t v22 = sub_253462A5C(&qword_269CDBE18);
  uint64_t v23 = sub_25346CB4C(v22);
  MEMORY[0x270FA5388](v23);
  sub_25346CC44();
  uint64_t v26 = (uint64_t *)(v25 - v24);
  uint64_t v95 = sub_253B088A0();
  sub_253465998();
  uint64_t v91 = v27;
  MEMORY[0x270FA5388](v28);
  sub_2534966B0();
  uint64_t v29 = sub_253462A5C(&qword_269CDBE20);
  uint64_t v30 = sub_25346CB4C(v29);
  MEMORY[0x270FA5388](v30);
  sub_25346CC44();
  uint64_t v33 = v32 - v31;
  uint64_t v105 = sub_253B08790();
  sub_253465998();
  uint64_t v89 = v34;
  MEMORY[0x270FA5388](v35);
  sub_2534AF2A0(v36, v83);
  uint64_t v104 = sub_253B08750();
  sub_253465998();
  uint64_t v102 = v37;
  MEMORY[0x270FA5388](v38);
  sub_25346CB04();
  uint64_t v101 = v39;
  uint64_t v40 = sub_253462A5C(&qword_26B241248);
  uint64_t v41 = sub_25346CB4C(v40);
  MEMORY[0x270FA5388](v41);
  sub_25346CC44();
  uint64_t v44 = v43 - v42;
  uint64_t v45 = sub_253B085E0();
  sub_253465998();
  uint64_t v47 = v46;
  uint64_t v49 = MEMORY[0x270FA5388](v48);
  uint64_t v51 = (char *)&v83 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  int v53 = (char *)&v83 - v52;
  uint64_t v90 = a5;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  uint64_t v54 = type metadata accessor for Session.Transcript(0);
  sub_2534B3CC0(*(void *)(v100 + *(int *)(v54 + 32)), v44);
  uint64_t v55 = type metadata accessor for Session.Event(0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v44, 1, v55) == 1)
  {
    sub_253472458(v44, &qword_26B241248);
    if (qword_269CDA7A8 != -1) {
      swift_once();
    }
    uint64_t v56 = sub_253B089F0();
    sub_253462BD4(v56, (uint64_t)qword_269CDBE00);
    uint64_t v57 = (void *)sub_253B089D0();
    os_log_type_t v58 = sub_253B09D80();
    if (sub_2534AF330(v58))
    {
      *(_WORD *)sub_2534AF384() = 0;
      sub_2534AF240(&dword_253460000, v59, v60, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }
  }
  else
  {
    Session.Event.formingTraceIds()();
    sub_2534AF0E8(v44);
    uint64_t v86 = v47;
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    uint64_t v84 = v53;
    uint64_t v85 = v45;
    v61(v53, v51, v45);
    sub_253B08740();
    swift_bridgeObjectRetain();
    sub_253B08730();
    sub_253B08780();
    sub_2534AF234();
    v62();
    uint64_t v63 = sub_253B08760();
    sub_25346CAF4();
    sub_25346CCF8();
    v64();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v33, 0, 1, v63);
    sub_253B08770();
    sub_253B08890();
    uint64_t v65 = swift_allocBox();
    uint64_t v66 = v89;
    sub_2534AF234();
    v67();
    uint64_t *v26 = v65;
    uint64_t v68 = sub_253B08860();
    sub_25346CAF4();
    sub_25346CCF8();
    v69();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v26, 0, 1, v68);
    sub_253B08870();
    uint64_t v70 = sub_253B055C0();
    sub_25346CAF4();
    uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v72(v5, v90, v70);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, 0, 1, v70);
    sub_253B08880();
    v72(v5, v94, v70);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, 0, 1, v70);
    sub_253B08720();
    type metadata accessor for TelemetryStream();
    uint64_t v73 = v93;
    sub_253B088C0();
    uint64_t v74 = sub_253B088D0();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v73, 0, 1, v74);
    uint64_t v75 = (uint64_t)v84;
    sub_2534B3980((uint64_t)v84, v73);
    sub_253472458(v73, &qword_26B248D58);
    uint64_t v76 = v91;
    uint64_t v77 = v95;
    sub_2534AF234();
    v78();
    sub_253B08500();
    sub_25346CAF4();
    sub_25346CCF8();
    v79();
    sub_2534AF39C();
    sub_253B08510();
    sub_253B08480();
    sub_25346CAF4();
    sub_25346CCF8();
    v80();
    sub_2534AF39C();
    sub_253B084A0();
    static TelemetryStream.insert(_:)();
    sub_2534659CC();
    v81();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v6, v77);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v103, v105);
    sub_2534659CC();
    v82();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v75, v85);
  }
}

uint64_t static PlanGenerationTelemetry.modelInferenceCallEnded(modelInterface:modelIdentifier:traceIds:planCycleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = sub_253462A5C(&qword_26B248D20);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v93 = v12;
  uint64_t v13 = sub_253462A5C(&qword_26B248D30);
  uint64_t v14 = sub_25346CB4C(v13);
  MEMORY[0x270FA5388](v14);
  sub_25346CB04();
  uint64_t v15 = sub_253462A5C(&qword_26B248D58);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_25346CB04();
  uint64_t v88 = v17;
  sub_253B08530();
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  sub_25346CB04();
  uint64_t v19 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v20 = sub_25346CB4C(v19);
  MEMORY[0x270FA5388](v20);
  sub_25346CB04();
  uint64_t v86 = v21;
  uint64_t v22 = sub_253462A5C(&qword_269CDBE18);
  uint64_t v23 = sub_25346CB4C(v22);
  MEMORY[0x270FA5388](v23);
  sub_25346CC44();
  uint64_t v26 = (uint64_t *)(v25 - v24);
  sub_253B088A0();
  sub_253465998();
  uint64_t v91 = v28;
  uint64_t v92 = v27;
  MEMORY[0x270FA5388](v27);
  sub_2534AF280(v29, v81);
  uint64_t v30 = sub_253462A5C(&qword_269CDBE28);
  uint64_t v31 = sub_25346CB4C(v30);
  MEMORY[0x270FA5388](v31);
  sub_25346CC44();
  uint64_t v34 = v33 - v32;
  uint64_t v100 = sub_253B08850();
  sub_253465998();
  uint64_t v87 = v35;
  MEMORY[0x270FA5388](v36);
  sub_25346CB04();
  uint64_t v98 = v37;
  uint64_t v38 = sub_253462A5C(&qword_269CDBE30);
  uint64_t v39 = sub_25346CB4C(v38);
  MEMORY[0x270FA5388](v39);
  sub_25346CB04();
  uint64_t v85 = v40;
  sub_253B087D0();
  sub_253465998();
  MEMORY[0x270FA5388](v41);
  sub_2534AF2BC(v42, v82);
  uint64_t v43 = sub_253462A5C(&qword_26B248D38);
  uint64_t v44 = sub_25346CB4C(v43);
  MEMORY[0x270FA5388](v44);
  sub_2534AF2D8();
  uint64_t v45 = sub_253B085E0();
  sub_253465998();
  uint64_t v97 = v46;
  MEMORY[0x270FA5388](v47);
  sub_2534AF260(v48, v83);
  uint64_t v99 = sub_253B055C0();
  sub_253465998();
  uint64_t v102 = v49;
  MEMORY[0x270FA5388](v50);
  sub_2534AF2A0(v51, v84);
  if (qword_269CDA7A8 != -1) {
    swift_once();
  }
  uint64_t v52 = sub_253B089F0();
  sub_253462BD4(v52, (uint64_t)qword_269CDBE00);
  swift_bridgeObjectRetain_n();
  int v53 = sub_253B089D0();
  os_log_type_t v54 = sub_253B09D60();
  uint64_t v94 = v45;
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v104 = swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315138;
    swift_bridgeObjectRetain();
    sub_253464DF8(a2, a3, &v104);
    sub_253B09E80();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_253460000, v53, v54, "Model inference successful, using model: %s", v55, 0xCu);
    swift_arrayDestroy();
    sub_2534659B4();
    uint64_t v45 = v94;
    sub_2534659B4();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v56 = v103;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  sub_2534AF144(a4, v6);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v45) == 1)
  {
    sub_253472458(v6, &qword_26B248D38);
    uint64_t v57 = (void *)sub_253B089D0();
    os_log_type_t v58 = sub_253B09D80();
    if (sub_2534AF330(v58))
    {
      *(_WORD *)sub_2534AF384() = 0;
      sub_2534AF240(&dword_253460000, v59, v60, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }

    uint64_t v61 = v99;
    uint64_t v62 = v102;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v96, v6, v45);
    sub_253B087C0();
    uint64_t v63 = sub_253B08810();
    sub_25346CAF4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v85, a1, v63);
    sub_2534AF368(v85);
    MEMORY[0x25A2677A0](v85);
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_253B087B0();
    MEMORY[0x25A267840](v65);
    sub_2534AF234();
    v66();
    sub_253B08820();
    sub_25346CAF4();
    sub_2534AF220();
    v67();
    sub_2534AF34C(v34);
    sub_253B08830();
    sub_253B08890();
    uint64_t v68 = swift_allocBox();
    sub_2534AF234();
    v69();
    uint64_t *v26 = v68;
    sub_253B08860();
    sub_25346CAF4();
    sub_25346CCF8();
    v70();
    sub_2534AF368((uint64_t)v26);
    sub_253B08870();
    uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
    uint64_t v61 = v99;
    v71(v86, v103, v99);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v86, 0, 1, v99);
    sub_253B08880();
    v71(v86, a5, v99);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v86, 0, 1, v99);
    sub_253B08720();
    type metadata accessor for TelemetryStream();
    sub_253B088C0();
    uint64_t v72 = sub_253B088D0();
    sub_2534AF3C8(v72);
    sub_2534AF3E8();
    sub_253472458(v88, &qword_26B248D58);
    sub_2534AF234();
    v73();
    sub_253B08500();
    sub_25346CAF4();
    sub_2534AF220();
    v74();
    sub_2534AF2F4();
    uint64_t v75 = sub_253B08480();
    sub_25346CAF4();
    sub_2534AF220();
    v76();
    uint64_t v77 = v75;
    uint64_t v62 = v102;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v93, 0, 1, v77);
    uint64_t v56 = v103;
    sub_253B084A0();
    static TelemetryStream.insert(_:)();
    sub_2534659CC();
    v78();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v89, v92);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v98, v100);
    sub_2534659CC();
    v79();
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v94);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(a6, v56, v61);
}

uint64_t static PlanGenerationTelemetry.modelInferenceCallFailed(modelInterface:traceIds:planCycleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_253462A5C(&qword_26B248D20);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25346CB04();
  uint64_t v83 = v11;
  uint64_t v12 = sub_253462A5C(&qword_26B248D30);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_25346CB04();
  uint64_t v14 = sub_253462A5C(&qword_26B248D58);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_25346CB04();
  uint64_t v78 = v16;
  sub_253B08530();
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  sub_25346CB04();
  uint64_t v18 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v19 = sub_25346CB4C(v18);
  MEMORY[0x270FA5388](v19);
  sub_25346CC44();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = sub_253462A5C(&qword_269CDBE18);
  uint64_t v24 = sub_25346CB4C(v23);
  MEMORY[0x270FA5388](v24);
  sub_2534AF2D8();
  sub_253B088A0();
  sub_253465998();
  uint64_t v81 = v26;
  uint64_t v82 = v25;
  MEMORY[0x270FA5388](v25);
  sub_25346CB04();
  uint64_t v79 = v27;
  uint64_t v28 = sub_253462A5C(&qword_269CDBE28);
  uint64_t v29 = sub_25346CB4C(v28);
  MEMORY[0x270FA5388](v29);
  sub_2534966B0();
  uint64_t v88 = sub_253B08850();
  sub_253465998();
  uint64_t v77 = v30;
  MEMORY[0x270FA5388](v31);
  sub_25346CB04();
  uint64_t v86 = v32;
  uint64_t v33 = sub_253462A5C(&qword_269CDBE30);
  uint64_t v34 = sub_25346CB4C(v33);
  MEMORY[0x270FA5388](v34);
  sub_2534AF280(v35, v74);
  sub_253B08800();
  sub_253465998();
  MEMORY[0x270FA5388](v36);
  sub_25346CB04();
  uint64_t v37 = sub_253462A5C(&qword_26B248D38);
  uint64_t v38 = sub_25346CB4C(v37);
  MEMORY[0x270FA5388](v38);
  sub_25348366C();
  uint64_t v39 = sub_253B085E0();
  sub_253465998();
  uint64_t v85 = v40;
  MEMORY[0x270FA5388](v41);
  sub_2534AF2BC(v42, v75);
  uint64_t v87 = sub_253B055C0();
  sub_253465998();
  uint64_t v90 = v43;
  MEMORY[0x270FA5388](v44);
  sub_25346CB04();
  uint64_t v91 = v45;
  if (qword_269CDA7A8 != -1) {
    swift_once();
  }
  uint64_t v46 = sub_253B089F0();
  sub_253462BD4(v46, (uint64_t)qword_269CDBE00);
  uint64_t v47 = sub_253B089D0();
  os_log_type_t v48 = sub_253B09D80();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)sub_2534AF384();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl(&dword_253460000, v47, v48, "Model inference FAILED", v49, 2u);
    sub_2534659B4();
  }

  uint64_t v50 = v91;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  sub_2534AF144(a2, v4);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v39) == 1)
  {
    sub_253472458(v4, &qword_26B248D38);
    uint64_t v51 = (void *)sub_253B089D0();
    os_log_type_t v52 = sub_253B09D80();
    if (sub_2534AF330(v52))
    {
      *(_WORD *)sub_2534AF384() = 0;
      sub_2534AF240(&dword_253460000, v53, v54, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }

    uint64_t v55 = v90;
    uint64_t v56 = v87;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v84, v4, v39);
    sub_253B087F0();
    uint64_t v57 = sub_253B08810();
    sub_25346CAF4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v76, a1, v57);
    sub_2534AF368(v76);
    uint64_t v59 = MEMORY[0x25A2677E0]();
    MEMORY[0x25A267840](v59);
    sub_2534AF234();
    v60();
    sub_253B08820();
    sub_25346CAF4();
    sub_2534AF220();
    v61();
    sub_2534AF34C(v6);
    sub_253B08830();
    sub_253B08890();
    uint64_t v62 = swift_allocBox();
    sub_2534AF234();
    v63();
    *uint64_t v5 = v62;
    sub_253B08860();
    sub_25346CAF4();
    sub_2534AF220();
    v64();
    sub_2534AF34C((uint64_t)v5);
    sub_253B08870();
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
    v65(v22, v91, v87);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v22, 0, 1, v87);
    sub_253B08880();
    v65(v22, a3, v87);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v22, 0, 1, v87);
    sub_253B08720();
    type metadata accessor for TelemetryStream();
    sub_253B088C0();
    uint64_t v66 = sub_253B088D0();
    sub_2534AF3C8(v66);
    sub_2534AF3E8();
    sub_253472458(v78, &qword_26B248D58);
    sub_2534AF234();
    v67();
    sub_253B08500();
    sub_25346CAF4();
    sub_2534AF220();
    v68();
    sub_2534AF2F4();
    uint64_t v69 = sub_253B08480();
    sub_25346CAF4();
    sub_2534AF220();
    v70();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v83, 0, 1, v69);
    uint64_t v56 = v87;
    uint64_t v55 = v90;
    sub_253B084A0();
    static TelemetryStream.insert(_:)();
    uint64_t v50 = v91;
    sub_2534659CC();
    v71();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v86, v88);
    sub_2534659CC();
    v72();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v39);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(a4, v50, v56);
}

uint64_t sub_2534AF0E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2534AF144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_26B248D38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PlanGenerationTelemetry()
{
  return &type metadata for PlanGenerationTelemetry;
}

uint64_t *sub_2534AF1BC(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_2534AF240(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_2534AF260@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void sub_2534AF280(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534AF2A0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534AF2BC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_2534AF2D8()
{
  return 0;
}

uint64_t sub_2534AF2F4()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return sub_253B08510();
}

BOOL sub_2534AF330(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_2534AF34C(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v1);
}

uint64_t sub_2534AF368(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v1);
}

uint64_t sub_2534AF384()
{
  return swift_slowAlloc();
}

uint64_t sub_2534AF39C()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_2534AF3C8(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, a1);
}

uint64_t sub_2534AF3E8()
{
  return sub_2534B3980(v1, v0);
}

uint64_t sub_2534AF408()
{
  uint64_t v0 = sub_253B089F0();
  sub_2534AF1BC(v0, qword_269CDBE38);
  sub_253462BD4(v0, (uint64_t)qword_269CDBE38);
  return sub_253B089E0();
}

void static PlatformPnRTelemetry.started(_:_:)()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  os_log_type_t v5 = v4;
  uint64_t v6 = sub_253462A5C(&qword_26B241248);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_25346CC54();
  uint64_t v8 = sub_253462A5C(&qword_26B248D38);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534AF2D8();
  uint64_t v10 = sub_253B055C0();
  sub_253465998();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v16 = *v5;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  uint64_t v17 = type metadata accessor for Session.Transcript(0);
  sub_2534B3CC0(*(void *)(v3 + *(int *)(v17 + 32)), v0);
  uint64_t v18 = type metadata accessor for Session.Event(0);
  sub_2534B3344(v18);
  if (v19)
  {
    sub_2534B2064(v0, &qword_26B241248);
  }
  else
  {
    Session.Event.formingTraceIds()();
    sub_2534AF0E8(v0);
  }
  uint64_t v20 = sub_253B085E0();
  sub_2534B3324(v20);
  v21[15] = v16;
  static PlatformPnRTelemetry.started(_:_:_:)();
  sub_2534B2064(v1, &qword_26B248D38);
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v10);
  sub_253465A14();
}

void static PlatformPnRTelemetry.started(_:_:_:)()
{
  sub_2534B3258();
  uint64_t v5 = v4;
  uint64_t v6 = sub_253462A5C(&qword_26B248D58);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B33AC();
  uint64_t v8 = sub_253B08530();
  sub_253465998();
  uint64_t v30 = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534727F8();
  uint64_t v13 = v11 - v12;
  MEMORY[0x270FA5388](v14);
  sub_2534B347C();
  uint64_t v15 = sub_253462A5C(&qword_26B248D38);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = sub_2534B3384();
  sub_253465998();
  uint64_t v19 = v18;
  MEMORY[0x270FA5388](v20);
  sub_25347FAAC();
  sub_2534AF144(v5, v0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, 1, v17) == 1)
  {
    sub_2534B2064(v0, &qword_26B248D38);
    if (qword_269CDA7B0 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_253B089F0();
    sub_253462BD4(v21, (uint64_t)qword_269CDBE38);
    uint64_t v22 = (void *)sub_253B089D0();
    os_log_type_t v23 = sub_253B09D80();
    if (sub_2534AF330(v23))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_2534AF240(&dword_253460000, v24, v25, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }
  }
  else
  {
    sub_25347FA84();
    v26();
    type metadata accessor for TelemetryStream();
    sub_253B088C0();
    uint64_t v27 = sub_253B088D0();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, 0, 1, v27);
    sub_2534B3980(v3, v2);
    sub_2534B2064(v2, &qword_26B248D58);
    sub_2534AF938();
    uint64_t v28 = *(void (**)(void))(v30 + 8);
    sub_2534B3470();
    v28();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v1, v13, v8);
    static TelemetryStream.insert(_:)();
    sub_2534B3470();
    v28();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v3, v17);
  }
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534B3428();
  v29();
  sub_253465A14();
}

void sub_2534AF938()
{
  sub_2534B3258();
  uint64_t v86 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_253462A5C(&qword_26B248D30);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534B33C8(v9, v71);
  sub_253B08480();
  sub_253465998();
  uint64_t v84 = v11;
  uint64_t v85 = v10;
  MEMORY[0x270FA5388](v10);
  sub_2534659D8();
  uint64_t v80 = v12;
  sub_2534B324C();
  MEMORY[0x270FA5388](v13);
  sub_2534B3318();
  uint64_t v79 = v14;
  sub_2534B324C();
  MEMORY[0x270FA5388](v15);
  sub_2534B3318();
  uint64_t v78 = v16;
  sub_2534B324C();
  MEMORY[0x270FA5388](v17);
  sub_2534B35DC();
  uint64_t v77 = v18;
  uint64_t v19 = sub_253462A5C(&qword_26B248D20);
  uint64_t v20 = sub_25346CB4C(v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v76 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v22);
  uint64_t v75 = (char *)&v71 - v23;
  sub_2534B324C();
  MEMORY[0x270FA5388](v24);
  uint64_t v74 = (char *)&v71 - v25;
  sub_2534B324C();
  MEMORY[0x270FA5388](v26);
  sub_2534B3318();
  uint64_t v73 = v27;
  sub_2534B324C();
  MEMORY[0x270FA5388](v28);
  sub_2534B35DC();
  uint64_t v72 = v29;
  uint64_t v30 = sub_253B08530();
  sub_253465998();
  uint64_t v32 = v31;
  MEMORY[0x270FA5388](v33);
  sub_25346CB04();
  uint64_t v81 = v34;
  uint64_t v35 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v36 = sub_25346CB4C(v35);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v71 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_253462A5C(&qword_26B248D50);
  uint64_t v40 = sub_25346CB4C(v39);
  MEMORY[0x270FA5388](v40);
  sub_253465A3C();
  sub_253B08710();
  sub_253465998();
  uint64_t v88 = v42;
  uint64_t v89 = v41;
  MEMORY[0x270FA5388](v41);
  sub_2534727F8();
  MEMORY[0x270FA5388](v43);
  sub_2534B347C();
  unsigned int v44 = *v4;
  uint64_t v82 = v32;
  uint64_t v83 = v30;
  uint64_t v90 = v6;
  sub_2534AF234();
  v45();
  sub_253B08700();
  sub_253B086C0();
  uint64_t v46 = sub_253B086D0();
  sub_25346CAF4();
  os_log_type_t v48 = *(void (**)(uint64_t))(v47 + 104);
  uint64_t v49 = sub_2534B348C();
  v48(v49);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v46);
  sub_253B086F0();
  uint64_t v50 = sub_253B055C0();
  sub_25346CAF4();
  sub_2534B3428();
  v51();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v38, 0, 1, v50);
  sub_253B086E0();
  switch(v44 >> 5)
  {
    case 1u:
      sub_253B08700();
      sub_253B086C0();
      uint64_t v55 = sub_2534B348C();
      v48(v55);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v46);
      sub_253B086F0();
      char v91 = v44 & 0x1F;
      sub_2534B167C();
      uint64_t v57 = v88;
      uint64_t v56 = v89;
      sub_253477128();
      v58();
      sub_253477128();
      v59();
      sub_2534B361C();
      v60();
      goto LABEL_8;
    case 2u:
      char v92 = v44 & 0x1F;
      sub_2534B18F4();
      sub_253477128();
      v61();
      sub_2534B361C();
      v62();
      goto LABEL_7;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      sub_2534B3288();
      uint64_t v63 = sub_2534B3238();
      v64(v63);
      uint64_t v65 = sub_2534B3594();
      v66(v65);
      sub_2534B32C4();
      goto LABEL_6;
    default:
      uint64_t v52 = v85;
      uint64_t v53 = v72;
      sub_25346CCF8();
      v54();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v53, 0, 1, v52);
LABEL_6:
      sub_253B084A0();
LABEL_7:
      uint64_t v57 = v88;
      uint64_t v56 = v89;
LABEL_8:
      uint64_t v67 = v87;
      sub_2534AF234();
      v68();
      uint64_t v69 = sub_253B08500();
      sub_25346CAF4();
      sub_25346CCF8();
      v70();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v67, 0, 1, v69);
      sub_253B08510();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v1, v56);
      sub_253465A14();
      return;
  }
}

uint64_t static PlatformPnRTelemetry.ended(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_253462A5C(&qword_26B241248);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_25346CC54();
  uint64_t v7 = sub_253462A5C(&qword_26B248D38);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534B3294();
  uint64_t v9 = type metadata accessor for Session.Transcript(0);
  sub_2534B3CC0(*(void *)(a2 + *(int *)(v9 + 32)), v2);
  uint64_t v10 = type metadata accessor for Session.Event(0);
  sub_2534B3344(v10);
  if (v11)
  {
    sub_2534B2064(v2, &qword_26B241248);
  }
  else
  {
    Session.Event.formingTraceIds()();
    sub_2534AF0E8(v2);
  }
  uint64_t v12 = sub_253B085E0();
  sub_2534B3324(v12);
  static PlatformPnRTelemetry.ended(_:_:_:)();
  return sub_2534B2064(v3, &qword_26B248D38);
}

void static PlatformPnRTelemetry.ended(_:_:_:)()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v5 = sub_253462A5C(&qword_26B248D58);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534B33E4();
  sub_253465998();
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v8);
  sub_2534B340C();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_253462A5C(&qword_26B248D38);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_2534B3384();
  sub_253465998();
  uint64_t v14 = v13;
  MEMORY[0x270FA5388](v15);
  sub_2534B34A4();
  sub_2534AF144(v4, v0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v0, 1, v12) == 1)
  {
    sub_2534B2064(v0, &qword_26B248D38);
    if (qword_269CDA7B0 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_253B089F0();
    sub_253462BD4(v16, (uint64_t)qword_269CDBE38);
    uint64_t v17 = (void *)sub_253B089D0();
    os_log_type_t v18 = sub_253B09D80();
    if (sub_2534AF330(v18))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_2534AF240(&dword_253460000, v19, v20, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }
  }
  else
  {
    sub_25347FA84();
    v21();
    type metadata accessor for TelemetryStream();
    sub_253B088C0();
    uint64_t v22 = sub_253B088D0();
    uint64_t v23 = sub_2534B35AC(v22);
    sub_2534B3980(v23, v24);
    sub_2534B2064(v1, &qword_26B248D58);
    sub_2534B0430();
    uint64_t v25 = *(void (**)(void))(v28 + 8);
    sub_2534B3470();
    v25();
    uint64_t v26 = sub_2534B3368();
    v27(v26);
    static TelemetryStream.insert(_:)();
    sub_2534B3470();
    v25();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v12);
  }
  sub_253465A14();
}

void sub_2534B0430()
{
  sub_2534B3258();
  uint64_t v93 = v3;
  uint64_t v5 = v4;
  uint64_t v96 = v6;
  uint64_t v98 = v7;
  uint64_t v8 = sub_253462A5C(&qword_26B248D30);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25346CB04();
  uint64_t v94 = v10;
  uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25346CB04();
  uint64_t v92 = v13;
  uint64_t v14 = sub_253462A5C(&qword_26B248D50);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_25346CB04();
  uint64_t v91 = v16;
  sub_253B08480();
  sub_253465998();
  uint64_t v87 = v18;
  uint64_t v88 = v17;
  MEMORY[0x270FA5388](v17);
  v85[7] = (char *)v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v20);
  v85[6] = (char *)v85 - v21;
  sub_2534B324C();
  MEMORY[0x270FA5388](v22);
  v85[5] = (char *)v85 - v23;
  sub_2534B324C();
  MEMORY[0x270FA5388](v24);
  sub_2534B35DC();
  v85[4] = v25;
  uint64_t v26 = sub_253462A5C(&qword_26B248D20);
  uint64_t v27 = sub_25346CB4C(v26);
  MEMORY[0x270FA5388](v27);
  sub_2534659D8();
  v85[3] = v28;
  sub_2534B324C();
  MEMORY[0x270FA5388](v29);
  v85[2] = (char *)v85 - v30;
  sub_2534B324C();
  MEMORY[0x270FA5388](v31);
  sub_2534B3318();
  v85[1] = v32;
  sub_2534B324C();
  MEMORY[0x270FA5388](v33);
  sub_2534B3318();
  v85[0] = v34;
  sub_2534B324C();
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)v85 - v36;
  uint64_t v38 = sub_253462A5C(&qword_26B248D40);
  uint64_t v39 = sub_25346CB4C(v38);
  MEMORY[0x270FA5388](v39);
  sub_2534AF2D8();
  uint64_t v40 = sub_253B08530();
  sub_253465998();
  uint64_t v42 = v41;
  MEMORY[0x270FA5388](v43);
  sub_25346CB04();
  uint64_t v86 = v44;
  uint64_t v95 = sub_253B08680();
  sub_253465998();
  uint64_t v97 = v45;
  MEMORY[0x270FA5388](v46);
  sub_2534727F8();
  MEMORY[0x270FA5388](v47);
  sub_2534B347C();
  sub_253B08710();
  sub_253465998();
  uint64_t v89 = v49;
  uint64_t v90 = v48;
  MEMORY[0x270FA5388](v48);
  sub_25347FAAC();
  unint64_t v51 = *v5;
  uint64_t v50 = (void *)v5[1];
  uint64_t v52 = (void *)v5[2];
  sub_2534AF234();
  v53();
  sub_253B08700();
  uint64_t v96 = v1;
  sub_253B08670();
  switch(v51 >> 61)
  {
    case 1uLL:
      LOBYTE(v99[0]) = v51;
      uint64_t v56 = v86;
      uint64_t v57 = v98;
      sub_2534B167C();
      uint64_t v58 = sub_2534B32AC();
      v59(v58);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v57, v56, v40);
      goto LABEL_10;
    case 2uLL:
      v99[0] = v50;
      v99[1] = v52;
      id v60 = v50;
      swift_bridgeObjectRetain();
      sub_2534B1B6C(v99);
      uint64_t v88 = v0;
      uint64_t v61 = v95;
      sub_253477128();
      v62();
      sub_25347FA84();
      v63();
      type metadata accessor for TelemetryStream();
      sub_2534B411C(v50, v88);
      sub_253B08650();
      LOBYTE(v99[0]) = v51;
      uint64_t v64 = v86;
      uint64_t v65 = v98;
      sub_2534B18F4();
      sub_2534B2BA0(v51, v50);
      uint64_t v66 = sub_2534B32AC();
      v67(v66);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v65, v64, v40);
      goto LABEL_11;
    case 3uLL:
    case 4uLL:
    case 6uLL:
      sub_2534B3288();
      uint64_t v70 = sub_2534B3238();
      v71(v70);
      goto LABEL_8;
    case 5uLL:
      uint64_t v68 = sub_2534B3238();
      v69(v68);
LABEL_8:
      uint64_t v72 = sub_2534B3594();
      v73(v72);
      sub_2534B32C4();
      break;
    default:
      uint64_t v54 = v88;
      sub_25346CCF8();
      v55();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v37, 0, 1, v54);
      break;
  }
  sub_253B084A0();
LABEL_10:
  uint64_t v61 = v95;
LABEL_11:
  uint64_t v75 = v96;
  uint64_t v74 = v97;
  sub_2534AF234();
  v76();
  sub_253B086D0();
  sub_25346CAF4();
  uint64_t v77 = sub_2534B3270();
  v78(v77);
  sub_2534B34BC();
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534B3428();
  v79();
  sub_2534B3434();
  uint64_t v81 = v89;
  uint64_t v80 = v90;
  sub_2534AF234();
  v82();
  sub_253B08500();
  sub_25346CAF4();
  uint64_t v83 = sub_2534B3270();
  v84(v83);
  sub_2534B3534();
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v75, v61);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v2, v80);
  sub_253465A14();
}

uint64_t static PlatformPnRTelemetry.failed(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253462A5C(&qword_26B241248);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_25346CC54();
  uint64_t v8 = sub_253462A5C(&qword_26B248D38);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  uint64_t v10 = type metadata accessor for Session.Transcript(0);
  sub_2534B3CC0(*(void *)(a3 + *(int *)(v10 + 32)), v3);
  uint64_t v11 = type metadata accessor for Session.Event(0);
  sub_2534B3344(v11);
  if (v12)
  {
    sub_2534B2064(v3, &qword_26B241248);
  }
  else
  {
    Session.Event.formingTraceIds()();
    sub_2534AF0E8(v3);
  }
  uint64_t v13 = sub_253B085E0();
  sub_2534B3324(v13);
  static PlatformPnRTelemetry.failed(_:_:_:_:)();
  return sub_2534B2064(v4, &qword_26B248D38);
}

void static PlatformPnRTelemetry.failed(_:_:_:_:)()
{
  sub_2534B3258();
  uint64_t v40 = v3;
  uint64_t v41 = v0;
  uint64_t v42 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_253462A5C(&qword_26B248D58);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_2534B33E4();
  sub_253465998();
  uint64_t v39 = v11;
  MEMORY[0x270FA5388](v12);
  sub_2534B340C();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_253462A5C(&qword_26B248D38);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_253B085E0();
  sub_253465998();
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v21);
  sub_2534B34A4();
  char v22 = *v8;
  uint64_t v38 = *v6;
  sub_2534AF144(v42, (uint64_t)v17);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v18) == 1)
  {
    sub_2534B2064((uint64_t)v17, &qword_26B248D38);
    if (qword_269CDA7B0 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_253B089F0();
    sub_253462BD4(v23, (uint64_t)qword_269CDBE38);
    uint64_t v24 = (void *)sub_253B089D0();
    os_log_type_t v25 = sub_253B09D80();
    if (sub_2534AF330(v25))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_2534AF240(&dword_253460000, v26, v27, "Nil traceIds (likely due to no Transcript Events), skipping Telemetry Biome stream insertion");
      sub_2534659B4();
    }
  }
  else
  {
    sub_25347FA84();
    v28();
    type metadata accessor for TelemetryStream();
    sub_253B088C0();
    uint64_t v29 = sub_253B088D0();
    uint64_t v30 = sub_2534B35AC(v29);
    sub_2534B3980(v30, v31);
    sub_2534B2064(v1, &qword_26B248D58);
    char v44 = v22;
    uint64_t v43 = v38;
    sub_2534B0FCC();
    uint64_t v32 = *(void (**)(uint64_t))(v39 + 8);
    uint64_t v33 = sub_2534B35E8();
    v32(v33);
    uint64_t v34 = sub_2534B3368();
    v35(v34);
    static TelemetryStream.insert(_:)();
    uint64_t v36 = sub_2534B35E8();
    v32(v36);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v2, v18);
  }
  sub_253465A14();
}

void sub_2534B0FCC()
{
  sub_2534B3258();
  uint64_t v89 = v4;
  uint64_t v90 = v3;
  uint64_t v96 = v5;
  uint64_t v7 = v6;
  uint64_t v98 = v8;
  uint64_t v9 = sub_253462A5C(&qword_26B248D30);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25346CB04();
  uint64_t v97 = v11;
  uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_2534B33C8(v14, v80);
  uint64_t v15 = sub_253462A5C(&qword_26B248D50);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_25346CB04();
  uint64_t v95 = v17;
  sub_253B08480();
  sub_253465998();
  uint64_t v87 = v19;
  uint64_t v88 = v18;
  MEMORY[0x270FA5388](v18);
  sub_2534659D8();
  uint64_t v86 = v20;
  sub_2534B324C();
  MEMORY[0x270FA5388](v21);
  sub_2534B3318();
  uint64_t v85 = v22;
  sub_2534B324C();
  MEMORY[0x270FA5388](v23);
  uint64_t v84 = (char *)&v80 - v24;
  sub_2534B324C();
  MEMORY[0x270FA5388](v25);
  sub_2534B35DC();
  uint64_t v83 = v26;
  uint64_t v27 = sub_253462A5C(&qword_26B248D20);
  uint64_t v28 = sub_25346CB4C(v27);
  MEMORY[0x270FA5388](v28);
  sub_2534659D8();
  uint64_t v82 = v29;
  sub_2534B324C();
  MEMORY[0x270FA5388](v30);
  sub_2534B3318();
  uint64_t v81 = v31;
  sub_2534B324C();
  MEMORY[0x270FA5388](v32);
  uint64_t v80 = (uint64_t)&v80 - v33;
  sub_2534B324C();
  uint64_t v35 = MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v80 - v36;
  MEMORY[0x270FA5388](v35);
  sub_253B08530();
  sub_253465998();
  MEMORY[0x270FA5388](v38);
  sub_253465A3C();
  uint64_t v39 = sub_253462A5C(&qword_26B248D40);
  uint64_t v40 = sub_25346CB4C(v39);
  MEMORY[0x270FA5388](v40);
  sub_25349888C();
  sub_253B086B0();
  sub_253465998();
  uint64_t v93 = v42;
  uint64_t v94 = v41;
  MEMORY[0x270FA5388](v41);
  sub_2534B33AC();
  sub_253B08710();
  sub_253465998();
  uint64_t v91 = v44;
  uint64_t v92 = v43;
  MEMORY[0x270FA5388](v43);
  sub_25347FAAC();
  unsigned int v45 = *v7;
  uint64_t v46 = *v89;
  sub_2534AF234();
  v47();
  sub_253B08700();
  sub_253B086A0();
  type metadata accessor for TelemetryStream();
  sub_2534B411C(v46, v1);
  MEMORY[0x25A267690](v1);
  switch(v45 >> 5)
  {
    case 1u:
      char v99 = v45 & 0x1F;
      sub_2534B167C();
      goto LABEL_5;
    case 2u:
      char v100 = v45 & 0x1F;
      sub_2534B18F4();
LABEL_5:
      uint64_t v49 = sub_2534B32AC();
      v50(v49);
      sub_2534B361C();
      v51();
      goto LABEL_14;
    case 3u:
      uint64_t v52 = v88;
      (*(void (**)(uint64_t, void, uint64_t))(v87 + 104))(v83, **((unsigned int **)&unk_265397ED8 + (v45 & 0x1F)), v88);
      sub_2534B361C();
      v53();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v37, 0, 1, v52);
      goto LABEL_13;
    case 4u:
      uint64_t v55 = v87;
      uint64_t v54 = v88;
      uint64_t v56 = v84;
      uint64_t v57 = sub_2534B3238();
      v58(v57);
      (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v80, v56, v54);
      goto LABEL_12;
    case 5u:
      uint64_t v60 = v87;
      uint64_t v59 = v88;
      sub_2534B3288();
      uint64_t v61 = v85;
      uint64_t v62 = sub_2534B3238();
      v63(v62);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v81, v61, v59);
      goto LABEL_12;
    case 6u:
      uint64_t v65 = v86;
      uint64_t v64 = v87;
      sub_2534B3288();
      uint64_t v67 = (unsigned int *)MEMORY[0x263F4EA20];
      if (v45) {
        uint64_t v67 = (unsigned int *)MEMORY[0x263F4EA28];
      }
      uint64_t v68 = v88;
      v66(v65, *v67, v88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v82, v65, v68);
      goto LABEL_12;
    default:
      sub_25346CCF8();
      v48();
LABEL_12:
      sub_2534B32C4();
LABEL_13:
      sub_253B084A0();
LABEL_14:
      uint64_t v70 = v93;
      uint64_t v69 = v94;
      sub_2534AF234();
      v71();
      sub_253B086D0();
      sub_25346CAF4();
      uint64_t v72 = sub_2534B3270();
      v73(v72);
      sub_2534B34BC();
      sub_253B055C0();
      sub_25346CAF4();
      sub_2534B3428();
      v74();
      sub_2534B3434();
      uint64_t v76 = v91;
      uint64_t v75 = v92;
      sub_2534AF234();
      v77();
      sub_253B08500();
      sub_25346CAF4();
      uint64_t v78 = sub_2534B3270();
      v79(v78);
      sub_2534B3534();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v0, v69);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v2, v75);
      sub_253465A14();
      return;
  }
}

void sub_2534B167C()
{
  sub_2534B3258();
  uint64_t v2 = sub_253462A5C(&qword_26B248D20);
  uint64_t v3 = sub_25346CB4C(v2);
  MEMORY[0x270FA5388](v3);
  sub_2534B32EC();
  sub_25346CAF4();
  sub_2534B3428();
  v4();
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      if (qword_269CDA7B0 != -1) {
        swift_once();
      }
      uint64_t v5 = sub_253B089F0();
      sub_253462BD4(v5, (uint64_t)qword_269CDBE38);
      uint64_t v6 = sub_253B089D0();
      os_log_type_t v7 = sub_253B09D80();
      if (os_log_type_enabled(v6, v7))
      {
        swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        sub_2534B3628(4.8149e-34);
        uint64_t v8 = sub_253B09750();
        uint64_t v10 = sub_253464DF8(v8, v9, &v14);
        sub_2534B3570(v10);
        swift_bridgeObjectRelease();
        sub_2534B35FC(&dword_253460000, v11, v12, "Warning! Telemetry for %s should be added!");
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
      }

      *uint64_t v0 = 0;
      break;
  }
  sub_253B08480();
  sub_25346CAF4();
  sub_25346CCF8();
  v13();
  sub_2534B34F8();
  sub_253465A14();
}

void sub_2534B18F4()
{
  sub_2534B3258();
  uint64_t v2 = sub_253462A5C(&qword_26B248D20);
  uint64_t v3 = sub_25346CB4C(v2);
  MEMORY[0x270FA5388](v3);
  sub_2534B32EC();
  sub_25346CAF4();
  sub_2534B3428();
  v4();
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      if (qword_269CDA7B0 != -1) {
        swift_once();
      }
      uint64_t v5 = sub_253B089F0();
      sub_253462BD4(v5, (uint64_t)qword_269CDBE38);
      uint64_t v6 = sub_253B089D0();
      os_log_type_t v7 = sub_253B09D80();
      if (os_log_type_enabled(v6, v7))
      {
        swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        sub_2534B3628(4.8149e-34);
        uint64_t v8 = sub_253B09750();
        uint64_t v10 = sub_253464DF8(v8, v9, &v14);
        sub_2534B3570(v10);
        swift_bridgeObjectRelease();
        sub_2534B35FC(&dword_253460000, v11, v12, "Warning! Telemetry for %s should be added!");
        swift_arrayDestroy();
        sub_2534659B4();
        sub_2534659B4();
      }

      *uint64_t v0 = 0;
      break;
  }
  sub_253B08480();
  sub_25346CAF4();
  sub_25346CCF8();
  v13();
  sub_2534B34F8();
  sub_253465A14();
}

uint64_t sub_2534B1B6C(void **a1)
{
  uint64_t v3 = sub_253462A5C(&qword_26B248D40);
  uint64_t v4 = sub_25346CB4C(v3);
  MEMORY[0x270FA5388](v4);
  sub_2534B3294();
  uint64_t v5 = *a1;
  sub_253B08670();
  type metadata accessor for TelemetryStream();
  sub_2534B411C(v5, v1);
  sub_253B08650();
  swift_bridgeObjectRetain();
  return sub_253B08660();
}

uint64_t PlatformPnRTelemetry.deinit()
{
  return v0;
}

uint64_t PlatformPnRTelemetry.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t static StandardPlannerTarget.== infix(_:_:)()
{
  return 1;
}

uint64_t StandardPlannerTarget.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t StandardPlannerTarget.hashValue.getter()
{
  return sub_253B0A630();
}

uint64_t sub_2534B1C9C()
{
  return StandardPlannerTarget.hashValue.getter();
}

uint64_t sub_2534B1CB4()
{
  return StandardPlannerTarget.hash(into:)();
}

BOOL static PlannerServiceTarget.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PlannerServiceTarget.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t _s30IntelligenceFlowPlannerSupport0C13ServiceTargetO9hashValueSivg_0()
{
  return sub_253B0A630();
}

BOOL static LLMCacheManagerTarget.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t LLMCacheManagerTarget.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t LLMCacheManagerTarget.hashValue.getter()
{
  return sub_253B0A630();
}

void GMSCallEndedData.gmsTarget.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t GMSCallEndedData.modelIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

IntelligenceFlowPlannerSupport::GMSCallEndedData __swiftcall GMSCallEndedData.init(gmsTarget:modelIdentifier:)(IntelligenceFlowPlannerSupport::GMSTarget gmsTarget, Swift::String modelIdentifier)
{
  *(unsigned char *)uint64_t v2 = *(unsigned char *)gmsTarget;
  *(Swift::String *)(v2 + 8) = modelIdentifier;
  result.modelIdentifier = modelIdentifier;
  result.gmsTarget = gmsTarget;
  return result;
}

void FailedPayload.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t FailedPayload.init(error:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_2534B1E6C()
{
  return sub_253B08900();
}

void HandleEndedPayload.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = 0;
  a1[1] = v1;
}

uint64_t HandleEndedPayload.init(error:eventIds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void Session.Event.formingTelemetryEvent(state:contextId:)()
{
  sub_2534B3258();
  uint64_t v20 = v2;
  uint64_t v21 = v1;
  uint64_t v4 = v3;
  sub_253B085E0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  os_log_type_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_253462A5C(&qword_26B248D58);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25349888C();
  uint64_t v10 = sub_253B08530();
  sub_253465998();
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v19 = *v4;
  uint64_t v16 = *((void *)v4 + 2);
  type metadata accessor for TelemetryStream();
  sub_253B088C0();
  uint64_t v17 = sub_253B088D0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v17);
  Session.Event.formingTraceIds()();
  sub_2534B3980((uint64_t)v7, v0);
  sub_2534B3470();
  v18();
  sub_2534B2064(v0, &qword_26B248D58);
  type metadata accessor for PlatformPnRTelemetry();
  long long v22 = v19;
  uint64_t v23 = v16;
  sub_2534B0430();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  sub_253465A14();
}

uint64_t sub_2534B2064(uint64_t a1, uint64_t *a2)
{
  sub_253462A5C(a2);
  sub_25346CAF4();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for PlatformPnRTelemetry()
{
  return self;
}

unint64_t sub_2534B20E0()
{
  unint64_t result = qword_269CDBE50;
  if (!qword_269CDBE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE50);
  }
  return result;
}

unint64_t sub_2534B2130()
{
  unint64_t result = qword_269CDBE58;
  if (!qword_269CDBE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE58);
  }
  return result;
}

unint64_t sub_2534B2180()
{
  unint64_t result = qword_269CDBE60;
  if (!qword_269CDBE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE60);
  }
  return result;
}

unint64_t sub_2534B21D0()
{
  unint64_t result = qword_269CDBE68;
  if (!qword_269CDBE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE68);
  }
  return result;
}

unint64_t sub_2534B2220()
{
  unint64_t result = qword_269CDBE70;
  if (!qword_269CDBE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE70);
  }
  return result;
}

unint64_t sub_2534B2270()
{
  unint64_t result = qword_269CDBE78;
  if (!qword_269CDBE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBE78);
  }
  return result;
}

uint64_t method lookup function for PlatformPnRTelemetry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PlatformPnRTelemetry);
}

unsigned char *storeEnumTagSinglePayload for StandardPlannerTarget(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2534B2370);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for StandardPlannerTarget()
{
}

uint64_t getEnumTagSinglePayload for PlannerServiceTarget(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PlannerServiceTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B24F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for PlannerServiceTarget()
{
}

uint64_t getEnumTagSinglePayload for ResponseGenerationTarget(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ResponseGenerationTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B2680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for ResponseGenerationTarget()
{
}

unsigned char *storeEnumTagSinglePayload for ExecutorRequestTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B2780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for ExecutorRequestTarget()
{
}

unsigned char *storeEnumTagSinglePayload for GMSTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B2880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for GMSTarget()
{
}

unsigned char *storeEnumTagSinglePayload for LLMCacheManagerTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B2980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for LLMCacheManagerTarget()
{
}

uint64_t destroy for GMSCallEndedData()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s30IntelligenceFlowPlannerSupport16GMSCallEndedDataVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GMSCallEndedData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ExternalAgentRequestRewriteMetadata(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GMSCallEndedData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GMSCallEndedData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GMSCallEndedData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for GMSCallEndedData()
{
}

void type metadata accessor for StartedState()
{
}

unint64_t sub_2534B2B38(unint64_t result, void *a2)
{
  if (result >> 61 != 4)
  {
    if (result >> 61 != 2) {
      return result;
    }
    id v2 = a2;
  }
  return swift_bridgeObjectRetain();
}

void destroy for EndedState(uint64_t a1)
{
}

void sub_2534B2BA0(unint64_t a1, void *a2)
{
  if (a1 >> 61 == 4)
  {
    swift_bridgeObjectRelease();
  }
  else if (a1 >> 61 == 2)
  {
    swift_bridgeObjectRelease();
  }
}

unint64_t *_s30IntelligenceFlowPlannerSupport10EndedStateOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unsigned int v4 = (void *)a2[1];
  unint64_t v5 = a2[2];
  sub_2534B2B38(*a2, v4);
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  a1[2] = v5;
  return a1;
}

unint64_t *assignWithCopy for EndedState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unsigned int v4 = (void *)a2[1];
  unint64_t v5 = a2[2];
  sub_2534B2B38(*a2, v4);
  unint64_t v6 = *a1;
  BOOL v7 = (void *)a1[1];
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  a1[2] = v5;
  sub_2534B2BA0(v6, v7);
  return a1;
}

unint64_t *assignWithTake for EndedState(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *a1;
  unint64_t v5 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_2534B2BA0(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for EndedState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)a1 >> 4;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for EndedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)__n128 result = 16 * -a2;
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_2534B2D80(void *a1)
{
  return *a1 >> 61;
}

void *sub_2534B2D8C(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_2534B2D9C(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xF | (a2 << 61);
  return result;
}

void type metadata accessor for EndedState()
{
}

uint64_t _s30IntelligenceFlowPlannerSupport12StartedStateOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    unsigned int v5 = -1;
    return v5 + 1;
  }
  if (a2 >= 0xA)
  {
    if (a2 + 246 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 246) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    unsigned int v5 = (*a1 | (v4 << 8)) - 247;
    return v5 + 1;
  }
LABEL_17:
  unsigned int v5 = ((*a1 >> 1) & 8 | (*a1 >> 5)) ^ 0xF;
  if (v5 >= 9) {
    unsigned int v5 = -1;
  }
  return v5 + 1;
}

unsigned char *_s30IntelligenceFlowPlannerSupport12StartedStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 246 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 246) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 9)
  {
    unsigned int v6 = ((a2 - 10) >> 8) + 1;
    *__n128 result = a2 - 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534B2F2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = 16 * (((-a2 & 8) != 0) - 2 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_2534B2F54(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

unsigned char *sub_2534B2F60(unsigned char *result)
{
  *result &= 0x1Fu;
  return result;
}

unsigned char *sub_2534B2F70(unsigned char *result, char a2)
{
  *__n128 result = *result & 0xF | (32 * a2);
  return result;
}

void type metadata accessor for FailedState()
{
}

void **initializeBufferWithCopyOfBuffer for FailedPayload(void **a1, void **a2)
{
  int v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for FailedPayload(id *a1)
{
}

void **assignWithCopy for FailedPayload(void **a1, void **a2)
{
  int v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *initializeWithTake for FailedPayload(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void **assignWithTake for FailedPayload(void **a1, void **a2)
{
  int v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for FailedPayload(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FailedPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for FailedPayload()
{
}

void *initializeBufferWithCopyOfBuffer for HandleEndedPayload(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HandleEndedPayload(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for HandleEndedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for HandleEndedPayload(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for HandleEndedPayload()
{
}

uint64_t sub_2534B3238()
{
  return v0;
}

uint64_t sub_2534B3270()
{
  return v0;
}

uint64_t sub_2534B32AC()
{
  return v0;
}

uint64_t sub_2534B32C4()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return v1;
}

uint64_t sub_2534B32EC()
{
  return sub_253B08530();
}

uint64_t sub_2534B3324(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, v1, 1, a1);
}

uint64_t sub_2534B3344(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, 1, a1);
}

uint64_t sub_2534B3368()
{
  return v0;
}

uint64_t sub_2534B3384()
{
  return sub_253B085E0();
}

uint64_t sub_2534B33AC()
{
  return 0;
}

void sub_2534B33C8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_2534B33E4()
{
  return sub_253B08530();
}

uint64_t sub_2534B3434()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return sub_253B086E0();
}

uint64_t sub_2534B348C()
{
  return v0;
}

uint64_t sub_2534B34BC()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return sub_253B086F0();
}

uint64_t sub_2534B34F8()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return sub_253B084A0();
}

uint64_t sub_2534B3534()
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
  return sub_253B08510();
}

uint64_t sub_2534B3570(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return sub_253B09E80();
}

uint64_t sub_2534B3594()
{
  return v0;
}

uint64_t sub_2534B35AC(uint64_t a1)
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, a1);
  return v2;
}

uint64_t sub_2534B35E8()
{
  return v0;
}

void sub_2534B35FC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_2534B3628(float a1)
{
  *uint64_t v2 = a1;
  *(unsigned char *)(v3 - 96) = v1;
}

uint64_t Session.Transcript.formingTraceIds()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = sub_253B055C0();
  sub_253465998();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_25346CC6C();
  uint64_t v22 = sub_253B085E0();
  sub_253465998();
  uint64_t v21 = v9;
  MEMORY[0x270FA5388](v10);
  sub_25346CC44();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_253462A5C(&qword_26B241248);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = sub_2534B464C();
  uint64_t v17 = type metadata accessor for Session.Event(v16);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v18);
  sub_2534B34A4();
  uint64_t v19 = type metadata accessor for Session.Transcript(0);
  sub_2534B3E44(*(void *)(v1 + *(int *)(v19 + 32)), (void (*)(void))type metadata accessor for Session.Event, (void (*)(void))type metadata accessor for Session.Event, v1);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, 1, v17) == 1)
  {
    sub_2534B2064(v1, &qword_26B241248);
    sub_253B085D0();
    if (qword_26B249170 != -1) {
      swift_once();
    }
    sub_253B0A710();
    if (__src[3] == 1)
    {
      *(void *)&__dst[0] = 0;
      BYTE8(__dst[0]) = 1;
      memset(&__dst[1], 0, 72);
      sub_2534B2064((uint64_t)__src, &qword_269CDBE98);
    }
    else
    {
      memcpy(__dst, __src, 0x58uLL);
    }
    sub_2534B447C((uint64_t)__dst);
    sub_253B085A0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v1, v5);
    sub_253B085C0();
    swift_bridgeObjectRetain();
    sub_253B08560();
    swift_bridgeObjectRetain();
    sub_253B08570();
    swift_bridgeObjectRetain();
    sub_253B08580();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(a1, v13, v22);
  }
  else
  {
    sub_2534872D8(v1, v3);
    Session.Event.formingTraceIds()();
    return sub_2534AF0E8(v3);
  }
}

uint64_t sub_2534B3980(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_253462A5C(&qword_26B248D28);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_25346CC44();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_253462A5C(&qword_26B248D58);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_25346CC6C();
  uint64_t v14 = sub_253462A5C(&qword_26B248D38);
  uint64_t v15 = sub_25346CB4C(v14);
  MEMORY[0x270FA5388](v15);
  sub_25346CC44();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v20 = sub_25346CB4C(v19);
  MEMORY[0x270FA5388](v20);
  sub_2534B464C();
  uint64_t v21 = sub_253B084E0();
  sub_253465998();
  uint64_t v23 = v22;
  MEMORY[0x270FA5388](v24);
  sub_2534B34A4();
  sub_253B084D0();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  uint64_t v25 = sub_253B055C0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, 0, 1, v25);
  sub_253B084C0();
  uint64_t v26 = sub_253B085E0();
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v18, a1, v26);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v18, 0, 1, v26);
  sub_253B084B0();
  sub_253B08520();
  sub_2534B45B0(a2, v3, &qword_26B248D58);
  sub_253B08490();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v11, v4, v21);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, 0, 1, v21);
  sub_253B084F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v4, v21);
}

uint64_t static TelemetryStream.insert(_:)()
{
  if (qword_26B2490D0 != -1) {
    uint64_t result = swift_once();
  }
  if (qword_26B2490C0)
  {
    uint64_t result = sub_253476B80((uint64_t)&xmmword_26B2490A8, (uint64_t)&v1);
  }
  else
  {
    long long v1 = xmmword_26B2490A8;
    long long v2 = *(_OWORD *)algn_26B2490B8;
    uint64_t v3 = qword_26B2490C8;
  }
  if (*((void *)&v2 + 1))
  {
    sub_253472068(&v1, *((uint64_t *)&v2 + 1));
    sub_253B088F0();
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)&v1);
  }
  return result;
}

uint64_t sub_2534B3CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2534B3E44(a1, (void (*)(void))type metadata accessor for Session.Event, (void (*)(void))type metadata accessor for Session.Event, a2);
}

uint64_t sub_2534B3CEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    int v2 = *(unsigned __int8 *)(v1 + a1 + 31);
  }
  else {
    int v2 = 0;
  }
  return v2 | ((v1 == 0) << 8);
}

uint64_t sub_2534B3D1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16 * v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2534B3D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = v3 - 1;
    sub_253462A5C(&qword_269CDBEA0);
    sub_2534B4600();
    sub_2534B45B0(a1+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v7 + 72) * v5, a2, &qword_269CDBEA0);
    uint64_t v8 = sub_2534B467C();
  }
  else
  {
    sub_253462A5C(&qword_269CDBEA0);
    uint64_t v8 = sub_253466CB8();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v8, v9, v10, v11);
}

uint64_t sub_2534B3E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2534B3E44(a1, (void (*)(void))type metadata accessor for ProgramStatement, (void (*)(void))type metadata accessor for ProgramStatement, a2);
}

uint64_t sub_2534B3E44@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v8 = v5 - 1;
    a2(0);
    sub_2534B4600();
    sub_2534B455C(a1+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v10 + 72) * v8, a4, a3);
    uint64_t v11 = sub_2534B467C();
  }
  else
  {
    a2(0);
    uint64_t v11 = sub_253466CB8();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, v12, v13, v14);
}

uint64_t Session.Event.formingTraceIds()()
{
  uint64_t v1 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_25346CC44();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_253B055C0();
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_25346CC44();
  uint64_t v12 = v11 - v10;
  sub_253B085D0();
  if (qword_26B249170 != -1) {
    swift_once();
  }
  sub_253B0A710();
  if (__src[3] == 1)
  {
    *(void *)__dst = 0;
    __dst[8] = 1;
    memset(&__dst[16], 0, 72);
    sub_2534B2064((uint64_t)__src, &qword_269CDBE98);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
  }
  sub_2534B447C((uint64_t)__dst);
  sub_253B085A0();
  uint64_t v13 = type metadata accessor for Session.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v0 + *(int *)(v13 + 20), v6);
  sub_253B085C0();
  sub_2534B4620();
  sub_2534B463C();
  sub_253B08550();
  sub_2534B4620();
  sub_2534B463C();
  sub_253B08560();
  sub_2534B4620();
  sub_2534B463C();
  sub_253B08570();
  sub_2534B4620();
  sub_2534B463C();
  sub_253B08580();
  sub_2534B45B0(v0 + *(int *)(v13 + 24), v5, (uint64_t *)&unk_26B248CB0);
  return sub_253B08540();
}

uint64_t sub_2534B411C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    sub_253B08620();
    id v4 = objc_msgSend(v3, sel_domain);
    sub_253B096E0();

    sub_253B08600();
    objc_msgSend(v3, sel_code);
    sub_253B085F0();
    objc_msgSend(v3, sel_code);
    sub_253B08610();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = sub_253B08630();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a2, v5, 1, v6);
}

uint64_t sub_2534B4210()
{
  uint64_t v0 = sub_253B089F0();
  sub_2534AF1BC(v0, qword_269CDBE80);
  sub_253462BD4(v0, (uint64_t)qword_269CDBE80);
  return sub_253B089E0();
}

uint64_t sub_2534B425C()
{
  return sub_2534B4268();
}

uint64_t sub_2534B4268()
{
  return sub_253B088B0();
}

uint64_t TelemetryStream.deinit()
{
  return v0;
}

uint64_t TelemetryStream.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t sub_2534B447C(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for TelemetryStream()
{
  return self;
}

uint64_t method lookup function for TelemetryStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TelemetryStream);
}

unint64_t sub_2534B450C()
{
  unint64_t result = qword_26B248D48;
  if (!qword_26B248D48)
  {
    sub_253B08640();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248D48);
  }
  return result;
}

uint64_t sub_2534B455C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_25346CAF4();
  uint64_t v4 = sub_2534B4668();
  v5(v4);
  return a2;
}

uint64_t sub_2534B45B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  uint64_t v4 = sub_2534B4668();
  v5(v4);
  return a2;
}

uint64_t sub_2534B4620()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2534B463C()
{
  return v0;
}

uint64_t sub_2534B464C()
{
  return 0;
}

uint64_t sub_2534B4668()
{
  return v0;
}

uint64_t sub_2534B467C()
{
  return v0;
}

void sub_2534B4690(uint64_t a1)
{
  sub_25397174C(a1, v25);
  uint64_t v1 = v25[0];
  uint64_t v21 = v25[1];
  int64_t v2 = v25[3];
  unint64_t v3 = v25[4];
  int64_t v23 = (unint64_t)(v25[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v22 = MEMORY[0x263F8EE78];
LABEL_2:
  if (v3)
  {
LABEL_3:
    unint64_t v4 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    unint64_t v5 = v4 | (v2 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      return;
    }
    if (v6 >= v23) {
      goto LABEL_31;
    }
    unint64_t v7 = *(void *)(v21 + 8 * v6);
    int64_t v8 = v2 + 1;
    if (!v7)
    {
      int64_t v8 = v2 + 2;
      if (v2 + 2 >= v23) {
        goto LABEL_31;
      }
      unint64_t v7 = *(void *)(v21 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v2 + 3;
        if (v2 + 3 >= v23) {
          goto LABEL_31;
        }
        unint64_t v7 = *(void *)(v21 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v2 + 4;
          if (v2 + 4 >= v23) {
            goto LABEL_31;
          }
          unint64_t v7 = *(void *)(v21 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v2 + 5;
            if (v2 + 5 >= v23) {
              goto LABEL_31;
            }
            unint64_t v7 = *(void *)(v21 + 8 * v8);
            if (!v7) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v3 = (v7 - 1) & v7;
    unint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
    int64_t v2 = v8;
LABEL_20:
    uint64_t v10 = *(void *)(v1 + 48) + 32 * v5;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 16);
    int v14 = *(unsigned __int8 *)(v10 + 24);
    unint64_t v15 = *(void *)(*(void *)(v1 + 56) + 8 * v5);
    if (v14 != 2)
    {
      if (*(unsigned char *)(v10 + 24))
      {
        uint64_t v24 = *(void *)v10;
        sub_25346CA34(v11, v12, v13, 1u);
        sub_25346CA34(v11, v12, v13, 1u);
        sub_2534C1C84(v15);
        sub_253B09860();
        v25[6] = v13;
        sub_253B0A480();
        sub_253B09860();
        swift_bridgeObjectRelease();
        sub_253B09860();
        uint64_t v16 = v24;
      }
      else
      {
        sub_25346CA34(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), 0);
        sub_25346CA34(v11, v12, v13, 0);
        sub_2534C1C84(v15);
        uint64_t v16 = v11;
      }
      sub_2534C1C84(v15);
      sub_2534D2608(v11, v12, v13, v14);
      sub_25346CA4C(v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253522C48();
        uint64_t v22 = v19;
      }
      unint64_t v17 = *(void *)(v22 + 16);
      if (v17 >= *(void *)(v22 + 24) >> 1)
      {
        sub_253522C48();
        uint64_t v22 = v20;
      }
      *(void *)(v22 + 16) = v17 + 1;
      uint64_t v18 = (void *)(v22 + 24 * v17);
      v18[4] = v16;
      v18[5] = v12;
      v18[6] = v15;
      goto LABEL_2;
    }
    sub_2534C1C84(*(void *)(*(void *)(v1 + 56) + 8 * v5));
    sub_2534D2608(v11, v12, v13, 2u);
    sub_25346CA4C(v15);
    if (v3) {
      goto LABEL_3;
    }
  }
  int64_t v9 = v2 + 6;
  while (v9 < v23)
  {
    unint64_t v7 = *(void *)(v21 + 8 * v9++);
    if (v7)
    {
      int64_t v8 = v9 - 1;
      goto LABEL_19;
    }
  }
LABEL_31:
  swift_release();
}

uint64_t sub_2534B49BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_2539717E8();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = sub_2534CFF64(v6);
  *a1 = v2;
  return result;
}

uint64_t sub_2534B4A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v2 = v12;
    uint64_t v5 = a1 + 32;
    do
    {
      v5 += 8;
      uint64_t v4 = AST.Expr.description.getter(v4);
      uint64_t v6 = v4;
      uint64_t v8 = v7;
      unint64_t v9 = *(void *)(v12 + 16);
      if (v9 >= *(void *)(v12 + 24) >> 1) {
        sub_2539E6C84();
      }
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 16 * v9;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_2534B4B10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v3 = v20;
    uint64_t v4 = sub_253A71D6C(a1);
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t v6 = v4;
      if (v4 < 1 << *(unsigned char *)(a1 + 32))
      {
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v17 = v1;
          int v18 = v5;
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
          uint64_t v9 = v3;
          uint64_t v10 = *v8;
          uint64_t v11 = v8[1];
          unint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v6);
          swift_bridgeObjectRetain();
          sub_2534C1C84(v12);
          swift_bridgeObjectRetain();
          sub_2534C1C84(v12);
          swift_bridgeObjectRelease();
          sub_25346CA4C(v12);
          uint64_t v19 = v10;
          swift_bridgeObjectRetain();
          uint64_t v13 = sub_253B09860();
          AST.Expr.description.getter(v13);
          sub_253B09860();
          uint64_t v3 = v9;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_25346CA4C(v12);
          uint64_t v21 = v9;
          unint64_t v14 = *(void *)(v9 + 16);
          if (v14 >= *(void *)(v3 + 24) >> 1)
          {
            sub_2539E6C84();
            uint64_t v3 = v21;
          }
          *(void *)(v3 + 16) = v14 + 1;
          uint64_t v15 = v3 + 16 * v14;
          *(void *)(v15 + 32) = v19;
          *(void *)(v15 + 40) = v11;
          if ((uint64_t)v6 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
            goto LABEL_20;
          }
          if (v18 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v16 = sub_253B09F70();
          uint64_t v1 = v17 - 1;
          if (v17 == 1) {
            return;
          }
          unint64_t v6 = v16;
          if ((v16 & 0x8000000000000000) == 0)
          {
            int v5 = *(_DWORD *)(a1 + 36);
            if (v16 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_2534B4D50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_2539E7A3C();
    uint64_t v2 = v9;
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      unint64_t v6 = *v4;
      v4 += 2;
      unint64_t v5 = v6;
      sub_2534C1C84(v6);
      unint64_t v7 = *(void *)(v9 + 16);
      if (v7 >= *(void *)(v9 + 24) >> 1) {
        sub_2539E7A3C();
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2534B4E1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v2 = v19;
    uint64_t v4 = (unint64_t *)(a1 + 32);
    do
    {
      unint64_t v6 = *v4++;
      unint64_t v5 = v6;
      unint64_t v7 = v6 >> 62;
      if (v6 >> 62)
      {
        if (v7 == 1) {
          uint64_t v8 = sub_2534CF030(0);
        }
        else {
          uint64_t v8 = sub_2534CF188(0);
        }
        uint64_t v12 = v8;
        uint64_t v13 = v9;
      }
      else
      {
        unint64_t v10 = *(void *)(v5 + 16);
        swift_retain();
        sub_2534C1C84(v10);
        uint64_t v17 = MEMORY[0x25A268900](32, 0xE100000000000000, 0);
        uint64_t v18 = v11;
        AST.Expr.description.getter();
        sub_253B09860();
        swift_bridgeObjectRelease();
        sub_25346CA4C(v10);
        swift_release();
        uint64_t v13 = v18;
        uint64_t v12 = v17;
      }
      unint64_t v14 = *(void *)(v19 + 16);
      if (v14 >= *(void *)(v19 + 24) >> 1) {
        sub_2539E6C84();
      }
      *(void *)(v19 + 16) = v14 + 1;
      uint64_t v15 = v19 + 16 * v14;
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = v13;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AST.Program.init(stmts:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t AST.Program.stmts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AST.Program.stmts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AST.Program.stmts.modify())()
{
  return nullsub_1;
}

uint64_t static AST.Program.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_2534BB13C(*a1, *a2);
}

void sub_2534B5014()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for ParameterQuery(0);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v6);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = *(void *)(v4 + 16);
  if (v11 == *(void *)(v2 + 16) && v11 && v4 != v2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v38[0] = *(void *)(v8 + 72);
    v38[1] = v4;
    while (1)
    {
      sub_2534D898C();
      uint64_t v13 = v2;
      sub_2534D9B40();
      sub_2534D9B10();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
        break;
      }
      uint64_t v14 = type metadata accessor for ActionParameterContext(0);
      uint64_t v15 = *(int *)(v14 + 20);
      uint64_t v16 = *(void *)&v10[v15];
      uint64_t v17 = *(void *)&v10[v15 + 8];
      uint64_t v18 = (void *)(v0 + v15);
      BOOL v19 = v16 == *v18 && v17 == v18[1];
      if (!v19 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      uint64_t v20 = *(int *)(v14 + 24);
      uint64_t v21 = *(void *)&v10[v20];
      uint64_t v22 = *(void *)&v10[v20 + 8];
      uint64_t v24 = *(void *)&v10[v20 + 16];
      uint64_t v23 = *(void *)&v10[v20 + 24];
      uint64_t v25 = (void *)(v0 + v20);
      uint64_t v27 = v25[2];
      uint64_t v26 = v25[3];
      BOOL v28 = v21 == *v25 && v22 == v25[1];
      if (!v28 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      if (v23)
      {
        if (!v26) {
          break;
        }
        if (v24 != v27 || v23 != v26)
        {
          sub_2534D9724();
          if ((sub_253B0A4C0() & 1) == 0) {
            break;
          }
        }
      }
      else if (v26)
      {
        break;
      }
      sub_2534DA0DC();
      static QueryData.== infix(_:_:)();
      if ((v30 & 1) == 0) {
        break;
      }
      sub_2534BC684();
      if ((v31 & 1) == 0) {
        break;
      }
      uint64_t v32 = *(int *)(v5 + 28);
      uint64_t v33 = &v10[v32];
      uint64_t v34 = *(void *)&v10[v32 + 8];
      uint64_t v35 = (void *)(v0 + v32);
      uint64_t v36 = v35[1];
      if (v34)
      {
        if (!v36) {
          break;
        }
        BOOL v37 = *(void *)v33 == *v35 && v34 == v36;
        if (!v37 && (sub_253B0A4C0() & 1) == 0) {
          break;
        }
      }
      else if (v36)
      {
        break;
      }
      sub_2534D89E0();
      sub_2534D9B1C();
      sub_2534D89E0();
      v12 += v38[0];
      --v11;
      uint64_t v2 = v13;
      if (!v11) {
        goto LABEL_40;
      }
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_40:
  sub_253465A14();
}

void sub_2534B5294()
{
  sub_2534B3258();
  uint64_t v4 = sub_2534D8D00();
  type metadata accessor for VariableSetter(v4);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v5);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v6);
  sub_2534D8E5C();
  if (v8 && v7 && v1 != v0)
  {
    sub_2534D9640();
    while (1)
    {
      sub_2534D898C();
      sub_2534D9B40();
      sub_2534BC684();
      if ((v9 & 1) == 0) {
        break;
      }
      sub_2534DA0DC();
      char v10 = sub_253B090F0();
      sub_2534D89E0();
      sub_2534DA160();
      sub_2534D9B04();
      if (v10)
      {
        v2 += v3;
        if (v11) {
          continue;
        }
      }
      goto LABEL_12;
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_12:
  sub_2534DA0B8();
  sub_253465A14();
}

void sub_2534B53DC()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_253B06820();
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  uint64_t v10 = sub_253462A5C(&qword_269CDBB28);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v37 = v12;
  uint64_t v13 = sub_253462A5C(&qword_269CDCB48);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = sub_2534D8CAC();
  type metadata accessor for ExecutionStepResult(v15);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v16);
  sub_2534D8E94();
  MEMORY[0x270FA5388](v17);
  sub_2534DA19C();
  uint64_t v20 = *(void *)(v5 + 16);
  if (v20 == *(void *)(v3 + 16) && v20 && v5 != v3)
  {
    uint64_t v36 = v18;
    uint64_t v33 = v13;
    unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v34 = (void (**)(void))(v8 + 8);
    uint64_t v35 = *(void *)(v19 + 72);
    while (1)
    {
      sub_2534D898C();
      sub_2534D898C();
      if ((sub_253B055A0() & 1) == 0) {
        break;
      }
      uint64_t v22 = v1 + *(int *)(v36 + 20);
      if ((sub_253B05AA0() & 1) == 0) {
        break;
      }
      uint64_t v23 = v22 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v24 = v0 + *(int *)(v13 + 48);
      sub_2534D88A0(v23, v0, &qword_269CDBB28);
      uint64_t v25 = sub_2534D970C();
      sub_2534D88A0(v25, v26, &qword_269CDBB28);
      uint64_t v27 = sub_2534D9730();
      sub_2534D8B48(v27, v28, v6);
      if (v29)
      {
        sub_2534D8B48(v24, 1, v6);
        if (!v29) {
          goto LABEL_17;
        }
        sub_253472458(v0, &qword_269CDBB28);
      }
      else
      {
        sub_2534D88A0(v0, v37, &qword_269CDBB28);
        sub_2534D8B48(v24, 1, v6);
        if (v29)
        {
          ((void (*)(uint64_t, uint64_t))*v34)(v37, v6);
LABEL_17:
          sub_253472458(v0, &qword_269CDCB48);
          break;
        }
        sub_2534DA178();
        sub_2534D8E14();
        v30();
        sub_2534D8A30((uint64_t)&unk_269CDCB50);
        char v31 = sub_2534DA4F4();
        uint64_t v32 = *v34;
        uint64_t v13 = v33;
        sub_2534DA4BC();
        v32();
        sub_2534DA828();
        sub_2534DA4BC();
        v32();
        sub_253472458(v0, &qword_269CDBB28);
        if ((v31 & 1) == 0) {
          break;
        }
      }
      sub_2534D89E0();
      sub_2534D9AAC();
      v21 += v35;
      if (!--v20) {
        goto LABEL_19;
      }
    }
    sub_2534D89E0();
    sub_2534D9AAC();
  }
LABEL_19:
  sub_253465A14();
}

void sub_2534B57A4()
{
}

void sub_2534B57F8()
{
}

void sub_2534B5840()
{
  sub_2534B3258();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_253B09150();
  sub_253465998();
  uint64_t v39 = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534B3294();
  uint64_t v11 = sub_253462A5C(&qword_269CDCB30);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_25347FAAC();
  uint64_t v13 = sub_253462A5C(&qword_269CDCB38);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = sub_25348360C();
  type metadata accessor for ProgramStatement(v15);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v16);
  sub_2534D9C70();
  MEMORY[0x270FA5388](v17);
  sub_2534DA19C();
  uint64_t v20 = *(void *)(v7 + 16);
  if (v20 == *(void *)(v5 + 16))
  {
    uint64_t v36 = v3;
    uint64_t v37 = v13;
    if (v20)
    {
      if (v7 != v5)
      {
        uint64_t v41 = v18;
        unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        uint64_t v38 = *(void *)(v19 + 72);
        uint64_t v35 = (void (**)(void))(v39 + 8);
        uint64_t v22 = v13;
        while (1)
        {
          sub_2534D898C();
          sub_2534D898C();
          if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0
            || (static Expression.== infix(_:_:)(v2 + v41[5], (uint64_t *)(v1 + v41[5])) & 1) == 0)
          {
            break;
          }
          uint64_t v23 = v41[6];
          int v24 = *(unsigned __int8 *)(v2 + v23);
          int v25 = *(unsigned __int8 *)(v1 + v23);
          if (v24 == 2)
          {
            if (v25 != 2) {
              break;
            }
          }
          else
          {
            BOOL v26 = (v24 & 1) == 0;
            if (v25 == 2 || ((v26 ^ v25) & 1) == 0) {
              break;
            }
          }
          uint64_t v27 = v41[7];
          uint64_t v28 = v1 + v27;
          uint64_t v29 = v0 + *(int *)(v22 + 48);
          sub_2534D88A0(v2 + v27, v0, &qword_269CDCB30);
          sub_2534D88A0(v28, v29, &qword_269CDCB30);
          sub_2534D8B48(v0, 1, v8);
          if (v32)
          {
            sub_2534D8B48(v29, 1, v8);
            if (!v32) {
              goto LABEL_22;
            }
            uint64_t v30 = sub_2534D9A44();
            sub_253472458(v30, v31);
          }
          else
          {
            sub_2534D88A0(v0, v36, &qword_269CDCB30);
            sub_2534D8B48(v29, 1, v8);
            if (v32)
            {
              ((void (*)(uint64_t, uint64_t))*v35)(v36, v8);
LABEL_22:
              sub_253472458(v0, &qword_269CDCB38);
              break;
            }
            sub_2534D8E14();
            v33();
            sub_2534D8A30((uint64_t)&unk_269CDCB40);
            char v40 = sub_253B096B0();
            uint64_t v34 = *v35;
            sub_2534DA828();
            sub_2534D91A0();
            v34();
            uint64_t v22 = v37;
            sub_2534D91A0();
            v34();
            sub_253472458(v0, &qword_269CDCB30);
            if ((v40 & 1) == 0) {
              break;
            }
          }
          sub_2534D89E0();
          sub_2534D9AAC();
          v21 += v38;
          if (!--v20) {
            goto LABEL_24;
          }
        }
        sub_2534D89E0();
        sub_2534D9AAC();
      }
    }
  }
LABEL_24:
  sub_253465A14();
}

uint64_t sub_2534B5C40(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = sub_253B0A4C0();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a2 + 7;
  uint64_t v9 = a1 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      uint64_t result = sub_253B0A4C0();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

void sub_2534B5D10()
{
}

void sub_2534B5D58()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_2534DA6BC();
  uint64_t v8 = v7(v6);
  sub_253465998();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v10);
  sub_2534D90F4();
  uint64_t v13 = *(void *)(v1 + 16);
  if (v13 == *(void *)(v5 + 16) && v13 && v1 != v5)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
    uint64_t v15 = v11 + 16;
    BOOL v26 = v16;
    uint64_t v27 = v12;
    uint64_t v22 = *(void *)(v15 + 56);
    uint64_t v23 = v5;
    uint64_t v24 = v1;
    int v25 = (void (**)(void))(v15 - 8);
    uint64_t v17 = v13 - 1;
    do
    {
      v26(v0, v1 + v14, v8);
      v26(v27, v5 + v14, v8);
      sub_2534D8A30(v3);
      char v18 = sub_2534DA4F4();
      uint64_t v19 = *v25;
      sub_2534D9A08();
      v19();
      sub_2534D9A78();
      sub_2534D9A08();
      v19();
      BOOL v21 = v17-- != 0;
      if ((v18 & 1) == 0) {
        break;
      }
      v14 += v22;
      uint64_t v5 = v23;
      uint64_t v1 = v24;
    }
    while (v21);
  }
  sub_253465A14();
}

void sub_2534B5F10()
{
}

void sub_2534B5F64()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v5 = sub_2534DA458();
  uint64_t v7 = v6(v5);
  uint64_t v8 = sub_2534D93A4(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D9C8C();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = *(void *)(v1 + 16);
  if (v10 == *(void *)(v0 + 16) && v10 && v1 != v0)
  {
    uint64_t v11 = v4;
    sub_2534D9910();
    uint64_t v13 = *(void *)(v12 + 72);
    uint64_t v15 = v14 - 1;
    do
    {
      sub_2534D898C();
      sub_2534D898C();
      uint64_t v16 = sub_2534D9724();
      char v17 = v11(v16);
      sub_2534DA4A4();
      sub_2534DA120();
      BOOL v19 = v15-- != 0;
      if ((v17 & 1) == 0) {
        break;
      }
      v2 += v13;
    }
    while (v19);
  }
  sub_253465A14();
}

void sub_2534B6090()
{
}

void sub_2534B60E4()
{
}

void sub_2534B6138()
{
  sub_2534B3258();
  uint64_t v7 = v6;
  uint64_t v8 = sub_2534D9690();
  uint64_t v9 = type metadata accessor for TranscriptProtoStatementID(v8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_253465A3C();
  uint64_t v11 = sub_253462A5C(&qword_26B249528);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534847E0();
  sub_253462A5C(&qword_269CDCCB8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_2534D8CAC();
  type metadata accessor for TranscriptProtoSpeechRequestCandidate(v14);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v15);
  sub_2534D9C70();
  MEMORY[0x270FA5388](v16);
  sub_2534DA19C();
  uint64_t v18 = *(void *)(v0 + 16);
  if (v18 == *(void *)(v7 + 16))
  {
    uint64_t v40 = v9;
    if (v18)
    {
      if (v0 != v7)
      {
        unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
        uint64_t v39 = *(void *)(v17 + 72);
        uint64_t v20 = v18 - 1;
        while (1)
        {
          sub_2534D898C();
          sub_2534D898C();
          BOOL v21 = *v5 == *v4 && v5[1] == v4[1];
          if (!v21 && (sub_253B0A4C0() & 1) == 0) {
            break;
          }
          sub_2534D9784();
          sub_2534D88A0(v22, v23, &qword_26B249528);
          uint64_t v24 = sub_2534DA5AC();
          sub_2534D88A0(v24, v25, &qword_26B249528);
          uint64_t v26 = sub_2534D9730();
          sub_2534D8B48(v26, v27, v40);
          if (v21)
          {
            sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoSpeechRequestCandidate, 1, v40);
            if (!v21)
            {
              uint64_t v38 = &qword_269CDCCB8;
              goto LABEL_37;
            }
            sub_253472458(v3, &qword_26B249528);
          }
          else
          {
            uint64_t v28 = sub_2534D9724();
            sub_2534D88A0(v28, v29, &qword_26B249528);
            sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoSpeechRequestCandidate, 1, v40);
            if (v30)
            {
              uint64_t v38 = &qword_269CDCCB8;
LABEL_36:
              sub_2534D89E0();
LABEL_37:
              sub_253472458(v3, v38);
              break;
            }
            sub_2534D8938();
            if (*(_DWORD *)v2 != *(_DWORD *)v1) {
              goto LABEL_34;
            }
            uint64_t v31 = *(void *)(v2 + 16);
            uint64_t v32 = *(void *)(v1 + 16);
            if (v31)
            {
              if (!v32
                || (*(void *)(v2 + 8) == *(void *)(v1 + 8) ? (BOOL v33 = v31 == v32) : (BOOL v33 = 0),
                    !v33 && (sub_253B0A4C0() & 1) == 0))
              {
LABEL_34:
                sub_2534D89E0();
                uint64_t v38 = &qword_26B249528;
                goto LABEL_36;
              }
            }
            else if (v32)
            {
              goto LABEL_34;
            }
            sub_253B07160();
            sub_2534D8A30((uint64_t)&qword_269CDCB90);
            char v34 = sub_253B096B0();
            sub_2534D89E0();
            sub_2534DA498();
            sub_2534D89E0();
            sub_253472458(v3, &qword_26B249528);
            if ((v34 & 1) == 0) {
              break;
            }
          }
          sub_253B07160();
          sub_2534D8A30((uint64_t)&qword_269CDCB90);
          sub_2534DA2E4();
          char v35 = sub_253B096B0();
          sub_2534D89E0();
          sub_2534DA610();
          BOOL v37 = v20-- != 0;
          if (v35)
          {
            v19 += v39;
            if (v37) {
              continue;
            }
          }
          goto LABEL_39;
        }
        sub_2534D89E0();
        sub_2534D9AAC();
      }
    }
  }
LABEL_39:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B65D0()
{
  sub_2534B3258();
  uint64_t v1 = sub_2534D976C();
  uint64_t v2 = type metadata accessor for TranscriptProtoAstflatValueEnum(v1);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CC54();
  uint64_t v4 = sub_253462A5C(&qword_269CDCBA8);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDCBB0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534B33AC();
  type metadata accessor for TranscriptProtoASTFlatValue(v7);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8FBC();
  MEMORY[0x270FA5388](v9);
  sub_2534D922C();
  if (!v15) {
    goto LABEL_20;
  }
  if (!v10) {
    goto LABEL_20;
  }
  sub_2534D9D50();
  if (v15) {
    goto LABEL_20;
  }
  sub_2534D8F08(v11, v12);
  while (1)
  {
    sub_2534D898C();
    sub_2534D9CE0();
    uint64_t v13 = sub_2534D9500();
    sub_2534D88A0(v13, v14, &qword_269CDCBA8);
    sub_2534DA104();
    sub_2534D8B48((uint64_t)v0, 1, v2);
    if (!v15) {
      break;
    }
    sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoASTFlatValue, 1, v2);
    if (!v15) {
      goto LABEL_18;
    }
    sub_253472458((uint64_t)v0, &qword_269CDCBA8);
LABEL_13:
    sub_2534D9064();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v18 = sub_2534D986C();
    uint64_t v2 = (uint64_t)type metadata accessor for TranscriptProtoASTFlatValue;
    sub_2534D89E0();
    sub_2534D9A2C();
    sub_2534D9A6C();
    if (v18)
    {
      sub_2534D997C();
      if (v19) {
        continue;
      }
    }
    goto LABEL_20;
  }
  sub_2534D984C();
  sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoASTFlatValue, 1, v2);
  if (!v15)
  {
    sub_2534D9E44();
    uint64_t v16 = sub_2534D96CC();
    char v17 = static TranscriptProtoAstflatValueEnum.== infix(_:_:)(v16);
    uint64_t v0 = type metadata accessor for TranscriptProtoAstflatValueEnum;
    sub_2534D89E0();
    sub_2534D89E0();
    sub_253472458(v20, &qword_269CDCBA8);
    if ((v17 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  sub_2534D89E0();
LABEL_18:
  sub_253472458((uint64_t)v0, &qword_269CDCBB0);
LABEL_19:
  sub_2534D89E0();
  sub_2534D89E0();
LABEL_20:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B68E4()
{
}

void sub_2534B692C()
{
}

void sub_2534B6980()
{
}

void sub_2534B69D4()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  uint64_t v7 = sub_2534D976C();
  type metadata accessor for TranscriptProtoGlobalToolIdentifier(v7);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8E94();
  MEMORY[0x270FA5388](v9);
  sub_2534D9C54();
  if (v11 && v4 && v0 != v6)
  {
    sub_2534DA184(v10);
    while (1)
    {
      sub_2534D898C();
      sub_2534DA660();
      BOOL v11 = *v2 == *v1 && v2[1] == v1[1];
      if (!v11 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      uint64_t v12 = v2[3];
      uint64_t v13 = v1[3];
      if (v12)
      {
        if (!v13) {
          break;
        }
        BOOL v14 = v2[2] == v1[2] && v12 == v13;
        if (!v14 && (sub_253B0A4C0() & 1) == 0) {
          break;
        }
      }
      else if (v13)
      {
        break;
      }
      sub_2534D995C();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      if ((sub_2534D95B8() & 1) == 0) {
        break;
      }
      sub_2534D89E0();
      sub_2534D9F24();
      v3 += v15;
      if (!--v4) {
        goto LABEL_24;
      }
    }
    sub_2534D89E0();
    sub_2534DA4A4();
  }
LABEL_24:
  sub_253465A14();
}

void sub_2534B6BA0()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for ContextProtoEntityMatch(0);
  uint64_t v7 = sub_25346CB34(v6);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v7);
  sub_2534D8FA0();
  MEMORY[0x270FA5388](v10);
  sub_2534DA41C();
  uint64_t v11 = sub_253B08E50();
  sub_253465998();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  sub_2534B34A4();
  uint64_t v15 = sub_253462A5C(&qword_269CDCBC8);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_25347FAAC();
  uint64_t v67 = sub_253462A5C((uint64_t *)&off_269CDCBD0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v17);
  sub_25346CB04();
  uint64_t v68 = v18;
  uint64_t v69 = type metadata accessor for ContextProtoSpanMatchedEntity(0);
  sub_2534D8B2C();
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  sub_2534D9154(v20, v21, v22, v23, v24, v25, v26, v27, v57[0]);
  MEMORY[0x270FA5388](v28);
  char v30 = (char *)v57 - v29;
  uint64_t v31 = *(void *)(v5 + 16);
  if (v31 == *(void *)(v3 + 16) && v31 && v5 != v3)
  {
    sub_2534DA904();
    uint64_t v64 = v3 + v33;
    uint64_t v65 = v5 + v33;
    uint64_t v35 = *(void *)(v34 + 72);
    uint64_t v62 = v11;
    uint64_t v63 = v35;
    v57[1] = v9;
    v57[2] = v13 + 32;
    uint64_t v58 = (void (**)(void))(v13 + 8);
    uint64_t v59 = v36;
    uint64_t v60 = v1;
    uint64_t v61 = v0;
    while (1)
    {
      uint64_t v66 = v32;
      sub_2534D898C();
      uint64_t v37 = v70;
      sub_2534DA660();
      uint64_t v38 = v68;
      uint64_t v39 = v37 + *(int *)(v69 + 20);
      sub_2534D9784();
      sub_2534D88A0(v40, v41, &qword_269CDCBC8);
      sub_2534D88A0(v39, (uint64_t)type metadata accessor for ContextProtoSpanMatchedEntity, &qword_269CDCBC8);
      uint64_t v42 = sub_2534D9730();
      sub_2534D8B48(v42, v43, v11);
      if (v44)
      {
        sub_2534D8B48((uint64_t)type metadata accessor for ContextProtoSpanMatchedEntity, 1, v11);
        if (!v44) {
          goto LABEL_23;
        }
        sub_253472458(v38, &qword_269CDCBC8);
      }
      else
      {
        sub_2534D88A0(v38, v1, &qword_269CDCBC8);
        sub_2534D8B48((uint64_t)type metadata accessor for ContextProtoSpanMatchedEntity, 1, v11);
        if (v44)
        {
          ((void (*)(uint64_t, uint64_t))*v58)(v1, v11);
LABEL_23:
          sub_253472458(v38, (uint64_t *)&off_269CDCBD0);
          goto LABEL_24;
        }
        sub_2534DA604();
        sub_2534D8E14();
        v45();
        sub_2534D8A30((uint64_t)&unk_269CDCBD8);
        sub_2534D96CC();
        char v46 = sub_253B096B0();
        uint64_t v47 = *v58;
        sub_2534D91A0();
        v47();
        sub_2534D91A0();
        v47();
        sub_253472458(v38, &qword_269CDCBC8);
        if ((v46 & 1) == 0) {
          goto LABEL_24;
        }
      }
      uint64_t v48 = *(void *)(*(void *)v30 + 16);
      if (v48 != *(void *)(*(void *)v70 + 16)) {
        goto LABEL_24;
      }
      if (v48 && *(void *)v30 != *(void *)v70) {
        break;
      }
LABEL_18:
      sub_253B07160();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      char v56 = sub_253B096B0();
      sub_2534D89E0();
      sub_2534DA034();
      sub_2534D89E0();
      if (v56)
      {
        uint64_t v32 = v66 + 1;
        uint64_t v1 = v60;
        uint64_t v11 = v62;
        if (v66 + 1 != v59) {
          continue;
        }
      }
      goto LABEL_25;
    }
    sub_2534DA780();
    uint64_t v51 = v50 & ~v49;
    uint64_t v53 = *(void *)(v52 + 72);
    while (1)
    {
      sub_2534D898C();
      sub_2534D898C();
      sub_2534D973C();
      static ContextProtoEntityMatch.== infix(_:_:)();
      char v55 = v54;
      sub_2534D89E0();
      sub_2534D89E0();
      if ((v55 & 1) == 0) {
        break;
      }
      v51 += v53;
      if (!--v48) {
        goto LABEL_18;
      }
    }
LABEL_24:
    sub_2534D89E0();
    sub_2534ACF74();
    sub_2534D89E0();
  }
LABEL_25:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B70B8()
{
}

void sub_2534B710C()
{
}

void sub_2534B7160()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  uint64_t v69 = v7;
  uint64_t v8 = type metadata accessor for TranscriptProtoCandidate(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  sub_2534835B0();
  uint64_t v10 = sub_253462A5C(&qword_269CDCBE0);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534847E0();
  uint64_t v12 = sub_253462A5C(&qword_269CDCBE8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_2534D9C00();
  uint64_t v15 = type metadata accessor for TranscriptProtoParameter(v14);
  sub_253465998();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  sub_2534D8E78();
  MEMORY[0x270FA5388](v19);
  sub_2534D9EC0();
  type metadata accessor for TranscriptProtoParameterSet(0);
  sub_2534D8B2C();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = *(void *)(v69 + 16);
  if (v25 == *(void *)(v6 + 16) && (v62 = (char *)v55 - v23, v63 = v24, uint64_t v58 = v17, v66 = v12, v25) && v69 != v6)
  {
    uint64_t v56 = v25;
    uint64_t v57 = v22;
    uint64_t v70 = v15;
    uint64_t v59 = v0;
    uint64_t v60 = v2;
    sub_2534DA904();
    uint64_t v28 = *(void *)(v27 + 72);
    uint64_t v67 = v8;
    char v30 = (uint64_t *)v62;
    uint64_t v29 = v63;
    v55[1] = v6 + v31;
    void v55[2] = v32 + v31;
    v55[0] = v28;
    while (1)
    {
      uint64_t v61 = v26;
      sub_2534D898C();
      sub_2534D898C();
      uint64_t v33 = *v29;
      uint64_t v68 = *v30;
      uint64_t v34 = *(void *)(v33 + 16);
      uint64_t v69 = *(void *)(v68 + 16);
      uint64_t v35 = v66;
      if (v69 != v34)
      {
LABEL_35:
        sub_2534D89E0();
        sub_2534D89E0();
        goto LABEL_36;
      }
      if (v69 && v68 != v33) {
        break;
      }
LABEL_28:
      char v30 = (uint64_t *)v62;
      uint64_t v29 = v63;
      sub_253B07160();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      char v54 = sub_2534D95DC();
      sub_2534D89E0();
      sub_2534DA610();
      if (v54)
      {
        uint64_t v26 = v61 + 1;
        uint64_t v8 = v67;
        if (v61 + 1 != v56) {
          continue;
        }
      }
      goto LABEL_36;
    }
    unint64_t v36 = 0;
    sub_2534DA780();
    uint64_t v39 = v38 & ~v37;
    uint64_t v64 = *(void *)(v40 + 72);
    uint64_t v65 = v33;
    while (1)
    {
      sub_2534D898C();
      if (v36 >= *(void *)(v33 + 16)) {
        break;
      }
      sub_2534D898C();
      BOOL v41 = *(void *)v4 == *(void *)v3 && *(void *)(v4 + 8) == *(void *)(v3 + 8);
      if (!v41 && (sub_253B0A4C0() & 1) == 0) {
        goto LABEL_34;
      }
      if (*(unsigned char *)(v4 + 24))
      {
        if (!*(unsigned char *)(v3 + 24)) {
          goto LABEL_34;
        }
      }
      else
      {
        sub_2534DA6C8();
        if (v42) {
          goto LABEL_34;
        }
      }
      uint64_t v43 = *(int *)(v70 + 24);
      uint64_t v44 = v3 + v43;
      uint64_t v45 = v1 + *(int *)(v35 + 48);
      sub_2534D88A0(v4 + v43, v1, &qword_269CDCBE0);
      sub_2534D88A0(v44, v45, &qword_269CDCBE0);
      sub_2534D8B48(v1, 1, v8);
      if (v41)
      {
        sub_2534D8B48(v45, 1, v8);
        if (!v41) {
          goto LABEL_33;
        }
        uint64_t v46 = sub_2534DA178();
        sub_253472458(v46, v47);
        uint64_t v33 = v65;
      }
      else
      {
        sub_2534D88A0(v1, v60, &qword_269CDCBE0);
        sub_2534D8B48(v45, 1, v8);
        if (v48)
        {
          sub_2534D89E0();
LABEL_33:
          sub_253472458(v1, &qword_269CDCBE8);
LABEL_34:
          sub_2534D89E0();
          sub_2534D89E0();
          goto LABEL_35;
        }
        sub_2534D9DA0();
        sub_2534D9AA0();
        static TranscriptProtoCandidate.== infix(_:_:)();
        char v50 = v49;
        sub_2534D89E0();
        sub_2534D970C();
        sub_2534D89E0();
        uint64_t v51 = sub_2534D9A44();
        sub_253472458(v51, v52);
        uint64_t v33 = v65;
        uint64_t v35 = v66;
        if ((v50 & 1) == 0) {
          goto LABEL_34;
        }
      }
      sub_253B07160();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      uint64_t v8 = v67;
      char v53 = sub_253B096B0();
      sub_2534D89E0();
      sub_2534D89E0();
      if ((v53 & 1) == 0) {
        goto LABEL_35;
      }
      ++v36;
      v39 += v64;
      if (v69 == v36) {
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_36:
    sub_2534D9090();
    sub_253465A14();
  }
}

void sub_2534B7768()
{
}

void sub_2534B77BC()
{
}

void sub_2534B7804()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  sub_2534DA6BC();
  uint64_t v38 = sub_253B08E50();
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_253465A3C();
  uint64_t v10 = sub_253462A5C(&qword_269CDCBC8);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534835B0();
  uint64_t v12 = sub_253462A5C((uint64_t *)&off_269CDCBD0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_2534D8CAC();
  type metadata accessor for TranscriptProtoQueryPredicate(v14);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v15);
  sub_2534D930C();
  MEMORY[0x270FA5388](v16);
  sub_2534DA1AC();
  uint64_t v19 = *(void *)(v2 + 16);
  if (v19 == *(void *)(v6 + 16))
  {
    uint64_t v37 = v17;
    uint64_t v34 = v0;
    if (v19)
    {
      if (v2 != v6)
      {
        unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        uint64_t v36 = *(void *)(v18 + 72);
        uint64_t v33 = (void (**)(void))(v8 + 8);
        uint64_t v21 = v12;
        while (1)
        {
          sub_2534D898C();
          sub_2534DA228();
          BOOL v22 = *(void *)v4 == *(void *)v3 && *(void *)(v4 + 8) == *(void *)(v3 + 8);
          if (!v22 && (sub_253B0A4C0() & 1) == 0 || *(unsigned __int8 *)(v4 + 16) != *(unsigned __int8 *)(v3 + 16)) {
            break;
          }
          uint64_t v23 = v1 + *(int *)(v21 + 48);
          sub_2534D88A0(v4 + *(int *)(v37 + 24), v1, &qword_269CDCBC8);
          uint64_t v24 = sub_2534D9A78();
          sub_2534D88A0(v24, v25, &qword_269CDCBC8);
          uint64_t v26 = sub_2534D9730();
          sub_2534D8B48(v26, v27, v38);
          if (v22)
          {
            sub_2534D8B48(v23, 1, v38);
            if (!v22) {
              goto LABEL_23;
            }
            sub_253472458(v1, &qword_269CDCBC8);
          }
          else
          {
            sub_2534D88A0(v1, v34, &qword_269CDCBC8);
            sub_2534D8B48(v23, 1, v38);
            if (v28)
            {
              ((void (*)(uint64_t, uint64_t))*v33)(v34, v38);
LABEL_23:
              sub_253472458(v1, (uint64_t *)&off_269CDCBD0);
              break;
            }
            sub_2534D9A78();
            sub_2534D8E14();
            v29();
            sub_2534D8A30((uint64_t)&qword_269CDCBD8);
            sub_2534DA5A0();
            char v35 = sub_253B096B0();
            char v30 = *v33;
            sub_2534D91AC();
            v30();
            uint64_t v21 = v12;
            sub_2534D91AC();
            v30();
            sub_253472458(v1, &qword_269CDCBC8);
            if ((v35 & 1) == 0) {
              break;
            }
          }
          sub_253B07160();
          sub_2534D8A30((uint64_t)&qword_269CDCB90);
          char v31 = sub_2534DA514();
          sub_2534D89E0();
          sub_2534D89E0();
          sub_2534D9A6C();
          if (v31)
          {
            v20 += v36;
            if (v32) {
              continue;
            }
          }
          goto LABEL_25;
        }
        sub_2534D89E0();
        sub_2534D9A2C();
      }
    }
  }
LABEL_25:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B7C3C()
{
}

void sub_2534B7C90()
{
}

void sub_2534B7CE8()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v4 = sub_2534DA6BC();
  uint64_t v5 = type metadata accessor for TranscriptProtoCandidate(v4);
  uint64_t v6 = sub_25346CB34(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534D8FA0();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_2534DA41C();
  uint64_t Results = type metadata accessor for TranscriptProtoQueryResults(v8);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v10);
  sub_2534D9C8C();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v31 - v12;
  uint64_t v14 = *(void *)(v1 + 16);
  if (v14 == *(void *)(v3 + 16) && v14 && v1 != v3)
  {
    sub_2534D9A84();
    uint64_t v35 = v3 + v16;
    uint64_t v36 = v17;
    uint64_t v19 = *(void *)(v18 + 72);
    uint64_t v33 = v0;
    uint64_t v34 = v19;
    v31[3] = Results;
    char v32 = v13;
    while (1)
    {
      uint64_t v37 = v15;
      sub_2534D898C();
      sub_2534D898C();
      uint64_t v20 = *v0;
      uint64_t v21 = *(void *)(*(void *)v13 + 16);
      if (v21 != *(void *)(*v0 + 16))
      {
LABEL_16:
        sub_2534D89E0();
        sub_2534D89E0();
        goto LABEL_17;
      }
      if (v21 && *(void *)v13 != v20) {
        break;
      }
LABEL_12:
      uint64_t v13 = v32;
      uint64_t v0 = v33;
      sub_253B07160();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      char v30 = sub_2534D9FB4();
      sub_2534D89E0();
      sub_2534D89E0();
      if (v30)
      {
        uint64_t v15 = v37 + 1;
        if (v37 + 1 != v31[2]) {
          continue;
        }
      }
      goto LABEL_17;
    }
    unint64_t v22 = 0;
    sub_2534DA780();
    uint64_t v25 = v24 & ~v23;
    uint64_t v27 = *(void *)(v26 + 72);
    while (1)
    {
      sub_2534D898C();
      if (v22 >= *(void *)(v20 + 16)) {
        break;
      }
      sub_2534D898C();
      sub_2534D973C();
      static TranscriptProtoCandidate.== infix(_:_:)();
      char v29 = v28;
      sub_2534D89E0();
      sub_2534D89E0();
      if ((v29 & 1) == 0) {
        goto LABEL_16;
      }
      ++v22;
      v25 += v27;
      if (v21 == v22) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_17:
    sub_2534D9090();
    sub_253465A14();
  }
}

void sub_2534B7FF4()
{
}

void sub_2534B8048()
{
}

void sub_2534B809C()
{
}

void sub_2534B80F0()
{
  sub_2534B3258();
  uint64_t v1 = sub_2534D976C();
  uint64_t v2 = type metadata accessor for TranscriptProtoUitype(v1);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CC54();
  uint64_t v4 = sub_253462A5C(&qword_269CDCC08);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDCC10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534B33AC();
  type metadata accessor for TranscriptProtoUIType(v7);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8FBC();
  MEMORY[0x270FA5388](v9);
  sub_2534D922C();
  if (!v15) {
    goto LABEL_20;
  }
  if (!v10) {
    goto LABEL_20;
  }
  sub_2534D9D50();
  if (v15) {
    goto LABEL_20;
  }
  sub_2534D8F08(v11, v12);
  while (1)
  {
    sub_2534D898C();
    sub_2534D9CE0();
    uint64_t v13 = sub_2534D9500();
    sub_2534D88A0(v13, v14, &qword_269CDCC08);
    sub_2534DA104();
    sub_2534D8B48((uint64_t)v0, 1, v2);
    if (!v15) {
      break;
    }
    sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoUIType, 1, v2);
    if (!v15) {
      goto LABEL_18;
    }
    sub_253472458((uint64_t)v0, &qword_269CDCC08);
LABEL_13:
    sub_2534D9064();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v18 = sub_2534D986C();
    uint64_t v2 = (uint64_t)type metadata accessor for TranscriptProtoUIType;
    sub_2534D89E0();
    sub_2534D9A2C();
    sub_2534D9A6C();
    if (v18)
    {
      sub_2534D997C();
      if (v19) {
        continue;
      }
    }
    goto LABEL_20;
  }
  sub_2534D984C();
  sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoUIType, 1, v2);
  if (!v15)
  {
    sub_2534D9E44();
    sub_2534D96CC();
    static TranscriptProtoUitype.== infix(_:_:)();
    char v17 = v16;
    uint64_t v0 = type metadata accessor for TranscriptProtoUitype;
    sub_2534D89E0();
    sub_2534D89E0();
    sub_253472458(v20, &qword_269CDCC08);
    if ((v17 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  sub_2534D89E0();
LABEL_18:
  sub_253472458((uint64_t)v0, &qword_269CDCC10);
LABEL_19:
  sub_2534D89E0();
  sub_2534D89E0();
LABEL_20:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B8404()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v49[1] = type metadata accessor for TranscriptProtoUIConfirmationLabel(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534659D8();
  uint64_t v56 = v7;
  sub_2534B324C();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)v49 - v9);
  v49[3] = sub_253462A5C(&qword_269CDCBF0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534AF2BC(v12, v49[0]);
  uint64_t v13 = type metadata accessor for TranscriptProtoLabel(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_25347FA68(v15, v49[0]);
  uint64_t v16 = sub_253462A5C(&qword_269CDCBF8);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_2534835B0();
  uint64_t v53 = sub_253462A5C(&qword_269CDCC00);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = sub_2534D8CAC();
  uint64_t v52 = type metadata accessor for TranscriptProtoUILabel(v19);
  sub_2534D8B2C();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  sub_2534D9154(v21, v22, v23, v24, v25, v26, v27, v28, v49[0]);
  MEMORY[0x270FA5388](v29);
  uint64_t v57 = (char *)v49 - v31;
  uint64_t v54 = v5;
  uint64_t v55 = v3;
  uint64_t v32 = *(void *)(v5 + 16);
  if (v32 != *(void *)(v3 + 16) || !v32 || v54 == v55) {
    goto LABEL_33;
  }
  unint64_t v33 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v50 = *(void *)(v30 + 72);
  uint64_t v51 = v0;
  uint64_t v34 = v32 - 1;
  v49[0] = v13;
  while (1)
  {
    uint64_t v35 = (uint64_t)v57;
    sub_2534D898C();
    sub_2534DA228();
    uint64_t v36 = v1 + *(int *)(v53 + 48);
    sub_2534D88A0(v35, v1, &qword_269CDCBF8);
    uint64_t v37 = sub_2534DA604();
    sub_2534D88A0(v37, v38, &qword_269CDCBF8);
    uint64_t v39 = sub_2534D9730();
    sub_2534D8B48(v39, v40, v13);
    if (v41)
    {
      sub_2534D8B48(v36, 1, v13);
      if (!v41)
      {
        char v48 = &qword_269CDCC00;
        goto LABEL_32;
      }
      goto LABEL_22;
    }
    sub_2534D88A0(v1, v51, &qword_269CDCBF8);
    sub_2534D8B48(v36, 1, v13);
    if (v41) {
      break;
    }
    sub_2534D8938();
    sub_2534D898C();
    char v42 = v56;
    sub_2534D898C();
    sub_2534D8938();
    sub_2534D9778();
    sub_2534D8938();
    BOOL v43 = *v10 == *v42 && v10[1] == v42[1];
    if (!v43 && (sub_253B0A4C0() & 1) == 0
      || (v10[2] == v56[2] ? (BOOL v44 = v10[3] == v56[3]) : (BOOL v44 = 0),
          !v44 && (sub_253B0A4C0() & 1) == 0
       || (sub_253B07160(), sub_2534D8A30((uint64_t)&qword_269CDCB90), sub_2534D96CC(), (sub_253B096B0() & 1) == 0)))
    {
      sub_2534D89E0();
      sub_2534D9F24();
      sub_2534D89E0();
      char v48 = &qword_269CDCBF8;
      goto LABEL_31;
    }
    sub_2534D89E0();
    sub_2534D9F24();
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v13 = v49[0];
LABEL_22:
    sub_253472458(v1, &qword_269CDCBF8);
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v45 = sub_2534D9FB4();
    sub_2534D89E0();
    sub_2534D89E0();
    BOOL v47 = v34-- != 0;
    if (v45)
    {
      v33 += v50;
      if (v47) {
        continue;
      }
    }
    goto LABEL_33;
  }
  char v48 = &qword_269CDCC00;
LABEL_31:
  sub_2534D89E0();
LABEL_32:
  sub_253472458(v1, v48);
  sub_2534D89E0();
  sub_2534D89E0();
LABEL_33:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B89E8()
{
  sub_2534B3258();
  uint64_t v1 = sub_2534D976C();
  uint64_t v2 = type metadata accessor for TranscriptProtoVisualOutputType(v1);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CC54();
  uint64_t v4 = sub_253462A5C(&qword_269CDCC18);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDCC20);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534B33AC();
  type metadata accessor for TranscriptProtoVisualOutput(v7);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8FBC();
  MEMORY[0x270FA5388](v9);
  sub_2534D922C();
  if (!v15) {
    goto LABEL_20;
  }
  if (!v10) {
    goto LABEL_20;
  }
  sub_2534D9D50();
  if (v15) {
    goto LABEL_20;
  }
  sub_2534D8F08(v11, v12);
  while (1)
  {
    sub_2534D898C();
    sub_2534D9CE0();
    uint64_t v13 = sub_2534D9500();
    sub_2534D88A0(v13, v14, &qword_269CDCC18);
    sub_2534DA104();
    sub_2534D8B48((uint64_t)v0, 1, v2);
    if (!v15) {
      break;
    }
    sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoVisualOutput, 1, v2);
    if (!v15) {
      goto LABEL_18;
    }
    sub_253472458((uint64_t)v0, &qword_269CDCC18);
LABEL_13:
    sub_2534D9064();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v18 = sub_2534D986C();
    uint64_t v2 = (uint64_t)type metadata accessor for TranscriptProtoVisualOutput;
    sub_2534D89E0();
    sub_2534D9A2C();
    sub_2534D9A6C();
    if (v18)
    {
      sub_2534D997C();
      if (v19) {
        continue;
      }
    }
    goto LABEL_20;
  }
  sub_2534D984C();
  sub_2534D8B48((uint64_t)type metadata accessor for TranscriptProtoVisualOutput, 1, v2);
  if (!v15)
  {
    sub_2534D9E44();
    sub_2534D96CC();
    static TranscriptProtoVisualOutputType.== infix(_:_:)();
    char v17 = v16;
    uint64_t v0 = type metadata accessor for TranscriptProtoVisualOutputType;
    sub_2534D89E0();
    sub_2534D89E0();
    sub_253472458(v20, &qword_269CDCC18);
    if ((v17 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  sub_2534D89E0();
LABEL_18:
  sub_253472458((uint64_t)v0, &qword_269CDCC20);
LABEL_19:
  sub_2534D89E0();
  sub_2534D89E0();
LABEL_20:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B8CFC()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  uint64_t v7 = sub_2534D976C();
  type metadata accessor for TranscriptProtoStatementID(v7);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8E94();
  MEMORY[0x270FA5388](v9);
  sub_2534D9C54();
  if (v13 && v4 && v0 != v6)
  {
    sub_2534DA184(v10);
    while (1)
    {
      sub_2534D898C();
      sub_2534DA660();
      if (*(_DWORD *)v2 != *(_DWORD *)v1) {
        break;
      }
      uint64_t v11 = *(void *)(v2 + 16);
      uint64_t v12 = *(void *)(v1 + 16);
      if (v11)
      {
        if (!v12) {
          break;
        }
        BOOL v13 = *(void *)(v2 + 8) == *(void *)(v1 + 8) && v11 == v12;
        if (!v13 && (sub_253B0A4C0() & 1) == 0) {
          break;
        }
      }
      else if (v12)
      {
        break;
      }
      sub_2534D995C();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      if ((sub_2534D95B8() & 1) == 0) {
        break;
      }
      sub_2534D89E0();
      sub_2534D9F24();
      v3 += v14;
      if (!--v4) {
        goto LABEL_20;
      }
    }
    sub_2534D89E0();
    sub_2534DA4A4();
  }
LABEL_20:
  sub_253465A14();
}

void sub_2534B8EB8()
{
}

void sub_2534B8F0C()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_253B08E50();
  sub_253465998();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  sub_2534B33C8(v10, v37);
  uint64_t v11 = sub_253462A5C(&qword_269CDCBC8);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534D8F84(v13, v38);
  uint64_t v14 = sub_253462A5C((uint64_t *)&off_269CDCBD0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = sub_2534D8CAC();
  uint64_t v44 = type metadata accessor for TranscriptProtoVariableSetter(v16);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v17);
  sub_2534D930C();
  MEMORY[0x270FA5388](v18);
  sub_2534DA1AC();
  uint64_t v20 = *(void *)(v5 + 16);
  if (v20 != *(void *)(v3 + 16) || !v20 || v5 == v3) {
    goto LABEL_20;
  }
  unint64_t v21 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v41 = *(void *)(v19 + 72);
  uint64_t v39 = (void (**)(void))(v8 + 8);
  uint64_t v22 = v20 - 1;
  while (1)
  {
    sub_2534D898C();
    sub_2534DA228();
    uint64_t v23 = v0 + *(int *)(v14 + 48);
    sub_2534D88A0(v1 + *(int *)(v44 + 20), v0, &qword_269CDCBC8);
    uint64_t v24 = sub_2534D9A78();
    sub_2534D88A0(v24, v25, &qword_269CDCBC8);
    uint64_t v26 = sub_2534D9730();
    sub_2534D8B48(v26, v27, v6);
    uint64_t v43 = v22;
    if (!v30) {
      break;
    }
    sub_2534D8B48(v23, 1, v6);
    if (!v30) {
      goto LABEL_18;
    }
    uint64_t v28 = sub_2534D9724();
    sub_253472458(v28, v29);
LABEL_12:
    sub_2534BDD40();
    if ((v33 & 1) == 0) {
      goto LABEL_19;
    }
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v34 = sub_253B096B0();
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v22 = v43 - 1;
    if (v34)
    {
      v21 += v41;
      if (v43) {
        continue;
      }
    }
    goto LABEL_20;
  }
  sub_2534D88A0(v0, v42, &qword_269CDCBC8);
  sub_2534D8B48(v23, 1, v6);
  if (!v30)
  {
    sub_2534D9A78();
    sub_2534D8E14();
    v31();
    sub_2534D8A30((uint64_t)&qword_269CDCBD8);
    char v40 = sub_253B096B0();
    uint64_t v32 = *v39;
    sub_2534D91A0();
    v32();
    sub_2534D91A0();
    v32();
    sub_253472458(v0, &qword_269CDCBC8);
    if ((v40 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_12;
  }
  uint64_t v35 = sub_2534D93F0();
  v36(v35);
LABEL_18:
  sub_253472458(v0, (uint64_t *)&off_269CDCBD0);
LABEL_19:
  sub_2534D89E0();
  sub_2534D9A2C();
LABEL_20:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B9338()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v5 = sub_2534D976C();
  type metadata accessor for ContextProtoSampleInvocation(v5);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v6);
  sub_2534D8E94();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void *)(v0 + 16);
  if (v10 == *(void *)(v4 + 16) && v10 && v0 != v4)
  {
    sub_2534DA6E0();
    uint64_t v19 = v11;
    uint64_t v13 = v12 - 1;
    while (1)
    {
      sub_2534D898C();
      sub_2534DA660();
      BOOL v14 = *(void *)v9 == *(void *)v1 && *((void *)v9 + 1) == *(void *)(v1 + 8);
      if (!v14 && (sub_253B0A4C0() & 1) == 0 || *((float *)v9 + 4) != *(float *)(v1 + 16)) {
        break;
      }
      sub_2534D995C();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      char v15 = sub_2534D95B8();
      sub_2534D89E0();
      sub_2534D89E0();
      BOOL v17 = v13-- != 0;
      if (v15)
      {
        v2 += v19;
        if (v17) {
          continue;
        }
      }
      goto LABEL_19;
    }
    sub_2534D89E0();
    sub_2534DA4A4();
  }
LABEL_19:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534B950C()
{
}

void sub_2534B9560()
{
  sub_2534B3258();
  uint64_t v4 = sub_2534D8D00();
  type metadata accessor for SpeechRequestCandidate(v4);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v5);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v6);
  sub_2534D8E5C();
  if (v10 && v7 && v1 != v0)
  {
    sub_2534D9640();
    while (1)
    {
      sub_2534D898C();
      sub_2534D9B40();
      sub_2534D9EE0();
      BOOL v10 = v10 && v8 == v9;
      if (!v10 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      sub_2534DA0DC();
      char v11 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
      sub_2534D89E0();
      sub_2534DA160();
      sub_2534D9B04();
      if (v11)
      {
        v2 += v3;
        if (v12) {
          continue;
        }
      }
      goto LABEL_16;
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_16:
  sub_2534DA0B8();
  sub_253465A14();
}

uint64_t sub_2534B96B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return _s30IntelligenceFlowPlannerSupport16SearchExpressionV5query24isLowConfidenceKnowledge7pickOne28shouldOpenResultIfApplicableACSS_S3btcfcfA1__0();
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 32);
  uint64_t v4 = (unsigned __int8 *)(a2 + 32);
  uint64_t v5 = v2 - 1;
  do
  {
    int v7 = *v3++;
    int v6 = v7;
    int v9 = *v4++;
    int v8 = v9;
    BOOL v11 = v5-- != 0;
    uint64_t result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

void sub_2534B9708()
{
}

void sub_2534B9750()
{
}

void sub_2534B97A4()
{
}

void sub_2534B97F8()
{
  sub_2534B3258();
  uint64_t v20 = v4;
  uint64_t v5 = sub_2534DA458();
  uint64_t v7 = v6(v5);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v8);
  sub_2534D8FBC();
  MEMORY[0x270FA5388](v9);
  BOOL v11 = (char *)&v19 - v10;
  uint64_t v12 = *(void *)(v1 + 16);
  if (v12 == *(void *)(v0 + 16) && v12 && v1 != v0)
  {
    sub_2534DA6E0();
    uint64_t v19 = v13;
    uint64_t v15 = v14 - 1;
    while (1)
    {
      sub_2534D898C();
      sub_2534D898C();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
        break;
      }
      char v16 = v20(&v11[*(int *)(v7 + 20)], v2 + *(int *)(v7 + 20));
      sub_2534DA120();
      sub_2534D89E0();
      BOOL v18 = v15-- != 0;
      if (v16)
      {
        v3 += v19;
        if (v18) {
          continue;
        }
      }
      goto LABEL_14;
    }
    sub_2534DA120();
    sub_2534D89E0();
  }
LABEL_14:
  sub_253465A14();
}

void sub_2534B9954()
{
}

uint64_t sub_2534B99A8()
{
  sub_2534D9E6C();
  if (v3)
  {
    if (!v2 || v0 == v1)
    {
      char v8 = 1;
    }
    else
    {
      uint64_t v4 = v0 + 32;
      uint64_t v5 = v1 + 32;
      do
      {
        v4 += 8;
        v5 += 8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2534DA2E4();
        sub_2534B9A48();
        char v8 = v6;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2534D9A6C();
      }
      while ((v8 & 1) != 0 && (v7 & 1) != 0);
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

void sub_2534B9A48()
{
  sub_2534B3258();
  uint64_t v5 = sub_2534D8D00();
  uint64_t v6 = type metadata accessor for Candidate(v5);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v7);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v8);
  sub_2534D8E5C();
  if (v18 && v9 && v1 != v0)
  {
    sub_2534D9910();
    uint64_t v29 = *(void *)(v10 + 72);
    while (1)
    {
      sub_2534D898C();
      sub_2534D9B40();
      sub_2534D9B10();
      if ((sub_253B090F0() & 1) == 0) {
        break;
      }
      unint64_t v11 = 0xEB00000000797265;
      switch(*(unsigned char *)(v3 + *(int *)(v6 + 20)))
      {
        case 1:
          sub_2534DA3A8();
          unint64_t v11 = 0xEE007972616C7562;
          break;
        case 2:
          unint64_t v11 = 0x8000000253B0B700;
          break;
        case 3:
          sub_2534DA380();
          uint64_t v12 = 5391173;
          goto LABEL_13;
        case 4:
          sub_2534DA34C();
          unint64_t v11 = 0xEF79727473696765;
          break;
        case 5:
          sub_2534DA338();
          uint64_t v12 = 6649196;
LABEL_13:
          unint64_t v11 = v12 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        case 6:
          unint64_t v11 = 0xEA00000000007470;
          sub_2534DA318();
          break;
        case 7:
          sub_2534DA2B0();
          unint64_t v11 = 0xEA00000000006863;
          break;
        default:
          break;
      }
      sub_2534DA29C();
      unint64_t v15 = 0xEB00000000797265;
      switch(v16)
      {
        case 1:
          sub_2534DA288();
          unint64_t v15 = 0xEE007972616C7562;
          break;
        case 2:
          unint64_t v15 = 0x8000000253B0B700;
          unint64_t v14 = 0xD000000000000014;
          break;
        case 3:
          sub_2534DA268();
          uint64_t v17 = 5391173;
          goto LABEL_22;
        case 4:
          sub_2534DA254();
          unint64_t v15 = 0xEF79727473696765;
          break;
        case 5:
          sub_2534DA240();
          uint64_t v17 = 6649196;
LABEL_22:
          unint64_t v15 = v17 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        case 6:
          unint64_t v15 = 0xEA00000000007470;
          sub_2534DA1E0();
          break;
        case 7:
          sub_2534DA948();
          unint64_t v15 = 0xEA00000000006863;
          break;
        default:
          break;
      }
      BOOL v18 = v13 == v14 && v11 == v15;
      if (v18)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v19 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0) {
          break;
        }
      }
      uint64_t v20 = *(int *)(v6 + 24);
      uint64_t v21 = *(void *)(v3 + v20);
      int v22 = *(unsigned __int8 *)(v3 + v20 + 8);
      uint64_t v23 = (uint64_t *)(v2 + v20);
      uint64_t v24 = *v23;
      char v25 = *((unsigned char *)v23 + 8);
      if (v22 == 1)
      {
        if (v21)
        {
          if (!v24) {
            char v25 = 0;
          }
          if ((v25 & 1) == 0) {
            break;
          }
        }
        else
        {
          if (v24) {
            char v25 = 0;
          }
          if ((v25 & 1) == 0) {
            break;
          }
        }
      }
      else
      {
        sub_2534DA6C8();
        if (v26) {
          break;
        }
      }
      char v27 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
      sub_2534D89E0();
      sub_2534DA160();
      sub_2534D9B04();
      if (v27)
      {
        v4 += v29;
        if (v28) {
          continue;
        }
      }
      goto LABEL_48;
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_48:
  sub_2534DA0B8();
  sub_253465A14();
}

void sub_2534B9E10()
{
  sub_2534B3258();
  uint64_t v5 = sub_2534D8D00();
  type metadata accessor for QueryPredicate(v5);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v6);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v7);
  sub_2534D8E5C();
  if (v12 && v8 && v1 != v0)
  {
    sub_2534D9910();
    uint64_t v21 = *(void *)(v9 + 72);
    while (1)
    {
      sub_2534D898C();
      sub_2534D9B40();
      sub_2534D9EE0();
      BOOL v12 = v12 && v10 == v11;
      if (!v12 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      unint64_t v13 = 0xE100000000000000;
      uint64_t v14 = 61;
      switch(*(unsigned char *)(v3 + 16))
      {
        case 1:
          unint64_t v13 = 0xE200000000000000;
          uint64_t v14 = 15649;
          break;
        case 2:
          uint64_t v14 = 62;
          break;
        case 3:
          unint64_t v13 = 0xE200000000000000;
          uint64_t v14 = 15678;
          break;
        case 4:
          uint64_t v14 = 60;
          break;
        case 5:
          unint64_t v13 = 0xE200000000000000;
          uint64_t v14 = 15676;
          break;
        case 6:
          unint64_t v13 = 0xE800000000000000;
          uint64_t v14 = 0x736E6961746E6F63;
          break;
        case 7:
          uint64_t v14 = 0x666572705F736168;
          goto LABEL_20;
        case 8:
          uint64_t v14 = 0x666675735F736168;
LABEL_20:
          unint64_t v13 = 0xEA00000000007869;
          break;
        case 9:
          unint64_t v13 = 0xEA00000000006E65;
          uint64_t v14 = 0x65777465625F7369;
          break;
        default:
          break;
      }
      unint64_t v15 = 0xE100000000000000;
      uint64_t v16 = 61;
      switch(*(unsigned char *)(v2 + 16))
      {
        case 1:
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 15649;
          break;
        case 2:
          uint64_t v16 = 62;
          break;
        case 3:
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 15678;
          break;
        case 4:
          uint64_t v16 = 60;
          break;
        case 5:
          unint64_t v15 = 0xE200000000000000;
          uint64_t v16 = 15676;
          break;
        case 6:
          unint64_t v15 = 0xE800000000000000;
          uint64_t v16 = 0x736E6961746E6F63;
          break;
        case 7:
          uint64_t v16 = 0x666572705F736168;
          goto LABEL_31;
        case 8:
          uint64_t v16 = 0x666675735F736168;
LABEL_31:
          unint64_t v15 = 0xEA00000000007869;
          break;
        case 9:
          unint64_t v15 = 0xEA00000000006E65;
          uint64_t v16 = 0x65777465625F7369;
          break;
        default:
          break;
      }
      if (v14 == v16 && v13 == v15)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          break;
        }
      }
      char v19 = sub_253B090F0();
      sub_2534D89E0();
      sub_2534DA160();
      sub_2534D9B04();
      if (v19)
      {
        v4 += v21;
        if (v20) {
          continue;
        }
      }
      goto LABEL_45;
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_45:
  sub_2534DA0B8();
  sub_253465A14();
}

void sub_2534BA19C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16) && v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 56);
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v8 = *(v3 - 1);
      uint64_t v7 = *v3;
      BOOL v9 = *(v4 - 3) == *(v3 - 3) && *(v4 - 2) == *(v3 - 2);
      if (!v9 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      if (v5)
      {
        if (!v7) {
          break;
        }
        BOOL v10 = v6 == v8 && v5 == v7;
        if (!v10 && (sub_253B0A4C0() & 1) == 0) {
          break;
        }
      }
      else if (v7)
      {
        break;
      }
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  sub_25346CD04();
}

void sub_2534BA26C()
{
}

void sub_2534BA2B4()
{
  sub_2534B3258();
  uint64_t v6 = sub_2534D8D00();
  type metadata accessor for UpdateParametersExpression.UpdateParameter(v6);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v7);
  sub_2534D8D84();
  MEMORY[0x270FA5388](v8);
  sub_2534D8E5C();
  if (v12 && v9 && v1 != v0)
  {
    sub_2534D9640();
    while (1)
    {
      sub_2534D898C();
      sub_2534D9B40();
      sub_2534D9EE0();
      BOOL v12 = v12 && v10 == v11;
      if (!v12 && (sub_253B0A4C0() & 1) == 0) {
        break;
      }
      if (*(unsigned char *)(v3 + 24))
      {
        if (!*(unsigned char *)(v2 + 24)) {
          break;
        }
      }
      else
      {
        sub_2534DA6C8();
        if (v13) {
          break;
        }
      }
      if (*(unsigned __int8 *)(v3 + 25) != *(unsigned __int8 *)(v2 + 25)) {
        break;
      }
      char v14 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
      sub_2534D89E0();
      sub_2534DA160();
      sub_2534D9B04();
      if (v14)
      {
        v4 += v5;
        if (v15) {
          continue;
        }
      }
      goto LABEL_21;
    }
    sub_2534D89E0();
    sub_2534D9B28();
  }
LABEL_21:
  sub_2534DA0B8();
  sub_253465A14();
}

void sub_2534BA440()
{
  sub_2534B3258();
  uint64_t v5 = sub_2534D8D00();
  uint64_t v62 = type metadata accessor for ContextProtoRetrievedTool.ContextProtoDefinitionEnum(v5);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_253462A5C(&qword_269CDCB70);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25346CC6C();
  uint64_t v61 = sub_253462A5C(&qword_269CDCB78);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_25346CB04();
  uint64_t v13 = v12;
  uint64_t v64 = type metadata accessor for ContextProtoRetrievedTool.Definition(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_2534B33C8(v15, (uint64_t)v58);
  uint64_t v16 = sub_253462A5C(&qword_269CDCB80);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_2534D92D4(v18, (uint64_t)v58);
  uint64_t v66 = sub_253462A5C(&qword_269CDCB88);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = sub_2534B33AC();
  uint64_t Output = type metadata accessor for ContextProtoToolQueryOutput(v20);
  sub_2534D8B2C();
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  sub_2534D9154(v22, v23, v24, v25, v26, v27, v28, v29, (uint64_t)v58);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v58 - v31;
  uint64_t v67 = v1;
  uint64_t v68 = v0;
  uint64_t v33 = *(void *)(v1 + 16);
  if (v33 != *(void *)(v0 + 16) || !v33 || v67 == v68) {
    goto LABEL_30;
  }
  uint64_t v58 = v8;
  uint64_t v59 = v2;
  sub_2534D9910();
  uint64_t v63 = *(void *)(v34 + 72);
  uint64_t v60 = v13;
  uint64_t v35 = v64;
  while (1)
  {
    sub_2534D898C();
    sub_2534D898C();
    uint64_t v36 = v3 + *(int *)(v66 + 48);
    sub_2534D88A0((uint64_t)v32, v3, &qword_269CDCB80);
    uint64_t v37 = sub_2534DA5AC();
    sub_2534D88A0(v37, v38, &qword_269CDCB80);
    sub_2534D8B48(v3, 1, v35);
    if (!v40) {
      break;
    }
    sub_2534D8B48(v36, 1, v35);
    if (!v40)
    {
      uint64_t v57 = &qword_269CDCB88;
      goto LABEL_28;
    }
    sub_253472458(v3, &qword_269CDCB80);
LABEL_19:
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    sub_2534ACF74();
    char v55 = sub_253B096B0();
    sub_2534D89E0();
    sub_2534D89E0();
    sub_2534D9B04();
    if (v55)
    {
      v4 += v63;
      if (v56) {
        continue;
      }
    }
    goto LABEL_30;
  }
  uint64_t v39 = v69;
  sub_2534D88A0(v3, v69, &qword_269CDCB80);
  sub_2534D8B48(v36, 1, v35);
  if (v40)
  {
    uint64_t v57 = &qword_269CDCB88;
    goto LABEL_27;
  }
  sub_2534D8938();
  uint64_t v41 = v60;
  uint64_t v42 = v60 + *(int *)(v61 + 48);
  sub_2534D88A0(v39, v60, &qword_269CDCB70);
  uint64_t v43 = sub_2534ACF74();
  sub_2534D88A0(v43, v44, &qword_269CDCB70);
  uint64_t v45 = v62;
  sub_2534D8B48(v41, 1, v62);
  if (v40)
  {
    sub_2534D8B48(v42, 1, v45);
    if (!v40) {
      goto LABEL_25;
    }
    uint64_t v46 = sub_2534DA154();
    sub_253472458(v46, v47);
    goto LABEL_18;
  }
  uint64_t v48 = v59;
  sub_2534D88A0(v41, v59, &qword_269CDCB70);
  sub_2534D8B48(v42, 1, v45);
  if (!v49)
  {
    uint64_t v50 = (uint64_t)v58;
    sub_2534D8938();
    char v51 = static ContextProtoRetrievedTool.ContextProtoDefinitionEnum.== infix(_:_:)(v48, v50);
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v52 = sub_2534D9B1C();
    sub_253472458(v52, v53);
    if ((v51 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_18:
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    sub_2534D970C();
    char v54 = sub_253B096B0();
    sub_2534D89E0();
    uint64_t v35 = v64;
    sub_2534D89E0();
    sub_253472458(v3, &qword_269CDCB80);
    if ((v54 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  sub_2534D89E0();
LABEL_25:
  sub_253472458(v41, &qword_269CDCB78);
LABEL_26:
  sub_2534D89E0();
  uint64_t v57 = &qword_269CDCB80;
LABEL_27:
  sub_2534D89E0();
LABEL_28:
  sub_253472458(v3, v57);
LABEL_29:
  sub_2534D89E0();
  sub_2534D89E0();
LABEL_30:
  sub_2534D9090();
  sub_253465A14();
}

void sub_2534BAAA0()
{
}

void sub_2534BAAF4()
{
}

void sub_2534BAB48()
{
}

void sub_2534BAB90()
{
  sub_2534B3258();
  sub_2534D8D00();
  uint64_t v2 = type metadata accessor for ToolQuery.Output();
  uint64_t v3 = sub_2534D93A4(v2);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6 == *(void *)(v0 + 16) && v6 && v1 != v0)
  {
    unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = *(void *)(v5 + 72);
    uint64_t v9 = v6 - 1;
    do
    {
      sub_2534D898C();
      sub_2534D898C();
      sub_2534D973C();
      char V6OutputV2eeoiySbAE_AEtFZ_0 = _s30IntelligenceFlowPlannerSupport9ToolQueryV6OutputV2eeoiySbAE_AEtFZ_0();
      sub_2534D89E0();
      sub_2534D89E0();
      BOOL v12 = v9-- != 0;
      if ((V6OutputV2eeoiySbAE_AEtFZ_0 & 1) == 0) {
        break;
      }
      v7 += v8;
    }
    while (v12);
  }
  sub_253465A14();
}

void sub_2534BACF0()
{
}

void sub_2534BAD44()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  uint64_t v7 = sub_2534D976C();
  uint64_t v35 = type metadata accessor for ContextProtoBoundingBox(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_253465A3C();
  uint64_t v9 = sub_253462A5C(&qword_269CDCCC0);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDCCC8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_2534D8CAC();
  type metadata accessor for ContextProtoSurroundingText(v12);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v13);
  sub_2534D930C();
  MEMORY[0x270FA5388](v14);
  sub_2534DA1AC();
  uint64_t v16 = *(void *)(v0 + 16);
  if (v16 != *(void *)(v6 + 16) || !v16 || v0 == v6) {
    goto LABEL_28;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v1;
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v15 + 72);
  while (1)
  {
    sub_2534D898C();
    sub_2534DA228();
    uint64_t v19 = v4[1];
    uint64_t v20 = v3[1];
    if (v19)
    {
      if (!v20) {
        goto LABEL_27;
      }
      BOOL v21 = *v4 == *v3 && v19 == v20;
      if (!v21 && (sub_253B0A4C0() & 1) == 0) {
        goto LABEL_27;
      }
    }
    else if (v20)
    {
      goto LABEL_27;
    }
    sub_2534D9784();
    sub_2534D88A0(v22, v23, &qword_269CDCCC0);
    uint64_t v24 = sub_2534D9A78();
    sub_2534D88A0(v24, v25, &qword_269CDCCC0);
    uint64_t v26 = sub_2534D9730();
    sub_2534D8B48(v26, v27, v35);
    if (!v21) {
      break;
    }
    sub_2534D8B48((uint64_t)type metadata accessor for ContextProtoSurroundingText, 1, v35);
    if (!v21) {
      goto LABEL_26;
    }
    sub_253472458(v2, &qword_269CDCCC0);
LABEL_21:
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    char v30 = sub_2534DA514();
    sub_2534D89E0();
    sub_2534D89E0();
    sub_2534D9A6C();
    if (v30)
    {
      v17 += v18;
      if (v31) {
        continue;
      }
    }
    goto LABEL_28;
  }
  sub_2534D88A0(v2, v33, &qword_269CDCCC0);
  sub_2534D8B48((uint64_t)type metadata accessor for ContextProtoSurroundingText, 1, v35);
  if (!v28)
  {
    sub_2534D8938();
    sub_2534D973C();
    static ContextProtoBoundingBox.== infix(_:_:)();
    char v34 = v29;
    sub_2534D89E0();
    sub_2534D89E0();
    sub_253472458(v2, &qword_269CDCCC0);
    uint64_t v4 = v32;
    if ((v34 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  sub_2534D89E0();
LABEL_26:
  sub_253472458(v2, &qword_269CDCCC8);
LABEL_27:
  sub_2534D89E0();
  sub_2534D9A2C();
LABEL_28:
  sub_2534D9090();
  sub_253465A14();
}

uint64_t sub_2534BB13C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  unint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  LOBYTE(v5) = static AST.Stmt.== infix(_:_:)(v5, v6);
  swift_release();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = 0;
  while (v8 + 1 < v2)
  {
    unint64_t v9 = *(void *)(a1 + 40 + 8 * v8);
    unint64_t v10 = *(void *)(a2 + 40 + 8 * v8);
    unint64_t v11 = v10 >> 62;
    if (v9 >> 62)
    {
      if (v9 >> 62 == 1)
      {
        if (v11 != 1) {
          return 0;
        }
        uint64_t v13 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        uint64_t v12 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        uint64_t v14 = *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
        swift_retain();
        swift_retain();
        static AST.Expr.== infix(_:_:)();
        if ((v15 & 1) == 0 || (sub_2534BB13C(v13) & 1) == 0) {
          goto LABEL_34;
        }
        if (v12)
        {
          if (!v14) {
            goto LABEL_34;
          }
          swift_bridgeObjectRetain();
          uint64_t v16 = swift_bridgeObjectRetain();
          char v17 = sub_2534BB13C(v16);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (v14) {
            goto LABEL_34;
          }
          swift_release();
          swift_release();
        }
      }
      else
      {
        if (v11 != 2) {
          return 0;
        }
        uint64_t v19 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v20 = *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
           && *(void *)((v9 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        if (!v20 && (sub_253B0A4C0() & 1) == 0) {
          return 0;
        }
        swift_retain();
        swift_retain();
        static AST.Expr.== infix(_:_:)();
        if ((v21 & 1) == 0)
        {
LABEL_34:
          swift_release();
          swift_release();
          return 0;
        }
        char v22 = sub_2534BB13C(v19);
        swift_release();
        swift_release();
        if ((v22 & 1) == 0) {
          return 0;
        }
      }
    }
    else
    {
      if (v11) {
        return 0;
      }
      static AST.Expr.== infix(_:_:)();
      if ((v18 & 1) == 0) {
        return 0;
      }
    }
    ++v8;
    uint64_t result = 1;
    if (v2 - 1 == v8) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_2534BB3BC()
{
}

void sub_2534BB410()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v4 = sub_2534DA6BC();
  uint64_t v5 = type metadata accessor for AST.FlatValue(v4);
  uint64_t v6 = sub_25346CB34(v5);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_2534DA444();
  uint64_t v9 = type metadata accessor for AST.Update(v8);
  sub_2534D8B2C();
  MEMORY[0x270FA5388](v10);
  sub_2534D8E94();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v34 - v12;
  uint64_t v14 = *(void *)(v1 + 16);
  if (v14 == *(void *)(v3 + 16) && v14 && v1 != v3)
  {
    sub_2534D9A84();
    v34[4] = v3 + v16;
    v34[5] = v17;
    v34[3] = *(void *)(v18 + 72);
    uint64_t v36 = v9;
    uint64_t v37 = v13;
    uint64_t v38 = v0;
    while (1)
    {
      uint64_t v35 = v15;
      sub_2534D898C();
      sub_2534D898C();
      sub_2534D9A44();
      static AST.FlatValue.== infix(_:_:)();
      if ((v19 & 1) == 0
        || (uint64_t v20 = *(int *)(v36 + 20),
            uint64_t v21 = *(void *)&v37[v20],
            uint64_t v22 = *(void *)(v38 + v20),
            uint64_t v23 = *(void *)(v21 + 16),
            v23 != *(void *)(v22 + 16)))
      {
LABEL_18:
        sub_2534D89E0();
        sub_2534D89E0();
        goto LABEL_19;
      }
      if (v23 && v21 != v22) {
        break;
      }
LABEL_13:
      if (v37[*(int *)(v36 + 24)] != *(unsigned char *)(v38 + *(int *)(v36 + 24))) {
        goto LABEL_18;
      }
      static AST.FlatValue.== infix(_:_:)();
      char v33 = v32;
      sub_2534D89E0();
      sub_2534D89E0();
      if (v33)
      {
        uint64_t v15 = v35 + 1;
        if (v35 + 1 != v34[2]) {
          continue;
        }
      }
      goto LABEL_19;
    }
    unint64_t v24 = 0;
    sub_2534DA780();
    uint64_t v27 = v26 & ~v25;
    uint64_t v29 = *(void *)(v28 + 72);
    while (1)
    {
      sub_2534D898C();
      if (v24 >= *(void *)(v22 + 16)) {
        break;
      }
      sub_2534D898C();
      sub_2534DA5AC();
      static AST.FlatValue.== infix(_:_:)();
      char v31 = v30;
      sub_2534D89E0();
      sub_2534DA5A0();
      sub_2534D89E0();
      if ((v31 & 1) == 0) {
        goto LABEL_18;
      }
      ++v24;
      v27 += v29;
      if (v23 == v24) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    sub_253465A14();
  }
}

void sub_2534BB728()
{
}

uint64_t sub_2534BB770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v9 = 1;
    }
    else
    {
      uint64_t v3 = (uint64_t *)(a1 + 32);
      uint64_t v4 = (uint64_t *)(a2 + 32);
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v7 = *v3++;
        uint64_t v6 = v7;
        uint64_t v8 = *v4++;
        uint64_t v13 = v8;
        uint64_t v14 = v6;
        char v9 = static AST.Expr.== infix(_:_:)(&v14, &v13);
        BOOL v11 = v5-- != 0;
      }
      while ((v9 & 1) != 0 && v11);
    }
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_2534BB800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_253B0A210();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v5 != v6) {
    goto LABEL_24;
  }
  if (v5)
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v7 = a1;
    }
    if (!v4) {
      uint64_t v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
    if (a2 < 0) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)a2 >> 62) {
      uint64_t v9 = v8;
    }
    if (v7 != v9)
    {
      if (v5 < 0) {
        goto LABEL_42;
      }
      unint64_t v22 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0) {
LABEL_43:
      }
        id v10 = (id)MEMORY[0x25A269060](0, a1);
      else {
        id v10 = *(id *)(a1 + 32);
      }
      uint64_t v4 = v10;
      sub_2534741E8(0, (a2 & 0xC000000000000001) == 0, a2);
      if ((a2 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x25A269060](0, a2);
      }
      else {
        id v11 = *(id *)(a2 + 32);
      }
      uint64_t v12 = v11;
      sub_2534D88F8();
      sub_2534D9B1C();
      char v13 = sub_253B09DD0();

      if (v13)
      {
        if (v5 != 1)
        {
          uint64_t v16 = 5;
          while (1)
          {
            if (v16 - 4 >= v5)
            {
              __break(1u);
              goto LABEL_39;
            }
            if (v22)
            {
              uint64_t v17 = sub_2534DA498();
              id v18 = (id)MEMORY[0x25A269060](v17);
            }
            else
            {
              id v18 = *(id *)(a1 + 8 * v16);
            }
            uint64_t v4 = v18;
            if ((a2 & 0xC000000000000001) != 0)
            {
              id v19 = (id)MEMORY[0x25A269060](v16 - 4, a2);
            }
            else
            {
              if ((unint64_t)(v16 - 4) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              id v19 = *(id *)(a2 + 8 * v16);
            }
            uint64_t v20 = v19;
            sub_2534DA154();
            char v14 = sub_253B09DD0();

            if (v14)
            {
              uint64_t v21 = 2 - v5 + v16++;
              if (v21 != 5) {
                continue;
              }
            }
            return v14 & 1;
          }
        }
        goto LABEL_23;
      }
LABEL_24:
      char v14 = 0;
      return v14 & 1;
    }
  }
LABEL_23:
  char v14 = 1;
  return v14 & 1;
}

uint64_t static AST.Stmt.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (!(a1 >> 62))
  {
    if (!(a2 >> 62))
    {
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)&long long v16 = *(void *)(a1 + 16);
      *(void *)&long long v13 = v6;
      static AST.Expr.== infix(_:_:)();
      return v5 & 1;
    }
LABEL_9:
    char v5 = 0;
    return v5 & 1;
  }
  if (a1 >> 62 != 1)
  {
    if (a2 >> 62 == 2)
    {
      uint64_t v8 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v7 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      long long v9 = *(_OWORD *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v11 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v10 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      long long v16 = *(_OWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v17 = v8;
      uint64_t v18 = v7;
      long long v13 = v9;
      uint64_t v14 = v11;
      uint64_t v15 = v10;
      char v5 = static AST.ForInStmt.== infix(_:_:)(&v16, &v13);
      return v5 & 1;
    }
    goto LABEL_9;
  }
  if (a2 >> 62 != 1) {
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  long long v3 = *(_OWORD *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v4 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
  long long v16 = *(_OWORD *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v17 = v2;
  long long v13 = v3;
  uint64_t v14 = v4;
  char v5 = static AST.IfStmt.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v13);
  return v5 & 1;
}

void static AST.Expr.== infix(_:_:)()
{
  sub_2534B3258();
  sub_2534D8D00();
  uint64_t updated = type metadata accessor for AST.UpdateParameters();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v8);
  sub_2534DA444();
  uint64_t v9 = sub_253B059D0();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_2534D8E78();
  MEMORY[0x270FA5388](v13);
  sub_2534D9EC0();
  unint64_t v14 = *v1;
  unint64_t v15 = *v0;
  switch(v14 >> 60)
  {
    case 1uLL:
      if (v15 >> 60 != 1) {
        goto LABEL_44;
      }
      uint64_t v17 = swift_projectBox();
      uint64_t v18 = swift_projectBox();
      id v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      v19(v5, v17, v9);
      v19(v4, v18, v9);
      sub_2534DA040();
      _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
      uint64_t v20 = *(void (**)(void))(v11 + 8);
      sub_2534D9724();
      sub_2534D97B4();
      v20();
      sub_2534D9FA8();
      sub_2534D97B4();
      v20();
      goto LABEL_45;
    case 2uLL:
      if (v15 >> 60 != 2) {
        goto LABEL_44;
      }
      uint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v22 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      char v23 = *(unsigned char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      char v24 = *(unsigned char *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      unint64_t v25 = sub_2534D973C();
      static AST.Literal.== infix(_:_:)(v25, v26, v24, v21, v22, v23);
      goto LABEL_45;
    case 3uLL:
      if (v15 >> 60 != 3) {
        goto LABEL_44;
      }
      sub_2534D9F0C();
      if (!v16) {
        goto LABEL_44;
      }
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      sub_2534D9A14();
      goto LABEL_45;
    case 4uLL:
      if (v15 >> 60 != 4) {
        goto LABEL_44;
      }
      sub_2534D9F0C();
      if (!v16) {
        goto LABEL_44;
      }
      unint64_t v30 = *(void *)(v27 + 24);
      unint64_t v29 = *(void *)(v27 + 32);
      unint64_t v32 = *(void *)(v28 + 24);
      unint64_t v31 = *(void *)(v28 + 32);
      sub_2534DA040();
      sub_2534C1C84(v30);
      sub_2534C1C84(v29);
      sub_2534C1C84(v32);
      sub_2534C1C84(v31);
      if (sub_2534D9A14())
      {
        sub_2534D9A14();
        unint64_t v33 = sub_2534DA754();
      }
      else
      {
        sub_25346CA4C(v31);
        sub_25346CA4C(v32);
        sub_25346CA4C(v29);
        unint64_t v33 = v30;
      }
      goto LABEL_31;
    case 5uLL:
      if (v15 >> 60 != 5) {
        goto LABEL_44;
      }
      unint64_t v34 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v35 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v36 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      unint64_t v37 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v38 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v39 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      sub_2534C1C84(v34);
      sub_2534C1C84(v37);
      if ((sub_2534D9A14() & 1) == 0)
      {
        sub_25346CA4C(v37);
        unint64_t v33 = v34;
LABEL_31:
        sub_25346CA4C(v33);
        goto LABEL_45;
      }
      if (v35 != v38 || v36 != v39)
      {
        sub_2534D9B1C();
        sub_253B0A4C0();
        sub_25346CA4C(v37);
        sub_25346CA4C(v34);
        sub_25346CA4C(v14);
        sub_25346CA4C(v15);
        goto LABEL_54;
      }
      sub_25346CA4C(v37);
      sub_25346CA4C(v34);
      goto LABEL_52;
    case 6uLL:
      if (v15 >> 60 != 6) {
        goto LABEL_44;
      }
      unint64_t v41 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v42 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v43 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v44 = *(void *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      sub_2534C1C84(v41);
      sub_2534C1C84(v43);
      sub_2534C1C84(v42);
      sub_2534C1C84(v44);
      if (sub_2534D9A14())
      {
        sub_2534D9A14();
        sub_25346CA4C(v43);
        sub_25346CA4C(v41);
        sub_25346CA4C(v44);
        unint64_t v33 = v42;
      }
      else
      {
        unint64_t v33 = sub_2534DA754();
      }
      goto LABEL_31;
    case 7uLL:
      if (v15 >> 60 != 7) {
        goto LABEL_44;
      }
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      static AST.CallFn.== infix(_:_:)();
      if (v45)
      {
        uint64_t v46 = sub_2534D9718();
        sub_2534C1988(v46, v47);
      }
      goto LABEL_45;
    case 8uLL:
      if (v15 >> 60 != 8) {
        goto LABEL_44;
      }
      swift_projectBox();
      swift_projectBox();
      sub_2534D898C();
      sub_2534D898C();
      sub_2534C1C84(v15);
      sub_2534C1C84(v14);
      sub_2534D9718();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0
        || (sub_2534C1554(*(void *)(v2 + *(int *)(updated + 20)), *(void *)(v3 + *(int *)(updated + 20))) & 1) == 0)
      {
        sub_2534D89E0();
        sub_2534D89E0();
        goto LABEL_45;
      }
      sub_2534D89E0();
      sub_2534D89E0();
LABEL_52:
      sub_25346CA4C(v14);
      unint64_t v48 = v15;
      goto LABEL_53;
    case 9uLL:
      if (v14 == 0x9000000000000000)
      {
        if (v15 == 0x9000000000000000)
        {
          sub_25346CA4C(0x9000000000000000);
          unint64_t v48 = 0x9000000000000000;
LABEL_53:
          sub_25346CA4C(v48);
          goto LABEL_54;
        }
      }
      else if (v15 == 0x9000000000000008)
      {
        sub_25346CA4C(0x9000000000000008);
        unint64_t v48 = 0x9000000000000008;
        goto LABEL_53;
      }
LABEL_44:
      sub_2534DA040();
LABEL_45:
      sub_25346CA4C(v14);
      sub_25346CA4C(v15);
LABEL_54:
      sub_253465A14();
      return;
    default:
      if (!(v15 >> 60))
      {
        BOOL v16 = *(void *)(v14 + 16) == *(void *)(v15 + 16) && *(void *)(v14 + 24) == *(void *)(v15 + 24);
        if (!v16) {
          sub_253B0A4C0();
        }
      }
      goto LABEL_44;
  }
}

uint64_t static AST.IfStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  static AST.Expr.== infix(_:_:)();
  if (v4)
  {
    uint64_t v5 = sub_2534D9718();
    if (sub_2534BB13C(v5))
    {
      if (v2)
      {
        if (v3)
        {
          swift_bridgeObjectRetain();
          uint64_t v6 = swift_bridgeObjectRetain();
          char v7 = sub_2534BB13C(v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v7) {
            return 1;
          }
        }
      }
      else if (!v3)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t static AST.ForInStmt.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_253B0A4C0() & 1) == 0) {
    return 0;
  }
  static AST.Expr.== infix(_:_:)();
  if ((v3 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = sub_2534ACF74();
  return sub_2534BB13C(v4);
}

uint64_t sub_2534BC2B0(unint64_t *a1, unint64_t *a2)
{
  return static AST.Stmt.== infix(_:_:)(*a1, *a2);
}

unint64_t static AST.Literal.== infix(_:_:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_21;
      }
      char v6 = a1 == a4;
      return v6 & 1;
    case 2:
      if (a6 != 2) {
        goto LABEL_21;
      }
      char v6 = *(double *)&a1 == *(double *)&a4;
      return v6 & 1;
    case 3:
      if (a6 != 3) {
        goto LABEL_21;
      }
      if (a1 != a4 || a2 != a5) {
        return sub_253B0A4C0();
      }
LABEL_20:
      char v6 = 1;
      return v6 & 1;
    case 4:
      if (a6 != 4) {
        goto LABEL_21;
      }
      return sub_2534BB770(a1, a4);
    case 5:
      if (a6 != 5) {
        goto LABEL_21;
      }
      return sub_2534C17A4(a1, a4);
    case 6:
      if (a6 == 6 && !(a5 | a4)) {
        goto LABEL_20;
      }
      goto LABEL_21;
    default:
      if (a6) {
LABEL_21:
      }
        char v6 = 0;
      else {
        char v6 = ((a1 & 1) == 0) ^ a4;
      }
      return v6 & 1;
  }
}

BOOL static AST.InfixOp.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void static AST.CallFn.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = *v0;
  uint64_t v6 = v0[1];
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  if ((v1[4] & 1) == 0)
  {
    if ((v0[4] & 1) == 0)
    {
      if (v3 != v7 || v2 != v6) {
        sub_25349667C();
      }
      uint64_t v38 = sub_2534D9E14();
      sub_2534C51E4(v38, v39, v40, v41, v42);
      uint64_t v43 = sub_2534D9F54();
      sub_2534C51E4(v43, v44, v45, v46, v47);
      uint64_t v48 = sub_2534D9F54();
      sub_2534C5224(v48, v49, v50, v51, v52);
      uint64_t v32 = sub_2534D9E14();
      goto LABEL_28;
    }
    goto LABEL_16;
  }
  if ((v0[4] & 1) == 0)
  {
LABEL_16:
    uint64_t v17 = sub_2534D9E2C();
    sub_2534C51E4(v17, v18, v19, v20, v21);
    uint64_t v22 = sub_2534D9F3C();
    sub_2534C51E4(v22, v23, v24, v25, v26);
    uint64_t v27 = sub_2534D9F3C();
    sub_2534C5224(v27, v28, v29, v30, v31);
    uint64_t v32 = sub_2534D9E2C();
LABEL_28:
    sub_2534C5224(v32, v33, v34, v35, v36);
    goto LABEL_29;
  }
  BOOL v10 = v3 == v7 && v2 == v6;
  if (!v10 && (sub_25349667C() & 1) == 0) {
    goto LABEL_24;
  }
  if (!v5)
  {
    if (!v9)
    {
      uint64_t v57 = sub_2534DA2F0();
      sub_2534C51E4(v57, v58, v59, v60, 1);
      uint64_t v61 = sub_2534D9F6C();
      sub_2534C51E4(v61, v62, v63, v64, v65);
      uint64_t v66 = sub_2534D9F6C();
      sub_2534C5224(v66, v67, v68, v69, v70);
      uint64_t v32 = sub_2534DA2F0();
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  if (!v9)
  {
LABEL_24:
    sub_2534D9DF0();
    sub_2534D957C();
    sub_2534D9558();
    uint64_t v32 = sub_2534D9DD8();
    goto LABEL_28;
  }
  if (v4 == v8 && v5 == v9)
  {
    uint64_t v53 = sub_2534DA304();
    sub_2534C51E4(v53, v54, v55, v56, 1);
    sub_2534D957C();
    sub_2534D9558();
    uint64_t v32 = sub_2534DA304();
LABEL_27:
    char v36 = 1;
    goto LABEL_28;
  }
  sub_253B0A4C0();
  sub_2534D9DF0();
  sub_2534D957C();
  sub_2534D9558();
  uint64_t v12 = sub_2534D9DD8();
  sub_2534C5224(v12, v13, v14, v15, v16);
LABEL_29:
  sub_253465A14();
}

void sub_2534BC56C()
{
  sub_2534B3258();
  if (v6 == v5 || (uint64_t v7 = v5, sub_2534D9E6C(), !v8))
  {
LABEL_23:
    sub_253465A14();
    return;
  }
  sub_2534D909C();
  while (1)
  {
    if (v3)
    {
      sub_2534D9D60();
      goto LABEL_21;
    }
    uint64_t v9 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v1) {
      goto LABEL_23;
    }
    ++v2;
    if (!*(void *)(v0 + 8 * v9))
    {
      uint64_t v2 = v9 + 1;
      if (v9 + 1 >= v1) {
        goto LABEL_23;
      }
      if (!*(void *)(v0 + 8 * v2))
      {
        uint64_t v2 = v9 + 2;
        if (v9 + 2 >= v1) {
          goto LABEL_23;
        }
        if (!*(void *)(v0 + 8 * v2)) {
          break;
        }
      }
    }
LABEL_20:
    sub_2534D9D38();
LABEL_21:
    sub_2534D9CFC();
    sub_2534D9718();
    unint64_t v11 = sub_25396DF8C();
    char v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0 || *(void *)(*(void *)(v7 + 56) + 8 * v11) != v4) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = v9 + 3;
  if (v10 >= v1) {
    goto LABEL_23;
  }
  if (*(void *)(v0 + 8 * v10))
  {
    uint64_t v2 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v2 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v2 >= v1) {
      goto LABEL_23;
    }
    ++v10;
    if (*(void *)(v0 + 8 * v2)) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
}

void sub_2534BC684()
{
  sub_2534B3258();
  sub_253B09120();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v7);
  sub_2534DA430();
  uint64_t v45 = sub_253B059D0();
  sub_253465998();
  uint64_t v40 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B33C8(v10, v38);
  uint64_t v11 = sub_253462A5C(&qword_269CDCAA0);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534D8FA0();
  MEMORY[0x270FA5388](v13);
  sub_2534DA3F4();
  if (v26)
  {
    sub_2534DA39C();
LABEL_40:
    sub_2534DA724();
    sub_253465A14();
    return;
  }
  sub_2534D8F30();
  if (!v26)
  {
LABEL_39:
    int v43 = 0;
    goto LABEL_40;
  }
  sub_2534D8D10();
  while (1)
  {
    if (v2)
    {
      sub_2534D99B8();
LABEL_7:
      sub_2534B3428();
      v14();
      sub_2534DA1F4();
      sub_2534B3428();
      v15();
      sub_2534DA580();
      goto LABEL_30;
    }
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    sub_2534DA918();
    if (v17 != v18)
    {
      if (*(void *)(v39 + 8 * v16)) {
        goto LABEL_12;
      }
      sub_2534DA8DC(v16);
      if (v17 != v18)
      {
        if (*(void *)(v39 + 8 * v19)) {
          goto LABEL_16;
        }
        sub_2534DA8C8();
        if (v17 != v18) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v22 = sub_253462A5C(&qword_269CDCAA8);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 1, 1, v22);
    uint64_t v2 = 0;
LABEL_30:
    uint64_t v23 = sub_2534DA5A0();
    sub_2534D8A74(v23, v24, &qword_269CDCAA0);
    uint64_t v25 = sub_253462A5C(&qword_269CDCAA8);
    sub_2534D8B48(v1, 1, v25);
    if (v26) {
      int v27 = 1;
    }
    else {
      int v27 = 0;
    }
    int v43 = v27;
    if (v26) {
      goto LABEL_40;
    }
    uint64_t v44 = v2;
    sub_2534D8E14();
    v28();
    sub_2534D8E14();
    v29();
    sub_25396DFFC();
    char v31 = v30;
    sub_2534659CC();
    v32();
    if ((v31 & 1) == 0)
    {
      uint64_t v36 = sub_2534DA0EC();
      v37(v36);
      goto LABEL_39;
    }
    sub_2534B3428();
    v33();
    sub_2534D8A30((uint64_t)&unk_269CDCAB0);
    char v34 = sub_2534D9FF4();
    uint64_t v35 = *(void (**)(void))(v4 + 8);
    sub_25347FB18();
    v35();
    sub_25347FB18();
    v35();
    uint64_t v2 = v44;
    if ((v34 & 1) == 0) {
      goto LABEL_40;
    }
  }
  if (*(void *)(v39 + 8 * v20))
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534DA8A0();
  if (v17 == v18) {
    goto LABEL_29;
  }
  if (*(void *)(v39 + 8 * v19))
  {
LABEL_16:
    uint64_t v16 = v19;
LABEL_12:
    sub_2534D9CC4(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v19, 1))
  {
    sub_2534DA918();
    if (v17 == v18)
    {
      uint64_t v42 = v38;
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v21) {
      goto LABEL_12;
    }
  }
LABEL_42:
  __break(1u);
}

void sub_2534BCA70()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  sub_2534D9690();
  uint64_t v7 = sub_253B06770();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_2534D9BE4(v11, v77);
  uint64_t v12 = sub_253462A5C(&qword_269CDCB00);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_2534D929C(v14, v77);
  uint64_t v91 = sub_253462A5C(&qword_269CDCB08);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534D9B74();
  uint64_t v88 = sub_253B09120();
  sub_253465998();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  sub_2534D9264(v19, v77);
  uint64_t v94 = type metadata accessor for ToolParameterValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v20);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v21);
  uint64_t v87 = (char *)&v77 - v22;
  uint64_t v93 = sub_253462A5C(&qword_269CDCB10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = sub_2534B33AC();
  uint64_t v90 = type metadata accessor for Action.ParameterValue(v24);
  sub_253465998();
  uint64_t v98 = v25;
  MEMORY[0x270FA5388](v26);
  char v100 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v28);
  sub_2534D97C0();
  uint64_t v29 = sub_253462A5C(&qword_269CDCB18);
  uint64_t v30 = sub_25346CB4C(v29);
  MEMORY[0x270FA5388](v30);
  uint64_t v97 = (char *)&v77 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v32);
  sub_2534D9ED0();
  uint64_t v99 = v6;
  if (v0 == v6 || *(void *)(v0 + 16) != *(void *)(v99 + 16))
  {
LABEL_56:
    sub_253465A14();
    return;
  }
  uint64_t v85 = v2;
  uint64_t v92 = 0;
  uint64_t v86 = v0;
  uint64_t v79 = v0 + 64;
  sub_2534D9658();
  uint64_t v82 = v17 + 32;
  uint64_t v84 = (void (**)(void))(v17 + 8);
  uint64_t v80 = v9 + 32;
  uint64_t v81 = (void (**)(void))(v9 + 8);
  uint64_t v83 = v33;
  uint64_t v78 = v33 - 1;
  uint64_t v95 = v3;
  uint64_t v34 = (uint64_t)v97;
  if (!v35) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v36 = v7;
  sub_2534D9474();
  uint64_t v96 = v37;
  while (2)
  {
    sub_2534DA6D4();
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    uint64_t v41 = sub_253462A5C(&qword_269CDCB20);
    uint64_t v42 = v97;
    sub_2534D898C();
    *uint64_t v42 = v40;
    v42[1] = v39;
    uint64_t v34 = (uint64_t)v42;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v42, 0, 1, v41);
    swift_bridgeObjectRetain();
    uint64_t v7 = v36;
    uint64_t v3 = v95;
    while (1)
    {
      uint64_t v50 = sub_2534DA178();
      sub_2534D8A74(v50, v51, &qword_269CDCB18);
      uint64_t v52 = sub_253462A5C(&qword_269CDCB20);
      sub_2534D8B48(v1, 1, v52);
      if (v64) {
        goto LABEL_56;
      }
      sub_2534D8938();
      sub_2534DA034();
      sub_25396E0AC();
      char v54 = v53;
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0) {
        goto LABEL_55;
      }
      sub_2534D898C();
      uint64_t v55 = (uint64_t *)(v3 + *(int *)(v93 + 48));
      sub_2534D898C();
      sub_2534DA604();
      sub_2534D898C();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_2534D898C();
        sub_2534D9778();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_2534DA678();
          sub_2534DA604();
          sub_2534D8E14();
          v56();
          sub_2534D9840();
          char v57 = sub_253B090F0();
          uint64_t v58 = *v84;
          sub_2534D91AC();
          v58();
          sub_2534D9FA8();
          sub_2534D91AC();
          v58();
          uint64_t v3 = v95;
          if ((v57 & 1) == 0) {
            goto LABEL_47;
          }
          goto LABEL_37;
        }
        sub_2534659CC();
        v73();
        uint64_t v3 = v95;
LABEL_50:
        uint64_t v74 = &qword_269CDCB10;
        uint64_t v75 = v3;
        goto LABEL_53;
      }
      uint64_t v59 = (uint64_t *)v87;
      sub_2534D898C();
      uint64_t v61 = *v59;
      uint64_t v60 = v59[1];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
      uint64_t v62 = *v55;
      uint64_t v63 = v55[1];
      BOOL v64 = v61 == v62 && v60 == v63;
      if (v64)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v34 = (uint64_t)v97;
      }
      else
      {
        char v65 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)v97;
        if ((v65 & 1) == 0)
        {
LABEL_47:
          sub_2534D89E0();
          goto LABEL_54;
        }
      }
LABEL_37:
      sub_2534D89E0();
      uint64_t v66 = v4 + *(int *)(v91 + 48);
      sub_2534D88A0((uint64_t)&v100[*(int *)(v90 + 20)], v4, &qword_269CDCB00);
      uint64_t v67 = sub_2534ACF74();
      sub_2534D88A0(v67, v68, &qword_269CDCB00);
      sub_2534D8B48(v4, 1, v7);
      if (v64)
      {
        sub_2534D8B48(v66, 1, v7);
        if (!v64) {
          goto LABEL_52;
        }
        sub_253472458(v4, &qword_269CDCB00);
        goto LABEL_44;
      }
      sub_2534D88A0(v4, v89, &qword_269CDCB00);
      sub_2534D8B48(v66, 1, v7);
      if (v69)
      {
        sub_2534DA678();
        v76(v89, v7);
LABEL_52:
        uint64_t v74 = &qword_269CDCB08;
        uint64_t v75 = v4;
LABEL_53:
        sub_253472458(v75, v74);
LABEL_54:
        sub_2534D89E0();
LABEL_55:
        sub_2534D89E0();
        goto LABEL_56;
      }
      sub_2534DA678();
      sub_2534D8E14();
      v70();
      sub_2534D8A30((uint64_t)&unk_269CDCB28);
      sub_2534D9FA8();
      char v71 = sub_253B096B0();
      uint64_t v72 = *v81;
      uint64_t v3 = v95;
      sub_2534D91AC();
      v72();
      sub_2534D954C();
      sub_2534D91AC();
      v72();
      sub_253472458(v4, &qword_269CDCB00);
      if ((v71 & 1) == 0) {
        goto LABEL_54;
      }
LABEL_44:
      sub_2534D89E0();
      sub_2534D9AAC();
      if (v96) {
        goto LABEL_4;
      }
LABEL_6:
      uint64_t v43 = v92 + 1;
      if (__OFADD__(v92, 1))
      {
        __break(1u);
        goto LABEL_58;
      }
      if (v43 < v83)
      {
        if (*(void *)(v79 + 8 * v43)) {
          goto LABEL_9;
        }
        uint64_t v46 = v92 + 2;
        ++v92;
        if (v43 + 1 < v83)
        {
          if (*(void *)(v79 + 8 * v46)) {
            goto LABEL_9;
          }
          uint64_t v92 = v43 + 1;
          if (v43 + 2 < v83)
          {
            if (*(void *)(v79 + 8 * (v43 + 2))) {
              goto LABEL_9;
            }
            uint64_t v47 = v43 + 3;
            uint64_t v92 = v43 + 2;
            if (v43 + 3 < v83) {
              break;
            }
          }
        }
      }
LABEL_22:
      uint64_t v49 = sub_253462A5C(&qword_269CDCB20);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, 1, 1, v49);
      uint64_t v96 = 0;
    }
    if (*(void *)(v79 + 8 * v47))
    {
LABEL_9:
      uint64_t v36 = v7;
      sub_2534D9174();
      uint64_t v96 = v44;
      uint64_t v92 = v45;
      continue;
    }
    break;
  }
  while (!__OFADD__(v47, 1))
  {
    if (v47 + 1 >= v83)
    {
      uint64_t v92 = v78;
      goto LABEL_22;
    }
    sub_2534D8EB0();
    if (v48) {
      goto LABEL_9;
    }
  }
LABEL_58:
  __break(1u);
}

void sub_2534BD3B4()
{
  sub_2534B3258();
  uint64_t v5 = sub_2534D8D00();
  uint64_t v43 = type metadata accessor for TranscriptProtoStatementID(v5);
  sub_253465998();
  uint64_t v45 = v6;
  MEMORY[0x270FA5388](v7);
  sub_2534D8E78();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = sub_253462A5C(&qword_269CDCB98);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v13);
  sub_2534DA408();
  if (v37 || (sub_2534D8F30(), !v37))
  {
LABEL_43:
    sub_253465A14();
    return;
  }
  uint64_t v44 = 0;
  uint64_t v41 = v4;
  uint64_t v42 = v1;
  sub_2534D8E34();
  unint64_t v16 = v15 & v14;
  sub_2534DA27C();
  uint64_t v39 = v1 + 64;
  uint64_t v40 = v17;
  uint64_t v38 = v17 - 1;
  if (!v16) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v18 = v2;
  uint64_t v19 = v0;
  unint64_t v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v21 = v20 | (v44 << 6);
  while (2)
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v42 + 48) + 16 * v21);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    sub_253462A5C(&qword_269CDCBA0);
    sub_2534D898C();
    *uint64_t v3 = v23;
    v3[1] = v24;
    sub_2534D9344((uint64_t)v3);
    uint64_t v0 = v19;
    uint64_t v2 = v18;
    uint64_t v4 = v41;
    while (1)
    {
      uint64_t v30 = sub_2534D9840();
      sub_2534D8A74(v30, v31, &qword_269CDCB98);
      uint64_t v32 = sub_253462A5C(&qword_269CDCBA0);
      sub_2534D8B48(v4, 1, v32);
      if (v37) {
        goto LABEL_43;
      }
      sub_2534D8938();
      sub_2534D99FC();
      sub_25396E0AC();
      char v34 = v33;
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0) {
        goto LABEL_42;
      }
      sub_2534D898C();
      if (*(_DWORD *)v2 != *(_DWORD *)v10)
      {
LABEL_41:
        sub_2534D89E0();
LABEL_42:
        sub_2534D89E0();
        goto LABEL_43;
      }
      uint64_t v35 = *(void *)(v2 + 16);
      uint64_t v36 = *((void *)v10 + 2);
      if (v35)
      {
        if (!v36) {
          goto LABEL_41;
        }
        BOOL v37 = *(void *)(v2 + 8) == *((void *)v10 + 1) && v35 == v36;
        if (!v37 && (sub_253B0A4C0() & 1) == 0) {
          goto LABEL_41;
        }
      }
      else if (v36)
      {
        goto LABEL_41;
      }
      sub_253B07160();
      sub_2534D8A30((uint64_t)&qword_269CDCB90);
      sub_2534D99FC();
      if ((sub_253B096B0() & 1) == 0) {
        goto LABEL_41;
      }
      sub_2534D89E0();
      sub_2534D9F24();
      if (v16) {
        goto LABEL_5;
      }
LABEL_7:
      sub_2534DA0D0();
      if (v26)
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v25 < v40)
      {
        unint64_t v27 = *(void *)(v39 + 8 * v25);
        if (v27) {
          goto LABEL_10;
        }
        uint64_t v28 = v25 + 1;
        uint64_t v44 = v25;
        if (v25 + 1 < v40)
        {
          unint64_t v27 = *(void *)(v39 + 8 * v28);
          if (v27) {
            goto LABEL_13;
          }
          uint64_t v44 = v25 + 1;
          if (v25 + 2 < v40)
          {
            unint64_t v27 = *(void *)(v39 + 8 * (v25 + 2));
            if (v27)
            {
              v25 += 2;
              goto LABEL_10;
            }
            uint64_t v28 = v25 + 3;
            uint64_t v44 = v25 + 2;
            if (v25 + 3 < v40) {
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v29 = sub_253462A5C(&qword_269CDCBA0);
      sub_2534D93D0(v29);
      unint64_t v16 = 0;
    }
    unint64_t v27 = *(void *)(v39 + 8 * v28);
    if (v27)
    {
LABEL_13:
      uint64_t v25 = v28;
LABEL_10:
      uint64_t v18 = v2;
      uint64_t v19 = v0;
      unint64_t v16 = (v27 - 1) & v27;
      unint64_t v21 = __clz(__rbit64(v27)) + (v25 << 6);
      uint64_t v44 = v25;
      continue;
    }
    break;
  }
  while (!__OFADD__(v28, 1))
  {
    if (v28 + 1 >= v40)
    {
      uint64_t v44 = v38;
      goto LABEL_24;
    }
    sub_2534D8EB0();
    if (v27) {
      goto LABEL_10;
    }
  }
LABEL_45:
  __break(1u);
}

void sub_2534BD818()
{
  sub_2534B3258();
  uint64_t v7 = sub_2534D8D00();
  type metadata accessor for TranscriptProtoAstflatValueEnum(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534AF2BC(v9, v52[0]);
  uint64_t v10 = sub_253462A5C(&qword_269CDCBA8);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534B34A4();
  uint64_t v56 = sub_253462A5C(&qword_269CDCBB0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_25346CBDC();
  uint64_t v54 = type metadata accessor for TranscriptProtoASTFlatValue(v13);
  sub_253465998();
  uint64_t v61 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_253462A5C(&qword_269CDCBB8);
  uint64_t v19 = sub_25346CB4C(v18);
  MEMORY[0x270FA5388](v19);
  sub_2534D9C38();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  sub_2534D9EA8(v21, v22, v23, v24, v25, v26, v27, v28, v52[0]);
  if (v40)
  {
    sub_2534DA39C();
LABEL_50:
    sub_2534DA724();
    sub_253465A14();
    return;
  }
  sub_2534D8F30();
  if (!v40)
  {
LABEL_49:
    int v59 = 0;
    goto LABEL_50;
  }
  sub_2534D8EBC();
  uint64_t v29 = &qword_269CDCBC0;
  while (1)
  {
    if (v0)
    {
      sub_2534D9820();
LABEL_7:
      sub_2534D97F4();
      sub_2534D898C();
      *uint64_t v3 = (uint64_t)v2;
      v3[1] = v1;
      sub_2534D9344((uint64_t)v3);
      uint64_t v2 = v58;
      goto LABEL_30;
    }
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    sub_2534DA700();
    uint64_t v2 = v58;
    if (v31 != v32)
    {
      if (*(void *)(v53 + 8 * v30)) {
        goto LABEL_12;
      }
      sub_2534DA8F0(v30);
      if (v31 != v32)
      {
        if (*(void *)(v53 + 8 * v33)) {
          goto LABEL_16;
        }
        sub_2534DA8B4();
        if (v31 != v32) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v36 = sub_253462A5C(v29);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v3, 1, 1, v36);
    uint64_t v0 = 0;
LABEL_30:
    uint64_t v37 = sub_2534DA178();
    sub_2534D8A74(v37, v38, &qword_269CDCBB8);
    uint64_t v39 = sub_253462A5C(v29);
    sub_2534D8B48((uint64_t)v2, 1, v39);
    if (v40) {
      int v41 = 1;
    }
    else {
      int v41 = 0;
    }
    int v59 = v41;
    if (v40) {
      goto LABEL_50;
    }
    sub_2534D9748();
    uint64_t v42 = v60;
    sub_2534D8938();
    sub_25396E0AC();
    char v44 = v43;
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_48;
    }
    sub_2534DA214();
    sub_2534D898C();
    uint64_t v45 = v57;
    uint64_t v46 = v57 + *(int *)(v56 + 48);
    uint64_t v47 = sub_2534D973C();
    sub_2534D88A0(v47, v48, &qword_269CDCBA8);
    sub_2534DA834();
    sub_2534D8B48(v45, 1, v6);
    if (v40)
    {
      sub_2534D8B48(v46, 1, v6);
      if (!v40) {
        goto LABEL_46;
      }
      uint64_t v6 = v4;
      sub_253472458(v45, v42);
    }
    else
    {
      sub_2534DA5CC();
      sub_2534D8B48(v46, 1, v6);
      if (v49)
      {
        sub_2534D89E0();
LABEL_46:
        sub_253472458(v45, &qword_269CDCBB0);
LABEL_47:
        sub_2534D89E0();
LABEL_48:
        sub_2534D89E0();
        goto LABEL_49;
      }
      sub_2534D9DA0();
      static TranscriptProtoAstflatValueEnum.== infix(_:_:)();
      char v51 = v50;
      sub_2534D89E0();
      sub_2534DA610();
      sub_253472458(v57, v42);
      if ((v51 & 1) == 0) {
        goto LABEL_47;
      }
    }
    sub_2534D98B4();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    uint64_t v1 = sub_2534D95DC();
    uint64_t v2 = type metadata accessor for TranscriptProtoASTFlatValue;
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v3 = v29;
    uint64_t v29 = v0;
    uint64_t v0 = v5;
    if ((v1 & 1) == 0) {
      goto LABEL_50;
    }
  }
  if (*(void *)(v53 + 8 * v34))
  {
    uint64_t v30 = v34;
    goto LABEL_12;
  }
  sub_2534DA88C();
  if (v31 == v32) {
    goto LABEL_29;
  }
  if (*(void *)(v53 + 8 * v33))
  {
LABEL_16:
    uint64_t v30 = v33;
LABEL_12:
    sub_2534D9CA8(v30);
    goto LABEL_7;
  }
  while (!__OFADD__(v33, 1))
  {
    sub_2534DA700();
    if (v31 == v32)
    {
      uint64_t v55 = v52[1];
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v35) {
      goto LABEL_12;
    }
  }
LABEL_52:
  __break(1u);
}

void sub_2534BDD40()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_253B08E50();
  sub_253465998();
  uint64_t v72 = v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v68 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v11);
  sub_2534D9ED0();
  uint64_t v12 = sub_253462A5C(&qword_269CDCC28);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v14);
  sub_2534DA408();
  if (v15 || (sub_2534D8F30(), !v15))
  {
LABEL_37:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  uint64_t v67 = v0;
  uint64_t v69 = v4;
  uint64_t v70 = 0;
  uint64_t v64 = v6;
  uint64_t v18 = *(void *)(v6 + 64);
  uint64_t v17 = v6 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *(unsigned char *)(v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  uint64_t v21 = v20 & v16;
  uint64_t v71 = v72 + 16;
  uint64_t v65 = v72 + 32;
  uint64_t v66 = (void (**)(uint64_t, uint64_t))(v72 + 8);
  v62[1] = v17;
  unint64_t v63 = (unint64_t)(v19 + 63) >> 6;
  v62[0] = v63 - 1;
  while (1)
  {
    if (v21)
    {
      sub_2534DA484();
      uint64_t v23 = v22 | (v70 << 6);
      uint64_t v24 = v67;
LABEL_9:
      int v25 = *(_DWORD *)(*(void *)(v64 + 48) + 4 * v23);
      sub_253462A5C(&qword_269CDCC30);
      sub_2534D8E20();
      v28(v26, v27);
      *uint64_t v1 = v25;
      uint64_t v29 = sub_2534DA4C8();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v29, v30, v31, v32);
      goto LABEL_31;
    }
    sub_2534DA32C();
    uint64_t v24 = v67;
    if (v33)
    {
      __break(1u);
      goto LABEL_39;
    }
    sub_2534D9700();
    if (v34 != v33)
    {
      sub_2534DA748();
      if (v36) {
        goto LABEL_14;
      }
      sub_2534D94EC(v35);
      if (v34 != v33)
      {
        sub_2534DA73C();
        if (v38) {
          goto LABEL_14;
        }
        sub_2534D94C4();
        if (v34 != v33)
        {
          sub_2534DA730();
          if (v39) {
            goto LABEL_14;
          }
          sub_2534D949C();
          if (v34 != v33) {
            break;
          }
        }
      }
    }
LABEL_30:
    uint64_t v43 = sub_253462A5C(&qword_269CDCC30);
    sub_2534D93D0(v43);
    uint64_t v21 = 0;
LABEL_31:
    uint64_t v44 = sub_2534D9840();
    sub_2534D8A74(v44, v45, &qword_269CDCC28);
    uint64_t v46 = sub_253462A5C(&qword_269CDCC30);
    sub_2534D8B48((uint64_t)v2, 1, v46);
    if (v15) {
      goto LABEL_37;
    }
    unsigned int v47 = *v2;
    sub_2534D8E14();
    v50(v48, v49);
    sub_25396E10C(v47);
    if ((v51 & 1) == 0)
    {
      (*v66)(v24, v7);
      goto LABEL_37;
    }
    uint64_t v52 = v72;
    sub_2534D8E20();
    v55(v53, v54);
    sub_2534D8A30((uint64_t)&qword_269CDCBD8);
    sub_2534D954C();
    char v56 = sub_253B096B0();
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    sub_2534D91A0();
    v57(v58, v59);
    sub_2534D91A0();
    v57(v60, v61);
    if ((v56 & 1) == 0) {
      goto LABEL_37;
    }
  }
  sub_2534DA5EC();
  if (v41)
  {
LABEL_14:
    sub_2534DA1BC();
    uint64_t v70 = v37;
    goto LABEL_9;
  }
  while (!__OFADD__(v40, 1))
  {
    sub_2534D9700();
    if (v34 == v33)
    {
      sub_2534DA5F8();
      goto LABEL_30;
    }
    sub_2534D8EB0();
    if (v42) {
      goto LABEL_14;
    }
  }
LABEL_39:
  __break(1u);
}

void sub_2534BE0DC()
{
  sub_2534B3258();
  uint64_t v2 = sub_2534D9518();
  uint64_t v3 = type metadata accessor for TranscriptProtoParameterValue(v2);
  uint64_t v4 = sub_25346CB34(v3);
  MEMORY[0x270FA5388](v4);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v5);
  sub_2534D90F4();
  uint64_t v6 = sub_253462A5C(&qword_269CDCC98);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B340C();
  MEMORY[0x270FA5388](v8);
  sub_2534D93BC();
  if (v9 || (sub_2534D9680(), !v9))
  {
LABEL_36:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8BC4();
  while (1)
  {
    if (v0)
    {
      sub_2534D8F40();
LABEL_7:
      sub_2534D8DE4();
      sub_2534D98E0();
      sub_2534D898C();
      uint64_t v10 = sub_2534D9104();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, v11, v12, v13);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA0D0();
    if (v14)
    {
      __break(1u);
      goto LABEL_38;
    }
    sub_2534D96B4();
    if (v15 != v14)
    {
      sub_2534DA974();
      if (v17) {
        goto LABEL_12;
      }
      sub_2534D94D8(v16);
      if (v15 != v14)
      {
        sub_2534DA968();
        if (v19) {
          goto LABEL_16;
        }
        sub_2534D94B0();
        if (v15 != v14) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v24 = sub_253462A5C(&qword_269CDCCA0);
    sub_2534D912C(v24);
LABEL_30:
    uint64_t v25 = sub_2534D954C();
    sub_2534D8A74(v25, v26, &qword_269CDCC98);
    uint64_t v27 = sub_253462A5C(&qword_269CDCCA0);
    sub_2534D8B48(v1, 1, v27);
    if (v9) {
      goto LABEL_36;
    }
    sub_2534D97E4();
    sub_2534D8938();
    sub_2534DA4DC();
    sub_2534D9940();
    if ((&qword_269CDCCA0 & 1) == 0)
    {
      sub_2534D89E0();
      goto LABEL_36;
    }
    sub_2534D9378();
    sub_2534D898C();
    sub_2534DA138();
    static TranscriptProtoParameterValue.== infix(_:_:)();
    char v29 = v28;
    sub_2534D89E0();
    sub_2534DA810();
    if ((v29 & 1) == 0) {
      goto LABEL_36;
    }
  }
  sub_2534DA95C();
  if (v21)
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534D9488();
  if (v15 == v14) {
    goto LABEL_29;
  }
  sub_2534DA478();
  if (v22)
  {
LABEL_16:
    uint64_t v16 = v18;
LABEL_12:
    sub_2534D8FD8(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v18, 1))
  {
    sub_2534D96B4();
    if (v15 == v14)
    {
      sub_2534DA880();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v23) {
      goto LABEL_12;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_2534BE388()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  sub_253B08E50();
  sub_253465998();
  v38[11] = v4;
  MEMORY[0x270FA5388](v5);
  v38[8] = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v7);
  sub_2534D9E98();
  uint64_t v8 = sub_253462A5C(&qword_269CDCC80);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v10);
  sub_2534D97D0();
  if (v11 || (sub_2534D8F30(), !v11))
  {
LABEL_35:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8C08();
  v38[6] = v3;
  while (1)
  {
    if (v0)
    {
      sub_2534D90D4();
LABEL_7:
      sub_2534D9010();
      sub_2534D8E20();
      v12();
      uint64_t v13 = sub_2534D95A0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, v14, v15, v16);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA32C();
    uint64_t v1 = (void (**)(void))v38[7];
    if (v17)
    {
      __break(1u);
      goto LABEL_37;
    }
    sub_2534D9700();
    if (v18 != v17)
    {
      sub_2534DA748();
      if (v20) {
        goto LABEL_12;
      }
      sub_2534D94EC(v19);
      if (v18 != v17)
      {
        sub_2534DA73C();
        if (v22) {
          goto LABEL_16;
        }
        sub_2534D94C4();
        if (v18 != v17) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v27 = sub_253462A5C(&qword_269CDCC88);
    sub_2534D96D8(v27);
LABEL_30:
    uint64_t v28 = sub_2534D9840();
    sub_2534D8A74(v28, v29, &qword_269CDCC80);
    uint64_t v30 = sub_253462A5C(&qword_269CDCC88);
    sub_2534D8B48((uint64_t)v1, 1, v30);
    if (v11) {
      goto LABEL_35;
    }
    uint64_t v31 = *v1;
    sub_2534D8E14();
    v32();
    sub_2534D9DBC();
    sub_2534D98F0();
    if ((v3 & 1) == 0)
    {
      uint64_t v36 = sub_2534D93F0();
      v37(v36);
      goto LABEL_35;
    }
    uint64_t v33 = sub_2534D8DB0();
    v34(v33);
    sub_2534D8A30((uint64_t)&qword_269CDCBD8);
    sub_2534D9600();
    uint64_t v35 = sub_2534D9040();
    ((void (*)(uint64_t))v31)(v35);
    sub_25347FB18();
    v31();
  }
  sub_2534DA730();
  if (v24)
  {
    uint64_t v19 = v23;
    goto LABEL_12;
  }
  sub_2534D949C();
  if (v18 == v17) {
    goto LABEL_29;
  }
  sub_2534DA5EC();
  if (v25)
  {
LABEL_16:
    uint64_t v19 = v21;
LABEL_12:
    sub_2534D9328(v19);
    goto LABEL_7;
  }
  while (!__OFADD__(v21, 1))
  {
    sub_2534D9700();
    if (v18 == v17)
    {
      sub_2534DA5F8();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v26) {
      goto LABEL_12;
    }
  }
LABEL_37:
  __break(1u);
}

void sub_2534BE65C()
{
  sub_2534B3258();
  uint64_t v7 = v6;
  uint64_t v8 = sub_2534D976C();
  uint64_t v9 = type metadata accessor for TranscriptProtoUnresolvedParameterValue(v8);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_25348360C();
  uint64_t v11 = sub_253B08E50();
  sub_253465998();
  uint64_t v13 = v12;
  MEMORY[0x270FA5388](v14);
  sub_2534966B0();
  uint64_t v82 = sub_253462A5C(&qword_269CDCC58);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534D9280(v16, v74[0]);
  uint64_t v91 = type metadata accessor for TranscriptProtoShimParameterResolutionEnum(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v17);
  sub_2534659D8();
  uint64_t v80 = v18;
  sub_2534B324C();
  MEMORY[0x270FA5388](v19);
  uint64_t v79 = (char *)v74 - v20;
  sub_2534B324C();
  MEMORY[0x270FA5388](v21);
  uint64_t v87 = (char *)v74 - v22;
  uint64_t v23 = sub_253462A5C(&qword_269CDCC60);
  uint64_t v24 = sub_25346CB4C(v23);
  MEMORY[0x270FA5388](v24);
  sub_253483628(v25, v74[0]);
  uint64_t v89 = sub_253462A5C(&qword_269CDCC68);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v26);
  uint64_t v27 = sub_2534AF2D8();
  uint64_t v84 = type metadata accessor for TranscriptProtoShimParameterResolution(v27);
  sub_253465998();
  uint64_t v93 = v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v94 = (char *)v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v31);
  sub_2534D90F4();
  uint64_t v32 = sub_253462A5C(&qword_269CDCC70);
  uint64_t v33 = sub_25346CB4C(v32);
  MEMORY[0x270FA5388](v33);
  sub_2534D9C1C();
  MEMORY[0x270FA5388](v34);
  sub_2534D97C0();
  if (v0 == v7 || *(void *)(v0 + 16) != *(void *)(v7 + 16))
  {
LABEL_54:
    sub_253465A14();
    return;
  }
  v74[2] = v3;
  uint64_t v76 = v11;
  v74[3] = v2;
  uint64_t v83 = v7;
  uint64_t v86 = 0;
  uint64_t v81 = v0;
  uint64_t v35 = *(void *)(v0 + 64);
  uint64_t v77 = v0 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  uint64_t v38 = v37 & v35;
  int64_t v39 = (unint64_t)(v36 + 63) >> 6;
  v74[1] = v13 + 32;
  uint64_t v75 = (void (**)(void))(v13 + 8);
  v74[0] = v39 - 1;
  while (1)
  {
    if (v38)
    {
      sub_2534D9474();
      uint64_t v92 = v40;
LABEL_8:
      sub_2534DA6D4();
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      uint64_t v44 = sub_253462A5C(&qword_269CDCC78);
      sub_2534D898C();
      *uint64_t v5 = v43;
      v5[1] = v42;
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v5, 0, 1, v44);
      swift_bridgeObjectRetain();
      goto LABEL_26;
    }
    int64_t v45 = v86 + 1;
    if (__OFADD__(v86, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v45 < v39)
    {
      if (*(void *)(v77 + 8 * v45)) {
        goto LABEL_12;
      }
      uint64_t v48 = v86 + 2;
      ++v86;
      if (v45 + 1 < v39)
      {
        if (*(void *)(v77 + 8 * v48)) {
          goto LABEL_12;
        }
        uint64_t v86 = v45 + 1;
        if (v45 + 2 < v39)
        {
          if (*(void *)(v77 + 8 * (v45 + 2))) {
            goto LABEL_12;
          }
          int64_t v49 = v45 + 3;
          uint64_t v86 = v45 + 2;
          if (v45 + 3 < v39) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v51 = sub_253462A5C(&qword_269CDCC78);
    sub_2534DA540(v51);
    uint64_t v92 = 0;
LABEL_26:
    uint64_t v52 = sub_2534D96CC();
    sub_2534D8A74(v52, v53, &qword_269CDCC70);
    uint64_t v54 = sub_253462A5C(&qword_269CDCC78);
    sub_2534D8B48(v4, 1, v54);
    if (v55) {
      int v56 = 1;
    }
    else {
      int v56 = 0;
    }
    if (v55) {
      goto LABEL_54;
    }
    int v90 = v56;
    sub_2534D8938();
    sub_2534DA034();
    sub_25396E0AC();
    char v58 = v57;
    swift_bridgeObjectRelease();
    if ((v58 & 1) == 0) {
      goto LABEL_53;
    }
    sub_2534D898C();
    uint64_t v59 = v1 + *(int *)(v89 + 48);
    uint64_t v60 = sub_2534D9AA0();
    sub_2534D88A0(v60, v61, &qword_269CDCC60);
    uint64_t v62 = sub_2534DA828();
    sub_2534D88A0(v62, v63, &qword_269CDCC60);
    uint64_t v64 = v91;
    sub_2534D8B48(v1, 1, v91);
    if (v55)
    {
      sub_2534D8B48(v59, 1, v64);
      if (!v55)
      {
        uint64_t v73 = &qword_269CDCC68;
        goto LABEL_52;
      }
    }
    else
    {
      sub_2534D88A0(v1, v88, &qword_269CDCC60);
      sub_2534D8B48(v59, 1, v64);
      if (v65)
      {
        uint64_t v73 = &qword_269CDCC68;
        goto LABEL_51;
      }
      sub_2534D8938();
      uint64_t v66 = v85;
      sub_2534D898C();
      sub_2534D898C();
      sub_2534D954C();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_2534D898C();
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          sub_2534D89E0();
          goto LABEL_49;
        }
        sub_2534D8938();
        sub_2534DA034();
        static TranscriptProtoUnresolvedParameterValue.== infix(_:_:)();
        char v68 = v67;
        sub_2534D89E0();
        sub_2534D89E0();
        sub_2534D89E0();
        if ((v68 & 1) == 0) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v69 = v79;
        sub_2534D898C();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          ((void (*)(char *, uint64_t))*v75)(v69, v76);
LABEL_49:
          sub_253472458(v66, &qword_269CDCC58);
LABEL_50:
          sub_2534D89E0();
          uint64_t v73 = &qword_269CDCC60;
LABEL_51:
          sub_2534D89E0();
LABEL_52:
          sub_253472458(v1, v73);
          sub_2534D89E0();
LABEL_53:
          sub_2534D89E0();
          goto LABEL_54;
        }
        sub_2534DA678();
        sub_2534D8E14();
        v70();
        int v78 = sub_253B08E40();
        uint64_t v71 = *v75;
        sub_2534D9724();
        sub_2534D91AC();
        v71();
        sub_2534DA034();
        sub_2534D91AC();
        v71();
        sub_2534D89E0();
        if ((v78 & 1) == 0) {
          goto LABEL_50;
        }
      }
      sub_2534D89E0();
      sub_2534D89E0();
    }
    sub_253472458(v1, &qword_269CDCC60);
    sub_253B07160();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    sub_2534ACF74();
    char v72 = sub_253B096B0();
    sub_2534D89E0();
    sub_2534DA828();
    sub_2534D89E0();
    uint64_t v38 = v92;
    if ((v72 & 1) == 0) {
      goto LABEL_54;
    }
  }
  if (*(void *)(v77 + 8 * v49))
  {
LABEL_12:
    sub_2534D9174();
    uint64_t v92 = v46;
    uint64_t v86 = v47;
    goto LABEL_8;
  }
  while (!__OFADD__(v49, 1))
  {
    if (v49 + 1 >= v39)
    {
      uint64_t v86 = v74[0];
      goto LABEL_25;
    }
    sub_2534D8EB0();
    if (v50) {
      goto LABEL_12;
    }
  }
LABEL_56:
  __break(1u);
}

void sub_2534BEFE4()
{
  sub_2534B3258();
  uint64_t v7 = sub_2534D8D00();
  type metadata accessor for TranscriptProtoShimParameterEnum(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534AF2BC(v9, v52[0]);
  uint64_t v10 = sub_253462A5C(&qword_269CDCC38);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534B34A4();
  uint64_t v56 = sub_253462A5C(&qword_269CDCC40);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_25346CBDC();
  uint64_t v54 = type metadata accessor for TranscriptProtoShimParameter(v13);
  sub_253465998();
  uint64_t v61 = v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_253462A5C(&qword_269CDCC48);
  uint64_t v19 = sub_25346CB4C(v18);
  MEMORY[0x270FA5388](v19);
  sub_2534D9C38();
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  sub_2534D9EA8(v21, v22, v23, v24, v25, v26, v27, v28, v52[0]);
  if (v40)
  {
    sub_2534DA39C();
LABEL_50:
    sub_2534DA724();
    sub_253465A14();
    return;
  }
  sub_2534D8F30();
  if (!v40)
  {
LABEL_49:
    int v59 = 0;
    goto LABEL_50;
  }
  sub_2534D8EBC();
  uint64_t v29 = &qword_269CDCC50;
  while (1)
  {
    if (v0)
    {
      sub_2534D9820();
LABEL_7:
      sub_2534D97F4();
      sub_2534D898C();
      *uint64_t v3 = (uint64_t)v2;
      v3[1] = v1;
      sub_2534D9344((uint64_t)v3);
      uint64_t v2 = v58;
      goto LABEL_30;
    }
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    sub_2534DA700();
    uint64_t v2 = v58;
    if (v31 != v32)
    {
      if (*(void *)(v53 + 8 * v30)) {
        goto LABEL_12;
      }
      sub_2534DA8F0(v30);
      if (v31 != v32)
      {
        if (*(void *)(v53 + 8 * v33)) {
          goto LABEL_16;
        }
        sub_2534DA8B4();
        if (v31 != v32) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v36 = sub_253462A5C(v29);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v3, 1, 1, v36);
    uint64_t v0 = 0;
LABEL_30:
    uint64_t v37 = sub_2534DA178();
    sub_2534D8A74(v37, v38, &qword_269CDCC48);
    uint64_t v39 = sub_253462A5C(v29);
    sub_2534D8B48((uint64_t)v2, 1, v39);
    if (v40) {
      int v41 = 1;
    }
    else {
      int v41 = 0;
    }
    int v59 = v41;
    if (v40) {
      goto LABEL_50;
    }
    sub_2534D9748();
    uint64_t v42 = v60;
    sub_2534D8938();
    sub_25396E0AC();
    char v44 = v43;
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_48;
    }
    sub_2534DA214();
    sub_2534D898C();
    uint64_t v45 = v57;
    uint64_t v46 = v57 + *(int *)(v56 + 48);
    uint64_t v47 = sub_2534D973C();
    sub_2534D88A0(v47, v48, &qword_269CDCC38);
    sub_2534DA834();
    sub_2534D8B48(v45, 1, v6);
    if (v40)
    {
      sub_2534D8B48(v46, 1, v6);
      if (!v40) {
        goto LABEL_46;
      }
      uint64_t v6 = v4;
      sub_253472458(v45, v42);
    }
    else
    {
      sub_2534DA5CC();
      sub_2534D8B48(v46, 1, v6);
      if (v49)
      {
        sub_2534D89E0();
LABEL_46:
        sub_253472458(v45, &qword_269CDCC40);
LABEL_47:
        sub_2534D89E0();
LABEL_48:
        sub_2534D89E0();
        goto LABEL_49;
      }
      sub_2534D9DA0();
      static TranscriptProtoShimParameterEnum.== infix(_:_:)();
      char v51 = v50;
      sub_2534D89E0();
      sub_2534DA610();
      sub_253472458(v57, v42);
      if ((v51 & 1) == 0) {
        goto LABEL_47;
      }
    }
    sub_2534D98B4();
    sub_2534D8A30((uint64_t)&qword_269CDCB90);
    uint64_t v1 = sub_2534D95DC();
    uint64_t v2 = type metadata accessor for TranscriptProtoShimParameter;
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v3 = v29;
    uint64_t v29 = v0;
    uint64_t v0 = v5;
    if ((v1 & 1) == 0) {
      goto LABEL_50;
    }
  }
  if (*(void *)(v53 + 8 * v34))
  {
    uint64_t v30 = v34;
    goto LABEL_12;
  }
  sub_2534DA88C();
  if (v31 == v32) {
    goto LABEL_29;
  }
  if (*(void *)(v53 + 8 * v33))
  {
LABEL_16:
    uint64_t v30 = v33;
LABEL_12:
    sub_2534D9CA8(v30);
    goto LABEL_7;
  }
  while (!__OFADD__(v33, 1))
  {
    sub_2534DA700();
    if (v31 == v32)
    {
      uint64_t v55 = v52[1];
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v35) {
      goto LABEL_12;
    }
  }
LABEL_52:
  __break(1u);
}

void sub_2534BF50C()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  sub_253B09120();
  sub_253465998();
  v38[11] = v4;
  MEMORY[0x270FA5388](v5);
  v38[8] = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v7);
  sub_2534D9E98();
  uint64_t v8 = sub_253462A5C(&qword_269CDCB58);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v10);
  sub_2534D97D0();
  if (v11 || (sub_2534D8F30(), !v11))
  {
LABEL_35:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8C08();
  v38[6] = v3;
  while (1)
  {
    if (v0)
    {
      sub_2534D90D4();
LABEL_7:
      sub_2534D9010();
      sub_2534D8E20();
      v12();
      uint64_t v13 = sub_2534D95A0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, v14, v15, v16);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA32C();
    uint64_t v1 = (void (**)(void))v38[7];
    if (v17)
    {
      __break(1u);
      goto LABEL_37;
    }
    sub_2534D9700();
    if (v18 != v17)
    {
      sub_2534DA748();
      if (v20) {
        goto LABEL_12;
      }
      sub_2534D94EC(v19);
      if (v18 != v17)
      {
        sub_2534DA73C();
        if (v22) {
          goto LABEL_16;
        }
        sub_2534D94C4();
        if (v18 != v17) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v27 = sub_253462A5C(&qword_269CDCB60);
    sub_2534D96D8(v27);
LABEL_30:
    uint64_t v28 = sub_2534D9840();
    sub_2534D8A74(v28, v29, &qword_269CDCB58);
    uint64_t v30 = sub_253462A5C(&qword_269CDCB60);
    sub_2534D8B48((uint64_t)v1, 1, v30);
    if (v11) {
      goto LABEL_35;
    }
    char v31 = *v1;
    sub_2534D8E14();
    v32();
    sub_2534D9DBC();
    sub_2534D98F0();
    if ((v3 & 1) == 0)
    {
      uint64_t v36 = sub_2534D93F0();
      v37(v36);
      goto LABEL_35;
    }
    uint64_t v33 = sub_2534D8DB0();
    v34(v33);
    sub_2534D8A30((uint64_t)&unk_269CDCAB0);
    sub_2534D9600();
    uint64_t v35 = sub_2534D9040();
    ((void (*)(uint64_t))v31)(v35);
    sub_25347FB18();
    v31();
  }
  sub_2534DA730();
  if (v24)
  {
    uint64_t v19 = v23;
    goto LABEL_12;
  }
  sub_2534D949C();
  if (v18 == v17) {
    goto LABEL_29;
  }
  sub_2534DA5EC();
  if (v25)
  {
LABEL_16:
    uint64_t v19 = v21;
LABEL_12:
    sub_2534D9328(v19);
    goto LABEL_7;
  }
  while (!__OFADD__(v21, 1))
  {
    sub_2534D9700();
    if (v18 == v17)
    {
      sub_2534DA5F8();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v26) {
      goto LABEL_12;
    }
  }
LABEL_37:
  __break(1u);
}

void sub_2534BF7E0()
{
  sub_2534B3258();
  uint64_t v2 = sub_2534D9518();
  uint64_t v3 = type metadata accessor for TranscriptProtoActionParameterValue(v2);
  uint64_t v4 = sub_25346CB34(v3);
  MEMORY[0x270FA5388](v4);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v5);
  sub_2534D90F4();
  uint64_t v6 = sub_253462A5C(&qword_269CDCCA8);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B340C();
  MEMORY[0x270FA5388](v8);
  sub_2534D93BC();
  if (v9 || (sub_2534D9680(), !v9))
  {
LABEL_36:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8BC4();
  while (1)
  {
    if (v0)
    {
      sub_2534D8F40();
LABEL_7:
      sub_2534D8DE4();
      sub_2534D98E0();
      sub_2534D898C();
      uint64_t v10 = sub_2534D9104();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, v11, v12, v13);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA0D0();
    if (v14)
    {
      __break(1u);
      goto LABEL_38;
    }
    sub_2534D96B4();
    if (v15 != v14)
    {
      sub_2534DA974();
      if (v17) {
        goto LABEL_12;
      }
      sub_2534D94D8(v16);
      if (v15 != v14)
      {
        sub_2534DA968();
        if (v19) {
          goto LABEL_16;
        }
        sub_2534D94B0();
        if (v15 != v14) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v24 = sub_253462A5C(&qword_269CDCCB0);
    sub_2534D912C(v24);
LABEL_30:
    uint64_t v25 = sub_2534D954C();
    sub_2534D8A74(v25, v26, &qword_269CDCCA8);
    uint64_t v27 = sub_253462A5C(&qword_269CDCCB0);
    sub_2534D8B48(v1, 1, v27);
    if (v9) {
      goto LABEL_36;
    }
    sub_2534D97E4();
    sub_2534D8938();
    sub_2534DA4DC();
    sub_2534D9940();
    if ((&qword_269CDCCB0 & 1) == 0)
    {
      sub_2534D89E0();
      goto LABEL_36;
    }
    sub_2534D9378();
    sub_2534D898C();
    sub_2534DA138();
    static TranscriptProtoActionParameterValue.== infix(_:_:)();
    char v29 = v28;
    sub_2534D89E0();
    sub_2534DA810();
    if ((v29 & 1) == 0) {
      goto LABEL_36;
    }
  }
  sub_2534DA95C();
  if (v21)
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534D9488();
  if (v15 == v14) {
    goto LABEL_29;
  }
  sub_2534DA478();
  if (v22)
  {
LABEL_16:
    uint64_t v16 = v18;
LABEL_12:
    sub_2534D8FD8(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v18, 1))
  {
    sub_2534D96B4();
    if (v15 == v14)
    {
      sub_2534DA880();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v23) {
      goto LABEL_12;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_2534BFA8C()
{
  sub_2534B3258();
  sub_2534D8D00();
  sub_253B09190();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  int v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v7);
  sub_2534DA430();
  uint64_t v45 = sub_253B091F0();
  sub_253465998();
  uint64_t v40 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B33C8(v10, v38);
  uint64_t v11 = sub_253462A5C(&qword_269CDCAB8);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534D8FA0();
  MEMORY[0x270FA5388](v13);
  sub_2534DA3F4();
  if (v26)
  {
    sub_2534DA39C();
LABEL_40:
    sub_2534DA724();
    sub_253465A14();
    return;
  }
  sub_2534D8F30();
  if (!v26)
  {
LABEL_39:
    int v43 = 0;
    goto LABEL_40;
  }
  sub_2534D8D10();
  while (1)
  {
    if (v2)
    {
      sub_2534D99B8();
LABEL_7:
      sub_2534B3428();
      v14();
      sub_2534DA1F4();
      sub_2534B3428();
      v15();
      sub_2534DA580();
      goto LABEL_30;
    }
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    sub_2534DA918();
    if (v17 != v18)
    {
      if (*(void *)(v39 + 8 * v16)) {
        goto LABEL_12;
      }
      sub_2534DA8DC(v16);
      if (v17 != v18)
      {
        if (*(void *)(v39 + 8 * v19)) {
          goto LABEL_16;
        }
        sub_2534DA8C8();
        if (v17 != v18) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v22 = sub_253462A5C(&qword_269CDCAC0);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 1, 1, v22);
    uint64_t v2 = 0;
LABEL_30:
    uint64_t v23 = sub_2534DA5A0();
    sub_2534D8A74(v23, v24, &qword_269CDCAB8);
    uint64_t v25 = sub_253462A5C(&qword_269CDCAC0);
    sub_2534D8B48(v1, 1, v25);
    if (v26) {
      int v27 = 1;
    }
    else {
      int v27 = 0;
    }
    int v43 = v27;
    if (v26) {
      goto LABEL_40;
    }
    uint64_t v44 = v2;
    sub_2534D8E14();
    v28();
    sub_2534D8E14();
    v29();
    sub_25396E154();
    char v31 = v30;
    sub_2534659CC();
    v32();
    if ((v31 & 1) == 0)
    {
      uint64_t v36 = sub_2534DA0EC();
      v37(v36);
      goto LABEL_39;
    }
    sub_2534B3428();
    v33();
    sub_2534D8A30((uint64_t)&unk_269CDCAC8);
    char v34 = sub_2534D9FF4();
    uint64_t v35 = *(void (**)(void))(v4 + 8);
    sub_25347FB18();
    v35();
    sub_25347FB18();
    v35();
    uint64_t v2 = v44;
    if ((v34 & 1) == 0) {
      goto LABEL_40;
    }
  }
  if (*(void *)(v39 + 8 * v20))
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534DA8A0();
  if (v17 == v18) {
    goto LABEL_29;
  }
  if (*(void *)(v39 + 8 * v19))
  {
LABEL_16:
    uint64_t v16 = v19;
LABEL_12:
    sub_2534D9CC4(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v19, 1))
  {
    sub_2534DA918();
    if (v17 == v18)
    {
      uint64_t v42 = v38;
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v21) {
      goto LABEL_12;
    }
  }
LABEL_42:
  __break(1u);
}

void sub_2534BFE70()
{
  sub_2534B3258();
  uint64_t v6 = sub_2534D9518();
  uint64_t v7 = type metadata accessor for Candidate(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D8E78();
  MEMORY[0x270FA5388](v9);
  sub_2534D90F4();
  uint64_t v10 = sub_253462A5C(&qword_269CDCA88);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v12);
  sub_2534D9ED0();
  if (v0 == v1) {
    goto LABEL_69;
  }
  sub_2534D9680();
  if (!v52) {
    goto LABEL_69;
  }
  uint64_t v66 = 0;
  uint64_t v65 = v0;
  sub_2534D8E34();
  sub_2534DA27C();
  uint64_t v63 = v0 + 64;
  uint64_t v64 = v14;
  uint64_t v62 = v14 - 1;
  uint64_t v67 = v2;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = v4;
      uint64_t v16 = v3;
      uint64_t v17 = v7;
      sub_2534D9474();
      uint64_t v68 = v18;
      uint64_t v20 = v19 | (v66 << 6);
      uint64_t v21 = v65;
LABEL_7:
      uint64_t v22 = *(void *)(v21 + 48) + 32 * v20;
      uint64_t v23 = *(void *)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      uint64_t v25 = *(void *)(v22 + 16);
      char v26 = *(unsigned char *)(v22 + 24);
      sub_253462A5C(&qword_269CDCA90);
      sub_2534D898C();
      *(void *)uint64_t v5 = v23;
      *(void *)(v5 + 8) = v24;
      *(void *)(v5 + 16) = v25;
      *(unsigned char *)(v5 + 24) = v26;
      uint64_t v27 = sub_2534DA4C8();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v27, v28, v29, v30);
      swift_bridgeObjectRetain();
      uint64_t v7 = v17;
      uint64_t v3 = v16;
      uint64_t v4 = v15;
      uint64_t v2 = v67;
      goto LABEL_25;
    }
    uint64_t v31 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
      JUMPOUT(0x2534C04C0);
    }
    if (v31 < v64)
    {
      if (*(void *)(v63 + 8 * v31)) {
        goto LABEL_11;
      }
      uint64_t v35 = v66 + 2;
      ++v66;
      if (v31 + 1 < v64)
      {
        if (*(void *)(v63 + 8 * v35)) {
          goto LABEL_11;
        }
        uint64_t v66 = v31 + 1;
        if (v31 + 2 < v64)
        {
          if (*(void *)(v63 + 8 * (v31 + 2))) {
            goto LABEL_11;
          }
          uint64_t v36 = v31 + 3;
          uint64_t v66 = v31 + 2;
          if (v31 + 3 < v64)
          {
            if (*(void *)(v63 + 8 * v36))
            {
LABEL_11:
              uint64_t v15 = v4;
              uint64_t v16 = v3;
              uint64_t v17 = v7;
              sub_2534D9174();
              uint64_t v68 = v32;
              uint64_t v20 = v34 + (v33 << 6);
              uint64_t v66 = v33;
              goto LABEL_7;
            }
            while (1)
            {
              if (__OFADD__(v36, 1)) {
                goto LABEL_71;
              }
              if (v36 + 1 >= v64) {
                break;
              }
              sub_2534D8EB0();
              if (v37) {
                goto LABEL_11;
              }
            }
            uint64_t v66 = v62;
          }
        }
      }
    }
    uint64_t v38 = sub_253462A5C(&qword_269CDCA90);
    sub_2534D93D0(v38);
    uint64_t v68 = 0;
LABEL_25:
    sub_2534D8A74(v5, v2, &qword_269CDCA88);
    uint64_t v39 = sub_253462A5C(&qword_269CDCA90);
    sub_2534D8B48(v2, 1, v39);
    if (v52) {
      goto LABEL_69;
    }
    uint64_t v40 = *(void *)v2;
    uint64_t v41 = *(void *)(v2 + 8);
    uint64_t v42 = *(void *)(v2 + 16);
    char v43 = *(unsigned char *)(v2 + 24);
    sub_2534D8938();
    sub_25396E204(v40, v41, v42, v43);
    LOBYTE(v42) = v44;
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      goto LABEL_68;
    }
    sub_2534D898C();
    if ((sub_253B090F0() & 1) == 0) {
      break;
    }
    unint64_t v45 = 0xEB00000000797265;
    switch(*(unsigned char *)(v4 + *(int *)(v7 + 20)))
    {
      case 1:
        sub_2534DA3A8();
        unint64_t v45 = 0xEE007972616C7562;
        break;
      case 2:
        unint64_t v45 = 0x8000000253B0B700;
        break;
      case 3:
        sub_2534DA380();
        uint64_t v46 = 5391173;
        goto LABEL_34;
      case 4:
        sub_2534DA34C();
        unint64_t v45 = 0xEF79727473696765;
        break;
      case 5:
        sub_2534DA338();
        uint64_t v46 = 6649196;
LABEL_34:
        unint64_t v45 = v46 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      case 6:
        unint64_t v45 = 0xEA00000000007470;
        sub_2534DA318();
        break;
      case 7:
        sub_2534DA2B0();
        unint64_t v45 = 0xEA00000000006863;
        break;
      default:
        break;
    }
    sub_2534DA29C();
    unint64_t v49 = 0xEB00000000797265;
    switch(v50)
    {
      case 1:
        sub_2534DA288();
        unint64_t v49 = 0xEE007972616C7562;
        break;
      case 2:
        unint64_t v49 = 0x8000000253B0B700;
        unint64_t v48 = 0xD000000000000014;
        break;
      case 3:
        sub_2534DA268();
        uint64_t v51 = 5391173;
        goto LABEL_43;
      case 4:
        sub_2534DA254();
        unint64_t v49 = 0xEF79727473696765;
        break;
      case 5:
        sub_2534DA240();
        uint64_t v51 = 6649196;
LABEL_43:
        unint64_t v49 = v51 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      case 6:
        unint64_t v49 = 0xEA00000000007470;
        sub_2534DA1E0();
        break;
      case 7:
        sub_2534DA948();
        unint64_t v49 = 0xEA00000000006863;
        break;
      default:
        break;
    }
    BOOL v52 = v47 == v48 && v45 == v49;
    if (v52)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v53 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v53 & 1) == 0) {
        break;
      }
    }
    uint64_t v54 = *(int *)(v7 + 24);
    uint64_t v55 = *(void *)(v4 + v54);
    int v56 = *(unsigned __int8 *)(v4 + v54 + 8);
    uint64_t v57 = (uint64_t *)(v3 + v54);
    uint64_t v58 = *v57;
    char v59 = *((unsigned char *)v57 + 8);
    if (v56 == 1)
    {
      if (v55)
      {
        if (!v58) {
          char v59 = 0;
        }
        if ((v59 & 1) == 0) {
          break;
        }
      }
      else
      {
        if (v58) {
          char v59 = 0;
        }
        if ((v59 & 1) == 0) {
          break;
        }
      }
    }
    else
    {
      sub_2534DA6C8();
      if (v60) {
        break;
      }
    }
    char v61 = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
    sub_2534D89E0();
    sub_2534D89E0();
    uint64_t v2 = v67;
    uint64_t v13 = v68;
    if ((v61 & 1) == 0) {
      goto LABEL_69;
    }
  }
  sub_2534D89E0();
LABEL_68:
  sub_2534D89E0();
LABEL_69:
  sub_2534D9528();
  sub_253465A14();
}

void sub_2534C0500()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for AST.FlatValue(0);
  uint64_t v4 = sub_25346CB34(v3);
  MEMORY[0x270FA5388](v4);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v5);
  sub_2534D90F4();
  uint64_t v6 = sub_253462A5C(&qword_269CDCCD8);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B340C();
  MEMORY[0x270FA5388](v8);
  sub_2534D93BC();
  if (v9 || (sub_2534D9680(), !v9))
  {
LABEL_36:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8BC4();
  while (1)
  {
    if (v2)
    {
      sub_2534D8F40();
LABEL_7:
      sub_2534D8DE4();
      sub_2534D98E0();
      sub_2534D898C();
      uint64_t v10 = sub_2534D9104();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, v11, v12, v13);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA0D0();
    if (v14)
    {
      __break(1u);
      goto LABEL_38;
    }
    sub_2534D96B4();
    if (v15 != v14)
    {
      sub_2534DA974();
      if (v17) {
        goto LABEL_12;
      }
      sub_2534D94D8(v16);
      if (v15 != v14)
      {
        sub_2534DA968();
        if (v19) {
          goto LABEL_16;
        }
        sub_2534D94B0();
        if (v15 != v14) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v24 = sub_253462A5C(&qword_269CDCCE0);
    sub_2534D912C(v24);
LABEL_30:
    uint64_t v25 = sub_2534D954C();
    sub_2534D8A74(v25, v26, &qword_269CDCCD8);
    uint64_t v27 = sub_253462A5C(&qword_269CDCCE0);
    sub_2534D8B48(v0, 1, v27);
    if (v9) {
      goto LABEL_36;
    }
    sub_2534D97E4();
    sub_2534D8938();
    sub_2534DA4DC();
    sub_2534D9940();
    if ((&qword_269CDCCE0 & 1) == 0)
    {
      sub_2534D89E0();
      goto LABEL_36;
    }
    sub_2534D9378();
    sub_2534D898C();
    uint64_t v28 = sub_2534DA138();
    char v29 = static AST.FlatValue.== infix(_:_:)(v28);
    sub_2534D89E0();
    sub_2534DA810();
    if ((v29 & 1) == 0) {
      goto LABEL_36;
    }
  }
  sub_2534DA95C();
  if (v21)
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534D9488();
  if (v15 == v14) {
    goto LABEL_29;
  }
  sub_2534DA478();
  if (v22)
  {
LABEL_16:
    uint64_t v16 = v18;
LABEL_12:
    sub_2534D8FD8(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v18, 1))
  {
    sub_2534D96B4();
    if (v15 == v14)
    {
      sub_2534DA880();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v23) {
      goto LABEL_12;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_2534C07B4()
{
  sub_2534B3258();
  if (v6 == v5 || (uint64_t v7 = v5, sub_2534D9E6C(), !v8))
  {
LABEL_23:
    sub_253465A14();
    return;
  }
  sub_2534D909C();
  while (1)
  {
    if (v3)
    {
      sub_2534D9D60();
      goto LABEL_21;
    }
    uint64_t v9 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v1) {
      goto LABEL_23;
    }
    ++v2;
    if (!*(void *)(v0 + 8 * v9))
    {
      uint64_t v2 = v9 + 1;
      if (v9 + 1 >= v1) {
        goto LABEL_23;
      }
      if (!*(void *)(v0 + 8 * v2))
      {
        uint64_t v2 = v9 + 2;
        if (v9 + 2 >= v1) {
          goto LABEL_23;
        }
        if (!*(void *)(v0 + 8 * v2)) {
          break;
        }
      }
    }
LABEL_20:
    sub_2534D9D38();
LABEL_21:
    sub_2534D9CFC();
    sub_2534D9718();
    unint64_t v11 = sub_25396E0AC();
    char v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0 || *(void *)(*(void *)(v7 + 56) + 8 * v11) != v4) {
      goto LABEL_23;
    }
  }
  uint64_t v10 = v9 + 3;
  if (v10 >= v1) {
    goto LABEL_23;
  }
  if (*(void *)(v0 + 8 * v10))
  {
    uint64_t v2 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v2 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v2 >= v1) {
      goto LABEL_23;
    }
    ++v10;
    if (*(void *)(v0 + 8 * v2)) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
}

void sub_2534C08CC()
{
  sub_2534B3258();
  uint64_t v6 = sub_2534D9518();
  uint64_t v62 = type metadata accessor for ClientAction.UnresolvedParameterValue(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2534D8CAC();
  uint64_t v63 = sub_253B09120();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_2534AF2BC(v11, v53);
  uint64_t v67 = sub_253462A5C(&qword_269CDCAE8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534D9C00();
  uint64_t v66 = type metadata accessor for ClientAction.ShimParameterResolution(v13);
  sub_253465998();
  uint64_t v69 = v14;
  MEMORY[0x270FA5388](v15);
  sub_2534D8CC8();
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v53 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v70 = (char *)&v53 - v20;
  sub_2534B324C();
  MEMORY[0x270FA5388](v21);
  uint64_t v71 = (char *)&v53 - v22;
  uint64_t v23 = sub_253462A5C(&qword_269CDCAF0);
  uint64_t v24 = sub_25346CB4C(v23);
  MEMORY[0x270FA5388](v24);
  sub_2534D9C1C();
  MEMORY[0x270FA5388](v25);
  sub_2534D97C0();
  if (v0 == v1 || (uint64_t v26 = *(void *)(v0 + 16), v61 = v1, v26 != *(void *)(v1 + 16)))
  {
LABEL_43:
    sub_253465A14();
    return;
  }
  uint64_t v65 = 0;
  uint64_t v64 = v0;
  sub_2534D9658();
  uint64_t v55 = v0 + 64;
  uint64_t v56 = v9 + 32;
  uint64_t v58 = (void (**)(void))(v9 + 8);
  char v59 = v19;
  uint64_t v57 = v27;
  uint64_t v54 = v27 - 1;
  uint64_t v60 = v2;
  if (!v28) {
    goto LABEL_6;
  }
LABEL_4:
  sub_2534D9474();
  uint64_t v68 = v29;
  while (2)
  {
    sub_2534DA6D4();
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = sub_253462A5C(&qword_269CDCAF8);
    sub_2534D898C();
    *uint64_t v5 = v32;
    v5[1] = v31;
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v5, 0, 1, v33);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v42 = sub_2534D96CC();
      sub_2534D8A74(v42, v43, &qword_269CDCAF0);
      uint64_t v44 = sub_253462A5C(&qword_269CDCAF8);
      sub_2534D8B48(v4, 1, v44);
      if (v45) {
        goto LABEL_43;
      }
      sub_2534D8938();
      sub_2534D9AA0();
      sub_25396E0AC();
      char v47 = v46;
      swift_bridgeObjectRelease();
      if ((v47 & 1) == 0) {
        goto LABEL_42;
      }
      sub_2534D898C();
      sub_2534D9A44();
      sub_2534D898C();
      sub_2534D898C();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_2534D898C();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_2534D8938();
          sub_2534D954C();
          if (sub_253B090F0())
          {
            sub_2534B5D58();
            if (v48)
            {
              sub_2534D89E0();
              sub_2534DA120();
              goto LABEL_33;
            }
          }
          sub_2534D89E0();
          sub_2534DA120();
LABEL_37:
          sub_2534D89E0();
LABEL_41:
          sub_2534D89E0();
LABEL_42:
          sub_2534D89E0();
          goto LABEL_43;
        }
        sub_2534D89E0();
LABEL_40:
        sub_253472458(v3, &qword_269CDCAE8);
        goto LABEL_41;
      }
      sub_2534D898C();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_2534659CC();
        v52();
        goto LABEL_40;
      }
      sub_2534D8E14();
      v49();
      sub_2534DA154();
      char v50 = sub_253B090F0();
      uint64_t v51 = *v58;
      sub_2534D9B1C();
      sub_2534D9220();
      v51();
      sub_2534D9220();
      v51();
      if ((v50 & 1) == 0) {
        goto LABEL_37;
      }
LABEL_33:
      sub_2534D89E0();
      sub_2534D89E0();
      sub_2534D89E0();
      if (v68) {
        goto LABEL_4;
      }
LABEL_6:
      if (__OFADD__(v65, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      sub_2534DA924();
      if (v35 != v36)
      {
        if (*(void *)(v55 + 8 * v34)) {
          goto LABEL_10;
        }
        uint64_t v65 = v34;
        if (v34 + 1 < v57)
        {
          if (*(void *)(v55 + 8 * (v34 + 1))) {
            goto LABEL_10;
          }
          uint64_t v65 = v34 + 1;
          if (v34 + 2 < v57)
          {
            if (*(void *)(v55 + 8 * (v34 + 2))) {
              goto LABEL_10;
            }
            uint64_t v39 = v34 + 3;
            uint64_t v65 = v34 + 2;
            if (v34 + 3 < v57) {
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v41 = sub_253462A5C(&qword_269CDCAF8);
      sub_2534DA540(v41);
      uint64_t v68 = 0;
    }
    if (*(void *)(v55 + 8 * v39))
    {
LABEL_10:
      sub_2534D9174();
      uint64_t v68 = v37;
      uint64_t v65 = v38;
      continue;
    }
    break;
  }
  while (!__OFADD__(v39, 1))
  {
    sub_2534DA924();
    if (v35 == v36)
    {
      uint64_t v65 = v54;
      goto LABEL_23;
    }
    sub_2534D8EB0();
    if (v40) {
      goto LABEL_10;
    }
  }
LABEL_45:
  __break(1u);
}

void sub_2534C0FDC()
{
  sub_2534B3258();
  uint64_t v2 = sub_2534D9518();
  uint64_t v3 = type metadata accessor for ClientAction.ShimParameter(v2);
  uint64_t v4 = sub_25346CB34(v3);
  MEMORY[0x270FA5388](v4);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v5);
  sub_2534D90F4();
  uint64_t v6 = sub_253462A5C(&qword_269CDCAD8);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534B340C();
  MEMORY[0x270FA5388](v8);
  sub_2534D93BC();
  if (v9 || (sub_2534D9680(), !v9))
  {
LABEL_36:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8BC4();
  while (1)
  {
    if (v0)
    {
      sub_2534D8F40();
LABEL_7:
      sub_2534D8DE4();
      sub_2534D98E0();
      sub_2534D898C();
      uint64_t v10 = sub_2534D9104();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, v11, v12, v13);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA0D0();
    if (v14)
    {
      __break(1u);
      goto LABEL_38;
    }
    sub_2534D96B4();
    if (v15 != v14)
    {
      sub_2534DA974();
      if (v17) {
        goto LABEL_12;
      }
      sub_2534D94D8(v16);
      if (v15 != v14)
      {
        sub_2534DA968();
        if (v19) {
          goto LABEL_16;
        }
        sub_2534D94B0();
        if (v15 != v14) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v24 = sub_253462A5C(&qword_269CDCAE0);
    sub_2534D912C(v24);
LABEL_30:
    uint64_t v25 = sub_2534D954C();
    sub_2534D8A74(v25, v26, &qword_269CDCAD8);
    uint64_t v27 = sub_253462A5C(&qword_269CDCAE0);
    sub_2534D8B48(v1, 1, v27);
    if (v9) {
      goto LABEL_36;
    }
    sub_2534D97E4();
    sub_2534D8938();
    sub_2534DA4DC();
    sub_2534D9940();
    if ((&qword_269CDCAE0 & 1) == 0)
    {
      sub_2534D89E0();
      goto LABEL_36;
    }
    sub_2534D9378();
    sub_2534D898C();
    sub_2534DA138();
    static ClientAction.ShimParameter.== infix(_:_:)();
    char v29 = v28;
    sub_2534D89E0();
    sub_2534DA810();
    if ((v29 & 1) == 0) {
      goto LABEL_36;
    }
  }
  sub_2534DA95C();
  if (v21)
  {
    uint64_t v16 = v20;
    goto LABEL_12;
  }
  sub_2534D9488();
  if (v15 == v14) {
    goto LABEL_29;
  }
  sub_2534DA478();
  if (v22)
  {
LABEL_16:
    uint64_t v16 = v18;
LABEL_12:
    sub_2534D8FD8(v16);
    goto LABEL_7;
  }
  while (!__OFADD__(v18, 1))
  {
    sub_2534D96B4();
    if (v15 == v14)
    {
      sub_2534DA880();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v23) {
      goto LABEL_12;
    }
  }
LABEL_38:
  __break(1u);
}

void sub_2534C1288()
{
  sub_2534B3258();
  sub_2534D8D00();
  sub_253B059D0();
  sub_253465998();
  v37[11] = v3;
  MEMORY[0x270FA5388](v4);
  v37[8] = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v6);
  sub_2534D9E98();
  uint64_t v7 = sub_253462A5C(&qword_269CDCCF8);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v9);
  sub_2534D97D0();
  if (v10 || (sub_2534D8F30(), !v10))
  {
LABEL_35:
    sub_2534D9528();
    sub_253465A14();
    return;
  }
  sub_2534D8C08();
  v37[6] = v0;
  while (1)
  {
    if (v1)
    {
      sub_2534D90D4();
LABEL_7:
      sub_2534D9010();
      sub_2534D8E20();
      v11();
      uint64_t v12 = sub_2534D95A0();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v12, v13, v14, v15);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    sub_2534DA32C();
    uint64_t v2 = (void (**)(void))v37[7];
    if (v16)
    {
      __break(1u);
      goto LABEL_37;
    }
    sub_2534D9700();
    if (v17 != v16)
    {
      sub_2534DA748();
      if (v19) {
        goto LABEL_12;
      }
      sub_2534D94EC(v18);
      if (v17 != v16)
      {
        sub_2534DA73C();
        if (v21) {
          goto LABEL_16;
        }
        sub_2534D94C4();
        if (v17 != v16) {
          break;
        }
      }
    }
LABEL_29:
    uint64_t v26 = sub_253462A5C(&qword_269CDCD00);
    sub_2534D96D8(v26);
LABEL_30:
    uint64_t v27 = sub_2534D9840();
    sub_2534D8A74(v27, v28, &qword_269CDCCF8);
    uint64_t v29 = sub_253462A5C(&qword_269CDCD00);
    sub_2534D8B48((uint64_t)v2, 1, v29);
    if (v10) {
      goto LABEL_35;
    }
    uint64_t v30 = *v2;
    sub_2534D8E14();
    v31();
    sub_2534D9DBC();
    sub_2534D98F0();
    if ((v0 & 1) == 0)
    {
      uint64_t v35 = sub_2534D93F0();
      v36(v35);
      goto LABEL_35;
    }
    uint64_t v32 = sub_2534D8DB0();
    v33(v32);
    sub_2534D8A30((uint64_t)&unk_269CDCCF0);
    sub_2534D9600();
    uint64_t v34 = sub_2534D9040();
    ((void (*)(uint64_t))v30)(v34);
    sub_25347FB18();
    v30();
  }
  sub_2534DA730();
  if (v23)
  {
    uint64_t v18 = v22;
    goto LABEL_12;
  }
  sub_2534D949C();
  if (v17 == v16) {
    goto LABEL_29;
  }
  sub_2534DA5EC();
  if (v24)
  {
LABEL_16:
    uint64_t v18 = v20;
LABEL_12:
    sub_2534D9328(v18);
    goto LABEL_7;
  }
  while (!__OFADD__(v20, 1))
  {
    sub_2534D9700();
    if (v17 == v16)
    {
      sub_2534DA5F8();
      goto LABEL_29;
    }
    sub_2534D8EB0();
    if (v25) {
      goto LABEL_12;
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_2534C1554(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v27 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    uint64_t v29 = (v6 - 1) & v6;
    int64_t v30 = v3;
    unint64_t v7 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_22:
    uint64_t v12 = result;
    uint64_t v13 = *(void *)(result + 48) + 32 * v7;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 16);
    char v17 = (unsigned __int8 *)(*(void *)(result + 56) + 16 * v7);
    int v18 = *v17;
    unint64_t v19 = *((void *)v17 + 1);
    unsigned __int8 v20 = *(unsigned char *)(v13 + 24);
    sub_25346CA34(*(void *)v13, v15, v16, v20);
    sub_2534C1C84(v19);
    unint64_t v21 = sub_25396E2C8(v14, v15, v16, v20);
    char v23 = v22;
    sub_2534D2608(v14, v15, v16, v20);
    if ((v23 & 1) == 0 || (uint64_t v24 = *(void *)(a2 + 56), v18 != *(unsigned __int8 *)(v24 + 16 * v21)))
    {
      sub_25346CA4C(v19);
      return 0;
    }
    uint64_t v25 = *(void *)(v24 + 16 * v21 + 8);
    unint64_t v31 = v19;
    uint64_t v32 = v25;
    char v26 = static AST.Expr.== infix(_:_:)(&v32, &v31);
    sub_25346CA4C(v19);
    uint64_t result = v12;
    unint64_t v6 = v29;
    int64_t v3 = v30;
    if ((v26 & 1) == 0) {
      return 0;
    }
  }
  int64_t v8 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v8 >= v28) {
    return 1;
  }
  unint64_t v9 = *(void *)(v27 + 8 * v8);
  int64_t v10 = v3 + 1;
  if (v9) {
    goto LABEL_21;
  }
  int64_t v10 = v3 + 2;
  if (v3 + 2 >= v28) {
    return 1;
  }
  unint64_t v9 = *(void *)(v27 + 8 * v10);
  if (v9) {
    goto LABEL_21;
  }
  int64_t v10 = v3 + 3;
  if (v3 + 3 >= v28) {
    return 1;
  }
  unint64_t v9 = *(void *)(v27 + 8 * v10);
  if (v9)
  {
LABEL_21:
    uint64_t v29 = (v9 - 1) & v9;
    int64_t v30 = v10;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_22;
  }
  uint64_t v11 = v3 + 4;
  if (v3 + 4 >= v28) {
    return 1;
  }
  unint64_t v9 = *(void *)(v27 + 8 * v11);
  if (v9)
  {
    int64_t v10 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v10 >= v28) {
      return 1;
    }
    unint64_t v9 = *(void *)(v27 + 8 * v10);
    ++v11;
    if (v9) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_2534C17A4(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    unint64_t v21 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    unint64_t v15 = v21;
    swift_bridgeObjectRetain();
    sub_2534C1C84(v15);
    unint64_t v16 = sub_25396E0AC();
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_25346CA4C(v15);
      return 0;
    }
    uint64_t v20 = *(void *)(*(void *)(a2 + 56) + 8 * v16);
    char v19 = static AST.Expr.== infix(_:_:)(&v20, &v21);
    uint64_t result = sub_25346CA4C(v15);
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_2534C1988(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v4 = *(void *)(result + 64);
  uint64_t v25 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v26 = (unint64_t)(v5 + 63) >> 6;
  if ((v6 & v4) == 0) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v27 = v3;
  for (unint64_t i = v8 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)(result + 48) + 32 * i;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    unsigned __int8 v20 = *(unsigned char *)(v15 + 24);
    unint64_t v29 = *(void *)(*(void *)(result + 56) + 8 * i);
    unint64_t v19 = v29;
    sub_25346CA34(v16, v17, v18, v20);
    sub_2534C1C84(v19);
    unint64_t v21 = sub_25396E2C8(v16, v17, v18, v20);
    char v23 = v22;
    sub_2534D2608(v16, v17, v18, v20);
    if ((v23 & 1) == 0)
    {
      sub_25346CA4C(v19);
      return 0;
    }
    uint64_t v28 = *(void *)(*(void *)(a2 + 56) + 8 * v21);
    char v24 = static AST.Expr.== infix(_:_:)(&v28, &v29);
    sub_25346CA4C(v19);
    if ((v24 & 1) == 0) {
      return 0;
    }
    uint64_t result = v14;
    int64_t v3 = v27;
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v26) {
      return 1;
    }
    unint64_t v11 = *(void *)(v25 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v26) {
        return 1;
      }
      unint64_t v11 = *(void *)(v25 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v26) {
          return 1;
        }
        unint64_t v11 = *(void *)(v25 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v26) {
            return 1;
          }
          unint64_t v11 = *(void *)(v25 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v11 - 1) & v11;
    int64_t v27 = v12;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v26) {
    return 1;
  }
  unint64_t v11 = *(void *)(v25 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v26) {
      return 1;
    }
    unint64_t v11 = *(void *)(v25 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t static AST.UpdateParameters.== infix(_:_:)()
{
  sub_2534DA0C4();
  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *(int *)(type metadata accessor for AST.UpdateParameters() + 20);
  uint64_t v3 = *(void *)(v1 + v2);
  uint64_t v4 = *(void *)(v0 + v2);
  return sub_2534C1554(v3, v4);
}

uint64_t type metadata accessor for AST.UpdateParameters()
{
  uint64_t result = qword_269CDC5C8;
  if (!qword_269CDC5C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_2534C1C84(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void AST.Expr.hash(into:)(uint64_t a1)
{
  uint64_t updated = type metadata accessor for AST.UpdateParameters();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534AF2D8();
  uint64_t v7 = sub_253B059D0();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  sub_2534847E0();
  uint64_t v11 = *v1;
  switch((unint64_t)*v1 >> 60)
  {
    case 1uLL:
      uint64_t v13 = swift_projectBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, v13, v7);
      sub_253B0A600();
      sub_2534D8A30((uint64_t)&unk_269CDBEB0);
      sub_2534DA78C();
      sub_2534DA498();
      sub_2534DA4BC();
      v14();
      goto LABEL_22;
    case 2uLL:
      sub_253B0A600();
      sub_2534DA06C();
      sub_25346CD04();
      AST.Literal.hash(into:)(v15, v16, v17, v18);
      return;
    case 3uLL:
      sub_253B0A600();
      sub_253B0A600();
      sub_2534DA70C();
      goto LABEL_22;
    case 4uLL:
      uint64_t v20 = v11 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v21 = *(void *)(v20 + 24);
      unint64_t v22 = *(void *)(v20 + 32);
      sub_253B0A600();
      sub_253B0A600();
      sub_2534C1C84(v21);
      sub_2534C1C84(v22);
      sub_2534DA70C();
      AST.Expr.hash(into:)(a1);
      sub_25346CA4C(v21);
      unint64_t v23 = v22;
      goto LABEL_15;
    case 5uLL:
      unint64_t v24 = *(void *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      sub_253B0A600();
      sub_2534C1C84(v24);
      sub_2534DA70C();
      sub_2534D9AA0();
      sub_253B09630();
      sub_25346CD04();
      sub_25346CA4C(v25);
      return;
    case 6uLL:
      uint64_t v27 = v11 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v28 = *(void *)(v27 + 16);
      unint64_t v29 = *(void *)(v27 + 24);
      sub_253B0A600();
      sub_2534C1C84(v28);
      sub_2534C1C84(v29);
      sub_2534DA70C();
      AST.Expr.hash(into:)(a1);
      sub_25346CA4C(v28);
      unint64_t v23 = v29;
LABEL_15:
      sub_25346CA4C(v23);
      goto LABEL_22;
    case 7uLL:
      uint64_t v30 = v11 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v31 = *(void *)(v30 + 40);
      char v32 = *(unsigned char *)(v30 + 48);
      sub_253B0A600();
      if (v32)
      {
        sub_253B0A600();
        swift_bridgeObjectRetain();
        sub_253B09630();
        swift_bridgeObjectRelease();
        sub_253B0A610();
        if (v31)
        {
          swift_bridgeObjectRetain();
          sub_2534DA648();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        sub_253B0A600();
        sub_253B09630();
      }
      sub_2534D970C();
      sub_25346CD04();
      sub_2534D0EDC(v34, v35);
      return;
    case 8uLL:
      swift_projectBox();
      sub_2534D898C();
      sub_253B0A600();
      sub_2534D8A30((uint64_t)&unk_269CDBEB0);
      sub_2534DA7AC();
      uint64_t v33 = *(void *)(v2 + *(int *)(updated + 20));
      swift_bridgeObjectRetain();
      sub_2534D0C40(a1, v33);
      swift_bridgeObjectRelease();
      sub_2534D89E0();
      goto LABEL_22;
    case 9uLL:
      sub_253B0A600();
LABEL_22:
      sub_25346CD04();
      break;
    default:
      sub_253B0A600();
      sub_2534DA06C();
      sub_25346CD04();
      sub_253B09630();
      break;
  }
}

uint64_t sub_2534C21AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 28262 && a2 == 0xE200000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C2290(char a1)
{
  if (a1) {
    return 0x6574656D61726170;
  }
  else {
    return 28262;
  }
}

uint64_t sub_2534C22C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E656469 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6C61726574696CLL && a2 == 0xE700000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x786966657270 && a2 == 0xE600000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x7869666E69 && a2 == 0xE500000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 7630692 && a2 == 0xE300000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
              if (v11 || (sub_253B0A4C0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 1819042147 && a2 == 0xE400000000000000;
                if (v12 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C3F0 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x616C50664F646E65 && a2 == 0xE90000000000006ELL;
                  if (v13 || (sub_253B0A4C0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C410)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else
                  {
                    char v14 = sub_253B0A4C0();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 10;
                    }
                    else {
                      return 11;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2534C26F0()
{
  return 11;
}

unint64_t sub_2534C26F8(char a1)
{
  unint64_t result = 0x746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656D6574617473;
      break;
    case 2:
      unint64_t result = 0x6C61726574696CLL;
      break;
    case 3:
      unint64_t result = 0x786966657270;
      break;
    case 4:
      uint64_t v3 = 1768320617;
      goto LABEL_8;
    case 5:
      unint64_t result = 7630692;
      break;
    case 6:
      uint64_t v3 = 1701080681;
LABEL_8:
      unint64_t result = v3 & 0xFFFF0000FFFFFFFFLL | 0x7800000000;
      break;
    case 7:
      unint64_t result = 1819042147;
      break;
    case 8:
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x616C50664F646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534C2828(char a1)
{
  if (a1) {
    return 0x7865646E69;
  }
  else {
    return 7563372;
  }
}

uint64_t sub_2534C2854(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 7563372 && a2 == 0xE300000000000000;
  if (v4 || (sub_2534DA0C4(), (sub_25349667C() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 0x7865646E69 && v2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_25349667C();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C2910(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 12639 && a2 == 0xE200000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 12895 && a2 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

unint64_t sub_2534C2A1C(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 8) + 12383;
}

uint64_t sub_2534C2A34()
{
  return sub_2534C2290(*v0);
}

uint64_t sub_2534C2A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C21AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C2A64(uint64_t a1)
{
  unint64_t v2 = sub_2534D1290();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2AA0(uint64_t a1)
{
  unint64_t v2 = sub_2534D1290();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2534C2ADC()
{
  return sub_2534C26F8(*v0);
}

uint64_t sub_2534C2AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C22C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C2B0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2534C26F0();
  *a1 = result;
  return result;
}

uint64_t sub_2534C2B34(uint64_t a1)
{
  unint64_t v2 = sub_2534D1160();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2B70(uint64_t a1)
{
  unint64_t v2 = sub_2534D1160();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2BAC(uint64_t a1)
{
  unint64_t v2 = sub_2534D11AC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2BE8(uint64_t a1)
{
  unint64_t v2 = sub_2534D11AC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2C24()
{
  return sub_2534C2828(*v0);
}

uint64_t sub_2534C2C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C2854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C2C54(uint64_t a1)
{
  unint64_t v2 = sub_2534D140C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2C90(uint64_t a1)
{
  unint64_t v2 = sub_2534D140C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2CCC(uint64_t a1)
{
  unint64_t v2 = sub_2534D11F8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2D08(uint64_t a1)
{
  unint64_t v2 = sub_2534D11F8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2D44()
{
  return sub_2534C9A38();
}

uint64_t sub_2534C2D60(uint64_t a1)
{
  unint64_t v2 = sub_2534D166C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2D9C(uint64_t a1)
{
  unint64_t v2 = sub_2534D166C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2DD8(uint64_t a1)
{
  unint64_t v2 = sub_2534D13C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2E14(uint64_t a1)
{
  unint64_t v2 = sub_2534D13C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2534C2E50()
{
  return sub_2534C2A1C(*v0);
}

uint64_t sub_2534C2E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C2910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C2E80(uint64_t a1)
{
  unint64_t v2 = sub_2534D1458();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2EBC(uint64_t a1)
{
  unint64_t v2 = sub_2534D1458();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2EF8(uint64_t a1)
{
  unint64_t v2 = sub_2534D1588();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2F34(uint64_t a1)
{
  unint64_t v2 = sub_2534D1588();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2F70(uint64_t a1)
{
  unint64_t v2 = sub_2534D14F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C2FAC(uint64_t a1)
{
  unint64_t v2 = sub_2534D14F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C2FE8(uint64_t a1)
{
  unint64_t v2 = sub_2534D1620();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C3024(uint64_t a1)
{
  unint64_t v2 = sub_2534D1620();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C3060(uint64_t a1)
{
  unint64_t v2 = sub_2534D1244();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C309C(uint64_t a1)
{
  unint64_t v2 = sub_2534D1244();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.Expr.encode(to:)()
{
  sub_2534847F8();
  uint64_t v101 = v2;
  uint64_t v5 = v4;
  v85[6] = sub_253462A5C(&qword_269CDBEB8);
  sub_253465998();
  v85[5] = v6;
  MEMORY[0x270FA5388](v7);
  sub_2534D8F5C((uint64_t)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85[3] = sub_253462A5C(&qword_269CDBEC0);
  sub_253465998();
  v85[2] = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534D8F5C((uint64_t)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v97 = sub_253462A5C(&qword_269CDBEC8);
  sub_253465998();
  v85[12] = v12;
  MEMORY[0x270FA5388](v13);
  sub_2534D9248(v14, v85[0]);
  uint64_t updated = type metadata accessor for AST.UpdateParameters();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534D9BAC(v16, v85[0]);
  uint64_t v96 = sub_253462A5C(&qword_269CDBED0);
  sub_253465998();
  v85[11] = v17;
  MEMORY[0x270FA5388](v18);
  sub_2534D92B8(v19, v85[0]);
  uint64_t v95 = sub_253462A5C(&qword_269CDBED8);
  sub_253465998();
  v85[10] = v20;
  MEMORY[0x270FA5388](v21);
  sub_2534D92F0(v22, v85[0]);
  uint64_t v92 = sub_253462A5C(&qword_269CDBEE0);
  sub_253465998();
  v85[9] = v23;
  MEMORY[0x270FA5388](v24);
  sub_25346CB04();
  sub_2534D8F5C(v25);
  uint64_t v94 = sub_253462A5C(&qword_269CDBEE8);
  sub_253465998();
  v85[13] = v26;
  MEMORY[0x270FA5388](v27);
  sub_2534D9BC8(v28, v85[0]);
  uint64_t v91 = sub_253462A5C(&qword_269CDBEF0);
  sub_253465998();
  void v85[8] = v29;
  MEMORY[0x270FA5388](v30);
  sub_25346CB04();
  sub_2534D8F5C(v31);
  uint64_t v90 = sub_253462A5C(&qword_269CDBEF8);
  sub_253465998();
  uint64_t v88 = v32;
  MEMORY[0x270FA5388](v33);
  sub_2534D8F5C((uint64_t)v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v89 = sub_253462A5C(&qword_269CDBF00);
  sub_253465998();
  v85[7] = v35;
  MEMORY[0x270FA5388](v36);
  sub_2534D9B74();
  uint64_t v87 = sub_253B059D0();
  sub_253465998();
  uint64_t v86 = v37;
  MEMORY[0x270FA5388](v38);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDBF08);
  sub_253465998();
  v85[14] = v39;
  MEMORY[0x270FA5388](v40);
  sub_253465A3C();
  uint64_t v100 = sub_253462A5C(&qword_269CDBF10);
  sub_253465998();
  uint64_t v98 = v41;
  MEMORY[0x270FA5388](v42);
  sub_25346CC6C();
  unint64_t v43 = *v1;
  uint64_t v44 = v5[4];
  sub_253472068(v5, v5[3]);
  sub_2534D1160();
  uint64_t v99 = v3;
  sub_253B0A680();
  switch(v43 >> 60)
  {
    case 1uLL:
      uint64_t v48 = swift_projectBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v0, v48, v87);
      LOBYTE(v102) = 1;
      sub_2534D1620();
      sub_2534D9208();
      sub_2534D8A30((uint64_t)&unk_269CDBFB8);
      sub_2534D9D78();
      sub_2534DA098();
      sub_2534659CC();
      v49();
      sub_2534D97B4();
      v50();
      uint64_t v51 = sub_2534D9B10();
      goto LABEL_27;
    case 2uLL:
      uint64_t v54 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v55 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      char v56 = *(unsigned char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      LOBYTE(v102) = 2;
      sub_2534D1588();
      sub_2534D9404();
      *(void *)&long long v102 = v54;
      *((void *)&v102 + 1) = v55;
      LOBYTE(v103) = v56;
      sub_2534D15D4();
      uint64_t v57 = v90;
      sub_253B0A440();
      uint64_t v58 = sub_2534D9AD0();
      uint64_t v60 = v57;
      goto LABEL_26;
    case 3uLL:
      char v61 = *(unsigned char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v62 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      LOBYTE(v102) = 3;
      sub_2534C1C84(v62);
      sub_2534D14F0();
      sub_253B0A3A0();
      LOBYTE(v102) = v61;
      sub_2534D153C();
      sub_2534D9F00();
      uint64_t v63 = v101;
      sub_253B0A440();
      if (v63)
      {
        sub_25346CA4C(v62);
        sub_2534659CC();
        v64();
        uint64_t v51 = sub_2534D9A44();
        goto LABEL_27;
      }
      *(void *)&long long v102 = v62;
      sub_2534D1374();
      sub_253B0A440();
      sub_2534659CC();
      v78();
      uint64_t v79 = sub_2534D9A44();
      goto LABEL_31;
    case 4uLL:
      char v65 = *(unsigned char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v66 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v62 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      LOBYTE(v102) = 4;
      sub_2534C1C84(v66);
      sub_2534C1C84(v62);
      sub_2534D1458();
      sub_2534D9404();
      LOBYTE(v102) = v65;
      sub_2534D14A4();
      sub_2534D9F00();
      sub_2534D9D78();
      if (!v2)
      {
        *(void *)&long long v102 = v66;
        sub_2534D1374();
        sub_2534D91E0();
        *(void *)&long long v102 = v62;
        sub_2534D91E0();
        sub_25346CA4C(v66);
        goto LABEL_30;
      }
      sub_25346CA4C(v66);
      sub_25346CA4C(v62);
LABEL_25:
      uint64_t v58 = sub_2534D96CC();
LABEL_26:
      v59(v58, v60);
      uint64_t v51 = sub_2534D9724();
LABEL_27:
      v53(v51, v52);
      break;
    case 5uLL:
      unint64_t v62 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      LOBYTE(v102) = 5;
      sub_2534C1C84(v62);
      sub_2534D140C();
      sub_2534D9404();
      *(void *)&long long v102 = v62;
      sub_2534D1374();
      sub_2534D9F00();
      sub_2534D9D78();
      if (v2) {
        goto LABEL_30;
      }
      LOBYTE(v102) = 1;
      sub_2534DA138();
      sub_253B0A3F0();
      sub_25346CA4C(v62);
      goto LABEL_25;
    case 6uLL:
      unint64_t v67 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v62 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      LOBYTE(v102) = 6;
      sub_2534C1C84(v67);
      sub_2534C1C84(v62);
      sub_2534D13C0();
      sub_2534D9404();
      *(void *)&long long v102 = v67;
      sub_2534D1374();
      sub_2534D9F00();
      sub_2534D9D78();
      if (v2)
      {
        sub_25346CA4C(v62);
        sub_2534659CC();
        v81();
        sub_2534659CC();
        v82();
        unint64_t v83 = v67;
      }
      else
      {
        *(void *)&long long v102 = v62;
        sub_2534D9E60();
        sub_2534D91E0();
        sub_25346CA4C(v67);
LABEL_30:
        sub_2534659CC();
        v84();
        uint64_t v79 = sub_2534D9724();
LABEL_31:
        v80(v79);
        unint64_t v83 = v62;
      }
      sub_25346CA4C(v83);
      break;
    case 7uLL:
      long long v97 = *(_OWORD *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v68 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v69 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      char v70 = *(unsigned char *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v71 = *(void *)((v43 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      LOBYTE(v102) = 7;
      sub_2534D1290();
      sub_2534DA69C();
      long long v102 = v97;
      uint64_t v103 = v68;
      uint64_t v104 = v69;
      char v105 = v70;
      sub_2534D12DC();
      sub_2534D9F00();
      uint64_t v72 = v96;
      sub_2534D9D78();
      if (!v2)
      {
        *(void *)&long long v102 = v71;
        sub_2534D9E60();
        sub_253462A5C(&qword_269CDBF50);
        sub_2534D2120((uint64_t)&unk_269CDBF58);
        sub_253B0A440();
      }
      uint64_t v45 = sub_2534DA098();
      uint64_t v46 = v72;
      goto LABEL_16;
    case 8uLL:
      swift_projectBox();
      sub_2534D898C();
      LOBYTE(v102) = 8;
      sub_2534D1244();
      uint64_t v74 = v99;
      uint64_t v73 = v100;
      sub_2534DA534();
      sub_253B0A3A0();
      sub_2534D8A30((uint64_t)&unk_269CDBF38);
      sub_253B0A440();
      sub_2534659CC();
      v75();
      sub_2534D89E0();
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v74, v73);
      break;
    case 9uLL:
      if (v43 == 0x9000000000000000)
      {
        LOBYTE(v102) = 9;
        sub_2534D11F8();
      }
      else
      {
        LOBYTE(v102) = 10;
        sub_2534D11AC();
      }
      sub_2534D9F84();
      sub_2534D9AC4();
      sub_2534659CC();
      v76();
      sub_2534D99FC();
      sub_2534B3470();
      v77();
      break;
    default:
      LOBYTE(v102) = 0;
      sub_2534D166C();
      sub_2534DA69C();
      sub_2534D9AA0();
      sub_253B0A3F0();
      uint64_t v45 = sub_2534D9B1C();
LABEL_16:
      v47(v45, v46);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v44, v3);
      break;
  }
  sub_2534847C8();
}

uint64_t AST.Expr.hashValue.getter()
{
  v2[9] = *v0;
  sub_253B0A5F0();
  AST.Expr.hash(into:)((uint64_t)v2);
  return sub_253B0A630();
}

void AST.Expr.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v91 = v4;
  sub_253462A5C(&qword_269CDBFC8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253483628(v6, v81);
  sub_253462A5C(&qword_269CDBFD0);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534D8F68(v8, v82);
  sub_253462A5C(&qword_269CDBFD8);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534AF2A0(v10, v83);
  sub_253462A5C(&qword_269CDBFE0);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_2534D8F84(v12, v84);
  sub_253462A5C(&qword_269CDBFE8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_253483644(v14, v85);
  sub_253462A5C(&qword_269CDBFF0);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_2534AF2BC(v16, v86);
  sub_253462A5C(&qword_269CDBFF8);
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  sub_2534D9280(v18, v87);
  sub_253462A5C(&qword_269CDC000);
  sub_253465998();
  MEMORY[0x270FA5388](v19);
  sub_2534B33C8(v20, v88);
  sub_253462A5C(&qword_269CDC008);
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  sub_2534D929C(v22, v89);
  sub_253462A5C(&qword_269CDC010);
  sub_253465998();
  MEMORY[0x270FA5388](v23);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC018);
  sub_253465998();
  MEMORY[0x270FA5388](v24);
  sub_2534B3294();
  uint64_t v25 = sub_253462A5C(&qword_269CDC020);
  sub_253465998();
  uint64_t v27 = v26;
  MEMORY[0x270FA5388](v28);
  sub_2534966B0();
  uint64_t v92 = v3;
  sub_253472068(v3, v3[3]);
  sub_2534D1160();
  sub_253B0A660();
  if (v0) {
    goto LABEL_7;
  }
  uint64_t v93 = v27;
  uint64_t v29 = sub_253B0A390();
  if (!*(void *)(v29 + 16)
    || (sub_2534D96C0(),
        uint64_t v90 = *(unsigned __int8 *)(v29 + 32),
        sub_25347B78C(1, v30, v29, v29 + 32, 0, v31),
        uint64_t v33 = v32,
        unint64_t v35 = v34,
        swift_bridgeObjectRelease(),
        v33 != v35 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v38 = v37;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v38 = &type metadata for AST.Expr;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v39();
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v1, v25);
LABEL_7:
    uint64_t v40 = (uint64_t)v92;
    goto LABEL_8;
  }
  switch(v90)
  {
    case 1:
      sub_2534D9E60();
      sub_2534D1620();
      sub_2534D8C8C();
      sub_253B059D0();
      uint64_t v41 = swift_allocBox();
      sub_2534D8A30((uint64_t)&unk_269CDC068);
      sub_253B0A370();
      sub_2534659CC();
      v58();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v59();
      unint64_t v36 = v41 | 0x1000000000000000;
      break;
    case 2:
      sub_2534D1588();
      sub_2534D8C8C();
      uint64_t v42 = swift_allocObject();
      sub_2534D2410();
      sub_2534DA684();
      sub_2534659CC();
      v60();
      swift_unknownObjectRelease();
      sub_2534D911C();
      v61();
      unint64_t v36 = v42 | 0x2000000000000000;
      break;
    case 3:
      sub_2534D14F0();
      sub_2534D8C8C();
      uint64_t v43 = swift_allocObject();
      sub_2534D235C();
      sub_2534D988C();
      sub_2534DA018();
      sub_2534D21DC();
      sub_2534D988C();
      sub_253B0A370();
      sub_2534659CC();
      v65();
      swift_unknownObjectRelease();
      sub_2534D91AC();
      v66();
      unint64_t v36 = v43 | 0x3000000000000000;
      break;
    case 4:
      sub_2534D1458();
      sub_2534D8C8C();
      uint64_t v44 = swift_allocObject();
      sub_2534D22E0();
      sub_2534D988C();
      sub_2534DA018();
      sub_2534DA46C();
      sub_2534D21DC();
      sub_2534D988C();
      sub_2534DA874();
      sub_253B0A370();
      sub_2534DA874();
      sub_253B0A370();
      sub_2534659CC();
      v78();
      swift_unknownObjectRelease();
      uint64_t v79 = sub_2534D8C64();
      v80(v79);
      unint64_t v36 = v44 | 0x4000000000000000;
      break;
    case 5:
      sub_2534D140C();
      sub_2534D8C8C();
      uint64_t v45 = swift_allocObject();
      sub_2534D21DC();
      sub_2534D988C();
      sub_2534DA018();
      sub_2534DA46C();
      sub_2534D9E60();
      uint64_t v62 = sub_253B0A320();
      uint64_t v68 = v67;
      sub_2534659CC();
      v69();
      swift_unknownObjectRelease();
      uint64_t v70 = sub_2534D8C64();
      v71(v70);
      *(void *)(v45 + 24) = v62;
      *(void *)(v45 + 32) = v68;
      unint64_t v36 = v45 | 0x5000000000000000;
      break;
    case 6:
      sub_2534D13C0();
      sub_2534D8C8C();
      uint64_t v46 = swift_allocObject();
      sub_2534D21DC();
      sub_2534D988C();
      sub_2534DA684();
      sub_2534DA46C();
      sub_253B0A370();
      sub_2534659CC();
      v72();
      swift_unknownObjectRelease();
      uint64_t v73 = sub_2534D8C64();
      v74(v73);
      unint64_t v36 = v46 | 0x6000000000000000;
      break;
    case 7:
      sub_2534D1290();
      sub_2534D8C8C();
      uint64_t v47 = swift_allocObject();
      sub_2534D20D4();
      sub_2534D988C();
      sub_2534DA874();
      sub_2534DA684();
      sub_2534DA46C();
      sub_253462A5C(&qword_269CDBF50);
      sub_2534D9E60();
      sub_2534D2120((uint64_t)&unk_269CDC038);
      sub_253B0A370();
      sub_2534659CC();
      v75();
      swift_unknownObjectRelease();
      uint64_t v76 = sub_2534D8C64();
      v77(v76);
      unint64_t v36 = v47 | 0x7000000000000000;
      break;
    case 8:
      sub_2534D1244();
      sub_2534D8C8C();
      type metadata accessor for AST.UpdateParameters();
      uint64_t v48 = swift_allocBox();
      sub_2534D8A30((uint64_t)&unk_269CDC028);
      sub_2534DA684();
      sub_2534659CC();
      v63();
      swift_unknownObjectRelease();
      sub_2534D911C();
      v64();
      unint64_t v36 = v48 | 0x8000000000000000;
      break;
    case 9:
      sub_2534D11F8();
      sub_2534D8C8C();
      sub_2534659CC();
      v49();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v50();
      unint64_t v36 = 0x9000000000000000;
      break;
    case 10:
      sub_2534D11AC();
      sub_2534D8C8C();
      sub_2534659CC();
      v51();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v52();
      unint64_t v36 = 0x9000000000000008;
      break;
    default:
      sub_2534D166C();
      sub_2534D8C8C();
      unint64_t v36 = swift_allocObject();
      sub_2534DA6F4();
      uint64_t v53 = sub_253B0A320();
      uint64_t v55 = v54;
      sub_2534659CC();
      v56();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v57();
      *(void *)(v36 + 16) = v53;
      *(void *)(v36 + 24) = v55;
      break;
  }
  uint64_t v40 = (uint64_t)v92;
  unint64_t *v91 = v36;
LABEL_8:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v40);
  sub_2534847C8();
}

uint64_t sub_2534C5074()
{
  v2[9] = *v0;
  sub_253B0A5F0();
  AST.Expr.hash(into:)((uint64_t)v2);
  return sub_253B0A630();
}

void sub_2534C50BC()
{
}

void sub_2534C50D4()
{
}

uint64_t AST.CallFn.hash(into:)()
{
  if (*(unsigned char *)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 24);
    sub_253B0A600();
    swift_bridgeObjectRetain();
    sub_2534DA648();
    swift_bridgeObjectRelease();
    if (v1)
    {
      sub_253B0A610();
      swift_bridgeObjectRetain();
      sub_2534DA498();
      sub_253B09630();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_253B0A610();
    }
  }
  else
  {
    sub_253B0A600();
    return sub_253B09630();
  }
}

uint64_t sub_2534C51E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_2534C5224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2534C5274(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F54646573726170 && a2 == 0xEE00656D614E6C6FLL;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000253B0C430)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C5388(char a1)
{
  if (a1) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0x6F54646573726170;
  }
}

uint64_t sub_2534C53D0()
{
  return sub_2534C5388(*v0);
}

uint64_t sub_2534C53D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C5274(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C5400(uint64_t a1)
{
  unint64_t v2 = sub_2534D248C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C543C(uint64_t a1)
{
  unint64_t v2 = sub_2534D248C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C5478(uint64_t a1)
{
  unint64_t v2 = sub_2534D2570();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C54B4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2570();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C54F0(uint64_t a1)
{
  unint64_t v2 = sub_2534D24D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C552C(uint64_t a1)
{
  unint64_t v2 = sub_2534D24D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.CallFn.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDC070);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDC078);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDC080);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534847E0();
  char v6 = *(unsigned char *)(v0 + 32);
  sub_253472068(v2, v2[3]);
  sub_2534D248C();
  sub_253B0A680();
  if (v6)
  {
    sub_2534D24D8();
    sub_2534D9624();
    sub_2534D2524();
    sub_253B0A440();
  }
  else
  {
    sub_2534D2570();
    sub_2534D9624();
    sub_253B0A3F0();
    sub_2534D9AD0();
  }
  sub_2534659CC();
  v7();
  sub_2534D98A8();
  sub_2534659CC();
  v8();
  sub_2534847C8();
}

uint64_t AST.CallFn.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  sub_2534D938C();
  if (v2)
  {
    sub_253B0A600();
    swift_bridgeObjectRetain();
    sub_2534DA648();
    swift_bridgeObjectRelease();
    sub_253B0A610();
    if (v1)
    {
      swift_bridgeObjectRetain();
      sub_253B09630();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_2534D99A0();
    sub_2534DA648();
  }
  return sub_253B0A630();
}

void AST.CallFn.init(from:)()
{
  sub_2534847F8();
  char v2 = v1;
  uint64_t v28 = v3;
  sub_253462A5C(&qword_269CDC0A8);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDC0B0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534847E0();
  sub_253462A5C(&qword_269CDC0B8);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_2534D9A50(v2);
  sub_2534D248C();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v7 = sub_253B0A390();
  if (!*(void *)(v7 + 16)
    || (sub_2534D96C0(),
        char v8 = *(unsigned char *)(v7 + 32),
        sub_25347B78C(1, v9, v7, v7 + 32, 0, v10),
        uint64_t v12 = v11,
        unint64_t v14 = v13,
        swift_bridgeObjectRelease(),
        v12 != v14 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v16 = v15;
    sub_253462A5C(&qword_269CDB688);
    sub_2534DA930();
    *uint64_t v16 = &type metadata for AST.CallFn;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v17();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534D97B4();
    v18();
LABEL_8:
    uint64_t v19 = (uint64_t)v2;
    goto LABEL_9;
  }
  if (v8)
  {
    LOBYTE(v29) = 1;
    sub_2534D24D8();
    sub_2534DA0A8();
    sub_253B0A2C0();
    sub_2534D25BC();
    sub_2534DA874();
    sub_253B0A370();
    sub_2534659CC();
    v23();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v24();
    uint64_t v25 = v29;
    uint64_t v26 = v30;
    long long v27 = v31;
  }
  else
  {
    sub_2534D2570();
    sub_253B0A2C0();
    uint64_t v25 = sub_253B0A320();
    uint64_t v26 = v20;
    sub_2534659CC();
    v21();
    swift_unknownObjectRelease();
    sub_2534D98A8();
    sub_2534659CC();
    v22();
    long long v27 = 0uLL;
  }
  *(void *)uint64_t v28 = v25;
  *(void *)(v28 + 8) = v26;
  *(_OWORD *)(v28 + 16) = v27;
  *(unsigned char *)(v28 + 32) = v8;
  uint64_t v19 = (uint64_t)v2;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v19);
  sub_2534847C8();
}

void sub_2534C5CE4()
{
}

void sub_2534C5CFC()
{
}

uint64_t sub_2534C5D1C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  sub_253B0A5F0();
  if (v2)
  {
    sub_253B0A600();
    swift_bridgeObjectRetain();
    sub_253B09630();
    swift_bridgeObjectRelease();
    sub_253B0A610();
    if (v1)
    {
      swift_bridgeObjectRetain();
      sub_253B09630();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_253B0A600();
    sub_253B09630();
  }
  return sub_253B0A630();
}

uint64_t AST.ParameterKey.parameterName.getter()
{
  if (*(unsigned __int8 *)(v0 + 24) >= 2u)
  {
    sub_2534DA93C();
    sub_253B0A480();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253B09860();
  }
  else
  {
    uint64_t v1 = sub_2534ACF74();
    sub_25346CA34(v1, v2, v3, v4);
  }
  return sub_2534ACF74();
}

uint64_t AST.ParameterKey.parameterLhsIndex.getter()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    return *(void *)(v0 + 16);
  }
  else {
    return 0;
  }
}

uint64_t AST.ParameterKey.updatingName(to:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = result;
  int v7 = *(unsigned __int8 *)(v3 + 24);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 24);
  if (*(unsigned char *)(v3 + 24) && (uint64_t v8 = *(void *)(v3 + 16), v7 != 1))
  {
    uint64_t v5 = *(void *)v3;
    a2 = *(void *)(v3 + 8);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v8;
  *(unsigned char *)(a3 + 24) = v7;
  return result;
}

void static AST.ParameterKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    if (v5 != 1)
    {
      if (v9 == 2)
      {
        uint64_t v12 = sub_2534D9920(*(void *)a1, v3, v4, 2u);
        sub_2534D2608(v12, v13, v14, 2u);
        goto LABEL_21;
      }
LABEL_13:
      sub_25346CA34(v6, v7, v8, v9);
      uint64_t v15 = sub_2534D9920(v2, v3, v4, v5);
      sub_2534D2608(v15, v16, v17, v9);
      goto LABEL_21;
    }
    if (v9 == 1)
    {
      uint64_t v10 = *(void *)a1;
      if (v2 == v6 && v3 == v7)
      {
        sub_2534D9424(v10, v3);
        uint64_t v19 = sub_2534D9718();
        sub_2534D2608(v19, v20, v8, 1u);
      }
      else
      {
        sub_253B0A4C0();
        sub_2534D9424(v6, v7);
        sub_2534D2608(v6, v7, v8, 1u);
      }
      goto LABEL_21;
    }
LABEL_10:
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  if (*(unsigned char *)(a2 + 24)) {
    goto LABEL_10;
  }
  if (v2 != v6 || v3 != v7)
  {
    sub_2534D9718();
    sub_253B0A4C0();
  }
  sub_25346CA34(v6, v7, v8, 0);
  uint64_t v21 = sub_2534DA5B8();
  sub_25346CA34(v21, v22, v23, v24);
  uint64_t v25 = sub_2534DA5B8();
  uint64_t v29 = sub_2534D9920(v25, v26, v27, v28);
  sub_2534D2608(v29, v30, v31, 0);
LABEL_21:
  sub_25346CD04();
}

uint64_t AST.ParameterKey.hash(into:)()
{
  if (*(unsigned char *)(v0 + 24))
  {
    if (*(unsigned char *)(v0 + 24) == 1)
    {
      sub_253B0A600();
      sub_253B09630();
    }
    else
    {
      sub_253B0A600();
    }
    return sub_253B0A600();
  }
  else
  {
    sub_253B0A600();
    return sub_253B09630();
  }
}

uint64_t sub_2534C6170(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656D61726170 && a2 == 0xED0000656D614E72;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000253B0C450 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F6D796E6F6E61 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2534C62F0(char a1)
{
  if (!a1) {
    return 0x6574656D61726170;
  }
  if (a1 == 1) {
    return 0xD000000000000015;
  }
  return 0x756F6D796E6F6E61;
}

uint64_t sub_2534C635C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v4 || (sub_2534DA0C4(), (sub_25349667C() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 12639 && v2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_25349667C();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C6408(char a1)
{
  if (a1) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_2534C6420(uint64_t a1)
{
  unint64_t v2 = sub_2534D266C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C645C(uint64_t a1)
{
  unint64_t v2 = sub_2534D266C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C6498()
{
  return _s16IntelligenceFlow3ASTO0aB14PlannerSupportE8PrefixOpO9hashValueSivg_0();
}

uint64_t sub_2534C64B4()
{
  return sub_2534C62F0(*v0);
}

uint64_t sub_2534C64BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C6170(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C64E4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2620();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C6520(uint64_t a1)
{
  unint64_t v2 = sub_2534D2620();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C655C()
{
  return sub_2534C6408(*v0);
}

uint64_t sub_2534C6564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C635C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C658C(uint64_t a1)
{
  unint64_t v2 = sub_2534D26B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C65C8(uint64_t a1)
{
  unint64_t v2 = sub_2534D26B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C6604(uint64_t a1)
{
  unint64_t v2 = sub_2534D2704();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C6640(uint64_t a1)
{
  unint64_t v2 = sub_2534D2704();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.ParameterKey.encode(to:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CDC0C8);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D8F68(v5, v13);
  sub_253462A5C(&qword_269CDC0D0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534966B0();
  sub_253462A5C(&qword_269CDC0D8);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDC0E0);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_253465A3C();
  int v9 = *(unsigned __int8 *)(v0 + 24);
  sub_253472068(v3, v3[3]);
  sub_2534D2620();
  sub_253B0A680();
  if (!v9)
  {
    sub_2534D2704();
    sub_2534D9208();
    sub_253B0A3F0();
LABEL_8:
    sub_2534659CC();
    v11();
    sub_2534D9898();
    goto LABEL_9;
  }
  if (v9 != 1)
  {
    sub_2534D266C();
    sub_2534D9208();
    sub_253B0A430();
    sub_2534D98A8();
    goto LABEL_8;
  }
  sub_2534D26B8();
  sub_2534D9208();
  sub_253B0A3F0();
  if (!v1) {
    sub_253B0A430();
  }
  sub_2534D9FA8();
  sub_2534659CC();
  v10();
  sub_2534D9B10();
LABEL_9:
  sub_2534659CC();
  v12();
  sub_2534847C8();
}

uint64_t AST.ParameterKey.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_2534D938C();
  if (v1)
  {
    sub_253B0A600();
    if (v1 == 1) {
      sub_2534D9798();
    }
    sub_253B0A600();
  }
  else
  {
    sub_2534D99A0();
    sub_2534D9798();
  }
  return sub_253B0A630();
}

void AST.ParameterKey.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v40 = v3;
  sub_253462A5C(&qword_269CDC108);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534AF2A0(v5, v39);
  sub_253462A5C(&qword_269CDC110);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDC118);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC120);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D9B58();
  uint64_t v42 = v2;
  sub_2534DA2C4();
  sub_2534D2620();
  sub_2534DA804();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v9 = sub_253B0A390();
    if (*(void *)(v9 + 16))
    {
      sub_2534D96C0();
      int v10 = *(unsigned __int8 *)(v9 + 32);
      uint64_t v11 = sub_2534DA144();
      sub_25347B78C(v11, v12, v13, v14, v15, v16);
      uint64_t v18 = v17;
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (v18 == v20 >> 1)
      {
        if (v10)
        {
          if (v10 == 1)
          {
            sub_2534D26B8();
            sub_2534D9FD8();
            char v21 = 1;
            sub_2534DA6F4();
            uint64_t v22 = sub_253B0A320();
            uint64_t v29 = v28;
            uint64_t v41 = v22;
            sub_2534DA6F4();
            uint64_t v35 = sub_253B0A360();
            sub_2534659CC();
            v36();
            swift_unknownObjectRelease();
            sub_2534D9220();
            v37();
            uint64_t v38 = v41;
LABEL_13:
            *(void *)uint64_t v40 = v38;
            *(void *)(v40 + 8) = v29;
            *(void *)(v40 + 16) = v35;
            *(unsigned char *)(v40 + 24) = v21;
            _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v42);
            goto LABEL_9;
          }
          sub_2534D266C();
          sub_2534D9FD8();
          sub_2534DA6F4();
          uint64_t v38 = sub_253B0A360();
          char v21 = v10;
          sub_2534659CC();
          v33();
          swift_unknownObjectRelease();
          sub_2534659CC();
          v34();
          uint64_t v29 = 0;
        }
        else
        {
          sub_2534D2704();
          sub_2534D9FD8();
          char v21 = 0;
          uint64_t v38 = sub_253B0A320();
          uint64_t v29 = v30;
          sub_2534659CC();
          v31();
          swift_unknownObjectRelease();
          sub_2534659CC();
          v32();
        }
        uint64_t v35 = 0;
        goto LABEL_13;
      }
    }
    sub_253B0A090();
    sub_2534D969C();
    unsigned __int8 v24 = v23;
    sub_253462A5C(&qword_269CDB688);
    *unsigned __int8 v24 = &type metadata for AST.ParameterKey;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v25();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v26 = sub_2534D9FA8();
    v27(v26);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
LABEL_9:
  sub_2534847C8();
}

void sub_2534C6FE8()
{
}

void sub_2534C7000()
{
}

uint64_t sub_2534C7020()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_253B0A5F0();
  if (v1)
  {
    sub_253B0A600();
    if (v1 == 1) {
      sub_2534D9798();
    }
    sub_253B0A600();
  }
  else
  {
    sub_2534D99A0();
    sub_2534D9798();
  }
  return sub_253B0A630();
}

uint64_t AST.UpdateParameters.statementId.getter()
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_2534ACF74();
  return v1(v0);
}

uint64_t AST.UpdateParameters.statementId.setter()
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_2534D9778();
  return v1(v0);
}

uint64_t (*AST.UpdateParameters.statementId.modify())()
{
  return nullsub_1;
}

uint64_t AST.UpdateParameters.parameters.getter()
{
  type metadata accessor for AST.UpdateParameters();
  return swift_bridgeObjectRetain();
}

uint64_t AST.UpdateParameters.parameters.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AST.UpdateParameters() + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AST.UpdateParameters.parameters.modify())()
{
  return nullsub_1;
}

uint64_t AST.UpdateParameters.init(statementId:parameters:)()
{
  sub_2534DA0C4();
  uint64_t v2 = v1;
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534DA5AC();
  sub_2534D8E14();
  v3();
  uint64_t result = type metadata accessor for AST.UpdateParameters();
  *(void *)(v2 + *(int *)(result + 20)) = v0;
  return result;
}

uint64_t AST.UpdateParameters.hash(into:)(uint64_t a1)
{
  sub_253B059D0();
  sub_2534D8A30((uint64_t)&unk_269CDBEB0);
  sub_2534D970C();
  sub_253B095D0();
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for AST.UpdateParameters() + 20));
  swift_bridgeObjectRetain();
  sub_2534D0C40(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534C735C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C7470(char a1)
{
  if (a1) {
    return 0x6574656D61726170;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2534C74B4()
{
  return sub_2534C7470(*v0);
}

uint64_t sub_2534C74BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C735C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C74E4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2750();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C7520(uint64_t a1)
{
  unint64_t v2 = sub_2534D2750();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AST.UpdateParameters.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDC128);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253472068(a1, a1[3]);
  sub_2534D2750();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2534D8A30((uint64_t)&unk_269CDBFB8);
  sub_2534DA628();
  if (!v1)
  {
    type metadata accessor for AST.UpdateParameters();
    sub_253462A5C(&qword_269CDC138);
    sub_2534D279C((uint64_t)&unk_269CDC140);
    sub_2534DA628();
  }
  sub_2534D97B4();
  return v4();
}

uint64_t AST.UpdateParameters.hashValue.getter()
{
  sub_2534D938C();
  sub_253B059D0();
  sub_2534D8A30((uint64_t)&unk_269CDBEB0);
  sub_253B095D0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AST.UpdateParameters() + 20));
  swift_bridgeObjectRetain();
  sub_2534D0C40((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_253B0A630();
}

void AST.UpdateParameters.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  uint64_t v13 = sub_253B059D0();
  sub_253465998();
  uint64_t v12 = v5;
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDC150);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B34A4();
  uint64_t updated = type metadata accessor for AST.UpdateParameters();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  sub_2534847E0();
  sub_253472068(v4, v4[3]);
  sub_2534D2750();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  }
  else
  {
    sub_2534D8A30((uint64_t)&unk_269CDC068);
    sub_253B0A370();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v2, v1, v13);
    sub_253462A5C(&qword_269CDC138);
    sub_2534D279C((uint64_t)&unk_269CDC158);
    sub_253B0A370();
    uint64_t v10 = sub_2534D9ADC();
    v11(v10);
    *(void *)(v2 + *(int *)(updated + 20)) = v14;
    sub_2534D898C();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_2534D89E0();
  }
  sub_2534847C8();
}

void sub_2534C7ACC()
{
}

uint64_t sub_2534C7AE4(void *a1)
{
  return AST.UpdateParameters.encode(to:)(a1);
}

uint64_t sub_2534C7B04(uint64_t a1, uint64_t a2)
{
  sub_253B0A5F0();
  sub_253B059D0();
  sub_2534D8A30((uint64_t)&unk_269CDBEB0);
  sub_253B095D0();
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_2534D0C40((uint64_t)v6, v4);
  swift_bridgeObjectRelease();
  return sub_253B0A630();
}

void AST.UpdateExpr.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AST.UpdateExpr.kind.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*AST.UpdateExpr.kind.modify())()
{
  return nullsub_1;
}

unint64_t AST.UpdateExpr.expr.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 8);
  *a1 = v2;
  return sub_2534C1C84(v2);
}

unint64_t AST.UpdateExpr.expr.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t result = sub_25346CA4C(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*AST.UpdateExpr.expr.modify())()
{
  return nullsub_1;
}

unsigned char *AST.UpdateExpr.init(kind:expr:parameterIndex:)@<X0>(unsigned char *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  *(unsigned char *)a3 = *result;
  *(void *)(a3 + 8) = v3;
  return result;
}

uint64_t static AST.UpdateExpr.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    static AST.Expr.== infix(_:_:)();
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

BOOL static AST.UpdateKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AST.UpdateExpr.hash(into:)(uint64_t a1)
{
}

uint64_t sub_2534C7D14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919973477 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C7DEC(char a1)
{
  if (a1) {
    return 1919973477;
  }
  else {
    return 1684957547;
  }
}

uint64_t sub_2534C7E0C()
{
  return sub_2534C8C78();
}

uint64_t sub_2534C7E28()
{
  return sub_2534C7DEC(*v0);
}

uint64_t sub_2534C7E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C7D14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C7E58(uint64_t a1)
{
  unint64_t v2 = sub_2534D28A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C7E94(uint64_t a1)
{
  unint64_t v2 = sub_2534D28A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.UpdateExpr.encode(to:)()
{
  sub_2534847F8();
  sub_253462A5C(&qword_269CDC168);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534B3294();
  unint64_t v2 = (void *)sub_2534D954C();
  sub_253472068(v2, v3);
  sub_2534D28A4();
  sub_2534DA3BC();
  sub_2534D28F0();
  sub_253B0A440();
  if (!v0)
  {
    sub_2534D1374();
    sub_253B0A440();
  }
  sub_2534D97B4();
  v4();
  sub_2534847C8();
}

uint64_t AST.UpdateExpr.hashValue.getter()
{
  sub_2534D938C();
  sub_2534D9D20();
  AST.Expr.hash(into:)((uint64_t)v1);
  return sub_253B0A630();
}

void AST.UpdateExpr.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_2534847F8();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_253462A5C(&qword_269CDC180);
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  sub_25346CC6C();
  sub_2534D9A50(v15);
  sub_2534D28A4();
  sub_253B0A660();
  if (!v13)
  {
    sub_2534D293C();
    sub_2534DA560();
    sub_2534D21DC();
    sub_2534DA560();
    sub_2534D9A08();
    v19();
    *(unsigned char *)uint64_t v17 = a13;
    *(void *)(v17 + 8) = v20;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v15);
  sub_2534847C8();
}

void sub_2534C81C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AST.UpdateExpr.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_2534C81D8()
{
}

uint64_t sub_2534C81F8()
{
  sub_253B0A5F0();
  sub_253B0A600();
  AST.Expr.hash(into:)((uint64_t)v1);
  return sub_253B0A630();
}

uint64_t AST.UpdateKind.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t sub_2534C8284(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646E65707061 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563616C706572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C836C(char a1)
{
  if (a1) {
    return 0x6563616C706572;
  }
  else {
    return 0x646E65707061;
  }
}

uint64_t sub_2534C83A0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2A20();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C83DC(uint64_t a1)
{
  unint64_t v2 = sub_2534D2A20();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C8418()
{
  return sub_2534C836C(*v0);
}

uint64_t sub_2534C8420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C8284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C8448(uint64_t a1)
{
  unint64_t v2 = sub_2534D2988();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C8484(uint64_t a1)
{
  unint64_t v2 = sub_2534D2988();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C84C0(uint64_t a1)
{
  unint64_t v2 = sub_2534D29D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C84FC(uint64_t a1)
{
  unint64_t v2 = sub_2534D29D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.UpdateKind.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDC190);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534AF2A0(v4, v10);
  sub_253462A5C(&qword_269CDC198);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDC1A0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534966B0();
  char v7 = *v0;
  sub_253472068(v2, v2[3]);
  sub_2534D2988();
  sub_253B0A680();
  if (v7)
  {
    sub_2534D29D4();
    sub_253B0A3A0();
  }
  else
  {
    sub_2534D2A20();
    sub_253B0A3A0();
    sub_2534D9AD0();
  }
  sub_2534659CC();
  v8();
  sub_2534B3470();
  v9();
  sub_2534847C8();
}

uint64_t AST.UpdateKind.hashValue.getter()
{
  return sub_253B0A630();
}

void AST.UpdateKind.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v30 = v4;
  sub_253462A5C(&qword_269CDC1C0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDC1C8);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CDC1D0);
  sub_253465998();
  uint64_t v31 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  sub_2534D9A50(v3);
  sub_2534D2988();
  sub_2534DA804();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v32 = (uint64_t)v3;
  uint64_t v10 = sub_253B0A390();
  if (!*(void *)(v10 + 16)
    || (sub_2534D96C0(),
        char v11 = *(unsigned char *)(v10 + 32),
        uint64_t v12 = sub_2534DA144(),
        sub_25347B78C(v12, v13, v14, v15, v16, v17),
        uint64_t v19 = v18,
        unint64_t v21 = v20,
        swift_bridgeObjectRelease(),
        v19 != v21 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    unsigned __int8 v24 = v23;
    sub_253462A5C(&qword_269CDB688);
    sub_2534DA930();
    *unsigned __int8 v24 = &type metadata for AST.UpdateKind;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v25();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v26();
    uint64_t v3 = (void *)v32;
LABEL_8:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    goto LABEL_9;
  }
  if (v11)
  {
    sub_2534D29D4();
    sub_2534DA0A8();
    sub_253B0A2C0();
    uint64_t v22 = v30;
    sub_2534659CC();
    v27();
    swift_unknownObjectRelease();
    sub_2534D911C();
    v28();
  }
  else
  {
    sub_2534D2A20();
    sub_2534DA534();
    sub_253B0A2C0();
    uint64_t v22 = v30;
    sub_2534D8E50();
    sub_2534659CC();
    v29();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v1, v7);
  }
  *uint64_t v22 = v11;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v32);
LABEL_9:
  sub_2534847C8();
}

void sub_2534C8B0C()
{
}

void sub_2534C8B24()
{
}

uint64_t static AST.PickType.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0) {
      return a1 == a3;
    }
    return _s30IntelligenceFlowPlannerSupport16SearchExpressionV5query24isLowConfidenceKnowledge7pickOne28shouldOpenResultIfApplicableACSS_S3btcfcfA1__0();
  }
  if ((a4 & 1) == 0) {
    return _s30IntelligenceFlowPlannerSupport16SearchExpressionV5query24isLowConfidenceKnowledge7pickOne28shouldOpenResultIfApplicableACSS_S3btcfcfA1__0();
  }
  return 1;
}

uint64_t AST.PickType.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    sub_253B0A600();
  }
  return sub_253B0A600();
}

uint64_t sub_2534C8BA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534C8C78()
{
  return sub_253B0A630();
}

uint64_t sub_2534C8CB8(char a1)
{
  if (a1) {
    return 1701736302;
  }
  else {
    return 0x7865646E69;
  }
}

uint64_t sub_2534C8CE4()
{
  return sub_253B0A630();
}

uint64_t sub_2534C8D20()
{
  return sub_2534C8CB8(*v0);
}

uint64_t sub_2534C8D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C8BA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C8D50(uint64_t a1)
{
  unint64_t v2 = sub_2534D2A6C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C8D8C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2A6C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C8DC8(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C8E04(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B04();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C8E40(uint64_t a1)
{
  unint64_t v2 = sub_2534D2AB8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C8E7C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2AB8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.PickType.encode(to:)()
{
  sub_2534847F8();
  char v8 = v0;
  sub_253462A5C(&qword_269CDC1D8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDC1E0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDC1E8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25346CC6C();
  uint64_t v4 = (void *)sub_2534D9778();
  sub_253472068(v4, v5);
  sub_2534D2A6C();
  sub_253B0A680();
  if (v8)
  {
    sub_2534D2AB8();
    sub_253B0A3A0();
    sub_2534D9AD0();
  }
  else
  {
    sub_2534D2B04();
    sub_253B0A3A0();
    sub_253B0A430();
    sub_2534D9990();
  }
  sub_2534659CC();
  v6();
  sub_2534D91A0();
  v7();
  sub_2534847C8();
}

uint64_t AST.PickType.hashValue.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    sub_2534D99A0();
  }
  sub_2534D9D20();
  return sub_253B0A630();
}

void AST.PickType.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  sub_253462A5C(&qword_269CDC208);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDC210);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC218);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  uint64_t v6 = (void *)sub_2534DA154();
  sub_253472068(v6, v7);
  sub_2534D2A6C();
  sub_2534DA804();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v25 = v2;
  uint64_t v8 = sub_253B0A390();
  if (!*(void *)(v8 + 16)
    || (sub_2534D96C0(),
        char v9 = *(unsigned char *)(v8 + 32),
        sub_25347B78C(1, v10, v8, v8 + 32, 0, v11),
        uint64_t v13 = v12,
        unint64_t v15 = v14,
        swift_bridgeObjectRelease(),
        v13 != v15 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v19 = v18;
    sub_253462A5C(&qword_269CDB688);
    sub_2534DA930();
    *uint64_t v19 = &type metadata for AST.PickType;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v20();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534D97B4();
    v21();
    uint64_t v2 = v25;
LABEL_8:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
    goto LABEL_9;
  }
  if (v9)
  {
    sub_2534D2AB8();
    sub_2534DA534();
    sub_253B0A2C0();
    sub_2534659CC();
    v16();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v17();
  }
  else
  {
    sub_2534D2B04();
    sub_2534DA534();
    sub_253B0A2C0();
    sub_253B0A360();
    sub_2534659CC();
    v22();
    swift_unknownObjectRelease();
    uint64_t v23 = sub_2534D9534();
    v24(v23);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v25);
LABEL_9:
  sub_2534847C8();
}

uint64_t sub_2534C94D4(uint64_t a1, uint64_t a2)
{
  return static AST.PickType.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void sub_2534C94F0(uint64_t a1@<X8>)
{
  AST.PickType.init(from:)();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4 & 1;
  }
}

void sub_2534C9524()
{
}

uint64_t sub_2534C9544()
{
  return AST.PickType.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_2534C9550(uint64_t a1)
{
  return AST.PickType.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_2534C955C()
{
  char v1 = *(unsigned char *)(v0 + 8);
  sub_253B0A5F0();
  if ((v1 & 1) == 0) {
    sub_253B0A600();
  }
  sub_253B0A600();
  return sub_253B0A630();
}

uint64_t AST.Literal.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      sub_253B0A600();
      goto LABEL_14;
    case 2:
      sub_253B0A600();
      uint64_t result = sub_253B0A620();
      break;
    case 3:
      sub_253B0A600();
      uint64_t result = sub_253B09630();
      break;
    case 4:
      sub_253B0A600();
      uint64_t v5 = sub_2534D9778();
      uint64_t result = sub_2534D2024(v5, v6);
      break;
    case 5:
      sub_253B0A600();
      uint64_t v7 = sub_2534D9778();
      uint64_t result = sub_2534D0A88(v7, v8);
      break;
    case 6:
LABEL_14:
      uint64_t result = sub_253B0A600();
      break;
    default:
      sub_253B0A600();
      uint64_t result = sub_253B0A610();
      break;
  }
  return result;
}

uint64_t sub_2534C96FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819047278 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1819242338 && a2 == 0xE400000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 7630441 && a2 == 0xE300000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x656C62756F64 && a2 == 0xE600000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x7961727261 && a2 == 0xE500000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 1952672100 && a2 == 0xE400000000000000)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              char v12 = sub_253B0A4C0();
              swift_bridgeObjectRelease();
              if (v12) {
                return 6;
              }
              else {
                return 7;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2534C997C()
{
  return 7;
}

uint64_t sub_2534C9984(char a1)
{
  uint64_t result = 1819047278;
  switch(a1)
  {
    case 1:
      uint64_t result = 1819242338;
      break;
    case 2:
      uint64_t result = 7630441;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 0x676E69727473;
      break;
    case 5:
      uint64_t result = 0x7961727261;
      break;
    case 6:
      uint64_t result = 1952672100;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534C9A38()
{
  return sub_253B0A630();
}

uint64_t sub_2534C9A6C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2BE8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9AA8(uint64_t a1)
{
  unint64_t v2 = sub_2534D2BE8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9AE4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2D18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9B20(uint64_t a1)
{
  unint64_t v2 = sub_2534D2D18();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9B5C()
{
  return sub_2534C9984(*v0);
}

uint64_t sub_2534C9B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534C96FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534C9B8C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2534C997C();
  *a1 = result;
  return result;
}

uint64_t sub_2534C9BB4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9BF0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B50();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9C2C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B9C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9C68(uint64_t a1)
{
  unint64_t v2 = sub_2534D2B9C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9CA4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2C80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9CE0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2C80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9D1C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2CCC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9D58(uint64_t a1)
{
  unint64_t v2 = sub_2534D2CCC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9D94(uint64_t a1)
{
  unint64_t v2 = sub_2534D2D64();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9DD0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2D64();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534C9E0C()
{
  return sub_253B0A630();
}

uint64_t sub_2534C9E44(uint64_t a1)
{
  unint64_t v2 = sub_2534D2C34();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534C9E80(uint64_t a1)
{
  unint64_t v2 = sub_2534D2C34();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AST.Literal.encode(to:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_253462A5C(&qword_269CDC220);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534D8F68(v6, v42);
  sub_253462A5C(&qword_269CDC228);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534D9248(v8, v43);
  sub_253462A5C(&qword_269CDC230);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534D9264(v10, v44);
  sub_253462A5C(&qword_269CDC238);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_2534D92F0(v12, v45);
  sub_253462A5C(&qword_269CDC240);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDC248);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC250);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDC258);
  sub_253465998();
  uint64_t v46 = v16;
  MEMORY[0x270FA5388](v16);
  sub_253465A3C();
  sub_2534D9A50(a1);
  sub_2534D2B50();
  sub_253B0A680();
  switch(a4)
  {
    case 1:
      sub_2534D2CCC();
      sub_2534D9208();
      sub_253B0A430();
      goto LABEL_7;
    case 2:
      sub_2534D2C80();
      sub_2534D9208();
      sub_253B0A410();
      goto LABEL_6;
    case 3:
      sub_2534D2C34();
      sub_2534D9208();
      sub_253B0A3F0();
LABEL_6:
      sub_2534D98A8();
LABEL_7:
      sub_2534659CC();
      v27(v24, v25, v26);
      uint64_t v21 = sub_2534D9898();
      return v22(v21, v23);
    case 4:
      sub_2534D2BE8();
      uint64_t v28 = v46;
      sub_2534D9208();
      sub_253462A5C(&qword_269CDC288);
      sub_2534D2E14((uint64_t)&unk_269CDC290);
      sub_2534DA854();
      goto LABEL_10;
    case 5:
      sub_2534D2B9C();
      uint64_t v28 = v46;
      sub_2534D9208();
      sub_253462A5C(&qword_269CDC270);
      sub_2534D2DB0((uint64_t)&unk_269CDC278);
      sub_2534DA854();
LABEL_10:
      sub_2534659CC();
      v32(v29, v30, v31);
      uint64_t v21 = sub_2534D9990();
      uint64_t v23 = v28;
      return v22(v21, v23);
    case 6:
      sub_2534D2D64();
      sub_2534D9208();
      sub_2534659CC();
      v37(v34, v35, v36);
      sub_2534659CC();
      return v41(v38, v39, v40);
    default:
      sub_2534D2D18();
      sub_2534D9208();
      sub_253B0A400();
      sub_2534D8C7C();
      sub_2534659CC();
      v20(v17, v18, v19);
      uint64_t v21 = sub_2534D9990();
      uint64_t v23 = v46;
      return v22(v21, v23);
  }
}

uint64_t AST.Literal.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  sub_2534D938C();
  AST.Literal.hash(into:)((uint64_t)v7, a1, a2, a3);
  return sub_253B0A630();
}

uint64_t AST.Literal.init(from:)(void *a1)
{
  sub_253462A5C(&qword_269CDC2C0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534D8F84(v4, v52);
  sub_253462A5C(&qword_269CDC2C8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B33C8(v6, v53);
  sub_253462A5C(&qword_269CDC2D0);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253483628(v8, v54);
  sub_253462A5C(&qword_269CDC2D8);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_253483644(v10, v55);
  sub_253462A5C(&qword_269CDC2E0);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_25347FA68(v12, v56);
  sub_253462A5C(&qword_269CDC2E8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC2F0);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_253465A3C();
  uint64_t v15 = sub_253462A5C(&qword_269CDC2F8);
  sub_253465998();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v18);
  sub_25347FAAC();
  uint64_t v57 = a1;
  sub_253472068(a1, a1[3]);
  sub_2534D2B50();
  sub_253B0A660();
  if (v58)
  {
    uint64_t v19 = (uint64_t)a1;
  }
  else
  {
    uint64_t v59 = v17;
    if (*(void *)(sub_253B0A390() + 16)
      && (sub_2534D96C0(),
          uint64_t v21 = *(unsigned __int8 *)(v20 + 32),
          uint64_t v22 = sub_2534DA144(),
          sub_25347B78C(v22, v23, v24, v25, v26, v27),
          uint64_t v19 = v28,
          unint64_t v30 = v29,
          swift_bridgeObjectRelease(),
          v19 == v30 >> 1))
    {
      switch(v21)
      {
        case 1:
          sub_2534D2D18();
          sub_2534D99D4();
          sub_2534D9AF8();
          sub_253B0A330();
          sub_2534659CC();
          v42();
          swift_unknownObjectRelease();
          sub_2534D911C();
          v43();
          break;
        case 2:
          sub_2534D2CCC();
          sub_2534DA0A8();
          sub_253B0A2C0();
          sub_253B0A360();
          sub_2534659CC();
          v37();
          swift_unknownObjectRelease();
          sub_2534659CC();
          v38();
          uint64_t v19 = (uint64_t)v57;
          break;
        case 3:
          sub_2534D2C80();
          sub_2534D91B8();
          sub_2534D9AF8();
          sub_253B0A340();
          sub_2534659CC();
          v44();
          swift_unknownObjectRelease();
          uint64_t v45 = sub_2534D9188();
          v46(v45);
          break;
        case 4:
          sub_2534D2C34();
          sub_2534D99D4();
          sub_2534D9AF8();
          sub_253B0A320();
          sub_2534659CC();
          v47();
          swift_unknownObjectRelease();
          sub_2534D91AC();
          v48();
          break;
        case 5:
          sub_2534D2BE8();
          sub_2534D91B8();
          sub_2534D9AF8();
          sub_253462A5C(&qword_269CDC288);
          sub_2534D2E14((uint64_t)&unk_269CDC308);
          sub_253B0A370();
          sub_2534659CC();
          v39();
          swift_unknownObjectRelease();
          uint64_t v40 = sub_2534D9188();
          v41(v40);
          break;
        case 6:
          sub_2534D2B9C();
          sub_2534D91B8();
          sub_2534D9AF8();
          sub_253462A5C(&qword_269CDC270);
          sub_2534D2DB0((uint64_t)&unk_269CDC300);
          sub_253B0A370();
          sub_2534659CC();
          v49();
          swift_unknownObjectRelease();
          uint64_t v50 = sub_2534D9188();
          v51(v50);
          break;
        default:
          sub_2534D2D64();
          sub_253B0A2C0();
          sub_2534D9AF8();
          sub_2534D8E50();
          sub_2534659CC();
          v35();
          swift_unknownObjectRelease();
          sub_2534659CC();
          v36();
          break;
      }
    }
    else
    {
      uint64_t v19 = (uint64_t)v57;
      sub_253B0A090();
      sub_2534D969C();
      uint64_t v32 = v31;
      sub_253462A5C(&qword_269CDB688);
      *uint64_t v32 = &type metadata for AST.Literal;
      sub_253B0A2D0();
      sub_2534D8FF4();
      sub_25347B88C();
      sub_25346CCF8();
      v33();
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v1, v15);
    }
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v19);
  return sub_2534ACF74();
}

unint64_t sub_2534CAFE0(uint64_t a1, uint64_t a2)
{
  return static AST.Literal.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_2534CAFFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AST.Literal.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_2534CB02C(void *a1)
{
  return AST.Literal.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_2534CB04C()
{
  return AST.Literal.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_2534CB058(uint64_t a1)
{
  return AST.Literal.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_2534CB064()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  sub_253B0A5F0();
  AST.Literal.hash(into:)((uint64_t)v5, v1, v2, v3);
  return sub_253B0A630();
}

uint64_t sub_2534CB0BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1937075312 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x73756E696DLL && a2 == 0xE500000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 7630702 && a2 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2534CB1E4(char a1)
{
  if (!a1) {
    return 1937075312;
  }
  if (a1 == 1) {
    return 0x73756E696DLL;
  }
  return 7630702;
}

uint64_t sub_2534CB228()
{
  return sub_2534CB1E4(*v0);
}

uint64_t sub_2534CB230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534CB0BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534CB258(uint64_t a1)
{
  unint64_t v2 = sub_2534D2E7C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CB294(uint64_t a1)
{
  unint64_t v2 = sub_2534D2E7C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CB2D0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2F14();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CB30C(uint64_t a1)
{
  unint64_t v2 = sub_2534D2F14();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CB348(uint64_t a1)
{
  unint64_t v2 = sub_2534D2EC8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CB384(uint64_t a1)
{
  unint64_t v2 = sub_2534D2EC8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CB3C0(uint64_t a1)
{
  unint64_t v2 = sub_2534D2F60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CB3FC(uint64_t a1)
{
  unint64_t v2 = sub_2534D2F60();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.PrefixOp.encode(to:)()
{
  sub_2534847F8();
  char v15 = v1;
  sub_253462A5C(&qword_269CDC310);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534AF2A0(v3, v12);
  sub_253462A5C(&qword_269CDC318);
  sub_253465998();
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  MEMORY[0x270FA5388](v4);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDC320);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDC328);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534847E0();
  sub_2534DA2C4();
  sub_2534D2E7C();
  sub_253B0A680();
  if (!v15)
  {
    sub_2534D2F60();
    sub_2534D9624();
    uint64_t v8 = sub_2534D9898();
LABEL_6:
    v10(v8, v9);
    goto LABEL_7;
  }
  if (v15 != 1)
  {
    sub_2534D2EC8();
    sub_2534D9624();
    uint64_t v8 = sub_2534D8E50();
    goto LABEL_6;
  }
  sub_2534D2F14();
  sub_2534D9624();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v14);
LABEL_7:
  sub_2534DA4BC();
  v11();
  sub_2534847C8();
}

void AST.PrefixOp.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CDC350);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D92D4(v5, v31);
  sub_253462A5C(&qword_269CDC358);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDC360);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534847E0();
  uint64_t v8 = sub_253462A5C(&qword_269CDC368);
  sub_253465998();
  uint64_t v32 = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534966B0();
  sub_253472068(v3, v3[3]);
  sub_2534D2E7C();
  sub_2534DA804();
  sub_253B0A660();
  if (v0) {
    goto LABEL_11;
  }
  uint64_t v33 = (uint64_t)v3;
  uint64_t v11 = v1;
  uint64_t v12 = sub_253B0A390();
  if (!*(void *)(v12 + 16))
  {
LABEL_10:
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v22 = v21;
    sub_253462A5C(&qword_269CDB688);
    sub_2534DA930();
    *uint64_t v22 = &type metadata for AST.PrefixOp;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v24(v23);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v11, v8);
    uint64_t v3 = (void *)v33;
LABEL_11:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    goto LABEL_12;
  }
  uint64_t v13 = v1;
  sub_2534D96C0();
  int v14 = *(unsigned __int8 *)(v12 + 32);
  sub_25347B78C(1, v15, v12, v12 + 32, 0, v16);
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (v18 != v20 >> 1)
  {
    uint64_t v11 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    if (v14 == 1)
    {
      sub_2534D2F14();
      sub_2534DA07C();
      sub_2534D9AC4();
    }
    else
    {
      sub_2534D2EC8();
      sub_2534DA07C();
      sub_2534D98A8();
    }
    sub_2534659CC();
    v26(v25);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v13, v8);
  }
  else
  {
    sub_2534D2F60();
    sub_2534DA07C();
    sub_2534D9AC4();
    sub_2534659CC();
    v28(v27);
    swift_unknownObjectRelease();
    sub_2534659CC();
    v30(v29);
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v33);
LABEL_12:
  sub_2534847C8();
}

void sub_2534CBAD0(unsigned char *a1@<X8>)
{
  AST.PrefixOp.init(from:)();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_2534CBAFC()
{
}

uint64_t sub_2534CBB18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6769737361 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 6579297 && a2 == 0xE300000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6769737341646461 && a2 == 0xE90000000000006ELL;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x7463617274627573 && a2 == 0xE800000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x7463617274627573 && a2 == 0xEE006E6769737341;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x656469766964 && a2 == 0xE600000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x7341656469766964 && a2 == 0xEC0000006E676973;
              if (v11 || (sub_253B0A4C0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x796C7069746C756DLL && a2 == 0xE800000000000000;
                if (v12 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x796C7069746C756DLL && a2 == 0xEE006E6769737341;
                  if (v13 || (sub_253B0A4C0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x746E656E6F707865 && a2 == 0xE800000000000000;
                    if (v14 || (sub_253B0A4C0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 9;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x6C61757165 && a2 == 0xE500000000000000;
                      if (v15 || (sub_253B0A4C0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 10;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x6C61757145746F6ELL && a2 == 0xE800000000000000;
                        if (v16 || (sub_253B0A4C0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 11;
                        }
                        else
                        {
                          BOOL v17 = a1 == 28265 && a2 == 0xE200000000000000;
                          if (v17 || (sub_253B0A4C0() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 12;
                          }
                          else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C470 {
                                 || (sub_253B0A4C0() & 1) != 0)
                          }
                          {
                            swift_bridgeObjectRelease();
                            return 13;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x5472657461657267 && a2 == 0xEB000000006E6168;
                            if (v18 || (sub_253B0A4C0() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 14;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x6E6168547373656CLL && a2 == 0xED00006C61757145;
                              if (v19 || (sub_253B0A4C0() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 15;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x6E6168547373656CLL && a2 == 0xE800000000000000;
                                if (v20 || (sub_253B0A4C0() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 16;
                                }
                                else
                                {
                                  BOOL v21 = a1 == 6581857 && a2 == 0xE300000000000000;
                                  if (v21 || (sub_253B0A4C0() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 17;
                                  }
                                  else if (a1 == 29295 && a2 == 0xE200000000000000)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 18;
                                  }
                                  else
                                  {
                                    char v23 = sub_253B0A4C0();
                                    swift_bridgeObjectRelease();
                                    if (v23) {
                                      return 18;
                                    }
                                    else {
                                      return 19;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2534CC268()
{
  return 19;
}

unint64_t sub_2534CC270(char a1)
{
  unint64_t result = 0x6E6769737361;
  switch(a1)
  {
    case 1:
      unint64_t result = 6579297;
      break;
    case 2:
      unint64_t result = 0x6769737341646461;
      break;
    case 3:
      unint64_t result = 0x7463617274627573;
      break;
    case 4:
      unint64_t result = 0x7463617274627573;
      break;
    case 5:
      unint64_t result = 0x656469766964;
      break;
    case 6:
      unint64_t result = 0x7341656469766964;
      break;
    case 7:
      unint64_t result = 0x796C7069746C756DLL;
      break;
    case 8:
      unint64_t result = 0x796C7069746C756DLL;
      break;
    case 9:
      unint64_t result = 0x746E656E6F707865;
      break;
    case 10:
      unint64_t result = 0x6C61757165;
      break;
    case 11:
      unint64_t result = 0x6C61757145746F6ELL;
      break;
    case 12:
      unint64_t result = 28265;
      break;
    case 13:
      unint64_t result = 0xD000000000000010;
      break;
    case 14:
      unint64_t result = 0x5472657461657267;
      break;
    case 15:
    case 16:
      unint64_t result = 0x6E6168547373656CLL;
      break;
    case 17:
      unint64_t result = 6581857;
      break;
    case 18:
      unint64_t result = 29295;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534CC494(uint64_t a1)
{
  unint64_t v2 = sub_2534D34B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC4D0(uint64_t a1)
{
  unint64_t v2 = sub_2534D34B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC50C(uint64_t a1)
{
  unint64_t v2 = sub_2534D3504();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC548(uint64_t a1)
{
  unint64_t v2 = sub_2534D3504();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC584(uint64_t a1)
{
  unint64_t v2 = sub_2534D3044();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC5C0(uint64_t a1)
{
  unint64_t v2 = sub_2534D3044();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC5FC(uint64_t a1)
{
  unint64_t v2 = sub_2534D3550();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC638(uint64_t a1)
{
  unint64_t v2 = sub_2534D3550();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2534CC674()
{
  return sub_2534CC270(*v0);
}

uint64_t sub_2534CC67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534CBB18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534CC6A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2534CC268();
  *a1 = result;
  return result;
}

uint64_t sub_2534CC6CC(uint64_t a1)
{
  unint64_t v2 = sub_2534D2FAC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC708(uint64_t a1)
{
  unint64_t v2 = sub_2534D2FAC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC744(uint64_t a1)
{
  unint64_t v2 = sub_2534D3388();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC780(uint64_t a1)
{
  unint64_t v2 = sub_2534D3388();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC7BC(uint64_t a1)
{
  unint64_t v2 = sub_2534D33D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC7F8(uint64_t a1)
{
  unint64_t v2 = sub_2534D33D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC834(uint64_t a1)
{
  unint64_t v2 = sub_2534D3258();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC870(uint64_t a1)
{
  unint64_t v2 = sub_2534D3258();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC8AC(uint64_t a1)
{
  unint64_t v2 = sub_2534D32A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC8E8(uint64_t a1)
{
  unint64_t v2 = sub_2534D32A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC924(uint64_t a1)
{
  unint64_t v2 = sub_2534D3128();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC960(uint64_t a1)
{
  unint64_t v2 = sub_2534D3128();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CC99C(uint64_t a1)
{
  unint64_t v2 = sub_2534D3174();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CC9D8(uint64_t a1)
{
  unint64_t v2 = sub_2534D3174();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCA14(uint64_t a1)
{
  unint64_t v2 = sub_2534D31C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCA50(uint64_t a1)
{
  unint64_t v2 = sub_2534D31C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCA8C(uint64_t a1)
{
  unint64_t v2 = sub_2534D3090();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCAC8(uint64_t a1)
{
  unint64_t v2 = sub_2534D3090();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCB04(uint64_t a1)
{
  unint64_t v2 = sub_2534D30DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCB40(uint64_t a1)
{
  unint64_t v2 = sub_2534D30DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCB7C(uint64_t a1)
{
  unint64_t v2 = sub_2534D32F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCBB8(uint64_t a1)
{
  unint64_t v2 = sub_2534D32F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCBF4(uint64_t a1)
{
  unint64_t v2 = sub_2534D333C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCC30(uint64_t a1)
{
  unint64_t v2 = sub_2534D333C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCC6C(uint64_t a1)
{
  unint64_t v2 = sub_2534D320C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCCA8(uint64_t a1)
{
  unint64_t v2 = sub_2534D320C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCCE4(uint64_t a1)
{
  unint64_t v2 = sub_2534D2FF8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCD20(uint64_t a1)
{
  unint64_t v2 = sub_2534D2FF8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCD5C(uint64_t a1)
{
  unint64_t v2 = sub_2534D3420();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCD98(uint64_t a1)
{
  unint64_t v2 = sub_2534D3420();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534CCDD4(uint64_t a1)
{
  unint64_t v2 = sub_2534D346C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534CCE10(uint64_t a1)
{
  unint64_t v2 = sub_2534D346C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void AST.InfixOp.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v22;
  a20 = v23;
  uint64_t v134 = v24;
  uint64_t v26 = v25;
  sub_253462A5C(&qword_269CDC370);
  sub_253465998();
  uint64_t v132 = v28;
  uint64_t v133 = v27;
  MEMORY[0x270FA5388](v27);
  sub_253483644(v29, v93);
  sub_253462A5C(&qword_269CDC378);
  sub_253465998();
  uint64_t v129 = v31;
  uint64_t v130 = v30;
  MEMORY[0x270FA5388](v30);
  sub_2534AF2BC(v32, v93);
  sub_253462A5C(&qword_269CDC380);
  sub_253465998();
  uint64_t v126 = v34;
  uint64_t v127 = v33;
  MEMORY[0x270FA5388](v33);
  sub_2534D92B8(v35, v93);
  sub_253462A5C(&qword_269CDC388);
  sub_253465998();
  uint64_t v123 = v37;
  uint64_t v124 = v36;
  MEMORY[0x270FA5388](v36);
  sub_2534D9B90(v38, v93);
  sub_253462A5C(&qword_269CDC390);
  sub_253465998();
  uint64_t v120 = v40;
  uint64_t v121 = v39;
  MEMORY[0x270FA5388](v39);
  sub_2534D9BC8(v41, v93);
  uint64_t v118 = sub_253462A5C(&qword_269CDC398);
  sub_253465998();
  uint64_t v117 = v42;
  MEMORY[0x270FA5388](v43);
  sub_25346CB04();
  sub_2534D8F5C(v44);
  uint64_t v116 = sub_253462A5C(&qword_269CDC3A0);
  sub_253465998();
  uint64_t v115 = v45;
  MEMORY[0x270FA5388](v46);
  sub_25346CB04();
  sub_2534D8F5C(v47);
  uint64_t v114 = sub_253462A5C(&qword_269CDC3A8);
  sub_253465998();
  uint64_t v113 = v48;
  MEMORY[0x270FA5388](v49);
  sub_2534D8F5C((uint64_t)&v93 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = sub_253462A5C(&qword_269CDC3B0);
  sub_253465998();
  uint64_t v111 = v51;
  MEMORY[0x270FA5388](v52);
  sub_25346CB04();
  sub_2534D8F5C(v53);
  uint64_t v110 = sub_253462A5C(&qword_269CDC3B8);
  sub_253465998();
  uint64_t v109 = v54;
  MEMORY[0x270FA5388](v55);
  sub_25346CB04();
  sub_2534D8F5C(v56);
  uint64_t v108 = sub_253462A5C(&qword_269CDC3C0);
  sub_253465998();
  uint64_t v107 = v57;
  MEMORY[0x270FA5388](v58);
  sub_25346CB04();
  sub_2534D8F5C(v59);
  uint64_t v106 = sub_253462A5C(&qword_269CDC3C8);
  sub_253465998();
  uint64_t v105 = v60;
  MEMORY[0x270FA5388](v61);
  sub_2534D8F5C((uint64_t)&v93 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = sub_253462A5C(&qword_269CDC3D0);
  sub_253465998();
  uint64_t v103 = v63;
  MEMORY[0x270FA5388](v64);
  sub_2534D8F5C((uint64_t)&v93 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_253462A5C(&qword_269CDC3D8);
  sub_253465998();
  uint64_t v101 = v66;
  MEMORY[0x270FA5388](v67);
  sub_25346CB04();
  sub_2534D8F5C(v68);
  uint64_t v100 = sub_253462A5C(&qword_269CDC3E0);
  sub_253465998();
  uint64_t v99 = v69;
  MEMORY[0x270FA5388](v70);
  sub_25346CB04();
  sub_2534D8F5C(v71);
  uint64_t v98 = sub_253462A5C(&qword_269CDC3E8);
  sub_253465998();
  uint64_t v97 = v72;
  MEMORY[0x270FA5388](v73);
  sub_25346CB04();
  sub_2534D8F5C(v74);
  uint64_t v96 = sub_253462A5C(&qword_269CDC3F0);
  sub_253465998();
  uint64_t v95 = v75;
  MEMORY[0x270FA5388](v76);
  sub_2534B3294();
  uint64_t v77 = sub_253462A5C(&qword_269CDC3F8);
  sub_253465998();
  uint64_t v94 = v78;
  MEMORY[0x270FA5388](v79);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDC400);
  sub_253465998();
  uint64_t v93 = v80;
  MEMORY[0x270FA5388](v81);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDC408);
  sub_253465998();
  uint64_t v137 = v82;
  uint64_t v138 = v83;
  MEMORY[0x270FA5388](v82);
  sub_253465A3C();
  sub_2534D9A50(v26);
  sub_2534D2FAC();
  uint64_t v136 = v20;
  sub_253B0A680();
  switch((char)v134)
  {
    case 1:
      HIBYTE(a10) = 1;
      sub_2534D3504();
      sub_253B0A3A0();
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v21, v77);
      goto LABEL_24;
    case 2:
      HIBYTE(a10) = 2;
      sub_2534D34B8();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v117;
      goto LABEL_15;
    case 3:
      HIBYTE(a10) = 3;
      sub_2534D346C();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v120;
      goto LABEL_15;
    case 4:
      HIBYTE(a10) = 4;
      sub_2534D3420();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v123;
      goto LABEL_15;
    case 5:
      HIBYTE(a10) = 5;
      sub_2534D33D4();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v126;
      goto LABEL_15;
    case 6:
      HIBYTE(a10) = 6;
      sub_2534D3388();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v129;
      goto LABEL_15;
    case 7:
      HIBYTE(a10) = 7;
      sub_2534D333C();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v132;
      goto LABEL_15;
    case 8:
      HIBYTE(a10) = 8;
      sub_2534D32F0();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v135;
      goto LABEL_15;
    case 9:
      HIBYTE(a10) = 9;
      sub_2534D32A4();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &v138;
      goto LABEL_15;
    case 10:
      HIBYTE(a10) = 10;
      sub_2534D3258();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &a10;
      goto LABEL_15;
    case 11:
      HIBYTE(a10) = 11;
      sub_2534D320C();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &a13;
      goto LABEL_15;
    case 12:
      HIBYTE(a10) = 12;
      sub_2534D31C0();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v89 = &a16;
LABEL_15:
      uint64_t v90 = *(v89 - 32);
      goto LABEL_23;
    case 13:
      HIBYTE(a10) = 13;
      sub_2534D3174();
      sub_2534D8BA4();
      uint64_t v87 = sub_2534D8DA0();
      uint64_t v90 = v118;
      goto LABEL_23;
    case 14:
      HIBYTE(a10) = 14;
      sub_2534D3128();
      uint64_t v91 = v119;
      sub_2534D8BA4();
      uint64_t v92 = v120;
      uint64_t v90 = v121;
      goto LABEL_22;
    case 15:
      HIBYTE(a10) = 15;
      sub_2534D30DC();
      uint64_t v91 = v122;
      sub_2534D8BA4();
      uint64_t v92 = v123;
      uint64_t v90 = v124;
      goto LABEL_22;
    case 16:
      HIBYTE(a10) = 16;
      sub_2534D3090();
      uint64_t v91 = v125;
      sub_2534D8BA4();
      uint64_t v92 = v126;
      uint64_t v90 = v127;
      goto LABEL_22;
    case 17:
      HIBYTE(a10) = 17;
      sub_2534D3044();
      uint64_t v91 = v128;
      sub_2534D8BA4();
      uint64_t v92 = v129;
      uint64_t v90 = v130;
      goto LABEL_22;
    case 18:
      HIBYTE(a10) = 18;
      sub_2534D2FF8();
      uint64_t v91 = v131;
      sub_2534D8BA4();
      uint64_t v92 = v132;
      uint64_t v90 = v133;
LABEL_22:
      uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      uint64_t v87 = v91;
LABEL_23:
      v88(v87, v90);
LABEL_24:
      uint64_t v85 = sub_2534D9778();
      break;
    default:
      HIBYTE(a10) = 0;
      sub_2534D3550();
      sub_253B0A3A0();
      sub_2534DA098();
      sub_2534659CC();
      v84();
      uint64_t v85 = sub_2534D99FC();
      break;
  }
  v86(v85);
  sub_2534847C8();
}

uint64_t _s16IntelligenceFlow3ASTO0aB14PlannerSupportE8PrefixOpO9hashValueSivg_0()
{
  return sub_253B0A630();
}

void AST.InfixOp.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  sub_253462A5C(&qword_269CDC4B0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25347FA68(v4, v54);
  sub_253462A5C(&qword_269CDC4B8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253483628(v6, v55);
  sub_253462A5C(&qword_269CDC4C0);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253483644(v8, v56);
  sub_253462A5C(&qword_269CDC4C8);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534D8F68(v10, v57);
  sub_253462A5C(&qword_269CDC4D0);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_2534D9280(v12, v58);
  sub_253462A5C(&qword_269CDC4D8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534AF2BC(v14, v59);
  sub_253462A5C(&qword_269CDC4E0);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_2534D929C(v16, v60);
  sub_253462A5C(&qword_269CDC4E8);
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  sub_2534D9248(v18, v61);
  sub_253462A5C(&qword_269CDC4F0);
  sub_253465998();
  MEMORY[0x270FA5388](v19);
  sub_2534D92B8(v20, v62);
  sub_253462A5C(&qword_269CDC4F8);
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  sub_2534D9BAC(v22, v63);
  sub_253462A5C(&qword_269CDC500);
  sub_253465998();
  MEMORY[0x270FA5388](v23);
  sub_2534AF2A0(v24, v64);
  sub_253462A5C(&qword_269CDC508);
  sub_253465998();
  MEMORY[0x270FA5388](v25);
  sub_2534D8F84(v26, v65);
  sub_253462A5C(&qword_269CDC510);
  sub_253465998();
  MEMORY[0x270FA5388](v27);
  sub_2534D9264(v28, v66);
  sub_253462A5C(&qword_269CDC518);
  sub_253465998();
  MEMORY[0x270FA5388](v29);
  sub_2534D9B90(v30, v67);
  sub_253462A5C(&qword_269CDC520);
  sub_253465998();
  MEMORY[0x270FA5388](v31);
  sub_2534B33C8(v32, v68);
  sub_253462A5C(&qword_269CDC528);
  sub_253465998();
  MEMORY[0x270FA5388](v33);
  sub_2534D9BE4(v34, v69);
  sub_253462A5C(&qword_269CDC530);
  sub_253465998();
  MEMORY[0x270FA5388](v35);
  sub_2534D92F0(v36, v70);
  sub_253462A5C(&qword_269CDC538);
  sub_253465998();
  MEMORY[0x270FA5388](v37);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDC540);
  sub_253465998();
  MEMORY[0x270FA5388](v38);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDC548);
  sub_253465998();
  MEMORY[0x270FA5388](v39);
  sub_2534D9B58();
  sub_2534DA2C4();
  sub_2534D2FAC();
  sub_253B0A660();
  if (v0) {
    goto LABEL_26;
  }
  uint64_t v40 = sub_253B0A390();
  if (!*(void *)(v40 + 16)
    || (sub_2534D96C0(),
        uint64_t v41 = *(unsigned __int8 *)(v40 + 32),
        sub_25347B78C(1, v42, v40, v40 + 32, 0, v43),
        uint64_t v45 = v44,
        unint64_t v47 = v46,
        swift_bridgeObjectRelease(),
        v45 != v47 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v49 = v48;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v49 = &type metadata for AST.InfixOp;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v50();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534D91A0();
    v51();
LABEL_26:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
    goto LABEL_27;
  }
  switch(v41)
  {
    case 1:
      sub_2534D3504();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 2:
      sub_2534D34B8();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 3:
      sub_2534D346C();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 4:
      sub_2534D3420();
      sub_2534D8B84();
      sub_2534D98A8();
      break;
    case 5:
      sub_2534D33D4();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 6:
      sub_2534D3388();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 7:
      sub_2534D333C();
      sub_2534D8B84();
      sub_2534D8DA0();
      break;
    case 8:
      sub_2534D32F0();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 9:
      sub_2534D32A4();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 10:
      sub_2534D3258();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 11:
      sub_2534D320C();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 12:
      sub_2534D31C0();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 13:
      sub_2534D3174();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 14:
      sub_2534D3128();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 15:
      sub_2534D30DC();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 16:
      sub_2534D3090();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 17:
      sub_2534D3044();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
    case 18:
      sub_2534D2FF8();
      sub_2534D8B60();
      sub_2534D8E50();
      break;
    default:
      sub_2534D3550();
      sub_2534D8B60();
      sub_2534D8C7C();
      break;
  }
  sub_2534659CC();
  v52();
  swift_unknownObjectRelease();
  sub_2534D9A08();
  v53();
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
LABEL_27:
  sub_2534847C8();
}

BOOL sub_2534CE6C0(char *a1, char *a2)
{
  return static AST.InfixOp.== infix(_:_:)(*a1, *a2);
}

void sub_2534CE6CC(unsigned char *a1@<X8>)
{
  AST.InfixOp.init(from:)();
  if (!v1) {
    *a1 = v3;
  }
}

#error "2534CE708: call analysis failed (funcsize=7)"

uint64_t sub_2534CE714()
{
  return j___s16IntelligenceFlow3ASTO0aB14PlannerSupportE8PrefixOpO9hashValueSivg_0(*v0);
}

uint64_t AST.Program.description.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_2534B4E1C(v0);
  swift_bridgeObjectRelease();
  sub_253462A5C(&qword_269CDC550);
  sub_2534D359C();
  sub_253B096A0();
  swift_bridgeObjectRelease();
  return sub_2534ACF74();
}

uint64_t AST.Stmt.description.getter(unint64_t a1)
{
  return sub_2534CEAEC(0, a1);
}

uint64_t AST.Program.encode(to:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_2534B4E1C(v0);
  sub_253462A5C(&qword_269CDC550);
  sub_2534D359C();
  sub_253B096A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253B09870();
  return swift_bridgeObjectRelease();
}

uint64_t AST.Program.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_253476B80(a1, (uint64_t)v8);
  uint64_t v5 = sub_253B097D0();
  if (v2) {
    return _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  }
  static Parser.parse(string:)(v5, v6, v8);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v8[0];
  return result;
}

uint64_t sub_2534CE92C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return AST.Program.init(from:)(a1, a2);
}

uint64_t sub_2534CE944()
{
  return AST.Program.encode(to:)();
}

uint64_t sub_2534CE95C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = a1 + 0x4000000000000000;
  uint64_t v6 = 2 * a1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  while (1)
  {
    unint64_t v9 = *(void *)(a2 + 8 * v8 + 32);
    if (v9 >> 62)
    {
      if (v9 >> 62 == 1)
      {
        swift_retain();
        sub_2534CF030(a1);
      }
      else
      {
        swift_retain();
        sub_2534CF188(a1);
      }
      goto LABEL_9;
    }
    if (v5 < 0) {
      break;
    }
    unint64_t v10 = *(void *)(v9 + 16);
    swift_retain();
    sub_2534C1C84(v10);
    MEMORY[0x25A268900](32, 0xE100000000000000, v6);
    AST.Expr.description.getter();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_25346CA4C(v10);
LABEL_9:
    ++v8;
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253B09860();
    uint64_t result = swift_release();
    if (v3 == v8)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2534CEAEC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1) {
      return sub_2534CF030(result);
    }
    else {
      return sub_2534CF188(result);
    }
  }
  else if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = 2 * result;
    unint64_t v3 = *(void *)(a2 + 16);
    sub_2534C1C84(v3);
    uint64_t v4 = MEMORY[0x25A268900](32, 0xE100000000000000, v2);
    AST.Expr.description.getter();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_25346CA4C(v3);
    return v4;
  }
  return result;
}

uint64_t AST.Expr.description.getter()
{
  type metadata accessor for AST.UpdateParameters();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v2);
  sub_2534835B0();
  uint64_t v3 = sub_253B059D0();
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_253465A3C();
  uint64_t v7 = *v0;
  switch((unint64_t)*v0 >> 60)
  {
    case 1uLL:
      uint64_t v8 = swift_projectBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v8, v3);
      sub_253B05970();
      sub_2534D9B10();
      sub_2534D91A0();
      v9();
      return sub_2534DA2E4();
    case 2uLL:
      AST.Literal.description.getter(*(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10), *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18), *(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x20));
      return sub_2534DA2E4();
    case 3uLL:
      unint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      sub_2534C1C84(v10);
      sub_2534D973C();
      sub_253B09860();
      uint64_t v11 = swift_bridgeObjectRelease();
      AST.Expr.description.getter(v11);
      sub_253B09860();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 4uLL:
      uint64_t v12 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v10 = *(void *)(v12 + 24);
      unint64_t v13 = *(void *)(v12 + 32);
      char v14 = *(unsigned char *)(v12 + 16);
      sub_2534DA7CC();
      sub_253B09860();
      AST.InfixOp.description.getter(v14);
      sub_253B09860();
      swift_bridgeObjectRelease();
      uint64_t v15 = sub_253B09860();
      AST.Expr.description.getter(v15);
      sub_2534DA3DC();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    case 5uLL:
      unint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v16 = sub_2534C1C84(v10);
      AST.Expr.description.getter(v16);
      sub_253B09860();
      sub_2534D9718();
      sub_253B09860();
      goto LABEL_10;
    case 6uLL:
      uint64_t v17 = v7 & 0xFFFFFFFFFFFFFFFLL;
      unint64_t v10 = *(void *)(v17 + 16);
      unint64_t v13 = *(void *)(v17 + 24);
      sub_2534DA7CC();
      uint64_t v18 = sub_253B09860();
      AST.Expr.description.getter(v18);
      sub_2534DA3DC();
      swift_bridgeObjectRelease();
      sub_253B09860();
LABEL_9:
      sub_25346CA4C(v13);
LABEL_10:
      sub_25346CA4C(v10);
      break;
    case 7uLL:
      sub_2534CF6B8(*(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x10), *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x18), *(void *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 0x38));
      break;
    case 8uLL:
      swift_projectBox();
      sub_2534D898C();
      sub_253B0A000();
      swift_bridgeObjectRelease();
      sub_2534D8A30((uint64_t)&unk_269CDC560);
      sub_253B0A480();
      sub_2534DA3DC();
      swift_bridgeObjectRelease();
      sub_253B09860();
      sub_2534D35F0();
      swift_bridgeObjectRetain();
      sub_253B09590();
      sub_2534DA3DC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253B09860();
      sub_2534D89E0();
      break;
    case 9uLL:
      return sub_2534DA2E4();
    default:
      swift_bridgeObjectRetain();
      break;
  }
  return sub_2534DA2E4();
}

uint64_t sub_2534CF030(uint64_t result)
{
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    uint64_t v4 = v1[1];
    uint64_t v3 = v1[2];
    unint64_t v5 = *v1;
    uint64_t v6 = MEMORY[0x25A268900](32, 0xE100000000000000, 2 * result);
    swift_bridgeObjectRetain();
    sub_253B09860();
    sub_2534C1C84(v5);
    AST.Expr.description.getter();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_25346CA4C(v5);
    sub_253B09860();
    uint64_t v7 = v2 + 1;
    sub_2534CE95C(v7, v4);
    sub_253B09860();
    swift_bridgeObjectRelease();
    if (v3)
    {
      sub_253B09860();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_2534CE95C(v7, v3);
      sub_253B09860();
    }
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

uint64_t sub_2534CF188(uint64_t result)
{
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v5 = MEMORY[0x25A268900](32, 0xE100000000000000, 2 * result);
    sub_253B0A000();
    swift_bridgeObjectRelease();
    sub_253B09860();
    swift_bridgeObjectRetain();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_253B09860();
    sub_2534C1C84(v4);
    AST.Expr.description.getter();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_25346CA4C(v4);
    sub_253B09860();
    sub_2534CE95C(v2 + 1, v3);
    sub_253B09860();
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_2534CF2CC()
{
  return AST.Stmt.description.getter(*v0);
}

uint64_t AST.Literal.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = 1701736270;
  switch(a3)
  {
    case 1:
      sub_2534D3668();
      return sub_253B09F00();
    case 2:
      return sub_253B09C30();
    case 3:
      sub_2534D970C();
      String.escapedForPython.getter();
      sub_2534DA93C();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      return v24;
    case 4:
      sub_2534DA93C();
      uint64_t v6 = *(void *)(a1 + 16);
      if (v6)
      {
        uint64_t v7 = (unint64_t *)(a1 + 32);
        sub_2534D363C(a1, a2, 4);
        swift_bridgeObjectRetain();
        do
        {
          unint64_t v8 = *v7++;
          unint64_t v9 = sub_2534C1C84(v8);
          AST.Expr.description.getter(v9);
          sub_253B09860();
          swift_bridgeObjectRelease();
          sub_253B09860();
          sub_25346CA4C(v8);
          --v6;
        }
        while (v6);
        sub_2534D23E4(a1, a2, 4);
        sub_2534D23E4(a1, a2, 4);
        sub_2534CFBC8(2);
      }
      goto LABEL_33;
    case 5:
      sub_2534DA93C();
      uint64_t v10 = a1 + 64;
      sub_2534D8E34();
      unint64_t v13 = v12 & v11;
      int64_t v15 = (unint64_t)(v14 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v16 = 0;
      if (v13) {
        goto LABEL_14;
      }
      break;
    case 6:
      return result;
    default:
      if (a1) {
        return 1702195796;
      }
      else {
        return 0x65736C6146;
      }
  }
  while (1)
  {
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v15) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v10 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v10 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v15) {
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v10 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v13 = (v20 - 1) & v20;
    for (unint64_t i = __clz(__rbit64(v20)) + (v16 << 6); ; unint64_t i = v17 | (v16 << 6))
    {
      unint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
      swift_bridgeObjectRetain();
      sub_2534C1C84(v22);
      sub_2534D99FC();
      String.escapedForPython.getter();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_253B09860();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253B09860();
      swift_bridgeObjectRelease();
      uint64_t v23 = sub_253B09860();
      AST.Expr.description.getter(v23);
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      sub_25346CA4C(v22);
      if (!v13) {
        break;
      }
LABEL_14:
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 < v15)
  {
    unint64_t v20 = *(void *)(v10 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if (v16 >= v15) {
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v10 + 8 * v16);
        ++v21;
        if (v20) {
          goto LABEL_28;
        }
      }
LABEL_37:
      __break(1u);
      JUMPOUT(0x2534CF69CLL);
    }
    int64_t v16 = v21;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  if (*(void *)(a1 + 16)) {
    sub_2534CFBC8(2);
  }
LABEL_33:
  sub_253B09860();
  return v24;
}

uint64_t sub_2534CF6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_2534CF75C(a3);
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  sub_253B09860();
  sub_2534CFE94(v4, v6);
  sub_253B09860();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253B09860();
  return a1;
}

uint64_t sub_2534CF75C(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_2534B4690(a1);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v44 = v1;
    swift_bridgeObjectRetain();
    uint64_t v5 = (unint64_t *)(v3 + 48);
    uint64_t v6 = (void *)MEMORY[0x263F8EE80];
    do
    {
      uint64_t v8 = *(v5 - 2);
      uint64_t v7 = *(v5 - 1);
      unint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      sub_2534C1C84(v9);
      swift_bridgeObjectRetain();
      sub_2534C1C84(v9);
      sub_25346CA4C(v9);
      swift_bridgeObjectRetain();
      sub_2534C1C84(v9);
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      v47[0] = v6;
      unint64_t v10 = sub_25396E0AC();
      if (__OFADD__(v6[2], (v11 & 1) == 0))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        sub_253B0A550();
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }
      unint64_t v12 = v10;
      char v13 = v11;
      sub_253462A5C(&qword_269CDCD08);
      if (sub_253B0A190())
      {
        unint64_t v14 = sub_25396E0AC();
        if ((v13 & 1) != (v15 & 1)) {
          goto LABEL_47;
        }
        unint64_t v12 = v14;
      }
      uint64_t v6 = (void *)v47[0];
      if (v13)
      {
        uint64_t v16 = *(void *)(v47[0] + 56);
        sub_25346CA4C(*(void *)(v16 + 8 * v12));
        *(void *)(v16 + 8 * v12) = v9;
      }
      else
      {
        *(void *)(v47[0] + 8 * (v12 >> 6) + 64) |= 1 << v12;
        unint64_t v17 = (void *)(v6[6] + 16 * v12);
        *unint64_t v17 = v8;
        v17[1] = v7;
        *(void *)(v6[7] + 8 * v12) = v9;
        uint64_t v18 = v6[2];
        BOOL v19 = __OFADD__(v18, 1);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_46;
        }
        uint64_t v6[2] = v20;
        swift_bridgeObjectRetain();
      }
      v5 += 3;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_25346CA4C(v9);
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v1 = v44;
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x263F8EE80];
  }
  swift_bridgeObjectRelease();
  sub_25397174C(v1, v47);
  uint64_t v21 = v47[0];
  uint64_t v45 = v47[1];
  int64_t v22 = v47[3];
  unint64_t v23 = v47[4];
  int64_t v24 = (unint64_t)(v47[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v43 = MEMORY[0x263F8EE78];
  while (v23)
  {
    unint64_t v25 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v26 = v25 | (v22 << 6);
LABEL_35:
    uint64_t v31 = *(void *)(v21 + 48) + 32 * v26;
    uint64_t v32 = *(void *)v31;
    int v33 = *(unsigned __int8 *)(v31 + 24);
    unint64_t v34 = *(void *)(*(void *)(v21 + 56) + 8 * v26);
    if (v33 == 2)
    {
      sub_2534C1C84(*(void *)(*(void *)(v21 + 56) + 8 * v26));
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v37 = v43;
      }
      else
      {
        sub_253522C14();
        uint64_t v37 = v40;
      }
      unint64_t v38 = *(void *)(v37 + 16);
      if (v38 >= *(void *)(v37 + 24) >> 1)
      {
        sub_253522C14();
        uint64_t v37 = v41;
      }
      *(void *)(v37 + 16) = v38 + 1;
      uint64_t v43 = v37;
      uint64_t v39 = v37 + 16 * v38;
      *(void *)(v39 + 32) = v32;
      *(void *)(v39 + 40) = v34;
    }
    else
    {
      uint64_t v36 = *(void *)(v31 + 8);
      uint64_t v35 = *(void *)(v31 + 16);
      sub_25346CA34(*(void *)v31, v36, v35, *(unsigned char *)(v31 + 24));
      sub_2534C1C84(v34);
      sub_2534D2608(v32, v36, v35, v33);
      sub_25346CA4C(v34);
    }
  }
  int64_t v27 = v22 + 1;
  if (__OFADD__(v22, 1)) {
    goto LABEL_45;
  }
  if (v27 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v27);
  int64_t v29 = v22 + 1;
  if (v28) {
    goto LABEL_34;
  }
  int64_t v29 = v22 + 2;
  if (v22 + 2 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_34;
  }
  int64_t v29 = v22 + 3;
  if (v22 + 3 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_34;
  }
  int64_t v29 = v22 + 4;
  if (v22 + 4 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_34;
  }
  int64_t v29 = v22 + 5;
  if (v22 + 5 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_34;
  }
  int64_t v29 = v22 + 6;
  if (v22 + 6 >= v24) {
    goto LABEL_43;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28)
  {
LABEL_34:
    unint64_t v23 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    int64_t v22 = v29;
    goto LABEL_35;
  }
  int64_t v30 = v22 + 7;
  while (v30 < v24)
  {
    unint64_t v28 = *(void *)(v45 + 8 * v30++);
    if (v28)
    {
      int64_t v29 = v30 - 1;
      goto LABEL_34;
    }
  }
LABEL_43:
  swift_release();
  uint64_t v46 = v43;
  swift_bridgeObjectRetain();
  sub_2534B49BC(&v46);
  swift_bridgeObjectRelease();
  sub_2534B4D50(v46);
  swift_release();
  return (uint64_t)v6;
}

uint64_t sub_2534CFBC8(uint64_t result)
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0) {
        uint64_t v3 = HIBYTE(v2) & 0xF;
      }
      else {
        uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v4 = sub_253B09830();
      if (v5) {
        goto LABEL_14;
      }
      if (4 * v3 >= v4 >> 14)
      {
        return MEMORY[0x270F9D650]();
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x270F9D650]();
  }
  return result;
}

uint64_t sub_2534CFC78()
{
  return AST.Literal.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t AST.PrefixOp.description.getter(char a1)
{
  if (!a1) {
    return 43;
  }
  if (a1 == 1) {
    return 45;
  }
  return 544501614;
}

uint64_t sub_2534CFCBC()
{
  return AST.PrefixOp.description.getter(*v0);
}

uint64_t AST.InfixOp.description.getter(char a1)
{
  uint64_t result = 61;
  switch(a1)
  {
    case 1:
      uint64_t result = 43;
      break;
    case 2:
      uint64_t result = 15659;
      break;
    case 3:
      uint64_t result = 45;
      break;
    case 4:
      uint64_t result = 15661;
      break;
    case 5:
      uint64_t result = 47;
      break;
    case 6:
      uint64_t result = 15663;
      break;
    case 7:
      uint64_t result = 42;
      break;
    case 8:
      uint64_t result = 15658;
      break;
    case 9:
      uint64_t result = 10794;
      break;
    case 10:
      uint64_t result = 15677;
      break;
    case 11:
      uint64_t result = 15649;
      break;
    case 12:
      uint64_t result = 28265;
      break;
    case 13:
      uint64_t result = 15678;
      break;
    case 14:
      uint64_t result = 62;
      break;
    case 15:
      uint64_t result = 15676;
      break;
    case 16:
      uint64_t result = 60;
      break;
    case 17:
      uint64_t result = 6581857;
      break;
    case 18:
      uint64_t result = 29295;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534CFE04()
{
  return AST.InfixOp.description.getter(*v0);
}

uint64_t AST.IfStmt.description.getter()
{
  return sub_2534CF030(0);
}

uint64_t AST.ForInStmt.description.getter()
{
  return sub_2534CF188(0);
}

uint64_t sub_2534CFE94(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_2534B4A28(a2);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_2534B4B10(v3);
  swift_bridgeObjectRelease();
  sub_2534783F0();
  sub_253462A5C(&qword_269CDC550);
  sub_2534D359C();
  uint64_t v4 = sub_253B096A0();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2534CFF64(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_253B0A460();
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return sub_2534D0564(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_124;
  }
  uint64_t v5 = result;
  uint64_t result = sub_2539DF6F0(v3 / 2);
  uint64_t v87 = a1;
  uint64_t v88 = result;
  uint64_t v92 = v6;
  uint64_t v90 = v3;
  if (v3 <= 0)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v30 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_90:
    if (v30 < 2)
    {
LABEL_101:
      uint64_t result = swift_bridgeObjectRelease();
      if (v90 >= -1)
      {
        *(void *)(v88 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    uint64_t v79 = *v87;
    while (1)
    {
      unint64_t v80 = v30 - 2;
      if (v30 < 2) {
        break;
      }
      if (!v79) {
        goto LABEL_133;
      }
      uint64_t v81 = *(void *)(v9 + 32 + 16 * v80);
      uint64_t v82 = *(void *)(v9 + 32 + 16 * (v30 - 1) + 8);
      uint64_t result = sub_2534D05D0((char *)(v79 + 16 * v81), (char *)(v79 + 16 * *(void *)(v9 + 32 + 16 * (v30 - 1))), v79 + 16 * v82, v92);
      if (v1) {
        goto LABEL_86;
      }
      if (v82 < v81) {
        goto LABEL_119;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_253970884();
        uint64_t v9 = result;
      }
      if (v80 >= *(void *)(v9 + 16)) {
        goto LABEL_120;
      }
      uint64_t v83 = (void *)(v9 + 32 + 16 * v80);
      *uint64_t v83 = v81;
      v83[1] = v82;
      unint64_t v84 = *(void *)(v9 + 16);
      if (v30 > v84) {
        goto LABEL_121;
      }
      uint64_t result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v30 - 1)), (const void *)(v9 + 32 + 16 * v30), 16 * (v84 - v30));
      *(void *)(v9 + 16) = v84 - 1;
      unint64_t v30 = v84 - 1;
      if (v84 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v85 = *a1 - 16;
  uint64_t v86 = *a1 + 32;
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v89 = v5;
  uint64_t v91 = *a1;
  while (1)
  {
    uint64_t v10 = v7++;
    if (v7 < v3)
    {
      uint64_t v11 = *(void *)(v8 + 16 * v7);
      uint64_t v12 = *(void *)(v8 + 16 * v10);
      uint64_t v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        char v13 = (uint64_t *)(v86 + 16 * v10);
        uint64_t v14 = v11;
        while (1)
        {
          uint64_t v16 = *v13;
          v13 += 2;
          uint64_t v15 = v16;
          if (v11 < v12 == v16 >= v14) {
            break;
          }
          ++v7;
          uint64_t v14 = v15;
          if (v7 >= v3)
          {
            uint64_t v7 = v3;
            break;
          }
        }
      }
      if (v11 < v12)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          unint64_t v17 = (long long *)(v85 + 16 * v7);
          uint64_t v18 = v7;
          uint64_t v19 = v10;
          uint64_t v20 = (long long *)(v8 + 16 * v10);
          do
          {
            if (v19 != --v18)
            {
              if (!v8) {
                goto LABEL_132;
              }
              long long v21 = *v20;
              long long *v20 = *v17;
              *unint64_t v17 = v21;
            }
            ++v19;
            --v17;
            ++v20;
          }
          while (v19 < v18);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        uint64_t v22 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v22 >= v3) {
          uint64_t v22 = v3;
        }
        if (v22 < v10) {
          goto LABEL_128;
        }
        if (v7 != v22)
        {
          uint64_t v23 = v85 + 16 * v7;
          do
          {
            uint64_t v24 = *(void *)(v8 + 16 * v7);
            uint64_t v25 = v10;
            uint64_t v26 = v23;
            do
            {
              if (v24 >= *(void *)v26) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              uint64_t v27 = *(void *)(v26 + 24);
              *(_OWORD *)(v26 + 16) = *(_OWORD *)v26;
              *(void *)uint64_t v26 = v24;
              *(void *)(v26 + 8) = v27;
              v26 -= 16;
              ++v25;
            }
            while (v7 != v25);
            ++v7;
            v23 += 16;
          }
          while (v7 != v22);
          uint64_t v7 = v22;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25397078C(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
      uint64_t v9 = result;
    }
    unint64_t v29 = *(void *)(v9 + 16);
    unint64_t v28 = *(void *)(v9 + 24);
    unint64_t v30 = v29 + 1;
    uint64_t v8 = v91;
    if (v29 >= v28 >> 1)
    {
      uint64_t result = (uint64_t)sub_25397078C((char *)(v28 > 1), v29 + 1, 1, (char *)v9);
      uint64_t v8 = v91;
      uint64_t v9 = result;
    }
    *(void *)(v9 + 16) = v30;
    uint64_t v31 = v9 + 32;
    uint64_t v32 = (uint64_t *)(v9 + 32 + 16 * v29);
    *uint64_t v32 = v10;
    v32[1] = v7;
    if (v29) {
      break;
    }
    unint64_t v30 = 1;
LABEL_81:
    uint64_t v5 = v89;
    uint64_t v3 = v90;
    if (v7 >= v90) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v33 = v30 - 1;
    if (v30 >= 4)
    {
      unint64_t v38 = v31 + 16 * v30;
      uint64_t v39 = *(void *)(v38 - 64);
      uint64_t v40 = *(void *)(v38 - 56);
      BOOL v44 = __OFSUB__(v40, v39);
      uint64_t v41 = v40 - v39;
      if (v44) {
        goto LABEL_107;
      }
      uint64_t v43 = *(void *)(v38 - 48);
      uint64_t v42 = *(void *)(v38 - 40);
      BOOL v44 = __OFSUB__(v42, v43);
      uint64_t v36 = v42 - v43;
      char v37 = v44;
      if (v44) {
        goto LABEL_108;
      }
      unint64_t v45 = v30 - 2;
      uint64_t v46 = (uint64_t *)(v31 + 16 * (v30 - 2));
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      BOOL v44 = __OFSUB__(v47, v48);
      uint64_t v49 = v47 - v48;
      if (v44) {
        goto LABEL_109;
      }
      BOOL v44 = __OFADD__(v36, v49);
      uint64_t v50 = v36 + v49;
      if (v44) {
        goto LABEL_111;
      }
      if (v50 >= v41)
      {
        uint64_t v68 = (uint64_t *)(v31 + 16 * v33);
        uint64_t v70 = *v68;
        uint64_t v69 = v68[1];
        BOOL v44 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v44) {
          goto LABEL_117;
        }
        BOOL v61 = v36 < v71;
        goto LABEL_70;
      }
    }
    else
    {
      if (v30 != 3)
      {
        uint64_t v62 = *(void *)(v9 + 32);
        uint64_t v63 = *(void *)(v9 + 40);
        BOOL v44 = __OFSUB__(v63, v62);
        uint64_t v55 = v63 - v62;
        char v56 = v44;
        goto LABEL_64;
      }
      uint64_t v35 = *(void *)(v9 + 32);
      uint64_t v34 = *(void *)(v9 + 40);
      BOOL v44 = __OFSUB__(v34, v35);
      uint64_t v36 = v34 - v35;
      char v37 = v44;
    }
    if (v37) {
      goto LABEL_110;
    }
    unint64_t v45 = v30 - 2;
    uint64_t v51 = (uint64_t *)(v31 + 16 * (v30 - 2));
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    BOOL v54 = __OFSUB__(v52, v53);
    uint64_t v55 = v52 - v53;
    char v56 = v54;
    if (v54) {
      goto LABEL_112;
    }
    uint64_t v57 = (uint64_t *)(v31 + 16 * v33);
    uint64_t v59 = *v57;
    uint64_t v58 = v57[1];
    BOOL v44 = __OFSUB__(v58, v59);
    uint64_t v60 = v58 - v59;
    if (v44) {
      goto LABEL_114;
    }
    if (__OFADD__(v55, v60)) {
      goto LABEL_116;
    }
    if (v55 + v60 >= v36)
    {
      BOOL v61 = v36 < v60;
LABEL_70:
      if (v61) {
        unint64_t v33 = v45;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v56) {
      goto LABEL_113;
    }
    uint64_t v64 = (uint64_t *)(v31 + 16 * v33);
    uint64_t v66 = *v64;
    uint64_t v65 = v64[1];
    BOOL v44 = __OFSUB__(v65, v66);
    uint64_t v67 = v65 - v66;
    if (v44) {
      goto LABEL_115;
    }
    if (v67 < v55) {
      goto LABEL_81;
    }
LABEL_72:
    uint64_t v72 = v9;
    unint64_t v73 = v33 - 1;
    if (v33 - 1 >= v30)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    uint64_t v74 = (uint64_t *)(v31 + 16 * v73);
    uint64_t v75 = *v74;
    uint64_t v76 = (void *)(v31 + 16 * v33);
    uint64_t v77 = v76[1];
    uint64_t result = sub_2534D05D0((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v92);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_104;
    }
    if (v33 > *(void *)(v72 + 16)) {
      goto LABEL_105;
    }
    *uint64_t v74 = v75;
    *(void *)(v31 + 16 * v73 + 8) = v77;
    unint64_t v78 = *(void *)(v72 + 16);
    if (v33 >= v78) {
      goto LABEL_106;
    }
    uint64_t v9 = v72;
    unint64_t v30 = v78 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v31 + 16 * v33), v76 + 2, 16 * (v78 - 1 - v33));
    *(void *)(v72 + 16) = v78 - 1;
    uint64_t v8 = v91;
    if (v78 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  uint64_t result = swift_bridgeObjectRelease();
  if (v90 < -1) {
    goto LABEL_125;
  }
  *(void *)(v88 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534D0564(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 16 * a3 - 16;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 16 * a3);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)v8) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = *(void *)(v8 + 24);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(void *)uint64_t v8 = v6;
        *(void *)(v8 + 8) = v9;
        v8 -= 16;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_2534D05D0(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_253524F54(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_39;
    }
    uint64_t v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      uint64_t v20 = v6 - 16;
      if (*((void *)v12 - 2) >= *((void *)v6 - 2))
      {
        BOOL v22 = v19 != v12 || v18 >= v12;
        uint64_t v20 = v12 - 16;
        v12 -= 16;
        if (!v22) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v19 != v6 || v18 >= v6;
        v6 -= 16;
        if (!v21) {
          goto LABEL_35;
        }
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
LABEL_35:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_39;
      }
    }
  }
  sub_253524F54(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*(void *)v6 >= *(void *)v4)
    {
      uint64_t v14 = v4;
      BOOL v15 = v7 == v4;
      v4 += 16;
      if (!v15) {
        goto LABEL_11;
      }
LABEL_12:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_17;
      }
    }
    uint64_t v14 = v6;
    BOOL v15 = v7 == v6;
    v6 += 16;
    if (v15) {
      goto LABEL_12;
    }
LABEL_11:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v14;
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v6 = v7;
LABEL_39:
  sub_253524F54(v4, (v12 - v4) / 16, v6);
  return 1;
}

void sub_2534D0758()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for AST.FlatValue(0);
  uint64_t v7 = sub_25346CB34(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534AF2BC(v8, v34);
  uint64_t v9 = sub_253462A5C(&qword_269CDCCD8);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_2534D8E78();
  MEMORY[0x270FA5388](v11);
  sub_2534D9EC0();
  uint64_t v36 = v3 + 64;
  sub_2534D8E34();
  uint64_t v14 = v13 & v12;
  sub_2534DA27C();
  uint64_t v37 = v15;
  uint64_t v35 = v15 - 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  uint64_t v38 = 0;
  if (!v14) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v17 = v16;
  sub_2534DA484();
  while (2)
  {
    sub_2534DA6D4();
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_253462A5C(&qword_269CDCCE0);
    sub_2534D898C();
    *uint64_t v0 = v20;
    v0[1] = v19;
    sub_2534D9344((uint64_t)v0);
    uint64_t v16 = v17;
    while (1)
    {
      sub_2534D8A74((uint64_t)v0, v1, &qword_269CDCCD8);
      uint64_t v29 = sub_253462A5C(&qword_269CDCCE0);
      sub_2534D8B48(v1, 1, v29);
      if (v30)
      {
        swift_release();
        sub_253B0A600();
        sub_253465A14();
        return;
      }
      sub_2534D8938();
      uint64_t v31 = *(void *)(v5 + 64);
      long long v32 = *(_OWORD *)(v5 + 16);
      v39[0] = *(_OWORD *)v5;
      v39[1] = v32;
      long long v33 = *(_OWORD *)(v5 + 48);
      v39[2] = *(_OWORD *)(v5 + 32);
      v39[3] = v33;
      uint64_t v40 = v31;
      sub_253B09630();
      swift_bridgeObjectRelease();
      AST.FlatValue.hash(into:)(v39);
      sub_2534D89E0();
      v16 ^= sub_253B0A630();
      if (v14) {
        goto LABEL_2;
      }
LABEL_4:
      uint64_t v21 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      if (v21 < v37)
      {
        if (*(void *)(v36 + 8 * v21)) {
          goto LABEL_7;
        }
        uint64_t v23 = v38 + 2;
        ++v38;
        if (v21 + 1 < v37)
        {
          if (*(void *)(v36 + 8 * v23)) {
            goto LABEL_7;
          }
          uint64_t v24 = v21 + 2;
          uint64_t v38 = v21 + 1;
          if (v21 + 2 < v37) {
            break;
          }
        }
      }
LABEL_17:
      sub_253462A5C(&qword_269CDCCE0);
      uint64_t v26 = sub_2534D9730();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v26, v27, 1, v28);
      uint64_t v14 = 0;
    }
    if (*(void *)(v36 + 8 * v24))
    {
LABEL_7:
      uint64_t v17 = v16;
      sub_2534DA1BC();
      uint64_t v38 = v22;
      continue;
    }
    break;
  }
  while (!__OFADD__(v24, 1))
  {
    if (v24 + 1 >= v37)
    {
      uint64_t v38 = v35;
      goto LABEL_17;
    }
    sub_2534D8EB0();
    if (v25) {
      goto LABEL_7;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_2534D0A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  int64_t v11 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    unint64_t v17 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    uint64_t v18 = *(void *)(a1 + 64);
    long long v19 = *(_OWORD *)(a1 + 16);
    v21[0] = *(_OWORD *)a1;
    v21[1] = v19;
    long long v20 = *(_OWORD *)(a1 + 48);
    void v21[2] = *(_OWORD *)(a1 + 32);
    void v21[3] = v20;
    uint64_t v22 = v18;
    unint64_t v23 = v17;
    swift_bridgeObjectRetain();
    sub_2534C1C84(v17);
    sub_253B09630();
    swift_bridgeObjectRelease();
    AST.Expr.hash(into:)(v21);
    sub_25346CA4C(v17);
    uint64_t result = sub_253B0A630();
    v10 ^= result;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v14 >= v8) {
      goto LABEL_19;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_19;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v11);
      if (!v15) {
        break;
      }
    }
LABEL_16:
    unint64_t v7 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v8)
  {
LABEL_19:
    swift_release();
    return sub_253B0A600();
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_19;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_16;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_2534D0C40(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = *(void *)(a2 + 48) + 32 * i;
    uint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    int v18 = *(unsigned __int8 *)(v14 + 24);
    unint64_t v19 = *(void *)(*(void *)(a2 + 56) + 16 * i + 8);
    uint64_t v20 = *(void *)(a1 + 64);
    long long v21 = *(_OWORD *)(a1 + 16);
    v30[0] = *(_OWORD *)a1;
    v30[1] = v21;
    long long v22 = *(_OWORD *)(a1 + 48);
    v30[2] = *(_OWORD *)(a1 + 32);
    v30[3] = v22;
    uint64_t v31 = v20;
    if (!v18)
    {
      sub_253B0A600();
      sub_25346CA34(v16, v15, v17, 0);
      sub_2534C1C84(v19);
      sub_253B09630();
      uint64_t v23 = v16;
      uint64_t v24 = v15;
      uint64_t v25 = v17;
      unsigned __int8 v26 = 0;
      goto LABEL_21;
    }
    if (v18 == 1)
    {
      sub_253B0A600();
      sub_25346CA34(v16, v15, v17, 1u);
      sub_2534C1C84(v19);
      sub_253B09630();
      sub_253B0A600();
      uint64_t v23 = v16;
      uint64_t v24 = v15;
      uint64_t v25 = v17;
      unsigned __int8 v26 = 1;
LABEL_21:
      sub_2534D2608(v23, v24, v25, v26);
      goto LABEL_23;
    }
    sub_253B0A600();
    sub_253B0A600();
    sub_25346CA34(v16, v15, v17, 2u);
    sub_2534C1C84(v19);
LABEL_23:
    sub_253B0A600();
    AST.Expr.hash(into:)(v30);
    sub_25346CA4C(v19);
    uint64_t result = sub_253B0A630();
    v7 ^= result;
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v27) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v27) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v8);
      if (!v12) {
        break;
      }
    }
LABEL_16:
    unint64_t v5 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 2;
  if (v13 >= v27)
  {
LABEL_25:
    swift_release();
    return sub_253B0A600();
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v27) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2534D0EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = *(void *)(a2 + 48) + 32 * i;
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    unint64_t v19 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    int v20 = *(unsigned __int8 *)(v15 + 24);
    uint64_t v21 = *(void *)(a1 + 64);
    long long v22 = *(_OWORD *)(a1 + 16);
    v30[0] = *(_OWORD *)a1;
    v30[1] = v22;
    long long v23 = *(_OWORD *)(a1 + 48);
    v30[2] = *(_OWORD *)(a1 + 32);
    v30[3] = v23;
    uint64_t v31 = v21;
    unint64_t v32 = v19;
    if (!v20)
    {
      sub_253B0A600();
      sub_25346CA34(v17, v16, v18, 0);
      sub_2534C1C84(v19);
      sub_253B09630();
      uint64_t v24 = v17;
      uint64_t v25 = v16;
      uint64_t v26 = v18;
      unsigned __int8 v27 = 0;
      goto LABEL_21;
    }
    if (v20 == 1)
    {
      sub_253B0A600();
      sub_25346CA34(v17, v16, v18, 1u);
      sub_2534C1C84(v19);
      sub_253B09630();
      sub_253B0A600();
      uint64_t v24 = v17;
      uint64_t v25 = v16;
      uint64_t v26 = v18;
      unsigned __int8 v27 = 1;
LABEL_21:
      sub_2534D2608(v24, v25, v26, v27);
      goto LABEL_23;
    }
    sub_253B0A600();
    sub_253B0A600();
    sub_25346CA34(v17, v16, v18, 2u);
    sub_2534C1C84(v19);
LABEL_23:
    AST.Expr.hash(into:)(v30);
    sub_25346CA4C(v19);
    uint64_t result = sub_253B0A630();
    v8 ^= result;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v28) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v28) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v9);
      if (!v13) {
        break;
      }
    }
LABEL_16:
    unint64_t v6 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v28)
  {
LABEL_25:
    swift_release();
    return sub_253B0A600();
  }
  unint64_t v13 = *(void *)(v29 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_2534D1160()
{
  unint64_t result = qword_269CDBF18;
  if (!qword_269CDBF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF18);
  }
  return result;
}

unint64_t sub_2534D11AC()
{
  unint64_t result = qword_269CDBF20;
  if (!qword_269CDBF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF20);
  }
  return result;
}

unint64_t sub_2534D11F8()
{
  unint64_t result = qword_269CDBF28;
  if (!qword_269CDBF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF28);
  }
  return result;
}

unint64_t sub_2534D1244()
{
  unint64_t result = qword_269CDBF30;
  if (!qword_269CDBF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF30);
  }
  return result;
}

unint64_t sub_2534D1290()
{
  unint64_t result = qword_269CDBF40;
  if (!qword_269CDBF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF40);
  }
  return result;
}

unint64_t sub_2534D12DC()
{
  unint64_t result = qword_269CDBF48;
  if (!qword_269CDBF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF48);
  }
  return result;
}

unint64_t sub_2534D1328()
{
  unint64_t result = qword_269CDBF60;
  if (!qword_269CDBF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF60);
  }
  return result;
}

unint64_t sub_2534D1374()
{
  unint64_t result = qword_269CDBF68;
  if (!qword_269CDBF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF68);
  }
  return result;
}

unint64_t sub_2534D13C0()
{
  unint64_t result = qword_269CDBF70;
  if (!qword_269CDBF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF70);
  }
  return result;
}

unint64_t sub_2534D140C()
{
  unint64_t result = qword_269CDBF78;
  if (!qword_269CDBF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF78);
  }
  return result;
}

unint64_t sub_2534D1458()
{
  unint64_t result = qword_269CDBF80;
  if (!qword_269CDBF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF80);
  }
  return result;
}

unint64_t sub_2534D14A4()
{
  unint64_t result = qword_269CDBF88;
  if (!qword_269CDBF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF88);
  }
  return result;
}

unint64_t sub_2534D14F0()
{
  unint64_t result = qword_269CDBF90;
  if (!qword_269CDBF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF90);
  }
  return result;
}

unint64_t sub_2534D153C()
{
  unint64_t result = qword_269CDBF98;
  if (!qword_269CDBF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBF98);
  }
  return result;
}

unint64_t sub_2534D1588()
{
  unint64_t result = qword_269CDBFA0;
  if (!qword_269CDBFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBFA0);
  }
  return result;
}

unint64_t sub_2534D15D4()
{
  unint64_t result = qword_269CDBFA8;
  if (!qword_269CDBFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBFA8);
  }
  return result;
}

unint64_t sub_2534D1620()
{
  unint64_t result = qword_269CDBFB0;
  if (!qword_269CDBFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBFB0);
  }
  return result;
}

unint64_t sub_2534D166C()
{
  unint64_t result = qword_269CDBFC0;
  if (!qword_269CDBFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBFC0);
  }
  return result;
}

void sub_2534D16B8()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Candidate(0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  uint64_t v7 = sub_253462A5C(&qword_269CDCA88);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CE4();
  MEMORY[0x270FA5388](v9);
  sub_2534D97C0();
  uint64_t v38 = v4 + 64;
  sub_2534D8E34();
  unint64_t v12 = v11 & v10;
  sub_2534DA27C();
  uint64_t v39 = v13;
  uint64_t v37 = v13 - 1;
  uint64_t v42 = v4;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = v5;
  uint64_t v40 = v0;
  if (!v12) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v15 = v14;
  uint64_t v44 = (v12 - 1) & v12;
  unint64_t v16 = __clz(__rbit64(v12)) | (v43 << 6);
LABEL_3:
  uint64_t v17 = *(void *)(v42 + 48) + 32 * v16;
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v17 + 16);
  char v21 = *(unsigned char *)(v17 + 24);
  uint64_t v22 = sub_253462A5C(&qword_269CDCA90);
  sub_2534D898C();
  *(void *)uint64_t v1 = v19;
  *(void *)(v1 + 8) = v18;
  *(void *)(v1 + 16) = v20;
  *(unsigned char *)(v1 + 24) = v21;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v22);
  swift_bridgeObjectRetain();
  uint64_t v5 = v41;
  uint64_t v14 = v15;
  uint64_t v0 = v40;
  while (1)
  {
    uint64_t v32 = sub_2534D9840();
    sub_2534D8A74(v32, v33, &qword_269CDCA88);
    uint64_t v34 = sub_253462A5C(&qword_269CDCA90);
    sub_2534D8B48(v2, 1, v34);
    if (v35) {
      break;
    }
    int v36 = *(unsigned __int8 *)(v2 + 24);
    sub_2534D8938();
    swift_bridgeObjectRetain();
    sub_253B09630();
    swift_bridgeObjectRelease();
    sub_253B0A610();
    if (v36 != 1) {
      sub_253B0A600();
    }
    swift_bridgeObjectRelease();
    sub_253B09120();
    sub_2534D8A30((uint64_t)&unk_269CDCA98);
    sub_253B095D0();
    sub_253B09630();
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0 + *(int *)(v5 + 24) + 8) != 1) {
      sub_253B0A600();
    }
    sub_253B0A600();
    sub_253B059D0();
    sub_2534D8A30((uint64_t)&qword_269CDBEB0);
    sub_253B095D0();
    sub_2534D89E0();
    v14 ^= sub_253B0A630();
    unint64_t v12 = v44;
    if (v44) {
      goto LABEL_2;
    }
LABEL_4:
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      JUMPOUT(0x2534D1C7CLL);
    }
    sub_2534DA924();
    if (v24 != v25)
    {
      if (*(void *)(v38 + 8 * v23)) {
        goto LABEL_8;
      }
      uint64_t v43 = v23;
      if (v23 + 1 < v39)
      {
        if (*(void *)(v38 + 8 * (v23 + 1))) {
          goto LABEL_8;
        }
        uint64_t v29 = v23 + 2;
        uint64_t v43 = v23 + 1;
        if (v23 + 2 < v39)
        {
          if (*(void *)(v38 + 8 * v29))
          {
LABEL_8:
            uint64_t v15 = v14;
            sub_2534D9174();
            uint64_t v43 = v26;
            uint64_t v44 = v27;
            unint64_t v16 = v28 + (v26 << 6);
            goto LABEL_3;
          }
          while (1)
          {
            if (__OFADD__(v29, 1)) {
              goto LABEL_28;
            }
            sub_2534DA924();
            if (v24 == v25) {
              break;
            }
            sub_2534D8EB0();
            if (v30) {
              goto LABEL_8;
            }
          }
          uint64_t v43 = v37;
        }
      }
    }
    uint64_t v31 = sub_253462A5C(&qword_269CDCA90);
    sub_2534D93D0(v31);
    uint64_t v44 = 0;
  }
  swift_release();
  sub_253B0A600();
  sub_253465A14();
}

void sub_2534D1C9C()
{
  sub_2534B3258();
  uint64_t v1 = v0;
  sub_2534D9690();
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534D92D4(v3, v16);
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_25348360C();
  type metadata accessor for AST.FlatValue(v5);
  sub_253465998();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  sub_2534966B0();
  uint64_t v9 = *(void *)(v1 + 16);
  sub_253B0A600();
  if (v9)
  {
    uint64_t v10 = v1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v11 = *(void *)(v7 + 72);
    do
    {
      sub_2534D898C();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_253B0A600();
          goto LABEL_15;
        case 2u:
          sub_253B0A600();
          sub_253B0A620();
          break;
        case 3u:
        case 6u:
        case 7u:
          sub_253B0A600();
          sub_2534DA06C();
          sub_253B09630();
          goto LABEL_11;
        case 4u:
          sub_253B0A600();
          uint64_t v12 = sub_2534D970C();
          sub_2534D1C9C(v12);
          goto LABEL_11;
        case 5u:
          sub_253B0A600();
          sub_2534D970C();
          sub_2534D0758();
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        case 8u:
          sub_2534D8E14();
          v13();
          sub_253B0A600();
          sub_2534D8A30((uint64_t)&unk_269CDBEB0);
          sub_2534DA78C();
          goto LABEL_14;
        case 9u:
          sub_2534D8E14();
          v14();
          sub_253B0A600();
          sub_2534D8A30((uint64_t)&unk_269CDCCD0);
          sub_2534DA7AC();
LABEL_14:
          sub_2534659CC();
          v15();
          break;
        case 0xAu:
LABEL_15:
          sub_253B0A600();
          break;
        default:
          sub_253B0A600();
          sub_253B0A610();
          break;
      }
      v10 += v11;
      --v9;
    }
    while (v9);
  }
  sub_253465A14();
}

uint64_t sub_2534D2024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = sub_253B0A600();
  if (v4)
  {
    uint64_t v6 = a2 + 32;
    do
    {
      v6 += 8;
      uint64_t result = AST.Expr.hash(into:)(a1);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_2534D208C()
{
  sub_2534C5224(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_2534D20D4()
{
  unint64_t result = qword_269CDC030;
  if (!qword_269CDC030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC030);
  }
  return result;
}

unint64_t sub_2534D2120(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    sub_2534D9EF0();
    sub_25347907C(&qword_269CDBF50);
    v3();
    v2();
    unint64_t result = sub_2534D9E7C();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534D2190()
{
  unint64_t result = qword_269CDC040;
  if (!qword_269CDC040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC040);
  }
  return result;
}

unint64_t sub_2534D21DC()
{
  unint64_t result = qword_269CDC048;
  if (!qword_269CDC048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC048);
  }
  return result;
}

uint64_t sub_2534D2228()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  sub_25346CA4C(*(void *)(v0 + 24));
  uint64_t v1 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

uint64_t sub_2534D2260()
{
  sub_25346CA4C(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_2534D22A0()
{
  sub_25346CA4C(*(void *)(v0 + 24));
  sub_25346CA4C(*(void *)(v0 + 32));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

unint64_t sub_2534D22E0()
{
  unint64_t result = qword_269CDC050;
  if (!qword_269CDC050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC050);
  }
  return result;
}

uint64_t sub_2534D232C()
{
  sub_25346CA4C(*(void *)(v0 + 24));
  uint64_t v1 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v1, v2, v3);
}

unint64_t sub_2534D235C()
{
  unint64_t result = qword_269CDC058;
  if (!qword_269CDC058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC058);
  }
  return result;
}

uint64_t sub_2534D23A8()
{
  sub_2534D23E4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t sub_2534D23E4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 5 || a3 == 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_2534D2410()
{
  unint64_t result = qword_269CDC060;
  if (!qword_269CDC060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC060);
  }
  return result;
}

uint64_t sub_2534D245C()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_2534D9D90();
  return MEMORY[0x270FA0238](v0, v1, v2);
}

unint64_t sub_2534D248C()
{
  unint64_t result = qword_269CDC088;
  if (!qword_269CDC088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC088);
  }
  return result;
}

unint64_t sub_2534D24D8()
{
  unint64_t result = qword_269CDC090;
  if (!qword_269CDC090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC090);
  }
  return result;
}

unint64_t sub_2534D2524()
{
  unint64_t result = qword_269CDC098;
  if (!qword_269CDC098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC098);
  }
  return result;
}

unint64_t sub_2534D2570()
{
  unint64_t result = qword_269CDC0A0;
  if (!qword_269CDC0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC0A0);
  }
  return result;
}

unint64_t sub_2534D25BC()
{
  unint64_t result = qword_269CDC0C0;
  if (!qword_269CDC0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC0C0);
  }
  return result;
}

uint64_t sub_2534D2608(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_2534D2620()
{
  unint64_t result = qword_269CDC0E8;
  if (!qword_269CDC0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC0E8);
  }
  return result;
}

unint64_t sub_2534D266C()
{
  unint64_t result = qword_269CDC0F0;
  if (!qword_269CDC0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC0F0);
  }
  return result;
}

unint64_t sub_2534D26B8()
{
  unint64_t result = qword_269CDC0F8;
  if (!qword_269CDC0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC0F8);
  }
  return result;
}

unint64_t sub_2534D2704()
{
  unint64_t result = qword_269CDC100;
  if (!qword_269CDC100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC100);
  }
  return result;
}

unint64_t sub_2534D2750()
{
  unint64_t result = qword_269CDC130;
  if (!qword_269CDC130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC130);
  }
  return result;
}

unint64_t sub_2534D279C(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    sub_2534D9EF0();
    sub_25347907C(&qword_269CDC138);
    v3();
    v2();
    unint64_t result = sub_2534D9E7C();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534D280C()
{
  unint64_t result = qword_269CDC148;
  if (!qword_269CDC148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC148);
  }
  return result;
}

unint64_t sub_2534D2858()
{
  unint64_t result = qword_269CDC160;
  if (!qword_269CDC160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC160);
  }
  return result;
}

unint64_t sub_2534D28A4()
{
  unint64_t result = qword_269CDC170;
  if (!qword_269CDC170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC170);
  }
  return result;
}

unint64_t sub_2534D28F0()
{
  unint64_t result = qword_269CDC178;
  if (!qword_269CDC178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC178);
  }
  return result;
}

unint64_t sub_2534D293C()
{
  unint64_t result = qword_269CDC188;
  if (!qword_269CDC188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC188);
  }
  return result;
}

unint64_t sub_2534D2988()
{
  unint64_t result = qword_269CDC1A8;
  if (!qword_269CDC1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC1A8);
  }
  return result;
}

unint64_t sub_2534D29D4()
{
  unint64_t result = qword_269CDC1B0;
  if (!qword_269CDC1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC1B0);
  }
  return result;
}

unint64_t sub_2534D2A20()
{
  unint64_t result = qword_269CDC1B8;
  if (!qword_269CDC1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC1B8);
  }
  return result;
}

unint64_t sub_2534D2A6C()
{
  unint64_t result = qword_269CDC1F0;
  if (!qword_269CDC1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC1F0);
  }
  return result;
}

unint64_t sub_2534D2AB8()
{
  unint64_t result = qword_269CDC1F8;
  if (!qword_269CDC1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC1F8);
  }
  return result;
}

unint64_t sub_2534D2B04()
{
  unint64_t result = qword_269CDC200;
  if (!qword_269CDC200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC200);
  }
  return result;
}

unint64_t sub_2534D2B50()
{
  unint64_t result = qword_269CDC260;
  if (!qword_269CDC260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC260);
  }
  return result;
}

unint64_t sub_2534D2B9C()
{
  unint64_t result = qword_269CDC268;
  if (!qword_269CDC268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC268);
  }
  return result;
}

unint64_t sub_2534D2BE8()
{
  unint64_t result = qword_269CDC280;
  if (!qword_269CDC280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC280);
  }
  return result;
}

unint64_t sub_2534D2C34()
{
  unint64_t result = qword_269CDC298;
  if (!qword_269CDC298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC298);
  }
  return result;
}

unint64_t sub_2534D2C80()
{
  unint64_t result = qword_269CDC2A0;
  if (!qword_269CDC2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC2A0);
  }
  return result;
}

unint64_t sub_2534D2CCC()
{
  unint64_t result = qword_269CDC2A8;
  if (!qword_269CDC2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC2A8);
  }
  return result;
}

unint64_t sub_2534D2D18()
{
  unint64_t result = qword_269CDC2B0;
  if (!qword_269CDC2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC2B0);
  }
  return result;
}

unint64_t sub_2534D2D64()
{
  unint64_t result = qword_269CDC2B8;
  if (!qword_269CDC2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC2B8);
  }
  return result;
}

unint64_t sub_2534D2DB0(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    sub_2534D9EF0();
    sub_25347907C(&qword_269CDC270);
    v2();
    unint64_t result = sub_2534D9E7C();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534D2E14(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_25347907C(&qword_269CDC288);
    v4();
    sub_2534D99FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534D2E7C()
{
  unint64_t result = qword_269CDC330;
  if (!qword_269CDC330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC330);
  }
  return result;
}

unint64_t sub_2534D2EC8()
{
  unint64_t result = qword_269CDC338;
  if (!qword_269CDC338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC338);
  }
  return result;
}

unint64_t sub_2534D2F14()
{
  unint64_t result = qword_269CDC340;
  if (!qword_269CDC340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC340);
  }
  return result;
}

unint64_t sub_2534D2F60()
{
  unint64_t result = qword_269CDC348;
  if (!qword_269CDC348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC348);
  }
  return result;
}

unint64_t sub_2534D2FAC()
{
  unint64_t result = qword_269CDC410;
  if (!qword_269CDC410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC410);
  }
  return result;
}

unint64_t sub_2534D2FF8()
{
  unint64_t result = qword_269CDC418;
  if (!qword_269CDC418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC418);
  }
  return result;
}

unint64_t sub_2534D3044()
{
  unint64_t result = qword_269CDC420;
  if (!qword_269CDC420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC420);
  }
  return result;
}

unint64_t sub_2534D3090()
{
  unint64_t result = qword_269CDC428;
  if (!qword_269CDC428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC428);
  }
  return result;
}

unint64_t sub_2534D30DC()
{
  unint64_t result = qword_269CDC430;
  if (!qword_269CDC430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC430);
  }
  return result;
}

unint64_t sub_2534D3128()
{
  unint64_t result = qword_269CDC438;
  if (!qword_269CDC438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC438);
  }
  return result;
}

unint64_t sub_2534D3174()
{
  unint64_t result = qword_269CDC440;
  if (!qword_269CDC440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC440);
  }
  return result;
}

unint64_t sub_2534D31C0()
{
  unint64_t result = qword_269CDC448;
  if (!qword_269CDC448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC448);
  }
  return result;
}

unint64_t sub_2534D320C()
{
  unint64_t result = qword_269CDC450;
  if (!qword_269CDC450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC450);
  }
  return result;
}

unint64_t sub_2534D3258()
{
  unint64_t result = qword_269CDC458;
  if (!qword_269CDC458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC458);
  }
  return result;
}

unint64_t sub_2534D32A4()
{
  unint64_t result = qword_269CDC460;
  if (!qword_269CDC460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC460);
  }
  return result;
}

unint64_t sub_2534D32F0()
{
  unint64_t result = qword_269CDC468;
  if (!qword_269CDC468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC468);
  }
  return result;
}

unint64_t sub_2534D333C()
{
  unint64_t result = qword_269CDC470;
  if (!qword_269CDC470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC470);
  }
  return result;
}

unint64_t sub_2534D3388()
{
  unint64_t result = qword_269CDC478;
  if (!qword_269CDC478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC478);
  }
  return result;
}

unint64_t sub_2534D33D4()
{
  unint64_t result = qword_269CDC480;
  if (!qword_269CDC480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC480);
  }
  return result;
}

unint64_t sub_2534D3420()
{
  unint64_t result = qword_269CDC488;
  if (!qword_269CDC488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC488);
  }
  return result;
}

unint64_t sub_2534D346C()
{
  unint64_t result = qword_269CDC490;
  if (!qword_269CDC490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC490);
  }
  return result;
}

unint64_t sub_2534D34B8()
{
  unint64_t result = qword_269CDC498;
  if (!qword_269CDC498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC498);
  }
  return result;
}

unint64_t sub_2534D3504()
{
  unint64_t result = qword_269CDC4A0;
  if (!qword_269CDC4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC4A0);
  }
  return result;
}

unint64_t sub_2534D3550()
{
  unint64_t result = qword_269CDC4A8;
  if (!qword_269CDC4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC4A8);
  }
  return result;
}

unint64_t sub_2534D359C()
{
  unint64_t result = qword_269CDC558;
  if (!qword_269CDC558)
  {
    sub_25347907C(&qword_269CDC550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC558);
  }
  return result;
}

unint64_t sub_2534D35F0()
{
  unint64_t result = qword_269CDC568;
  if (!qword_269CDC568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC568);
  }
  return result;
}

uint64_t sub_2534D363C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 5 || a3 == 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_2534D3668()
{
  unint64_t result = qword_269CDC570;
  if (!qword_269CDC570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC570);
  }
  return result;
}

unint64_t sub_2534D36B8()
{
  unint64_t result = qword_269CDC578;
  if (!qword_269CDC578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC578);
  }
  return result;
}

unint64_t sub_2534D3708()
{
  unint64_t result = qword_269CDC580;
  if (!qword_269CDC580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC580);
  }
  return result;
}

unint64_t sub_2534D3758()
{
  unint64_t result = qword_269CDC588;
  if (!qword_269CDC588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC588);
  }
  return result;
}

unint64_t sub_2534D37A4()
{
  return sub_2534D8A30((uint64_t)&unk_269CDC590);
}

unint64_t sub_2534D37F0()
{
  unint64_t result = qword_269CDC598;
  if (!qword_269CDC598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC598);
  }
  return result;
}

unint64_t sub_2534D3840()
{
  unint64_t result = qword_269CDC5A0;
  if (!qword_269CDC5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5A0);
  }
  return result;
}

unint64_t sub_2534D3890()
{
  unint64_t result = qword_269CDC5A8;
  if (!qword_269CDC5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5A8);
  }
  return result;
}

unint64_t sub_2534D38E0()
{
  unint64_t result = qword_269CDC5B0;
  if (!qword_269CDC5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5B0);
  }
  return result;
}

unint64_t sub_2534D3930()
{
  unint64_t result = qword_269CDC5B8;
  if (!qword_269CDC5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5B8);
  }
  return result;
}

unint64_t sub_2534D3980()
{
  unint64_t result = qword_269CDC5C0;
  if (!qword_269CDC5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5C0);
  }
  return result;
}

void type metadata accessor for AST.Program()
{
}

void *_s4StmtOwCP(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t _s4StmtOwxx()
{
  return swift_release();
}

void *_s4StmtOwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *_s4StmtOwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t _s4StmtOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s4StmtOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_2534D3B38(void *a1)
{
  return *a1 >> 62;
}

void *sub_2534D3B44(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_2534D3B54(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

void type metadata accessor for AST.Stmt()
{
}

unint64_t *_s4ExprOwCP(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_2534C1C84(*a2);
  *a1 = v3;
  return a1;
}

unint64_t _s4ExprOwxx(unint64_t *a1)
{
  return sub_25346CA4C(*a1);
}

unint64_t *_s4ExprOwca(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_2534C1C84(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_25346CA4C(v4);
  return a1;
}

unint64_t *_s4ExprOwta(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_25346CA4C(v3);
  return a1;
}

uint64_t _s4ExprOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x77 && *(unsigned char *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 118;
    }
    else
    {
      unsigned int v2 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x76) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s4ExprOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)unint64_t result = a2 - 119;
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_2534D3CB8(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  if (v1 <= 8) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 9;
  }
}

void *sub_2534D3CD4(void *result)
{
  *result &= 0xFFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_2534D3CE4(unint64_t *result, uint64_t a2)
{
  if (a2 < 9)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 60;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 9);
    unint64_t v3 = 0x9000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

void type metadata accessor for AST.Expr()
{
}

uint64_t _s6CallFnOwxx(uint64_t a1)
{
  return sub_2534C5224(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t _s6CallFnOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_2534C51E4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s6CallFnOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_2534C51E4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_2534C5224(v8, v9, v10, v11, v12);
  return a1;
}

__n128 _s6CallFnOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s6CallFnOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_2534C5224(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t _s6CallFnOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s6CallFnOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2534D3EF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_2534D3EF8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

void type metadata accessor for AST.CallFn()
{
}

uint64_t _s12ParameterKeyOwxx(uint64_t a1)
{
  return sub_2534D2608(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t _s12ParameterKeyOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_25346CA34(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t _s12ParameterKeyOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_25346CA34(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_2534D2608(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for ParameterPath(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s12ParameterKeyOwta(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_2534D2608(v5, v7, v6, v8);
  return a1;
}

uint64_t _s12ParameterKeyOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s12ParameterKeyOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2534D40E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_2534D40E8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for AST.ParameterKey()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateParametersExpression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UpdateParametersExpression(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UpdateParametersExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateParametersExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16UpdateParametersVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for UpdateParametersExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16UpdateParametersVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2534D4460);
}

uint64_t sub_2534D4460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253B059D0();
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t _s16UpdateParametersVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2534D4500);
}

void sub_2534D4500(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253B059D0();
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_2534D4588()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s10UpdateExprVwCP(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = *(void *)(a2 + 8);
  sub_2534C1C84(v3);
  *(void *)(a1 + 8) = v3;
  return a1;
}

unint64_t _s10UpdateExprVwxx(uint64_t a1)
{
  return sub_25346CA4C(*(void *)(a1 + 8));
}

uint64_t _s10UpdateExprVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = *(void *)(a2 + 8);
  sub_2534C1C84(v3);
  unint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  sub_25346CA4C(v4);
  return a1;
}

uint64_t _s10UpdateExprVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_25346CA4C(v3);
  return a1;
}

uint64_t _s10UpdateExprVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[16])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = v3 - 2;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s10UpdateExprVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for AST.UpdateExpr()
{
}

void type metadata accessor for AST.UpdateKind()
{
}

uint64_t initializeBufferWithCopyOfBuffer for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Candidate.PromptStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_2534D47E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2534D4800(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

void type metadata accessor for AST.PickType()
{
}

uint64_t _s7LiteralOwxx(uint64_t a1)
{
  return sub_2534D23E4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s7LiteralOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  uint64_t v6 = sub_2534DA2E4();
  sub_2534D363C(v6, v7, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s7LiteralOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_2534D363C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_2534D23E4(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for RequestPrescribedPlan.TextTool(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t _s7LiteralOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_2534D23E4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueExpression(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ValueExpression(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2534D49C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_2534D49D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for AST.Literal()
{
}

void type metadata accessor for AST.PrefixOp()
{
}

void type metadata accessor for AST.InfixOp()
{
}

uint64_t _s9ForInStmtVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_25346CA4C(*(void *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

void *_s9ForInStmtVwcp(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  unint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  sub_2534C1C84(v5);
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9ForInStmtVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a2[2];
  sub_2534C1C84(v4);
  unint64_t v5 = a1[2];
  a1[2] = v4;
  sub_25346CA4C(v5);
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SpeechQuery(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *_s9ForInStmtVwta(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = a1[2];
  a1[2] = a2[2];
  sub_25346CA4C(v5);
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GlobalToolIdentifier(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlobalToolIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AST.ForInStmt()
{
}

uint64_t _s6IfStmtVwxx(unint64_t *a1)
{
  sub_25346CA4C(*a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t *_s6IfStmtVwCP_0()
{
  sub_2534DA0C4();
  unint64_t v3 = *v2;
  sub_2534C1C84(*v2);
  unint64_t v4 = *(void *)(v0 + 8);
  unint64_t v5 = *(void *)(v0 + 16);
  *unint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t *_s6IfStmtVwca(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  sub_2534C1C84(*a2);
  unint64_t v5 = *a1;
  *a1 = v4;
  sub_25346CA4C(v5);
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s6IfStmtVwta(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  sub_25346CA4C(v4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolQuery(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AST.IfStmt()
{
}

uint64_t _s30IntelligenceFlowPlannerSupport15InfixExpressionV7InfixOpOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 19);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 19);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 19);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s7InfixOpOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *__n128 result = a2 + 18;
    switch(v5)
    {
      case 1:
        __n128 result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        __n128 result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534D4F58);
      case 4:
        __n128 result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __n128 result = sub_2534DA370(result, a2 + 18);
        break;
    }
  }
  return result;
}

ValueMetadata *_s7InfixOpO10CodingKeysOMa()
{
  return &_s7InfixOpO10CodingKeysON;
}

ValueMetadata *_s7InfixOpO16AssignCodingKeysOMa()
{
  return &_s7InfixOpO16AssignCodingKeysON;
}

ValueMetadata *_s7InfixOpO13AddCodingKeysOMa()
{
  return &_s7InfixOpO13AddCodingKeysON;
}

ValueMetadata *_s7InfixOpO19AddAssignCodingKeysOMa()
{
  return &_s7InfixOpO19AddAssignCodingKeysON;
}

ValueMetadata *_s7InfixOpO18SubtractCodingKeysOMa()
{
  return &_s7InfixOpO18SubtractCodingKeysON;
}

ValueMetadata *_s7InfixOpO24SubtractAssignCodingKeysOMa()
{
  return &_s7InfixOpO24SubtractAssignCodingKeysON;
}

ValueMetadata *_s7InfixOpO16DivideCodingKeysOMa()
{
  return &_s7InfixOpO16DivideCodingKeysON;
}

ValueMetadata *_s7InfixOpO22DivideAssignCodingKeysOMa()
{
  return &_s7InfixOpO22DivideAssignCodingKeysON;
}

ValueMetadata *_s7InfixOpO18MultiplyCodingKeysOMa()
{
  return &_s7InfixOpO18MultiplyCodingKeysON;
}

ValueMetadata *_s7InfixOpO24MultiplyAssignCodingKeysOMa()
{
  return &_s7InfixOpO24MultiplyAssignCodingKeysON;
}

ValueMetadata *_s7InfixOpO18ExponentCodingKeysOMa()
{
  return &_s7InfixOpO18ExponentCodingKeysON;
}

ValueMetadata *_s7InfixOpO15EqualCodingKeysOMa()
{
  return &_s7InfixOpO15EqualCodingKeysON;
}

ValueMetadata *_s7InfixOpO18NotEqualCodingKeysOMa()
{
  return &_s7InfixOpO18NotEqualCodingKeysON;
}

ValueMetadata *_s7InfixOpO12InCodingKeysOMa()
{
  return &_s7InfixOpO12InCodingKeysON;
}

ValueMetadata *_s7InfixOpO26GreaterThanEqualCodingKeysOMa()
{
  return &_s7InfixOpO26GreaterThanEqualCodingKeysON;
}

ValueMetadata *_s7InfixOpO21GreaterThanCodingKeysOMa()
{
  return &_s7InfixOpO21GreaterThanCodingKeysON;
}

ValueMetadata *_s7InfixOpO23LessThanEqualCodingKeysOMa()
{
  return &_s7InfixOpO23LessThanEqualCodingKeysON;
}

ValueMetadata *_s7InfixOpO18LessThanCodingKeysOMa()
{
  return &_s7InfixOpO18LessThanCodingKeysON;
}

ValueMetadata *_s7InfixOpO13AndCodingKeysOMa()
{
  return &_s7InfixOpO13AndCodingKeysON;
}

ValueMetadata *_s7InfixOpO12OrCodingKeysOMa()
{
  return &_s7InfixOpO12OrCodingKeysON;
}

ValueMetadata *_s8PrefixOpO10CodingKeysOMa()
{
  return &_s8PrefixOpO10CodingKeysON;
}

ValueMetadata *_s8PrefixOpO14PlusCodingKeysOMa()
{
  return &_s8PrefixOpO14PlusCodingKeysON;
}

ValueMetadata *_s8PrefixOpO15MinusCodingKeysOMa()
{
  return &_s8PrefixOpO15MinusCodingKeysON;
}

ValueMetadata *_s8PrefixOpO13NotCodingKeysOMa()
{
  return &_s8PrefixOpO13NotCodingKeysON;
}

uint64_t _s7LiteralO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s7LiteralO10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534D5254);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *_s7LiteralO10CodingKeysOMa()
{
  return &_s7LiteralO10CodingKeysON;
}

ValueMetadata *_s7LiteralO14NullCodingKeysOMa()
{
  return &_s7LiteralO14NullCodingKeysON;
}

ValueMetadata *_s7LiteralO14BoolCodingKeysOMa()
{
  return &_s7LiteralO14BoolCodingKeysON;
}

ValueMetadata *_s7LiteralO13IntCodingKeysOMa()
{
  return &_s7LiteralO13IntCodingKeysON;
}

ValueMetadata *_s7LiteralO16DoubleCodingKeysOMa()
{
  return &_s7LiteralO16DoubleCodingKeysON;
}

ValueMetadata *_s7LiteralO16StringCodingKeysOMa()
{
  return &_s7LiteralO16StringCodingKeysON;
}

ValueMetadata *_s7LiteralO15ArrayCodingKeysOMa()
{
  return &_s7LiteralO15ArrayCodingKeysON;
}

ValueMetadata *_s7LiteralO14DictCodingKeysOMa()
{
  return &_s7LiteralO14DictCodingKeysON;
}

ValueMetadata *_s8PickTypeO10CodingKeysOMa()
{
  return &_s8PickTypeO10CodingKeysON;
}

ValueMetadata *_s8PickTypeO15IndexCodingKeysOMa()
{
  return &_s8PickTypeO15IndexCodingKeysON;
}

ValueMetadata *_s8PickTypeO14NoneCodingKeysOMa()
{
  return &_s8PickTypeO14NoneCodingKeysON;
}

ValueMetadata *_s10UpdateKindO10CodingKeysOMa()
{
  return &_s10UpdateKindO10CodingKeysON;
}

ValueMetadata *_s10UpdateKindO16AppendCodingKeysOMa()
{
  return &_s10UpdateKindO16AppendCodingKeysON;
}

ValueMetadata *_s10UpdateKindO17ReplaceCodingKeysOMa()
{
  return &_s10UpdateKindO17ReplaceCodingKeysON;
}

ValueMetadata *_s10UpdateExprV10CodingKeysOMa()
{
  return &_s10UpdateExprV10CodingKeysON;
}

ValueMetadata *_s16UpdateParametersV10CodingKeysOMa()
{
  return &_s16UpdateParametersV10CodingKeysON;
}

ValueMetadata *_s12ParameterKeyO10CodingKeysOMa()
{
  return &_s12ParameterKeyO10CodingKeysON;
}

ValueMetadata *_s12ParameterKeyO23ParameterNameCodingKeysOMa()
{
  return &_s12ParameterKeyO23ParameterNameCodingKeysON;
}

ValueMetadata *_s12ParameterKeyO31ParameterNameAndIndexCodingKeysOMa()
{
  return &_s12ParameterKeyO31ParameterNameAndIndexCodingKeysON;
}

ValueMetadata *_s12ParameterKeyO19AnonymousCodingKeysOMa()
{
  return &_s12ParameterKeyO19AnonymousCodingKeysON;
}

ValueMetadata *_s6CallFnO10CodingKeysOMa()
{
  return &_s6CallFnO10CodingKeysON;
}

ValueMetadata *_s6CallFnO24ParsedToolNameCodingKeysOMa()
{
  return &_s6CallFnO24ParsedToolNameCodingKeysON;
}

ValueMetadata *_s6CallFnO38ResolvedGlobalToolIdentifierCodingKeysOMa()
{
  return &_s6CallFnO38ResolvedGlobalToolIdentifierCodingKeysON;
}

uint64_t _s4ExprO10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s4ExprO10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534D5548);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *_s4ExprO10CodingKeysOMa()
{
  return &_s4ExprO10CodingKeysON;
}

ValueMetadata *_s4ExprO15IdentCodingKeysOMa()
{
  return &_s4ExprO15IdentCodingKeysON;
}

ValueMetadata *_s4ExprO21StatementIdCodingKeysOMa()
{
  return &_s4ExprO21StatementIdCodingKeysON;
}

ValueMetadata *_s4ExprO17LiteralCodingKeysOMa()
{
  return &_s4ExprO17LiteralCodingKeysON;
}

ValueMetadata *_s4ExprO16PrefixCodingKeysOMa()
{
  return &_s4ExprO16PrefixCodingKeysON;
}

uint64_t _s30IntelligenceFlowPlannerSupport16PrefixExpressionV8PrefixOpOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s8PrefixOpOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        __n128 result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        __n128 result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534D5700);
      case 4:
        __n128 result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __n128 result = sub_2534DA370(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *_s4ExprO15InfixCodingKeysOMa()
{
  return &_s4ExprO15InfixCodingKeysON;
}

ValueMetadata *_s4ExprO13DotCodingKeysOMa()
{
  return &_s4ExprO13DotCodingKeysON;
}

ValueMetadata *_s4ExprO15IndexCodingKeysOMa()
{
  return &_s4ExprO15IndexCodingKeysON;
}

uint64_t _s30IntelligenceFlowPlannerSupport26UpdateParametersExpressionV10UpdateKindOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s10UpdateKindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        __n128 result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        __n128 result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2534D5898);
      case 4:
        __n128 result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          __n128 result = sub_2534DA370(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *_s4ExprO14CallCodingKeysOMa()
{
  return &_s4ExprO14CallCodingKeysON;
}

uint64_t _s7LiteralO14BoolCodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return _s30IntelligenceFlowPlannerSupport16SearchExpressionV5query24isLowConfidenceKnowledge7pickOne28shouldOpenResultIfApplicableACSS_S3btcfcfA1__0();
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s7LiteralO14BoolCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2534D59B8);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s4ExprO26UpdateParametersCodingKeysOMa()
{
  return &_s4ExprO26UpdateParametersCodingKeysON;
}

ValueMetadata *_s4ExprO19EndOfPlanCodingKeysOMa()
{
  return &_s4ExprO19EndOfPlanCodingKeysON;
}

ValueMetadata *_s4ExprO26ContinuePlanningCodingKeysOMa()
{
  return &_s4ExprO26ContinuePlanningCodingKeysON;
}

unint64_t sub_2534D5A14()
{
  unint64_t result = qword_269CDC5D8;
  if (!qword_269CDC5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5D8);
  }
  return result;
}

unint64_t sub_2534D5A64()
{
  unint64_t result = qword_269CDC5E0;
  if (!qword_269CDC5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5E0);
  }
  return result;
}

unint64_t sub_2534D5AB4()
{
  unint64_t result = qword_269CDC5E8;
  if (!qword_269CDC5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5E8);
  }
  return result;
}

unint64_t sub_2534D5B04()
{
  unint64_t result = qword_269CDC5F0;
  if (!qword_269CDC5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5F0);
  }
  return result;
}

unint64_t sub_2534D5B54()
{
  unint64_t result = qword_269CDC5F8;
  if (!qword_269CDC5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC5F8);
  }
  return result;
}

unint64_t sub_2534D5BA4()
{
  unint64_t result = qword_269CDC600;
  if (!qword_269CDC600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC600);
  }
  return result;
}

unint64_t sub_2534D5BF4()
{
  unint64_t result = qword_269CDC608;
  if (!qword_269CDC608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC608);
  }
  return result;
}

unint64_t sub_2534D5C44()
{
  unint64_t result = qword_269CDC610;
  if (!qword_269CDC610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC610);
  }
  return result;
}

unint64_t sub_2534D5C94()
{
  unint64_t result = qword_269CDC618;
  if (!qword_269CDC618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC618);
  }
  return result;
}

unint64_t sub_2534D5CE4()
{
  unint64_t result = qword_269CDC620;
  if (!qword_269CDC620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC620);
  }
  return result;
}

unint64_t sub_2534D5D34()
{
  unint64_t result = qword_269CDC628;
  if (!qword_269CDC628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC628);
  }
  return result;
}

unint64_t sub_2534D5D84()
{
  unint64_t result = qword_269CDC630;
  if (!qword_269CDC630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC630);
  }
  return result;
}

unint64_t sub_2534D5DD4()
{
  unint64_t result = qword_269CDC638;
  if (!qword_269CDC638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC638);
  }
  return result;
}

unint64_t sub_2534D5E24()
{
  unint64_t result = qword_269CDC640;
  if (!qword_269CDC640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC640);
  }
  return result;
}

unint64_t sub_2534D5E74()
{
  unint64_t result = qword_269CDC648;
  if (!qword_269CDC648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC648);
  }
  return result;
}

unint64_t sub_2534D5EC4()
{
  unint64_t result = qword_269CDC650;
  if (!qword_269CDC650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC650);
  }
  return result;
}

unint64_t sub_2534D5F14()
{
  unint64_t result = qword_269CDC658;
  if (!qword_269CDC658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC658);
  }
  return result;
}

unint64_t sub_2534D5F64()
{
  unint64_t result = qword_269CDC660;
  if (!qword_269CDC660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC660);
  }
  return result;
}

unint64_t sub_2534D5FB4()
{
  unint64_t result = qword_269CDC668;
  if (!qword_269CDC668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC668);
  }
  return result;
}

unint64_t sub_2534D6004()
{
  unint64_t result = qword_269CDC670;
  if (!qword_269CDC670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC670);
  }
  return result;
}

unint64_t sub_2534D6054()
{
  unint64_t result = qword_269CDC678;
  if (!qword_269CDC678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC678);
  }
  return result;
}

unint64_t sub_2534D60A4()
{
  unint64_t result = qword_269CDC680;
  if (!qword_269CDC680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC680);
  }
  return result;
}

unint64_t sub_2534D60F4()
{
  unint64_t result = qword_269CDC688;
  if (!qword_269CDC688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC688);
  }
  return result;
}

unint64_t sub_2534D6144()
{
  unint64_t result = qword_269CDC690;
  if (!qword_269CDC690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC690);
  }
  return result;
}

unint64_t sub_2534D6194()
{
  unint64_t result = qword_269CDC698;
  if (!qword_269CDC698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC698);
  }
  return result;
}

unint64_t sub_2534D61E4()
{
  unint64_t result = qword_269CDC6A0;
  if (!qword_269CDC6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6A0);
  }
  return result;
}

unint64_t sub_2534D6234()
{
  unint64_t result = qword_269CDC6A8;
  if (!qword_269CDC6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6A8);
  }
  return result;
}

unint64_t sub_2534D6284()
{
  unint64_t result = qword_269CDC6B0;
  if (!qword_269CDC6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6B0);
  }
  return result;
}

unint64_t sub_2534D62D4()
{
  unint64_t result = qword_269CDC6B8;
  if (!qword_269CDC6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6B8);
  }
  return result;
}

unint64_t sub_2534D6324()
{
  unint64_t result = qword_269CDC6C0;
  if (!qword_269CDC6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6C0);
  }
  return result;
}

unint64_t sub_2534D6374()
{
  unint64_t result = qword_269CDC6C8;
  if (!qword_269CDC6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6C8);
  }
  return result;
}

unint64_t sub_2534D63C4()
{
  unint64_t result = qword_269CDC6D0;
  if (!qword_269CDC6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6D0);
  }
  return result;
}

unint64_t sub_2534D6414()
{
  unint64_t result = qword_269CDC6D8;
  if (!qword_269CDC6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6D8);
  }
  return result;
}

unint64_t sub_2534D6464()
{
  unint64_t result = qword_269CDC6E0;
  if (!qword_269CDC6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6E0);
  }
  return result;
}

unint64_t sub_2534D64B4()
{
  unint64_t result = qword_269CDC6E8;
  if (!qword_269CDC6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6E8);
  }
  return result;
}

unint64_t sub_2534D6504()
{
  unint64_t result = qword_269CDC6F0;
  if (!qword_269CDC6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6F0);
  }
  return result;
}

unint64_t sub_2534D6554()
{
  unint64_t result = qword_269CDC6F8;
  if (!qword_269CDC6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC6F8);
  }
  return result;
}

unint64_t sub_2534D65A4()
{
  unint64_t result = qword_269CDC700;
  if (!qword_269CDC700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC700);
  }
  return result;
}

unint64_t sub_2534D65F4()
{
  unint64_t result = qword_269CDC708;
  if (!qword_269CDC708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC708);
  }
  return result;
}

unint64_t sub_2534D6644()
{
  unint64_t result = qword_269CDC710;
  if (!qword_269CDC710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC710);
  }
  return result;
}

unint64_t sub_2534D6694()
{
  unint64_t result = qword_269CDC718;
  if (!qword_269CDC718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC718);
  }
  return result;
}

unint64_t sub_2534D66E4()
{
  unint64_t result = qword_269CDC720;
  if (!qword_269CDC720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC720);
  }
  return result;
}

unint64_t sub_2534D6734()
{
  unint64_t result = qword_269CDC728;
  if (!qword_269CDC728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC728);
  }
  return result;
}

unint64_t sub_2534D6784()
{
  unint64_t result = qword_269CDC730;
  if (!qword_269CDC730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC730);
  }
  return result;
}

unint64_t sub_2534D67D4()
{
  unint64_t result = qword_269CDC738;
  if (!qword_269CDC738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC738);
  }
  return result;
}

unint64_t sub_2534D6824()
{
  unint64_t result = qword_269CDC740;
  if (!qword_269CDC740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC740);
  }
  return result;
}

unint64_t sub_2534D6874()
{
  unint64_t result = qword_269CDC748;
  if (!qword_269CDC748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC748);
  }
  return result;
}

unint64_t sub_2534D68C4()
{
  unint64_t result = qword_269CDC750;
  if (!qword_269CDC750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC750);
  }
  return result;
}

unint64_t sub_2534D6914()
{
  unint64_t result = qword_269CDC758;
  if (!qword_269CDC758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC758);
  }
  return result;
}

unint64_t sub_2534D6964()
{
  unint64_t result = qword_269CDC760;
  if (!qword_269CDC760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC760);
  }
  return result;
}

unint64_t sub_2534D69B4()
{
  unint64_t result = qword_269CDC768;
  if (!qword_269CDC768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC768);
  }
  return result;
}

unint64_t sub_2534D6A04()
{
  unint64_t result = qword_269CDC770;
  if (!qword_269CDC770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC770);
  }
  return result;
}

unint64_t sub_2534D6A54()
{
  unint64_t result = qword_269CDC778;
  if (!qword_269CDC778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC778);
  }
  return result;
}

unint64_t sub_2534D6AA4()
{
  unint64_t result = qword_269CDC780;
  if (!qword_269CDC780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC780);
  }
  return result;
}

unint64_t sub_2534D6AF4()
{
  unint64_t result = qword_269CDC788;
  if (!qword_269CDC788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC788);
  }
  return result;
}

unint64_t sub_2534D6B44()
{
  unint64_t result = qword_269CDC790;
  if (!qword_269CDC790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC790);
  }
  return result;
}

unint64_t sub_2534D6B94()
{
  unint64_t result = qword_269CDC798;
  if (!qword_269CDC798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC798);
  }
  return result;
}

unint64_t sub_2534D6BE4()
{
  unint64_t result = qword_269CDC7A0;
  if (!qword_269CDC7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7A0);
  }
  return result;
}

unint64_t sub_2534D6C34()
{
  unint64_t result = qword_269CDC7A8;
  if (!qword_269CDC7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7A8);
  }
  return result;
}

unint64_t sub_2534D6C84()
{
  unint64_t result = qword_269CDC7B0;
  if (!qword_269CDC7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7B0);
  }
  return result;
}

unint64_t sub_2534D6CD4()
{
  unint64_t result = qword_269CDC7B8;
  if (!qword_269CDC7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7B8);
  }
  return result;
}

unint64_t sub_2534D6D24()
{
  unint64_t result = qword_269CDC7C0;
  if (!qword_269CDC7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7C0);
  }
  return result;
}

unint64_t sub_2534D6D74()
{
  unint64_t result = qword_269CDC7C8;
  if (!qword_269CDC7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7C8);
  }
  return result;
}

unint64_t sub_2534D6DC4()
{
  unint64_t result = qword_269CDC7D0;
  if (!qword_269CDC7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7D0);
  }
  return result;
}

unint64_t sub_2534D6E14()
{
  unint64_t result = qword_269CDC7D8;
  if (!qword_269CDC7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7D8);
  }
  return result;
}

unint64_t sub_2534D6E64()
{
  unint64_t result = qword_269CDC7E0;
  if (!qword_269CDC7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7E0);
  }
  return result;
}

unint64_t sub_2534D6EB4()
{
  unint64_t result = qword_269CDC7E8;
  if (!qword_269CDC7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7E8);
  }
  return result;
}

unint64_t sub_2534D6F04()
{
  unint64_t result = qword_269CDC7F0;
  if (!qword_269CDC7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7F0);
  }
  return result;
}

unint64_t sub_2534D6F54()
{
  unint64_t result = qword_269CDC7F8;
  if (!qword_269CDC7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC7F8);
  }
  return result;
}

unint64_t sub_2534D6FA4()
{
  unint64_t result = qword_269CDC800;
  if (!qword_269CDC800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC800);
  }
  return result;
}

unint64_t sub_2534D6FF4()
{
  unint64_t result = qword_269CDC808;
  if (!qword_269CDC808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC808);
  }
  return result;
}

unint64_t sub_2534D7044()
{
  unint64_t result = qword_269CDC810;
  if (!qword_269CDC810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC810);
  }
  return result;
}

unint64_t sub_2534D7094()
{
  unint64_t result = qword_269CDC818;
  if (!qword_269CDC818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC818);
  }
  return result;
}

unint64_t sub_2534D70E4()
{
  unint64_t result = qword_269CDC820;
  if (!qword_269CDC820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC820);
  }
  return result;
}

unint64_t sub_2534D7134()
{
  unint64_t result = qword_269CDC828;
  if (!qword_269CDC828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC828);
  }
  return result;
}

unint64_t sub_2534D7184()
{
  unint64_t result = qword_269CDC830;
  if (!qword_269CDC830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC830);
  }
  return result;
}

unint64_t sub_2534D71D4()
{
  unint64_t result = qword_269CDC838;
  if (!qword_269CDC838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC838);
  }
  return result;
}

unint64_t sub_2534D7224()
{
  unint64_t result = qword_269CDC840;
  if (!qword_269CDC840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC840);
  }
  return result;
}

unint64_t sub_2534D7274()
{
  unint64_t result = qword_269CDC848;
  if (!qword_269CDC848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC848);
  }
  return result;
}

unint64_t sub_2534D72C4()
{
  unint64_t result = qword_269CDC850;
  if (!qword_269CDC850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC850);
  }
  return result;
}

unint64_t sub_2534D7314()
{
  unint64_t result = qword_269CDC858;
  if (!qword_269CDC858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC858);
  }
  return result;
}

unint64_t sub_2534D7364()
{
  unint64_t result = qword_269CDC860;
  if (!qword_269CDC860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC860);
  }
  return result;
}

unint64_t sub_2534D73B4()
{
  unint64_t result = qword_269CDC868;
  if (!qword_269CDC868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC868);
  }
  return result;
}

unint64_t sub_2534D7404()
{
  unint64_t result = qword_269CDC870;
  if (!qword_269CDC870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC870);
  }
  return result;
}

unint64_t sub_2534D7454()
{
  unint64_t result = qword_269CDC878;
  if (!qword_269CDC878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC878);
  }
  return result;
}

unint64_t sub_2534D74A4()
{
  unint64_t result = qword_269CDC880;
  if (!qword_269CDC880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC880);
  }
  return result;
}

unint64_t sub_2534D74F4()
{
  unint64_t result = qword_269CDC888;
  if (!qword_269CDC888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC888);
  }
  return result;
}

unint64_t sub_2534D7544()
{
  unint64_t result = qword_269CDC890;
  if (!qword_269CDC890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC890);
  }
  return result;
}

unint64_t sub_2534D7594()
{
  unint64_t result = qword_269CDC898;
  if (!qword_269CDC898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC898);
  }
  return result;
}

unint64_t sub_2534D75E4()
{
  unint64_t result = qword_269CDC8A0;
  if (!qword_269CDC8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8A0);
  }
  return result;
}

unint64_t sub_2534D7634()
{
  unint64_t result = qword_269CDC8A8;
  if (!qword_269CDC8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8A8);
  }
  return result;
}

unint64_t sub_2534D7684()
{
  unint64_t result = qword_269CDC8B0;
  if (!qword_269CDC8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8B0);
  }
  return result;
}

unint64_t sub_2534D76D4()
{
  unint64_t result = qword_269CDC8B8;
  if (!qword_269CDC8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8B8);
  }
  return result;
}

unint64_t sub_2534D7724()
{
  unint64_t result = qword_269CDC8C0;
  if (!qword_269CDC8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8C0);
  }
  return result;
}

unint64_t sub_2534D7774()
{
  unint64_t result = qword_269CDC8C8;
  if (!qword_269CDC8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8C8);
  }
  return result;
}

unint64_t sub_2534D77C4()
{
  unint64_t result = qword_269CDC8D0;
  if (!qword_269CDC8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8D0);
  }
  return result;
}

unint64_t sub_2534D7814()
{
  unint64_t result = qword_269CDC8D8;
  if (!qword_269CDC8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8D8);
  }
  return result;
}

unint64_t sub_2534D7864()
{
  unint64_t result = qword_269CDC8E0;
  if (!qword_269CDC8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8E0);
  }
  return result;
}

unint64_t sub_2534D78B4()
{
  unint64_t result = qword_269CDC8E8;
  if (!qword_269CDC8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8E8);
  }
  return result;
}

unint64_t sub_2534D7904()
{
  unint64_t result = qword_269CDC8F0;
  if (!qword_269CDC8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8F0);
  }
  return result;
}

unint64_t sub_2534D7954()
{
  unint64_t result = qword_269CDC8F8;
  if (!qword_269CDC8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC8F8);
  }
  return result;
}

unint64_t sub_2534D79A4()
{
  unint64_t result = qword_269CDC900;
  if (!qword_269CDC900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC900);
  }
  return result;
}

unint64_t sub_2534D79F4()
{
  unint64_t result = qword_269CDC908;
  if (!qword_269CDC908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC908);
  }
  return result;
}

unint64_t sub_2534D7A44()
{
  unint64_t result = qword_269CDC910;
  if (!qword_269CDC910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC910);
  }
  return result;
}

unint64_t sub_2534D7A94()
{
  unint64_t result = qword_269CDC918;
  if (!qword_269CDC918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC918);
  }
  return result;
}

unint64_t sub_2534D7AE4()
{
  unint64_t result = qword_269CDC920;
  if (!qword_269CDC920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC920);
  }
  return result;
}

unint64_t sub_2534D7B34()
{
  unint64_t result = qword_269CDC928;
  if (!qword_269CDC928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC928);
  }
  return result;
}

unint64_t sub_2534D7B84()
{
  unint64_t result = qword_269CDC930;
  if (!qword_269CDC930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC930);
  }
  return result;
}

unint64_t sub_2534D7BD4()
{
  unint64_t result = qword_269CDC938;
  if (!qword_269CDC938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC938);
  }
  return result;
}

unint64_t sub_2534D7C24()
{
  unint64_t result = qword_269CDC940;
  if (!qword_269CDC940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC940);
  }
  return result;
}

unint64_t sub_2534D7C74()
{
  unint64_t result = qword_269CDC948;
  if (!qword_269CDC948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC948);
  }
  return result;
}

unint64_t sub_2534D7CC4()
{
  unint64_t result = qword_269CDC950;
  if (!qword_269CDC950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC950);
  }
  return result;
}

unint64_t sub_2534D7D14()
{
  unint64_t result = qword_269CDC958;
  if (!qword_269CDC958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC958);
  }
  return result;
}

unint64_t sub_2534D7D64()
{
  unint64_t result = qword_269CDC960;
  if (!qword_269CDC960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC960);
  }
  return result;
}

unint64_t sub_2534D7DB4()
{
  unint64_t result = qword_269CDC968;
  if (!qword_269CDC968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC968);
  }
  return result;
}

unint64_t sub_2534D7E04()
{
  unint64_t result = qword_269CDC970;
  if (!qword_269CDC970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC970);
  }
  return result;
}

unint64_t sub_2534D7E54()
{
  unint64_t result = qword_269CDC978;
  if (!qword_269CDC978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC978);
  }
  return result;
}

unint64_t sub_2534D7EA4()
{
  unint64_t result = qword_269CDC980;
  if (!qword_269CDC980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC980);
  }
  return result;
}

unint64_t sub_2534D7EF4()
{
  unint64_t result = qword_269CDC988;
  if (!qword_269CDC988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC988);
  }
  return result;
}

unint64_t sub_2534D7F44()
{
  unint64_t result = qword_269CDC990;
  if (!qword_269CDC990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC990);
  }
  return result;
}

unint64_t sub_2534D7F94()
{
  unint64_t result = qword_269CDC998;
  if (!qword_269CDC998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC998);
  }
  return result;
}

unint64_t sub_2534D7FE4()
{
  unint64_t result = qword_269CDC9A0;
  if (!qword_269CDC9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9A0);
  }
  return result;
}

unint64_t sub_2534D8034()
{
  unint64_t result = qword_269CDC9A8;
  if (!qword_269CDC9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9A8);
  }
  return result;
}

unint64_t sub_2534D8084()
{
  unint64_t result = qword_269CDC9B0;
  if (!qword_269CDC9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9B0);
  }
  return result;
}

unint64_t sub_2534D80D4()
{
  unint64_t result = qword_269CDC9B8;
  if (!qword_269CDC9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9B8);
  }
  return result;
}

unint64_t sub_2534D8124()
{
  unint64_t result = qword_269CDC9C0;
  if (!qword_269CDC9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9C0);
  }
  return result;
}

unint64_t sub_2534D8174()
{
  unint64_t result = qword_269CDC9C8;
  if (!qword_269CDC9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9C8);
  }
  return result;
}

unint64_t sub_2534D81C4()
{
  unint64_t result = qword_269CDC9D0;
  if (!qword_269CDC9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9D0);
  }
  return result;
}

unint64_t sub_2534D8214()
{
  unint64_t result = qword_269CDC9D8;
  if (!qword_269CDC9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9D8);
  }
  return result;
}

unint64_t sub_2534D8264()
{
  unint64_t result = qword_269CDC9E0;
  if (!qword_269CDC9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9E0);
  }
  return result;
}

unint64_t sub_2534D82B4()
{
  unint64_t result = qword_269CDC9E8;
  if (!qword_269CDC9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9E8);
  }
  return result;
}

unint64_t sub_2534D8304()
{
  unint64_t result = qword_269CDC9F0;
  if (!qword_269CDC9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9F0);
  }
  return result;
}

unint64_t sub_2534D8354()
{
  unint64_t result = qword_269CDC9F8;
  if (!qword_269CDC9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDC9F8);
  }
  return result;
}

unint64_t sub_2534D83A4()
{
  unint64_t result = qword_269CDCA00;
  if (!qword_269CDCA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA00);
  }
  return result;
}

unint64_t sub_2534D83F4()
{
  unint64_t result = qword_269CDCA08;
  if (!qword_269CDCA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA08);
  }
  return result;
}

unint64_t sub_2534D8444()
{
  unint64_t result = qword_269CDCA10;
  if (!qword_269CDCA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA10);
  }
  return result;
}

unint64_t sub_2534D8494()
{
  unint64_t result = qword_269CDCA18;
  if (!qword_269CDCA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA18);
  }
  return result;
}

unint64_t sub_2534D84E4()
{
  unint64_t result = qword_269CDCA20;
  if (!qword_269CDCA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA20);
  }
  return result;
}

unint64_t sub_2534D8534()
{
  unint64_t result = qword_269CDCA28;
  if (!qword_269CDCA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA28);
  }
  return result;
}

unint64_t sub_2534D8584()
{
  unint64_t result = qword_269CDCA30;
  if (!qword_269CDCA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA30);
  }
  return result;
}

unint64_t sub_2534D85D4()
{
  unint64_t result = qword_269CDCA38;
  if (!qword_269CDCA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA38);
  }
  return result;
}

unint64_t sub_2534D8624()
{
  unint64_t result = qword_269CDCA40;
  if (!qword_269CDCA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA40);
  }
  return result;
}

unint64_t sub_2534D8674()
{
  unint64_t result = qword_269CDCA48;
  if (!qword_269CDCA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA48);
  }
  return result;
}

unint64_t sub_2534D86C4()
{
  unint64_t result = qword_269CDCA50;
  if (!qword_269CDCA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA50);
  }
  return result;
}

unint64_t sub_2534D8714()
{
  unint64_t result = qword_269CDCA58;
  if (!qword_269CDCA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA58);
  }
  return result;
}

unint64_t sub_2534D8764()
{
  unint64_t result = qword_269CDCA60;
  if (!qword_269CDCA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA60);
  }
  return result;
}

unint64_t sub_2534D87B4()
{
  unint64_t result = qword_269CDCA68;
  if (!qword_269CDCA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA68);
  }
  return result;
}

unint64_t sub_2534D8804()
{
  unint64_t result = qword_269CDCA70;
  if (!qword_269CDCA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA70);
  }
  return result;
}

unint64_t sub_2534D8854()
{
  unint64_t result = qword_269CDCA78;
  if (!qword_269CDCA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCA78);
  }
  return result;
}

uint64_t sub_2534D88A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  sub_2534B3428();
  v4();
  return a2;
}

unint64_t sub_2534D88F8()
{
  unint64_t result = qword_269CDB420;
  if (!qword_269CDB420)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269CDB420);
  }
  return result;
}

uint64_t sub_2534D8938()
{
  uint64_t v1 = sub_2534D8D00();
  v2(v1);
  sub_25346CAF4();
  sub_2534D8E14();
  v3();
  return v0;
}

uint64_t sub_2534D898C()
{
  uint64_t v1 = sub_2534D8D00();
  v2(v1);
  sub_25346CAF4();
  sub_2534B3428();
  v3();
  return v0;
}

uint64_t sub_2534D89E0()
{
  uint64_t v1 = sub_2534D9690();
  v2(v1);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return v0;
}

unint64_t sub_2534D8A30(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_2534D8A74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253462A5C(a3);
  sub_25346CAF4();
  sub_2534D8E14();
  v4();
  return a2;
}

uint64_t sub_2534D8B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, a2, a3);
}

uint64_t sub_2534D8B60()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D8B84()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D8BA4()
{
  return sub_253B0A3A0();
}

void sub_2534D8BC4()
{
  *(void *)(v1 - 104) = v0;
  *(void *)(v1 - 96) = 0;
  uint64_t v2 = v0 + 64;
  *(void *)(v1 - 120) = v2;
  unint64_t v3 = (unint64_t)((1 << *(unsigned char *)(v2 - 32)) + 63) >> 6;
  *(void *)(v1 - 112) = v3;
  *(void *)(v1 - 128) = v3 - 1;
}

void sub_2534D8C08()
{
  *(void *)(v2 - 120) = v0;
  *(void *)(v2 - 152) = v1;
  uint64_t v3 = v1 + 64;
  unint64_t v4 = (unint64_t)((1 << *(unsigned char *)(v3 - 32)) + 63) >> 6;
  uint64_t v5 = *(void *)(v2 - 88);
  *(void *)(v2 - 104) = 0;
  *(void *)(v2 - 96) = v5 + 16;
  *(void *)(v2 - 144) = v5 + 32;
  *(void *)(v2 - 136) = v5 + 8;
  *(void *)(v2 - 168) = v3;
  *(void *)(v2 - 160) = v4;
  *(void *)(v2 - 176) = v4 - 1;
}

uint64_t sub_2534D8C64()
{
  return v0;
}

uint64_t sub_2534D8C7C()
{
  return v0;
}

uint64_t sub_2534D8C8C()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D8CAC()
{
  return 0;
}

uint64_t sub_2534D8D00()
{
  return 0;
}

void sub_2534D8D10()
{
  *(void *)(v3 - 152) = v0;
  *(void *)(v3 - 120) = 0;
  *(void *)(v3 - 192) = v1;
  uint64_t v4 = v1 + 64;
  *(void *)(v3 - 216) = v4;
  unint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v4 - 32)) + 63) >> 6;
  uint64_t v6 = *(void *)(v3 - 144);
  *(void *)(v3 - 208) = v5;
  *(void *)(v3 - 200) = v6 + 16;
  *(void *)(v3 - 104) = v2 + 16;
  *(void *)(v3 - 184) = v6 + 8;
  *(void *)(v3 - 176) = v2 + 32;
  *(void *)(v3 - 168) = v2 + 8;
  *(void *)(v3 - 160) = v6 + 32;
  *(void *)(v3 - 224) = v5 - 1;
}

uint64_t sub_2534D8DA0()
{
  return v0;
}

uint64_t sub_2534D8DB0()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_2534D8DE4()
{
  return sub_253462A5C(v0);
}

uint64_t sub_2534D8E50()
{
  return v0;
}

void sub_2534D8EBC()
{
  *(void *)(v4 - 104) = v3;
  *(void *)(v4 - 128) = v2;
  *(void *)(v4 - 168) = v1;
  *(void *)(v4 - 160) = v0;
  *(void *)(v4 - 144) = 0;
  uint64_t v5 = v1 + 64;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v5 - 32)) + 63) >> 6;
  *(void *)(v4 - 192) = v5;
  *(void *)(v4 - 184) = v6;
  *(void *)(v4 - 200) = v6 - 1;
}

uint64_t sub_2534D8F08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v7 - 136) = v4;
  *(void *)(v7 - 128) = v3;
  *(void *)(v7 - 144) = v2;
  *(void *)(v7 - 120) = *(void *)(a2 + 72);
  *(void *)(v7 - 112) = result;
  *(void *)(v7 - 96) = v5;
  *(void *)(v7 - 88) = v6;
  return result;
}

void sub_2534D8F5C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void sub_2534D8F68(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D8F84(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D8FD8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
}

uint64_t sub_2534D8FF4()
{
  return sub_253B0A080();
}

uint64_t sub_2534D9010()
{
  return sub_253462A5C(v0);
}

uint64_t sub_2534D9040()
{
  return v0;
}

uint64_t sub_2534D9064()
{
  return sub_253B07160();
}

uint64_t sub_2534D9090()
{
  return v0 & 1;
}

void *sub_2534D9104()
{
  *uint64_t v1 = v0;
  v1[1] = v2;
  return v1;
}

uint64_t sub_2534D912C(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, a1);
}

void sub_2534D9154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 88) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_2534D9188()
{
  return v0;
}

uint64_t sub_2534D91B8()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D91E0()
{
  return sub_253B0A440();
}

uint64_t sub_2534D9208()
{
  return sub_253B0A3A0();
}

void sub_2534D9248(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9264(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9280(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D929C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D92B8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D92D4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 96) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D92F0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9328(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
}

uint64_t sub_2534D9344(uint64_t a1)
{
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2534D9378()
{
  return *(void *)(v0 + 56) + *(void *)(*(void *)(v2 - 88) + 72) * v1;
}

uint64_t sub_2534D938C()
{
  return sub_253B0A5F0();
}

uint64_t sub_2534D93A4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_2534D93D0(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, a1);
}

uint64_t sub_2534D93F0()
{
  return v0;
}

uint64_t sub_2534D9404()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534D9424(uint64_t a1, uint64_t a2)
{
  sub_25346CA34(a1, a2, v2, 1u);
  sub_25346CA34(v4, v5, v3, 1u);
  return sub_2534D2608(v4, v5, v3, 1u);
}

void sub_2534D9488()
{
  *(void *)(v1 - 96) = v0;
}

void sub_2534D949C()
{
  *(void *)(v1 - 104) = v0;
}

void sub_2534D94B0()
{
  *(void *)(v1 - 96) = v0;
}

void sub_2534D94C4()
{
  *(void *)(v1 - 104) = v0;
}

void sub_2534D94D8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
}

void sub_2534D94EC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
}

uint64_t sub_2534D9500()
{
  return v0;
}

uint64_t sub_2534D9518()
{
  return 0;
}

uint64_t sub_2534D9528()
{
  return v0;
}

uint64_t sub_2534D9534()
{
  return v0;
}

uint64_t sub_2534D954C()
{
  return v0;
}

uint64_t sub_2534D9558()
{
  return sub_2534C5224(v2, v1, v0, v3, 1);
}

uint64_t sub_2534D957C()
{
  return sub_2534C51E4(v2, v1, v0, v3, 1);
}

void *sub_2534D95A0()
{
  *uint64_t v2 = v0;
  v2[1] = v1;
  return v2;
}

uint64_t sub_2534D95B8()
{
  return sub_253B096B0();
}

uint64_t sub_2534D95DC()
{
  return sub_253B096B0();
}

uint64_t sub_2534D9600()
{
  return sub_253B096B0();
}

uint64_t sub_2534D9624()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534D9690()
{
  return 0;
}

uint64_t sub_2534D969C()
{
  return swift_allocError();
}

uint64_t sub_2534D96CC()
{
  return v0;
}

uint64_t sub_2534D96D8(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, a1);
}

uint64_t sub_2534D970C()
{
  return v0;
}

uint64_t sub_2534D9718()
{
  return v0;
}

uint64_t sub_2534D9724()
{
  return v0;
}

uint64_t sub_2534D9730()
{
  return v0;
}

uint64_t sub_2534D973C()
{
  return v0;
}

uint64_t sub_2534D9748()
{
  return v1 + *(int *)(v0 + 48);
}

uint64_t sub_2534D976C()
{
  return 0;
}

uint64_t sub_2534D9778()
{
  return v0;
}

uint64_t sub_2534D9798()
{
  return sub_253B09630();
}

uint64_t sub_2534D97E4()
{
  return v0 + *(int *)(v1 + 48);
}

uint64_t sub_2534D97F4()
{
  return sub_253462A5C(v0);
}

uint64_t sub_2534D9840()
{
  return v0;
}

uint64_t sub_2534D984C()
{
  uint64_t v4 = *(void *)(v2 - 128);
  return sub_2534D88A0(v0, v4, v1);
}

uint64_t sub_2534D986C()
{
  return sub_253B096B0();
}

uint64_t sub_2534D9898()
{
  return v0;
}

uint64_t sub_2534D98A8()
{
  return v0;
}

uint64_t sub_2534D98B4()
{
  return sub_253B07160();
}

uint64_t sub_2534D98F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534D9920(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  sub_2534D2608(a1, a2, a3, a4);
  return v4;
}

uint64_t sub_2534D9940()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2534D995C()
{
  return sub_253B07160();
}

uint64_t sub_2534D9990()
{
  return v0;
}

uint64_t sub_2534D99A0()
{
  return sub_253B0A600();
}

uint64_t sub_2534D99D4()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D99FC()
{
  return v0;
}

uint64_t sub_2534D9A14()
{
  return static AST.Expr.== infix(_:_:)(v0 - 128, v0 - 176);
}

uint64_t sub_2534D9A2C()
{
  return sub_2534D89E0();
}

uint64_t sub_2534D9A44()
{
  return v0;
}

void *sub_2534D9A50(void *a1)
{
  return sub_253472068(a1, v1);
}

uint64_t sub_2534D9A78()
{
  return v0;
}

void sub_2534D9A84()
{
  *(void *)(v2 - 152) = v1;
  *(void *)(v2 - 144) = v0;
}

uint64_t sub_2534D9AA0()
{
  return v0;
}

uint64_t sub_2534D9AAC()
{
  return sub_2534D89E0();
}

uint64_t sub_2534D9AC4()
{
  return v0;
}

uint64_t sub_2534D9AD0()
{
  return v0;
}

uint64_t sub_2534D9ADC()
{
  return v0;
}

uint64_t sub_2534D9B10()
{
  return v0;
}

uint64_t sub_2534D9B1C()
{
  return v0;
}

uint64_t sub_2534D9B28()
{
  return sub_2534D89E0();
}

uint64_t sub_2534D9B40()
{
  return sub_2534D898C();
}

uint64_t sub_2534D9B74()
{
  return 0;
}

void sub_2534D9B90(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9BAC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9BC8(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_2534D9BE4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_2534D9C00()
{
  return 0;
}

void sub_2534D9CA8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 144) = a1;
}

void sub_2534D9CC4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 120) = a1;
}

uint64_t sub_2534D9CE0()
{
  return sub_2534D898C();
}

uint64_t sub_2534D9CFC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_2534D9D20()
{
  return sub_253B0A600();
}

uint64_t sub_2534D9D78()
{
  return sub_253B0A440();
}

uint64_t sub_2534D9D90()
{
  return v0;
}

uint64_t sub_2534D9DA0()
{
  return sub_2534D8938();
}

unint64_t sub_2534D9DBC()
{
  return sub_25396E0AC();
}

uint64_t sub_2534D9DD8()
{
  return v0;
}

uint64_t sub_2534D9DF0()
{
  return sub_2534C51E4(v1, v0, v2, v3, 1);
}

uint64_t sub_2534D9E14()
{
  return v0;
}

uint64_t sub_2534D9E2C()
{
  return v0;
}

uint64_t sub_2534D9E44()
{
  return sub_2534D8938();
}

void sub_2534D9E60()
{
  *(unsigned char *)(v0 - 65) = 1;
}

uint64_t sub_2534D9E7C()
{
  return swift_getWitnessTable();
}

void sub_2534D9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 120) = (char *)&a9 - v9;
}

uint64_t sub_2534D9EE0()
{
  return *(void *)v0;
}

uint64_t sub_2534D9F00()
{
  return v0 - 128;
}

uint64_t sub_2534D9F24()
{
  return sub_2534D89E0();
}

uint64_t sub_2534D9F3C()
{
  return v0;
}

uint64_t sub_2534D9F54()
{
  return v0;
}

uint64_t sub_2534D9F6C()
{
  return v0;
}

uint64_t sub_2534D9F84()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534D9FA8()
{
  return v0;
}

uint64_t sub_2534D9FB4()
{
  return sub_253B096B0();
}

uint64_t sub_2534D9FD8()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534D9FF4()
{
  return sub_253B096B0();
}

uint64_t sub_2534DA018()
{
  return sub_253B0A370();
}

uint64_t sub_2534DA034()
{
  return v0;
}

unint64_t sub_2534DA040()
{
  sub_2534C1C84(v0);
  return sub_2534C1C84(v1);
}

uint64_t sub_2534DA06C()
{
  return v0;
}

uint64_t sub_2534DA07C()
{
  return sub_253B0A2C0();
}

uint64_t sub_2534DA098()
{
  return v0;
}

uint64_t sub_2534DA0B8()
{
  return v0 & 1;
}

uint64_t sub_2534DA0DC()
{
  return v1 + *(int *)(v0 + 20);
}

uint64_t sub_2534DA0EC()
{
  return v0;
}

uint64_t sub_2534DA104()
{
  return sub_2534D88A0(v1, v0, v2);
}

uint64_t sub_2534DA120()
{
  return sub_2534D89E0();
}

uint64_t sub_2534DA138()
{
  return v0;
}

uint64_t sub_2534DA144()
{
  return 1;
}

uint64_t sub_2534DA154()
{
  return v0;
}

uint64_t sub_2534DA160()
{
  return sub_2534D89E0();
}

uint64_t sub_2534DA178()
{
  return v0;
}

void sub_2534DA184(uint64_t a1@<X8>)
{
  *(void *)(v1 - 88) = *(void *)(a1 + 72);
}

uint64_t sub_2534DA1D4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2534DA1F4()
{
  return sub_253462A5C(v0);
}

uint64_t sub_2534DA214()
{
  return *(void *)(v0 + 56) + *(void *)(*(void *)(v2 - 96) + 72) * v1;
}

uint64_t sub_2534DA228()
{
  return sub_2534D898C();
}

uint64_t sub_2534DA2B0()
{
  return 0x72616573696E6D6FLL;
}

void *sub_2534DA2C4()
{
  return sub_253472068(v0, v1);
}

uint64_t sub_2534DA2E4()
{
  return v0;
}

uint64_t sub_2534DA2F0()
{
  return v0;
}

uint64_t sub_2534DA304()
{
  return v0;
}

uint64_t sub_2534DA318()
{
  return 0x6D6F725072657375;
}

uint64_t sub_2534DA338()
{
  return 0x61566E7275746572;
}

uint64_t sub_2534DA34C()
{
  return 0x52747865746E6F63;
}

uint64_t sub_2534DA360@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

uint64_t sub_2534DA368@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

unsigned char *sub_2534DA370@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_2534DA378@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t sub_2534DA380()
{
  return 0x656D6F646167656DLL;
}

uint64_t sub_2534DA394@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void sub_2534DA39C()
{
  *(_DWORD *)(v0 - 108) = 1;
}

uint64_t sub_2534DA3A8()
{
  return 0x61636F5669726973;
}

uint64_t sub_2534DA3BC()
{
  return sub_253B0A680();
}

uint64_t sub_2534DA3DC()
{
  return sub_253B09860();
}

uint64_t sub_2534DA41C()
{
  return 0;
}

uint64_t sub_2534DA430()
{
  return 0;
}

uint64_t sub_2534DA444()
{
  return 0;
}

uint64_t sub_2534DA458()
{
  return 0;
}

uint64_t sub_2534DA498()
{
  return v0;
}

uint64_t sub_2534DA4A4()
{
  return sub_2534D89E0();
}

uint64_t sub_2534DA4C8()
{
  return v0;
}

unint64_t sub_2534DA4DC()
{
  return sub_25396E0AC();
}

uint64_t sub_2534DA4F4()
{
  return sub_253B096B0();
}

uint64_t sub_2534DA514()
{
  return sub_253B096B0();
}

uint64_t sub_2534DA540(uint64_t a1)
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, a1);
}

uint64_t sub_2534DA560()
{
  return sub_253B0A370();
}

uint64_t sub_2534DA580()
{
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 0, 1, v0);
}

uint64_t sub_2534DA5A0()
{
  return v0;
}

uint64_t sub_2534DA5AC()
{
  return v0;
}

uint64_t sub_2534DA5B8()
{
  return v0;
}

uint64_t sub_2534DA5CC()
{
  return sub_2534D88A0(v0, v2, v1);
}

void sub_2534DA5F8()
{
  *(void *)(v0 - 104) = *(void *)(v0 - 176);
}

uint64_t sub_2534DA604()
{
  return v0;
}

uint64_t sub_2534DA610()
{
  return sub_2534D89E0();
}

uint64_t sub_2534DA628()
{
  return sub_253B0A440();
}

uint64_t sub_2534DA648()
{
  return sub_253B09630();
}

uint64_t sub_2534DA660()
{
  return sub_2534D898C();
}

uint64_t sub_2534DA684()
{
  return sub_253B0A370();
}

uint64_t sub_2534DA69C()
{
  return sub_253B0A3A0();
}

uint64_t sub_2534DA6BC()
{
  return 0;
}

uint64_t sub_2534DA70C()
{
  return AST.Expr.hash(into:)(v0);
}

uint64_t sub_2534DA724()
{
  return *(unsigned int *)(v0 - 108);
}

uint64_t sub_2534DA754()
{
  sub_25346CA4C(v3);
  sub_25346CA4C(v1);
  sub_25346CA4C(v2);
  return v0;
}

uint64_t sub_2534DA78C()
{
  return sub_253B095D0();
}

uint64_t sub_2534DA7AC()
{
  return sub_253B095D0();
}

uint64_t sub_2534DA7CC()
{
  *(void *)(v2 - 72) = v0;
  sub_2534C1C84(v0);
  unint64_t v3 = sub_2534C1C84(v1);
  return AST.Expr.description.getter(v3);
}

uint64_t sub_2534DA810()
{
  return sub_2534D89E0();
}

uint64_t sub_2534DA828()
{
  return v0;
}

uint64_t sub_2534DA834()
{
  return sub_2534D88A0(v2, v0, v1);
}

uint64_t sub_2534DA854()
{
  return sub_253B0A440();
}

void sub_2534DA880()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 128);
}

void sub_2534DA88C()
{
  *(void *)(v1 - 144) = v0;
}

void sub_2534DA8A0()
{
  *(void *)(v1 - 120) = v0;
}

void sub_2534DA8B4()
{
  *(void *)(v1 - 144) = v0;
}

void sub_2534DA8C8()
{
  *(void *)(v1 - 120) = v0;
}

void sub_2534DA8DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 120) = a1;
}

void sub_2534DA8F0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 144) = a1;
}

uint64_t sub_2534DA980(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_2539E6C84();
    uint64_t v2 = v13;
    uint64_t v4 = *(void *)(sub_253B059D0() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = sub_253B05970();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v13 + 16);
      if (v10 >= *(void *)(v13 + 24) >> 1) {
        sub_2539E6C84();
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static Expression.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v146 = a1;
  uint64_t v147 = a2;
  uint64_t v4 = type metadata accessor for OpenExpression(0);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = sub_2534F8208((uint64_t)v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for CancelExpression(v7);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = sub_2534F8208((uint64_t)v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for RejectExpression(v11);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = sub_2534F8208((uint64_t)v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for UndoExpression(v15);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = sub_2534F8208((uint64_t)v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for PickOneExpression(v19);
  uint64_t v21 = sub_25346CB4C(v20);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = sub_2534F8208((uint64_t)v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = type metadata accessor for ConfirmExpression(v23);
  uint64_t v25 = sub_25346CB4C(v24);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = sub_2534F8208((uint64_t)v130 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v131 = type metadata accessor for PickExpression(v27);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = sub_2534F8208((uint64_t)v130 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130[2] = type metadata accessor for UpdateParametersExpression(v30);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = sub_2534F8208((uint64_t)v130 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130[1] = type metadata accessor for IndexExpression(v33);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = sub_2534F8208((uint64_t)v130 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v132 = type metadata accessor for InfixExpression(v36);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = sub_2534F8208((uint64_t)v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130[0] = type metadata accessor for PrefixExpression(v39);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v40);
  sub_2534F8208((uint64_t)v130 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_253B059D0();
  sub_253465998();
  uint64_t v144 = v43;
  uint64_t v145 = v42;
  MEMORY[0x270FA5388](v42);
  uint64_t v45 = sub_2534F8208((uint64_t)v130 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Expression(v45);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v46);
  sub_2534659D8();
  uint64_t v143 = v47;
  sub_2534B324C();
  MEMORY[0x270FA5388](v48);
  sub_2534B3318();
  uint64_t v142 = v49;
  sub_2534B324C();
  MEMORY[0x270FA5388](v50);
  sub_2534B3318();
  uint64_t v141 = v51;
  sub_2534B324C();
  MEMORY[0x270FA5388](v52);
  sub_2534B3318();
  uint64_t v140 = v53;
  sub_2534B324C();
  MEMORY[0x270FA5388](v54);
  sub_2534B3318();
  uint64_t v136 = v55;
  sub_2534B324C();
  MEMORY[0x270FA5388](v56);
  sub_2534B3318();
  uint64_t v139 = v57;
  sub_2534B324C();
  MEMORY[0x270FA5388](v58);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v59);
  sub_2534F882C();
  MEMORY[0x270FA5388](v60);
  sub_2534B3318();
  uint64_t v137 = v61;
  sub_2534B324C();
  MEMORY[0x270FA5388](v62);
  sub_2534B3318();
  uint64_t v138 = v63;
  sub_2534B324C();
  MEMORY[0x270FA5388](v64);
  sub_2534F8600();
  uint64_t v66 = MEMORY[0x270FA5388](v65);
  uint64_t v68 = (void *)((char *)v130 - v67);
  MEMORY[0x270FA5388](v66);
  sub_2534B3318();
  uint64_t v135 = v69;
  sub_2534B324C();
  MEMORY[0x270FA5388](v70);
  sub_2534B3318();
  uint64_t v133 = v71;
  sub_2534B324C();
  MEMORY[0x270FA5388](v72);
  sub_2534B3318();
  uint64_t v134 = v73;
  sub_2534B324C();
  uint64_t v75 = MEMORY[0x270FA5388](v74);
  uint64_t v77 = (unsigned __int8 *)v130 - v76;
  uint64_t v78 = MEMORY[0x270FA5388](v75);
  MEMORY[0x270FA5388](v78);
  unint64_t v80 = (unsigned __int8 *)v130 - v79;
  uint64_t v81 = sub_253462A5C(&qword_269CDCD10);
  uint64_t v82 = sub_25346CB4C(v81);
  MEMORY[0x270FA5388](v82);
  sub_2534B34A4();
  uint64_t v84 = v3 + *(int *)(v83 + 56);
  sub_2534EDEDC();
  uint64_t v147 = (uint64_t *)v84;
  sub_2534EDEDC();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_2534EDEDC();
      if (sub_2534F82D8() == 1)
      {
        uint64_t v88 = v144;
        sub_25347FA84();
        v89();
        LOBYTE(v68) = _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
        uint64_t v90 = *(void (**)(void))(v88 + 8);
        sub_2534D91AC();
        v90();
        sub_2534D91AC();
        v90();
        goto LABEL_70;
      }
      sub_2534659CC();
      v123();
      goto LABEL_88;
    case 2u:
      sub_2534EDEDC();
      if (sub_2534F8550() != 2) {
        goto LABEL_87;
      }
      sub_2534F85B0();
      if (*v77 == *v80 && (_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0)
      {
        sub_2534DC568();
        sub_2534ACF74();
        goto LABEL_43;
      }
      sub_2534DC568();
      sub_2534ACF74();
      goto LABEL_95;
    case 3u:
      uint64_t v91 = v134;
      sub_2534EDEDC();
      if (sub_2534F82D8() != 3) {
        goto LABEL_87;
      }
      sub_2534F88F0();
      if (*v91 == *(unsigned __int8 *)v68
        && (sub_2534F8920() & 1) != 0
        && (_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0)
      {
        goto LABEL_42;
      }
      goto LABEL_94;
    case 4u:
      sub_2534EDEDC();
      if (sub_2534F82D8() != 4) {
        goto LABEL_87;
      }
      sub_2534F88F0();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0
        && (sub_2534F8920() & 1) != 0)
      {
        goto LABEL_42;
      }
      goto LABEL_94;
    case 5u:
      sub_2534EDEDC();
      if (sub_2534F82D8() != 5) {
        goto LABEL_87;
      }
      sub_2534F88F0();
      if (_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0())
      {
        sub_2534BA2B4();
        if (v92) {
          goto LABEL_42;
        }
      }
      goto LABEL_94;
    case 6u:
      uint64_t v93 = v3;
      sub_2534EDEDC();
      uint64_t v95 = *v68;
      uint64_t v94 = v68[1];
      uint64_t v97 = v68[2];
      uint64_t v96 = v68[3];
      uint64_t v98 = v147;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v93;
        goto LABEL_88;
      }
      uint64_t v99 = *v98;
      uint64_t v100 = v98[1];
      uint64_t v102 = v98[2];
      uint64_t v101 = v98[3];
      if (v95 != v99 || v94 != v100)
      {
        sub_2534F8958();
        if ((sub_253B0A4C0() & 1) == 0) {
          goto LABEL_100;
        }
      }
      if (v96)
      {
        if (!v101) {
          goto LABEL_100;
        }
        BOOL v104 = v97 == v102 && v96 == v101;
        if (!v104 && (sub_253B0A4C0() & 1) == 0) {
          goto LABEL_100;
        }
      }
      else if (v101)
      {
LABEL_100:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
      sub_2534C1288();
      char v129 = v128;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v129)
      {
LABEL_103:
        sub_2534DC568();
        LOBYTE(v68) = 1;
      }
      else
      {
LABEL_96:
        sub_2534DC568();
LABEL_89:
        LOBYTE(v68) = 0;
      }
      return v68 & 1;
    case 7u:
      sub_2534F8958();
      sub_2534EDEDC();
      if (sub_2534F8550() != 7) {
        goto LABEL_60;
      }
      sub_2534D970C();
      sub_2534BA26C();
      goto LABEL_59;
    case 8u:
      uint64_t v105 = v138;
      sub_2534EDEDC();
      if (sub_2534F82D8() != 8) {
        goto LABEL_87;
      }
      sub_2534F88F0();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0
        && *(void *)(v105 + *(int *)(v131 + 20)) == *(void *)((char *)v68 + *(int *)(v131 + 20)))
      {
LABEL_42:
        sub_2534DC568();
LABEL_43:
        sub_2534DC568();
        goto LABEL_103;
      }
LABEL_94:
      sub_2534DC568();
LABEL_95:
      sub_2534DC568();
      goto LABEL_96;
    case 9u:
      sub_2534EDEDC();
      if (sub_2534F82D8() == 9) {
        goto LABEL_68;
      }
      goto LABEL_87;
    case 0xAu:
      sub_2534EDEDC();
      uint64_t v107 = *v2;
      uint64_t v106 = v2[1];
      int v108 = *((unsigned __int8 *)v2 + 16);
      int v109 = *((unsigned __int8 *)v2 + 17);
      uint64_t v110 = (unsigned __int8 *)v147;
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_60;
      }
      int v111 = *((unsigned __int8 *)v2 + 18);
      uint64_t v112 = v110;
      uint64_t v113 = *(void *)v110;
      uint64_t v114 = *((void *)v110 + 1);
      int v115 = v112[16];
      int v116 = v112[17];
      int v117 = v111 ^ v112[18];
      if (v107 == v113 && v106 == v114)
      {
        swift_bridgeObjectRelease_n();
        if ((v108 ^ v115 | v109 ^ v116 | v117)) {
          goto LABEL_96;
        }
      }
      else
      {
        sub_253B0A4C0();
        sub_2534F8940();
        swift_bridgeObjectRelease();
        if ((v108 ^ v115) & 1 | ((v107 & 1) == 0) | ((v109 ^ v116) | v117) & 1) {
          goto LABEL_96;
        }
      }
      goto LABEL_103;
    case 0xBu:
      sub_2534EDEDC();
      if (sub_2534F8550() != 11) {
        goto LABEL_60;
      }
      sub_2534D970C();
      sub_2534C1288();
      goto LABEL_59;
    case 0xCu:
      sub_2534EDEDC();
      if (sub_2534F82D8() == 12) {
        goto LABEL_68;
      }
      goto LABEL_87;
    case 0xDu:
      sub_2534EDEDC();
      if (sub_2534F8550() != 13)
      {
LABEL_60:
        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
      uint64_t v119 = sub_2534D970C();
      sub_2534BA19C(v119, v120);
LABEL_59:
      sub_2534F8940();
      swift_bridgeObjectRelease();
      goto LABEL_70;
    case 0xEu:
      sub_2534EDEDC();
      if (sub_2534F82D8() != 14) {
        goto LABEL_87;
      }
      sub_2534F85B0();
      uint64_t v121 = sub_2534D973C();
      LOBYTE(v68) = static UndoExpression.== infix(_:_:)(v121, v122);
      goto LABEL_69;
    case 0xFu:
      sub_2534EDEDC();
      if (sub_2534F82D8() == 15) {
        goto LABEL_68;
      }
      goto LABEL_87;
    case 0x10u:
      sub_2534EDEDC();
      if (sub_2534F82D8() == 16) {
        goto LABEL_68;
      }
      goto LABEL_87;
    case 0x11u:
      sub_2534EDEDC();
      if (sub_2534F82D8() != 17)
      {
LABEL_87:
        sub_2534DC568();
        goto LABEL_88;
      }
LABEL_68:
      sub_2534F85B0();
      LOBYTE(v68) = sub_2534F869C();
LABEL_69:
      sub_2534DC568();
      sub_2534DC568();
      goto LABEL_70;
    case 0x12u:
      if (sub_2534F87E8() == 18) {
        goto LABEL_103;
      }
      goto LABEL_88;
    case 0x13u:
      if (sub_2534F87E8() == 19) {
        goto LABEL_103;
      }
      goto LABEL_88;
    case 0x14u:
      if (sub_2534F87E8() == 20) {
        goto LABEL_103;
      }
      goto LABEL_88;
    case 0x15u:
      if (sub_2534F87E8() == 21) {
        goto LABEL_103;
      }
      goto LABEL_88;
    case 0x16u:
      if (sub_2534F87E8() == 22) {
        goto LABEL_103;
      }
      goto LABEL_88;
    default:
      sub_2534EDEDC();
      uint64_t v86 = *(void *)v80;
      uint64_t v85 = *((void *)v80 + 1);
      char v87 = v80[16];
      if (sub_2534F8550())
      {
        sub_2534E43E0(v86, v85, v87);
LABEL_88:
        sub_253472458(v3, &qword_269CDCD10);
        goto LABEL_89;
      }
      uint64_t v125 = *v68;
      uint64_t v126 = v68[1];
      char v127 = *((unsigned char *)v68 + 16);
      v150[0] = v86;
      v150[1] = v85;
      char v151 = v87;
      v148[0] = v125;
      v148[1] = v126;
      char v149 = v127;
      LOBYTE(v68) = static ValueExpression.== infix(_:_:)((uint64_t)v150, (uint64_t)v148);
      sub_2534E43E0(v125, v126, v127);
      sub_2534E43E0(v86, v85, v87);
LABEL_70:
      sub_2534DC568();
      return v68 & 1;
  }
}

uint64_t static ValueExpression.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(uint64_t *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1:
      if (v7 != 1) {
        goto LABEL_27;
      }
      uint64_t v13 = sub_2534D9718();
      sub_2534E43E0(v13, v14, 1);
      uint64_t v15 = sub_2534ACF74();
      sub_2534E43E0(v15, v16, 1);
      char v12 = v2 == v5;
      return v12 & 1;
    case 2:
      if (v7 != 2) {
        goto LABEL_27;
      }
      uint64_t v17 = sub_2534D9718();
      sub_2534E43E0(v17, v18, 2);
      uint64_t v19 = sub_2534ACF74();
      sub_2534E43E0(v19, v20, 2);
      char v12 = *(double *)&v2 == *(double *)&v5;
      return v12 & 1;
    case 3:
      if (v7 != 3) {
        goto LABEL_22;
      }
      if (v2 == v5 && v3 == v6) {
        char v12 = 1;
      }
      else {
        char v12 = sub_2534F8714();
      }
      sub_2534E4408(v5, v6, 3);
      sub_2534E4408(v2, v3, 3);
      uint64_t v23 = sub_2534F84B4(v2, v3, 3);
      char v25 = 3;
      goto LABEL_33;
    case 4:
      if (v7 != 4) {
        goto LABEL_22;
      }
      sub_2534E4408(*(void *)a2, *(void *)(a2 + 8), 4);
      sub_2534E4408(v2, v3, 4);
      sub_2534BA26C();
      char v12 = v22;
      uint64_t v23 = sub_2534F84B4(v2, v3, 4);
      char v25 = 4;
      goto LABEL_33;
    case 5:
      if (v7 == 5)
      {
        if (v2 == v5 && v3 == v6) {
          char v12 = 1;
        }
        else {
          char v12 = sub_2534F8714();
        }
        sub_2534E4408(v5, v6, 5);
        sub_2534E4408(v2, v3, 5);
        uint64_t v23 = sub_2534F84B4(v2, v3, 5);
        char v25 = 5;
LABEL_33:
        sub_2534E43E0(v23, v24, v25);
      }
      else
      {
LABEL_22:
        swift_bridgeObjectRetain();
LABEL_27:
        sub_2534E4408(v5, v6, v7);
        uint64_t v28 = sub_2534D9718();
        uint64_t v30 = sub_2534F84B4(v28, v29, v4);
        sub_2534E43E0(v30, v31, v7);
        char v12 = 0;
      }
      break;
    case 6:
      if (v7 != 6 || (v6 | v5) != 0) {
        goto LABEL_27;
      }
      uint64_t v32 = sub_2534D9718();
      sub_2534E43E0(v32, v33, 6);
      sub_2534E43E0(0, 0, 6);
      char v12 = 1;
      break;
    default:
      if (*(unsigned char *)(a2 + 16)) {
        goto LABEL_27;
      }
      uint64_t v8 = sub_2534D9718();
      sub_2534E43E0(v8, v9, 0);
      uint64_t v10 = sub_2534ACF74();
      sub_2534E43E0(v10, v11, 0);
      char v12 = ((v2 & 1) == 0) ^ v5;
      break;
  }
  return v12 & 1;
}

uint64_t static PrefixExpression.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = sub_2534D8D00();
  uint64_t v3 = type metadata accessor for PrefixExpression(v2);
  sub_2534F8774(*(int *)(v3 + 20));
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t static InfixExpression.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = sub_2534D8D00();
  uint64_t v3 = type metadata accessor for InfixExpression(v2);
  sub_2534F8774(*(int *)(v3 + 20));
  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
    return 0;
  }
  sub_2534F8774(*(int *)(v3 + 24));
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t static IndexExpression.== infix(_:_:)()
{
  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
    return 0;
  }
  uint64_t v0 = type metadata accessor for IndexExpression(0);
  sub_2534F8774(*(int *)(v0 + 20));
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

void static UpdateParametersExpression.== infix(_:_:)()
{
  if (_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0())
  {
    type metadata accessor for UpdateParametersExpression(0);
    sub_2534BA2B4();
  }
}

void static CallExpression.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (sub_253B0A4C0() & 1) == 0) {
    return;
  }
  if (!v3)
  {
    if (v4) {
      return;
    }
    goto LABEL_13;
  }
  if (v4)
  {
    BOOL v7 = v2 == v5 && v3 == v4;
    if (v7 || (sub_2534D973C(), (sub_253B0A4C0() & 1) != 0))
    {
LABEL_13:
      sub_2534ACF74();
      sub_2534C1288();
    }
  }
}

void static SayExpression.== infix(_:_:)()
{
}

BOOL static PickExpression.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for PickExpression(0);
  return *(void *)(a1 + *(int *)(v4 + 20)) == *(void *)(a2 + *(int *)(v4 + 20));
}

uint64_t static SearchExpression.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 17);
  int v4 = *(unsigned __int8 *)(a1 + 18);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 17);
  int v7 = *(unsigned __int8 *)(a2 + 18);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t result = 0;
    if (v2 != v5) {
      return result;
    }
    goto LABEL_9;
  }
  char v9 = sub_253B0A4C0();
  uint64_t result = 0;
  if ((v9 & 1) != 0 && ((v2 ^ v5) & 1) == 0)
  {
LABEL_9:
    if (((v3 ^ v6) & 1) == 0) {
      return v4 ^ v7 ^ 1u;
    }
  }
  return result;
}

uint64_t type metadata accessor for OpenExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDD648);
}

uint64_t type metadata accessor for CancelExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2490F8);
}

uint64_t type metadata accessor for RejectExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDD638);
}

uint64_t type metadata accessor for UndoExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDD628);
}

uint64_t type metadata accessor for PickOneExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249138);
}

uint64_t type metadata accessor for ConfirmExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDD618);
}

uint64_t type metadata accessor for PickExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248FF8);
}

uint64_t type metadata accessor for UpdateParametersExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249560);
}

uint64_t type metadata accessor for IndexExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249068);
}

uint64_t type metadata accessor for InfixExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249078);
}

uint64_t type metadata accessor for PrefixExpression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249108);
}

uint64_t type metadata accessor for Expression(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248F48);
}

uint64_t sub_2534DC568()
{
  uint64_t v1 = sub_2534D9690();
  v2(v1);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return v0;
}

void static StructuredSearchExpression.== infix(_:_:)()
{
}

void static ResolveToolExpression.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
}

BOOL static UndoExpression.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_253B059D0();
  sub_253465998();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = sub_253462A5C(&qword_269CDCD18);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  sub_2534835B0();
  uint64_t v13 = sub_253462A5C(&qword_269CDB460);
  uint64_t v14 = sub_25346CB4C(v13);
  MEMORY[0x270FA5388](v14);
  sub_2534F8600();
  MEMORY[0x270FA5388](v15);
  sub_2534F89FC();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - v17;
  sub_2534E4430(a1, (uint64_t)&v27 - v17);
  sub_2534E4430(a2, v4);
  uint64_t v19 = v2 + *(int *)(v12 + 56);
  sub_2534E4430((uint64_t)v18, v2);
  sub_2534E4430(v4, v19);
  sub_2534F88B8(v2);
  if (v20)
  {
    sub_253472458(v4, &qword_269CDB460);
    sub_253472458((uint64_t)v18, &qword_269CDB460);
    sub_2534F88B8(v19);
    if (v20)
    {
      sub_253472458(v2, &qword_269CDB460);
      return 1;
    }
    goto LABEL_9;
  }
  sub_2534E4430(v2, v3);
  sub_2534F88B8(v19);
  if (v20)
  {
    sub_253472458(v4, &qword_269CDB460);
    sub_253472458((uint64_t)v18, &qword_269CDB460);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v7);
LABEL_9:
    sub_253472458(v2, &qword_269CDCD18);
    return 0;
  }
  sub_25347FA84();
  v21();
  sub_2534E457C((uint64_t)&unk_269CDCCF0);
  sub_2534D973C();
  char v22 = sub_253B096B0();
  uint64_t v23 = *(void (**)(void))(v9 + 8);
  sub_2534D9A08();
  v23();
  sub_253472458(v4, &qword_269CDB460);
  sub_253472458((uint64_t)v18, &qword_269CDB460);
  sub_2534D9A08();
  v23();
  uint64_t v24 = sub_2534D970C();
  sub_253472458(v24, v25);
  return (v22 & 1) != 0;
}

uint64_t sub_2534DC8C0()
{
  uint64_t v2 = sub_2534D8D00();
  v3(v2);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t sub_2534DC918(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x786966657270 && a2 == 0xE600000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x7869666E69 && a2 == 0xE500000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C3F0 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 1819042147 && a2 == 0xE400000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 7954803 && a2 == 0xE300000000000000;
              if (v11 || (sub_253B0A4C0() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v12 = a1 == 1801677168 && a2 == 0xE400000000000000;
                if (v12 || (sub_253B0A4C0() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v13 = a1 == 0x6D7269666E6F63 && a2 == 0xE700000000000000;
                  if (v13 || (sub_253B0A4C0() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x686372616573 && a2 == 0xE600000000000000;
                    if (v14 || (sub_253B0A4C0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C490 || (sub_253B0A4C0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 11;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x656E4F6B636970 && a2 == 0xE700000000000000;
                      if (v15 || (sub_253B0A4C0() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 12;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x5465766C6F736572 && a2 == 0xEB000000006C6F6FLL;
                        if (v16 || (sub_253B0A4C0() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 13;
                        }
                        else
                        {
                          BOOL v17 = a1 == 1868852853 && a2 == 0xE400000000000000;
                          if (v17 || (sub_253B0A4C0() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 14;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x7463656A6572 && a2 == 0xE600000000000000;
                            if (v18 || (sub_253B0A4C0() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 15;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x6C65636E6163 && a2 == 0xE600000000000000;
                              if (v19 || (sub_253B0A4C0() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 16;
                              }
                              else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C4B0 {
                                     || (sub_253B0A4C0() & 1) != 0)
                              }
                              {
                                swift_bridgeObjectRelease();
                                return 17;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x69686374614D6F6ELL && a2 == 0xEE006C6F6F54676ELL;
                                if (v20 || (sub_253B0A4C0() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 18;
                                }
                                else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0C410 {
                                       || (sub_253B0A4C0() & 1) != 0)
                                }
                                {
                                  swift_bridgeObjectRelease();
                                  return 19;
                                }
                                else
                                {
                                  BOOL v21 = a1 == 0x616C50664F646E65 && a2 == 0xE90000000000006ELL;
                                  if (v21 || (sub_253B0A4C0() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 20;
                                  }
                                  else
                                  {
                                    BOOL v22 = a1 == 1852141679 && a2 == 0xE400000000000000;
                                    if (v22 || (sub_253B0A4C0() & 1) != 0)
                                    {
                                      swift_bridgeObjectRelease();
                                      return 21;
                                    }
                                    else if (a1 == 0xD000000000000019 && a2 == 0x8000000253B0C4D0)
                                    {
                                      swift_bridgeObjectRelease();
                                      return 22;
                                    }
                                    else
                                    {
                                      char v23 = sub_253B0A4C0();
                                      swift_bridgeObjectRelease();
                                      if (v23) {
                                        return 22;
                                      }
                                      else {
                                        return 23;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2534DD198()
{
  return 23;
}

unint64_t sub_2534DD1A0(char a1)
{
  unint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656D6574617473;
      break;
    case 2:
      unint64_t result = 0x786966657270;
      break;
    case 3:
      uint64_t v3 = 1768320617;
      goto LABEL_6;
    case 4:
      uint64_t v3 = 1701080681;
LABEL_6:
      unint64_t result = v3 & 0xFFFF0000FFFFFFFFLL | 0x7800000000;
      break;
    case 5:
    case 11:
    case 17:
    case 19:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 1819042147;
      break;
    case 7:
      unint64_t result = 7954803;
      break;
    case 8:
      unint64_t result = 1801677168;
      break;
    case 9:
      unint64_t result = 0x6D7269666E6F63;
      break;
    case 10:
      unint64_t result = 0x686372616573;
      break;
    case 12:
      unint64_t result = 0x656E4F6B636970;
      break;
    case 13:
      unint64_t result = 0x5465766C6F736572;
      break;
    case 14:
      unint64_t result = 1868852853;
      break;
    case 15:
      unint64_t result = 0x7463656A6572;
      break;
    case 16:
      unint64_t result = 0x6C65636E6163;
      break;
    case 18:
      unint64_t result = 0x69686374614D6F6ELL;
      break;
    case 20:
      unint64_t result = 0x616C50664F646E65;
      break;
    case 21:
      unint64_t result = 1852141679;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534DD404()
{
  return sub_2534ECCFC();
}

uint64_t sub_2534DD41C(uint64_t a1)
{
  unint64_t v2 = sub_2534E4B18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD458(uint64_t a1)
{
  unint64_t v2 = sub_2534E4B18();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD494(uint64_t a1)
{
  unint64_t v2 = sub_2534E46F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD4D0(uint64_t a1)
{
  unint64_t v2 = sub_2534E46F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2534DD50C()
{
  return sub_2534DD1A0(*v0);
}

uint64_t sub_2534DD514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534DC918(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534DD53C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2534DD198();
  *a1 = result;
  return result;
}

uint64_t sub_2534DD564(uint64_t a1)
{
  unint64_t v2 = sub_2534E4498();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD5A0(uint64_t a1)
{
  unint64_t v2 = sub_2534E4498();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD5DC(uint64_t a1)
{
  unint64_t v2 = sub_2534E49E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD618(uint64_t a1)
{
  unint64_t v2 = sub_2534E49E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD654(uint64_t a1)
{
  unint64_t v2 = sub_2534E460C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD690(uint64_t a1)
{
  unint64_t v2 = sub_2534E460C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD6CC(uint64_t a1)
{
  unint64_t v2 = sub_2534E45C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD708(uint64_t a1)
{
  unint64_t v2 = sub_2534E45C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD744(uint64_t a1)
{
  unint64_t v2 = sub_2534E44E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD780(uint64_t a1)
{
  unint64_t v2 = sub_2534E44E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD7BC(uint64_t a1)
{
  unint64_t v2 = sub_2534E46A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD7F8(uint64_t a1)
{
  unint64_t v2 = sub_2534E46A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD834(uint64_t a1)
{
  unint64_t v2 = sub_2534E4BFC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD870(uint64_t a1)
{
  unint64_t v2 = sub_2534E4BFC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD8AC(uint64_t a1)
{
  unint64_t v2 = sub_2534E4C48();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD8E8(uint64_t a1)
{
  unint64_t v2 = sub_2534E4C48();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD924(uint64_t a1)
{
  unint64_t v2 = sub_2534E4658();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD960(uint64_t a1)
{
  unint64_t v2 = sub_2534E4658();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DD99C(uint64_t a1)
{
  unint64_t v2 = sub_2534E4530();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DD9D8(uint64_t a1)
{
  unint64_t v2 = sub_2534E4530();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDA14(uint64_t a1)
{
  unint64_t v2 = sub_2534E4A34();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDA50(uint64_t a1)
{
  unint64_t v2 = sub_2534E4A34();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDA8C(uint64_t a1)
{
  unint64_t v2 = sub_2534E486C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDAC8(uint64_t a1)
{
  unint64_t v2 = sub_2534E486C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDB04(uint64_t a1)
{
  unint64_t v2 = sub_2534E4C94();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDB40(uint64_t a1)
{
  unint64_t v2 = sub_2534E4C94();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDB7C(uint64_t a1)
{
  unint64_t v2 = sub_2534E473C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDBB8(uint64_t a1)
{
  unint64_t v2 = sub_2534E473C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDBF4(uint64_t a1)
{
  unint64_t v2 = sub_2534E47D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDC30(uint64_t a1)
{
  unint64_t v2 = sub_2534E47D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E1CE8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534DDC98(uint64_t a1)
{
  unint64_t v2 = sub_2534E4A80();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDCD4(uint64_t a1)
{
  unint64_t v2 = sub_2534E4A80();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDD10(uint64_t a1)
{
  unint64_t v2 = sub_2534E4950();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDD4C(uint64_t a1)
{
  unint64_t v2 = sub_2534E4950();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDD88(uint64_t a1)
{
  unint64_t v2 = sub_2534E4CE0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDDC4(uint64_t a1)
{
  unint64_t v2 = sub_2534E4CE0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDE00(uint64_t a1)
{
  unint64_t v2 = sub_2534E48B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDE3C(uint64_t a1)
{
  unint64_t v2 = sub_2534E48B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDE78(uint64_t a1)
{
  unint64_t v2 = sub_2534E4788();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDEB4(uint64_t a1)
{
  unint64_t v2 = sub_2534E4788();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDEF0(uint64_t a1)
{
  unint64_t v2 = sub_2534E4BB0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDF2C(uint64_t a1)
{
  unint64_t v2 = sub_2534E4BB0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534DDF68(uint64_t a1)
{
  unint64_t v2 = sub_2534E4D2C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534DDFA4(uint64_t a1)
{
  unint64_t v2 = sub_2534E4D2C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Expression.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v24;
  a20 = v25;
  uint64_t v188 = v20;
  uint64_t v27 = v26;
  uint64_t v182 = sub_253462A5C(&qword_269CDCD20);
  sub_253465998();
  uint64_t v181 = v28;
  MEMORY[0x270FA5388](v29);
  sub_2534D9264(v30, v176[0]);
  sub_253462A5C(&qword_269CDCD28);
  sub_253465998();
  uint64_t v183 = v32;
  uint64_t v184 = v31;
  MEMORY[0x270FA5388](v31);
  sub_2534D9248(v33, v176[0]);
  uint64_t v180 = type metadata accessor for OpenExpression(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v34);
  sub_2534D9BAC(v35, v176[0]);
  sub_253462A5C(&qword_269CDCD30);
  sub_253465998();
  uint64_t v178 = v37;
  uint64_t v179 = v36;
  MEMORY[0x270FA5388](v36);
  sub_2534D9BC8(v38, v176[0]);
  uint64_t v177 = sub_253462A5C(&qword_269CDCD38);
  sub_253465998();
  v176[79] = v39;
  MEMORY[0x270FA5388](v40);
  sub_2534D8F5C((uint64_t)v176 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[77] = sub_253462A5C(&qword_269CDCD40);
  sub_253465998();
  v176[76] = v42;
  MEMORY[0x270FA5388](v43);
  sub_2534D8F5C((uint64_t)v176 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[72] = sub_253462A5C(&qword_269CDCD48);
  sub_253465998();
  v176[70] = v45;
  MEMORY[0x270FA5388](v46);
  sub_2534D8F5C((uint64_t)v176 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[75] = sub_253462A5C(&qword_269CDCD50);
  sub_253465998();
  v176[74] = v48;
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = sub_2534F8208((uint64_t)v176 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[66] = type metadata accessor for CancelExpression(v51);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v52);
  sub_2534D8F5C((uint64_t)v176 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[67] = sub_253462A5C(&qword_269CDCD58);
  sub_253465998();
  v176[65] = v54;
  MEMORY[0x270FA5388](v55);
  uint64_t v57 = sub_2534F8208((uint64_t)v176 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[61] = type metadata accessor for RejectExpression(v57);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v58);
  sub_25346CB04();
  sub_2534D8F5C(v59);
  v176[62] = sub_253462A5C(&qword_269CDCD60);
  sub_253465998();
  v176[60] = v60;
  MEMORY[0x270FA5388](v61);
  sub_25346CB04();
  uint64_t v63 = sub_2534F8208(v62);
  v176[57] = type metadata accessor for UndoExpression(v63);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v64);
  sub_2534D8F5C((uint64_t)v176 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[56] = sub_253462A5C(&qword_269CDCD68);
  sub_253465998();
  v176[55] = v66;
  MEMORY[0x270FA5388](v67);
  sub_2534D8F5C((uint64_t)v176 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176[54] = sub_253462A5C(&qword_269CDCD70);
  sub_253465998();
  v176[53] = v69;
  MEMORY[0x270FA5388](v70);
  sub_25346CB04();
  uint64_t v72 = sub_2534F8208(v71);
  v176[49] = type metadata accessor for PickOneExpression(v72);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v73);
  sub_25346CB04();
  sub_2534D8F5C(v74);
  v176[48] = sub_253462A5C(&qword_269CDCD78);
  sub_253465998();
  v176[47] = v75;
  MEMORY[0x270FA5388](v76);
  sub_25346CB04();
  sub_2534D8F5C(v77);
  v176[46] = sub_253462A5C(&qword_269CDCD80);
  sub_253465998();
  v176[44] = v78;
  MEMORY[0x270FA5388](v79);
  sub_25346CB04();
  sub_2534D8F5C(v80);
  v176[42] = sub_253462A5C(&qword_269CDCD88);
  sub_253465998();
  v176[41] = v81;
  MEMORY[0x270FA5388](v82);
  sub_25346CB04();
  uint64_t v84 = sub_2534F8208(v83);
  v176[37] = type metadata accessor for ConfirmExpression(v84);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v85);
  sub_25346CB04();
  sub_2534D8F5C(v86);
  v176[38] = sub_253462A5C(&qword_269CDCD90);
  sub_253465998();
  v176[36] = v87;
  MEMORY[0x270FA5388](v88);
  sub_25346CB04();
  uint64_t v90 = sub_2534F8208(v89);
  v176[33] = type metadata accessor for PickExpression(v90);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v91);
  sub_25346CB04();
  sub_2534D8F5C(v92);
  v176[32] = sub_253462A5C(&qword_269CDCD98);
  sub_253465998();
  v176[31] = v93;
  MEMORY[0x270FA5388](v94);
  sub_25346CB04();
  sub_2534D8F5C(v95);
  v176[30] = sub_253462A5C(&qword_269CDCDA0);
  sub_253465998();
  v176[28] = v96;
  MEMORY[0x270FA5388](v97);
  sub_25346CB04();
  sub_2534D8F5C(v98);
  v176[26] = sub_253462A5C(&qword_269CDCDA8);
  sub_253465998();
  v176[25] = v99;
  MEMORY[0x270FA5388](v100);
  sub_25346CB04();
  uint64_t v102 = sub_2534F8208(v101);
  v176[21] = type metadata accessor for UpdateParametersExpression(v102);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v103);
  sub_25346CB04();
  sub_2534D8F5C(v104);
  v176[22] = sub_253462A5C(&qword_269CDCDB0);
  sub_253465998();
  v176[20] = v105;
  MEMORY[0x270FA5388](v106);
  sub_25346CB04();
  uint64_t v108 = sub_2534F8208(v107);
  v176[16] = type metadata accessor for IndexExpression(v108);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v109);
  sub_25346CB04();
  sub_2534D8F5C(v110);
  v176[17] = sub_253462A5C(&qword_269CDCDB8);
  sub_253465998();
  v176[15] = v111;
  MEMORY[0x270FA5388](v112);
  sub_25346CB04();
  uint64_t v114 = sub_2534F8208(v113);
  v176[11] = type metadata accessor for InfixExpression(v114);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v115);
  sub_25346CB04();
  sub_2534D8F5C(v116);
  v176[12] = sub_253462A5C(&qword_269CDCDC0);
  sub_253465998();
  v176[10] = v117;
  MEMORY[0x270FA5388](v118);
  sub_25346CB04();
  uint64_t v120 = sub_2534F8208(v119);
  v176[6] = type metadata accessor for PrefixExpression(v120);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v121);
  sub_25346CB04();
  sub_2534D8F5C(v122);
  v176[7] = sub_253462A5C(&qword_269CDCDC8);
  sub_253465998();
  v176[5] = v123;
  MEMORY[0x270FA5388](v124);
  sub_25346CB04();
  sub_2534F8208(v125);
  v176[4] = sub_253B059D0();
  sub_253465998();
  v176[3] = v126;
  MEMORY[0x270FA5388](v127);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDCDD0);
  sub_253465998();
  v176[1] = v128;
  MEMORY[0x270FA5388](v129);
  sub_2534835B0();
  uint64_t v130 = type metadata accessor for Expression(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v131);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDCDD8);
  sub_253465998();
  uint64_t v186 = v132;
  uint64_t v187 = v133;
  MEMORY[0x270FA5388](v132);
  sub_2534966B0();
  sub_2534F8630(v27);
  sub_2534E4498();
  uint64_t v185 = v22;
  sub_2534F883C();
  sub_253B0A680();
  sub_2534EDEDC();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_25347FA84();
      v139();
      LOBYTE(v189) = 1;
      sub_2534E4CE0();
      sub_253B0A3A0();
      sub_2534E457C((uint64_t)&unk_269CDBFB8);
      sub_253B0A440();
      sub_2534D9AD0();
      sub_2534659CC();
      v140();
      sub_2534F85D4();
      v141();
      sub_2534D9AC4();
      goto LABEL_23;
    case 2u:
      sub_2534F850C();
      LOBYTE(v189) = 2;
      sub_2534E4C94();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCF08);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v142();
      goto LABEL_22;
    case 3u:
      sub_2534F850C();
      LOBYTE(v189) = 3;
      sub_2534E4C48();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCEF8);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v143();
      goto LABEL_22;
    case 4u:
      sub_2534F850C();
      LOBYTE(v189) = 4;
      sub_2534E4BFC();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCEE8);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v144();
      goto LABEL_22;
    case 5u:
      sub_2534F850C();
      LOBYTE(v189) = 5;
      sub_2534E4BB0();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCED8);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v145();
      goto LABEL_22;
    case 6u:
      uint64_t v147 = *(void *)v23;
      uint64_t v146 = *(void *)(v23 + 8);
      uint64_t v149 = *(void *)(v23 + 16);
      uint64_t v148 = *(void *)(v23 + 24);
      uint64_t v150 = *(void *)(v23 + 32);
      LOBYTE(v189) = 6;
      sub_2534E4B18();
      sub_2534F8610();
      uint64_t v189 = v147;
      uint64_t v190 = v146;
      uint64_t v191 = v149;
      uint64_t v192 = v148;
      uint64_t v193 = v150;
      sub_2534E4B64();
      sub_253B0A440();
      sub_2534DA098();
      sub_2534659CC();
      v151();
      sub_2534659CC();
      v152();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 7u:
      uint64_t v153 = *(void *)v23;
      LOBYTE(v189) = 7;
      sub_2534E4A80();
      sub_2534F843C();
      uint64_t v189 = v153;
      sub_2534E4ACC();
      sub_2534F85E0();
      goto LABEL_16;
    case 8u:
      sub_2534F850C();
      LOBYTE(v189) = 8;
      sub_2534E4A34();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCEA8);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v154();
      goto LABEL_22;
    case 9u:
      sub_2534F850C();
      LOBYTE(v189) = 9;
      sub_2534E49E8();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCE98);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v155();
      goto LABEL_22;
    case 0xAu:
      uint64_t v157 = *(void *)v23;
      uint64_t v156 = *(void *)(v23 + 8);
      char v158 = *(unsigned char *)(v23 + 16);
      char v159 = *(unsigned char *)(v23 + 17);
      char v160 = *(unsigned char *)(v23 + 18);
      LOBYTE(v189) = 10;
      sub_2534E4950();
      sub_2534F8610();
      uint64_t v189 = v157;
      uint64_t v190 = v156;
      LOBYTE(v191) = v158;
      BYTE1(v191) = v159;
      BYTE2(v191) = v160;
      sub_2534E499C();
      sub_253B0A440();
      sub_2534DA098();
      sub_2534659CC();
      v161();
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v23, v22);
      goto LABEL_17;
    case 0xBu:
      uint64_t v162 = *(void *)v23;
      LOBYTE(v189) = 11;
      sub_2534E48B8();
      sub_2534F843C();
      uint64_t v189 = v162;
      sub_2534E4904();
      sub_2534F85E0();
      goto LABEL_16;
    case 0xCu:
      sub_2534F850C();
      LOBYTE(v189) = 12;
      sub_2534E486C();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCE68);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v163();
      goto LABEL_22;
    case 0xDu:
      uint64_t v164 = *(void *)v23;
      LOBYTE(v189) = 13;
      sub_2534E47D4();
      sub_2534F843C();
      uint64_t v189 = v164;
      sub_2534E4820();
      sub_2534F85E0();
LABEL_16:
      sub_2534659CC();
      v165();
      (*(void (**)(uint64_t, uint64_t))(v187 + 8))(v130, v21);
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    case 0xEu:
      sub_2534F850C();
      LOBYTE(v189) = 14;
      sub_2534E4788();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCE48);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v166();
      goto LABEL_22;
    case 0xFu:
      sub_2534F850C();
      LOBYTE(v189) = 15;
      sub_2534E473C();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCE38);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v167();
      goto LABEL_22;
    case 0x10u:
      sub_2534F850C();
      LOBYTE(v189) = 16;
      sub_2534E46F0();
      sub_2534F81E0();
      sub_2534E457C((uint64_t)&unk_269CDCE28);
      sub_2534F84A8();
      sub_2534F84D0();
      sub_2534F8344();
      sub_2534659CC();
      v168();
      goto LABEL_22;
    case 0x11u:
      sub_2534DC8C0();
      LOBYTE(v189) = 21;
      sub_2534E4530();
      sub_253B0A3A0();
      sub_2534E457C((uint64_t)&unk_269CDCDF8);
      sub_2534F84A8();
      sub_253B0A440();
      sub_2534659CC();
      v169();
LABEL_22:
      sub_2534DC568();
      sub_2534F83C0();
LABEL_23:
      sub_2534659CC();
      v170();
      break;
    case 0x12u:
      LOBYTE(v189) = 17;
      sub_2534E46A4();
      sub_2534F828C();
      uint64_t v171 = sub_2534F898C();
      goto LABEL_29;
    case 0x13u:
      LOBYTE(v189) = 18;
      sub_2534E4658();
      sub_2534F828C();
      uint64_t v171 = sub_2534D8DA0();
      uint64_t v173 = &a16;
LABEL_29:
      uint64_t v174 = *(v173 - 32);
      goto LABEL_30;
    case 0x14u:
      LOBYTE(v189) = 19;
      sub_2534E460C();
      sub_2534F828C();
      uint64_t v171 = sub_2534D8DA0();
      uint64_t v174 = v177;
      goto LABEL_30;
    case 0x15u:
      LOBYTE(v189) = 20;
      sub_2534E45C0();
      sub_2534F828C();
      uint64_t v171 = sub_2534F83C0();
      goto LABEL_30;
    case 0x16u:
      LOBYTE(v189) = 22;
      sub_2534E44E4();
      sub_2534F828C();
      uint64_t v171 = sub_2534F83C0();
      uint64_t v174 = v182;
LABEL_30:
      v172(v171, v174);
      sub_2534659CC();
      v175();
      break;
    default:
      uint64_t v134 = *(void *)v23;
      uint64_t v135 = *(void *)(v23 + 8);
      char v136 = *(unsigned char *)(v23 + 16);
      LOBYTE(v189) = 0;
      sub_2534E4D2C();
      sub_2534F8610();
      uint64_t v189 = v134;
      uint64_t v190 = v135;
      LOBYTE(v191) = v136;
      sub_2534E4D78();
      sub_253B0A440();
      sub_2534D8C7C();
      sub_2534659CC();
      v137();
      sub_2534659CC();
      v138();
      sub_2534E43E0(v134, v135, v136);
      break;
  }
  sub_2534F8A10();
  sub_2534847C8();
}

void Expression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v259 = v10;
  BOOL v15 = v14;
  uint64_t v252 = v16;
  uint64_t v253 = sub_253462A5C(&qword_269CDCF28);
  sub_253465998();
  uint64_t v249 = v17;
  MEMORY[0x270FA5388](v18);
  sub_2534D9B90(v19, v194);
  uint64_t v250 = sub_253462A5C(&qword_269CDCF30);
  sub_253465998();
  uint64_t v254 = v20;
  MEMORY[0x270FA5388](v21);
  sub_2534D9264(v22, v194);
  uint64_t v248 = sub_253462A5C(&qword_269CDCF38);
  sub_253465998();
  uint64_t v247 = v23;
  MEMORY[0x270FA5388](v24);
  sub_2534D9BE4(v25, v194);
  uint64_t v246 = sub_253462A5C(&qword_269CDCF40);
  sub_253465998();
  uint64_t v245 = v26;
  MEMORY[0x270FA5388](v27);
  sub_2534D92F0(v28, v194);
  uint64_t v244 = sub_253462A5C(&qword_269CDCF48);
  sub_253465998();
  uint64_t v243 = v29;
  MEMORY[0x270FA5388](v30);
  sub_2534D9BC8(v31, v194);
  uint64_t v240 = sub_253462A5C(&qword_269CDCF50);
  sub_253465998();
  uint64_t v239 = v32;
  MEMORY[0x270FA5388](v33);
  sub_2534D8F5C((uint64_t)&v194 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v242 = sub_253462A5C(&qword_269CDCF58);
  sub_253465998();
  uint64_t v241 = v35;
  MEMORY[0x270FA5388](v36);
  sub_25346CB04();
  uint64_t v251 = v37;
  uint64_t v238 = sub_253462A5C(&qword_269CDCF60);
  sub_253465998();
  uint64_t v237 = v38;
  MEMORY[0x270FA5388](v39);
  sub_2534D8F5C((uint64_t)&v194 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v236 = sub_253462A5C(&qword_269CDCF68);
  sub_253465998();
  uint64_t v235 = v41;
  MEMORY[0x270FA5388](v42);
  sub_2534D8F5C((uint64_t)&v194 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v234 = sub_253462A5C(&qword_269CDCF70);
  sub_253465998();
  uint64_t v233 = v44;
  MEMORY[0x270FA5388](v45);
  sub_2534D8F5C((uint64_t)&v194 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v232 = sub_253462A5C(&qword_269CDCF78);
  sub_253465998();
  uint64_t v231 = v47;
  MEMORY[0x270FA5388](v48);
  sub_2534D8F5C((uint64_t)&v194 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v230 = sub_253462A5C(&qword_269CDCF80);
  sub_253465998();
  uint64_t v229 = v50;
  MEMORY[0x270FA5388](v51);
  sub_2534D8F5C((uint64_t)&v194 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v228 = sub_253462A5C(&qword_269CDCF88);
  sub_253465998();
  uint64_t v227 = v53;
  MEMORY[0x270FA5388](v54);
  sub_2534D8F5C((uint64_t)&v194 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v226 = sub_253462A5C(&qword_269CDCF90);
  sub_253465998();
  uint64_t v225 = v56;
  MEMORY[0x270FA5388](v57);
  sub_2534D8F5C((uint64_t)&v194 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v224 = sub_253462A5C(&qword_269CDCF98);
  sub_253465998();
  uint64_t v223 = v59;
  MEMORY[0x270FA5388](v60);
  sub_2534D8F5C((uint64_t)&v194 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v222 = sub_253462A5C(&qword_269CDCFA0);
  sub_253465998();
  uint64_t v221 = v62;
  MEMORY[0x270FA5388](v63);
  sub_2534D8F5C((uint64_t)&v194 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v220 = sub_253462A5C(&qword_269CDCFA8);
  sub_253465998();
  uint64_t v219 = v65;
  MEMORY[0x270FA5388](v66);
  sub_2534D8F5C((uint64_t)&v194 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v218 = sub_253462A5C(&qword_269CDCFB0);
  sub_253465998();
  uint64_t v217 = v68;
  MEMORY[0x270FA5388](v69);
  sub_2534D8F5C((uint64_t)&v194 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v216 = sub_253462A5C(&qword_269CDCFB8);
  sub_253465998();
  uint64_t v215 = v71;
  MEMORY[0x270FA5388](v72);
  sub_253483644(v73, v194);
  uint64_t v214 = sub_253462A5C(&qword_269CDCFC0);
  sub_253465998();
  uint64_t v213 = v74;
  MEMORY[0x270FA5388](v75);
  sub_2534D8F5C((uint64_t)&v194 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v212 = sub_253462A5C(&qword_269CDCFC8);
  sub_253465998();
  uint64_t v211 = v77;
  MEMORY[0x270FA5388](v78);
  sub_2534D8F68(v79, v194);
  uint64_t v210 = sub_253462A5C(&qword_269CDCFD0);
  sub_253465998();
  uint64_t v209 = v80;
  MEMORY[0x270FA5388](v81);
  sub_25346CB04();
  sub_2534D8F5C(v82);
  uint64_t v208 = sub_253462A5C(&qword_269CDCFD8);
  sub_253465998();
  uint64_t v207 = v83;
  MEMORY[0x270FA5388](v84);
  sub_25346CB04();
  sub_2534D8F5C(v85);
  sub_253462A5C(&qword_269CDCFE0);
  sub_253465998();
  uint64_t v256 = v87;
  uint64_t v257 = v86;
  MEMORY[0x270FA5388](v86);
  sub_2534988A8(v88, v194);
  uint64_t v255 = type metadata accessor for Expression(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v89);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v90);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v91);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v92);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v93);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v94);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v95);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v96);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v97);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v98);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v99);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v100);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v101);
  sub_2534B3318();
  sub_2534F823C();
  MEMORY[0x270FA5388](v102);
  sub_2534F882C();
  uint64_t v104 = MEMORY[0x270FA5388](v103);
  uint64_t v106 = (char *)&v194 - v105;
  MEMORY[0x270FA5388](v104);
  sub_2534F8600();
  uint64_t v108 = MEMORY[0x270FA5388](v107);
  uint64_t v110 = (char *)&v194 - v109;
  MEMORY[0x270FA5388](v108);
  sub_2534F89FC();
  MEMORY[0x270FA5388](v111);
  uint64_t v113 = (char *)&v194 - v112;
  uint64_t v114 = v15[3];
  uint64_t v258 = v15;
  sub_253472068(v15, v114);
  sub_2534E4498();
  uint64_t v115 = v259;
  sub_253B0A660();
  if (v115) {
    goto LABEL_23;
  }
  uint64_t v197 = v12;
  uint64_t v198 = v110;
  uint64_t v199 = v11;
  long long v200 = v106;
  uint64_t v201 = v13;
  uint64_t v259 = v113;
  uint64_t v116 = v257;
  uint64_t v117 = sub_253B0A390();
  if (!*(void *)(v117 + 16)
    || (uint64_t v196 = 0,
        sub_2534D96C0(),
        uint64_t v195 = *(unsigned __int8 *)(v117 + 32),
        sub_25347B78C(1, v118, v117, v117 + 32, 0, v119),
        uint64_t v121 = v120,
        unint64_t v123 = v122,
        swift_bridgeObjectRelease(),
        v121 != v123 >> 1))
  {
    uint64_t v129 = v255;
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v131 = v130;
    sub_253462A5C(&qword_269CDB688);
    uint64_t *v131 = v129;
    sub_253B0A2D0();
    sub_2534F8464();
    sub_25347B88C();
    uint64_t v132 = sub_2534F859C();
    v133(v132);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v256 + 8))(a10, v116);
LABEL_23:
    uint64_t v172 = (uint64_t)v258;
    goto LABEL_24;
  }
  switch(v195)
  {
    case 1:
      LOBYTE(v260) = 1;
      sub_2534E4CE0();
      sub_2534F817C();
      sub_253B059D0();
      sub_2534E457C((uint64_t)&unk_269CDC068);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v134();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v135();
      sub_2534F8524();
      goto LABEL_32;
    case 2:
      LOBYTE(v260) = 2;
      sub_2534E4C94();
      sub_2534F817C();
      type metadata accessor for PrefixExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD060);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v136();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v137();
      sub_2534F8524();
      goto LABEL_32;
    case 3:
      LOBYTE(v260) = 3;
      sub_2534E4C48();
      sub_2534F817C();
      type metadata accessor for InfixExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD058);
      sub_253B0A370();
      sub_2534659CC();
      v183();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v184();
      swift_storeEnumTagMultiPayload();
      goto LABEL_33;
    case 4:
      LOBYTE(v260) = 4;
      sub_2534E4BFC();
      sub_2534F817C();
      type metadata accessor for IndexExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD050);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v138();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v139();
      sub_2534F8524();
      goto LABEL_32;
    case 5:
      LOBYTE(v260) = 5;
      sub_2534E4BB0();
      sub_2534F817C();
      type metadata accessor for UpdateParametersExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD048);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v140();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v141();
      sub_2534F8524();
      goto LABEL_32;
    case 6:
      LOBYTE(v260) = 6;
      sub_2534E4B18();
      sub_2534F817C();
      sub_2534ED27C();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v142();
      swift_unknownObjectRelease();
      uint64_t v143 = sub_2534F8274();
      v144(v143);
      uint64_t v145 = *((void *)&v260 + 1);
      uint64_t v146 = v262;
      uint64_t v147 = v202;
      *uint64_t v202 = v260;
      v147[1] = v145;
      *((_OWORD *)v147 + 1) = v261;
      v147[4] = v146;
      sub_2534F85C8();
      goto LABEL_32;
    case 7:
      LOBYTE(v260) = 7;
      sub_2534E4A80();
      sub_2534F817C();
      sub_2534ED230();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v148();
      swift_unknownObjectRelease();
      uint64_t v149 = sub_2534F8274();
      v150(v149);
      *uint64_t v203 = v260;
      sub_2534F85C8();
      goto LABEL_32;
    case 8:
      LOBYTE(v260) = 8;
      sub_2534E4A34();
      sub_2534F817C();
      type metadata accessor for PickExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD030);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v151();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v152();
      sub_2534F8524();
      goto LABEL_32;
    case 9:
      LOBYTE(v260) = 9;
      sub_2534E49E8();
      sub_2534F817C();
      type metadata accessor for ConfirmExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD028);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v153();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v154();
      sub_2534F8524();
      goto LABEL_32;
    case 10:
      LOBYTE(v260) = 10;
      sub_2534E4950();
      sub_2534F817C();
      sub_2534ED1E4();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v155();
      swift_unknownObjectRelease();
      uint64_t v156 = sub_2534F8274();
      v157(v156);
      uint64_t v158 = *((void *)&v260 + 1);
      char v159 = v261;
      char v160 = BYTE1(v261);
      char v161 = BYTE2(v261);
      uint64_t v162 = v205;
      void *v205 = v260;
      v162[1] = v158;
      *((unsigned char *)v162 + 16) = v159;
      *((unsigned char *)v162 + 17) = v160;
      *((unsigned char *)v162 + 18) = v161;
      sub_2534F85C8();
      goto LABEL_32;
    case 11:
      LOBYTE(v260) = 11;
      sub_2534E48B8();
      sub_2534F817C();
      sub_2534ED198();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v163();
      swift_unknownObjectRelease();
      uint64_t v164 = sub_2534F8274();
      v165(v164);
      void *v204 = v260;
      sub_2534F85C8();
      goto LABEL_32;
    case 12:
      LOBYTE(v260) = 12;
      sub_2534E486C();
      sub_2534F817C();
      type metadata accessor for PickOneExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD010);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v166();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v167();
      sub_2534F8524();
      goto LABEL_32;
    case 13:
      LOBYTE(v260) = 13;
      sub_2534E47D4();
      sub_2534F817C();
      sub_2534ED14C();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v185();
      swift_unknownObjectRelease();
      uint64_t v186 = sub_2534F8274();
      v187(v186);
      *uint64_t v206 = v260;
      sub_2534F85C8();
      goto LABEL_32;
    case 14:
      LOBYTE(v260) = 14;
      sub_2534E4788();
      sub_2534F817C();
      type metadata accessor for UndoExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDD000);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v168();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v169();
      sub_2534F8524();
      goto LABEL_32;
    case 15:
      LOBYTE(v260) = 15;
      sub_2534E473C();
      sub_2534F817C();
      type metadata accessor for RejectExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDCFF8);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v170();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v171();
      sub_2534F8524();
      goto LABEL_32;
    case 16:
      LOBYTE(v260) = 16;
      sub_2534E46F0();
      sub_2534F817C();
      type metadata accessor for CancelExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDCFF0);
      sub_2534F8360();
      sub_2534F8218();
      sub_2534659CC();
      v188();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v189();
      sub_2534F8524();
      goto LABEL_32;
    case 17:
      LOBYTE(v260) = 17;
      sub_2534E46A4();
      sub_2534F817C();
      sub_2534D8C7C();
      sub_2534659CC();
      v173();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v174();
      sub_2534F8540();
      goto LABEL_31;
    case 18:
      LOBYTE(v260) = 18;
      sub_2534E4658();
      sub_2534F817C();
      sub_2534D8C7C();
      sub_2534659CC();
      v175();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v176();
      sub_2534F8540();
      goto LABEL_31;
    case 19:
      LOBYTE(v260) = 19;
      sub_2534E460C();
      sub_2534F817C();
      sub_2534F8978();
      sub_2534659CC();
      v177();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v178();
      sub_2534F8540();
      goto LABEL_31;
    case 20:
      LOBYTE(v260) = 20;
      sub_2534E45C0();
      sub_2534F817C();
      sub_2534D8C7C();
      sub_2534659CC();
      v179();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v180();
      sub_2534F8540();
      goto LABEL_31;
    case 21:
      LOBYTE(v260) = 21;
      sub_2534E4530();
      sub_2534F817C();
      type metadata accessor for OpenExpression(0);
      sub_2534E457C((uint64_t)&unk_269CDCFE8);
      sub_2534F8218();
      uint64_t v190 = sub_2534F86FC();
      v191(v190);
      swift_unknownObjectRelease();
      sub_2534659CC();
      v192();
      sub_2534F85C8();
      goto LABEL_32;
    case 22:
      LOBYTE(v260) = 22;
      sub_2534E44E4();
      sub_2534F817C();
      sub_2534659CC();
      v181();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v182();
      sub_2534F8540();
LABEL_31:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      LOBYTE(v260) = 0;
      sub_2534E4D2C();
      sub_2534F817C();
      sub_2534ED2C8();
      sub_2534F8304();
      sub_2534F8680();
      sub_2534659CC();
      v124();
      swift_unknownObjectRelease();
      uint64_t v125 = sub_2534F8274();
      v126(v125);
      char v127 = v261;
      uint64_t v128 = v197;
      *uint64_t v197 = v260;
      *((unsigned char *)v128 + 16) = v127;
      sub_2534F85C8();
LABEL_32:
      swift_storeEnumTagMultiPayload();
LABEL_33:
      sub_2534DC8C0();
      break;
  }
  uint64_t v193 = (uint64_t)v258;
  sub_2534DC8C0();
  uint64_t v172 = v193;
LABEL_24:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v172);
  sub_2534847C8();
}

void sub_2534E17F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Expression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

#error "2534E181C: call analysis failed (funcsize=6)"

uint64_t ValueExpression.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t result = 1819047278;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      sub_2534D3668();
      uint64_t result = sub_253B09F00();
      break;
    case 2:
      uint64_t result = sub_253B09C30();
      break;
    case 3:
      sub_2534D970C();
      uint64_t result = String.quoted.getter();
      break;
    case 4:
      sub_2534DA980(v1);
      sub_253462A5C(&qword_269CDC550);
      sub_2534D359C();
      sub_253B096A0();
      swift_bridgeObjectRelease();
      sub_2534D9718();
      sub_253B09860();
      swift_bridgeObjectRelease();
      sub_253B09860();
      uint64_t result = 91;
      break;
    case 5:
      swift_bridgeObjectRetain();
      uint64_t result = sub_2534D970C();
      break;
    case 6:
      return result;
    default:
      if (v1) {
        uint64_t result = 1702195828;
      }
      else {
        uint64_t result = 0x65736C6166;
      }
      break;
  }
  return result;
}

uint64_t sub_2534E19A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819047278 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1819242338 && a2 == 0xE400000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 7630441 && a2 == 0xE300000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x656C62756F64 && a2 == 0xE600000000000000;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x7961727261 && a2 == 0xE500000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              char v12 = sub_253B0A4C0();
              swift_bridgeObjectRelease();
              if (v12) {
                return 6;
              }
              else {
                return 7;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2534E1C2C(char a1)
{
  uint64_t result = 1819047278;
  switch(a1)
  {
    case 1:
      uint64_t result = 1819242338;
      break;
    case 2:
      uint64_t result = 7630441;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 0x676E69727473;
      break;
    case 5:
      uint64_t result = 0x7961727261;
      break;
    case 6:
      uint64_t result = 0x6C6F626D7973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534E1CE8(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_253B0A4C0();
    sub_2534F8940();
    char v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534E1D50(uint64_t a1)
{
  unint64_t v2 = sub_2534ED3AC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E1D8C(uint64_t a1)
{
  unint64_t v2 = sub_2534ED3AC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E1DC8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED4DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E1E04(uint64_t a1)
{
  unint64_t v2 = sub_2534ED4DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E1E40()
{
  return sub_2534E1C2C(*v0);
}

uint64_t sub_2534E1E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E19A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E1E70(uint64_t a1)
{
  unint64_t v2 = sub_2534ED314();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E1EAC(uint64_t a1)
{
  unint64_t v2 = sub_2534ED314();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E1EE8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED444();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E1F24(uint64_t a1)
{
  unint64_t v2 = sub_2534ED444();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E1F60(uint64_t a1)
{
  unint64_t v2 = sub_2534ED490();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E1F9C(uint64_t a1)
{
  unint64_t v2 = sub_2534ED490();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E1FD8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED528();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E2014(uint64_t a1)
{
  unint64_t v2 = sub_2534ED528();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E2050(uint64_t a1)
{
  unint64_t v2 = sub_2534ED3F8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E208C(uint64_t a1)
{
  unint64_t v2 = sub_2534ED3F8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E20C8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED360();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E2104(uint64_t a1)
{
  unint64_t v2 = sub_2534ED360();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ValueExpression.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDD070);
  sub_253465998();
  v32[17] = v4;
  v32[18] = v3;
  MEMORY[0x270FA5388](v3);
  sub_2534D9248(v5, v32[0]);
  sub_253462A5C(&qword_269CDD078);
  sub_253465998();
  v32[15] = v7;
  v32[16] = v6;
  MEMORY[0x270FA5388](v6);
  sub_2534D92B8(v8, v32[0]);
  sub_253462A5C(&qword_269CDD080);
  sub_253465998();
  v32[11] = v10;
  v32[12] = v9;
  MEMORY[0x270FA5388](v9);
  sub_2534D9B90(v11, v32[0]);
  sub_253462A5C(&qword_269CDD088);
  sub_253465998();
  v32[8] = v13;
  v32[9] = v12;
  MEMORY[0x270FA5388](v12);
  sub_2534D9BC8(v14, v32[0]);
  v32[6] = sub_253462A5C(&qword_269CDD090);
  sub_253465998();
  v32[5] = v15;
  MEMORY[0x270FA5388](v16);
  sub_2534D8F5C((uint64_t)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32[3] = sub_253462A5C(&qword_269CDD098);
  sub_253465998();
  v32[2] = v18;
  MEMORY[0x270FA5388](v19);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDD0A0);
  sub_253465998();
  v32[1] = v20;
  MEMORY[0x270FA5388](v21);
  sub_2534966B0();
  sub_253462A5C(&qword_269CDD0A8);
  sub_253465998();
  uint64_t v34 = v22;
  uint64_t v35 = v23;
  MEMORY[0x270FA5388](v22);
  sub_25347FAAC();
  uint64_t v24 = *v1;
  v32[19] = v1[1];
  uint64_t v33 = v24;
  uint64_t v25 = *((unsigned __int8 *)v1 + 16);
  uint64_t v27 = a1[3];
  uint64_t v26 = a1[4];
  sub_253472068(a1, v27);
  sub_2534ED314();
  sub_253B0A680();
  switch(v25)
  {
    case 1:
      char v38 = 2;
      sub_2534ED490();
      sub_2534F824C();
      sub_2534F88E4();
      sub_253B0A430();
      goto LABEL_9;
    case 2:
      char v39 = 3;
      sub_2534ED444();
      sub_2534F824C();
      sub_2534F88E4();
      sub_253B0A410();
      goto LABEL_9;
    case 3:
      char v40 = 4;
      sub_2534ED3F8();
      sub_2534F824C();
      sub_253B0A3F0();
      goto LABEL_9;
    case 4:
      char v42 = 5;
      sub_2534ED3AC();
      sub_2534F824C();
      uint64_t v41 = v33;
      sub_253462A5C(&qword_269CDD0C8);
      sub_2534ED574((uint64_t)&unk_269CDD0D0);
      sub_2534F88E4();
      sub_253B0A440();
      goto LABEL_9;
    case 5:
      char v43 = 6;
      sub_2534ED360();
      sub_2534F824C();
      sub_253B0A3F0();
      goto LABEL_9;
    case 6:
      char v36 = 0;
      sub_2534ED528();
      sub_253B0A3A0();
      sub_2534659CC();
      v30();
      sub_2534659CC();
      return v31();
    default:
      char v37 = 1;
      sub_2534ED4DC();
      sub_2534F824C();
      sub_2534F88E4();
      sub_253B0A400();
LABEL_9:
      sub_2534659CC();
      v28();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v27, v26);
  }
}

void ValueExpression.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_253462A5C(&qword_269CDD100);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDD108);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D9280(v5, v54);
  sub_253462A5C(&qword_269CDD110);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_253483628(v7, v55);
  sub_253462A5C(&qword_269CDD118);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_253483644(v9, v56);
  sub_253462A5C(&qword_269CDD120);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_2534AF2BC(v11, v57);
  sub_253462A5C(&qword_269CDD128);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDD130);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDD138);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_2534966B0();
  uint64_t v62 = a1;
  sub_2534F8328(a1);
  sub_2534ED314();
  sub_2534F883C();
  sub_253B0A660();
  if (v63)
  {
    uint64_t v15 = (uint64_t)a1;
    goto LABEL_17;
  }
  uint64_t v15 = v61;
  uint64_t v16 = sub_253B0A390();
  if (!*(void *)(v16 + 16))
  {
    uint64_t v15 = (uint64_t)a1;
LABEL_9:
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v30 = v29;
    sub_253462A5C(&qword_269CDB688);
    void *v30 = &type metadata for ValueExpression;
    sub_253B0A2D0();
    sub_2534F8464();
    sub_25347B88C();
    uint64_t v31 = sub_2534F859C();
    v32(v31);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534F85D4();
    v33();
    goto LABEL_17;
  }
  sub_2534D96C0();
  uint64_t v17 = *(unsigned __int8 *)(v16 + 32);
  sub_25347B78C(1, v18, v16, v16 + 32, 0, v19);
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  if (v21 != v23 >> 1)
  {
    uint64_t v15 = (uint64_t)v62;
    goto LABEL_9;
  }
  switch(v17)
  {
    case 1:
      sub_2534ED4DC();
      sub_2534F8370();
      char v47 = sub_253B0A330();
      sub_2534659CC();
      v48();
      swift_unknownObjectRelease();
      sub_2534D911C();
      v49();
      uint64_t v27 = 0;
      char v28 = 0;
      uint64_t v26 = v47 & 1;
      uint64_t v15 = (uint64_t)v62;
      break;
    case 2:
      sub_2534ED490();
      sub_2534F8370();
      sub_2534F864C();
      uint64_t v34 = sub_253B0A360();
      sub_2534659CC();
      v35();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v36();
      uint64_t v26 = v34;
      uint64_t v27 = 0;
      char v28 = 1;
      break;
    case 3:
      sub_2534ED444();
      sub_2534F8370();
      sub_2534F864C();
      sub_253B0A340();
      uint64_t v38 = v37;
      sub_2534659CC();
      v39();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v40();
      uint64_t v27 = 0;
      uint64_t v26 = v38;
      char v28 = 2;
      break;
    case 4:
      sub_2534ED3F8();
      sub_2534F8370();
      sub_2534F864C();
      sub_253B0A320();
      sub_2534F89E8();
      uint64_t v27 = v41;
      uint64_t v59 = v42;
      sub_2534659CC();
      v43();
      swift_unknownObjectRelease();
      sub_2534D91AC();
      v44();
      uint64_t v26 = v59;
      char v28 = 3;
      break;
    case 5:
      sub_2534ED3AC();
      sub_2534F8370();
      sub_2534F864C();
      sub_253462A5C(&qword_269CDD0C8);
      sub_2534ED574((uint64_t)&unk_269CDD140);
      sub_253B0A370();
      sub_2534D99FC();
      sub_2534659CC();
      v45();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v46();
      uint64_t v27 = 0;
      uint64_t v26 = v64;
      char v28 = 4;
      break;
    case 6:
      sub_2534ED360();
      sub_2534F8370();
      sub_2534F864C();
      sub_253B0A320();
      sub_2534F89E8();
      uint64_t v27 = v50;
      uint64_t v60 = v51;
      sub_2534659CC();
      v52();
      swift_unknownObjectRelease();
      sub_2534D91AC();
      v53();
      uint64_t v26 = v60;
      char v28 = 5;
      break;
    default:
      sub_2534ED528();
      sub_2534F8370();
      sub_2534F864C();
      sub_2534F8964();
      sub_2534659CC();
      v24();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v25();
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      char v28 = 6;
      break;
  }
  *(void *)a2 = v26;
  *(void *)(a2 + 8) = v27;
  *(unsigned char *)(a2 + 16) = v28;
LABEL_17:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v15);
  sub_2534F8590();
}

void sub_2534E30C8(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_2534E30E0(void *a1)
{
  return ValueExpression.encode(to:)(a1);
}

uint64_t (*PrefixExpression.prefixOp.modify())()
{
  return nullsub_1;
}

uint64_t PrefixExpression.value.getter()
{
  return sub_2534E40AC();
}

uint64_t PrefixExpression.value.setter()
{
  return sub_2534E412C();
}

uint64_t (*PrefixExpression.value.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for PrefixExpression(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t PrefixExpression.init(prefixOp:value:)@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *a1;
  type metadata accessor for PrefixExpression(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

uint64_t sub_2534E31F8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED5F4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E3234(uint64_t a1)
{
  unint64_t v2 = sub_2534ED5F4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E3270(uint64_t a1)
{
  unint64_t v2 = sub_2534ED68C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E32AC(uint64_t a1)
{
  unint64_t v2 = sub_2534ED68C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E32E8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED640();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E3324(uint64_t a1)
{
  unint64_t v2 = sub_2534ED640();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E3360(uint64_t a1)
{
  unint64_t v2 = sub_2534ED6D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E339C(uint64_t a1)
{
  unint64_t v2 = sub_2534ED6D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PrefixExpression.PrefixOp.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDD148);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534AF2A0(v6, v15);
  sub_253462A5C(&qword_269CDD150);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDD158);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_253465A3C();
  uint64_t v9 = sub_253462A5C(&qword_269CDD160);
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_2534847E0();
  int v13 = *v2;
  sub_253472068(v4, v4[3]);
  sub_2534ED5F4();
  sub_253B0A680();
  if (v13)
  {
    if (v13 == 1)
    {
      sub_2534ED68C();
      sub_2534D9624();
      sub_2534D9AD0();
    }
    else
    {
      sub_2534ED640();
      sub_2534D9624();
    }
  }
  else
  {
    sub_2534ED6D8();
    sub_2534D9624();
    sub_2534D9AC4();
  }
  sub_2534659CC();
  v14();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  sub_2534847C8();
}

void PrefixExpression.PrefixOp.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v30 = v3;
  sub_253462A5C(&qword_269CDD188);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDD190);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDD198);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CDD1A0);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B34A4();
  sub_2534F8630(v2);
  sub_2534ED5F4();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v31 = v2;
  uint64_t v8 = sub_253B0A390();
  if (!*(void *)(v8 + 16)
    || (sub_2534D96C0(),
        int v9 = *(unsigned __int8 *)(v8 + 32),
        sub_25347B78C(1, v10, v8, v8 + 32, 0, v11),
        uint64_t v13 = v12,
        unint64_t v15 = v14,
        swift_bridgeObjectRelease(),
        v13 != v15 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v21 = v20;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v21 = &type metadata for PrefixExpression.PrefixOp;
    sub_253B0A2D0();
    sub_253B0A080();
    sub_25347B88C();
    (*(void (**)(void *))(v22 + 104))(v21);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v23 = sub_25349C5B8();
    v24(v23);
LABEL_8:
    uint64_t v25 = (uint64_t)v2;
    goto LABEL_9;
  }
  char v16 = v9;
  if (v9)
  {
    if (v9 == 1)
    {
      sub_2534ED68C();
      sub_2534F8800();
      uint64_t v17 = v30;
      sub_2534D9AD0();
      sub_2534659CC();
      v18();
      swift_unknownObjectRelease();
      sub_2534F82F4();
      v19();
    }
    else
    {
      sub_2534ED640();
      sub_2534F8800();
      uint64_t v17 = v30;
      sub_2534659CC();
      v28();
      swift_unknownObjectRelease();
      sub_2534F82F4();
      v29();
      char v16 = v9;
    }
  }
  else
  {
    sub_2534ED6D8();
    sub_2534F8800();
    sub_2534D9AC4();
    sub_2534659CC();
    v26();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v27();
    uint64_t v17 = v30;
  }
  *uint64_t v17 = v16;
  uint64_t v25 = (uint64_t)v31;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v25);
  sub_2534F856C();
  sub_2534847C8();
}

uint64_t sub_2534E3A70(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x704F786966657270 && a2 == 0xE800000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534E3B58(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x704F786966657270;
  }
}

void sub_2534E3B94()
{
}

void sub_2534E3BAC()
{
}

uint64_t sub_2534E3BC8()
{
  return sub_2534E3B58(*v0);
}

uint64_t sub_2534E3BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E3A70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E3BF8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED724();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E3C34(uint64_t a1)
{
  unint64_t v2 = sub_2534ED724();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PrefixExpression.encode(to:)()
{
  sub_2534F8530();
  sub_253462A5C(&qword_269CDD1A8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v0);
  sub_2534ED724();
  sub_2534DA3BC();
  sub_2534ED770();
  sub_2534F84DC();
  if (!v1)
  {
    type metadata accessor for PrefixExpression(0);
    sub_2534F8780();
    sub_2534E457C((uint64_t)&unk_269CDBFB8);
    sub_2534F84DC();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
}

void PrefixExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_2534847F8();
  uint64_t v17 = v16;
  uint64_t v26 = sub_253B059D0();
  sub_253465998();
  uint64_t v25 = v18;
  MEMORY[0x270FA5388](v19);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDD1C0);
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  uint64_t v21 = sub_2534B33AC();
  uint64_t v22 = type metadata accessor for PrefixExpression(v21);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v23);
  sub_25346CC6C();
  sub_253472068(v17, v17[3]);
  sub_2534ED724();
  sub_2534F883C();
  sub_253B0A660();
  if (!v13)
  {
    sub_2534ED7BC();
    sub_253B0A370();
    *unint64_t v14 = a13;
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_253B0A370();
    sub_2534F868C();
    v24();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 32))(&v14[*(int *)(v22 + 20)], v15, v26);
    sub_2534DC8C0();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v17);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534E4028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PrefixExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_2534E4040()
{
}

void InfixExpression.infixOp.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *InfixExpression.infixOp.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*InfixExpression.infixOp.modify())()
{
  return nullsub_1;
}

uint64_t InfixExpression.lhs.getter()
{
  return sub_2534E40AC();
}

uint64_t sub_2534E40AC()
{
  uint64_t v0 = sub_2534F8A1C();
  v1(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v2 = sub_2534ACF74();
  return v3(v2);
}

uint64_t InfixExpression.lhs.setter()
{
  return sub_2534E412C();
}

uint64_t sub_2534E412C()
{
  uint64_t v0 = sub_2534D9690();
  v1(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

uint64_t (*InfixExpression.lhs.modify())()
{
  return nullsub_1;
}

uint64_t InfixExpression.rhs.getter()
{
  uint64_t v0 = sub_2534F8A1C();
  type metadata accessor for InfixExpression(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v1 = sub_2534ACF74();
  return v2(v1);
}

uint64_t InfixExpression.rhs.setter()
{
  type metadata accessor for InfixExpression(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*InfixExpression.rhs.modify())()
{
  return nullsub_1;
}

uint64_t InfixExpression.init(infixOp:lhs:rhs:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  *a4 = *a1;
  uint64_t v7 = type metadata accessor for InfixExpression(0);
  uint64_t v8 = &a4[*(int *)(v7 + 20)];
  uint64_t v9 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 32);
  v13(v8, a2, v9);
  uint64_t v11 = &a4[*(int *)(v7 + 24)];
  return ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v13)(v11, a3, v9);
}

uint64_t InfixExpression.InfixOp.hash(into:)()
{
  return sub_253B0A600();
}

BOOL static InfixExpression.InfixOp.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2534E43E0(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v3 = a3 == 3 || a3 == 5;
  if (v3 || a3 == 4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2534E4408(uint64_t a1, uint64_t a2, char a3)
{
  BOOL v3 = a3 == 3 || a3 == 5;
  if (v3 || a3 == 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2534E4430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDB460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_2534E4498()
{
  unint64_t result = qword_269CDCDE0;
  if (!qword_269CDCDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCDE0);
  }
  return result;
}

unint64_t sub_2534E44E4()
{
  unint64_t result = qword_269CDCDE8;
  if (!qword_269CDCDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCDE8);
  }
  return result;
}

unint64_t sub_2534E4530()
{
  unint64_t result = qword_269CDCDF0;
  if (!qword_269CDCDF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCDF0);
  }
  return result;
}

unint64_t sub_2534E457C(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534E45C0()
{
  unint64_t result = qword_269CDCE00;
  if (!qword_269CDCE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE00);
  }
  return result;
}

unint64_t sub_2534E460C()
{
  unint64_t result = qword_269CDCE08;
  if (!qword_269CDCE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE08);
  }
  return result;
}

unint64_t sub_2534E4658()
{
  unint64_t result = qword_269CDCE10;
  if (!qword_269CDCE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE10);
  }
  return result;
}

unint64_t sub_2534E46A4()
{
  unint64_t result = qword_269CDCE18;
  if (!qword_269CDCE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE18);
  }
  return result;
}

unint64_t sub_2534E46F0()
{
  unint64_t result = qword_269CDCE20;
  if (!qword_269CDCE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE20);
  }
  return result;
}

unint64_t sub_2534E473C()
{
  unint64_t result = qword_269CDCE30;
  if (!qword_269CDCE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE30);
  }
  return result;
}

unint64_t sub_2534E4788()
{
  unint64_t result = qword_269CDCE40;
  if (!qword_269CDCE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE40);
  }
  return result;
}

unint64_t sub_2534E47D4()
{
  unint64_t result = qword_269CDCE50;
  if (!qword_269CDCE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE50);
  }
  return result;
}

unint64_t sub_2534E4820()
{
  unint64_t result = qword_269CDCE58;
  if (!qword_269CDCE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE58);
  }
  return result;
}

unint64_t sub_2534E486C()
{
  unint64_t result = qword_269CDCE60;
  if (!qword_269CDCE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE60);
  }
  return result;
}

unint64_t sub_2534E48B8()
{
  unint64_t result = qword_269CDCE70;
  if (!qword_269CDCE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE70);
  }
  return result;
}

unint64_t sub_2534E4904()
{
  unint64_t result = qword_269CDCE78;
  if (!qword_269CDCE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE78);
  }
  return result;
}

unint64_t sub_2534E4950()
{
  unint64_t result = qword_269CDCE80;
  if (!qword_269CDCE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE80);
  }
  return result;
}

unint64_t sub_2534E499C()
{
  unint64_t result = qword_269CDCE88;
  if (!qword_269CDCE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE88);
  }
  return result;
}

unint64_t sub_2534E49E8()
{
  unint64_t result = qword_269CDCE90;
  if (!qword_269CDCE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCE90);
  }
  return result;
}

unint64_t sub_2534E4A34()
{
  unint64_t result = qword_269CDCEA0;
  if (!qword_269CDCEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEA0);
  }
  return result;
}

unint64_t sub_2534E4A80()
{
  unint64_t result = qword_269CDCEB0;
  if (!qword_269CDCEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEB0);
  }
  return result;
}

unint64_t sub_2534E4ACC()
{
  unint64_t result = qword_269CDCEB8;
  if (!qword_269CDCEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEB8);
  }
  return result;
}

unint64_t sub_2534E4B18()
{
  unint64_t result = qword_269CDCEC0;
  if (!qword_269CDCEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEC0);
  }
  return result;
}

unint64_t sub_2534E4B64()
{
  unint64_t result = qword_269CDCEC8;
  if (!qword_269CDCEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEC8);
  }
  return result;
}

unint64_t sub_2534E4BB0()
{
  unint64_t result = qword_269CDCED0;
  if (!qword_269CDCED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCED0);
  }
  return result;
}

unint64_t sub_2534E4BFC()
{
  unint64_t result = qword_269CDCEE0;
  if (!qword_269CDCEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEE0);
  }
  return result;
}

unint64_t sub_2534E4C48()
{
  unint64_t result = qword_269CDCEF0;
  if (!qword_269CDCEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCEF0);
  }
  return result;
}

unint64_t sub_2534E4C94()
{
  unint64_t result = qword_269CDCF00;
  if (!qword_269CDCF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCF00);
  }
  return result;
}

unint64_t sub_2534E4CE0()
{
  unint64_t result = qword_269CDCF10;
  if (!qword_269CDCF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCF10);
  }
  return result;
}

unint64_t sub_2534E4D2C()
{
  unint64_t result = qword_269CDCF18;
  if (!qword_269CDCF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCF18);
  }
  return result;
}

unint64_t sub_2534E4D78()
{
  unint64_t result = qword_269CDCF20;
  if (!qword_269CDCF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDCF20);
  }
  return result;
}

unint64_t sub_2534E4DC4(char a1)
{
  unint64_t result = 0x6E6769737361;
  switch(a1)
  {
    case 1:
      unint64_t result = 6579297;
      break;
    case 2:
      unint64_t result = 0x6769737341646461;
      break;
    case 3:
      unint64_t result = 0x7463617274627573;
      break;
    case 4:
      unint64_t result = 0x7463617274627573;
      break;
    case 5:
      unint64_t result = 0x656469766964;
      break;
    case 6:
      unint64_t result = 0x7341656469766964;
      break;
    case 7:
      unint64_t result = 0x796C7069746C756DLL;
      break;
    case 8:
      unint64_t result = 0x796C7069746C756DLL;
      break;
    case 9:
      unint64_t result = 0x746E656E6F707865;
      break;
    case 10:
      unint64_t result = 0x6C61757165;
      break;
    case 11:
      unint64_t result = 0x6C61757145746F6ELL;
      break;
    case 12:
      unint64_t result = 28265;
      break;
    case 13:
      unint64_t result = 0xD000000000000010;
      break;
    case 14:
      unint64_t result = 0x5472657461657267;
      break;
    case 15:
    case 16:
      unint64_t result = 0x6E6168547373656CLL;
      break;
    case 17:
      unint64_t result = 6581857;
      break;
    case 18:
      unint64_t result = 29295;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534E4FE8(uint64_t a1)
{
  unint64_t v2 = sub_2534EDD14();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5024(uint64_t a1)
{
  unint64_t v2 = sub_2534EDD14();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5060(uint64_t a1)
{
  unint64_t v2 = sub_2534EDD60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E509C(uint64_t a1)
{
  unint64_t v2 = sub_2534EDD60();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E50D8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED8A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5114(uint64_t a1)
{
  unint64_t v2 = sub_2534ED8A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5150(uint64_t a1)
{
  unint64_t v2 = sub_2534EDDAC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E518C(uint64_t a1)
{
  unint64_t v2 = sub_2534EDDAC();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2534E51C8()
{
  return sub_2534E4DC4(*v0);
}

uint64_t sub_2534E51D0(uint64_t a1)
{
  unint64_t v2 = sub_2534ED808();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E520C(uint64_t a1)
{
  unint64_t v2 = sub_2534ED808();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5248(uint64_t a1)
{
  unint64_t v2 = sub_2534EDBE4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5284(uint64_t a1)
{
  unint64_t v2 = sub_2534EDBE4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E52C0(uint64_t a1)
{
  unint64_t v2 = sub_2534EDC30();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E52FC(uint64_t a1)
{
  unint64_t v2 = sub_2534EDC30();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5338(uint64_t a1)
{
  unint64_t v2 = sub_2534EDAB4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5374(uint64_t a1)
{
  unint64_t v2 = sub_2534EDAB4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E53B0(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB00();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E53EC(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB00();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5428(uint64_t a1)
{
  unint64_t v2 = sub_2534ED984();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5464(uint64_t a1)
{
  unint64_t v2 = sub_2534ED984();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E54A0(uint64_t a1)
{
  unint64_t v2 = sub_2534ED9D0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E54DC(uint64_t a1)
{
  unint64_t v2 = sub_2534ED9D0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5518(uint64_t a1)
{
  unint64_t v2 = sub_2534EDA1C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5554(uint64_t a1)
{
  unint64_t v2 = sub_2534EDA1C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5590(uint64_t a1)
{
  unint64_t v2 = sub_2534ED8EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E55CC(uint64_t a1)
{
  unint64_t v2 = sub_2534ED8EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5608(uint64_t a1)
{
  unint64_t v2 = sub_2534ED938();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5644(uint64_t a1)
{
  unint64_t v2 = sub_2534ED938();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5680(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB4C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E56BC(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB4C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E56F8(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB98();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5734(uint64_t a1)
{
  unint64_t v2 = sub_2534EDB98();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5770(uint64_t a1)
{
  unint64_t v2 = sub_2534EDA68();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E57AC(uint64_t a1)
{
  unint64_t v2 = sub_2534EDA68();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E57E8(uint64_t a1)
{
  unint64_t v2 = sub_2534ED854();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5824(uint64_t a1)
{
  unint64_t v2 = sub_2534ED854();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E5860(uint64_t a1)
{
  unint64_t v2 = sub_2534EDC7C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E589C(uint64_t a1)
{
  unint64_t v2 = sub_2534EDC7C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E58D8(uint64_t a1)
{
  unint64_t v2 = sub_2534EDCC8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E5914(uint64_t a1)
{
  unint64_t v2 = sub_2534EDCC8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void InfixExpression.InfixOp.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534847F8();
  a19 = v23;
  a20 = v24;
  sub_253462A5C(&qword_269CDD1D0);
  sub_253465998();
  v126[0] = v26;
  v126[1] = v25;
  MEMORY[0x270FA5388](v25);
  sub_253483628(v27, v96);
  sub_253462A5C(&qword_269CDD1D8);
  sub_253465998();
  v125[0] = v29;
  v125[1] = v28;
  MEMORY[0x270FA5388](v28);
  sub_2534D9280(v30, v96);
  sub_253462A5C(&qword_269CDD1E0);
  sub_253465998();
  v124[0] = v32;
  v124[1] = v31;
  MEMORY[0x270FA5388](v31);
  sub_2534D9248(v33, v96);
  sub_253462A5C(&qword_269CDD1E8);
  sub_253465998();
  v123[0] = v35;
  v123[1] = v34;
  MEMORY[0x270FA5388](v34);
  sub_2534D9264(v36, v96);
  sub_253462A5C(&qword_269CDD1F0);
  sub_253465998();
  v122[0] = v38;
  v122[1] = v37;
  MEMORY[0x270FA5388](v37);
  sub_2534D92F0(v39, v96);
  sub_253462A5C(&qword_269CDD1F8);
  sub_253465998();
  uint64_t v120 = v41;
  uint64_t v121 = v40;
  MEMORY[0x270FA5388](v40);
  sub_2534D8F5C((uint64_t)&v96 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v119 = sub_253462A5C(&qword_269CDD200);
  sub_253465998();
  uint64_t v118 = v43;
  MEMORY[0x270FA5388](v44);
  sub_2534D8F5C((uint64_t)&v96 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v117 = sub_253462A5C(&qword_269CDD208);
  sub_253465998();
  uint64_t v116 = v46;
  MEMORY[0x270FA5388](v47);
  sub_2534D8F5C((uint64_t)&v96 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v115 = sub_253462A5C(&qword_269CDD210);
  sub_253465998();
  uint64_t v114 = v49;
  MEMORY[0x270FA5388](v50);
  sub_2534D8F5C((uint64_t)&v96 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v113 = sub_253462A5C(&qword_269CDD218);
  sub_253465998();
  uint64_t v112 = v52;
  MEMORY[0x270FA5388](v53);
  sub_2534D8F5C((uint64_t)&v96 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v111 = sub_253462A5C(&qword_269CDD220);
  sub_253465998();
  uint64_t v110 = v55;
  MEMORY[0x270FA5388](v56);
  sub_2534D8F5C((uint64_t)&v96 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v109 = sub_253462A5C(&qword_269CDD228);
  sub_253465998();
  uint64_t v108 = v58;
  MEMORY[0x270FA5388](v59);
  sub_25346CB04();
  sub_2534D8F5C(v60);
  uint64_t v107 = sub_253462A5C(&qword_269CDD230);
  sub_253465998();
  uint64_t v106 = v61;
  MEMORY[0x270FA5388](v62);
  sub_2534D8F5C((uint64_t)&v96 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v105 = sub_253462A5C(&qword_269CDD238);
  sub_253465998();
  uint64_t v104 = v64;
  MEMORY[0x270FA5388](v65);
  sub_25346CB04();
  sub_2534D8F5C(v66);
  uint64_t v103 = sub_253462A5C(&qword_269CDD240);
  sub_253465998();
  uint64_t v102 = v67;
  MEMORY[0x270FA5388](v68);
  sub_2534D8F5C((uint64_t)&v96 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v101 = sub_253462A5C(&qword_269CDD248);
  sub_253465998();
  uint64_t v100 = v70;
  MEMORY[0x270FA5388](v71);
  sub_25346CB04();
  sub_2534D8F5C(v72);
  uint64_t v99 = sub_253462A5C(&qword_269CDD250);
  sub_253465998();
  uint64_t v98 = v73;
  MEMORY[0x270FA5388](v74);
  sub_25346CB04();
  sub_2534D8F5C(v75);
  uint64_t v76 = sub_253462A5C(&qword_269CDD258);
  sub_253465998();
  uint64_t v97 = v77;
  MEMORY[0x270FA5388](v78);
  sub_2534B34A4();
  uint64_t v79 = sub_253462A5C(&qword_269CDD260);
  sub_253465998();
  uint64_t v96 = v80;
  MEMORY[0x270FA5388](v81);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDD268);
  sub_253465998();
  uint64_t v128 = v82;
  uint64_t v129 = v83;
  MEMORY[0x270FA5388](v82);
  sub_2534835B0();
  uint64_t v84 = *v21;
  uint64_t v85 = (void *)sub_2534D99FC();
  uint64_t v87 = sub_253472068(v85, v86);
  sub_2534ED808();
  char v127 = v20;
  sub_253B0A680();
  switch(v84)
  {
    case 1:
      sub_2534EDD60();
      uint64_t v87 = v127;
      uint64_t v20 = v128;
      sub_2534F828C();
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v22, v76);
      goto LABEL_24;
    case 2:
      sub_2534EDD14();
      sub_253B0A3A0();
      sub_2534F86CC();
      sub_2534659CC();
      v91();
      uint64_t v92 = sub_2534D99FC();
      goto LABEL_25;
    case 3:
      sub_2534EDCC8();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = v122;
      goto LABEL_15;
    case 4:
      sub_2534EDC7C();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = v123;
      goto LABEL_15;
    case 5:
      sub_2534EDC30();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = v124;
      goto LABEL_15;
    case 6:
      sub_2534EDBE4();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = v125;
      goto LABEL_15;
    case 7:
      sub_2534EDB98();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = v126;
      goto LABEL_15;
    case 8:
      sub_2534EDB4C();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = (uint64_t *)&v127;
      goto LABEL_15;
    case 9:
      sub_2534EDB00();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = &v130;
      goto LABEL_15;
    case 10:
      sub_2534EDAB4();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534F898C();
      goto LABEL_15;
    case 11:
      sub_2534EDA68();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = &a14;
      goto LABEL_15;
    case 12:
      sub_2534EDA1C();
      sub_2534D8BA4();
      uint64_t v88 = sub_2534D8DA0();
      uint64_t v95 = &a17;
LABEL_15:
      uint64_t v90 = *(v95 - 32);
      break;
    case 13:
      sub_2534ED9D0();
      sub_2534D8BA4();
      goto LABEL_22;
    case 14:
      sub_2534ED984();
      sub_2534D8BA4();
      goto LABEL_22;
    case 15:
      sub_2534ED938();
      sub_2534D8BA4();
      goto LABEL_22;
    case 16:
      sub_2534ED8EC();
      sub_2534D8BA4();
      goto LABEL_22;
    case 17:
      sub_2534ED8A0();
      sub_2534D8BA4();
      goto LABEL_22;
    case 18:
      sub_2534ED854();
      sub_2534D8BA4();
LABEL_22:
      uint64_t v88 = sub_2534F83C0();
      break;
    default:
      sub_2534EDDAC();
      uint64_t v87 = v127;
      uint64_t v20 = v128;
      sub_2534F828C();
      uint64_t v88 = sub_2534DA098();
      uint64_t v90 = v79;
      break;
  }
  v89(v88, v90);
LABEL_24:
  uint64_t v94 = *(void (**)(uint64_t, void *))(v129 + 8);
  uint64_t v92 = (uint64_t)v87;
  uint64_t v93 = v20;
LABEL_25:
  v94(v92, v93);
  sub_2534847C8();
}

uint64_t _s30IntelligenceFlowPlannerSupport16PrefixExpressionV0E2OpO9hashValueSivg_0()
{
  return sub_253B0A630();
}

void InfixExpression.InfixOp.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v67 = v3;
  sub_253462A5C(&qword_269CDD310);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253483628(v5, v53);
  sub_253462A5C(&qword_269CDD318);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_253483644(v7, v54);
  sub_253462A5C(&qword_269CDD320);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D8F68(v9, v55);
  sub_253462A5C(&qword_269CDD328);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_2534D9280(v11, v56);
  sub_253462A5C(&qword_269CDD330);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  sub_2534AF2BC(v13, v57);
  sub_253462A5C(&qword_269CDD338);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDD340);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_2534D9248(v16, v58);
  sub_253462A5C(&qword_269CDD348);
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  sub_2534D92B8(v18, v59);
  sub_253462A5C(&qword_269CDD350);
  sub_253465998();
  MEMORY[0x270FA5388](v19);
  sub_2534D9BAC(v20, v60);
  sub_253462A5C(&qword_269CDD358);
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  sub_2534D9264(v22, v61);
  sub_253462A5C(&qword_269CDD360);
  sub_253465998();
  MEMORY[0x270FA5388](v23);
  sub_2534AF2A0(v24, v62);
  sub_253462A5C(&qword_269CDD368);
  sub_253465998();
  MEMORY[0x270FA5388](v25);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDD370);
  sub_253465998();
  MEMORY[0x270FA5388](v26);
  sub_2534D9B90(v27, v63);
  sub_253462A5C(&qword_269CDD378);
  sub_253465998();
  MEMORY[0x270FA5388](v28);
  sub_2534D9BE4(v29, v64);
  sub_253462A5C(&qword_269CDD380);
  sub_253465998();
  MEMORY[0x270FA5388](v30);
  sub_25346CB04();
  sub_253462A5C(&qword_269CDD388);
  sub_253465998();
  MEMORY[0x270FA5388](v31);
  sub_2534D92F0(v32, v65);
  sub_253462A5C(&qword_269CDD390);
  sub_253465998();
  MEMORY[0x270FA5388](v33);
  sub_2534D9BC8(v34, v66);
  sub_253462A5C(&qword_269CDD398);
  sub_253465998();
  MEMORY[0x270FA5388](v35);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDD3A0);
  sub_253465998();
  MEMORY[0x270FA5388](v36);
  sub_2534835B0();
  sub_253462A5C(&qword_269CDD3A8);
  sub_253465998();
  MEMORY[0x270FA5388](v37);
  sub_2534B34A4();
  sub_2534F8630(v2);
  sub_2534ED808();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v38 = sub_253B0A390();
    if (*(void *)(v38 + 16)
      && (sub_2534D96C0(),
          uint64_t v39 = *(unsigned __int8 *)(v38 + 32),
          sub_25347B78C(1, v40, v38, v38 + 32, 0, v41),
          uint64_t v43 = v42,
          unint64_t v45 = v44,
          swift_bridgeObjectRelease(),
          v43 == v45 >> 1))
    {
      switch(v39)
      {
        case 1:
          sub_2534EDD60();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 2:
          sub_2534EDD14();
          sub_2534F819C();
          sub_2534F86CC();
          break;
        case 3:
          sub_2534EDCC8();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 4:
          sub_2534EDC7C();
          sub_2534F81C0();
          break;
        case 5:
          sub_2534EDC30();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 6:
          sub_2534EDBE4();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 7:
          sub_2534EDB98();
          sub_2534F81C0();
          sub_2534D9AC4();
          break;
        case 8:
          sub_2534EDB4C();
          sub_2534F819C();
          sub_2534F8978();
          break;
        case 9:
          sub_2534EDB00();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 10:
          sub_2534EDAB4();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 11:
          sub_2534EDA68();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 12:
          sub_2534EDA1C();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 13:
          sub_2534ED9D0();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 14:
          sub_2534ED984();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 15:
          sub_2534ED938();
          sub_2534F819C();
          sub_2534F8964();
          break;
        case 16:
          sub_2534ED8EC();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 17:
          sub_2534ED8A0();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        case 18:
          sub_2534ED854();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
        default:
          sub_2534EDDAC();
          sub_2534F819C();
          sub_2534D8C7C();
          break;
      }
      sub_2534659CC();
      v51();
      swift_unknownObjectRelease();
      sub_2534659CC();
      v52();
      *uint64_t v67 = v39;
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      uint64_t v47 = v46;
      sub_253462A5C(&qword_269CDB688);
      *uint64_t v47 = &type metadata for InfixExpression.InfixOp;
      sub_253B0A2D0();
      sub_2534F8464();
      sub_25347B88C();
      uint64_t v48 = sub_2534F859C();
      v49(v48);
      swift_willThrow();
      swift_unknownObjectRelease();
      sub_2534F868C();
      v50();
    }
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  sub_2534F856C();
  sub_2534847C8();
}

uint64_t sub_2534E720C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x704F7869666E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 7563372 && a2 == 0xE300000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 7563378 && a2 == 0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2534E7338(char a1)
{
  if (!a1) {
    return 0x704F7869666E69;
  }
  if (a1 == 1) {
    return 7563372;
  }
  return 7563378;
}

void sub_2534E7384()
{
}

#error "2534E73A8: call analysis failed (funcsize=6)"

uint64_t sub_2534E73B4()
{
  return sub_2534E7338(*v0);
}

uint64_t sub_2534E73BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E720C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E73E4(uint64_t a1)
{
  unint64_t v2 = sub_2534EDDF8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E7420(uint64_t a1)
{
  unint64_t v2 = sub_2534EDDF8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void InfixExpression.encode(to:)()
{
  sub_2534847F8();
  sub_2534F8530();
  sub_253462A5C(&qword_269CDD3B0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v0);
  sub_2534EDDF8();
  sub_2534DA3BC();
  sub_2534EDE44();
  sub_2534F84DC();
  if (!v1)
  {
    type metadata accessor for InfixExpression(0);
    sub_2534F8780();
    sub_2534E457C((uint64_t)&unk_269CDBFB8);
    sub_2534F84DC();
    sub_2534F84DC();
  }
  sub_2534D9A08();
  v3();
  sub_2534847C8();
}

void InfixExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_2534847F8();
  uint64_t v17 = v16;
  sub_253B059D0();
  sub_253465998();
  uint64_t v29 = v19;
  uint64_t v30 = v18;
  MEMORY[0x270FA5388](v18);
  sub_2534F882C();
  MEMORY[0x270FA5388](v20);
  sub_253462A5C(&qword_269CDD3C8);
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = sub_25348360C();
  uint64_t v23 = type metadata accessor for InfixExpression(v22);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v24);
  sub_2534966B0();
  uint64_t v25 = (void *)sub_2534F8958();
  sub_253472068(v25, v26);
  sub_2534EDDF8();
  sub_253B0A660();
  if (v13)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v17);
  }
  else
  {
    sub_2534EDE90();
    sub_253B0A370();
    unsigned char *v15 = a13;
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_253B0A370();
    uint64_t v28 = *(void (**)(void))(v29 + 32);
    v28();
    sub_253B0A370();
    sub_2534D91AC();
    v27();
    ((void (*)(unsigned char *, uint64_t, uint64_t))v28)(&v15[*(int *)(v23 + 24)], v14, v30);
    sub_2534EDEDC();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v17);
    sub_2534DC568();
  }
  sub_2534847C8();
}

void sub_2534E7954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  InfixExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_2534E796C()
{
}

uint64_t (*IndexExpression.lhs.modify())()
{
  return nullsub_1;
}

uint64_t IndexExpression.index.getter()
{
  return sub_2534E40AC();
}

uint64_t IndexExpression.index.setter()
{
  return sub_2534E412C();
}

uint64_t (*IndexExpression.index.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for IndexExpression(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t IndexExpression.init(lhs:index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v10(a3, a1, v6);
  uint64_t v8 = a3 + *(int *)(type metadata accessor for IndexExpression(0) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v8, a2, v6);
}

uint64_t sub_2534E7ACC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7563372 && a2 == 0xE300000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534E7BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E7ACC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E7BCC(uint64_t a1)
{
  unint64_t v2 = sub_2534EDF34();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E7C08(uint64_t a1)
{
  unint64_t v2 = sub_2534EDF34();
  return MEMORY[0x270FA00B8](a1, v2);
}

void IndexExpression.encode(to:)()
{
  sub_2534F8530();
  sub_253462A5C(&qword_269CDD3D8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v0);
  sub_2534EDF34();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2534E457C((uint64_t)&unk_269CDBFB8);
  sub_2534F84DC();
  if (!v1)
  {
    type metadata accessor for IndexExpression(0);
    sub_2534F89B4();
    sub_2534F84DC();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
}

void IndexExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F89C8(v4);
  sub_253465998();
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  MEMORY[0x270FA5388](v5);
  sub_2534F8600();
  MEMORY[0x270FA5388](v7);
  uint64_t v19 = (char *)&v17 - v8;
  sub_253462A5C(&qword_269CDD3E8);
  sub_253465998();
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = sub_2534D9B74();
  uint64_t v12 = type metadata accessor for IndexExpression(v11);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_2534966B0();
  sub_253472068(v0, v0[3]);
  sub_2534EDF34();
  sub_2534F88D8();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    uint64_t v17 = v12;
    uint64_t v18 = v3;
    uint64_t v14 = v22;
    sub_2534E457C((uint64_t)&unk_269CDC068);
    uint64_t v15 = v19;
    sub_2534F8908();
    uint64_t v19 = *(char **)(v14 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v19)(v18, v15, v23);
    sub_2534F8908();
    sub_2534659CC();
    v16();
    ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v18 + *(int *)(v17 + 20), v2, v23);
    sub_2534EDEDC();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2534DC568();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534E8070()
{
}

void sub_2534E8088()
{
}

uint64_t (*UpdateParametersExpression.callStatementId.modify())()
{
  return nullsub_1;
}

uint64_t UpdateParametersExpression.updates.getter()
{
  type metadata accessor for UpdateParametersExpression(0);
  return swift_bridgeObjectRetain();
}

uint64_t UpdateParametersExpression.updates.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for UpdateParametersExpression(0) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*UpdateParametersExpression.updates.modify())()
{
  return nullsub_1;
}

uint64_t UpdateParametersExpression.init(callStatementId:updates:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_2534EA6EC(a1, type metadata accessor for UpdateParametersExpression, a2);
}

uint64_t UpdateParametersExpression.UpdateParameter.parameterId.getter()
{
  return sub_2534ACF74();
}

uint64_t UpdateParametersExpression.UpdateParameter.parameterId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*UpdateParametersExpression.UpdateParameter.parameterId.modify())()
{
  return nullsub_1;
}

uint64_t UpdateParametersExpression.UpdateParameter.parameterIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t UpdateParametersExpression.UpdateParameter.parameterIndex.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*UpdateParametersExpression.UpdateParameter.parameterIndex.modify())()
{
  return nullsub_1;
}

void UpdateParametersExpression.UpdateParameter.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 25);
}

unsigned char *UpdateParametersExpression.UpdateParameter.kind.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 25) = *result;
  return result;
}

uint64_t (*UpdateParametersExpression.UpdateParameter.kind.modify())()
{
  return nullsub_1;
}

uint64_t UpdateParametersExpression.UpdateParameter.value.getter()
{
  uint64_t v0 = sub_2534F8A1C();
  type metadata accessor for UpdateParametersExpression.UpdateParameter(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v1 = sub_2534ACF74();
  return v2(v1);
}

uint64_t UpdateParametersExpression.UpdateParameter.value.setter()
{
  type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*UpdateParametersExpression.UpdateParameter.value.modify())()
{
  return nullsub_1;
}

uint64_t UpdateParametersExpression.UpdateParameter.init(parameterId:parameterIndex:kind:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v7 = *a5;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4 & 1;
  *(unsigned char *)(a6 + 25) = v7;
  type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v8 = sub_25349C5EC();
  return v9(v8);
}

uint64_t static UpdateParametersExpression.UpdateParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (sub_253B0A4C0() & 1) == 0) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25)) {
    return 0;
  }
  uint64_t updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
  sub_2534F8774(*(int *)(updated + 28));
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

BOOL static UpdateParametersExpression.UpdateKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2534E84E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6574656D61726170 && a2 == 0xEE007865646E4972;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 1684957547 && a2 == 0xE400000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2534E86AC(char a1)
{
  uint64_t result = 0x6574656D61726170;
  switch(a1)
  {
    case 2:
      uint64_t result = 1684957547;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2534E8738()
{
  return sub_2534E86AC(*v0);
}

uint64_t sub_2534E8740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E84E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E8768(uint64_t a1)
{
  unint64_t v2 = sub_2534EDFA0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E87A4(uint64_t a1)
{
  unint64_t v2 = sub_2534EDFA0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UpdateParametersExpression.UpdateParameter.encode(to:)(void *a1)
{
  sub_253462A5C(&qword_269CDD3F0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534F8328(a1);
  sub_2534EDFA0();
  sub_2534DA3BC();
  sub_253B0A3F0();
  if (!v1)
  {
    sub_253B0A3D0();
    sub_2534EDFEC();
    sub_253B0A440();
    type metadata accessor for UpdateParametersExpression.UpdateParameter(0);
    sub_253B059D0();
    sub_2534E457C((uint64_t)&unk_269CDBFB8);
    sub_253B0A440();
  }
  uint64_t v4 = sub_2534F82A4();
  return v5(v4);
}

void UpdateParametersExpression.UpdateParameter.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_2534847F8();
  uint64_t v16 = v15;
  uint64_t v17 = sub_253B059D0();
  sub_253465998();
  uint64_t v27 = v18;
  MEMORY[0x270FA5388](v19);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDD408);
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  uint64_t v21 = sub_2534D9B74();
  uint64_t updated = type metadata accessor for UpdateParametersExpression.UpdateParameter(v21);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v23);
  sub_2534B34A4();
  sub_253472068(v16, v16[3]);
  sub_2534EDFA0();
  sub_2534F88D8();
  sub_253B0A660();
  if (v12)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v16);
  }
  else
  {
    *(void *)uint64_t v14 = sub_253B0A320();
    *(void *)(v14 + 8) = v24;
    *(void *)(v14 + 16) = sub_253B0A300();
    *(unsigned char *)(v14 + 24) = v25 & 1;
    sub_2534EE038();
    sub_2534F8908();
    *(unsigned char *)(v14 + 25) = a12;
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_2534F8908();
    sub_2534F85D4();
    v26();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v14 + *(int *)(updated + 28), v13, v17);
    sub_2534EDEDC();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v16);
    sub_2534DC568();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534E8CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  UpdateParametersExpression.UpdateParameter.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

uint64_t sub_2534E8CD0(void *a1)
{
  return UpdateParametersExpression.UpdateParameter.encode(to:)(a1);
}

uint64_t UpdateParametersExpression.UpdateKind.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t sub_2534E8D18(uint64_t a1)
{
  unint64_t v2 = sub_2534EE11C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E8D54(uint64_t a1)
{
  unint64_t v2 = sub_2534EE11C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E8D90(uint64_t a1)
{
  unint64_t v2 = sub_2534EE084();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E8DCC(uint64_t a1)
{
  unint64_t v2 = sub_2534EE084();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2534E8E08(uint64_t a1)
{
  unint64_t v2 = sub_2534EE0D0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E8E44(uint64_t a1)
{
  unint64_t v2 = sub_2534EE0D0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void UpdateParametersExpression.UpdateKind.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDD418);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534AF2A0(v4, v10);
  sub_253462A5C(&qword_269CDD420);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CDD428);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534966B0();
  char v7 = *v0;
  sub_253472068(v2, v2[3]);
  sub_2534EE084();
  sub_2534F883C();
  sub_253B0A680();
  if (v7)
  {
    sub_2534EE0D0();
    sub_253B0A3A0();
    sub_2534F83C0();
  }
  else
  {
    sub_2534EE11C();
    sub_253B0A3A0();
    sub_2534D9AD0();
  }
  sub_2534659CC();
  v8();
  sub_2534B3470();
  v9();
  sub_2534847C8();
}

uint64_t UpdateParametersExpression.UpdateKind.hashValue.getter()
{
  return sub_253B0A630();
}

void UpdateParametersExpression.UpdateKind.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v26 = v4;
  sub_253462A5C(&qword_269CDD448);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CDD450);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CDD458);
  sub_253465998();
  uint64_t v27 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  sub_253472068(v3, v3[3]);
  sub_2534EE084();
  sub_253B0A660();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v28 = (uint64_t)v3;
  uint64_t v10 = sub_253B0A390();
  if (!*(void *)(v10 + 16)
    || (sub_2534D96C0(),
        char v11 = *(unsigned char *)(v10 + 32),
        sub_25347B78C(1, v12, v10, v10 + 32, 0, v13),
        uint64_t v15 = v14,
        unint64_t v17 = v16,
        swift_bridgeObjectRelease(),
        v15 != v17 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v20 = v19;
    sub_253462A5C(&qword_269CDB688);
    void *v20 = &type metadata for UpdateParametersExpression.UpdateKind;
    sub_253B0A2D0();
    sub_253B0A080();
    sub_25347B88C();
    (*(void (**)(void *))(v21 + 104))(v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v22();
    uint64_t v3 = (void *)v28;
LABEL_8:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    goto LABEL_9;
  }
  if (v11)
  {
    sub_2534EE0D0();
    sub_253B0A2C0();
    uint64_t v18 = v26;
    sub_2534659CC();
    v23();
    swift_unknownObjectRelease();
    sub_2534D911C();
    v24();
  }
  else
  {
    sub_2534EE11C();
    sub_253B0A2C0();
    uint64_t v18 = v26;
    sub_2534659CC();
    v25();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v7);
  }
  *uint64_t v18 = v11;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v28);
LABEL_9:
  sub_2534847C8();
}

uint64_t sub_2534E9478(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746174536C6C6163 && a2 == 0xEF6449746E656D65;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73657461647075 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534E958C(char a1)
{
  if (a1) {
    return 0x73657461647075;
  }
  else {
    return 0x746174536C6C6163;
  }
}

void sub_2534E95D8()
{
}

void sub_2534E95F0()
{
}

uint64_t sub_2534E960C()
{
  return sub_2534E958C(*v0);
}

uint64_t sub_2534E9614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E9478(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E963C(uint64_t a1)
{
  unint64_t v2 = sub_2534EE168();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E9678(uint64_t a1)
{
  unint64_t v2 = sub_2534EE168();
  return MEMORY[0x270FA00B8](a1, v2);
}

void UpdateParametersExpression.encode(to:)()
{
  sub_2534F8530();
  sub_253462A5C(&qword_269CDD460);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v0);
  sub_2534EE168();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2534E457C((uint64_t)&unk_269CDBFB8);
  sub_2534F84DC();
  if (!v1)
  {
    type metadata accessor for UpdateParametersExpression(0);
    sub_253462A5C(&qword_269CDD470);
    sub_2534EE1B4((uint64_t)&unk_269CDD478);
    sub_2534F84DC();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
}

void UpdateParametersExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F89C8(v3);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534B3294();
  sub_253462A5C(&qword_269CDD488);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t updated = type metadata accessor for UpdateParametersExpression(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534847E0();
  sub_2534F8630(v0);
  sub_2534EE168();
  sub_2534F88D8();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_253B0A370();
    sub_25347FA84();
    v9();
    sub_253462A5C(&qword_269CDD470);
    sub_2534EE1B4((uint64_t)&unk_269CDD490);
    sub_253B0A370();
    sub_2534F85D4();
    v10();
    *(void *)(v2 + *(int *)(updated + 20)) = v11;
    sub_2534EDEDC();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2534DC568();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534E9B54()
{
}

void sub_2534E9B6C()
{
}

uint64_t CallExpression.tool.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 CallExpression.tool.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *uint64_t v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*CallExpression.tool.modify())()
{
  return nullsub_1;
}

uint64_t CallExpression.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CallExpression.parameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CallExpression.parameters.modify())()
{
  return nullsub_1;
}

uint64_t CallExpression.init(fn:parameters:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = a3;
  return result;
}

__n128 CallExpression.init(tool:parameters:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  a3->n128_u64[0] = a1->n128_u64[0];
  a3->n128_u64[1] = v3;
  __n128 result = a1[1];
  a3[1] = result;
  a3[2].n128_u64[0] = a2;
  return result;
}

uint64_t sub_2534E9CC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819242356 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534E9DAC(char a1)
{
  if (a1) {
    return 0x6574656D61726170;
  }
  else {
    return 1819242356;
  }
}

uint64_t sub_2534E9DE0()
{
  return sub_2534E9DAC(*v0);
}

uint64_t sub_2534E9DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534E9CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534E9E10(uint64_t a1)
{
  unint64_t v2 = sub_2534EE234();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534E9E4C(uint64_t a1)
{
  unint64_t v2 = sub_2534EE234();
  return MEMORY[0x270FA00B8](a1, v2);
}

void CallExpression.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDD4A0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_2534F8328(v2);
  sub_2534EE234();
  sub_2534DA3BC();
  sub_2534D2524();
  sub_253B0A440();
  if (!v0)
  {
    sub_253462A5C(&qword_269CDD4B0);
    sub_2534EE280();
    sub_253B0A440();
  }
  uint64_t v4 = sub_2534F82A4();
  v5(v4);
  sub_2534847C8();
}

void CallExpression.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDD4C0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534F83CC();
  sub_2534EE234();
  sub_2534F8738();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
  }
  else
  {
    sub_2534D25BC();
    sub_253B0A370();
    sub_253462A5C(&qword_269CDD4B0);
    sub_2534EE32C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_253B0A370();
    sub_2534D9A08();
    v6();
    *uint64_t v4 = v7;
    v4[1] = v8;
    v4[2] = v9;
    v4[3] = v10;
    v4[4] = v7;
    swift_bridgeObjectRetain();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2534847C8();
}

void sub_2534EA1B8()
{
}

void sub_2534EA1D0()
{
}

uint64_t SayExpression.statementIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SayExpression.statementIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SayExpression.statementIds.modify())()
{
  return nullsub_1;
}

uint64_t SayExpression.init(statementIds:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_2534EA248(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E656D6574617473 && a2 == 0xEC00000073644974)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534EA2E8()
{
  return 0x6E656D6574617473;
}

uint64_t sub_2534EA30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534EA248(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534EA338(uint64_t a1)
{
  unint64_t v2 = sub_2534EE3D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EA374(uint64_t a1)
{
  unint64_t v2 = sub_2534EE3D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SayExpression.encode(to:)()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CDD4D0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v1);
  sub_2534EE3D8();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CDD0C8);
  sub_2534ED574((uint64_t)&unk_269CDD0D0);
  sub_2534F8658();
  sub_2534F8390();
  v3();
  sub_2534F8A10();
  sub_2534847C8();
}

void SayExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CDD4E0);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534F83CC();
  sub_2534EE3D8();
  sub_2534994B4();
  if (!v11)
  {
    sub_253462A5C(&qword_269CDD0C8);
    sub_2534ED574((uint64_t)&unk_269CDD140);
    sub_2534F8410();
    uint64_t v14 = sub_2534F848C();
    v15(v14);
    *uint64_t v12 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v10);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534EA5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  SayExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2534EA5F8()
{
}

uint64_t (*PickExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t PickExpression.index.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PickExpression(0) + 20));
}

uint64_t PickExpression.index.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for PickExpression(0);
  *(void *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*PickExpression.index.modify())()
{
  return nullsub_1;
}

uint64_t PickExpression.init(statementId:index:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_2534EA6EC(a1, type metadata accessor for PickExpression, a2);
}

uint64_t sub_2534EA6EC@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v6 = sub_2534D973C();
  v7(v6);
  uint64_t result = a2(0);
  *(void *)(a3 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t sub_2534EA764(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2534EA864(char a1)
{
  if (a1) {
    return 0x7865646E69;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2534EA8A0()
{
  return sub_2534EA864(*v0);
}

uint64_t sub_2534EA8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534EA764(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534EA8D0(uint64_t a1)
{
  unint64_t v2 = sub_2534EE424();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EA90C(uint64_t a1)
{
  unint64_t v2 = sub_2534EE424();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PickExpression.encode(to:)()
{
  sub_2534F8530();
  sub_253462A5C(&qword_269CDD4E8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v0);
  sub_2534EE424();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2534E457C((uint64_t)&unk_269CDBFB8);
  sub_2534F84DC();
  if (!v1)
  {
    type metadata accessor for PickExpression(0);
    sub_2534F89B4();
    sub_253B0A430();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
}

void PickExpression.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CDD4F8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for PickExpression(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_253465A3C();
  sub_2534F83A0();
  sub_2534EE424();
  sub_2534F88D8();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
  }
  else
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_253B0A370();
    sub_25347FA84();
    v9();
    uint64_t v10 = sub_253B0A360();
    sub_2534D91AC();
    v11();
    *(void *)(v1 + *(int *)(v7 + 20)) = v10;
    sub_2534EDEDC();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    sub_2534DC568();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534EAD18()
{
}

void sub_2534EAD30()
{
}

uint64_t (*ConfirmExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2534EAD7C(uint64_t a1)
{
  unint64_t v2 = sub_2534EE470();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EADB8(uint64_t a1)
{
  unint64_t v2 = sub_2534EE470();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ConfirmExpression.encode(to:)()
{
}

void ConfirmExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F83F0(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534988A8(v4, v12);
  sub_253462A5C(&qword_269CDD510);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for ConfirmExpression(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534F83A0();
  sub_2534EE470();
  sub_25349C594();
  if (!v1)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_25349C568();
    sub_2534659CC();
    v9();
    uint64_t v10 = sub_25349C548();
    v11(v10);
    sub_2534F875C();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534EAFD8()
{
}

void sub_2534EAFF0()
{
}

uint64_t SearchExpression.query.getter()
{
  return sub_2534ACF74();
}

uint64_t SearchExpression.query.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SearchExpression.query.modify())()
{
  return nullsub_1;
}

uint64_t SearchExpression.isLowConfidenceKnowledge.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t SearchExpression.isLowConfidenceKnowledge.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*SearchExpression.isLowConfidenceKnowledge.modify())()
{
  return nullsub_1;
}

uint64_t SearchExpression.pickOne.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t SearchExpression.pickOne.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*SearchExpression.pickOne.modify())()
{
  return nullsub_1;
}

uint64_t SearchExpression.shouldOpenResultIfApplicable.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t SearchExpression.shouldOpenResultIfApplicable.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 18) = result;
  return result;
}

uint64_t (*SearchExpression.shouldOpenResultIfApplicable.modify())()
{
  return nullsub_1;
}

IntelligenceFlowPlannerSupport::SearchExpression __swiftcall SearchExpression.init(query:isLowConfidenceKnowledge:pickOne:shouldOpenResultIfApplicable:)(Swift::String query, Swift::Bool isLowConfidenceKnowledge, Swift::Bool pickOne, Swift::Bool shouldOpenResultIfApplicable)
{
  *(Swift::String *)uint64_t v4 = query;
  *(unsigned char *)(v4 + 16) = isLowConfidenceKnowledge;
  *(unsigned char *)(v4 + 17) = pickOne;
  *(unsigned char *)(v4 + 18) = shouldOpenResultIfApplicable;
  result.query = query;
  result.isLowConfidenceKnowledge = isLowConfidenceKnowledge;
  return result;
}

uint64_t sub_2534EB134(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B0C4F0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x656E4F6B636970 && a2 == 0xE700000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000253B0C510)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v7 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

unint64_t sub_2534EB2D8(char a1)
{
  unint64_t result = 0x7972657571;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0x656E4F6B636970;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2534EB374()
{
  return sub_2534EB2D8(*v0);
}

uint64_t sub_2534EB37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534EB134(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2534EB3A4(uint64_t a1)
{
  unint64_t v2 = sub_2534EE4BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EB3E0(uint64_t a1)
{
  unint64_t v2 = sub_2534EE4BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SearchExpression.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CDD518);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_2534F8328(v2);
  sub_2534EE4BC();
  sub_2534DA3BC();
  sub_253B0A3F0();
  if (!v0)
  {
    sub_2534F87B0();
    sub_2534F87B0();
    sub_2534F87B0();
  }
  sub_2534F82F4();
  v4();
  sub_2534847C8();
}

void SearchExpression.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CDD528);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534F83CC();
  sub_2534EE4BC();
  sub_2534F8738();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
  }
  else
  {
    uint64_t v6 = sub_253B0A320();
    uint64_t v8 = v7;
    swift_bridgeObjectRetain();
    char v13 = sub_2534F87CC();
    char v12 = sub_2534F87CC();
    char v9 = sub_2534F87CC();
    uint64_t v10 = sub_2534F86E4();
    v11(v10);
    *(void *)uint64_t v4 = v6;
    *(void *)(v4 + 8) = v8;
    *(unsigned char *)(v4 + 16) = v13 & 1;
    *(unsigned char *)(v4 + 17) = v12 & 1;
    *(unsigned char *)(v4 + 18) = v9 & 1;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v2);
    swift_bridgeObjectRelease();
  }
  sub_2534847C8();
}

void sub_2534EB724()
{
}

void sub_2534EB73C()
{
}

uint64_t (*StructuredSearchExpression.parameters.modify())()
{
  return nullsub_1;
}

uint64_t sub_2534EB778(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534EB80C()
{
  return 0x6574656D61726170;
}

uint64_t sub_2534EB82C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534EB778(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534EB858(uint64_t a1)
{
  unint64_t v2 = sub_2534EE508();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EB894(uint64_t a1)
{
  unint64_t v2 = sub_2534EE508();
  return MEMORY[0x270FA00B8](a1, v2);
}

void StructuredSearchExpression.encode(to:)()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CDD530);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534847E0();
  sub_2534F8328(v1);
  sub_2534EE508();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CDD4B0);
  sub_2534EE280();
  sub_253B0A440();
  sub_2534F8390();
  v3();
  sub_2534F8A10();
  sub_2534847C8();
}

void StructuredSearchExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CDD540);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534F83CC();
  sub_2534EE508();
  sub_2534994B4();
  if (!v11)
  {
    sub_253462A5C(&qword_269CDD4B0);
    sub_2534EE32C();
    sub_2534F8410();
    uint64_t v14 = sub_2534F848C();
    v15(v14);
    *char v12 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v10);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534EBA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StructuredSearchExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2534EBAB0()
{
}

uint64_t (*PickOneExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2534EBAF8(uint64_t a1)
{
  unint64_t v2 = sub_2534EE554();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EBB34(uint64_t a1)
{
  unint64_t v2 = sub_2534EE554();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PickOneExpression.encode(to:)()
{
}

void PickOneExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F83F0(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534988A8(v4, v12);
  sub_253462A5C(&qword_269CDD558);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for PickOneExpression(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534F83A0();
  sub_2534EE554();
  sub_25349C594();
  if (!v1)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_25349C568();
    sub_2534659CC();
    v9();
    uint64_t v10 = sub_25349C548();
    v11(v10);
    sub_2534F875C();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534EBD54()
{
}

void sub_2534EBD6C()
{
}

uint64_t (*ResolveToolExpression.toolIds.modify())()
{
  return nullsub_1;
}

IntelligenceFlowPlannerSupport::ResolveToolExpression __swiftcall ResolveToolExpression.init(toolIds:)(Swift::OpaquePointer toolIds)
{
  uint64_t v3 = v1;
  uint64_t v4 = *((void *)toolIds._rawValue + 2);
  if (v4)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_2539E7A8C();
    uint64_t v5 = v13;
    uint64_t v6 = (uint64_t *)((char *)toolIds._rawValue + 40);
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      unint64_t v9 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_2539E7A8C();
      }
      v6 += 2;
      *(void *)(v13 + 16) = v9 + 1;
      uint64_t v11 = (void *)(v13 + 32 * v9);
      v11[4] = v8;
      v11[5] = v7;
      v11[6] = 0;
      v11[7] = 0;
      --v4;
    }
    while (v4);
    result.toolIds._rawValue = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    result.toolIds._rawValue = (void *)swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  *uint64_t v3 = v5;
  return result;
}

uint64_t sub_2534EBEA0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7364496C6F6F74 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534EBF28()
{
  return 0x7364496C6F6F74;
}

uint64_t sub_2534EBF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534EBEA0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534EBF70(uint64_t a1)
{
  unint64_t v2 = sub_2534EE5A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EBFAC(uint64_t a1)
{
  unint64_t v2 = sub_2534EE5A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ResolveToolExpression.encode(to:)()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CDD560);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F8328(v1);
  sub_2534EE5A0();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CDD570);
  sub_2534EE5EC((uint64_t)&unk_269CDD578);
  sub_2534F8658();
  sub_2534F8390();
  v3();
  sub_2534F8A10();
  sub_2534847C8();
}

void ResolveToolExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CDD580);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534F83CC();
  sub_2534EE5A0();
  sub_2534994B4();
  if (!v11)
  {
    sub_253462A5C(&qword_269CDD570);
    sub_2534EE5EC((uint64_t)&unk_269CDD588);
    sub_2534F8410();
    uint64_t v14 = sub_2534F848C();
    v15(v14);
    *uint64_t v12 = a10;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v10);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2534EC208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ResolveToolExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2534EC220()
{
}

uint64_t UndoExpression.statementId.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2534E4430(v1, a1);
}

uint64_t UndoExpression.statementId.setter(uint64_t a1)
{
  return sub_2534EE654(a1, v1);
}

uint64_t (*UndoExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t UndoExpression.init(statementId:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_253B059D0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 1, 1, v2);
  uint64_t v3 = sub_2534ACF74();
  return sub_2534EE654(v3, v4);
}

uint64_t sub_2534EC2C4(uint64_t a1)
{
  unint64_t v2 = sub_2534EE6BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EC300(uint64_t a1)
{
  unint64_t v2 = sub_2534EE6BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void UndoExpression.encode(to:)()
{
}

void UndoExpression.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v13 = v12;
  uint64_t v24 = v14;
  uint64_t v15 = sub_253462A5C(&qword_269CDB460);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_2534988A8(v17, v24);
  sub_253462A5C(&qword_269CDD5A0);
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  uint64_t v19 = sub_2534B33AC();
  uint64_t v20 = type metadata accessor for UndoExpression(v19);
  uint64_t v21 = sub_25346CB4C(v20);
  MEMORY[0x270FA5388](v21);
  sub_25348360C();
  uint64_t v22 = sub_253B059D0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, 1, 1, v22);
  sub_2534F83A0();
  sub_2534EE6BC();
  sub_2534F883C();
  sub_253B0A660();
  if (!v10)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_253B0A310();
    sub_2534659CC();
    v23();
    sub_2534EE654(a10, v11);
    sub_2534EDEDC();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v13);
  sub_2534DC568();
  sub_2534847C8();
}

void sub_2534EC588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  UndoExpression.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2534EC5A0()
{
}

uint64_t (*RejectExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2534EC5E8(uint64_t a1)
{
  unint64_t v2 = sub_2534EE708();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EC624(uint64_t a1)
{
  unint64_t v2 = sub_2534EE708();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RejectExpression.encode(to:)()
{
}

void RejectExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F83F0(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534988A8(v4, v12);
  sub_253462A5C(&qword_269CDD5B8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for RejectExpression(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534F83A0();
  sub_2534EE708();
  sub_25349C594();
  if (!v1)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_25349C568();
    sub_2534659CC();
    v9();
    uint64_t v10 = sub_25349C548();
    v11(v10);
    sub_2534F875C();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534EC844()
{
}

void sub_2534EC85C()
{
}

uint64_t (*CancelExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2534EC8A0(uint64_t a1)
{
  unint64_t v2 = sub_2534EE754();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534EC8DC(uint64_t a1)
{
  unint64_t v2 = sub_2534EE754();
  return MEMORY[0x270FA00B8](a1, v2);
}

void CancelExpression.encode(to:)()
{
}

void CancelExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F83F0(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534988A8(v4, v12);
  sub_253462A5C(&qword_269CDD5D0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for CancelExpression(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534F83A0();
  sub_2534EE754();
  sub_25349C594();
  if (!v1)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_25349C568();
    sub_2534659CC();
    v9();
    uint64_t v10 = sub_25349C548();
    v11(v10);
    sub_2534F875C();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534ECAFC()
{
}

void sub_2534ECB14()
{
}

uint64_t _s30IntelligenceFlowPlannerSupport15IndexExpressionV3lhs0aB011StatementIDVvg_0()
{
  sub_2534F8A1C();
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_2534ACF74();
  return v1(v0);
}

uint64_t _s30IntelligenceFlowPlannerSupport15IndexExpressionV3lhs0aB011StatementIDVvs_0()
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*OpenExpression.statementId.modify())()
{
  return nullsub_1;
}

uint64_t _s30IntelligenceFlowPlannerSupport17ConfirmExpressionV11statementIdAC0aB011StatementIDV_tcfC_0()
{
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t sub_2534ECC64(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_253B0A4C0();
    sub_2534F8940();
    char v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2534ECCFC()
{
  return sub_253B0A630();
}

uint64_t sub_2534ECD38()
{
  return 0x6E656D6574617473;
}

uint64_t sub_2534ECD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2534ECC64(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2534ECD84(uint64_t a1)
{
  unint64_t v2 = sub_2534EE7A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2534ECDC0(uint64_t a1)
{
  unint64_t v2 = sub_2534EE7A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void OpenExpression.encode(to:)()
{
}

void sub_2534ECE4C()
{
  sub_2534847F8();
  uint64_t v12 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  sub_253462A5C(v7);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534B34A4();
  unint64_t v9 = sub_2534F8630(v6);
  v3(v9);
  sub_253B0A680();
  sub_253B059D0();
  sub_2534E457C((uint64_t)&unk_269CDBFB8);
  v12(v4);
  uint64_t v10 = sub_2534F8958();
  v11(v10);
  sub_2534847C8();
}

void OpenExpression.init(from:)()
{
  sub_2534847F8();
  sub_2534F83F0(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534988A8(v4, v12);
  sub_253462A5C(&qword_269CDD5E8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  uint64_t v7 = type metadata accessor for OpenExpression(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534F83A0();
  sub_2534EE7A0();
  sub_25349C594();
  if (!v1)
  {
    sub_2534E457C((uint64_t)&unk_269CDC068);
    sub_25349C568();
    sub_2534659CC();
    v9();
    uint64_t v10 = sub_25349C548();
    v11(v10);
    sub_2534F875C();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2534ED11C()
{
}

void sub_2534ED134()
{
}

unint64_t sub_2534ED14C()
{
  unint64_t result = qword_269CDD008;
  if (!qword_269CDD008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD008);
  }
  return result;
}

unint64_t sub_2534ED198()
{
  unint64_t result = qword_269CDD018;
  if (!qword_269CDD018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD018);
  }
  return result;
}

unint64_t sub_2534ED1E4()
{
  unint64_t result = qword_269CDD020;
  if (!qword_269CDD020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD020);
  }
  return result;
}

unint64_t sub_2534ED230()
{
  unint64_t result = qword_269CDD038;
  if (!qword_269CDD038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD038);
  }
  return result;
}

unint64_t sub_2534ED27C()
{
  unint64_t result = qword_269CDD040;
  if (!qword_269CDD040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD040);
  }
  return result;
}

unint64_t sub_2534ED2C8()
{
  unint64_t result = qword_269CDD068;
  if (!qword_269CDD068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD068);
  }
  return result;
}

unint64_t sub_2534ED314()
{
  unint64_t result = qword_269CDD0B0;
  if (!qword_269CDD0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0B0);
  }
  return result;
}

unint64_t sub_2534ED360()
{
  unint64_t result = qword_269CDD0B8;
  if (!qword_269CDD0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0B8);
  }
  return result;
}

unint64_t sub_2534ED3AC()
{
  unint64_t result = qword_269CDD0C0;
  if (!qword_269CDD0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0C0);
  }
  return result;
}

unint64_t sub_2534ED3F8()
{
  unint64_t result = qword_269CDD0D8;
  if (!qword_269CDD0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0D8);
  }
  return result;
}

unint64_t sub_2534ED444()
{
  unint64_t result = qword_269CDD0E0;
  if (!qword_269CDD0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0E0);
  }
  return result;
}

unint64_t sub_2534ED490()
{
  unint64_t result = qword_269CDD0E8;
  if (!qword_269CDD0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0E8);
  }
  return result;
}

unint64_t sub_2534ED4DC()
{
  unint64_t result = qword_269CDD0F0;
  if (!qword_269CDD0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0F0);
  }
  return result;
}

unint64_t sub_2534ED528()
{
  unint64_t result = qword_269CDD0F8;
  if (!qword_269CDD0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD0F8);
  }
  return result;
}

unint64_t sub_2534ED574(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_25347907C(&qword_269CDD0C8);
    sub_2534E457C(v4);
    unint64_t result = sub_2534F8870();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534ED5F4()
{
  unint64_t result = qword_269CDD168;
  if (!qword_269CDD168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD168);
  }
  return result;
}

unint64_t sub_2534ED640()
{
  unint64_t result = qword_269CDD170;
  if (!qword_269CDD170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD170);
  }
  return result;
}

unint64_t sub_2534ED68C()
{
  unint64_t result = qword_269CDD178;
  if (!qword_269CDD178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD178);
  }
  return result;
}

unint64_t sub_2534ED6D8()
{
  unint64_t result = qword_269CDD180;
  if (!qword_269CDD180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD180);
  }
  return result;
}

unint64_t sub_2534ED724()
{
  unint64_t result = qword_269CDD1B0;
  if (!qword_269CDD1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD1B0);
  }
  return result;
}

unint64_t sub_2534ED770()
{
  unint64_t result = qword_269CDD1B8;
  if (!qword_269CDD1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD1B8);
  }
  return result;
}

unint64_t sub_2534ED7BC()
{
  unint64_t result = qword_269CDD1C8;
  if (!qword_269CDD1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD1C8);
  }
  return result;
}

unint64_t sub_2534ED808()
{
  unint64_t result = qword_269CDD270;
  if (!qword_269CDD270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD270);
  }
  return result;
}

unint64_t sub_2534ED854()
{
  unint64_t result = qword_269CDD278;
  if (!qword_269CDD278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD278);
  }
  return result;
}

unint64_t sub_2534ED8A0()
{
  unint64_t result = qword_269CDD280;
  if (!qword_269CDD280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD280);
  }
  return result;
}

unint64_t sub_2534ED8EC()
{
  unint64_t result = qword_269CDD288;
  if (!qword_269CDD288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD288);
  }
  return result;
}

unint64_t sub_2534ED938()
{
  unint64_t result = qword_269CDD290;
  if (!qword_269CDD290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD290);
  }
  return result;
}

unint64_t sub_2534ED984()
{
  unint64_t result = qword_269CDD298;
  if (!qword_269CDD298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD298);
  }
  return result;
}

unint64_t sub_2534ED9D0()
{
  unint64_t result = qword_269CDD2A0;
  if (!qword_269CDD2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2A0);
  }
  return result;
}

unint64_t sub_2534EDA1C()
{
  unint64_t result = qword_269CDD2A8;
  if (!qword_269CDD2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2A8);
  }
  return result;
}

unint64_t sub_2534EDA68()
{
  unint64_t result = qword_269CDD2B0;
  if (!qword_269CDD2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2B0);
  }
  return result;
}

unint64_t sub_2534EDAB4()
{
  unint64_t result = qword_269CDD2B8;
  if (!qword_269CDD2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2B8);
  }
  return result;
}

unint64_t sub_2534EDB00()
{
  unint64_t result = qword_269CDD2C0;
  if (!qword_269CDD2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2C0);
  }
  return result;
}

unint64_t sub_2534EDB4C()
{
  unint64_t result = qword_269CDD2C8;
  if (!qword_269CDD2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2C8);
  }
  return result;
}

unint64_t sub_2534EDB98()
{
  unint64_t result = qword_269CDD2D0;
  if (!qword_269CDD2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2D0);
  }
  return result;
}

unint64_t sub_2534EDBE4()
{
  unint64_t result = qword_269CDD2D8;
  if (!qword_269CDD2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2D8);
  }
  return result;
}

unint64_t sub_2534EDC30()
{
  unint64_t result = qword_269CDD2E0;
  if (!qword_269CDD2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2E0);
  }
  return result;
}

unint64_t sub_2534EDC7C()
{
  unint64_t result = qword_269CDD2E8;
  if (!qword_269CDD2E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2E8);
  }
  return result;
}

unint64_t sub_2534EDCC8()
{
  unint64_t result = qword_269CDD2F0;
  if (!qword_269CDD2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2F0);
  }
  return result;
}

unint64_t sub_2534EDD14()
{
  unint64_t result = qword_269CDD2F8;
  if (!qword_269CDD2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD2F8);
  }
  return result;
}

unint64_t sub_2534EDD60()
{
  unint64_t result = qword_269CDD300;
  if (!qword_269CDD300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD300);
  }
  return result;
}

unint64_t sub_2534EDDAC()
{
  unint64_t result = qword_269CDD308;
  if (!qword_269CDD308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD308);
  }
  return result;
}

unint64_t sub_2534EDDF8()
{
  unint64_t result = qword_269CDD3B8;
  if (!qword_269CDD3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD3B8);
  }
  return result;
}

unint64_t sub_2534EDE44()
{
  unint64_t result = qword_269CDD3C0;
  if (!qword_269CDD3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD3C0);
  }
  return result;
}

unint64_t sub_2534EDE90()
{
  unint64_t result = qword_269CDD3D0;
  if (!qword_269CDD3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD3D0);
  }
  return result;
}

uint64_t sub_2534EDEDC()
{
  uint64_t v2 = sub_2534D8D00();
  v3(v2);
  sub_25346CAF4();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

unint64_t sub_2534EDF34()
{
  unint64_t result = qword_269CDD3E0;
  if (!qword_269CDD3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD3E0);
  }
  return result;
}

uint64_t type metadata accessor for UpdateParametersExpression.UpdateParameter(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CDD608);
}

unint64_t sub_2534EDFA0()
{
  unint64_t result = qword_269CDD3F8;
  if (!qword_269CDD3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD3F8);
  }
  return result;
}

unint64_t sub_2534EDFEC()
{
  unint64_t result = qword_269CDD400;
  if (!qword_269CDD400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD400);
  }
  return result;
}

unint64_t sub_2534EE038()
{
  unint64_t result = qword_269CDD410;
  if (!qword_269CDD410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD410);
  }
  return result;
}

unint64_t sub_2534EE084()
{
  unint64_t result = qword_269CDD430;
  if (!qword_269CDD430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD430);
  }
  return result;
}

unint64_t sub_2534EE0D0()
{
  unint64_t result = qword_269CDD438;
  if (!qword_269CDD438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD438);
  }
  return result;
}

unint64_t sub_2534EE11C()
{
  unint64_t result = qword_269CDD440;
  if (!qword_269CDD440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD440);
  }
  return result;
}

unint64_t sub_2534EE168()
{
  unint64_t result = qword_269CDD468;
  if (!qword_269CDD468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD468);
  }
  return result;
}

unint64_t sub_2534EE1B4(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_25347907C(&qword_269CDD470);
    sub_2534E457C(v4);
    unint64_t result = sub_2534F8870();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2534EE234()
{
  unint64_t result = qword_269CDD4A8;
  if (!qword_269CDD4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD4A8);
  }
  return result;
}

unint64_t sub_2534EE280()
{
  unint64_t result = qword_269CDD4B8;
  if (!qword_269CDD4B8)
  {
    sub_25347907C(&qword_269CDD4B0);
    sub_2534E457C((uint64_t)&unk_269CDBFB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD4B8);
  }
  return result;
}

unint64_t sub_2534EE32C()
{
  unint64_t result = qword_269CDD4C8;
  if (!qword_269CDD4C8)
  {
    sub_25347907C(&qword_269CDD4B0);
    sub_2534E457C((uint64_t)&unk_269CDC068);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD4C8);
  }
  return result;
}

unint64_t sub_2534EE3D8()
{
  unint64_t result = qword_269CDD4D8;
  if (!qword_269CDD4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD4D8);
  }
  return result;
}

unint64_t sub_2534EE424()
{
  unint64_t result = qword_269CDD4F0;
  if (!qword_269CDD4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD4F0);
  }
  return result;
}

unint64_t sub_2534EE470()
{
  unint64_t result = qword_269CDD508;
  if (!qword_269CDD508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD508);
  }
  return result;
}

unint64_t sub_2534EE4BC()
{
  unint64_t result = qword_269CDD520;
  if (!qword_269CDD520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD520);
  }
  return result;
}

unint64_t sub_2534EE508()
{
  unint64_t result = qword_269CDD538;
  if (!qword_269CDD538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD538);
  }
  return result;
}

unint64_t sub_2534EE554()
{
  unint64_t result = qword_269CDD550;
  if (!qword_269CDD550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD550);
  }
  return result;
}

unint64_t sub_2534EE5A0()
{
  unint64_t result = qword_269CDD568;
  if (!qword_269CDD568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD568);
  }
  return result;
}

unint64_t sub_2534EE5EC(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    uint64_t v4 = v3;
    sub_25347907C(&qword_269CDD570);
    v4();
    sub_2534D99FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t sub_2534EE654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253462A5C(&qword_269CDB460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_2534EE6BC()
{
  unint64_t result = qword_269CDD598;
  if (!qword_269CDD598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD598);
  }
  return result;
}

unint64_t sub_2534EE708()
{
  unint64_t result = qword_269CDD5B0;
  if (!qword_269CDD5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD5B0);
  }
  return result;
}

unint64_t sub_2534EE754()
{
  unint64_t result = qword_269CDD5C8;
  if (!qword_269CDD5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD5C8);
  }
  return result;
}

unint64_t sub_2534EE7A0()
{
  unint64_t result = qword_269CDD5E0;
  if (!qword_269CDD5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD5E0);
  }
  return result;
}

unint64_t sub_2534EE7F0()
{
  unint64_t result = qword_269CDD5F0;
  if (!qword_269CDD5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD5F0);
  }
  return result;
}

unint64_t sub_2534EE840()
{
  unint64_t result = qword_269CDD5F8;
  if (!qword_269CDD5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD5F8);
  }
  return result;
}

unint64_t sub_2534EE890()
{
  unint64_t result = qword_269CDD600;
  if (!qword_269CDD600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDD600);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for Expression(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *((void *)a2 + 1);
        char v9 = a2[16];
        sub_2534E4408(v7, v8, v9);
        *(void *)a1 = v7;
        *((void *)a1 + 1) = v8;
        a1[16] = v9;
        goto LABEL_18;
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        uint64_t v33 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        goto LABEL_18;
      case 2u:
        *a1 = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for PrefixExpression(0) + 20);
        uint64_t v12 = &a1[v11];
        uint64_t v13 = &a2[v11];
        uint64_t v14 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        goto LABEL_18;
      case 3u:
        *a1 = *a2;
        uint64_t v15 = type metadata accessor for InfixExpression(0);
        uint64_t v16 = *(int *)(v15 + 20);
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = sub_253B059D0();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        v20(v17, v18, v19);
        v20(&a1[*(int *)(v15 + 24)], &a2[*(int *)(v15 + 24)], v19);
        goto LABEL_18;
      case 4u:
        uint64_t v21 = sub_253B059D0();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        v22(a1, a2, v21);
        uint64_t v23 = type metadata accessor for IndexExpression(0);
        v22(&a1[*(int *)(v23 + 20)], &a2[*(int *)(v23 + 20)], v21);
        goto LABEL_18;
      case 5u:
        uint64_t v24 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
        uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
        *(void *)&a1[*(int *)(updated + 20)] = *(void *)&a2[*(int *)(updated + 20)];
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 6u:
        uint64_t v26 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v26;
        uint64_t v27 = *((void *)a2 + 3);
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *((void *)a1 + 3) = v27;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 7u:
      case 0xBu:
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 8u:
        uint64_t v28 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
        uint64_t v29 = type metadata accessor for PickExpression(0);
        *(void *)&a1[*(int *)(v29 + 20)] = *(void *)&a2[*(int *)(v29 + 20)];
        goto LABEL_18;
      case 0xAu:
        uint64_t v30 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v30;
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 0xEu:
        uint64_t v31 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v31))
        {
          uint64_t v32 = sub_253462A5C(&qword_269CDB460);
          memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v31);
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Expression(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      return sub_2534E43E0(v7, v8, v9);
    case 1:
    case 8:
    case 9:
    case 12:
    case 15:
    case 16:
    case 17:
      goto LABEL_2;
    case 2:
      a1 += *(int *)(type metadata accessor for PrefixExpression(0) + 20);
LABEL_2:
      uint64_t v3 = sub_253B059D0();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t v5 = v3;
      uint64_t v6 = a1;
      goto LABEL_3;
    case 3:
      uint64_t v10 = type metadata accessor for InfixExpression(0);
      uint64_t v11 = a1 + *(int *)(v10 + 20);
      uint64_t v12 = sub_253B059D0();
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v16)((void *)(v12 - 8), v11, v12);
      uint64_t v6 = a1 + *(int *)(v10 + 24);
      uint64_t v5 = v12;
      goto LABEL_12;
    case 4:
      uint64_t v13 = sub_253B059D0();
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v16)((void *)(v13 - 8), a1, v13);
      uint64_t v6 = a1 + *(int *)(type metadata accessor for IndexExpression(0) + 20);
      uint64_t v5 = v13;
LABEL_12:
      uint64_t v4 = v16;
      goto LABEL_3;
    case 5:
      uint64_t v14 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for UpdateParametersExpression(0);
      goto LABEL_15;
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 7:
    case 10:
    case 11:
    case 13:
LABEL_15:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 14:
      uint64_t v15 = sub_253B059D0();
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v15);
      if (!result)
      {
        uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
        uint64_t v6 = a1;
        uint64_t v5 = v15;
LABEL_3:
        uint64_t result = v4(v6, v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for Expression(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
      char v8 = a2[16];
      sub_2534E4408(v6, v7, v8);
      *(void *)a1 = v6;
      *((void *)a1 + 1) = v7;
      a1[16] = v8;
      goto LABEL_16;
    case 1u:
    case 9u:
    case 0xCu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      uint64_t v31 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
      goto LABEL_16;
    case 2u:
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for PrefixExpression(0) + 20);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      goto LABEL_16;
    case 3u:
      *a1 = *a2;
      uint64_t v13 = type metadata accessor for InfixExpression(0);
      uint64_t v14 = *(int *)(v13 + 20);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = sub_253B059D0();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v15, v16, v17);
      v18(&a1[*(int *)(v13 + 24)], &a2[*(int *)(v13 + 24)], v17);
      goto LABEL_16;
    case 4u:
      uint64_t v19 = sub_253B059D0();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(a1, a2, v19);
      uint64_t v21 = type metadata accessor for IndexExpression(0);
      v20(&a1[*(int *)(v21 + 20)], &a2[*(int *)(v21 + 20)], v19);
      goto LABEL_16;
    case 5u:
      uint64_t v22 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
      uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
      *(void *)&a1[*(int *)(updated + 20)] = *(void *)&a2[*(int *)(updated + 20)];
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 6u:
      uint64_t v24 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v24;
      uint64_t v25 = *((void *)a2 + 3);
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *((void *)a1 + 3) = v25;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 7u:
    case 0xBu:
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 8u:
      uint64_t v26 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
      uint64_t v27 = type metadata accessor for PickExpression(0);
      *(void *)&a1[*(int *)(v27 + 20)] = *(void *)&a2[*(int *)(v27 + 20)];
      goto LABEL_16;
    case 0xAu:
      uint64_t v28 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v28;
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 0xEu:
      uint64_t v29 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v29))
      {
        uint64_t v30 = sub_253462A5C(&qword_269CDB460);
        memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v29);
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}