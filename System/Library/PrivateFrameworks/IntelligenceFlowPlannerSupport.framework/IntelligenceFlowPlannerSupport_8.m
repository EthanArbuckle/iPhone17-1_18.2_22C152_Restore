void sub_2539A83A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  unsigned char vars8[6];

  RequestContent.SystemPromptResolution.UserAction.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_2539A83BC()
{
}

uint64_t RequestContent.SystemPromptResolution.RequirementResolution.isRequirementSatisfied.getter()
{
  return *v0;
}

uint64_t RequestContent.SystemPromptResolution.RequirementResolution.isRequirementSatisfied.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*RequestContent.SystemPromptResolution.RequirementResolution.isRequirementSatisfied.modify())()
{
  return nullsub_1;
}

uint64_t RequestContent.SystemPromptResolution.RequirementResolution.description.getter()
{
  sub_253A3BDD0();
  sub_253B0A000();
  swift_bridgeObjectRelease();
  sub_253A3F6C4();
  uint64_t v2 = v0;
  sub_253B09860();
  swift_bridgeObjectRelease();
  sub_25351C9C4();
  return v2;
}

uint64_t sub_2539A84A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x8000000253B113E0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_2539A8530()
{
  return 0xD000000000000016;
}

uint64_t sub_2539A8550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539A84A8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539A857C(uint64_t a1)
{
  unint64_t v2 = sub_2539ECC54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539A85B8(uint64_t a1)
{
  unint64_t v2 = sub_2539ECC54();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestContent.SystemPromptResolution.RequirementResolution.encode(to:)()
{
  sub_2534847F8();
  v1 = v0;
  sub_253462A5C(&qword_269CE60E0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534847E0();
  sub_253472068(v1, v1[3]);
  sub_2539ECC54();
  sub_253A3D530();
  sub_253B0A680();
  sub_253B0A400();
  sub_2534D9A08();
  v3();
  sub_2536D3D5C();
  sub_2534847C8();
}

void RequestContent.SystemPromptResolution.RequirementResolution.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE60F0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534F83CC();
  sub_2539ECC54();
  sub_2534994B4();
  if (!v1)
  {
    char v4 = sub_253B0A330();
    sub_2534D9A08();
    v5();
    *uint64_t v2 = v4 & 1;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539A87BC()
{
}

void sub_2539A87D4()
{
}

uint64_t sub_2539A87F4(uint64_t a1)
{
  unint64_t v2 = sub_2539ECCA0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539A8830(uint64_t a1)
{
  unint64_t v2 = sub_2539ECCA0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestContent.SystemPromptResolution.ActionCancellation.encode(to:)()
{
}

uint64_t RequestContent.SystemPromptResolution.ActionCancellation.init(from:)(uint64_t a1)
{
  return sub_253A3F4B4(a1);
}

uint64_t sub_2539A88C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x76456E6F69746361 && a2 == 0xED00006449746E65;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000253B115C0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x6974634172657375 && a2 == 0xEA00000000006E6FLL;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x7475706E69 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 4;
        }
        else {
          return 5;
        }
      }
    }
  }
}

unint64_t sub_2539A8B14(char a1)
{
  unint64_t result = 0x76456E6F69746361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x6974634172657375;
      break;
    case 3:
      unint64_t result = 0x6E656D6574617473;
      break;
    case 4:
      unint64_t result = 0x7475706E69;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2539A8BDC()
{
}

unint64_t sub_2539A8BF4()
{
  return sub_2539A8B14(*v0);
}

uint64_t sub_2539A8BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539A88C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539A8C24(uint64_t a1)
{
  unint64_t v2 = sub_2539ECCEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539A8C60(uint64_t a1)
{
  unint64_t v2 = sub_2539ECCEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestContent.SystemPromptResolution.encode(to:)()
{
  sub_2534847F8();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE6108);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539ECCEC();
  sub_2534DA3BC();
  sub_253A3DA50();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_253A3C9CC();
  if (!v0)
  {
    type metadata accessor for RequestContent.SystemPromptResolution(0);
    sub_25397F654();
    type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    sub_2539E6F90((uint64_t)&unk_269CE6118);
    sub_25397F654();
    sub_253A3E060();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_253A3D2D4();
    sub_25397F654();
    sub_253A3E054();
    type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    sub_2539E6F90((uint64_t)&unk_269CE6120);
    sub_253A3EE34();
    sub_25397F654();
  }
  sub_2534D9A08();
  v2();
  sub_253578DEC();
  sub_2534847C8();
}

void RequestContent.SystemPromptResolution.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = v4;
  uint64_t v38 = v6;
  type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2534AF260(v8, v37);
  sub_253B059D0();
  sub_253465998();
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  MEMORY[0x270FA5388](v9);
  v40 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_253483660();
  uint64_t v41 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(v12);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_2534AF2D8();
  sub_253B055C0();
  sub_253465998();
  uint64_t v45 = v14;
  MEMORY[0x270FA5388](v15);
  sub_2534966B0();
  uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_25347FAAC();
  uint64_t v47 = sub_253462A5C(&qword_269CE6128);
  sub_253465998();
  uint64_t v42 = v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = sub_25348360C();
  uint64_t v21 = type metadata accessor for RequestContent.SystemPromptResolution(v20);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v22);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253A3CC78((uint64_t)v24);
  uint64_t v50 = v21;
  v51 = v24;
  v48 = &v24[*(int *)(v21 + 32)];
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = *(void *)(v5 + 24);
  uint64_t v49 = v5;
  sub_253A3BED4();
  sub_2539ECCEC();
  uint64_t v46 = v2;
  sub_253B0A660();
  if (v0)
  {
    uint64_t v26 = sub_253A3ED50();
    uint64_t v28 = v50;
    uint64_t v27 = (uint64_t)v51;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v26);
    sub_253472458(v27, (uint64_t *)&unk_26B248CB0);
    if (v1)
    {
      sub_2534659CC();
      v29();
      if (!v5)
      {
LABEL_5:
        if (!v25) {
          goto LABEL_7;
        }
LABEL_6:
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v27 + *(int *)(v28 + 28), v44);
        goto LABEL_7;
      }
    }
    else if (!v5)
    {
      goto LABEL_5;
    }
    sub_2539DF610();
    if (!v25) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v52 = v1;
  sub_2539E6F90((uint64_t)&qword_269CDBCC8);
  sub_253A3E6CC();
  sub_253B0A310();
  uint64_t v30 = (uint64_t)v51;
  sub_2539F0BE0(v3, (uint64_t)v51, (uint64_t *)&unk_26B248CB0);
  sub_253A3E1AC();
  sub_253A3E6CC();
  sub_253B0A370();
  uint64_t v31 = v50;
  sub_253A3E994();
  sub_25347FA84();
  v32();
  sub_253A3C6A0();
  sub_2539E6F90((uint64_t)&unk_269CE6130);
  sub_253A3EE28();
  uint64_t v33 = v52;
  sub_253B0A370();
  sub_2539DF5B8(v33, v30 + *(int *)(v31 + 24));
  sub_2539E6F90((uint64_t)&qword_269CDC068);
  sub_253B0A370();
  sub_25347FA84();
  v34();
  sub_253A3E054();
  sub_2539E6F90((uint64_t)&unk_269CE6138);
  sub_253A3EE34();
  uint64_t v35 = v39;
  sub_253B0A370();
  sub_2534D91AC();
  v36();
  sub_2539E7074(v35, (uint64_t)v48);
  sub_2539DF660(v30, v38);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v49);
LABEL_7:
  sub_2539DF610();
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539A9528()
{
}

void sub_2539A9540()
{
}

uint64_t ExternalAgentRequest.content.getter()
{
  uint64_t v0 = sub_2535E27CC();
  return sub_2539DF660(v0, v1);
}

uint64_t ExternalAgentRequest.content.setter(uint64_t a1)
{
  return sub_2539E7074(a1, v1);
}

uint64_t (*ExternalAgentRequest.content.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentRequest.rewriteMetadataEventID.getter()
{
  return sub_2539A9600();
}

uint64_t sub_2539A9600()
{
  uint64_t v0 = sub_2535E2348();
  uint64_t v2 = v1(v0);
  return sub_253A3E364(*(int *)(v2 + 20));
}

uint64_t ExternalAgentRequest.rewriteMetadataEventID.setter()
{
  return sub_2539A9658();
}

uint64_t sub_2539A9658()
{
  uint64_t v0 = sub_2534D976C();
  v1(v0);
  uint64_t v2 = sub_253A3EFC8();
  return sub_2539F0BE0(v2, v3, v4);
}

uint64_t (*ExternalAgentRequest.rewriteMetadataEventID.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentRequest.rewriteMetadataInlined.getter()
{
  return sub_2539D5C04();
}

double ExternalAgentRequest.rewriteMetadataInlined.setter()
{
  *(void *)&double result = sub_2539D5C60().n128_u64[0];
  return result;
}

uint64_t (*ExternalAgentRequest.rewriteMetadataInlined.modify())()
{
  return nullsub_1;
}

void ExternalAgentRequest.init(query:statementId:queryRewriteMetadataEventId:queryRewriteMetadataInlined:)()
{
  sub_2534B3258();
  uint64_t v4 = v3;
  uint64_t v30 = v6;
  uint64_t v31 = v5;
  uint64_t v29 = v7;
  uint64_t v8 = sub_2539460B0();
  uint64_t v9 = type metadata accessor for ExternalAgentRequest(v8);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  sub_253465A3C();
  uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534D8CAC();
  type metadata accessor for RequestContent(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_25346CC54();
  sub_253961E88(*v4, v4[1]);
  type metadata accessor for RequestContent.TextContent(0);
  sub_253B059D0();
  sub_253486600();
  sub_253A3E6B0();
  sub_2534AF234();
  v15();
  void *v0 = v2;
  v0[1] = v29;
  sub_2534DA2E4();
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = sub_253B055C0();
  uint64_t v17 = sub_253A3E620();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v17, v18, v19, v16);
  uint64_t v20 = sub_253A3CD60();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v20, v21, v22, v16);
  uint64_t v23 = (uint64_t *)(v1 + *(int *)(v10 + 32));
  *uint64_t v23 = 0;
  v23[1] = 0;
  v23[2] = 0;
  uint64_t v24 = sub_253578EEC();
  sub_2539DF5B8(v24, v25);
  uint64_t v26 = sub_2536D3880();
  sub_2539F0BE0(v26, v27, (uint64_t *)&unk_26B248CB0);
  sub_253961E88(*v23, v23[1]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  v23[2] = 0;
  sub_2539DF5B8(v1, v30);
  sub_253472458(v31, (uint64_t *)&unk_26B248CB0);
  sub_253A3E5D4();
  sub_2534B3470();
  v28();
  sub_253465A14();
}

void ExternalAgentRequest.init(speechCandidates:queryRewriteMetadataEventId:queryRewriteMetadataInlined:)()
{
  sub_2534B3258();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_253A3F064();
  uint64_t v9 = type metadata accessor for ExternalAgentRequest(v8);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_253A3DC74();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_25347FAAC();
  sub_253961E88(*v5, v5[1]);
  *uint64_t v3 = v7;
  sub_2534D96CC();
  swift_storeEnumTagMultiPayload();
  sub_253B055C0();
  sub_253A3D5E8(v2);
  sub_253A3D5E8(v1 + *(int *)(v10 + 28));
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v10 + 32));
  *uint64_t v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  uint64_t v15 = sub_253A3D030();
  sub_2539DF5B8(v15, v16);
  uint64_t v17 = sub_2535925F4();
  sub_2539F0BE0(v17, v18, (uint64_t *)&unk_26B248CB0);
  sub_253961E88(*v14, v14[1]);
  *uint64_t v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  sub_2539DF5B8(v1, v0);
  sub_253A3CE14();
  sub_253465A14();
}

uint64_t sub_2539A9ACC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000253B13AC0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000253B12410)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539A9C18(char a1)
{
  if (a1) {
    return 0xD000000000000016;
  }
  else {
    return 0x746E65746E6F63;
  }
}

uint64_t sub_2539A9C78()
{
  return sub_2539A9C18(*v0);
}

uint64_t sub_2539A9C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539A9ACC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539A9CA8(uint64_t a1)
{
  unint64_t v2 = sub_2539ECD38();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539A9CE4(uint64_t a1)
{
  unint64_t v2 = sub_2539ECD38();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExternalAgentRequest.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6140);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539ECD38();
  sub_2534DA3BC();
  type metadata accessor for RequestContent(0);
  sub_2539E6F90((uint64_t)&unk_269CE5E28);
  sub_2534DA628();
  if (!v0)
  {
    type metadata accessor for ExternalAgentRequest(0);
    sub_253A3C418();
    sub_2539E6F90((uint64_t)&qword_26B248CA0);
    sub_253A3B994();
    sub_253A3CE68();
    sub_253A3BCCC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ExternalAgentRequest.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = v4;
  uint64_t v23 = v6;
  uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v25 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RequestContent(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_253483628(v11, v22);
  uint64_t v27 = sub_253462A5C(&qword_269CE6150);
  sub_253465998();
  uint64_t v24 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_2534D9B74();
  type metadata accessor for ExternalAgentRequest(v14);
  sub_253A3EB94();
  MEMORY[0x270FA5388](v15);
  sub_253A3DC30();
  uint64_t v17 = v2 + v16;
  uint64_t v18 = sub_253B055C0();
  *(void *)&long long v28 = v17;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v17, 1, 1, v18);
  uint64_t v19 = (uint64_t *)(v2 + *(int *)(v0 + 32));
  *uint64_t v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  sub_2534D9A50(v5);
  sub_2539ECD38();
  sub_253A3E264();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
    sub_253472458(v28, (uint64_t *)&unk_26B248CB0);
    sub_253961E88(*v19, v19[1]);
  }
  else
  {
    uint64_t v29 = v2;
    uint64_t v20 = (uint64_t)v25;
    char v30 = 0;
    sub_2539E6F90((uint64_t)&unk_269CE5E40);
    sub_253A3CA4C();
    sub_2534F8908();
    sub_2539DF5B8(v26, v29);
    sub_253A3DA68();
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3CA4C();
    sub_253B0A310();
    sub_2539F0BE0(v20, v28, (uint64_t *)&unk_26B248CB0);
    sub_2539EB5BC();
    sub_253A3E4FC();
    sub_253B0A310();
    sub_2534D96CC();
    sub_2534F85D4();
    v21();
    sub_253A3EA64();
    sub_253961E88(*v19, v19[1]);
    *(_OWORD *)uint64_t v19 = v28;
    v19[2] = v3;
    sub_2539DF660(v29, v23);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539AA268()
{
}

void sub_2539AA280()
{
}

void static RequestPrescribedPlan.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  uint64_t v49 = type metadata accessor for RequestPrescribedPlan.OpenTool(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  uint64_t v50 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RequestPrescribedPlan(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534659D8();
  uint64_t v52 = v12;
  sub_2534B324C();
  MEMORY[0x270FA5388](v13);
  sub_2534B3318();
  uint64_t v51 = v14;
  sub_2534B324C();
  MEMORY[0x270FA5388](v15);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v16);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v17);
  sub_25351C770();
  MEMORY[0x270FA5388](v18);
  sub_2534F8600();
  MEMORY[0x270FA5388](v19);
  sub_253A3B9E4();
  MEMORY[0x270FA5388](v20);
  sub_2534D9E98();
  uint64_t v21 = sub_253462A5C(&qword_269CE6158);
  uint64_t v22 = sub_25346CB4C(v21);
  MEMORY[0x270FA5388](v22);
  sub_2534B34A4();
  uint64_t v24 = (void *)(v5 + *(int *)(v23 + 56));
  sub_2539DF660(v53, v5);
  sub_2539DF660(v54, (uint64_t)v24);
  sub_2534DA604();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_2539DF660(v5, (uint64_t)v2);
      uint64_t v31 = *v2;
      uint64_t v30 = v2[1];
      if (sub_253A3CD90() != 1) {
        goto LABEL_33;
      }
      if (v31 == *v24 && v30 == v24[1]) {
        goto LABEL_44;
      }
      goto LABEL_25;
    case 2u:
      uint64_t v33 = sub_2534F8958();
      sub_2539DF660(v33, v34);
      uint64_t v36 = *v1;
      uint64_t v35 = v1[1];
      if (sub_253A3CD90() != 2) {
        goto LABEL_33;
      }
      if (v36 != *v24 || v35 != v24[1]) {
        goto LABEL_25;
      }
      goto LABEL_44;
    case 3u:
      uint64_t v38 = sub_253A3D518();
      sub_2539DF660(v38, v39);
      uint64_t v41 = *v3;
      uint64_t v40 = v3[1];
      if (sub_253A3CD90() == 3) {
        goto LABEL_21;
      }
      goto LABEL_33;
    case 4u:
      sub_2539DF660(v5, (uint64_t)v0);
      uint64_t v44 = *v0;
      uint64_t v43 = v0[1];
      if (sub_253A3CD90() != 4) {
        goto LABEL_33;
      }
      if (v44 == *v24 && v43 == v24[1])
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_2534D9B10();
        sub_25351C8D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_49;
    case 5u:
      uint64_t v46 = sub_2536D5500();
      sub_2539DF660(v46, v47);
      uint64_t v41 = *v6;
      uint64_t v40 = v6[1];
      if (sub_253A3CD90() != 5) {
        goto LABEL_33;
      }
LABEL_21:
      if (v41 != *v24 || v40 != v24[1]) {
        goto LABEL_25;
      }
      goto LABEL_44;
    case 6u:
      uint64_t v48 = v51;
      sub_2539DF660(v5, v51);
      if (sub_253A3CD90() != 6)
      {
        sub_2539DF610();
        goto LABEL_34;
      }
      sub_2539DF5B8((uint64_t)v24, v50);
      sub_2536D44B0();
      if ((_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0() & 1) != 0
        && (*(unsigned char *)(v48 + *(int *)(v49 + 20) + 8) & 1) == 0)
      {
        sub_2536D54BC();
      }
      sub_2539DF610();
      sub_2539DF610();
      goto LABEL_49;
    case 7u:
      sub_2539DF660(v5, v52);
      if (sub_253A3CD90() == 7) {
        goto LABEL_49;
      }
      goto LABEL_34;
    default:
      uint64_t v25 = sub_253A3D524();
      sub_2539DF660(v25, v26);
      uint64_t v28 = *v4;
      uint64_t v27 = v4[1];
      if (sub_253A3CD90())
      {
LABEL_33:
        swift_bridgeObjectRelease();
LABEL_34:
        sub_253472458(v5, &qword_269CE6158);
      }
      else
      {
        if (v28 == *v24 && v27 == v24[1])
        {
LABEL_44:
          sub_253A3DF60();
        }
        else
        {
LABEL_25:
          sub_253592308();
          sub_253466CA0();
          swift_bridgeObjectRelease();
        }
LABEL_49:
        sub_2539DF610();
      }
      sub_253465A14();
      return;
  }
}

uint64_t static RequestPrescribedPlan.SearchTool.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1 = sub_253A3E3E8(a1);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  int v6 = *(unsigned __int8 *)(v4 + 17);
  int v7 = *(unsigned __int8 *)(v3 + 16);
  int v8 = *(unsigned __int8 *)(v3 + 17);
  if (v1 == *(void *)v3 && v2 == *(void *)(v3 + 8))
  {
    if (v5 != v7) {
      return 0;
    }
    return v6 ^ v8 ^ 1u;
  }
  sub_253B0A4C0();
  uint64_t result = sub_25397F648();
  if ((v11 & 1) != 0 && ((v5 ^ v7) & 1) == 0) {
    return v6 ^ v8 ^ 1u;
  }
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport21ContextPrewarmRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  uint64_t v1 = sub_253A3E3E8(a1);
  if (v1 == *v3 && v2 == v3[1]) {
    return _s30IntelligenceFlowPlannerSupport17SafetyModeReleaseV2eeoiySbAC_ACtFZ_0();
  }
  else {
    return sub_253B0A4C0();
  }
}

uint64_t static RequestPrescribedPlan.OpenTool.== infix(_:_:)()
{
  if ((sub_253A3D21C() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
  char v3 = *(unsigned char *)(v1 + v2 + 8);
  char v4 = *(unsigned char *)(v0 + v2 + 8);
  if (v3)
  {
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    sub_2536D54BC();
    if (v6) {
      return 0;
    }
  }
  return 1;
}

uint64_t static RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return _s30IntelligenceFlowPlannerSupport17SafetyModeReleaseV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_2539AAA50(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F54686372616573 && a2 == 0xEA00000000006C6FLL;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000253B12340 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x6C6F6F5474786574 && a2 == 0xE800000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 0x54747265766E6F63 && a2 == 0xEB000000006C6F6FLL;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x5479616C70736964 && a2 == 0xEB000000006C6F6FLL;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x6764656C776F6E6BLL && a2 == 0xED00006C6F6F5465;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x6C6F6F546E65706FLL && a2 == 0xE800000000000000;
            if (v10 || (sub_253B0A4C0() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000025 && a2 == 0x8000000253B123A0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else
            {
              char v11 = sub_253B0A4C0();
              swift_bridgeObjectRelease();
              if (v11) {
                return 7;
              }
              else {
                return 8;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2539AADD0(char a1)
{
  uint64_t result = 0x6F54686372616573;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unsigned int v3 = 1954047348;
      goto LABEL_9;
    case 3:
      uint64_t result = 0x54747265766E6F63;
      break;
    case 4:
      uint64_t result = 0x5479616C70736964;
      break;
    case 5:
      uint64_t result = 0x6764656C776F6E6BLL;
      break;
    case 6:
      unsigned int v3 = 1852141679;
LABEL_9:
      uint64_t result = v3 | 0x6C6F6F5400000000;
      break;
    case 7:
      uint64_t result = 0xD000000000000025;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539AAEEC()
{
  return sub_2539AADD0(*v0);
}

uint64_t sub_2539AAEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AAA50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539AAF1C(uint64_t a1)
{
  unint64_t v2 = sub_2539ECD84();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AAF58(uint64_t a1)
{
  unint64_t v2 = sub_2539ECD84();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AAF94(uint64_t a1)
{
  unint64_t v2 = sub_2539ECFE4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AAFD0(uint64_t a1)
{
  unint64_t v2 = sub_2539ECFE4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB00C(uint64_t a1)
{
  unint64_t v2 = sub_2539ECF4C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB048(uint64_t a1)
{
  unint64_t v2 = sub_2539ECF4C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB084(uint64_t a1)
{
  unint64_t v2 = sub_2539ECEB4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB0C0(uint64_t a1)
{
  unint64_t v2 = sub_2539ECEB4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB0FC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED114();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB138(uint64_t a1)
{
  unint64_t v2 = sub_2539ED114();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB174(uint64_t a1)
{
  unint64_t v2 = sub_2539ECDD0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB1B0(uint64_t a1)
{
  unint64_t v2 = sub_2539ECDD0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB1EC(uint64_t a1)
{
  unint64_t v2 = sub_2539ECE68();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB228(uint64_t a1)
{
  unint64_t v2 = sub_2539ECE68();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB264(uint64_t a1)
{
  unint64_t v2 = sub_2539ED1AC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB2A0(uint64_t a1)
{
  unint64_t v2 = sub_2539ED1AC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539AB2DC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED07C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AB318(uint64_t a1)
{
  unint64_t v2 = sub_2539ED07C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.encode(to:)()
{
  sub_2534847F8();
  uint64_t v69 = v1;
  sub_253462A5C(&qword_269CE6160);
  sub_253465998();
  v65[22] = v5;
  v65[23] = v4;
  MEMORY[0x270FA5388](v4);
  sub_2534AF2BC(v6, v65[0]);
  v65[21] = sub_253462A5C(&qword_269CE6168);
  sub_253465998();
  v65[19] = v7;
  MEMORY[0x270FA5388](v8);
  v65[18] = (uint64_t)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253483660();
  v65[16] = type metadata accessor for RequestPrescribedPlan.OpenTool(v10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534D92B8(v12, v65[0]);
  sub_253462A5C(&qword_269CE6170);
  sub_253465998();
  v65[14] = v14;
  v65[15] = v13;
  MEMORY[0x270FA5388](v13);
  sub_2534D9BE4(v15, v65[0]);
  sub_253462A5C(&qword_269CE6178);
  sub_253465998();
  v65[11] = v17;
  v65[12] = v16;
  MEMORY[0x270FA5388](v16);
  v65[10] = (uint64_t)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65[9] = sub_253462A5C(&qword_269CE6180);
  sub_253465998();
  v65[8] = v19;
  MEMORY[0x270FA5388](v20);
  sub_2534D8F5C((uint64_t)v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65[6] = sub_253462A5C(&qword_269CE6188);
  sub_253465998();
  v65[5] = v22;
  MEMORY[0x270FA5388](v23);
  sub_2534D8F5C((uint64_t)v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65[3] = sub_253462A5C(&qword_269CE6190);
  sub_253465998();
  v65[2] = v25;
  MEMORY[0x270FA5388](v26);
  sub_253465A3C();
  sub_253462A5C(&qword_269CE6198);
  sub_253465998();
  v65[1] = v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v29 = sub_25397F55C();
  type metadata accessor for RequestPrescribedPlan(v29);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v30);
  sub_2534966B0();
  sub_253462A5C(&qword_269CE61A0);
  sub_253465998();
  uint64_t v67 = v31;
  uint64_t v68 = v32;
  MEMORY[0x270FA5388](v31);
  sub_2534B3294();
  sub_253A3B6B0();
  sub_2539ECD84();
  uint64_t v66 = v2;
  sub_253B0A680();
  sub_2539DF660(v0, v3);
  sub_253A3E5D4();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v40 = *(void *)v3;
      uint64_t v39 = *(void *)(v3 + 8);
      LOBYTE(v70) = 1;
      sub_2539ED114();
      uint64_t v42 = v66;
      uint64_t v41 = v67;
      sub_253A3BFC0();
      uint64_t v70 = v40;
      uint64_t v71 = v39;
      sub_2539ED160();
      sub_253B0A440();
      goto LABEL_9;
    case 2u:
      uint64_t v44 = *(void *)v3;
      uint64_t v43 = *(void *)(v3 + 8);
      char v45 = *(unsigned char *)(v3 + 16);
      LOBYTE(v70) = 2;
      sub_2539ED07C();
      sub_253578C34();
      uint64_t v46 = v66;
      uint64_t v47 = v67;
      sub_253B0A3A0();
      uint64_t v70 = v44;
      uint64_t v71 = v43;
      char v72 = v45;
      sub_2539ED0C8();
      sub_253B0A440();
      sub_2534659CC();
      v48();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v46, v47);
      goto LABEL_10;
    case 3u:
      uint64_t v50 = *(void *)v3;
      uint64_t v49 = *(void *)(v3 + 8);
      char v51 = *(unsigned char *)(v3 + 16);
      LOBYTE(v70) = 3;
      sub_2539ECFE4();
      sub_253578C34();
      uint64_t v42 = v66;
      uint64_t v41 = v67;
      sub_253A3BFC0();
      uint64_t v70 = v50;
      uint64_t v71 = v49;
      char v72 = v51;
      sub_2539ED030();
      sub_253A3E7AC();
      goto LABEL_8;
    case 4u:
      uint64_t v53 = *(void *)v3;
      uint64_t v52 = *(void *)(v3 + 8);
      char v54 = *(unsigned char *)(v3 + 16);
      LOBYTE(v70) = 4;
      sub_2539ECF4C();
      uint64_t v42 = v66;
      uint64_t v41 = v67;
      sub_253A3BFC0();
      uint64_t v70 = v53;
      uint64_t v71 = v52;
      char v72 = v54;
      sub_2539ECF98();
      sub_253A3E7AC();
      goto LABEL_8;
    case 5u:
      uint64_t v56 = *(void *)v3;
      uint64_t v55 = *(void *)(v3 + 8);
      char v57 = *(unsigned char *)(v3 + 16);
      LOBYTE(v70) = 5;
      sub_2539ECEB4();
      uint64_t v42 = v66;
      uint64_t v41 = v67;
      sub_253A3BFC0();
      uint64_t v70 = v56;
      uint64_t v71 = v55;
      char v72 = v57;
      sub_2539ECF00();
      sub_253A3E7AC();
LABEL_8:
      sub_253A3D55C();
LABEL_9:
      sub_2534659CC();
      v58();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v42, v41);
      goto LABEL_10;
    case 6u:
      sub_2539DF5B8(v3, v65[17]);
      LOBYTE(v70) = 6;
      sub_2539ECE68();
      sub_25351C2D8();
      sub_2539E6F90((uint64_t)&unk_269CE61C8);
      sub_2534F84A8();
      sub_253B0A440();
      sub_2534659CC();
      v59();
      sub_2539DF610();
      uint64_t v60 = sub_25351C5C0();
      goto LABEL_13;
    case 7u:
      uint64_t v62 = *(void *)v3;
      char v63 = *(unsigned char *)(v3 + 8);
      LOBYTE(v70) = 7;
      sub_2539ECDD0();
      sub_253A3BD18();
      uint64_t v70 = v62;
      LOBYTE(v71) = v63;
      sub_2539ECE1C();
      sub_253B0A440();
      sub_2534659CC();
      v64();
      uint64_t v60 = sub_2534D9A44();
LABEL_13:
      v61(v60);
      break;
    default:
      uint64_t v34 = *(void *)v3;
      uint64_t v33 = *(void *)(v3 + 8);
      char v35 = *(unsigned char *)(v3 + 16);
      char v36 = *(unsigned char *)(v3 + 17);
      LOBYTE(v70) = 0;
      sub_2539ED1AC();
      sub_253A3E020();
      sub_253B0A3A0();
      uint64_t v70 = v34;
      uint64_t v71 = v33;
      char v72 = v35;
      char v73 = v36;
      sub_2539ED1F8();
      sub_253B0A440();
      sub_2534659CC();
      v37();
      sub_2534659CC();
      v38();
LABEL_10:
      swift_bridgeObjectRelease();
      break;
  }
  sub_2534F8A10();
  sub_2534847C8();
}

void RequestPrescribedPlan.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = v4;
  sub_253462A5C(&qword_269CE6230);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534D929C(v7, v85);
  sub_253462A5C(&qword_269CE6238);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D9248(v9, v86);
  sub_253462A5C(&qword_269CE6240);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_2534B33C8(v11, v87);
  sub_253462A5C(&qword_269CE6248);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  sub_2534D92B8(v13, v88);
  uint64_t v97 = sub_253462A5C(&qword_269CE6250);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_2534D9BAC(v15, v89);
  sub_253462A5C(&qword_269CE6258);
  sub_253465998();
  MEMORY[0x270FA5388](v16);
  sub_2534D9264(v17, v90);
  sub_253462A5C(&qword_269CE6260);
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  sub_2534D9B90(v19, v91);
  sub_253462A5C(&qword_269CE6268);
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  sub_2534D9BE4(v21, v92);
  sub_253462A5C(&qword_269CE6270);
  sub_253465998();
  uint64_t v95 = v23;
  uint64_t v96 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = sub_25348360C();
  type metadata accessor for RequestPrescribedPlan(v24);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v25);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v26);
  sub_2534F823C();
  MEMORY[0x270FA5388](v27);
  sub_2534F823C();
  MEMORY[0x270FA5388](v28);
  sub_2534F823C();
  MEMORY[0x270FA5388](v29);
  sub_253A3B9E4();
  MEMORY[0x270FA5388](v30);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v31);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v32);
  sub_25351C99C();
  MEMORY[0x270FA5388](v33);
  sub_2536D4170();
  uint64_t v98 = (uint64_t)v5;
  sub_2534D9A50(v5);
  sub_2539ECD84();
  sub_253A3D530();
  sub_253A3BAF0();
  if (!v0)
  {
    uint64_t v34 = v97;
    uint64_t v35 = sub_253B0A390();
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36
      && (uint64_t v37 = *(unsigned __int8 *)(v35 + 32),
          sub_25347B78C(1, v36, v35, v35 + 32, 0, (2 * v36) | 1),
          uint64_t v39 = v38,
          unint64_t v41 = v40,
          swift_bridgeObjectRelease(),
          v39 == v41 >> 1))
    {
      switch(v37)
      {
        case 1:
          LOBYTE(v99) = 1;
          sub_2539ED114();
          sub_253A3B914();
          sub_2539ED3C0();
          sub_253A3BD64();
          sub_253A3DA38();
          sub_2534659CC();
          v52(v51);
          swift_unknownObjectRelease();
          sub_2534B3470();
          v54(v53);
          uint64_t v34 = (uint64_t)v3;
          *uint64_t v3 = v99;
          v3[1] = v100;
          goto LABEL_15;
        case 2:
          sub_2539ED07C();
          sub_253A3B914();
          sub_2539ED374();
          sub_253A3BD64();
          sub_253A3DA38();
          sub_2534659CC();
          v56(v55);
          swift_unknownObjectRelease();
          uint64_t v34 = v97 + 8;
          sub_2534B3470();
          v58(v57);
          sub_253A3E648();
          sub_253A3C24C(v59);
          goto LABEL_15;
        case 3:
          sub_2539ECFE4();
          sub_253A3B914();
          sub_2539ED328();
          sub_253B0A370();
          sub_2534D91AC();
          v66(v65);
          swift_unknownObjectRelease();
          sub_2534659CC();
          v68(v67);
          sub_253A3E648();
          sub_253A3C24C(v69);
          goto LABEL_15;
        case 4:
          sub_2539ECF4C();
          sub_253A3B914();
          sub_2539ED2DC();
          sub_253A3BD64();
          sub_253A3DA38();
          sub_2534659CC();
          v61(v60);
          swift_unknownObjectRelease();
          uint64_t v34 = v97 + 8;
          sub_2534B3470();
          v63(v62);
          sub_253A3E648();
          sub_253A3C24C(v64);
          goto LABEL_15;
        case 5:
          sub_2539ECEB4();
          sub_253A3B914();
          sub_2539ED290();
          sub_253A3BD64();
          sub_253A3DA38();
          sub_2534659CC();
          v71(v70);
          swift_unknownObjectRelease();
          uint64_t v34 = v97 + 8;
          sub_2534B3470();
          v73(v72);
          sub_253A3E648();
          sub_253A3C24C(v74);
          goto LABEL_15;
        case 6:
          sub_2539ECE68();
          sub_253A3B914();
          type metadata accessor for RequestPrescribedPlan.OpenTool(0);
          sub_2539E6F90((uint64_t)&unk_269CE6280);
          sub_253B0A370();
          sub_2534659CC();
          v76(v75);
          swift_unknownObjectRelease();
          sub_2534659CC();
          v78(v77);
          swift_storeEnumTagMultiPayload();
          sub_253A3F3BC(v94);
          goto LABEL_16;
        case 7:
          LOBYTE(v99) = 7;
          sub_2539ECDD0();
          sub_253A3B914();
          sub_2539ED244();
          sub_253A3EE84();
          sub_253B0A370();
          sub_253A3DA38();
          sub_2534659CC();
          v80(v79);
          swift_unknownObjectRelease();
          sub_2534B3470();
          v82(v81);
          uint64_t v34 = v93;
          *(void *)uint64_t v93 = v99;
          *(unsigned char *)(v93 + 8) = v100;
          goto LABEL_15;
        default:
          sub_2539ED1AC();
          sub_253A3B914();
          sub_2539ED40C();
          sub_253A3BD64();
          sub_253A3DA38();
          sub_2534659CC();
          v43(v42);
          swift_unknownObjectRelease();
          sub_2534B3470();
          v45(v44);
          sub_253A3E648();
          uint64_t v34 = v2;
          *(void *)uint64_t v2 = v46;
          *(void *)(v2 + 8) = v47;
          *(unsigned char *)(v2 + 16) = v48;
          *(unsigned char *)(v2 + 17) = v101;
LABEL_15:
          swift_storeEnumTagMultiPayload();
          sub_253A3F3BC(v34);
LABEL_16:
          uint64_t v83 = sub_253579264();
          sub_2539DF5B8(v83, v84);
          break;
      }
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      sub_253462A5C(&qword_269CDB688);
      sub_253A3E02C();
      sub_253B0A2D0();
      sub_2534F8464();
      sub_25347B88C();
      uint64_t v49 = sub_2534F859C();
      v50(v49);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v1, v96);
    }
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v98);
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539AC7C0()
{
}

void sub_2539AC7D8()
{
}

uint64_t RequestPrescribedPlan.SearchTool.query.getter()
{
  return sub_2534ACF74();
}

uint64_t RequestPrescribedPlan.SearchTool.query.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*RequestPrescribedPlan.SearchTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.SearchTool.isLowConfidenceKnowledge.modify())()
{
  return nullsub_1;
}

uint64_t RequestPrescribedPlan.SearchTool.shouldOpenResultIfApplicable.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t RequestPrescribedPlan.SearchTool.shouldOpenResultIfApplicable.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*RequestPrescribedPlan.SearchTool.shouldOpenResultIfApplicable.modify())()
{
  return nullsub_1;
}

IntelligenceFlowPlannerSupport::RequestPrescribedPlan::SearchTool __swiftcall RequestPrescribedPlan.SearchTool.init(query:isLowConfidenceKnowledge:shouldOpenResultIfApplicable:)(Swift::String query, Swift::Bool isLowConfidenceKnowledge, Swift::Bool shouldOpenResultIfApplicable)
{
  *(Swift::String *)uint64_t v3 = query;
  *(unsigned char *)(v3 + 16) = isLowConfidenceKnowledge;
  *(unsigned char *)(v3 + 17) = shouldOpenResultIfApplicable;
  result.query = query;
  result.isLowConfidenceKnowledge = isLowConfidenceKnowledge;
  return result;
}

uint64_t sub_2539AC8CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B0C4F0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000253B0C510)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539ACA10(char a1)
{
  if (!a1) {
    return 0x7972657571;
  }
  if (a1 == 1) {
    return 0xD000000000000018;
  }
  return 0xD00000000000001CLL;
}

uint64_t sub_2539ACA68()
{
  return sub_2539ACA10(*v0);
}

uint64_t sub_2539ACA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AC8CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539ACA98(uint64_t a1)
{
  unint64_t v2 = sub_2539ED458();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539ACAD4(uint64_t a1)
{
  unint64_t v2 = sub_2539ED458();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.SearchTool.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE62B8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3DCE0();
  sub_25397F800(v2);
  sub_2539ED458();
  sub_253B0A680();
  sub_253A3EE78();
  sub_253A3EF18();
  sub_253B0A3F0();
  if (!v0)
  {
    sub_253A3EEF0();
    sub_253A3CEB0();
    sub_253A3CEB0();
  }
  sub_2534B3470();
  v4();
  sub_253578DEC();
  sub_2534847C8();
}

void RequestPrescribedPlan.SearchTool.init(from:)()
{
  sub_2534847F8();
  sub_253A3DFDC();
  sub_253462A5C(&qword_269CE62C8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534F83CC();
  sub_2539ED458();
  sub_2534F8738();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_253A3C110();
    sub_253A3C284();
    char v8 = sub_2534F87CC();
    sub_253A3D2C4();
    char v6 = sub_2534F87CC();
    sub_253477128();
    v7();
    *(void *)uint64_t v2 = v4;
    *(void *)(v2 + 8) = v3;
    *(unsigned char *)(v2 + 16) = v8 & 1;
    *(unsigned char *)(v2 + 17) = v6 & 1;
    sub_253A3D940();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539ACDA0()
{
}

void sub_2539ACDB8()
{
}

uint64_t (*RequestPrescribedPlan.LowConfidenceKnowledgeTool.query.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539ACDF4(uint64_t a1)
{
  unint64_t v2 = sub_2539ED4A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539ACE30(uint64_t a1)
{
  unint64_t v2 = sub_2539ED4A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.LowConfidenceKnowledgeTool.encode(to:)()
{
}

void RequestPrescribedPlan.LowConfidenceKnowledgeTool.init(from:)()
{
}

void sub_2539ACEF8()
{
}

void sub_2539ACF10()
{
}

uint64_t (*RequestPrescribedPlan.GenerateRichContentTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.GenerateRichContentTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539ACF70(uint64_t a1)
{
  unint64_t v2 = sub_2539ED4F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539ACFAC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED4F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.GenerateRichContentTool.encode(to:)()
{
}

void RequestPrescribedPlan.GenerateRichContentTool.init(from:)()
{
}

void sub_2539AD060()
{
}

void sub_2539AD078()
{
}

uint64_t (*RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AD0D8(uint64_t a1)
{
  unint64_t v2 = sub_2539ED53C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD114(uint64_t a1)
{
  unint64_t v2 = sub_2539ED53C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.encode(to:)()
{
}

void RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.init(from:)()
{
}

void sub_2539AD1C8()
{
}

void sub_2539AD1E0()
{
}

uint64_t (*RequestPrescribedPlan.GenerateImageIntentTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.GenerateImageIntentTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO8TextToolV2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  uint64_t v1 = sub_253A3E3E8(a1);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  int v6 = *(unsigned __int8 *)(v3 + 16);
  if (v1 == *(void *)v3 && v2 == *(void *)(v3 + 8)) {
    return v5 ^ v6 ^ 1u;
  }
  sub_253B0A4C0();
  uint64_t result = sub_25397F648();
  if (v9) {
    return v5 ^ v6 ^ 1u;
  }
  return result;
}

uint64_t sub_2539AD28C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED588();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD2C8(uint64_t a1)
{
  unint64_t v2 = sub_2539ED588();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.GenerateImageIntentTool.encode(to:)()
{
}

void RequestPrescribedPlan.GenerateImageIntentTool.init(from:)()
{
}

void sub_2539AD37C()
{
}

void sub_2539AD394()
{
}

uint64_t (*RequestPrescribedPlan.TextTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.TextTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AD3EC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED5D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD428(uint64_t a1)
{
  unint64_t v2 = sub_2539ED5D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.TextTool.encode(to:)()
{
}

void RequestPrescribedPlan.TextTool.init(from:)()
{
}

void sub_2539AD4DC()
{
}

void sub_2539AD4F4()
{
}

uint64_t RequestPrescribedPlan.ConvertTool.query.getter()
{
  return sub_2534ACF74();
}

uint64_t RequestPrescribedPlan.ConvertTool.query.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*RequestPrescribedPlan.ConvertTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.ConvertTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AD5A4(char a1)
{
  if (a1) {
    return 0x63696C7078457369;
  }
  else {
    return 0x7972657571;
  }
}

uint64_t sub_2539AD5DC()
{
  return sub_2539AD5A4(*v0);
}

uint64_t sub_2539AD5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AD8CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539AD60C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED620();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD648(uint64_t a1)
{
  unint64_t v2 = sub_2539ED620();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.ConvertTool.encode(to:)()
{
}

void RequestPrescribedPlan.ConvertTool.init(from:)()
{
}

void sub_2539AD6FC()
{
}

void sub_2539AD714()
{
}

uint64_t (*RequestPrescribedPlan.DisplayTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.DisplayTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AD76C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED66C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD7A8(uint64_t a1)
{
  unint64_t v2 = sub_2539ED66C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.DisplayTool.encode(to:)()
{
}

void RequestPrescribedPlan.DisplayTool.init(from:)()
{
}

void sub_2539AD85C()
{
}

void sub_2539AD874()
{
}

uint64_t (*RequestPrescribedPlan.KnowledgeTool.query.modify())()
{
  return nullsub_1;
}

uint64_t (*RequestPrescribedPlan.KnowledgeTool.isExplicit.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AD8CC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v4 || (sub_2534DA0C4(), (sub_25351C8D0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 0x63696C7078457369 && v2 == 0xEA00000000007469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_25351C8D0();
    sub_2534F8940();
    if (v3) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539AD9A4(uint64_t a1)
{
  unint64_t v2 = sub_2539ED6B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AD9E0(uint64_t a1)
{
  unint64_t v2 = sub_2539ED6B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.KnowledgeTool.encode(to:)()
{
}

void sub_2539ADA58()
{
  sub_2534847F8();
  char v8 = v1;
  uint64_t v3 = v2;
  sub_253462A5C(v4);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  int v6 = sub_253A3B978(v3);
  v8(v6);
  sub_253A3F708();
  sub_253B0A680();
  sub_253A3EE78();
  sub_253B0A3F0();
  if (!v0)
  {
    sub_253A3EEF0();
    sub_253A3CEB0();
  }
  sub_2534D9A08();
  v7();
  sub_253578DEC();
  sub_2534847C8();
}

void RequestPrescribedPlan.KnowledgeTool.init(from:)()
{
}

void sub_2539ADB94()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  BOOL v4 = v3;
  uint64_t v12 = v5;
  sub_253462A5C(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_25346CC6C();
  uint64_t v8 = v4[3];
  char v9 = sub_253A3BEA4(v4);
  v2(v9);
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  }
  else
  {
    sub_253A3C110();
    sub_253A3C284();
    char v10 = sub_2534F87CC();
    sub_2534D9A08();
    v11();
    *(void *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 16) = v10 & 1;
    sub_253A3D940();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539ADCDC()
{
}

void sub_2539ADCF4()
{
}

uint64_t RequestPrescribedPlan.OpenTool.resultStatementId.getter()
{
  return sub_2539DE358();
}

uint64_t RequestPrescribedPlan.OpenTool.resultStatementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*RequestPrescribedPlan.OpenTool.resultStatementId.modify())()
{
  return nullsub_1;
}

uint64_t RequestPrescribedPlan.OpenTool.elementAtIndex.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20));
}

void RequestPrescribedPlan.OpenTool.elementAtIndex.setter()
{
  uint64_t v0 = sub_2534D976C();
  uint64_t v1 = type metadata accessor for RequestPrescribedPlan.OpenTool(v0);
  sub_2535E28C4(*(int *)(v1 + 20));
}

uint64_t (*RequestPrescribedPlan.OpenTool.elementAtIndex.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for RequestPrescribedPlan.OpenTool(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t sub_2539ADE00(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000253B111C0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x41746E656D656C65 && a2 == 0xEE007865646E4974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539ADF10(char a1)
{
  if (a1) {
    return 0x41746E656D656C65;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_2539ADF58()
{
  return sub_2539ADF10(*v0);
}

uint64_t sub_2539ADF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539ADE00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539ADF88(uint64_t a1)
{
  unint64_t v2 = sub_2539ED704();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539ADFC4(uint64_t a1)
{
  unint64_t v2 = sub_2539ED704();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.OpenTool.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6390);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539ED704();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for RequestPrescribedPlan.OpenTool(0);
    sub_253B0A3D0();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void RequestPrescribedPlan.OpenTool.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v17 = v4;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CE63A0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25349888C();
  uint64_t v8 = type metadata accessor for RequestPrescribedPlan.OpenTool(v7);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_25346CC6C();
  uint64_t v11 = v1 + *(int *)(v10 + 28);
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  sub_253A3BCFC(v3);
  sub_2539ED704();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253B0A370();
    sub_25347FA84();
    v12();
    sub_253A3CA94();
    uint64_t v13 = sub_253B0A300();
    char v15 = v14;
    sub_2534659CC();
    v16();
    *(void *)uint64_t v11 = v13;
    *(unsigned char *)(v11 + 8) = v15 & 1;
    sub_2539DF660(v1, v17);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539AE3DC()
{
}

void sub_2539AE3F4()
{
}

uint64_t RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.elementAtIndex.getter()
{
  return *(void *)v0;
}

uint64_t RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.elementAtIndex.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.elementAtIndex.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539AE44C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x41746E656D656C65 && a2 == 0xEE007865646E4974)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539AE4F8()
{
  return 0x41746E656D656C65;
}

uint64_t sub_2539AE520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AE44C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539AE54C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED750();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AE588(uint64_t a1)
{
  unint64_t v2 = sub_2539ED750();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.encode(to:)()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CE63A8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534847E0();
  sub_253A3BEA4(v1);
  sub_2539ED750();
  sub_253A3D530();
  sub_253B0A680();
  sub_253B0A3D0();
  sub_2534D9A44();
  sub_2534DA4BC();
  v3();
  sub_2536D3D5C();
  sub_2534847C8();
}

void RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE63B8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534F83CC();
  sub_2539ED750();
  sub_2534994B4();
  if (!v1)
  {
    sub_253A3E8CC();
    uint64_t v4 = sub_253B0A300();
    char v6 = v5;
    sub_2534D9A08();
    v7();
    *(void *)uint64_t v2 = v4;
    *(unsigned char *)(v2 + 8) = v6 & 1;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539AE7A0()
{
}

void sub_2539AE7B8()
{
}

uint64_t ProgramStatement.id.getter()
{
  return sub_2539DE358();
}

uint64_t ProgramStatement.id.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ProgramStatement.id.modify())()
{
  return nullsub_1;
}

uint64_t ProgramStatement.expression.getter()
{
  return sub_2539BF17C();
}

uint64_t ProgramStatement.expression.setter()
{
  return sub_2539BF1EC();
}

uint64_t (*ProgramStatement.expression.modify())()
{
  return nullsub_1;
}

uint64_t ProgramStatement.isRoot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ProgramStatement(0) + 24));
}

uint64_t ProgramStatement.isRoot.setter(char a1)
{
  uint64_t result = type metadata accessor for ProgramStatement(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*ProgramStatement.isRoot.modify())()
{
  return nullsub_1;
}

uint64_t ProgramStatement.targetType.getter()
{
  return sub_2539A15D0();
}

uint64_t ProgramStatement.targetType.setter(uint64_t a1)
{
  return sub_2539A1628(a1, (uint64_t)type metadata accessor for ProgramStatement, &qword_269CDCB30);
}

uint64_t (*ProgramStatement.targetType.modify())()
{
  return nullsub_1;
}

void ProgramStatement.init(id:expression:targetType:)()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_253462A5C(&qword_269CDCB30);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CAC();
  sub_253B059D0();
  sub_253486600();
  sub_2535787F4();
  sub_2534AF234();
  v9();
  uint64_t v10 = (int *)type metadata accessor for ProgramStatement(0);
  sub_2539DF660(v4, v6 + v10[5]);
  sub_253961F60(v2, v0, &qword_269CDCB30);
  uint64_t v11 = v10[6];
  uint64_t v12 = v6 + v10[7];
  uint64_t v13 = sub_253B09150();
  sub_25346CC08(v12, v14, v15, v13);
  *(unsigned char *)(v6 + v11) = 0;
  sub_2539F0BE0(v0, v12, &qword_269CDCB30);
  sub_253472458(v2, &qword_269CDCB30);
  sub_2539DF610();
  sub_2534D97B4();
  v16();
  sub_253465A14();
}

void static ProgramStatement.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  sub_2534DA6BC();
  sub_253B09150();
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_25348366C();
  sub_253462A5C(&qword_269CDCB38);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2534835B0();
  uint64_t v8 = sub_253462A5C(&qword_269CDCB30);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v10);
  sub_25351C770();
  MEMORY[0x270FA5388](v11);
  sub_253A3BB6C();
  if (_s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0())
  {
    uint64_t v12 = sub_253A3DBFC();
    uint64_t v13 = type metadata accessor for ProgramStatement(v12);
    uint64_t v14 = sub_253A3CB08(v13);
    if (static Expression.== infix(_:_:)(v14, (uint64_t *)(v3 + v15)))
    {
      uint64_t v16 = *(int *)(v5 + 24);
      int v17 = *(unsigned __int8 *)(v1 + v16);
      int v18 = *(unsigned __int8 *)(v3 + v16);
      if (v17 == 2)
      {
        if (v18 != 2) {
          goto LABEL_17;
        }
      }
      else
      {
        BOOL v19 = (v17 & 1) == 0;
        if (v18 == 2 || ((v19 ^ v18) & 1) == 0) {
          goto LABEL_17;
        }
      }
      sub_253A3DE00(v1 + *(int *)(v5 + 28));
      sub_253A3C488(*(int *)(v5 + 28));
      sub_253A3BACC();
      sub_253A3C4A4();
      uint64_t v20 = sub_2534F88B8(v0);
      if (!v22)
      {
        sub_253A3DF48(v20, v21, &qword_269CDCB30);
        sub_2534F88B8(v3);
        if (!v22)
        {
          sub_25347FA84();
          v25();
          sub_2539E6F90((uint64_t)&unk_269CDCB40);
          sub_2536D53CC();
          uint64_t v26 = *(void (**)(void))(v27 + 8);
          sub_2534D97B4();
          v26();
          sub_253A3BC88();
          sub_253A3BCE4();
          sub_2534D97B4();
          v26();
          sub_253A3CE14();
          goto LABEL_17;
        }
        sub_253A3BC88();
        sub_253A3BCE4();
        uint64_t v23 = sub_253A3BAB4();
        v24(v23);
LABEL_16:
        sub_253472458(v0, &qword_269CDCB38);
        goto LABEL_17;
      }
      sub_253A3BC88();
      sub_253A3BCE4();
      sub_2534F88B8(v3);
      if (!v22) {
        goto LABEL_16;
      }
      sub_253472458(v0, &qword_269CDCB30);
    }
  }
LABEL_17:
  sub_253465A14();
}

uint64_t sub_2539AEDE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6973736572707865 && a2 == 0xEA00000000006E6FLL;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x746F6F527369 && a2 == 0xE600000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x7954746567726174 && a2 == 0xEA00000000006570)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539AEF80(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6973736572707865;
      break;
    case 2:
      uint64_t result = 0x746F6F527369;
      break;
    case 3:
      uint64_t result = 0x7954746567726174;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539AF010()
{
  return sub_2539AEF80(*v0);
}

uint64_t sub_2539AF018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AEDE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539AF040(uint64_t a1)
{
  unint64_t v2 = sub_2539ED79C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AF07C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED79C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ProgramStatement.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE63C0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539ED79C();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ProgramStatement(0);
    uint64_t v2 = sub_253A3B8BC();
    type metadata accessor for Expression(v2);
    sub_2539E6F90((uint64_t)&unk_269CE63D0);
    sub_2534F84DC();
    sub_253B0A3C0();
    sub_253A3E070();
    sub_253B09150();
    sub_2539E6F90((uint64_t)&unk_269CE63D8);
    sub_253A3D2D4();
    sub_253A3BCCC();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void ProgramStatement.init(from:)()
{
  sub_2534847F8();
  sub_253A3E9D8();
  uint64_t v32 = v3;
  uint64_t v4 = sub_253462A5C(&qword_269CDCB30);
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v33 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_253483660();
  uint64_t v37 = type metadata accessor for Expression(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_253547148(v9, v31[0]);
  uint64_t v39 = sub_253B059D0();
  sub_253465998();
  uint64_t v35 = v10;
  MEMORY[0x270FA5388](v11);
  sub_2534B33C8(v12, v31[0]);
  uint64_t v40 = sub_253462A5C(&qword_269CE63E0);
  sub_253465998();
  uint64_t v34 = v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = sub_25348360C();
  uint64_t v16 = type metadata accessor for ProgramStatement(v15);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v17);
  sub_2534B3294();
  uint64_t v19 = *(int *)(v18 + 24);
  *(unsigned char *)(v0 + v19) = 2;
  uint64_t v20 = v0 + *(int *)(v18 + 28);
  uint64_t v21 = sub_253B09150();
  uint64_t v41 = v20;
  uint64_t v22 = sub_253A3F684();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v22, v23, v24, v25);
  sub_253A3B978(v2);
  sub_2539ED79C();
  uint64_t v38 = v1;
  uint64_t v26 = v42;
  sub_253B0A660();
  if (v26)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_253472458(v41, &qword_269CDCB30);
  }
  else
  {
    v31[0] = v19;
    v31[1] = v21;
    uint64_t v27 = v36;
    uint64_t v42 = v16;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3C6B8();
    sub_253B0A370();
    sub_253A3DB68();
    sub_25347FA84();
    v28();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE63E8);
    sub_253B0A370();
    sub_2539DF5B8(v27, v0 + *(int *)(v42 + 20));
    sub_253A3D2C4();
    *(unsigned char *)(v0 + v31[0]) = sub_253B0A2F0();
    sub_2539E6F90((uint64_t)&unk_269CE63F0);
    uint64_t v29 = (uint64_t)v33;
    sub_253B0A310();
    sub_2534D97B4();
    v30();
    sub_2539F0BE0(v29, v41, &qword_269CDCB30);
    sub_2539DF660(v0, v32);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_253A3C6AC();
  sub_2534847C8();
}

void sub_2539AF750()
{
}

void sub_2539AF768()
{
}

uint64_t ProgramStatement.hash(into:)()
{
  sub_253B059D0();
  sub_2539E6F90((uint64_t)&qword_269CDBEB0);
  sub_2534D970C();
  return sub_253B095D0();
}

uint64_t ProgramStatement.hashValue.getter()
{
  return sub_253B0A630();
}

uint64_t sub_2539AF88C()
{
  return sub_253B0A630();
}

uint64_t SpeechQuery.candidates.setter()
{
  uint64_t result = sub_253A3F774();
  void *v1 = v0;
  return result;
}

uint64_t (*SpeechQuery.candidates.modify())()
{
  return nullsub_1;
}

uint64_t SpeechQuery.safetyMode.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t SpeechQuery.safetyMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*SpeechQuery.safetyMode.modify())()
{
  return nullsub_1;
}

uint64_t SpeechQuery.clientQueryId.getter()
{
  return sub_2534ACF74();
}

uint64_t (*SpeechQuery.clientQueryId.modify())()
{
  return nullsub_1;
}

IntelligenceFlowPlannerSupport::SpeechQuery __swiftcall SpeechQuery.init(candidates:safetyMode:clientQueryId:)(Swift::OpaquePointer candidates, Swift::Bool safetyMode, Swift::String_optional clientQueryId)
{
  *(Swift::OpaquePointer *)uint64_t v3 = candidates;
  *(unsigned char *)(v3 + 8) = safetyMode;
  *(Swift::String_optional *)(v3 + 16) = clientQueryId;
  result.clientQueryId = clientQueryId;
  result.candidates = candidates;
  result.safetyMode = safetyMode;
  return result;
}

IntelligenceFlowPlannerSupport::SpeechQuery __swiftcall SpeechQuery.init(candidates:safetyMode:)(IntelligenceFlowPlannerSupport::SpeechQuery candidates, Swift::Bool safetyMode)
{
  *(void *)uint64_t v2 = candidates.candidates._rawValue;
  *(unsigned char *)(v2 + 8) = safetyMode;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  candidates.safetyMode = safetyMode;
  return candidates;
}

uint64_t sub_2539AF9F0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365;
  if (v3 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6F4D797465666173 && a2 == 0xEA00000000006564;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x7551746E65696C63 && a2 == 0xED00006449797265)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539AFB74(char a1)
{
  if (!a1) {
    return 0x74616469646E6163;
  }
  if (a1 == 1) {
    return 0x6F4D797465666173;
  }
  return 0x7551746E65696C63;
}

uint64_t sub_2539AFBDC()
{
  return sub_2539AFB74(*v0);
}

uint64_t sub_2539AFBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539AF9F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539AFC0C(uint64_t a1)
{
  unint64_t v2 = sub_2539ED7E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539AFC48(uint64_t a1)
{
  unint64_t v2 = sub_2539ED7E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SpeechQuery.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE63F8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_2534F8630(v2);
  sub_2539ED7E8();
  sub_253B0A680();
  sub_253462A5C(&qword_269CE5F30);
  sub_2539EC5B4();
  sub_253B0A440();
  if (!v0)
  {
    sub_253A3EEBC();
    sub_253A3EDD0();
    sub_253B0A400();
    sub_253578E40();
    sub_253A3E248();
  }
  sub_2534D91A0();
  v4();
  sub_2534F8590();
  sub_2534847C8();
}

void SpeechQuery.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  sub_253A3C3A8();
  sub_253462A5C(&qword_269CE6408);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534F83CC();
  sub_2539ED7E8();
  sub_2534F8738();
  if (v11)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v10);
  }
  else
  {
    sub_253462A5C(&qword_269CE5F30);
    sub_2539EC658();
    sub_253A3C6C4();
    sub_253B0A370();
    sub_253A3EEBC();
    swift_bridgeObjectRetain();
    char v14 = sub_253B0A330();
    uint64_t v15 = sub_253A3CCFC();
    uint64_t v17 = v16;
    char v20 = v14 & 1;
    uint64_t v18 = v15;
    sub_2534D9A08();
    v19();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v12 = a10;
    *(unsigned char *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v18;
    *(void *)(v12 + 24) = v17;
    sub_253A3C00C();
  }
  swift_bridgeObjectRelease();
  sub_253579494();
  sub_2534847C8();
}

void sub_2539AFF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  SpeechQuery.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539AFFB4()
{
}

uint64_t (*TextQuery.query.modify())()
{
  return nullsub_1;
}

uint64_t (*TextQuery.safetyMode.modify())()
{
  return nullsub_1;
}

uint64_t TextQuery.statementId.getter()
{
  return sub_2539C2A40();
}

uint64_t TextQuery.statementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for TextQuery, MEMORY[0x263F4BF98]);
}

uint64_t (*TextQuery.statementId.modify())()
{
  return nullsub_1;
}

uint64_t TextQuery.clientQueryId.getter()
{
  return sub_2539B00CC();
}

uint64_t sub_2539B00CC()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  sub_2535E2488();
  return sub_2534ACF74();
}

uint64_t TextQuery.clientQueryId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B5410(a1, a2);
}

uint64_t (*TextQuery.clientQueryId.modify())()
{
  return nullsub_1;
}

void TextQuery.init(query:safetyMode:statementId:clientQueryId:)()
{
  sub_2535B3C98();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = (void *)(v10 + *(int *)(type metadata accessor for TextQuery(0) + 28));
  *(void *)uint64_t v11 = v9;
  *(void *)(v11 + 8) = v7;
  *(unsigned char *)(v11 + 16) = v5;
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v13();
  *uint64_t v12 = v3;
  v12[1] = v1;
  sub_25346CD04();
}

uint64_t TextQuery.init(query:safetyMode:statementId:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = sub_2539444B8();
  uint64_t v8 = (void *)(v5 + *(int *)(type metadata accessor for TextQuery(v7) + 28));
  *(void *)uint64_t v5 = v4;
  *(void *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 16) = a3;
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  uint64_t result = v9();
  *uint64_t v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t TextQuery.init(query:safetyMode:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = sub_2539447CC();
  uint64_t v8 = (void *)(v5 + *(int *)(type metadata accessor for TextQuery(v7) + 28));
  *(void *)uint64_t v5 = v4;
  *(void *)(v5 + 8) = v3;
  *(unsigned char *)(v5 + 16) = a3;
  uint64_t result = sub_253A3D844();
  *uint64_t v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_2539B02D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6F4D797465666173 && a2 == 0xEA00000000006564;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x7551746E65696C63 && a2 == 0xED00006449797265)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539B04C8(char a1)
{
  uint64_t result = 0x7972657571;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6F4D797465666173;
      break;
    case 2:
      uint64_t result = 0x6E656D6574617473;
      break;
    case 3:
      uint64_t result = 0x7551746E65696C63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539B0570()
{
  return sub_2539B04C8(*v0);
}

uint64_t sub_2539B0578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B02D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B05A0(uint64_t a1)
{
  unint64_t v2 = sub_2539ED834();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B05DC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED834();
  return MEMORY[0x270FA00B8](a1, v2);
}

void TextQuery.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6410);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539ED834();
  sub_2534DA3BC();
  sub_253A3BF94();
  if (!v0)
  {
    sub_2534F89B4();
    sub_253B0A400();
    type metadata accessor for TextQuery(0);
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
    sub_253A3C964();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void TextQuery.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v23 = v4;
  sub_253B059D0();
  sub_253465998();
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v26 = sub_253462A5C(&qword_269CE6420);
  sub_253465998();
  uint64_t v24 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534D9B74();
  type metadata accessor for TextQuery(v9);
  sub_25346CAF4();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = &v13[*(int *)(v11 + 28)];
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v27 = v3;
  uint64_t v28 = v14;
  sub_253A3BCFC(v3);
  sub_2539ED834();
  sub_253A3E264();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_253A3EE54();
    sub_253A3EAD8();
    *(void *)uint64_t v13 = sub_253B0A320();
    *((void *)v13 + 1) = v15;
    sub_253A3CA94();
    sub_253A3EAD8();
    v13[16] = sub_253B0A330() & 1;
    sub_253A3C6A0();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE28();
    v22[1] = v0;
    sub_253B0A370();
    sub_253A3CF28();
    sub_25347FA84();
    v16();
    sub_253A3C954();
    sub_253A3EAD8();
    uint64_t v17 = sub_253B0A2E0();
    uint64_t v19 = v18;
    sub_2534D91AC();
    v20();
    uint64_t v21 = (uint64_t *)v28;
    swift_bridgeObjectRelease();
    *uint64_t v21 = v17;
    v21[1] = v19;
    sub_2539DF660((uint64_t)v13, v23);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v27);
    sub_2539DF610();
  }
  sub_253578DEC();
  sub_2534847C8();
}

void sub_2539B0AC8()
{
}

void sub_2539B0AE0()
{
}

uint64_t (*ExecutionStepResults.results.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539B0B1C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539B0BA4()
{
  return 0x73746C75736572;
}

uint64_t sub_2539B0BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B0B1C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539B0BEC(uint64_t a1)
{
  unint64_t v2 = sub_2539ED880();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B0C28(uint64_t a1)
{
  unint64_t v2 = sub_2539ED880();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExecutionStepResults.encode(to:)()
{
  sub_2534847F8();
  sub_253A3D9E4();
  sub_253462A5C(&qword_269CE6428);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534F8328(v0);
  sub_2539ED880();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CE6438);
  sub_2539ED8CC();
  sub_253A3BA74();
  sub_2534F8390();
  v2();
  sub_2534F8A10();
  sub_2534847C8();
}

void ExecutionStepResults.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE6450);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539ED880();
  sub_2534994B4();
  if (!v1)
  {
    sub_253462A5C(&qword_269CE6438);
    sub_2539ED990();
    sub_2534F8410();
    sub_2534D9A08();
    v3();
    sub_253A3D888();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539B0E2C()
{
}

void sub_2539B0E44()
{
}

void static ToolParameterValue.== infix(_:_:)()
{
  sub_2534B3258();
  sub_2534DA6BC();
  uint64_t v4 = sub_253B09120();
  sub_253465998();
  uint64_t v21 = v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25346CBDC();
  type metadata accessor for ToolParameterValue(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v9);
  sub_2534D97C0();
  uint64_t v10 = sub_253462A5C(&qword_269CDCB10);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  sub_2535E2544();
  uint64_t v13 = (void *)(v0 + v12);
  sub_2539DF660(v2, v0);
  uint64_t v14 = sub_2534D954C();
  sub_2539DF660(v14, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_2539DF660(v0, v1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_253A3F110();
      sub_25347FA84();
      v16();
      sub_2534D973C();
      sub_253B090F0();
      uint64_t v17 = *(void (**)(void))(v21 + 8);
      sub_2534DA5AC();
      sub_2534F85D4();
      v17();
      sub_2534F85D4();
      v17();
      sub_2539DF610();
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v1, v4);
LABEL_7:
    sub_253472458(v0, &qword_269CDCB10);
    goto LABEL_15;
  }
  sub_253A3EB44();
  uint64_t v19 = *v3;
  uint64_t v18 = v3[1];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (v19 == *v13 && v18 == v13[1])
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_2534DA5AC();
    sub_253A3E160();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_2539DF610();
LABEL_15:
  sub_253465A14();
}

uint64_t sub_2539B1120(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x636E657265666572 && a2 == 0xE900000000000065;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539B1214(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x636E657265666572;
  }
}

uint64_t sub_2539B124C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656C626169726176 && a2 == 0xEC000000656D614ELL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539B12EC()
{
  return 0x656C626169726176;
}

uint64_t sub_2539B130C()
{
  return sub_2539B1214(*v0);
}

uint64_t sub_2539B1314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B1120(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B133C(uint64_t a1)
{
  unint64_t v2 = sub_2539EDA54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B1378(uint64_t a1)
{
  unint64_t v2 = sub_2539EDA54();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B13B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B124C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539B13E4(uint64_t a1)
{
  unint64_t v2 = sub_2539EDAEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B1420(uint64_t a1)
{
  unint64_t v2 = sub_2539EDAEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B145C(uint64_t a1)
{
  unint64_t v2 = sub_2539EDAA0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B1498(uint64_t a1)
{
  unint64_t v2 = sub_2539EDAA0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolParameterValue.encode(to:)()
{
  sub_2534847F8();
  sub_253462A5C(&qword_269CE6468);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_253547148(v3, v16);
  sub_253B09120();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253483644(v5, v17);
  sub_253462A5C(&qword_269CE6470);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25397F55C();
  type metadata accessor for ToolParameterValue(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534B3294();
  sub_253462A5C(&qword_269CE6478);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_2534B34A4();
  sub_25397F66C();
  sub_2539EDA54();
  sub_2534F82BC();
  sub_2539DF660(v0, v1);
  sub_253579334();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_253A3CF28();
    sub_253A3D030();
    sub_25347FA84();
    v10();
    sub_2539EDAA0();
    sub_253B0A3A0();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253B0A440();
    sub_2534659CC();
    v11();
    sub_253971C3C();
    sub_2534DA4BC();
    v12();
    uint64_t v13 = sub_2534F8958();
  }
  else
  {
    sub_2539EDAEC();
    sub_253B0A3A0();
    sub_25353CE60();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    sub_2534659CC();
    v15();
    uint64_t v13 = sub_253A3D524();
  }
  v14(v13);
  sub_2534F8A10();
  sub_2534847C8();
}

void ToolParameterValue.init(from:)()
{
  sub_2534847F8();
  sub_253A3E9D8();
  uint64_t v43 = v3;
  sub_253462A5C(&qword_269CE6498);
  sub_253465998();
  uint64_t v46 = v4;
  uint64_t v47 = v5;
  MEMORY[0x270FA5388](v4);
  sub_2534D92D4(v6, (uint64_t)v39);
  sub_253462A5C(&qword_269CE64A0);
  sub_253465998();
  uint64_t v44 = v8;
  uint64_t v45 = v7;
  MEMORY[0x270FA5388](v7);
  sub_2534D8F84(v9, (uint64_t)v39);
  sub_253462A5C(&qword_269CE64A8);
  sub_253465998();
  uint64_t v48 = v11;
  uint64_t v49 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = sub_2534D9C00();
  uint64_t v13 = type metadata accessor for ToolParameterValue(v12);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_2534B340C();
  MEMORY[0x270FA5388](v15);
  sub_25351C99C();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v39 - v17;
  unint64_t v19 = v2[3];
  sub_253A3BEA4(v2);
  sub_2539EDA54();
  char v20 = v50;
  sub_253B0A660();
  if (v20) {
    goto LABEL_8;
  }
  uint64_t v39 = v1;
  uint64_t v40 = v18;
  uint64_t v41 = v0;
  uint64_t v42 = v13;
  uint64_t v50 = v2;
  sub_253B0A390();
  sub_253A3EB04();
  if (!v21
    || (v51 = v18[32], uint64_t v22 = sub_253A3CD80(), sub_25347B78C(v22, v23, v24, v25, v26, v27), sub_253A3E190(), v19 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    sub_253462A5C(&qword_269CDB688);
    sub_253A3C930();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v29();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v30();
    uint64_t v2 = v50;
LABEL_8:
    uint64_t v31 = (uint64_t)v2;
    goto LABEL_9;
  }
  if (v51)
  {
    sub_2539EDAA0();
    sub_253A3E508();
    sub_253B09120();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    uint64_t v28 = v41;
    sub_253A3C5A8();
    sub_2534659CC();
    v32();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v33();
  }
  else
  {
    sub_2539EDAEC();
    sub_253A3E508();
    uint64_t v34 = sub_253B0A320();
    uint64_t v36 = v35;
    sub_2534659CC();
    v37();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v38();
    uint64_t v28 = v39;
    *uint64_t v39 = v34;
    v28[1] = v36;
  }
  swift_storeEnumTagMultiPayload();
  sub_2539DF5B8((uint64_t)v28, (uint64_t)v40);
  sub_253A3EB5C();
  uint64_t v31 = (uint64_t)v50;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v31);
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539B1C9C()
{
}

void sub_2539B1CB4()
{
}

uint64_t GlobalToolIdentifier.toolId.getter()
{
  return sub_2534ACF74();
}

uint64_t GlobalToolIdentifier.toolId.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*GlobalToolIdentifier.toolId.modify())()
{
  return nullsub_1;
}

uint64_t _s30IntelligenceFlowPlannerSupport11SpeechQueryV06clientF2IdSSSgvs_0()
{
  uint64_t result = sub_253A3EBA4();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*GlobalToolIdentifier.deviceIdsId.modify())()
{
  return nullsub_1;
}

uint64_t GlobalToolIdentifier.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_253A3F548();
  sub_253B09630();
  swift_bridgeObjectRelease();
  if (!v1) {
    return sub_253B0A610();
  }
  sub_253B0A610();
  swift_bridgeObjectRetain();
  sub_2534D973C();
  sub_253B09630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2539B1E3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449656369766564 && a2 == 0xEB00000000644973)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539B1F3C(char a1)
{
  if (a1) {
    return 0x6449656369766564;
  }
  else {
    return 0x64496C6F6F74;
  }
}

uint64_t sub_2539B1F78()
{
  return sub_2539B1F3C(*v0);
}

uint64_t sub_2539B1F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B1E3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B1FA8(uint64_t a1)
{
  unint64_t v2 = sub_2539EDB38();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B1FE4(uint64_t a1)
{
  unint64_t v2 = sub_2539EDB38();
  return MEMORY[0x270FA00B8](a1, v2);
}

void GlobalToolIdentifier.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE64B0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3DCC4();
  sub_25397F800(v2);
  sub_2539EDB38();
  sub_253A3F238();
  sub_253A3D2E8();
  if (!v0)
  {
    sub_253A3EEDC();
    sub_25397F738();
  }
  uint64_t v4 = sub_2534F82A4();
  v5(v4);
  sub_253578DEC();
  sub_2534847C8();
}

uint64_t GlobalToolIdentifier.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_2534D938C();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_253B09630();
    swift_bridgeObjectRelease();
  }
  return sub_253B0A630();
}

void GlobalToolIdentifier.init(from:)()
{
  sub_2534847F8();
  sub_253A3C3A8();
  sub_253462A5C(&qword_269CE64C0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534F83CC();
  sub_2539EDB38();
  sub_2534F8738();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_253A3E0E4();
    sub_253A3C284();
    uint64_t v6 = sub_253A3CCFC();
    uint64_t v8 = v7;
    uint64_t v10 = v6;
    sub_2534D9A08();
    v9();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *unint64_t v2 = v4;
    v2[1] = v3;
    v2[2] = v10;
    v2[3] = v8;
    sub_253A3C00C();
  }
  swift_bridgeObjectRelease();
  sub_253579494();
  sub_2534847C8();
}

void sub_2539B22E0()
{
}

void sub_2539B22F8()
{
}

uint64_t sub_2539B231C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_253B09630();
    swift_bridgeObjectRelease();
  }
  return sub_253B0A630();
}

uint64_t Action.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t Action.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*Action.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539B2414(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return Action.toolId.setter(v1, v2);
}

uint64_t Action.toolId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B246C(a1, a2);
}

uint64_t sub_2539B246C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  v6(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t Action.toolId.modify(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = type metadata accessor for Action(0);
  sub_253A3D594(*(int *)(v2 + 36));
  swift_bridgeObjectRetain();
  return sub_2534D9778();
}

uint64_t Action.bundleId.getter()
{
  return sub_2534ACF74();
}

uint64_t Action.bundleId.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Action(0);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Action.bundleId.modify())()
{
  return nullsub_1;
}

uint64_t Action.deviceId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Action(0) + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return result;
}

uint64_t Action.deviceId.modify(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Action(0) + 36);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)a1 = *(void *)(v4 + 16);
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRetain();
  return sub_2534D9778();
}

uint64_t sub_2539B2658()
{
  sub_253A3F004();
  if (v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v0;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v0;
  }
  return result;
}

uint64_t Action.isConfirmed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Action(0) + 24));
}

uint64_t Action.isConfirmed.setter(char a1)
{
  uint64_t result = type metadata accessor for Action(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Action.isConfirmed.modify())()
{
  return nullsub_1;
}

uint64_t Action.parameterValues.getter()
{
  return sub_2539CFF74();
}

uint64_t Action.parameterValues.setter()
{
  return sub_2539CFFC4();
}

uint64_t (*Action.parameterValues.modify())()
{
  return nullsub_1;
}

uint64_t Action.planEventId.getter()
{
  return sub_2539B54A4();
}

uint64_t Action.planEventId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B54F0(a1, a2);
}

uint64_t (*Action.planEventId.modify())()
{
  return nullsub_1;
}

uint64_t Action.tool.getter()
{
  uint64_t v0 = sub_2534F8A1C();
  uint64_t v1 = type metadata accessor for Action(v0);
  sub_253A3CD18(*(int *)(v1 + 36));
  return swift_bridgeObjectRetain();
}

double Action.tool.setter()
{
  uint64_t v0 = sub_253A3D8C8();
  type metadata accessor for Action(v0);
  sub_253A3E2A4();
  uint64_t v1 = swift_bridgeObjectRelease();
  *(void *)&double result = sub_253A3E354(v1, v2, v3, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t (*Action.tool.modify())()
{
  return nullsub_1;
}

uint64_t Action.parameters.getter()
{
  uint64_t v1 = type metadata accessor for Action(0);
  return sub_2539E9634(*(void *)(v0 + *(int *)(v1 + 28)));
}

uint64_t sub_2539B2934()
{
  return Action.parameters.setter();
}

uint64_t Action.parameters.setter()
{
  sub_2539E9988();
  sub_253466CA0();
  uint64_t v1 = *(int *)(type metadata accessor for Action(0) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + v1) = 0;
  return result;
}

uint64_t Action.ParameterValue.init(value:promptSelection:)()
{
  uint64_t v2 = sub_2535E24D4();
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Action.ParameterValue(v2) + 20);
  uint64_t v4 = sub_253B06770();
  sub_25346CC08(v3, v5, v6, v4);
  sub_2539DF5B8(v0, v1);
  uint64_t v7 = sub_2534D9AA0();
  return sub_2539F0BE0(v7, v8, v9);
}

void (*Action.parameters.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for Action(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = sub_2539E9634(*(void *)(v1 + v3));
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v4;
  return sub_2539B2AA0;
}

void sub_2539B2AA0()
{
  sub_253A3C038();
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(int *)(v1 + 24);
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_2539E9988();
    sub_2534F8940();
    swift_bridgeObjectRelease();
    *(void *)(v2 + v3) = v0;
    sub_253A3BEC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2539E9988();
    sub_2534F8940();
    swift_bridgeObjectRelease();
    *(void *)(v2 + v3) = v0;
    sub_253A3BEC0();
  }
}

__n128 Action.init(statementId:tool:bundleId:parameterValues:isConfirmed:planEventId:)()
{
  sub_253945274();
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  char v17 = v6;
  sub_253A3E218();
  long long v16 = *v7;
  uint64_t v9 = *((void *)v7 + 2);
  uint64_t v8 = *((void *)v7 + 3);
  uint64_t v10 = (int *)type metadata accessor for Action(0);
  uint64_t v11 = (void *)(v3 + v10[5]);
  uint64_t v12 = (void *)(v3 + v10[8]);
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v13();
  uint64_t v14 = v3 + v10[9];
  *(_OWORD *)uint64_t v14 = v16;
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v8;
  *uint64_t v11 = v2;
  v11[1] = v1;
  *(void *)(v3 + v10[7]) = v0;
  *(unsigned char *)(v3 + v10[6]) = v17;
  *uint64_t v12 = v18;
  v12[1] = v19;
  sub_2539451E0();
  return result;
}

void Action.init(statementId:toolId:bundleId:deviceId:parameterValues:isConfirmed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_25394599C();
  uint64_t v40 = v29;
  uint64_t v41 = v30;
  uint64_t v39 = v31;
  uint64_t v33 = v32;
  sub_253A3B8FC();
  uint64_t v34 = (int *)type metadata accessor for Action(0);
  uint64_t v35 = (void *)(v28 + v34[5]);
  uint64_t v36 = (void *)(v28 + v34[8]);
  sub_253B059D0();
  *uint64_t v36 = 0;
  v36[1] = 0;
  sub_25346CAF4();
  sub_2534D8E14();
  v37();
  uint64_t v38 = (void *)(v28 + v34[9]);
  *uint64_t v38 = v27;
  v38[1] = v26;
  v38[2] = v33;
  v38[3] = v39;
  *uint64_t v35 = v25;
  v35[1] = v40;
  *(void *)(v28 + v34[7]) = v41;
  *(unsigned char *)(v28 + v34[6]) = a25;
  sub_2535268E0();
}

void Action.init(statementId:toolId:bundleId:deviceId:parameterValues:isConfirmed:planEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  sub_253945274();
  uint64_t v45 = v35;
  uint64_t v46 = v36;
  uint64_t v44 = v37;
  uint64_t v39 = v38;
  sub_253A3B8FC();
  type metadata accessor for Action(0);
  sub_253A3EFB4();
  uint64_t v41 = (void *)(v33 + v40);
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v42();
  uint64_t v43 = (void *)(v33 + v34[9]);
  *uint64_t v43 = v32;
  v43[1] = v31;
  v43[2] = v39;
  v43[3] = v44;
  *uint64_t v29 = v30;
  v29[1] = v45;
  *(void *)(v33 + v34[7]) = v46;
  *(unsigned char *)(v33 + v34[6]) = a27;
  *uint64_t v41 = a28;
  v41[1] = a29;
  sub_2539451E0();
}

void Action.init(exprId:toolId:bundleId:deviceId:parameterValues:isConfirmed:clientQueryId:planEventId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_253945274();
  uint64_t v44 = v36;
  uint64_t v45 = v35;
  uint64_t v42 = v38;
  uint64_t v43 = v37;
  sub_253A3B8FC();
  swift_bridgeObjectRelease();
  type metadata accessor for Action(0);
  sub_253A3EFB4();
  uint64_t v40 = (void *)(v33 + v39);
  StatementID.init(fromExprId:)();
  sub_253A3EF78(v34[9]);
  *(void *)(v41 + 16) = v42;
  *(void *)(v41 + 24) = v44;
  *uint64_t v32 = v43;
  v32[1] = v45;
  *(void *)(v33 + v34[7]) = a27;
  *(unsigned char *)(v33 + v34[6]) = a28;
  void *v40 = a31;
  v40[1] = a32;
  sub_2539451E0();
}

void Action.init(exprId:toolId:bundleId:deviceId:parameterValues:isConfirmed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_25394599C();
  uint64_t v37 = v29;
  uint64_t v38 = v28;
  uint64_t v35 = v31;
  uint64_t v36 = v30;
  sub_253A3B8FC();
  uint64_t v32 = (int *)type metadata accessor for Action(0);
  uint64_t v33 = (void *)(v27 + v32[5]);
  sub_253A3E270();
  sub_253A3EF78(v32[9]);
  *(void *)(v34 + 16) = v35;
  *(void *)(v34 + 24) = v37;
  *uint64_t v33 = v36;
  v33[1] = v38;
  *(void *)(v27 + v32[7]) = a25;
  *(unsigned char *)(v27 + v32[6]) = a26;
  *uint64_t v26 = 0;
  v26[1] = 0;
  sub_2535268E0();
}

void Action.init(exprId:toolId:bundleId:deviceId:parameters:isConfirmed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_253945274();
  uint64_t v41 = v31;
  uint64_t v42 = v30;
  uint64_t v33 = v32;
  uint64_t v40 = v34;
  sub_253A3B8FC();
  uint64_t v35 = (int *)type metadata accessor for Action(0);
  uint64_t v36 = (void *)(v29 + v35[5]);
  sub_253A3E270();
  sub_253A3EF78(v35[9]);
  *(void *)(v37 + 16) = v33;
  *(void *)(v37 + 24) = v41;
  *uint64_t v36 = v40;
  v36[1] = v42;
  sub_2539E9988();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  *(void *)(v29 + v35[7]) = v39;
  *(unsigned char *)(v29 + v35[6]) = a28;
  *uint64_t v28 = 0;
  v28[1] = 0;
  sub_2539451E0();
}

void Action.init(id:variableName:variableDependencies:toolId:bundleId:deviceId:parameters:isConfirmed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_253945274();
  uint64_t v46 = v33;
  uint64_t v47 = v34;
  uint64_t v45 = v35;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = type metadata accessor for Action(0);
  sub_253A3CB18(v40);
  uint64_t v41 = (void *)(v39 + v32[9]);
  *uint64_t v41 = v37;
  v41[1] = v45;
  v41[2] = a27;
  v41[3] = a28;
  *uint64_t v30 = v46;
  v30[1] = v47;
  sub_2539E9988();
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534659CC();
  v44();
  *(void *)(v39 + v32[7]) = v43;
  *(unsigned char *)(v39 + v32[6]) = a30;
  swift_bridgeObjectRelease();
  *uint64_t v31 = 0;
  v31[1] = 0;
  sub_2539451E0();
}

void Action.init(id:variableName:variableDependencies:toolId:bundleId:deviceId:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_253945274();
  uint64_t v44 = v31;
  uint64_t v45 = v32;
  uint64_t v43 = v33;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for Action(0);
  sub_253A3CB18(v38);
  uint64_t v39 = (void *)(v37 + v30[9]);
  *uint64_t v39 = v35;
  v39[1] = v43;
  v39[2] = a27;
  v39[3] = a28;
  *uint64_t v28 = v44;
  v28[1] = v45;
  sub_2539E9988();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534659CC();
  v42();
  *(void *)(v37 + v30[7]) = v41;
  *(unsigned char *)(v37 + v30[6]) = 0;
  swift_bridgeObjectRelease();
  *uint64_t v29 = 0;
  v29[1] = 0;
  sub_2539451E0();
}

uint64_t (*Action.id.modify(uint64_t *a1))()
{
  uint64_t v2 = sub_253B055C0();
  *a1 = v2;
  sub_25346CB34(v2);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  return sub_2539B31B8;
}

uint64_t (*Action.variableName.modify())(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v1 = sub_253A3F78C();
  uint64_t v2 = sub_253A3F63C((uint64_t)v1);
  v0[3] = v2;
  sub_25346CB34(v2);
  v0[4] = v3;
  v0[5] = (uint64_t)malloc(*(void *)(v4 + 64));
  uint64_t *v0 = StatementID.asExprId.getter();
  v0[1] = v5;
  return sub_2539B3238;
}

uint64_t (*Action.variableDependencies.modify(uint64_t *a1))()
{
  *a1 = sub_253B095A0();
  return j__s30IntelligenceFlowPlannerSupport38QueryDecorationPrePlannerResultPayloadOwxx;
}

uint64_t Action.ParameterValue.value.getter()
{
  uint64_t v0 = sub_2535E27CC();
  return sub_2539DF660(v0, v1);
}

uint64_t Action.ParameterValue.value.setter(uint64_t a1)
{
  return sub_2539E7074(a1, v1);
}

uint64_t (*Action.ParameterValue.value.modify())()
{
  return nullsub_1;
}

uint64_t Action.ParameterValue.promptSelection.getter()
{
  return sub_2539A9600();
}

uint64_t Action.ParameterValue.promptSelection.setter()
{
  return sub_2539A9658();
}

uint64_t (*Action.ParameterValue.promptSelection.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for Action.ParameterValue(v0);
  sub_2534F87A4();
  return nullsub_1;
}

void static Action.ParameterValue.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  sub_2534DA6BC();
  sub_253B06770();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25348366C();
  sub_253462A5C(&qword_269CDCB08);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CDCB00);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v9);
  sub_25351C770();
  MEMORY[0x270FA5388](v10);
  sub_253A3BB6C();
  static ToolParameterValue.== infix(_:_:)();
  if (v11)
  {
    uint64_t v12 = sub_253A3DBFC();
    uint64_t v13 = type metadata accessor for Action.ParameterValue(v12);
    uint64_t v14 = sub_253A3CB08(v13);
    sub_253A3DE00(v14);
    sub_253A3C488(*(int *)(v4 + 20));
    sub_253A3BACC();
    sub_253A3C4A4();
    uint64_t v15 = sub_2534F88B8(v0);
    if (!v17)
    {
      sub_253A3DF48(v15, v16, &qword_269CDCB00);
      sub_2534F88B8(v2);
      if (!v17)
      {
        sub_25347FA84();
        v20();
        sub_2539E6F90((uint64_t)&unk_269CDCB28);
        sub_2536D53CC();
        uint64_t v21 = *(void (**)(void))(v22 + 8);
        sub_2534D97B4();
        v21();
        sub_253A3BC88();
        sub_253A3BCE4();
        sub_2534D97B4();
        v21();
        sub_253A3CE14();
        goto LABEL_11;
      }
      sub_253A3BC88();
      sub_253A3BCE4();
      uint64_t v18 = sub_253A3BAB4();
      v19(v18);
LABEL_10:
      sub_253472458(v0, &qword_269CDCB08);
      goto LABEL_11;
    }
    sub_253A3BC88();
    sub_253A3BCE4();
    sub_2534F88B8(v2);
    if (!v17) {
      goto LABEL_10;
    }
    sub_253472458(v0, &qword_269CDCB00);
  }
LABEL_11:
  sub_253465A14();
}

uint64_t sub_2539B360C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x655374706D6F7270 && a2 == 0xEF6E6F697463656CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539B3718(char a1)
{
  if (a1) {
    return 0x655374706D6F7270;
  }
  else {
    return 0x65756C6176;
  }
}

uint64_t sub_2539B3758()
{
  return sub_2539B3718(*v0);
}

uint64_t sub_2539B3760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B360C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B3788(uint64_t a1)
{
  unint64_t v2 = sub_2539EDB84();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B37C4(uint64_t a1)
{
  unint64_t v2 = sub_2539EDB84();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Action.ParameterValue.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE64C8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EDB84();
  sub_2534DA3BC();
  uint64_t v2 = sub_253A3DA44();
  type metadata accessor for ToolParameterValue(v2);
  sub_2539E6F90((uint64_t)&unk_269CE64D8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for Action.ParameterValue(0);
    sub_253A3B8BC();
    sub_253B06770();
    sub_2539E6F90((uint64_t)&unk_269CE64E0);
    sub_253A3BBB0();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void Action.ParameterValue.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  uint64_t v19 = v5;
  uint64_t v6 = sub_253462A5C(&qword_269CDCB00);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_2534AF2D8();
  type metadata accessor for ToolParameterValue(v8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  sub_2534AF2A0(v10, v19);
  sub_253462A5C(&qword_269CE64E8);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_2534D9B74();
  uint64_t v13 = type metadata accessor for Action.ParameterValue(v12);
  uint64_t v14 = sub_25346CB4C(v13);
  MEMORY[0x270FA5388](v14);
  sub_2534966B0();
  uint64_t v16 = v2 + *(int *)(v15 + 28);
  uint64_t v17 = sub_253B06770();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 1, 1, v17);
  sub_253A3BEA4(v4);
  sub_2539EDB84();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_253472458(v16, &qword_269CDCB00);
  }
  else
  {
    sub_2539E6F90((uint64_t)&unk_269CE64F0);
    sub_253A3C6B8();
    sub_253B0A370();
    sub_2539DF5B8(v21, v2);
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE64F8);
    sub_253A3E0CC();
    sub_253B0A310();
    sub_2534D91A0();
    v18();
    sub_2539F0BE0(v1, v16, &qword_269CDCB00);
    sub_2539DF660(v2, v20);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_2539DF610();
  }
  sub_2534847C8();
}

uint64_t sub_2539B3C74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7269666E6F437369 && a2 == 0xEB0000000064656DLL;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6574656D61726170 && a2 == 0xEF7365756C615672;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6E6576456E616C70 && a2 == 0xEB00000000644974;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 1819242356 && a2 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            char v11 = sub_253B0A4C0();
            swift_bridgeObjectRelease();
            if (v11) {
              return 5;
            }
            else {
              return 6;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2539B3F3C(char a1)
{
  uint64_t result = 0x6E656D6574617473;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6449656C646E7562;
      break;
    case 2:
      uint64_t result = 0x7269666E6F437369;
      break;
    case 3:
      uint64_t result = 0x6574656D61726170;
      break;
    case 4:
      uint64_t result = 0x6E6576456E616C70;
      break;
    case 5:
      uint64_t result = 1819242356;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2539B4018()
{
}

void sub_2539B4030()
{
}

uint64_t sub_2539B404C()
{
  return sub_2539B3F3C(*v0);
}

uint64_t sub_2539B4054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B3C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B407C(uint64_t a1)
{
  unint64_t v2 = sub_2539EDBD0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B40B8(uint64_t a1)
{
  unint64_t v2 = sub_2539EDBD0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Action.encode(to:)()
{
  sub_2535B45A0();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE6500);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EDBD0();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_25397F654();
  if (!v0)
  {
    uint64_t v2 = type metadata accessor for Action(0);
    sub_253A3DA68();
    sub_25397F738();
    sub_253A3C0C0(2);
    sub_253A3E080();
    sub_253462A5C(&qword_269CE6510);
    sub_2539EDC1C();
    sub_25397F654();
    sub_253A3C68C();
    sub_25397F738();
    sub_253A3E03C(*(int *)(v2 + 36));
    sub_2534D2524();
    sub_25397F654();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_253A3EEB0();
  sub_2535B4660();
}

void Action.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v19 = v4;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534966B0();
  sub_253462A5C(&qword_269CE6528);
  sub_253465998();
  int v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534D9B74();
  type metadata accessor for Action(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_253465A3C();
  uint64_t v12 = (uint64_t *)(v1 + v11[5]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v21 = v12;
  uint64_t v20 = v11;
  uint64_t v13 = (uint64_t *)(v1 + v11[8]);
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v22 = v13;
  sub_253A3BCFC(v3);
  sub_2539EDBD0();
  sub_253A3F4F4();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    sub_253A3DEA4();
    swift_bridgeObjectRelease();
    if (v7) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v23) = 0;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_2534F8908();
    sub_253A3E994();
    sub_253578E40();
    sub_25347FA84();
    v14();
    sub_253A3E68C(1);
    *uint64_t v21 = sub_253B0A2E0();
    v21[1] = v15;
    sub_253A3E68C(2);
    *(unsigned char *)(v1 + v20[6]) = sub_253B0A330() & 1;
    sub_253462A5C(&qword_269CE6510);
    sub_2539EDCC8();
    sub_253A3F3D4();
    sub_2534F8908();
    *(void *)(v1 + v20[7]) = v23;
    LOBYTE(v23) = 4;
    *uint64_t v22 = sub_253B0A2E0();
    v22[1] = v16;
    sub_2534D25BC();
    sub_253A3F3D4();
    sub_2534F8908();
    sub_2534D91AC();
    v17();
    uint64_t v18 = v1 + v20[9];
    *(void *)uint64_t v18 = v23;
    *(void *)(v18 + 8) = v24;
    *(_OWORD *)(v18 + 16) = v25;
    sub_2539DF660(v1, v19);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

uint64_t sub_2539B46C0()
{
  return ClientAction.id.getter();
}

uint64_t sub_2539B46DC()
{
  return ClientAction.variableDependencies.getter();
}

void sub_2539B46F8()
{
}

void sub_2539B4710()
{
}

uint64_t ActionCancellation.statementId.getter()
{
  uint64_t v0 = sub_2535E27CC();
  return sub_253961F60(v0, v1, &qword_269CDB460);
}

uint64_t ActionCancellation.statementId.setter(uint64_t a1)
{
  return sub_2539F0BE0(a1, v1, &qword_269CDB460);
}

uint64_t (*ActionCancellation.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ActionCancellation.cancelledActionStatementId.getter()
{
  return sub_2539A3E30();
}

uint64_t ActionCancellation.cancelledActionStatementId.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for ActionCancellation, MEMORY[0x263F4BF98]);
}

uint64_t (*ActionCancellation.cancelledActionStatementId.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for ActionCancellation(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t ActionCancellation.exprId.getter()
{
  uint64_t v1 = sub_253462A5C(&qword_269CDB460);
  uint64_t v2 = sub_25346CB4C(v1);
  MEMORY[0x270FA5388](v2);
  sub_25346CC54();
  sub_253961F60(v0, v0, &qword_269CDB460);
  uint64_t v3 = sub_253B059D0();
  sub_2534D8B48(v0, 1, v3);
  if (v4)
  {
    sub_253472458(v0, &qword_269CDB460);
  }
  else
  {
    StatementID.asExprId.getter();
    sub_25347B88C();
    uint64_t v5 = sub_25349C5B8();
    v6(v5);
  }
  return sub_2534D9718();
}

uint64_t ActionCancellation.init(statementId:cancelledActionStatementId:)()
{
  sub_2535E24D4();
  uint64_t v0 = sub_253B059D0();
  uint64_t v1 = sub_253A3D894();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v0);
  uint64_t v4 = sub_2534DA2E4();
  sub_2539F0BE0(v4, v5, v6);
  sub_253A3DF84();
  sub_25347B88C();
  uint64_t v8 = *(uint64_t (**)(void))(v7 + 32);
  return v8();
}

void ActionCancellation.init(statementId:)()
{
  sub_2534B3258();
  uint64_t v2 = sub_253A3F064();
  type metadata accessor for ActionCancellation(v2);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v3);
  sub_25346CBDC();
  uint64_t v4 = sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534847E0();
  uint64_t v6 = sub_253462A5C(&qword_269CDB460);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2536D2D54();
  MEMORY[0x270FA5388](v8);
  sub_2534D9E98();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 1, 1, v4);
  uint64_t v9 = sub_253579270();
  sub_253961F60(v9, v10, &qword_269CDB460);
  sub_2534D8B48(v1, 1, v4);
  if (v11)
  {
    sub_253B05980();
    sub_253472458(v1, &qword_269CDB460);
  }
  else
  {
    uint64_t v12 = sub_253A3CBC4();
    v13(v12);
  }
  uint64_t v14 = sub_253A3D894();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v14, v15, v16, v4);
  uint64_t v17 = sub_2536D42A4();
  sub_2539F0BE0(v17, v18, &qword_269CDB460);
  sub_253A3E7A0();
  sub_253A3C378();
  v19();
  uint64_t v20 = sub_2534DA5AC();
  sub_2539DF5B8(v20, v21);
  uint64_t v22 = sub_253579270();
  sub_253472458(v22, v23);
  sub_253465A14();
}

void ActionCancellation.init(exprId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_2535B3C98();
  a17 = v20;
  a18 = v21;
  uint64_t v22 = sub_253A3E9A0();
  sub_253465998();
  uint64_t v24 = v23;
  MEMORY[0x270FA5388](v25);
  sub_25348366C();
  uint64_t v26 = sub_253462A5C(&qword_269CDB460);
  uint64_t v27 = sub_25346CB4C(v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253945180((uint64_t)v29);
  StatementID.init(fromExprId:)();
  sub_253945180(v18);
  sub_2539F0BE0((uint64_t)v29, v18, &qword_269CDB460);
  sub_253A3DF84();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v18 + v30, v19, v22);
  sub_25346CD04();
}

uint64_t sub_2539B4C64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000253B12300)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539B4D6C(char a1)
{
  if (a1) {
    return 0xD00000000000001ALL;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2539B4DB0()
{
  return sub_2539B4D6C(*v0);
}

uint64_t sub_2539B4DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B4C64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B4DE0(uint64_t a1)
{
  unint64_t v2 = sub_2539EDD74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B4E1C(uint64_t a1)
{
  unint64_t v2 = sub_2539EDD74();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ActionCancellation.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6540);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EDD74();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3BCCC();
  if (!v0)
  {
    type metadata accessor for ActionCancellation(0);
    sub_2534F89B4();
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ActionCancellation.init(from:)()
{
  sub_2534847F8();
  uint64_t v25 = v0;
  uint64_t v2 = v1;
  v24[1] = v3;
  sub_253B059D0();
  sub_253465998();
  v24[0] = v4;
  MEMORY[0x270FA5388](v5);
  sub_2534966B0();
  uint64_t v6 = sub_253462A5C(&qword_269CDB460);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534AF2A0(v8, v24[0]);
  sub_253462A5C(&qword_269CE6550);
  sub_253465998();
  v24[3] = v10;
  v24[4] = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = sub_2534D9B74();
  uint64_t v12 = type metadata accessor for ActionCancellation(v11);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253A3CC78((uint64_t)v15);
  sub_253A3BCFC(v2);
  sub_2539EDD74();
  uint64_t v16 = v25;
  sub_253B0A660();
  if (v16)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_253472458((uint64_t)v15, &qword_269CDB460);
  }
  else
  {
    uint64_t v25 = v12;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EF24();
    sub_253B0A310();
    uint64_t v17 = sub_2534D954C();
    sub_2539F0BE0(v17, v18, v19);
    sub_253A3E1AC();
    sub_253A3EF24();
    sub_253B0A370();
    sub_2534659CC();
    v20();
    sub_253A3E7A0();
    sub_2534D8E14();
    v21();
    uint64_t v22 = sub_2536D3F90();
    sub_2539DF660(v22, v23);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_2534847C8();
}

void sub_2539B524C()
{
}

void sub_2539B5264()
{
}

uint64_t ClientAction.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t ClientAction.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ClientAction.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.toolId.getter()
{
  return sub_2539B52EC();
}

uint64_t sub_2539B52EC()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  sub_2535E2488();
  return sub_2534ACF74();
}

uint64_t ClientAction.toolId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539C37EC(a1, a2);
}

uint64_t (*ClientAction.toolId.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.parameters.getter()
{
  return sub_2539BD8E4();
}

uint64_t ClientAction.parameters.setter()
{
  return sub_2539BD934();
}

uint64_t (*ClientAction.parameters.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.clientQueryId.getter()
{
  return sub_2539B00CC();
}

uint64_t ClientAction.clientQueryId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B5410(a1, a2);
}

uint64_t sub_2539B5410(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  v6(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*ClientAction.clientQueryId.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.planEventId.getter()
{
  return sub_2539B54A4();
}

uint64_t sub_2539B54A4()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  sub_2535E2488();
  return sub_2534ACF74();
}

uint64_t ClientAction.planEventId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B54F0(a1, a2);
}

uint64_t sub_2539B54F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  v6(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*ClientAction.planEventId.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.shimParameterResolution.getter()
{
  return sub_2539CD758();
}

uint64_t ClientAction.shimParameterResolution.setter()
{
  uint64_t v2 = *(int *)(sub_253A3D204() + 36);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*ClientAction.shimParameterResolution.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.shimParameters.getter()
{
  type metadata accessor for ClientAction(0);
  return swift_bridgeObjectRetain();
}

uint64_t ClientAction.shimParameters.setter()
{
  uint64_t v2 = *(int *)(sub_253A3D204() + 40);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v2) = v0;
  return result;
}

uint64_t (*ClientAction.shimParameters.modify())()
{
  return nullsub_1;
}

void ClientAction.init(statementId:toolId:parameters:clientQueryId:planEventId:)()
{
  sub_2534B3258();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B3294();
  sub_25351C5C0();
  sub_2534AF234();
  v7();
  sub_2539E9CF0();
  uint64_t v8 = sub_253A3EFA8();
  ClientAction.init(statementId:toolId:parameters:shimParameters:clientQueryId:planEventId:)(v8, v5, v3, v1);
  sub_25351C3E8();
  v9();
  sub_253465A14();
}

#error "2539B581C: call analysis failed (funcsize=41)"

#error "2539B58A4: call analysis failed (funcsize=16)"

uint64_t sub_2539B58B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientAction.ShimParameter(0);
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_253B09120();
  uint64_t v5 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v64 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for ClientAction.ShimParameterResolution(0);
  uint64_t v55 = *(void *)(v60 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v60);
  uint64_t v63 = (uint64_t)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)v54 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (uint64_t)v54 - v11;
  uint64_t v72 = sub_253462A5C(&qword_269CDCAE0);
  uint64_t v12 = MEMORY[0x270FA5388](v72);
  uint64_t v57 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)((char *)v54 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (void *)((char *)v54 - v17);
  uint64_t v66 = MEMORY[0x263F8EE80];
  uint64_t v78 = MEMORY[0x263F8EE80];
  sub_25397174C(a1, v74);
  uint64_t v71 = v74[0];
  uint64_t v67 = v74[1];
  int64_t v73 = v76;
  unint64_t v19 = v77;
  v54[0] = v75;
  int64_t v68 = (unint64_t)(v75 + 64) >> 6;
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  for (uint64_t result = swift_bridgeObjectRetain(); ; uint64_t result = sub_2539DF610())
  {
    while (1)
    {
      if (v19)
      {
        unint64_t v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v22 = v21 | (v73 << 6);
      }
      else
      {
        int64_t v23 = v73 + 1;
        if (__OFADD__(v73, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v23 >= v68) {
          goto LABEL_35;
        }
        unint64_t v24 = *(void *)(v67 + 8 * v23);
        int64_t v25 = v73 + 1;
        if (!v24)
        {
          int64_t v25 = v73 + 2;
          if (v73 + 2 >= v68) {
            goto LABEL_35;
          }
          unint64_t v24 = *(void *)(v67 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v73 + 3;
            if (v73 + 3 >= v68) {
              goto LABEL_35;
            }
            unint64_t v24 = *(void *)(v67 + 8 * v25);
            if (!v24)
            {
              int64_t v25 = v73 + 4;
              if (v73 + 4 >= v68) {
                goto LABEL_35;
              }
              unint64_t v24 = *(void *)(v67 + 8 * v25);
              if (!v24)
              {
                int64_t v25 = v73 + 5;
                if (v73 + 5 >= v68) {
                  goto LABEL_35;
                }
                unint64_t v24 = *(void *)(v67 + 8 * v25);
                if (!v24)
                {
                  int64_t v26 = v73 + 6;
                  while (v26 < v68)
                  {
                    unint64_t v24 = *(void *)(v67 + 8 * v26++);
                    if (v24)
                    {
                      int64_t v25 = v26 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_35:
                  sub_25351C1A8();
                  return v66;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v19 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
        int64_t v73 = v25;
      }
      uint64_t v27 = v72;
      uint64_t v28 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v22);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      sub_2539DF660(*(void *)(v71 + 56) + *(void *)(v69 + 72) * v22, (uint64_t)v18 + *(int *)(v72 + 48));
      *uint64_t v18 = v30;
      v18[1] = v29;
      sub_253961F14((uint64_t)v18, (uint64_t)v16, &qword_269CDCAE0);
      uint64_t v31 = (uint64_t)v16 + *(int *)(v27 + 48);
      sub_2539DF660(v31, (uint64_t)v4);
      if (!swift_getEnumCaseMultiPayload()) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_2539DF610();
      uint64_t result = sub_253472458((uint64_t)v16, &qword_269CDCAE0);
    }
    uint64_t v32 = *v56;
    (*v56)(v64, v4, v65);
    uint64_t v33 = v59;
    v32(v59, v64, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = (uint64_t)v33;
    uint64_t v35 = v58;
    sub_2539DF5B8(v34, v58);
    uint64_t v36 = v57;
    uint64_t v37 = (uint64_t)v57 + *(int *)(v72 + 48);
    uint64_t v39 = *v16;
    uint64_t v38 = v16[1];
    *uint64_t v57 = *v16;
    v36[1] = v38;
    uint64_t v62 = v38;
    uint64_t v61 = v37;
    sub_2539DF5B8(v31, v37);
    sub_2539DF5B8(v35, v63);
    uint64_t v40 = v78;
    if (*(void *)(v78 + 24) <= *(void *)(v78 + 16))
    {
      swift_bridgeObjectRetain();
      sub_253AE5004();
      uint64_t v40 = v78;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v66 = v40;
    sub_253B0A5F0();
    uint64_t v41 = v62;
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v42 = v66;
    uint64_t v43 = v66 + 64;
    uint64_t v44 = -1 << *(unsigned char *)(v66 + 32);
    unint64_t v45 = result & ~v44;
    unint64_t v46 = v45 >> 6;
    if (((-1 << v45) & ~*(void *)(v66 + 64 + 8 * (v45 >> 6))) == 0) {
      break;
    }
    unint64_t v47 = __clz(__rbit64((-1 << v45) & ~*(void *)(v66 + 64 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    uint64_t v52 = (void *)(*(void *)(v42 + 48) + 16 * v47);
    *uint64_t v52 = v39;
    v52[1] = v41;
    uint64_t v53 = v42;
    sub_2539DF5B8(v63, *(void *)(v42 + 56) + *(void *)(v55 + 72) * v47);
    ++*(void *)(v53 + 16);
  }
  char v48 = 0;
  unint64_t v49 = (unint64_t)(63 - v44) >> 6;
  while (++v46 != v49 || (v48 & 1) == 0)
  {
    BOOL v50 = v46 == v49;
    if (v46 == v49) {
      unint64_t v46 = 0;
    }
    v48 |= v50;
    uint64_t v51 = *(void *)(v43 + 8 * v46);
    if (v51 != -1)
    {
      unint64_t v47 = __clz(__rbit64(~v51)) + (v46 << 6);
      goto LABEL_34;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2539B6034(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientAction.ShimParameter(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v67 = (uint64_t)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_253B09120();
  uint64_t v5 = *(void *)(v64 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v64);
  uint64_t v63 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v58 = (char *)v51 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v57 = (char *)v51 - v10;
  uint64_t v11 = sub_253462A5C(&qword_269CDCAE0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v56 = (void *)((char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v66 = (void *)((char *)v51 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v65 = (char *)v51 - v16;
  uint64_t v75 = MEMORY[0x263F8EE80];
  sub_25397174C(a1, v71);
  uint64_t v68 = v71[0];
  uint64_t v59 = v71[1];
  int64_t v69 = v73;
  unint64_t v17 = v74;
  v51[0] = v72;
  int64_t v60 = (unint64_t)(v72 + 64) >> 6;
  uint64_t v53 = v5;
  uint64_t v62 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v55 = v2;
  uint64_t v54 = v3;
  uint64_t v52 = v11;
  while (1)
  {
    while (1)
    {
      if (v17)
      {
        uint64_t v70 = (v17 - 1) & v17;
        unint64_t v19 = __clz(__rbit64(v17)) | (v69 << 6);
      }
      else
      {
        int64_t v20 = v69 + 1;
        if (__OFADD__(v69, 1)) {
          goto LABEL_37;
        }
        if (v20 >= v60) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v59 + 8 * v20);
        int64_t v22 = v69 + 1;
        if (!v21)
        {
          int64_t v22 = v69 + 2;
          if (v69 + 2 >= v60) {
            goto LABEL_35;
          }
          unint64_t v21 = *(void *)(v59 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v69 + 3;
            if (v69 + 3 >= v60) {
              goto LABEL_35;
            }
            unint64_t v21 = *(void *)(v59 + 8 * v22);
            if (!v21)
            {
              int64_t v22 = v69 + 4;
              if (v69 + 4 >= v60) {
                goto LABEL_35;
              }
              unint64_t v21 = *(void *)(v59 + 8 * v22);
              if (!v21)
              {
                int64_t v22 = v69 + 5;
                if (v69 + 5 >= v60) {
                  goto LABEL_35;
                }
                unint64_t v21 = *(void *)(v59 + 8 * v22);
                if (!v21)
                {
                  int64_t v23 = v69 + 6;
                  while (v23 < v60)
                  {
                    unint64_t v21 = *(void *)(v59 + 8 * v23++);
                    if (v21)
                    {
                      int64_t v22 = v23 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_35:
                  sub_25351C1A8();
                  return v75;
                }
              }
            }
          }
        }
LABEL_19:
        int64_t v69 = v22;
        uint64_t v70 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      unint64_t v24 = (uint64_t *)(*(void *)(v68 + 48) + 16 * v19);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v65;
      sub_2539DF660(*(void *)(v68 + 56) + *(void *)(v3 + 72) * v19, (uint64_t)&v65[*(int *)(v11 + 48)]);
      *uint64_t v27 = v25;
      v27[1] = v26;
      uint64_t v28 = v66;
      sub_253961F14((uint64_t)v27, (uint64_t)v66, &qword_269CDCAE0);
      uint64_t v29 = v11;
      uint64_t v30 = (uint64_t)v28 + *(int *)(v11 + 48);
      uint64_t v31 = v67;
      sub_2539DF660(v30, v67);
      if (!swift_getEnumCaseMultiPayload()) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_2539DF610();
      uint64_t result = sub_253472458((uint64_t)v28, &qword_269CDCAE0);
      uint64_t v11 = v29;
      unint64_t v17 = v70;
    }
    uint64_t v61 = v26;
    uint64_t v32 = *v62;
    uint64_t v33 = v58;
    uint64_t v34 = v64;
    (*v62)(v58, v31, v64);
    uint64_t v35 = v57;
    v32(v57, (uint64_t)v33, v34);
    uint64_t v36 = v56;
    uint64_t v38 = *v28;
    uint64_t v37 = v28[1];
    uint64_t v39 = (uint64_t)v56 + *(int *)(v29 + 48);
    *uint64_t v56 = v38;
    v36[1] = v37;
    sub_2539DF5B8(v30, v39);
    v32(v63, (uint64_t)v35, v34);
    uint64_t v40 = v75;
    if (*(void *)(v75 + 24) <= *(void *)(v75 + 16))
    {
      swift_bridgeObjectRetain();
      sub_253AE5358();
      uint64_t v40 = v75;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_253B0A5F0();
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v41 = v40 + 64;
    uint64_t v42 = -1 << *(unsigned char *)(v40 + 32);
    unint64_t v43 = result & ~v42;
    unint64_t v44 = v43 >> 6;
    if (((-1 << v43) & ~*(void *)(v40 + 64 + 8 * (v43 >> 6))) == 0) {
      break;
    }
    unint64_t v45 = __clz(__rbit64((-1 << v43) & ~*(void *)(v40 + 64 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v41 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
    BOOL v50 = (void *)(*(void *)(v40 + 48) + 16 * v45);
    *BOOL v50 = v38;
    v50[1] = v37;
    v32((char *)(*(void *)(v40 + 56) + *(void *)(v53 + 72) * v45), (uint64_t)v63, v64);
    ++*(void *)(v40 + 16);
    uint64_t result = sub_2539DF610();
    uint64_t v3 = v54;
    uint64_t v11 = v52;
    unint64_t v17 = v70;
  }
  char v46 = 0;
  unint64_t v47 = (unint64_t)(63 - v42) >> 6;
  while (++v44 != v47 || (v46 & 1) == 0)
  {
    BOOL v48 = v44 == v47;
    if (v44 == v47) {
      unint64_t v44 = 0;
    }
    v46 |= v48;
    uint64_t v49 = *(void *)(v41 + 8 * v44);
    if (v49 != -1)
    {
      unint64_t v45 = __clz(__rbit64(~v49)) + (v44 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2539B6760(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientAction.ShimParameterResolution(0);
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_253B09120();
  uint64_t v5 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v64 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for ClientAction.ShimParameter(0);
  uint64_t v55 = *(void *)(v60 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v60);
  uint64_t v63 = (uint64_t)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)v54 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (uint64_t)v54 - v11;
  uint64_t v72 = sub_253462A5C(&qword_269CDCAF8);
  uint64_t v12 = MEMORY[0x270FA5388](v72);
  uint64_t v57 = (void *)((char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)((char *)v54 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (void *)((char *)v54 - v17);
  uint64_t v66 = MEMORY[0x263F8EE80];
  uint64_t v78 = MEMORY[0x263F8EE80];
  sub_25397174C(a1, v74);
  uint64_t v71 = v74[0];
  uint64_t v67 = v74[1];
  int64_t v73 = v76;
  unint64_t v19 = v77;
  v54[0] = v75;
  int64_t v68 = (unint64_t)(v75 + 64) >> 6;
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  for (uint64_t result = swift_bridgeObjectRetain(); ; uint64_t result = sub_2539DF610())
  {
    while (1)
    {
      if (v19)
      {
        unint64_t v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v22 = v21 | (v73 << 6);
      }
      else
      {
        int64_t v23 = v73 + 1;
        if (__OFADD__(v73, 1))
        {
          __break(1u);
          goto LABEL_37;
        }
        if (v23 >= v68) {
          goto LABEL_35;
        }
        unint64_t v24 = *(void *)(v67 + 8 * v23);
        int64_t v25 = v73 + 1;
        if (!v24)
        {
          int64_t v25 = v73 + 2;
          if (v73 + 2 >= v68) {
            goto LABEL_35;
          }
          unint64_t v24 = *(void *)(v67 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v73 + 3;
            if (v73 + 3 >= v68) {
              goto LABEL_35;
            }
            unint64_t v24 = *(void *)(v67 + 8 * v25);
            if (!v24)
            {
              int64_t v25 = v73 + 4;
              if (v73 + 4 >= v68) {
                goto LABEL_35;
              }
              unint64_t v24 = *(void *)(v67 + 8 * v25);
              if (!v24)
              {
                int64_t v25 = v73 + 5;
                if (v73 + 5 >= v68) {
                  goto LABEL_35;
                }
                unint64_t v24 = *(void *)(v67 + 8 * v25);
                if (!v24)
                {
                  int64_t v26 = v73 + 6;
                  while (v26 < v68)
                  {
                    unint64_t v24 = *(void *)(v67 + 8 * v26++);
                    if (v24)
                    {
                      int64_t v25 = v26 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_35:
                  sub_25351C1A8();
                  return v66;
                }
              }
            }
          }
        }
LABEL_19:
        unint64_t v19 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
        int64_t v73 = v25;
      }
      uint64_t v27 = v72;
      uint64_t v28 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v22);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      sub_2539DF660(*(void *)(v71 + 56) + *(void *)(v69 + 72) * v22, (uint64_t)v18 + *(int *)(v72 + 48));
      *uint64_t v18 = v30;
      v18[1] = v29;
      sub_253961F14((uint64_t)v18, (uint64_t)v16, &qword_269CDCAF8);
      uint64_t v31 = (uint64_t)v16 + *(int *)(v27 + 48);
      sub_2539DF660(v31, (uint64_t)v4);
      if (swift_getEnumCaseMultiPayload() != 1) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_2539DF610();
      uint64_t result = sub_253472458((uint64_t)v16, &qword_269CDCAF8);
    }
    uint64_t v32 = *v56;
    (*v56)(v64, v4, v65);
    uint64_t v33 = v59;
    v32(v59, v64, v65);
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = (uint64_t)v33;
    uint64_t v35 = v58;
    sub_2539DF5B8(v34, v58);
    uint64_t v36 = v57;
    uint64_t v37 = (uint64_t)v57 + *(int *)(v72 + 48);
    uint64_t v39 = *v16;
    uint64_t v38 = v16[1];
    *uint64_t v57 = *v16;
    v36[1] = v38;
    uint64_t v62 = v38;
    uint64_t v61 = v37;
    sub_2539DF5B8(v31, v37);
    sub_2539DF5B8(v35, v63);
    uint64_t v40 = v78;
    if (*(void *)(v78 + 24) <= *(void *)(v78 + 16))
    {
      swift_bridgeObjectRetain();
      sub_253AE5680();
      uint64_t v40 = v78;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v66 = v40;
    sub_253B0A5F0();
    uint64_t v41 = v62;
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v42 = v66;
    uint64_t v43 = v66 + 64;
    uint64_t v44 = -1 << *(unsigned char *)(v66 + 32);
    unint64_t v45 = result & ~v44;
    unint64_t v46 = v45 >> 6;
    if (((-1 << v45) & ~*(void *)(v66 + 64 + 8 * (v45 >> 6))) == 0) {
      break;
    }
    unint64_t v47 = __clz(__rbit64((-1 << v45) & ~*(void *)(v66 + 64 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
    uint64_t v52 = (void *)(*(void *)(v42 + 48) + 16 * v47);
    *uint64_t v52 = v39;
    v52[1] = v41;
    uint64_t v53 = v42;
    sub_2539DF5B8(v63, *(void *)(v42 + 56) + *(void *)(v55 + 72) * v47);
    ++*(void *)(v53 + 16);
  }
  char v48 = 0;
  unint64_t v49 = (unint64_t)(63 - v44) >> 6;
  while (++v46 != v49 || (v48 & 1) == 0)
  {
    BOOL v50 = v46 == v49;
    if (v46 == v49) {
      unint64_t v46 = 0;
    }
    v48 |= v50;
    uint64_t v51 = *(void *)(v43 + 8 * v46);
    if (v51 != -1)
    {
      unint64_t v47 = __clz(__rbit64(~v51)) + (v46 << 6);
      goto LABEL_34;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2539B6EE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientAction.ShimParameterResolution(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v70 = (uint64_t)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_253B09120();
  uint64_t v5 = *(void *)(v68 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v68);
  uint64_t v67 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)v55 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v62 = (char *)v55 - v10;
  uint64_t v11 = sub_253462A5C(&qword_269CDCAF8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v61 = (void *)((char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)((char *)v55 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v69 = (char *)v55 - v17;
  uint64_t v78 = MEMORY[0x263F8EE80];
  sub_25397174C(a1, v74);
  uint64_t v71 = v74[0];
  uint64_t v64 = v74[1];
  uint64_t v18 = v76;
  unint64_t v19 = v77;
  v55[1] = v75;
  int64_t v65 = (unint64_t)(v75 + 64) >> 6;
  uint64_t v57 = v5;
  uint64_t v66 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v59 = v2;
  uint64_t v58 = v3;
  uint64_t v60 = v11;
  uint64_t v56 = v16;
  while (1)
  {
    while (1)
    {
      if (v19)
      {
        uint64_t v72 = (v19 - 1) & v19;
        int64_t v73 = v18;
        unint64_t v21 = __clz(__rbit64(v19)) | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_37;
        }
        if (v22 >= v65) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v64 + 8 * v22);
        int64_t v24 = v18 + 1;
        if (!v23)
        {
          int64_t v24 = v18 + 2;
          if (v18 + 2 >= v65) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v64 + 8 * v24);
          if (!v23)
          {
            int64_t v24 = v18 + 3;
            if (v18 + 3 >= v65) {
              goto LABEL_35;
            }
            unint64_t v23 = *(void *)(v64 + 8 * v24);
            if (!v23)
            {
              int64_t v24 = v18 + 4;
              if (v18 + 4 >= v65) {
                goto LABEL_35;
              }
              unint64_t v23 = *(void *)(v64 + 8 * v24);
              if (!v23)
              {
                int64_t v24 = v18 + 5;
                if (v18 + 5 >= v65) {
                  goto LABEL_35;
                }
                unint64_t v23 = *(void *)(v64 + 8 * v24);
                if (!v23)
                {
                  int64_t v25 = v18 + 6;
                  while (v25 < v65)
                  {
                    unint64_t v23 = *(void *)(v64 + 8 * v25++);
                    if (v23)
                    {
                      int64_t v24 = v25 - 1;
                      goto LABEL_19;
                    }
                  }
LABEL_35:
                  sub_25351C1A8();
                  return v78;
                }
              }
            }
          }
        }
LABEL_19:
        uint64_t v72 = (v23 - 1) & v23;
        int64_t v73 = v24;
        unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      int64_t v26 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v21);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      uint64_t v29 = *(void *)(v71 + 56) + *(void *)(v3 + 72) * v21;
      uint64_t v30 = v3;
      uint64_t v31 = v69;
      sub_2539DF660(v29, (uint64_t)&v69[*(int *)(v11 + 48)]);
      *uint64_t v31 = v28;
      v31[1] = v27;
      sub_253961F14((uint64_t)v31, (uint64_t)v16, &qword_269CDCAF8);
      uint64_t v32 = (uint64_t)v16 + *(int *)(v11 + 48);
      uint64_t v33 = v70;
      sub_2539DF660(v32, v70);
      if (swift_getEnumCaseMultiPayload() != 1) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_2539DF610();
      uint64_t result = sub_253472458((uint64_t)v16, &qword_269CDCAF8);
      uint64_t v3 = v30;
      unint64_t v19 = v72;
      uint64_t v18 = v73;
    }
    uint64_t v34 = *v66;
    uint64_t v35 = v63;
    uint64_t v36 = v33;
    uint64_t v37 = v11;
    uint64_t v38 = v68;
    (*v66)(v63, v36, v68);
    uint64_t v39 = v62;
    v34(v62, (uint64_t)v35, v38);
    uint64_t v40 = v61;
    uint64_t v41 = (uint64_t)v61 + *(int *)(v37 + 48);
    uint64_t v42 = *v16;
    uint64_t v43 = v16[1];
    *uint64_t v61 = *v16;
    v40[1] = v43;
    sub_2539DF5B8(v32, v41);
    v34(v67, (uint64_t)v39, v38);
    uint64_t v44 = v78;
    if (*(void *)(v78 + 24) <= *(void *)(v78 + 16))
    {
      swift_bridgeObjectRetain();
      sub_253AE5358();
      uint64_t v44 = v78;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_253B0A5F0();
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v45 = v44 + 64;
    uint64_t v46 = -1 << *(unsigned char *)(v44 + 32);
    unint64_t v47 = result & ~v46;
    unint64_t v48 = v47 >> 6;
    uint64_t v11 = v60;
    uint64_t v18 = v73;
    if (((-1 << v47) & ~*(void *)(v44 + 64 + 8 * (v47 >> 6))) == 0) {
      break;
    }
    unint64_t v49 = __clz(__rbit64((-1 << v47) & ~*(void *)(v44 + 64 + 8 * (v47 >> 6)))) | v47 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v45 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    uint64_t v54 = (void *)(*(void *)(v44 + 48) + 16 * v49);
    *uint64_t v54 = v42;
    v54[1] = v43;
    v34((char *)(*(void *)(v44 + 56) + *(void *)(v57 + 72) * v49), (uint64_t)v67, v68);
    ++*(void *)(v44 + 16);
    uint64_t result = sub_2539DF610();
    uint64_t v3 = v58;
    uint64_t v16 = v56;
    unint64_t v19 = v72;
  }
  char v50 = 0;
  unint64_t v51 = (unint64_t)(63 - v46) >> 6;
  while (++v48 != v51 || (v50 & 1) == 0)
  {
    BOOL v52 = v48 == v51;
    if (v48 == v51) {
      unint64_t v48 = 0;
    }
    v50 |= v52;
    uint64_t v53 = *(void *)(v45 + 8 * v48);
    if (v53 != -1)
    {
      unint64_t v49 = __clz(__rbit64(~v53)) + (v48 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

#error "2539B7630: call analysis failed (funcsize=16)"

void sub_2539B7640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t),void (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_2534B3258();
  uint64_t v37 = v24;
  uint64_t v38 = v25;
  uint64_t v36 = v26;
  uint64_t v28 = v27;
  sub_253A3E294();
  uint64_t v35 = v29;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v30);
  sub_2534B3294();
  uint64_t v31 = a21(v28);
  sub_253A3F588();
  sub_2534AF234();
  v32();
  uint64_t v33 = sub_253A3EFA8();
  a22(v33, v23, v22, v31, v28, v36, v37, v38, v35);
  sub_2534DA604();
  sub_2534B3470();
  v34();
  sub_253465A14();
}

#error "2539B7794: call analysis failed (funcsize=41)"

uint64_t ClientAction.init(statementId:toolId:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_2534F8A1C();
  uint64_t v9 = (int *)type metadata accessor for ClientAction(v8);
  sub_253A3EF60((void *)(v4 + v9[7]));
  uint64_t v11 = (void *)(v4 + v10);
  sub_253B059D0();
  *uint64_t v11 = 0;
  v11[1] = 0;
  sub_253486600();
  sub_2534ACF74();
  sub_2534AF234();
  v12();
  uint64_t v13 = (void *)(v4 + v9[5]);
  *uint64_t v13 = a2;
  v13[1] = a3;
  *(void *)(v4 + v9[6]) = a4;
  swift_bridgeObjectRetain();
  sub_2539E9CF0();
  *(void *)(v4 + v9[9]) = v14;
  sub_2539E9CF0();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_2534F85D4();
  uint64_t result = v17();
  *(void *)(v4 + v9[10]) = v16;
  return result;
}

void ClientAction.init(exprId:toolId:parameters:clientQueryId:planEventId:)()
{
  sub_2534B3258();
  uint64_t v9 = v0;
  uint64_t v2 = v1;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2535B38D8();
  MEMORY[0x270FA5388](v4);
  StatementID.init(fromExprId:)();
  sub_2534ACF74();
  sub_2534AF234();
  v5();
  sub_2539E9CF0();
  uint64_t v6 = sub_253579270();
  ClientAction.init(statementId:toolId:parameters:shimParameters:clientQueryId:planEventId:)(v6, v7, v9, v2);
  sub_253578EE0();
  sub_2534D91AC();
  v8();
  sub_253465A14();
}

void ClientAction.init(exprId:toolId:parameters:)()
{
  sub_2535B3C98();
  uint64_t v2 = sub_253A3D44C();
  uint64_t v3 = sub_25346CB4C(v2);
  MEMORY[0x270FA5388](v3);
  sub_253A3DD74();
  StatementID.init(fromExprId:)();
  uint64_t v4 = sub_2536D42A4();
  ClientAction.init(statementId:toolId:parameters:)(v4, v5, v1, v0);
  sub_25346CD04();
}

void ClientAction.init(id:variableName:variableDependencies:toolId:parameters:)()
{
  sub_2534B3258();
  sub_253A3CABC();
  uint64_t v4 = sub_253B059D0();
  uint64_t v5 = sub_25346CB4C(v4);
  MEMORY[0x270FA5388](v5);
  sub_2534B34A4();
  swift_bridgeObjectRelease();
  sub_2534D9A44();
  StatementID.init(fromExprId:)();
  ClientAction.init(statementId:toolId:parameters:)(v3, v2, v1, v0);
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534659CC();
  v6();
  sub_253465A14();
}

uint64_t sub_2539B7BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_25348366C();
  uint64_t v8 = sub_2534DA5AC();
  v9(v8);
  return a5(v5);
}

uint64_t _s30IntelligenceFlowPlannerSupport6ActionV2id10Foundation4UUIDVvs_0()
{
  sub_253B055C0();
  sub_25346CAF4();
  uint64_t v0 = sub_2539446BC();
  return v1(v0);
}

uint64_t (*ClientAction.id.modify(uint64_t *a1))()
{
  uint64_t v2 = sub_253B055C0();
  *a1 = v2;
  sub_25346CB34(v2);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  return sub_2539B31B8;
}

void sub_2539B7D1C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  sub_253477128();
  v2();
  free(v1);
}

uint64_t sub_2539B7D68(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ClientAction.variableName.setter(v1, v2);
}

uint64_t _s30IntelligenceFlowPlannerSupport6ActionV12variableNameSSvs_0()
{
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v0);
  sub_253465A3C();
  sub_25351C5CC();
  StatementID.init(fromExprId:)();
  uint64_t v1 = sub_253578EEC();
  return v2(v1);
}

uint64_t (*ClientAction.variableName.modify())(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v1 = sub_253A3F78C();
  uint64_t v2 = sub_253A3F63C((uint64_t)v1);
  v0[3] = v2;
  sub_25346CB34(v2);
  v0[4] = v3;
  v0[5] = (uint64_t)malloc(*(void *)(v4 + 64));
  uint64_t *v0 = StatementID.asExprId.getter();
  v0[1] = v5;
  return sub_2539B3238;
}

void sub_2539B7EC0()
{
  sub_2535B3C98();
  uint64_t v1 = *(void **)(*(void *)v0 + 40);
  if (v2)
  {
    swift_bridgeObjectRetain();
    StatementID.init(fromExprId:)();
    uint64_t v3 = sub_253A3E3C0();
    v4(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    StatementID.init(fromExprId:)();
    uint64_t v5 = sub_253A3E3C0();
    v6(v5);
  }
  free(v1);
  sub_25346CD04();
  free(v7);
}

uint64_t ClientAction.variableDependencies.getter()
{
  sub_253B09120();
  return sub_253B095A0();
}

uint64_t sub_2539B7FB0()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return ClientAction.variableDependencies.setter(v0);
}

uint64_t (*ClientAction.variableDependencies.modify(uint64_t *a1))()
{
  *a1 = sub_253B095A0();
  return destroy for QueryDecorationPrePlannerResultPayload;
}

uint64_t destroy for QueryDecorationPrePlannerResultPayload()
{
  return swift_bridgeObjectRelease();
}

void static ClientAction.ShimParameterResolution.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  type metadata accessor for ClientAction.UnresolvedParameterValue(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v4);
  sub_2534D9B74();
  sub_253B09120();
  sub_253465998();
  uint64_t v21 = v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25348360C();
  type metadata accessor for ClientAction.ShimParameterResolution(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_253578D44();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = sub_253462A5C(&qword_269CDCAE8);
  uint64_t v13 = sub_25346CB4C(v12);
  MEMORY[0x270FA5388](v13);
  sub_2535E2544();
  uint64_t v15 = v0 + v14;
  sub_2539DF660(v22, v0);
  sub_2539DF660(v23, v15);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v16 = v21;
    sub_2539DF660(v0, (uint64_t)v11);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_25347FA84();
      v18();
      sub_253B090F0();
      unint64_t v19 = *(void (**)(void))(v16 + 8);
      sub_2534D954C();
      sub_2534D91AC();
      v19();
      sub_2534D91AC();
      v19();
      sub_2539DF610();
      goto LABEL_11;
    }
    sub_2534D91AC();
    v17();
    goto LABEL_8;
  }
  sub_253A3F834();
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_2539DF610();
LABEL_8:
    sub_253472458(v0, &qword_269CDCAE8);
    goto LABEL_11;
  }
  sub_2539DF5B8(v15, v1);
  if (sub_253B090F0()) {
    sub_2534B5D10();
  }
  sub_2539DF610();
  sub_2539DF610();
  sub_2539DF610();
LABEL_11:
  sub_2534D9090();
  sub_253465A14();
}

uint64_t static ClientAction.UnresolvedParameterValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_25398F198(a1, a2, MEMORY[0x263F804B8], type metadata accessor for ClientAction.UnresolvedParameterValue, (uint64_t (*)(uint64_t))sub_2534B5D10);
}

uint64_t sub_2539B83FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465766C6F736572 && a2 == 0xE800000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x766C6F7365726E75 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539B84F8(char a1)
{
  if (a1) {
    return 0x766C6F7365726E75;
  }
  else {
    return 0x6465766C6F736572;
  }
}

uint64_t sub_2539B8534()
{
  return sub_2539B84F8(*v0);
}

uint64_t sub_2539B853C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B83FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B8564(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE00();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B85A0(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE00();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B85DC(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE98();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B8618(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE98();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B8654(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE4C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B8690(uint64_t a1)
{
  unint64_t v2 = sub_2539EDE4C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.ShimParameterResolution.encode(to:)()
{
  sub_2534847F8();
  uint64_t v24 = v0;
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CE6558);
  sub_253465998();
  v23[6] = v5;
  v23[7] = v4;
  MEMORY[0x270FA5388](v4);
  v23[5] = (uint64_t)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_253483660();
  v23[1] = type metadata accessor for ClientAction.UnresolvedParameterValue(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_253483628(v9, v23[0]);
  sub_253462A5C(&qword_269CE6560);
  sub_253465998();
  v23[2] = v11;
  v23[3] = v10;
  MEMORY[0x270FA5388](v10);
  sub_25397F55C();
  v23[0] = sub_253B09120();
  sub_253465998();
  uint64_t v25 = v12;
  MEMORY[0x270FA5388](v13);
  type metadata accessor for ClientAction.ShimParameterResolution(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v14);
  sub_2534B34A4();
  uint64_t v26 = sub_253462A5C(&qword_269CE6568);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_2534847E0();
  sub_253A3BCFC(v3);
  sub_2539EDE00();
  sub_253A3D530();
  sub_253B0A680();
  sub_2539DF660(v24, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_2539DF5B8(v1, v23[4]);
    sub_2539EDE4C();
    sub_253A3BD18();
    sub_2539E6F90((uint64_t)&unk_269CE6580);
    sub_2534F84A8();
    sub_253B0A440();
    sub_2534659CC();
    v16();
    sub_2539DF610();
    sub_25353CE6C();
    sub_2534D9A08();
    v17();
  }
  else
  {
    sub_25347FA84();
    v18();
    sub_2539EDE98();
    sub_253A3BD18();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253B0A440();
    sub_2534659CC();
    v19();
    sub_253578E40();
    sub_2534659CC();
    v20();
    uint64_t v21 = sub_25353CE60();
    v22(v21);
  }
  sub_2534F8A10();
  sub_2534847C8();
}

void ClientAction.ShimParameterResolution.init(from:)()
{
  sub_2534847F8();
  uint64_t v37 = v0;
  unint64_t v2 = v1;
  v36[4] = v3;
  sub_253462A5C(&qword_269CE6590);
  sub_253465998();
  v36[7] = v4;
  v36[8] = v5;
  MEMORY[0x270FA5388](v4);
  sub_2534AF2A0(v6, v36[0]);
  sub_253462A5C(&qword_269CE6598);
  sub_253465998();
  v36[5] = v8;
  v36[6] = v7;
  MEMORY[0x270FA5388](v7);
  sub_2534D8F84(v9, v36[0]);
  sub_253462A5C(&qword_269CE65A0);
  sub_253465998();
  v36[11] = v11;
  v36[12] = v10;
  MEMORY[0x270FA5388](v10);
  type metadata accessor for ClientAction.ShimParameterResolution(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  sub_2534B340C();
  MEMORY[0x270FA5388](v13);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v36 - v15;
  unint64_t v17 = v2[4];
  sub_2534D9A50(v2);
  sub_2539EDE00();
  uint64_t v18 = v37;
  sub_253A3BAF0();
  if (v18) {
    goto LABEL_8;
  }
  sub_253A3D4A8();
  sub_253A3EB04();
  if (!v19
    || (char v20 = v16[32], v21 = sub_253A3CD80(), sub_25347B78C(v21, v22, v23, v24, v25, v26), sub_253A3E190(), v17 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    sub_253462A5C(&qword_269CDB688);
    sub_253A3C930();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v28();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v29();
    unint64_t v2 = v37;
LABEL_8:
    uint64_t v30 = (uint64_t)v2;
    goto LABEL_9;
  }
  if (v20)
  {
    sub_2539EDE4C();
    sub_253A3C72C();
    type metadata accessor for ClientAction.UnresolvedParameterValue(0);
    sub_2539E6F90((uint64_t)&unk_269CE65A8);
    uint64_t v27 = v36[1];
    sub_253A3C5A8();
    sub_253A3ED64();
    sub_2534659CC();
    v31();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v32();
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v27;
  }
  else
  {
    sub_2539EDE98();
    sub_253A3C72C();
    sub_253B09120();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    uint64_t v33 = v36[2];
    sub_253A3B884();
    sub_253A3ED64();
    sub_2534659CC();
    v34();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v35();
    swift_storeEnumTagMultiPayload();
  }
  sub_2539DF5B8(v33, v36[0]);
  sub_253A3EB5C();
  uint64_t v30 = (uint64_t)v37;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v30);
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539B8FA0()
{
}

void sub_2539B8FB8()
{
}

void static ClientAction.ShimParameter.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v29 = v5;
  sub_2539460B0();
  uint64_t v6 = sub_253B09120();
  sub_253465998();
  uint64_t v27 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534B33AC();
  type metadata accessor for ClientAction.ShimParameter(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_2534F882C();
  MEMORY[0x270FA5388](v11);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v12);
  sub_2534B347C();
  uint64_t v13 = sub_253462A5C(&qword_269CE65B0);
  uint64_t v14 = sub_25346CB4C(v13);
  MEMORY[0x270FA5388](v14);
  sub_2535E2544();
  uint64_t v16 = (void *)(v0 + v15);
  sub_2539DF660(v3, v0);
  sub_2539DF660(v29, (uint64_t)v16);
  sub_2534D970C();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_2539DF660(v0, v1);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_2534DA4BC();
      v21();
      goto LABEL_15;
    }
    sub_2535791D8();
    sub_25347FA84();
    v25();
    sub_2535925F4();
    sub_253B090F0();
    uint64_t v26 = *(void (**)(void))(v27 + 8);
    sub_2535B4148();
    sub_2534DA4BC();
    v26();
    ((void (*)(uint64_t, uint64_t))v26)(v1, v6);
LABEL_18:
    sub_2539DF610();
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_2539DF660(v0, v2);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      swift_bridgeObjectRelease();
      sub_253A3E454();
      goto LABEL_15;
    }
    uint64_t v28 = v16[4];
    uint64_t v30 = v16[3];
    uint64_t v22 = v16[2];
    uint64_t v23 = sub_253A3E574();
    static ClientAction.PersonQuery.== infix(_:_:)(v23, v24);
    swift_bridgeObjectRelease();
    sub_253961E40(v22, v30, v28);
    swift_bridgeObjectRelease();
    sub_253A3E454();
    goto LABEL_18;
  }
  sub_253A3F81C();
  uint64_t v19 = *v4;
  uint64_t v18 = v4[1];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (v19 == *v16 && v18 == v16[1])
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      sub_2536D44B0();
      sub_253A3CB64();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  sub_253472458(v0, &qword_269CE65B0);
LABEL_19:
  sub_253465A14();
}

uint64_t static ClientAction.PersonQuery.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  int v14 = *(unsigned __int8 *)(a2 + 56);
  if (!*(void *)(a1 + 8))
  {
    if (v8) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v8) {
    return 0;
  }
  sub_253A3E3D8(a1);
  BOOL v17 = v17 && v15 == v16;
  if (v17 || (sub_253B0A4C0(), uint64_t result = sub_25397F648(), (v19 & 1) != 0))
  {
LABEL_10:
    if (v4 == 1)
    {
      if (v10 == 1) {
        return v7 ^ v14 ^ 1u;
      }
      goto LABEL_15;
    }
    v36[0] = v2;
    v36[1] = v3;
    v36[2] = v4;
    v36[3] = v5;
    v36[4] = v6;
    if (v10 == 1)
    {
      uint64_t v20 = sub_253A3E7D8();
      sub_2539EDEE4(v20, v21, v22);
LABEL_15:
      uint64_t v23 = sub_253A3E71C();
      sub_2539EDEE4(v23, v24, v25);
      uint64_t v26 = sub_253A3E7D8();
      sub_253961E40(v26, v27, v28);
      uint64_t v29 = sub_253A3E71C();
      sub_253961E40(v29, v30, v31);
      return 0;
    }
    LOBYTE(v35[0]) = v9;
    v35[1] = v11;
    v35[2] = v10;
    v35[3] = v13;
    v35[4] = v12;
    int v32 = v7;
    int v33 = v14;
    char v34 = static ClientAction.PersonQuery.Handle.== infix(_:_:)(v36, v35);
    int v14 = v33;
    int v7 = v32;
    if (v34) {
      return v7 ^ v14 ^ 1u;
    }
    return 0;
  }
  return result;
}

uint64_t sub_2539B94CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465766C6F736572 && a2 == 0xE800000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7551676E69727473 && a2 == 0xEB00000000797265;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x75516E6F73726570 && a2 == 0xEB00000000797265)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539B9648(char a1)
{
  if (!a1) {
    return 0x6465766C6F736572;
  }
  if (a1 == 1) {
    return 0x7551676E69727473;
  }
  return 0x75516E6F73726570;
}

uint64_t sub_2539B96B0()
{
  return sub_2539B9648(*v0);
}

uint64_t sub_2539B96B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539B94CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539B96E0(uint64_t a1)
{
  unint64_t v2 = sub_2539EDF2C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B971C(uint64_t a1)
{
  unint64_t v2 = sub_2539EDF2C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B9758(uint64_t a1)
{
  unint64_t v2 = sub_2539EDF78();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B9794(uint64_t a1)
{
  unint64_t v2 = sub_2539EDF78();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B97D0(uint64_t a1)
{
  unint64_t v2 = sub_2539EE05C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B980C(uint64_t a1)
{
  unint64_t v2 = sub_2539EE05C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539B9848(uint64_t a1)
{
  unint64_t v2 = sub_2539EE010();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539B9884(uint64_t a1)
{
  unint64_t v2 = sub_2539EE010();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.ShimParameter.encode(to:)()
{
  sub_2534847F8();
  uint64_t v25 = v0;
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CE65B8);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D92B8(v5, v24);
  sub_253462A5C(&qword_269CE65C0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  sub_253462A5C(&qword_269CE65C8);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253A3DC9C();
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534B33AC();
  type metadata accessor for ClientAction.ShimParameter(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE65D0);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_253465A3C();
  sub_253A3BCFC(v3);
  sub_2539EDF2C();
  sub_253A3E544();
  sub_253B0A680();
  sub_2539DF660(v25, v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_2539EDF78();
      sub_2534D9208();
      sub_2539EDFC4();
      sub_253B0A440();
      sub_253A3E3FC();
      sub_2534659CC();
      v19();
      sub_2534659CC();
      v20();
      swift_bridgeObjectRelease();
      sub_253A3E6B0();
      sub_253961E40(v21, v22, v23);
      goto LABEL_7;
    }
    sub_2539EE010();
    sub_2534D9208();
    sub_253579334();
    sub_253B0A3F0();
    swift_bridgeObjectRelease();
    sub_2534659CC();
    v13();
    uint64_t v14 = sub_2534DA154();
  }
  else
  {
    sub_2534D9840();
    sub_25347FA84();
    v16();
    sub_2539EE05C();
    sub_2534D9208();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253B0A440();
    sub_2534DA4BC();
    v17();
    sub_2534D9A08();
    v18();
    uint64_t v14 = sub_2535787F4();
  }
  v15(v14);
LABEL_7:
  sub_2534F8A10();
  sub_2534847C8();
}

void ClientAction.ShimParameter.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  uint64_t v59 = v5;
  sub_253462A5C(&qword_269CE6600);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534D9BAC(v7, v54);
  sub_253462A5C(&qword_269CE6608);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D92B8(v9, v55);
  sub_253462A5C(&qword_269CE6610);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_2534D929C(v11, v56);
  uint64_t v60 = sub_253462A5C(&qword_269CE6618);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534D9C00();
  uint64_t v14 = type metadata accessor for ClientAction.ShimParameter(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2536D2D54();
  MEMORY[0x270FA5388](v16);
  sub_25351C770();
  MEMORY[0x270FA5388](v17);
  sub_25351C3B4();
  MEMORY[0x270FA5388](v18);
  sub_2534D97C0();
  sub_2534F8630(v4);
  sub_2539EDF2C();
  sub_253A3E544();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v57 = v1;
    uint64_t v58 = v2;
    sub_253B0A390();
    sub_253A3E90C();
    if (v20)
    {
      sub_253A3E9B8();
      int v22 = *(unsigned __int8 *)(v21 + 32);
      uint64_t v23 = sub_253A3CD70();
      sub_25347B78C(v23, v24, v25, v26, v27, v28);
      uint64_t v30 = v29;
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      if (v30 == v32 >> 1)
      {
        if (v22)
        {
          if (v22 != 1)
          {
            LOBYTE(v61) = 2;
            sub_2539EDF78();
            sub_253A3CBA0();
            sub_2539EE0A8();
            sub_253B0A370();
            sub_2534659CC();
            v51(v50);
            swift_unknownObjectRelease();
            sub_2534B3470();
            v53(v52);
            uint64_t v44 = v58;
            *(_OWORD *)uint64_t v58 = v61;
            *(_OWORD *)(v58 + 16) = v62;
            *(_OWORD *)(v58 + 32) = v63;
            *(void *)(v58 + 48) = v64;
            *(unsigned char *)(v58 + 56) = v65;
            sub_253A3F0EC();
            swift_storeEnumTagMultiPayload();
            sub_253A3F3BC(v58);
            uint64_t v19 = (uint64_t)v4;
LABEL_15:
            sub_2539DF5B8(v44, v59);
            goto LABEL_11;
          }
          sub_2539EE010();
          sub_253A3CBA0();
          uint64_t v19 = (uint64_t)v4;
          sub_253A3EDD0();
          uint64_t v37 = sub_253B0A320();
          uint64_t v39 = v38;
          sub_2534659CC();
          v41(v40);
          swift_unknownObjectRelease();
          sub_2534D91AC();
          v43(v42);
          uint64_t v44 = (uint64_t)v57;
          *uint64_t v57 = v37;
          v57[1] = v39;
          sub_253A3F0EC();
          swift_storeEnumTagMultiPayload();
          uint64_t v45 = (uint64_t)v57;
        }
        else
        {
          sub_2539EE05C();
          uint64_t v44 = v60;
          sub_253A3CBA0();
          sub_253B09120();
          sub_2539E6F90((uint64_t)&qword_269CDBAD0);
          sub_253578ED4();
          sub_2534F8908();
          uint64_t v19 = (uint64_t)v4;
          sub_2534659CC();
          v47(v46);
          swift_unknownObjectRelease();
          sub_2534D9220();
          v49(v48);
          sub_253A3F0EC();
          swift_storeEnumTagMultiPayload();
          uint64_t v45 = v14;
        }
        sub_253A3F3BC(v45);
        goto LABEL_15;
      }
      uint64_t v19 = (uint64_t)v4;
    }
    else
    {
      uint64_t v19 = (uint64_t)v4;
    }
    sub_253B0A090();
    sub_2534D969C();
    sub_253462A5C(&qword_269CDB688);
    sub_253A3ED30();
    sub_2534F8464();
    sub_25347B88C();
    uint64_t v33 = sub_2534F859C();
    v34(v33);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v35 = sub_253A3EC2C();
    v36(v35);
    goto LABEL_11;
  }
  uint64_t v19 = (uint64_t)v4;
LABEL_11:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v19);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539BA46C()
{
}

void sub_2539BA484()
{
}

uint64_t ClientAction.PersonQuery.name.getter()
{
  return sub_2534ACF74();
}

uint64_t ClientAction.PersonQuery.name.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ClientAction.PersonQuery.name.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.PersonQuery.handle.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_2539EDEE4(v2, v3, v4);
}

__n128 ClientAction.PersonQuery.handle.setter(long long *a1)
{
  __n128 v4 = (__n128)a1[1];
  long long v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  sub_253961E40(v1[2], v1[3], v1[4]);
  __n128 result = v4;
  *((_OWORD *)v1 + 1) = v5;
  *((__n128 *)v1 + 2) = v4;
  v1[6] = v2;
  return result;
}

uint64_t (*ClientAction.PersonQuery.handle.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.PersonQuery.isMe.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t ClientAction.PersonQuery.isMe.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*ClientAction.PersonQuery.isMe.modify())()
{
  return nullsub_1;
}

void __swiftcall ClientAction.PersonQuery.init(name:handle:isMe:)(IntelligenceFlowPlannerSupport::ClientAction::PersonQuery *__return_ptr retstr, Swift::String_optional name, IntelligenceFlowPlannerSupport::ClientAction::PersonQuery::Handle_optional *handle, Swift::Bool isMe)
{
  object = handle->value.value.value._object;
  retstr->name = name;
  long long v5 = *(_OWORD *)&handle->value.label.value._object;
  *(_OWORD *)&retstr->handle.value.kind.value = *(_OWORD *)&handle->value.kind.value;
  *(_OWORD *)&retstr->handle.value.label.value._object = v5;
  retstr->handle.value.value.value._object = object;
  retstr->isMe = isMe;
}

void ClientAction.PersonQuery.Handle.kind.getter(unsigned char *a1@<X8>)
{
}

unsigned char *ClientAction.PersonQuery.Handle.kind.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*ClientAction.PersonQuery.Handle.kind.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.PersonQuery.Handle.label.getter()
{
  return sub_2534ACF74();
}

uint64_t ClientAction.PersonQuery.Handle.label.setter()
{
  sub_2535E24E8();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v0;
  return result;
}

uint64_t (*ClientAction.PersonQuery.Handle.label.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.PersonQuery.Handle.value.getter()
{
  return sub_2534ACF74();
}

uint64_t ClientAction.PersonQuery.Handle.value.setter()
{
  sub_2535E24E8();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*ClientAction.PersonQuery.Handle.value.modify())()
{
  return nullsub_1;
}

void __swiftcall ClientAction.PersonQuery.Handle.init(kind:label:value:)(IntelligenceFlowPlannerSupport::ClientAction::PersonQuery::Handle *__return_ptr retstr, IntelligenceFlowPlannerSupport::ClientAction::PersonQuery::Handle::Kind_optional kind, Swift::String_optional label, Swift::String_optional value)
{
  retstr->kind.value = *(unsigned char *)kind.value;
  retstr->label = label;
  retstr->value = value;
}

uint64_t ClientAction.PersonQuery.Handle.Kind.hash(into:)()
{
  return sub_253B0A600();
}

BOOL static ClientAction.PersonQuery.Handle.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2539BA770(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E6F6870 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C69616D65 && a2 == 0xE500000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x656D697465636166 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539BA8B8(char a1)
{
  if (!a1) {
    return 0x656E6F6870;
  }
  if (a1 == 1) {
    return 0x6C69616D65;
  }
  return 0x656D697465636166;
}

uint64_t sub_2539BA908()
{
  return sub_2539BA8B8(*v0);
}

uint64_t sub_2539BA910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BA770(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BA938(uint64_t a1)
{
  unint64_t v2 = sub_2539EE0F4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BA974(uint64_t a1)
{
  unint64_t v2 = sub_2539EE0F4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539BA9B0(uint64_t a1)
{
  unint64_t v2 = sub_2539EE18C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BA9EC(uint64_t a1)
{
  unint64_t v2 = sub_2539EE18C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539BAA28(uint64_t a1)
{
  unint64_t v2 = sub_2539EE140();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BAA64(uint64_t a1)
{
  unint64_t v2 = sub_2539EE140();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539BAAA0(uint64_t a1)
{
  unint64_t v2 = sub_2539EE1D8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BAADC(uint64_t a1)
{
  unint64_t v2 = sub_2539EE1D8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.PersonQuery.Handle.Kind.encode(to:)()
{
  sub_2534847F8();
  sub_253A3E9C8();
  sub_253462A5C(&qword_269CE6628);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534AF2A0(v2, v17);
  sub_253462A5C(&qword_269CE6630);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE6638);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253465A3C();
  sub_253462A5C(&qword_269CE6640);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  int v6 = *v0;
  sub_253A3BED4();
  sub_2539EE0F4();
  sub_253A3F148();
  if (v6)
  {
    if (v6 == 1)
    {
      sub_2539EE18C();
      sub_253A3BD18();
      sub_2534D9AD0();
    }
    else
    {
      sub_2539EE140();
      sub_253A3BD18();
      sub_2534D8E50();
    }
  }
  else
  {
    sub_2539EE1D8();
    sub_253A3BD18();
  }
  sub_2534659CC();
  v11(v7, v8, v9, v10);
  sub_2534DA4BC();
  v16(v12, v13, v14, v15);
  sub_253A3F5C8();
  sub_2534847C8();
}

void ClientAction.PersonQuery.Handle.Kind.init(from:)()
{
  sub_2534847F8();
  uint64_t v43 = v0;
  uint64_t v2 = v1;
  uint64_t v41 = v3;
  sub_253462A5C(&qword_269CE6668);
  sub_253465998();
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  sub_2534D92D4(v6, v37[0]);
  sub_253462A5C(&qword_269CE6670);
  sub_253465998();
  v37[6] = v7;
  uint64_t v38 = v8;
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  uint64_t v9 = (unsigned char *)sub_253462A5C(&qword_269CE6678);
  sub_253465998();
  v37[5] = v10;
  MEMORY[0x270FA5388](v11);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6680);
  sub_253465998();
  uint64_t v42 = v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v2[4];
  sub_2534F8630(v2);
  sub_2539EE0F4();
  sub_253A3E4B4();
  if (v0) {
    goto LABEL_8;
  }
  sub_253A3D9F0();
  sub_253A3E90C();
  if (!v17 || (uint64_t v18 = sub_253A3C8D0(), sub_25347B78C(v18, v19, v20, v21, v22, v23), sub_253A3F860(), v16))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v28 = v27;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v28 = &type metadata for ClientAction.PersonQuery.Handle.Kind;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v29();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v30 = sub_25349C5B8();
    v31(v30);
    uint64_t v2 = v43;
LABEL_8:
    uint64_t v32 = (uint64_t)v2;
    goto LABEL_9;
  }
  char v24 = (char)v15;
  if (v15)
  {
    if (v15 == 1)
    {
      sub_2539EE18C();
      sub_2534F8800();
      sub_253A3D4D4();
      sub_2534659CC();
      v25();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v26();
    }
    else
    {
      LODWORD(v38) = v15;
      sub_2539EE140();
      sub_2534F8800();
      sub_253A3D4D4();
      sub_2534659CC();
      v35();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v36();
      char v24 = v38;
    }
  }
  else
  {
    sub_2539EE1D8();
    sub_2534F8800();
    sub_2534659CC();
    v33();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v34();
    uint64_t v9 = v41;
  }
  *uint64_t v9 = v24;
  uint64_t v32 = (uint64_t)v43;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v32);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539BB140()
{
}

void sub_2539BB158()
{
}

uint64_t static ClientAction.PersonQuery.Handle.== infix(_:_:)(void *a1, void *a2)
{
  int v4 = *(unsigned __int8 *)a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  int v9 = *(unsigned __int8 *)a2;
  uint64_t v10 = a2[2];
  uint64_t v12 = a2[3];
  uint64_t v11 = a2[4];
  if (v4 == 3)
  {
    if (v9 != 3) {
      return 0;
    }
  }
  else if (v9 == 3 || v4 != v9)
  {
    return 0;
  }
  if (!v6)
  {
    if (v10) {
      return 0;
    }
    goto LABEL_18;
  }
  if (!v10) {
    return 0;
  }
  BOOL v14 = v5 == a2[1] && v6 == v10;
  if (v14 || (sub_253B0A4C0(), uint64_t result = sub_25397F648(), (v16 & 1) != 0))
  {
LABEL_18:
    if (v8)
    {
      if (!v11) {
        return 0;
      }
      BOOL v17 = v7 == v12 && v8 == v11;
      return v17 || (sub_253A3CB64() & 1) != 0;
    }
    return !v11;
  }
  return result;
}

uint64_t sub_2539BB23C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539BB374(char a1)
{
  if (!a1) {
    return 1684957547;
  }
  if (a1 == 1) {
    return 0x6C6562616CLL;
  }
  return 0x65756C6176;
}

uint64_t sub_2539BB3BC()
{
  return sub_2539BB374(*v0);
}

uint64_t sub_2539BB3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BB23C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BB3EC(uint64_t a1)
{
  unint64_t v2 = sub_2539EE224();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BB428(uint64_t a1)
{
  unint64_t v2 = sub_2539EE224();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.PersonQuery.Handle.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE6688);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253A3B978(v2);
  sub_2539EE224();
  sub_253B0A680();
  sub_2539EE270();
  sub_253A3EDD0();
  sub_253B0A3E0();
  if (!v0)
  {
    sub_253A3CF40();
    sub_253A3E248();
    sub_253A3D2B8();
    sub_2534D9B1C();
    sub_253A3E248();
  }
  sub_25351C5C0();
  sub_2534F85D4();
  v4();
  sub_2534F8590();
  sub_2534847C8();
}

void ClientAction.PersonQuery.Handle.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_2534847F8();
  sub_253A3C3A8();
  sub_253462A5C(&qword_269CE66A0);
  sub_253465998();
  MEMORY[0x270FA5388](v16);
  sub_2534F83CC();
  sub_2539EE224();
  sub_2534F8738();
  if (!v14)
  {
    sub_2539EE2BC();
    sub_253B0A310();
    sub_253A3CF40();
    uint64_t v17 = sub_253A3CCFC();
    uint64_t v19 = v18;
    uint64_t v24 = v17;
    sub_253A3D2B8();
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_253A3CCFC();
    uint64_t v22 = v21;
    sub_2534D9A08();
    v23();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)uint64_t v15 = a13;
    *(void *)(v15 + 8) = v24;
    *(void *)(v15 + 16) = v19;
    *(void *)(v15 + 24) = v20;
    *(void *)(v15 + 32) = v22;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253579494();
  sub_2534847C8();
}

uint64_t sub_2539BB760(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656C646E6168 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1699574633 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539BB888(char a1)
{
  if (!a1) {
    return 1701667182;
  }
  if (a1 == 1) {
    return 0x656C646E6168;
  }
  return 1699574633;
}

void sub_2539BB8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ClientAction.PersonQuery.Handle.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void sub_2539BB8E8()
{
}

uint64_t sub_2539BB900()
{
  return sub_2539BB888(*v0);
}

uint64_t sub_2539BB908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BB760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BB930(uint64_t a1)
{
  unint64_t v2 = sub_2539EE308();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BB96C(uint64_t a1)
{
  unint64_t v2 = sub_2539EE308();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.PersonQuery.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE66B0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_2534F8630(v2);
  sub_2539EE308();
  sub_253B0A680();
  sub_2534D9840();
  sub_253A3EF18();
  sub_253B0A3B0();
  if (!v0)
  {
    sub_2534D9E60();
    sub_2539EE354();
    sub_253A3C9CC();
    sub_253A3CEB0();
  }
  sub_2534B3470();
  v4();
  sub_253578DEC();
  sub_2534847C8();
}

void ClientAction.PersonQuery.init(from:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CE66C8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25346CC6C();
  sub_25397F800(v2);
  sub_2539EE308();
  sub_253B0A660();
  if (v0)
  {
    sub_253A3C00C();
    uint64_t v22 = sub_253A3D5D8();
  }
  else
  {
    LOBYTE(v27) = 0;
    uint64_t v6 = sub_253B0A2E0();
    uint64_t v8 = v7;
    sub_2534D9E60();
    sub_2539EE3A0();
    sub_253A3F624();
    sub_253B0A310();
    uint64_t v9 = sub_253A3D5D8();
    uint64_t v25 = v10;
    uint64_t v26 = v11;
    sub_2539EDEE4(v9, v12, v13);
    char v14 = sub_2534F87CC();
    sub_2534D97B4();
    v15();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_253A3D5D8();
    sub_2539EDEE4(v16, v17, v18);
    uint64_t v19 = sub_253A3E5B0();
    sub_253961E40(v19, v20, v21);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v6;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = v27;
    *(void *)(v4 + 24) = v28;
    *(void *)(v4 + 32) = v29;
    *(void *)(v4 + 40) = v25;
    *(void *)(v4 + 48) = v26;
    *(unsigned char *)(v4 + 56) = v14 & 1;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_253A3E5B0();
  }
  sub_253961E40(v22, v23, v24);
  sub_253579494();
  sub_2534847C8();
}

void sub_2539BBDA0()
{
}

void sub_2539BBDB8()
{
}

uint64_t ClientAction.UnresolvedParameterValue.raw.getter()
{
  return sub_2539DE358();
}

uint64_t ClientAction.UnresolvedParameterValue.raw.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ClientAction.UnresolvedParameterValue.raw.modify())()
{
  return nullsub_1;
}

uint64_t ClientAction.UnresolvedParameterValue.candidates.getter()
{
  return sub_2539BD0A8();
}

uint64_t ClientAction.UnresolvedParameterValue.candidates.setter()
{
  return sub_2539BD0F8();
}

uint64_t (*ClientAction.UnresolvedParameterValue.candidates.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for ClientAction.UnresolvedParameterValue(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t ClientAction.UnresolvedParameterValue.init(raw:candidates:)(uint64_t a1, uint64_t a2)
{
  return sub_2539BD1A4(a1, a2, MEMORY[0x263F80508], type metadata accessor for ClientAction.UnresolvedParameterValue);
}

uint64_t sub_2539BBEBC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7823730 && a2 == 0xE300000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539BBFA8(char a1)
{
  if (a1) {
    return 0x74616469646E6163;
  }
  else {
    return 7823730;
  }
}

uint64_t sub_2539BBFDC()
{
  return sub_2539BBFA8(*v0);
}

uint64_t sub_2539BBFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BBEBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BC00C(uint64_t a1)
{
  unint64_t v2 = sub_2539EE3EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BC048(uint64_t a1)
{
  unint64_t v2 = sub_2539EE3EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.UnresolvedParameterValue.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE66D8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EE3EC();
  sub_2534DA3BC();
  sub_253A3EE60();
  sub_2539E6F90((uint64_t)&qword_269CDBAB8);
  sub_253A3B6D0();
  if (!v0)
  {
    uint64_t v2 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
    sub_253A3CB4C(v2);
    sub_253462A5C(&qword_269CDF1B8);
    sub_2539EE438();
    sub_2534DA628();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void ClientAction.UnresolvedParameterValue.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v11 = v3;
  sub_253B09120();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534B3294();
  sub_253462A5C(&qword_269CE66E8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_25349888C();
  type metadata accessor for ClientAction.UnresolvedParameterValue(v6);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  sub_2534F8630(v2);
  sub_2539EE3EC();
  sub_253A3CB7C();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    sub_253A3D3C0();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_253A3BBDC();
    sub_25347FA84();
    v8();
    uint64_t v9 = sub_253462A5C(&qword_269CDF1B8);
    sub_25351C8C4();
    sub_2539EE4DC();
    sub_253A3BEF4();
    sub_2534F85D4();
    v10();
    sub_253A3D724();
    sub_2539DF660(v9, v11);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

uint64_t sub_2539BC40C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x7551746E65696C63 && a2 == 0xED00006449797265;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x6E6576456E616C70 && a2 == 0xEB00000000644974;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x8000000253B12170 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x617261506D696873 && a2 == 0xEE0073726574656DLL)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = sub_253B0A4C0();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

unint64_t sub_2539BC750(char a1)
{
  unint64_t result = 0x6E656D6574617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64496C6F6F74;
      break;
    case 2:
      unint64_t result = 0x6574656D61726170;
      break;
    case 3:
      unint64_t result = 0x7551746E65696C63;
      break;
    case 4:
      unint64_t result = 0x6E6576456E616C70;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0x617261506D696873;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2539BC85C()
{
}

void sub_2539BC874()
{
}

unint64_t sub_2539BC88C()
{
  return sub_2539BC750(*v0);
}

uint64_t sub_2539BC894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BC40C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BC8BC(uint64_t a1)
{
  unint64_t v2 = sub_2539EE580();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BC8F8(uint64_t a1)
{
  unint64_t v2 = sub_2539EE580();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientAction.encode(to:)()
{
  sub_2535B45A0();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE66F0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EE580();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3EE1C();
  sub_25397F654();
  if (!v0)
  {
    type metadata accessor for ClientAction(0);
    sub_25397F5D0();
    sub_253462A5C(&qword_269CDBAA8);
    sub_253486B10();
    sub_25397F654();
    sub_253A3ED9C();
    sub_25397F738();
    sub_253A3C68C();
    sub_25397F738();
    sub_253462A5C(&qword_269CE6700);
    sub_2539EE5CC();
    sub_25397F654();
    sub_253462A5C(&qword_269CE6718);
    sub_2539EE678();
    sub_25397F654();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_253A3EEB0();
  sub_2535B4660();
}

void ClientAction.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE6730);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  uint64_t v15 = sub_2534D9B74();
  type metadata accessor for ClientAction(v15);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v16);
  sub_253A3E814();
  uint64_t v19 = (uint64_t *)(v18 + v17[7]);
  *uint64_t v19 = 0;
  v19[1] = 0;
  uint64_t v30 = v17;
  unint64_t v31 = v19;
  uint64_t v20 = v18;
  uint64_t v21 = (uint64_t *)(v18 + v17[8]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  uint64_t v32 = v21;
  sub_253A3B978(v12);
  sub_2539EE580();
  sub_253B0A660();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE1C();
    sub_253B0A370();
    sub_253579264();
    sub_25347FA84();
    v22();
    LOBYTE(a10) = 1;
    uint64_t v23 = sub_253B0A320();
    sub_253A3EF9C(v23, v24, v30[5]);
    sub_253462A5C(&qword_269CDBAA8);
    sub_253A3D2AC();
    sub_253486CE4();
    sub_253A3BF64();
    *(void *)(v20 + v30[6]) = a10;
    *unint64_t v31 = sub_253A3E82C(3);
    v31[1] = v25;
    *uint64_t v32 = sub_253A3E82C(4);
    v32[1] = v26;
    sub_253462A5C(&qword_269CE6700);
    sub_2539EE724();
    sub_253A3BF64();
    *(void *)(v20 + v30[9]) = a10;
    sub_253462A5C(&qword_269CE6718);
    sub_2539EE7D0();
    sub_253A3BF64();
    sub_25351C3E8();
    v27();
    *(void *)(v20 + v30[10]) = a10;
    uint64_t v28 = sub_253A3EB88();
    sub_2539DF660(v28, v29);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539BD00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ClientAction.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539BD024()
{
}

uint64_t QueryStep.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t QueryStep.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*QueryStep.statementId.modify())()
{
  return nullsub_1;
}

uint64_t QueryStep.queries.getter()
{
  return sub_2539BD0A8();
}

uint64_t sub_2539BD0A8()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t QueryStep.queries.setter()
{
  return sub_2539BD0F8();
}

uint64_t sub_2539BD0F8()
{
  uint64_t v2 = sub_2534D9690();
  uint64_t v4 = *(int *)(v3(v2) + 20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v4) = v0;
  return result;
}

uint64_t (*QueryStep.queries.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for QueryStep(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t QueryStep.init(statementId:queries:)(uint64_t a1, uint64_t a2)
{
  return sub_2539BD1A4(a1, a2, MEMORY[0x263F4BF98], type metadata accessor for QueryStep);
}

uint64_t sub_2539BD1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = sub_2539447CC();
  v8(v7);
  sub_25346CAF4();
  sub_2534D8E14();
  v9();
  uint64_t result = a4(0);
  *(void *)(v5 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_2539BD214(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656972657571 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539BD31C(char a1)
{
  if (a1) {
    return 0x73656972657571;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2539BD35C()
{
  return sub_2539BD31C(*v0);
}

uint64_t sub_2539BD364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BD214(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BD38C(uint64_t a1)
{
  unint64_t v2 = sub_2539EE87C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BD3C8(uint64_t a1)
{
  unint64_t v2 = sub_2539EE87C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryStep.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6758);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EE87C();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    uint64_t Step = type metadata accessor for QueryStep(0);
    sub_253A3CB4C(Step);
    sub_253462A5C(&qword_269CE6768);
    sub_2539EE8C8();
    sub_2534DA628();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void QueryStep.init(from:)()
{
  sub_2534847F8();
  sub_2534F89C8(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253462A5C(&qword_269CE6780);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_25349888C();
  type metadata accessor for QueryStep(v5);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534F8630(v0);
  sub_2539EE87C();
  sub_253A3CB7C();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_253A3D3C0();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3BBDC();
    sub_25347FA84();
    v7();
    uint64_t v8 = sub_253462A5C(&qword_269CE6768);
    sub_25351C8C4();
    sub_2539EE96C();
    sub_253A3BEF4();
    sub_2534F85D4();
    v9();
    sub_253A3D724();
    sub_2539DF660(v8, v10);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539BD77C()
{
}

void sub_2539BD794()
{
}

uint64_t ParameterQuery.context.getter()
{
  uint64_t v0 = sub_2535E27CC();
  return sub_2539DF660(v0, v1);
}

uint64_t ParameterQuery.context.setter(uint64_t a1)
{
  return sub_2539E7074(a1, v1);
}

uint64_t (*ParameterQuery.context.modify())()
{
  return nullsub_1;
}

uint64_t ParameterQuery.data.getter()
{
  return sub_2539BF17C();
}

uint64_t ParameterQuery.data.setter()
{
  return sub_2539BF1EC();
}

uint64_t (*ParameterQuery.data.modify())()
{
  return nullsub_1;
}

uint64_t ParameterQuery.dependencies.getter()
{
  return sub_2539BD8E4();
}

uint64_t sub_2539BD8E4()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t ParameterQuery.dependencies.setter()
{
  return sub_2539BD934();
}

uint64_t sub_2539BD934()
{
  uint64_t v2 = sub_2534D9690();
  uint64_t v4 = *(int *)(v3(v2) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v4) = v0;
  return result;
}

uint64_t (*ParameterQuery.dependencies.modify())()
{
  return nullsub_1;
}

uint64_t ParameterQuery.deviceId.getter()
{
  return sub_2539B00CC();
}

uint64_t ParameterQuery.deviceId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539B5410(a1, a2);
}

uint64_t (*ParameterQuery.deviceId.modify())()
{
  return nullsub_1;
}

void ParameterQuery.init(context:data:dependencies:deviceId:)()
{
  sub_2535B3C98();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_253A3D4E4();
  BOOL v9 = (int *)type metadata accessor for ParameterQuery(v8);
  uint64_t v10 = (void *)(v1 + v9[7]);
  uint64_t v11 = sub_2534D9B1C();
  sub_2539DF5B8(v11, v12);
  sub_2539DF5B8(v0, v1 + v9[5]);
  *(void *)(v1 + v9[6]) = v7;
  *uint64_t v10 = v5;
  v10[1] = v3;
  sub_25346CD04();
}

void ParameterQuery.description.getter()
{
  sub_253A3C038();
  sub_253A3BDD0();
  sub_253B0A000();
  sub_253A3C8C4();
  sub_253A3DE30();
  sub_253A3C2E4();
  type metadata accessor for ActionParameterContext(0);
  sub_253B0A170();
  sub_253A3EAE8();
  sub_253B09860();
  type metadata accessor for ParameterQuery(0);
  uint64_t v0 = sub_253A3ECEC();
  type metadata accessor for QueryData(v0);
  sub_253B0A170();
  sub_253A3C5D0();
  sub_253B09860();
  sub_253B059D0();
  sub_253B09120();
  sub_2539E6F90((uint64_t)&qword_269CDBEB0);
  swift_bridgeObjectRetain();
  sub_253B09590();
  sub_253A3EE98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253A3D1D4();
  swift_bridgeObjectRetain();
  sub_253A3F60C();
  swift_bridgeObjectRelease();
  sub_25351C9C4();
  sub_253A3BEC0();
}

uint64_t static ParameterQuery.== infix(_:_:)()
{
  if ((sub_253A3D21C() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = type metadata accessor for ActionParameterContext(0);
  sub_25397F578();
  BOOL v5 = v5 && v3 == v4;
  if (v5 || (sub_253B0A4C0(), uint64_t result = sub_25397F648(), (v7 & 1) != 0))
  {
    uint64_t v8 = *(int *)(v2 + 24);
    uint64_t v9 = *(void *)(v1 + v8);
    uint64_t v10 = *(void *)(v1 + v8 + 8);
    uint64_t v12 = *(void *)(v1 + v8 + 16);
    uint64_t v11 = *(void *)(v1 + v8 + 24);
    uint64_t v13 = (void *)(v0 + v8);
    uint64_t v15 = v13[2];
    uint64_t v14 = v13[3];
    BOOL v16 = v9 == *v13 && v10 == v13[1];
    if (v16 || (sub_253B0A4C0(), uint64_t result = sub_25397F648(), (v17 & 1) != 0))
    {
      if (v11)
      {
        if (!v14) {
          return 0;
        }
        if (v12 != v15 || v11 != v14)
        {
          sub_2534D973C();
          sub_253B0A4C0();
          uint64_t result = sub_25397F648();
          if ((v19 & 1) == 0) {
            return result;
          }
        }
      }
      else if (v14)
      {
        return 0;
      }
      uint64_t v20 = type metadata accessor for ParameterQuery(0);
      sub_253A3BFB0(v20);
      static QueryData.== infix(_:_:)();
      if (v21)
      {
        sub_253A3C3B8(*(int *)(v20 + 24));
        sub_2534BC684();
        if (v22)
        {
          sub_253A3BE60();
          if (v25)
          {
            if (v23)
            {
              sub_2535B3D0C(v24);
              BOOL v28 = v5 && v26 == v27;
              if (v28 || (sub_253B0A4C0() & 1) != 0) {
                return 1;
              }
            }
          }
          else if (!v23)
          {
            return 1;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

void static QueryData.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v6 = sub_253A3EF6C();
  uint64_t v7 = type metadata accessor for PropertyQuery(v6);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v24 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_253483660();
  type metadata accessor for QueryData(v10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2536D2D54();
  MEMORY[0x270FA5388](v12);
  sub_253A3B9E4();
  MEMORY[0x270FA5388](v13);
  sub_2535B45C8();
  MEMORY[0x270FA5388](v14);
  sub_2535B3D6C();
  uint64_t v15 = sub_253462A5C(&qword_269CE6798);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_253A3D758();
  sub_2539DF660(v2, v0);
  uint64_t v17 = sub_25353CE60();
  sub_2539DF660(v17, v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_253A3EB44();
      uint64_t v21 = *v4;
      uint64_t v20 = v4[1];
      if (sub_253A3C390() == 1) {
        goto LABEL_7;
      }
      goto LABEL_13;
    case 2u:
      sub_253A3F834();
      if (sub_253A3C390() == 2)
      {
        sub_2539DF5B8(v1, v24);
        sub_2534D9B10();
        static PropertyQuery.== infix(_:_:)();
        sub_2539DF610();
        sub_2539DF610();
        goto LABEL_17;
      }
      sub_2539DF610();
      goto LABEL_15;
    case 3u:
      sub_2539DF660(v0, (uint64_t)v3);
      uint64_t v21 = *v3;
      uint64_t v20 = v3[1];
      if (sub_253A3C390() != 3) {
        goto LABEL_13;
      }
LABEL_7:
      if (v21 == *(void *)v1 && v20 == *(void *)(v1 + 8))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_2534DA178();
        sub_253B0A4C0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_17;
    default:
      sub_253A3F81C();
      char v19 = *v5;
      if (sub_253A3C390())
      {
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_15:
        sub_253472458(v0, &qword_269CE6798);
      }
      else
      {
        sub_2534B5C40(v19, *(void **)v1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_17:
        sub_2539DF610();
      }
      sub_2534D9090();
      sub_253465A14();
      return;
  }
}

uint64_t sub_2539BE14C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x747865746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1635017060 && a2 == 0xE400000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6E65646E65706564 && a2 == 0xEC00000073656963;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6449656369766564 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539BE304(char a1)
{
  uint64_t result = 0x747865746E6F63;
  switch(a1)
  {
    case 1:
      uint64_t result = 1635017060;
      break;
    case 2:
      uint64_t result = 0x6E65646E65706564;
      break;
    case 3:
      uint64_t result = 0x6449656369766564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539BE398()
{
  return sub_2539BE304(*v0);
}

uint64_t sub_2539BE3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BE14C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BE3C8(uint64_t a1)
{
  unint64_t v2 = sub_2539EEA50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BE404(uint64_t a1)
{
  unint64_t v2 = sub_2539EEA50();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ParameterQuery.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE67A0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EEA50();
  sub_2534DA3BC();
  uint64_t v2 = sub_253A3DA44();
  type metadata accessor for ActionParameterContext(v2);
  sub_2539E6F90((uint64_t)&qword_269CE5438);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ParameterQuery(0);
    uint64_t v3 = sub_253A3B8BC();
    type metadata accessor for QueryData(v3);
    sub_2539E6F90((uint64_t)&unk_269CE67B0);
    sub_2534F84DC();
    sub_253A3D2AC();
    sub_253462A5C(&qword_269CE67B8);
    sub_2539EEA9C();
    sub_2534DA628();
    sub_253B0A3B0();
  }
  uint64_t v4 = sub_2534F82A4();
  v5(v4);
  sub_2534F8864();
  sub_2535B4660();
}

void ParameterQuery.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  uint64_t v23 = v5;
  type metadata accessor for QueryData(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534D9B74();
  type metadata accessor for ActionParameterContext(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534B33C8(v9, v22);
  sub_253462A5C(&qword_269CE67C8);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = sub_2534B33AC();
  uint64_t v12 = type metadata accessor for ParameterQuery(v11);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_253465A3C();
  uint64_t v15 = (uint64_t *)(v1 + *(int *)(v14 + 28));
  *uint64_t v15 = 0;
  v15[1] = 0;
  uint64_t v24 = v15;
  sub_25397F800(v4);
  sub_2539EEA50();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CE5448);
    sub_253A3C6B8();
    sub_253B0A370();
    uint64_t v16 = sub_2534D9B1C();
    sub_2539DF5B8(v16, v17);
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE67D0);
    sub_253A3E0CC();
    sub_253A3EFA8();
    sub_253B0A370();
    sub_2539DF5B8(v2, v1 + *(int *)(v12 + 20));
    sub_253462A5C(&qword_269CE67B8);
    sub_253A3C6A0();
    sub_2539EEB78();
    sub_253B0A370();
    *(void *)(v1 + *(int *)(v12 + 24)) = v25;
    sub_253A3C954();
    uint64_t v18 = sub_253B0A2E0();
    uint64_t v20 = v19;
    sub_2534D91AC();
    v21();
    swift_bridgeObjectRelease();
    uint64_t *v24 = v18;
    v24[1] = v20;
    sub_2539DF660(0, v23);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539BEA40()
{
}

void sub_2539BEA58()
{
}

uint64_t VariableStep.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t VariableStep.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*VariableStep.statementId.modify())()
{
  return nullsub_1;
}

uint64_t VariableStep.setters.getter()
{
  return sub_2539BD0A8();
}

uint64_t VariableStep.setters.setter()
{
  return sub_2539BD0F8();
}

uint64_t (*VariableStep.setters.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for VariableStep(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t VariableStep.init(statementId:setters:)(uint64_t a1, uint64_t a2)
{
  return sub_2539BD1A4(a1, a2, MEMORY[0x263F4BF98], type metadata accessor for VariableStep);
}

uint64_t sub_2539BEB64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73726574746573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539BEC6C(char a1)
{
  if (a1) {
    return 0x73726574746573;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2539BECAC()
{
  return sub_2539BEC6C(*v0);
}

uint64_t sub_2539BECB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BEB64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BECDC(uint64_t a1)
{
  unint64_t v2 = sub_2539EEC54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BED18(uint64_t a1)
{
  unint64_t v2 = sub_2539EEC54();
  return MEMORY[0x270FA00B8](a1, v2);
}

void VariableStep.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE67E0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EEC54();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    uint64_t v2 = type metadata accessor for VariableStep(0);
    sub_253A3CB4C(v2);
    sub_253462A5C(&qword_269CE67F0);
    sub_2539EECA0();
    sub_2534DA628();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void VariableStep.init(from:)()
{
  sub_2534847F8();
  sub_2534F89C8(v2);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253462A5C(&qword_269CE6808);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_25349888C();
  type metadata accessor for VariableStep(v5);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534F8630(v0);
  sub_2539EEC54();
  sub_253A3CB7C();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_253A3D3C0();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3BBDC();
    sub_25347FA84();
    v7();
    uint64_t v8 = sub_253462A5C(&qword_269CE67F0);
    sub_25351C8C4();
    sub_2539EED44();
    sub_253A3BEF4();
    sub_2534F85D4();
    v9();
    sub_253A3D724();
    sub_2539DF660(v8, v10);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539BF0CC()
{
}

void sub_2539BF0E4()
{
}

uint64_t ExecutionStepResult.stepId.getter()
{
  return sub_2539DE358();
}

uint64_t ExecutionStepResult.stepId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ExecutionStepResult.stepId.modify())()
{
  return nullsub_1;
}

uint64_t ExecutionStepResult.result.getter()
{
  return sub_2539BF17C();
}

uint64_t sub_2539BF17C()
{
  uint64_t v2 = sub_2535E2348();
  uint64_t v4 = v3(v2);
  return sub_2539DF660(v0 + *(int *)(v4 + 20), v1);
}

uint64_t ExecutionStepResult.result.setter()
{
  return sub_2539BF1EC();
}

uint64_t sub_2539BF1EC()
{
  uint64_t v0 = sub_2534D976C();
  v1(v0);
  uint64_t v2 = sub_253A3EFC8();
  return sub_2539E7074(v2, v3);
}

uint64_t (*ExecutionStepResult.result.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for ExecutionStepResult(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t ExecutionStepResult.init(stepId:result:)()
{
  sub_2535E24D4();
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534D8E14();
  v2();
  uint64_t v3 = type metadata accessor for ExecutionStepResult(0);
  return sub_2539DF5B8(v0, v1 + *(int *)(v3 + 20));
}

uint64_t static ExecutionStepResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_2539D462C(a1, a2, MEMORY[0x263F074F0], type metadata accessor for ExecutionStepResult, (uint64_t (*)(uint64_t))static ActionResult.== infix(_:_:));
}

void static ActionResult.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  sub_253B06820();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25348366C();
  sub_253462A5C(&qword_269CDCB48);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CDBB28);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v9);
  sub_25351C770();
  MEMORY[0x270FA5388](v10);
  sub_253A3BB6C();
  if (sub_253B05AA0())
  {
    uint64_t v11 = sub_253A3DBFC();
    uint64_t v12 = type metadata accessor for ActionResult(v11);
    uint64_t v13 = sub_253A3CB08(v12);
    sub_253A3DE00(v13);
    sub_253A3C488(*(int *)(v4 + 20));
    sub_253A3BACC();
    sub_253A3C4A4();
    uint64_t v14 = sub_2534F88B8(v0);
    if (!v16)
    {
      sub_253A3DF48(v14, v15, &qword_269CDBB28);
      sub_2534F88B8(v2);
      if (!v16)
      {
        sub_25347FA84();
        v19();
        sub_2539E6F90((uint64_t)&unk_269CDCB50);
        sub_2536D53CC();
        uint64_t v20 = *(void (**)(void))(v21 + 8);
        sub_2534D97B4();
        v20();
        sub_253A3BC88();
        sub_253A3BCE4();
        sub_2534D97B4();
        v20();
        sub_253A3CE14();
        goto LABEL_11;
      }
      sub_253A3BC88();
      sub_253A3BCE4();
      uint64_t v17 = sub_253A3BAB4();
      v18(v17);
LABEL_10:
      sub_253472458(v0, &qword_269CDCB48);
      goto LABEL_11;
    }
    sub_253A3BC88();
    sub_253A3BCE4();
    sub_2534F88B8(v2);
    if (!v16) {
      goto LABEL_10;
    }
    sub_253472458(v0, &qword_269CDBB28);
  }
LABEL_11:
  sub_253465A14();
}

uint64_t sub_2539BF594(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644970657473 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539BF67C(char a1)
{
  if (a1) {
    return 0x746C75736572;
  }
  else {
    return 0x644970657473;
  }
}

uint64_t sub_2539BF6A4()
{
  return sub_2539BF67C(*v0);
}

uint64_t sub_2539BF6AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BF594(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539BF6D4(uint64_t a1)
{
  unint64_t v2 = sub_2539EEE08();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539BF710(uint64_t a1)
{
  unint64_t v2 = sub_2539EEE08();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExecutionStepResult.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6820);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EEE08();
  sub_2534DA3BC();
  sub_253A3DA50();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ExecutionStepResult(0);
    uint64_t v2 = sub_253A3B8BC();
    type metadata accessor for ActionResult(v2);
    sub_2539E6F90((uint64_t)&unk_269CE6830);
    sub_2534F84DC();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void ExecutionStepResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = sub_253A3D298(v4);
  type metadata accessor for ActionResult(v5);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_253A3C504();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534AF2A0(v8, v15);
  sub_253462A5C(&qword_269CE6838);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_2534AF2D8();
  uint64_t v11 = type metadata accessor for ExecutionStepResult(v10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  sub_25346CC6C();
  sub_2534F8630(v0);
  sub_2539EEE08();
  sub_253A3CBDC();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3C6B8();
    sub_253A3CE98();
    sub_253A3DB5C();
    sub_25347FA84();
    v13();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE6840);
    sub_253A3E0CC();
    sub_253A3CE98();
    sub_2534659CC();
    v14();
    sub_2539DF5B8(v2, v3 + *(int *)(v11 + 20));
    sub_253A3F698();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539BFB80()
{
}

void sub_2539BFB98()
{
}

void static PropertyQuery.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v19 = v4;
  uint64_t v5 = sub_2534DA6BC();
  type metadata accessor for QueryPredicate(v5);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534AF2D8();
  type metadata accessor for PropertyQuery(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_25351C738();
  MEMORY[0x270FA5388](v9);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v10);
  sub_2534D9E98();
  uint64_t v11 = sub_253462A5C(&qword_269CE6848);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2535E2544();
  uint64_t v14 = v0 + v13;
  sub_2539DF660(v3, v0);
  sub_2539DF660(v19, v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_253A3F81C();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_4:
        sub_2534D9718();
        sub_2534B9E10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2539DF610();
        goto LABEL_10;
      }
    }
    else
    {
      sub_253A3EB44();
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
LABEL_9:
    sub_253472458(v0, &qword_269CE6848);
    goto LABEL_10;
  }
  sub_2539DF660(v0, v2);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_2539DF610();
    goto LABEL_9;
  }
  uint64_t v16 = sub_25353CE60();
  sub_2539DF5B8(v16, v17);
  BOOL v18 = *(void *)v2 == *(void *)v1 && *(void *)(v2 + 8) == *(void *)(v1 + 8);
  if (v18 || (sub_253B0A4C0()) && (sub_25357BE30(*(unsigned char *)(v2 + 16), *(unsigned char *)(v1 + 16))) {
    sub_253B090F0();
  }
  sub_2539DF610();
  sub_2539DF610();
  sub_2539DF610();
LABEL_10:
  sub_2534D9090();
  sub_253465A14();
}

uint64_t sub_2539BFF14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEF79726575517265;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7551676E69727473 && a2 == 0xEB00000000797265;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x79747265706F7270 && a2 == 0xED00007972657551;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x75516D6574737973 && a2 == 0xEB00000000797265)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539C0138(char a1)
{
  uint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x676E69727473;
      goto LABEL_5;
    case 2:
      uint64_t result = 0x79747265706F7270;
      break;
    case 3:
      uint64_t v3 = 0x6D6574737973;
LABEL_5:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7551000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539C01E4()
{
  return sub_2539C0138(*v0);
}

uint64_t sub_2539C01EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539BFF14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C0214(uint64_t a1)
{
  unint64_t v2 = sub_2539EEE74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C0250(uint64_t a1)
{
  unint64_t v2 = sub_2539EEE74();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C028C(uint64_t a1)
{
  unint64_t v2 = sub_2539EEFA4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C02C8(uint64_t a1)
{
  unint64_t v2 = sub_2539EEFA4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C0304(uint64_t a1)
{
  unint64_t v2 = sub_2539EEF0C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C0340(uint64_t a1)
{
  unint64_t v2 = sub_2539EEF0C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C037C(uint64_t a1)
{
  unint64_t v2 = sub_2539EEF58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C03B8(uint64_t a1)
{
  unint64_t v2 = sub_2539EEF58();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C03F4(uint64_t a1)
{
  unint64_t v2 = sub_2539EEEC0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C0430(uint64_t a1)
{
  unint64_t v2 = sub_2539EEEC0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryData.encode(to:)()
{
  sub_2534847F8();
  uint64_t v31 = v1;
  uint64_t v32 = v0;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CE6850);
  sub_253465998();
  v30[9] = v6;
  v30[10] = v5;
  MEMORY[0x270FA5388](v5);
  sub_253483628(v7, v30[0]);
  sub_253462A5C(&qword_269CE6858);
  sub_253465998();
  v30[6] = v9;
  v30[7] = v8;
  MEMORY[0x270FA5388](v8);
  v30[5] = (uint64_t)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_253483660();
  v30[3] = type metadata accessor for PropertyQuery(v11);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v12);
  sub_2534AF2BC(v13, v30[0]);
  sub_253462A5C(&qword_269CE6860);
  sub_253465998();
  v30[1] = v15;
  v30[2] = v14;
  MEMORY[0x270FA5388](v14);
  sub_2534835B0();
  sub_253462A5C(&qword_269CE6868);
  sub_253465998();
  v30[0] = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_2534D8CAC();
  type metadata accessor for QueryData(v18);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v19);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE6870);
  sub_253465998();
  v30[11] = v21;
  v30[12] = v20;
  MEMORY[0x270FA5388](v20);
  sub_253465A3C();
  sub_2534F8630(v4);
  sub_2539EEE74();
  sub_253A3E544();
  sub_253B0A680();
  sub_2539DF660(v32, (uint64_t)v2);
  sub_2534F8958();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_2539EEF58();
      sub_2534D9208();
      sub_253579334();
      sub_253B0A3F0();
      swift_bridgeObjectRelease();
      sub_2534659CC();
      v29();
      uint64_t v26 = sub_2534DA154();
      goto LABEL_6;
    case 2u:
      sub_2539DF5B8((uint64_t)v2, v30[4]);
      sub_2539EEF0C();
      sub_2534D9208();
      sub_2539E6F90((uint64_t)&unk_269CE6890);
      sub_2534F84A8();
      sub_253A3E40C();
      sub_2534659CC();
      v25();
      sub_2539DF610();
      uint64_t v26 = sub_2535787F4();
      goto LABEL_6;
    case 3u:
      sub_2539EEEC0();
      sub_2534D9208();
      sub_25351C5C0();
      sub_253B0A3F0();
      swift_bridgeObjectRelease();
      sub_2534659CC();
      v28();
      uint64_t v26 = sub_2534D9B1C();
LABEL_6:
      v27(v26);
      break;
    default:
      uint64_t v22 = *v2;
      sub_2539EEFA4();
      sub_25351C318();
      uint64_t v33 = v22;
      sub_253462A5C(&qword_269CDC550);
      sub_2535443D4((uint64_t)&qword_269CDDF80);
      sub_253B0A440();
      sub_2534659CC();
      v23();
      sub_2534659CC();
      v24();
      swift_bridgeObjectRelease();
      break;
  }
  sub_2534F8A10();
  sub_2534847C8();
}

void QueryData.init(from:)()
{
  sub_2534847F8();
  sub_253A3F2B8();
  uint64_t v54 = v6;
  sub_253462A5C(&qword_269CE68A8);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253483628(v8, v48);
  sub_253462A5C(&qword_269CE68B0);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_253483644(v10, v49);
  sub_253462A5C(&qword_269CE68B8);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_2534D9280(v12, v50);
  sub_253462A5C(&qword_269CE68C0);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534D8F68(v14, v51);
  uint64_t v56 = sub_253462A5C(&qword_269CE68C8);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = sub_25349888C();
  uint64_t Data = type metadata accessor for QueryData(v16);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v17);
  sub_2536D2D54();
  MEMORY[0x270FA5388](v18);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v19);
  sub_25351C99C();
  MEMORY[0x270FA5388](v20);
  sub_25351C770();
  MEMORY[0x270FA5388](v21);
  sub_2534D90F4();
  uint64_t v57 = v0;
  sub_253A3BED4();
  sub_2539EEE74();
  sub_253B0A660();
  uint64_t v22 = v58;
  if (!v58)
  {
    uint64_t v52 = v4;
    uint64_t v53 = v1;
    uint64_t v23 = sub_253B0A390();
    if (*(void *)(v23 + 16)
      && (sub_2534D96C0(),
          uint64_t v24 = *(unsigned __int8 *)(v23 + 32),
          sub_25347B78C(1, v25, v23, v23 + 32, 0, v26),
          uint64_t v22 = v27,
          unint64_t v29 = v28,
          swift_bridgeObjectRelease(),
          v22 == (uint64_t *)(v29 >> 1)))
    {
      switch(v24)
      {
        case 1:
          sub_2539EEF58();
          sub_253A3C74C();
          uint64_t v37 = sub_253B0A320();
          sub_253A3DB50();
          uint64_t v59 = v38;
          sub_2534659CC();
          v39();
          swift_unknownObjectRelease();
          sub_25351C3E8();
          v40();
          *uint64_t v3 = v37;
          v3[1] = v59;
          sub_253578EE0();
          swift_storeEnumTagMultiPayload();
          uint64_t v41 = (uint64_t)v3;
          break;
        case 2:
          sub_2539EEF0C();
          sub_253A3C74C();
          type metadata accessor for PropertyQuery(0);
          sub_2539E6F90((uint64_t)&unk_269CE68D0);
          sub_253B0A370();
          sub_2534659CC();
          v42();
          swift_unknownObjectRelease();
          sub_2534B3470();
          v43();
          sub_2534DA154();
          swift_storeEnumTagMultiPayload();
          uint64_t v41 = v5;
          break;
        case 3:
          sub_2539EEEC0();
          sub_253A3C74C();
          uint64_t v33 = sub_253B0A320();
          uint64_t v45 = v44;
          uint64_t v60 = v33;
          sub_2534659CC();
          v46();
          swift_unknownObjectRelease();
          sub_25351C3E8();
          v47();
          uint64_t v36 = v52;
          *uint64_t v52 = v60;
          v52[1] = v45;
          sub_253579258();
          goto LABEL_11;
        default:
          sub_2539EEFA4();
          sub_253A3C74C();
          sub_253462A5C(&qword_269CDC550);
          sub_2535443D4((uint64_t)&qword_269CDE0C0);
          sub_253B0A370();
          sub_2534659CC();
          v34();
          swift_unknownObjectRelease();
          sub_2534659CC();
          v35();
          uint64_t v36 = v2;
          *unint64_t v2 = v61;
          sub_253579258();
LABEL_11:
          swift_storeEnumTagMultiPayload();
          uint64_t v41 = (uint64_t)v36;
          break;
      }
      sub_2539DF5B8(v41, v53);
      sub_2539DF5B8(v53, v54);
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      sub_253A3F098();
      sub_253462A5C(&qword_269CDB688);
      sub_253A3ED24();
      *uint64_t v22 = Data;
      sub_253B0A2D0();
      sub_2534F8464();
      sub_25347B88C();
      sub_25346CCF8();
      v30();
      swift_willThrow();
      swift_unknownObjectRelease();
      uint64_t v31 = sub_2534D9AD0();
      v32(v31, v56);
    }
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v57);
  sub_253579494();
  sub_2534847C8();
}

void sub_2539C11A4()
{
}

void sub_2539C11BC()
{
}

uint64_t static QueryPredicate.== infix(_:_:)(uint64_t a1)
{
  sub_253A3C5FC(a1);
  BOOL v5 = v5 && v3 == v4;
  if (!v5 && (sub_253B0A4C0() & 1) == 0 || (sub_25357BE30(*(unsigned char *)(v2 + 16), *(unsigned char *)(v1 + 16)) & 1) == 0) {
    return 0;
  }
  uint64_t Predicate = type metadata accessor for QueryPredicate(0);
  sub_2534F8774(*(int *)(Predicate + 24));
  return sub_253B090F0();
}

uint64_t sub_2539C124C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657261706D6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 6581857 && a2 == 0xE300000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 29295 && a2 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539C1374(char a1)
{
  if (!a1) {
    return 0x657261706D6F63;
  }
  if (a1 == 1) {
    return 6581857;
  }
  return 29295;
}

uint64_t sub_2539C13B8(uint64_t a1)
{
  unint64_t v2 = sub_2539EF12C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C13F4(uint64_t a1)
{
  unint64_t v2 = sub_2539EF12C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C1430()
{
  return sub_2539C1374(*v0);
}

uint64_t sub_2539C1438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C124C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C1460(uint64_t a1)
{
  unint64_t v2 = sub_2539EEFF0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C149C(uint64_t a1)
{
  unint64_t v2 = sub_2539EEFF0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C14D8(uint64_t a1)
{
  unint64_t v2 = sub_2539EF178();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C1514(uint64_t a1)
{
  unint64_t v2 = sub_2539EF178();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C1550(uint64_t a1)
{
  unint64_t v2 = sub_2539EF03C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C158C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF03C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void PropertyQuery.encode(to:)()
{
  sub_2534847F8();
  uint64_t v21 = v0;
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CE68D8);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FA68(v5, v20);
  sub_253462A5C(&qword_269CE68E0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE68E8);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_25397F55C();
  type metadata accessor for QueryPredicate(v8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_25348360C();
  type metadata accessor for PropertyQuery(v10);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CE68F0);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  sub_253465A3C();
  sub_2534D9A50(v3);
  sub_2539EEFF0();
  sub_253B0A680();
  sub_2539DF660(v21, v1);
  sub_253A3D03C();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_2539EF12C();
      sub_25351C318();
      sub_253462A5C(&qword_269CE6908);
      sub_2539EF088();
      sub_253B0A440();
      sub_2534D9AD0();
    }
    else
    {
      sub_2539EF03C();
      sub_25351C318();
      sub_253462A5C(&qword_269CE6908);
      sub_2539EF088();
      sub_253B0A440();
      sub_253A3D000();
    }
    sub_2534659CC();
    v18();
    sub_2534659CC();
    v19();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = sub_253971C3C();
    sub_2539DF5B8(v14, v15);
    sub_2539EF178();
    sub_25351C318();
    sub_2539E6F90((uint64_t)&unk_269CE6918);
    sub_253B0A440();
    sub_2534659CC();
    v16();
    sub_2539DF610();
    sub_2534659CC();
    v17();
  }
  sub_2534F8A10();
  sub_2534847C8();
}

void PropertyQuery.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v16 = v15;
  uint64_t v60 = v17;
  sub_253462A5C(&qword_269CE6930);
  sub_253465998();
  MEMORY[0x270FA5388](v18);
  sub_2536D2C5C(v19, v56);
  sub_253462A5C(&qword_269CE6938);
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  sub_2534B33C8(v21, v57);
  sub_253462A5C(&qword_269CE6940);
  sub_253465998();
  MEMORY[0x270FA5388](v22);
  sub_25347FA68(v23, v58);
  sub_253462A5C(&qword_269CE6948);
  sub_253465998();
  MEMORY[0x270FA5388](v24);
  uint64_t v25 = sub_25397F55C();
  type metadata accessor for PropertyQuery(v25);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v26);
  sub_2534B340C();
  MEMORY[0x270FA5388](v27);
  sub_2536D2D54();
  MEMORY[0x270FA5388](v28);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v29);
  sub_2534D97C0();
  sub_253A3B6B0();
  sub_2539EEFF0();
  sub_253B0A660();
  if (!v10)
  {
    uint64_t v59 = v12;
    sub_253B0A390();
    sub_253A3E90C();
    if (!v31
      || (sub_253A3E9B8(),
          int v33 = *(unsigned __int8 *)(v32 + 32),
          uint64_t v34 = sub_253A3CD70(),
          sub_25347B78C(v34, v35, v36, v37, v38, v39),
          uint64_t v41 = v40,
          unint64_t v43 = v42,
          swift_bridgeObjectRelease(),
          v41 != v43 >> 1))
    {
      uint64_t v30 = v16;
      sub_253B0A090();
      sub_2534D969C();
      sub_253462A5C(&qword_269CDB688);
      sub_253A3ED30();
      sub_2534F8464();
      sub_25347B88C();
      uint64_t v44 = sub_2534F859C();
      v45(v44);
      swift_willThrow();
      swift_unknownObjectRelease();
      uint64_t v46 = sub_253A3EC2C();
      v47(v46);
      goto LABEL_9;
    }
    if (v33)
    {
      if (v33 != 1)
      {
        LOBYTE(a10) = 2;
        sub_2539EF03C();
        sub_253A3D42C();
        sub_253462A5C(&qword_269CE6908);
        sub_2539EF1C4();
        sub_253A3BF54();
        sub_253A3F168();
        sub_2534659CC();
        v53();
        swift_unknownObjectRelease();
        sub_2534B3470();
        v54();
        *uint64_t v11 = a10;
        swift_storeEnumTagMultiPayload();
        uint64_t v55 = v13;
        sub_2539DF5B8((uint64_t)v11, v13);
        uint64_t v30 = v16;
LABEL_13:
        sub_2539DF5B8(v55, v60);
        goto LABEL_9;
      }
      LOBYTE(a10) = 1;
      sub_2539EF12C();
      sub_253A3D42C();
      uint64_t v30 = v16;
      sub_253462A5C(&qword_269CE6908);
      sub_2539EF1C4();
      sub_253A3BF54();
      sub_253B0A370();
      sub_2534659CC();
      v50();
      swift_unknownObjectRelease();
      sub_2534B3470();
      v51();
      *uint64_t v59 = a10;
      swift_storeEnumTagMultiPayload();
      uint64_t v52 = (uint64_t)v59;
    }
    else
    {
      sub_2539EF178();
      sub_253A3D42C();
      type metadata accessor for QueryPredicate(0);
      sub_2539E6F90((uint64_t)&unk_269CE6958);
      sub_253B0A370();
      uint64_t v30 = v16;
      sub_2534659CC();
      v48();
      swift_unknownObjectRelease();
      sub_2534D9220();
      v49();
      swift_storeEnumTagMultiPayload();
      uint64_t v52 = v14;
    }
    uint64_t v55 = v13;
    sub_2539DF5B8(v52, v13);
    goto LABEL_13;
  }
  uint64_t v30 = v16;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v30);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C20AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  PropertyQuery.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539C20C4()
{
}

uint64_t VariableSetter.dependencies.setter()
{
  uint64_t result = sub_253A3F774();
  void *v1 = v0;
  return result;
}

uint64_t (*VariableSetter.dependencies.modify())()
{
  return nullsub_1;
}

uint64_t VariableSetter.value.getter()
{
  return sub_2539A3E30();
}

uint64_t VariableSetter.value.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for VariableSetter, MEMORY[0x263F80508]);
}

uint64_t (*VariableSetter.value.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for VariableSetter(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t VariableSetter.init(dependencies:value:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for VariableSetter(0);
  sub_253A3D478();
  sub_253B09120();
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

void VariableSetter.description.getter()
{
  sub_253A3C038();
  sub_253A3BDD0();
  sub_253B0A000();
  sub_253A3C8C4();
  sub_253A3EAB4();
  sub_253B059D0();
  sub_253B09120();
  sub_2539E6F90((uint64_t)&qword_269CDBEB0);
  swift_bridgeObjectRetain();
  sub_253B09590();
  sub_253A3EE98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253A3EAE8();
  sub_253B09860();
  uint64_t v0 = type metadata accessor for VariableSetter(0);
  sub_253A3E348(v0);
  sub_253B0A170();
  sub_25351C9C4();
  sub_253A3BEC0();
}

uint64_t static VariableSetter.== infix(_:_:)(uint64_t a1)
{
  sub_253A3F8A0(a1);
  sub_2534BC684();
  if ((v1 & 1) == 0) {
    return 0;
  }
  uint64_t v2 = type metadata accessor for VariableSetter(0);
  sub_253A3BFB0(v2);
  return sub_253B090F0();
}

uint64_t sub_2539C2398(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65646E65706564 && a2 == 0xEC00000073656963;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539C2498(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 0x6E65646E65706564;
  }
}

uint64_t sub_2539C24D4()
{
  return sub_2539C2498(*v0);
}

uint64_t sub_2539C24DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C2398(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C2504(uint64_t a1)
{
  unint64_t v2 = sub_2539EF268();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C2540(uint64_t a1)
{
  unint64_t v2 = sub_2539EF268();
  return MEMORY[0x270FA00B8](a1, v2);
}

void VariableSetter.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6960);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF268();
  sub_2534DA3BC();
  sub_253462A5C(&qword_269CE67B8);
  sub_2539EEA9C();
  sub_2534DA628();
  if (!v0)
  {
    type metadata accessor for VariableSetter(0);
    sub_253A3E2FC();
    sub_253B09120();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253A3EDFC();
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void VariableSetter.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  uint64_t v27 = v13;
  uint64_t v29 = sub_253B09120();
  sub_253465998();
  v26[2] = v14;
  MEMORY[0x270FA5388](v15);
  sub_2534966B0();
  uint64_t v30 = sub_253462A5C(&qword_269CE6970);
  sub_253465998();
  uint64_t v28 = v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_2534D9B74();
  uint64_t v19 = type metadata accessor for VariableSetter(v18);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (void *)((char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_253A3B978(v12);
  sub_2539EF268();
  sub_253A3CAE4();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
  }
  else
  {
    v26[1] = v19;
    sub_253462A5C(&qword_269CE67B8);
    char v31 = 0;
    sub_2539EEB78();
    sub_253A3C6C4();
    sub_2534F8908();
    v26[0] = v22;
    *uint64_t v22 = a10;
    sub_253A3EEBC();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_2534F8908();
    sub_2534D91A0();
    v23();
    uint64_t v24 = v26[0];
    sub_253A3CDA8();
    v25();
    sub_2539DF660(v24, v27);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v12);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C2938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  VariableSetter.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539C2950()
{
}

uint64_t QueryPredicate.parameterId.getter()
{
  return sub_2534ACF74();
}

uint64_t QueryPredicate.parameterId.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*QueryPredicate.parameterId.modify())()
{
  return nullsub_1;
}

void QueryPredicate.op.getter(unsigned char *a1@<X8>)
{
}

unsigned char *QueryPredicate.op.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*QueryPredicate.op.modify())()
{
  return nullsub_1;
}

uint64_t QueryPredicate.value.getter()
{
  return sub_2539C2A40();
}

uint64_t sub_2539C2A40()
{
  uint64_t v1 = sub_2535E2348();
  v2(v1);
  uint64_t v3 = sub_253A3EFF0();
  v0(v3);
  sub_25346CAF4();
  uint64_t v4 = sub_2534DA5AC();
  return v5(v4);
}

uint64_t QueryPredicate.value.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for QueryPredicate, MEMORY[0x263F80508]);
}

uint64_t sub_2539C2AD8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = sub_2534D976C();
  v5(v4);
  uint64_t v6 = sub_253A3EFF0();
  a3(v6);
  sub_25346CAF4();
  uint64_t v7 = sub_2534DA2E4();
  return v8(v7);
}

uint64_t (*QueryPredicate.value.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for QueryPredicate(v0);
  sub_2535E23AC();
  return nullsub_1;
}

uint64_t QueryPredicate.init(parameterId:op:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v5 = *a3;
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v5;
  type metadata accessor for QueryPredicate(0);
  sub_253B09120();
  sub_25346CAF4();
  uint64_t v6 = sub_25349C5EC();
  return v7(v6);
}

uint64_t QueryPredicate.description.getter()
{
  sub_253A3BDD0();
  sub_253B09860();
  swift_bridgeObjectRetain();
  sub_253A3E9E4();
  swift_bridgeObjectRelease();
  sub_253B09860();
  sub_253982570();
  sub_253B09860();
  type metadata accessor for QueryPredicate(0);
  sub_253B09120();
  sub_253B0A170();
  sub_25351C9C4();
  return v1;
}

uint64_t sub_2539C2CCC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 28783 && a2 == 0xE200000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539C2E14(char a1)
{
  if (!a1) {
    return 0x6574656D61726170;
  }
  if (a1 == 1) {
    return 28783;
  }
  return 0x65756C6176;
}

uint64_t sub_2539C2E64()
{
  return sub_2539C2E14(*v0);
}

uint64_t sub_2539C2E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C2CCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C2E94(uint64_t a1)
{
  unint64_t v2 = sub_2539EF2B4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C2ED0(uint64_t a1)
{
  unint64_t v2 = sub_2539EF2B4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryPredicate.encode(to:)()
{
  sub_2535B45A0();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE6978);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF2B4();
  sub_2534DA3BC();
  sub_25397F5D0();
  if (!v0)
  {
    sub_253A3CF40();
    sub_2539EF300();
    sub_25397F654();
    type metadata accessor for QueryPredicate(0);
    sub_253B09120();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253A3D2D4();
    sub_25397F654();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_253A3EEB0();
  sub_2535B4660();
}

void QueryPredicate.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_2534847F8();
  uint64_t v16 = v15;
  uint64_t v27 = v17;
  uint64_t v28 = sub_253B09120();
  sub_253465998();
  uint64_t v26 = v18;
  MEMORY[0x270FA5388](v19);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6990);
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  uint64_t v21 = sub_2534D9B74();
  uint64_t Predicate = type metadata accessor for QueryPredicate(v21);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v23);
  sub_2534B34A4();
  sub_253A3B978(v16);
  sub_2539EF2B4();
  sub_253A3E264();
  sub_253B0A660();
  if (v12)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v16);
  }
  else
  {
    sub_253A3EE54();
    *(void *)uint64_t v14 = sub_253B0A320();
    *(void *)(v14 + 8) = v24;
    sub_253A3CF40();
    sub_2539EF34C();
    sub_253B0A370();
    *(unsigned char *)(v14 + 16) = a12;
    sub_253A3D2B8();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_253B0A370();
    sub_2534D91A0();
    v25();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v14 + *(int *)(Predicate + 24), v13, v28);
    sub_2539DF660(v14, v27);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v16);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539C3344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  QueryPredicate.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4], vars8[6]);
}

void sub_2539C335C()
{
}

void QueryOperator.description.getter()
{
  switch(*v0)
  {
    case 1:
      sub_253A3F768();
      break;
    case 3:
      sub_253A3F75C();
      break;
    case 5:
      sub_253A3F750();
      break;
    case 6:
      sub_253A3D57C();
      break;
    case 7:
    case 8:
      sub_253A3ED90();
      break;
    default:
      return;
  }
}

void QueryOperator.rawValue.getter()
{
  switch(*v0)
  {
    case 1:
      sub_253A3F768();
      break;
    case 3:
      sub_253A3F75C();
      break;
    case 5:
      sub_253A3F750();
      break;
    case 6:
      sub_253A3D57C();
      break;
    case 7:
    case 8:
      sub_253A3ED90();
      break;
    default:
      return;
  }
}

IntelligenceFlowPlannerSupport::QueryOperator_optional __swiftcall QueryOperator.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v3 = v1;
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v5 = 10;
  if (v2 < 0xA) {
    char v5 = v2;
  }
  *uint64_t v3 = v5;
  return result;
}

uint64_t sub_2539C3548()
{
  return sub_25397FE6C(*v0, (void (*)(unsigned char *, uint64_t))sub_2539804C0);
}

uint64_t sub_2539C3578()
{
  return sub_2539804C0();
}

uint64_t sub_2539C3580(uint64_t a1)
{
  return sub_2539811D4(a1, *v1, (void (*)(unsigned char *, uint64_t))sub_2539804C0);
}

IntelligenceFlowPlannerSupport::QueryOperator_optional sub_2539C35B0(Swift::String *a1)
{
  return QueryOperator.init(rawValue:)(*a1);
}

void sub_2539C35BC(void *a1@<X8>)
{
  QueryOperator.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2539C35E4()
{
  return sub_253B09A10();
}

uint64_t sub_2539C3644()
{
  return sub_253B099E0();
}

uint64_t sub_2539C3698(char *a1, char *a2)
{
  return sub_25357BE30(*a1, *a2);
}

uint64_t ActionParameterContext.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t ActionParameterContext.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ActionParameterContext.statementId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539C36F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ActionParameterContext.toolId.setter(v1, v2);
}

uint64_t ActionParameterContext.toolId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  type metadata accessor for ActionParameterContext(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t ActionParameterContext.toolId.modify(uint64_t a1)
{
  uint64_t v1 = sub_253A3EB10(a1);
  uint64_t v2 = type metadata accessor for ActionParameterContext(v1);
  sub_253A3D594(*(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  return sub_2534D9778();
}

uint64_t ActionParameterContext.parameterId.getter()
{
  return sub_2539B52EC();
}

uint64_t ActionParameterContext.parameterId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539C37EC(a1, a2);
}

uint64_t sub_2539C37EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  v6(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*ActionParameterContext.parameterId.modify())()
{
  return nullsub_1;
}

uint64_t ActionParameterContext.tool.getter()
{
  uint64_t v0 = sub_2534F8A1C();
  uint64_t v1 = type metadata accessor for ActionParameterContext(v0);
  sub_253A3CD18(*(int *)(v1 + 24));
  return swift_bridgeObjectRetain();
}

double ActionParameterContext.tool.setter()
{
  uint64_t v0 = sub_253A3D8C8();
  type metadata accessor for ActionParameterContext(v0);
  sub_253A3E2A4();
  uint64_t v1 = swift_bridgeObjectRelease();
  *(void *)&double result = sub_253A3E354(v1, v2, v3, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t (*ActionParameterContext.tool.modify())()
{
  return nullsub_1;
}

uint64_t ActionParameterContext.init(statementId:toolId:parameterId:)()
{
  sub_253A3D44C();
  sub_25346CAF4();
  sub_2534D8E14();
  v5();
  uint64_t result = type metadata accessor for ActionParameterContext(0);
  uint64_t v7 = (void *)(v4 + *(int *)(result + 24));
  *uint64_t v7 = v3;
  v7[1] = v2;
  v7[2] = 0;
  v7[3] = 0;
  uint64_t v8 = (void *)(v4 + *(int *)(result + 20));
  *uint64_t v8 = v1;
  v8[1] = v0;
  return result;
}

__n128 ActionParameterContext.init(statementId:tool:parameterId:)()
{
  sub_253A3C038();
  sub_253A3F5A0();
  long long v11 = *v3;
  uint64_t v4 = *((void *)v3 + 2);
  uint64_t v5 = *((void *)v3 + 3);
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v6();
  uint64_t v7 = type metadata accessor for ActionParameterContext(0);
  uint64_t v8 = v2 + *(int *)(v7 + 24);
  *(_OWORD *)uint64_t v8 = v11;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  __n128 v9 = (void *)(v2 + *(int *)(v7 + 20));
  *__n128 v9 = v1;
  v9[1] = v0;
  sub_253A3BEC0();
  return result;
}

uint64_t sub_2539C3A4C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v3 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6574656D61726170 && a2 == 0xEB00000000644972;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1819242356 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539C3BA8(char a1)
{
  if (!a1) {
    return 0x6E656D6574617473;
  }
  if (a1 == 1) {
    return 0x6574656D61726170;
  }
  return 1819242356;
}

uint64_t sub_2539C3C00()
{
  return sub_2539C3BA8(*v0);
}

uint64_t sub_2539C3C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C3A4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C3C30(uint64_t a1)
{
  unint64_t v2 = sub_2539EF398();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C3C6C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF398();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ActionParameterContext.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE69A0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF398();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_2534DA628();
  if (!v0)
  {
    type metadata accessor for ActionParameterContext(0);
    sub_253A3BF94();
    sub_2534D2524();
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ActionParameterContext.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v25 = v3;
  sub_253B059D0();
  sub_253465998();
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v5);
  sub_2534B33C8(v6, v22);
  uint64_t v28 = sub_253462A5C(&qword_269CE69B0);
  sub_253465998();
  uint64_t v26 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_25349888C();
  uint64_t v10 = type metadata accessor for ActionParameterContext(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(v2, v2[3]);
  sub_2539EF398();
  sub_253A3E4D8();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    uint64_t v24 = v10;
    LOBYTE(v29) = 0;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE10();
    sub_253A3E5E0();
    sub_253A3DB68();
    uint64_t v23 = v13;
    sub_25347FA84();
    v14();
    LOBYTE(v29) = 1;
    uint64_t v15 = sub_253B0A320();
    uint64_t v16 = (uint64_t *)&v23[*(int *)(v24 + 20)];
    *uint64_t v16 = v15;
    v16[1] = v17;
    sub_253A3E098();
    sub_2534D25BC();
    sub_253A3F3D4();
    sub_253B0A370();
    sub_2534DA4BC();
    v18();
    uint64_t v19 = v30;
    uint64_t v20 = (uint64_t)v23;
    uint64_t v21 = &v23[*(int *)(v24 + 24)];
    *(void *)uint64_t v21 = v29;
    *((void *)v21 + 1) = v19;
    *((_OWORD *)v21 + 1) = v31;
    sub_2539DF660(v20, v25);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539C4128()
{
}

void sub_2539C4140()
{
}

uint64_t (*ActionStepResult.actionEventId.modify())()
{
  return nullsub_1;
}

uint64_t ActionStepResult.exprId.getter()
{
  return sub_2539B52EC();
}

uint64_t ActionStepResult.exprId.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539C37EC(a1, a2);
}

uint64_t (*ActionStepResult.exprId.modify())()
{
  return nullsub_1;
}

uint64_t ActionStepResult.result.getter()
{
  return sub_2539A4750();
}

uint64_t ActionStepResult.result.setter()
{
  return sub_2539A47C0();
}

uint64_t (*ActionStepResult.result.modify())()
{
  return nullsub_1;
}

uint64_t ActionStepResult.toolId.getter()
{
  return sub_2539CD6C0();
}

uint64_t ActionStepResult.toolId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  type metadata accessor for ActionStepResult(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t (*ActionStepResult.toolId.modify())()
{
  return nullsub_1;
}

void ActionStepResult.init(actionEventId:exprId:result:toolId:)()
{
  sub_2535B3C98();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_2535E2510();
  uint64_t v8 = sub_253B055C0();
  sub_25346CC08(v3, v9, v10, v8);
  uint64_t v11 = sub_2534D954C();
  sub_2539F0BE0(v11, v12, v13);
  uint64_t v14 = (int *)type metadata accessor for ActionStepResult(0);
  uint64_t v15 = (void *)(v3 + v14[5]);
  *uint64_t v15 = v2;
  v15[1] = v1;
  sub_2539DF5B8(v0, v3 + v14[6]);
  uint64_t v16 = (void *)(v3 + v14[7]);
  *uint64_t v16 = v7;
  v16[1] = v5;
  sub_25346CD04();
}

void ActionStepResult.init(eventId:exprId:result:toolId:)()
{
  sub_2535B3C98();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = sub_253B055C0();
  uint64_t v15 = sub_253A3D894();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, v16, v17, v14);
  sub_253472458(v13, (uint64_t *)&unk_26B248CB0);
  sub_25347B88C();
  sub_2534D8E14();
  v18();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v14);
  type metadata accessor for ActionStepResult(0);
  sub_253A3D3D4();
  uint64_t v20 = (void *)(v13 + v19);
  *uint64_t v20 = v9;
  v20[1] = v7;
  sub_2539DF5B8(v5, v13 + *(int *)(v21 + 24));
  uint64_t v22 = (void *)(v13 + *(int *)(v11 + 28));
  *uint64_t v22 = v3;
  v22[1] = v1;
  sub_25346CD04();
}

void ActionStepResult.init(eventId:exprId:result:)()
{
  sub_2535B3C98();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_2534F8A1C();
  uint64_t v8 = sub_253B055C0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 1, 1, v8);
  sub_253472458(v0, (uint64_t *)&unk_26B248CB0);
  sub_2535782A8();
  sub_2534AF234();
  v9();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v8);
  type metadata accessor for ActionStepResult(0);
  sub_253A3D3D4();
  uint64_t v11 = (void *)(v0 + v10);
  *uint64_t v11 = v7;
  v11[1] = v5;
  sub_2539DF5B8(v3, v0 + *(int *)(v12 + 24));
  sub_2534D99FC();
  sub_2534F85D4();
  v13();
  uint64_t v14 = (void *)(v0 + *(int *)(v1 + 28));
  *uint64_t v14 = 0;
  v14[1] = 0xE000000000000000;
  sub_25346CD04();
}

void ActionStepResult.stepId.modify()
{
  sub_2535B3C98();
  uint64_t v2 = sub_253A3F78C();
  void *v0 = v2;
  *uint64_t v2 = v1;
  uint64_t v3 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_25346CB4C(v3);
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v2[1] = v5;
  uint64_t v6 = sub_253B055C0();
  v2[2] = v6;
  sub_253465998();
  v2[3] = v7;
  size_t v9 = *(void *)(v8 + 64);
  v2[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  sub_253A3E918((uint64_t)v10);
  sub_2534D8B48((uint64_t)v5, 1, v6);
  if (v11)
  {
    _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
    sub_253472458((uint64_t)v5, (uint64_t *)&unk_26B248CB0);
  }
  else
  {
    uint64_t v12 = sub_253A3E43C();
    v13(v12);
  }
  sub_25346CD04();
}

uint64_t _s30IntelligenceFlowPlannerSupport16ActionStepResultV6stepId10Foundation4UUIDVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v4 = sub_25346CB4C(v3);
  MEMORY[0x270FA5388](v4);
  sub_25346CC54();
  sub_253961F60(v1, v1, (uint64_t *)&unk_26B248CB0);
  uint64_t v5 = sub_253B055C0();
  sub_2534D8B48(v1, 1, v5);
  if (v6)
  {
    _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
    return sub_253472458(v1, (uint64_t *)&unk_26B248CB0);
  }
  else
  {
    sub_25347B88C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, v1, v5);
  }
}

uint64_t _s30IntelligenceFlowPlannerSupport16ActionStepResultV6stepId10Foundation4UUIDVvs_0()
{
  sub_253472458(v0, (uint64_t *)&unk_26B248CB0);
  uint64_t v1 = sub_253B055C0();
  sub_25346CAF4();
  sub_2534D9778();
  sub_2534D8E14();
  v2();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, 0, 1, v1);
}

void ActionStepResult.eventId.modify()
{
  sub_2535B3C98();
  uint64_t v2 = sub_253A3F78C();
  void *v0 = v2;
  *uint64_t v2 = v1;
  uint64_t v3 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_25346CB4C(v3);
  uint64_t v5 = malloc(*(void *)(v4 + 64));
  v2[1] = v5;
  uint64_t v6 = sub_253B055C0();
  v2[2] = v6;
  sub_253465998();
  v2[3] = v7;
  size_t v9 = *(void *)(v8 + 64);
  v2[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  sub_253A3E918((uint64_t)v10);
  sub_2534D8B48((uint64_t)v5, 1, v6);
  if (v11)
  {
    _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
    sub_253472458((uint64_t)v5, (uint64_t *)&unk_26B248CB0);
  }
  else
  {
    uint64_t v12 = sub_253A3E43C();
    v13(v12);
  }
  sub_25346CD04();
}

void sub_2539C4950()
{
  sub_2535B3C98();
  uint64_t v1 = (void *)(*v0)[4];
  uint64_t v2 = (void *)(*v0)[5];
  uint64_t v4 = **v0;
  uint64_t v3 = (void *)(*v0)[1];
  if (v5)
  {
    sub_2534AF234();
    v6();
    sub_253472458(v4, (uint64_t *)&unk_26B248CB0);
    sub_253579360();
    sub_25347FA84();
    v7();
    sub_2539446A0(v4);
    sub_253A3E9FC();
    sub_2534DA4BC();
    v8();
  }
  else
  {
    sub_253472458(**v0, (uint64_t *)&unk_26B248CB0);
    sub_253A3F02C();
    v9();
    sub_2539446A0(v4);
  }
  free(v2);
  free(v1);
  free(v3);
  sub_25346CD04();
  free(v10);
}

uint64_t sub_2539C4A4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x76456E6F69746361 && a2 == 0xED00006449746E65;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x644972707865 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x746C75736572 && a2 == 0xE600000000000000;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539C4C0C(char a1)
{
  uint64_t result = 0x76456E6F69746361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x644972707865;
      break;
    case 2:
      uint64_t result = 0x746C75736572;
      break;
    case 3:
      uint64_t result = 0x64496C6F6F74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539C4CA0()
{
  return sub_2539C4C0C(*v0);
}

uint64_t sub_2539C4CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C4A4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C4CD0(uint64_t a1)
{
  unint64_t v2 = sub_2539EF3E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C4D0C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF3E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ActionStepResult.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE69B8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF3E4();
  sub_2534DA3BC();
  sub_253A3DA50();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_253A3BCCC();
  if (!v0)
  {
    type metadata accessor for ActionStepResult(0);
    sub_253A3BC14();
    uint64_t v2 = sub_253A3E0B4();
    type metadata accessor for ActionResult(v2);
    sub_2539E6F90((uint64_t)&unk_269CE6830);
    sub_2534F84DC();
    sub_253A3BF94();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_2534F8864();
  sub_2535B4660();
}

void ActionStepResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  type metadata accessor for ActionResult(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v5);
  sub_2534835B0();
  uint64_t v6 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CE69C8);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534D8CAC();
  uint64_t v24 = (int *)type metadata accessor for ActionStepResult(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v10);
  sub_2534D9C00();
  uint64_t v11 = sub_253B055C0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, 1, 1, v11);
  uint64_t v23 = (uint64_t)v4;
  sub_253A3B978(v4);
  sub_2539EF3E4();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_253472458(v2, (uint64_t *)&unk_26B248CB0);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253B0A310();
    uint64_t v12 = sub_2534D96CC();
    sub_2539F0BE0(v12, v13, v14);
    sub_253A3CA94();
    uint64_t v15 = sub_253B0A320();
    uint64_t v16 = (uint64_t *)(v2 + v24[5]);
    *uint64_t v16 = v15;
    v16[1] = v17;
    sub_253A3C6A0();
    sub_2539E6F90((uint64_t)&unk_269CE6840);
    sub_253A3EE28();
    sub_253B0A370();
    sub_2539DF5B8(v0, v2 + v24[6]);
    sub_253A3C954();
    uint64_t v18 = sub_253B0A320();
    uint64_t v20 = v19;
    sub_25351C3E8();
    v21();
    uint64_t v22 = (uint64_t *)(v2 + v24[7]);
    *uint64_t v22 = v18;
    v22[1] = v20;
    sub_253A3F11C();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v23);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C52B8()
{
}

void sub_2539C52D0()
{
}

uint64_t (*StatementResult.actionEventId.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.toolId.getter()
{
  if (*(void *)(v0 + *(int *)(type metadata accessor for StatementResult(0) + 36) + 8)) {
    swift_bridgeObjectRetain();
  }
  return sub_2534D9778();
}

uint64_t sub_2539C5358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_2534D9718();
  return a5(v6);
}

double StatementResult.toolId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  uint64_t v6 = (uint64_t *)(v2 + *(int *)(type metadata accessor for StatementResult(v5) + 36));
  sub_253961BAC(*v6, v6[1]);
  if (a2)
  {
    *uint64_t v6 = v3;
    v6[1] = a2;
    v6[2] = 0;
    v6[3] = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)uint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
  }
  return result;
}

uint64_t (*StatementResult.toolId.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v3 = sub_253A3EB10(a1);
  uint64_t v4 = *(int *)(type metadata accessor for StatementResult(v3) + 36);
  *(_DWORD *)(v1 + 24) = v4;
  uint64_t v5 = (uint64_t *)(v2 + v4);
  uint64_t v6 = v5[1];
  if (v6)
  {
    uint64_t v7 = *v5;
    uint64_t v6 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)uint64_t v1 = v7;
  *(void *)(v1 + 8) = v6;
  return sub_2539C5468;
}

uint64_t sub_2539C5468(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_2534D970C();
    StatementResult.toolId.setter(v2, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (uint64_t *)(*(void *)(a1 + 16) + *(int *)(a1 + 24));
    if (v5) {
      uint64_t v7 = *(void *)a1;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t result = sub_253961BAC(*v6, v6[1]);
    *uint64_t v6 = v7;
    v6[1] = v5;
    v6[2] = 0;
    v6[3] = 0;
  }
  return result;
}

uint64_t StatementResult.payload.getter()
{
  return sub_2539BF17C();
}

uint64_t StatementResult.payload.setter()
{
  return sub_2539BF1EC();
}

uint64_t (*StatementResult.payload.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.resultStatementId.getter()
{
  return sub_2539C2A40();
}

uint64_t StatementResult.resultStatementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for StatementResult, MEMORY[0x263F4BF98]);
}

uint64_t (*StatementResult.resultStatementId.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.originProgramStatementId.getter()
{
  return sub_2539C5638();
}

uint64_t sub_2539C5638()
{
  uint64_t v0 = sub_2534F8A1C();
  v1(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v2 = sub_2534ACF74();
  return v3(v2);
}

uint64_t StatementResult.originProgramStatementId.setter()
{
  return sub_2539C56B8();
}

uint64_t sub_2539C56B8()
{
  uint64_t v0 = sub_2534D9690();
  v1(v0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

uint64_t (*StatementResult.originProgramStatementId.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.originTaskStatementId.getter()
{
  type metadata accessor for StatementResult(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v0 = sub_2534ACF74();
  return v1(v0);
}

uint64_t StatementResult.originTaskStatementId.setter()
{
  type metadata accessor for StatementResult(0);
  sub_2534F8578();
  sub_25346CAF4();
  uint64_t v0 = sub_25349C5EC();
  return v1(v0);
}

uint64_t (*StatementResult.originTaskStatementId.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for StatementResult(0) + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return sub_2539EA1E0(v4, v5);
}

__n128 StatementResult.tool.setter(__n128 *a1)
{
  __n128 v6 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for StatementResult(0) + 36));
  sub_253961BAC(*v4, v4[1]);
  __n128 result = v6;
  *(__n128 *)uint64_t v4 = v6;
  v4[2] = v2;
  v4[3] = v3;
  return result;
}

uint64_t (*StatementResult.tool.modify())()
{
  return nullsub_1;
}

uint64_t StatementResult.init(actionEventId:tool:payload:resultStatementId:originProgramStatementId:originTaskStatementId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_25394599C();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  long long v45 = *v22;
  uint64_t v23 = *((void *)v22 + 2);
  uint64_t v24 = *((void *)v22 + 3);
  uint64_t v25 = sub_253B055C0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v21, 1, 1, v25);
  uint64_t v26 = (int *)type metadata accessor for StatementResult(0);
  uint64_t v27 = v21 + v26[9];
  *(_OWORD *)uint64_t v27 = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  uint64_t v28 = sub_2536D3F90();
  sub_2539F0BE0(v28, v29, v30);
  sub_253961BAC(*(void *)v27, *(void *)(v27 + 8));
  *(_OWORD *)uint64_t v27 = v45;
  *(void *)(v27 + 16) = v23;
  *(void *)(v27 + 24) = v24;
  sub_2539DF5B8(v19, v21 + v26[5]);
  uint64_t v31 = v21 + v26[6];
  uint64_t v32 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v44 = v33 + 32;
  *(void *)&long long v45 = *(void *)(v33 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v31, v17, v32);
  sub_253A3F038();
  v34();
  sub_2535268E0();
  return v38(v35, v36, v37, v38, v39, v40, v41, v42, a9, v44, v45, *((void *)&v45 + 1), a13, a14, a15, a16);
}

uint64_t StatementResult.init(actionEventId:tool:payload:resultStatementId:originProgramStatementId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_25394599C();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  long long v44 = *v21;
  uint64_t v22 = *((void *)v21 + 2);
  uint64_t v23 = *((void *)v21 + 3);
  uint64_t v24 = sub_253B055C0();
  sub_253A3DE3C(v24);
  uint64_t v26 = v20 + v25;
  *(_OWORD *)uint64_t v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  uint64_t v27 = sub_253579360();
  sub_2539F0BE0(v27, v28, v29);
  sub_253961BAC(*(void *)v26, *(void *)(v26 + 8));
  *(_OWORD *)uint64_t v26 = v44;
  *(void *)(v26 + 16) = v22;
  *(void *)(v26 + 24) = v23;
  sub_2539DF5B8(v18, v20 + *(int *)(v16 + 20));
  sub_253B059D0();
  sub_253486600();
  uint64_t v43 = v30 + 32;
  *(void *)&long long v44 = *(void *)(v30 + 32);
  sub_253A3E6BC();
  sub_253A3F038();
  v31();
  uint64_t v32 = sub_253A3D488();
  v33(v32);
  sub_253A3F018();
  sub_2535268E0();
  return v37(v34, v35, v36, v37, v38, v39, v40, v41, a9, v43, v44, *((void *)&v44 + 1), a13, a14, a15, a16);
}

uint64_t StatementResult.init(actionEventId:toolId:payload:resultStatementId:originProgramStatementId:originTaskStatementId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_25394599C();
  uint64_t v47 = v19;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  sub_253A3E294();
  uint64_t v25 = v24;
  sub_253B055C0();
  uint64_t v26 = sub_253A3D894();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v26, v27, v28, v29);
  uint64_t v30 = (int *)type metadata accessor for StatementResult(0);
  uint64_t v31 = v25 + v30[9];
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  sub_2539EFDC0(v18, v25, (uint64_t *)&unk_26B248CB0);
  if (!v16) {
    uint64_t v17 = 0;
  }
  uint64_t v32 = sub_2536D5500();
  sub_253472458(v32, v33);
  sub_253961BAC(*(void *)v31, *(void *)(v31 + 8));
  *(void *)uint64_t v31 = v17;
  *(void *)(v31 + 8) = v16;
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  sub_2539DF5B8(v23, v25 + v30[5]);
  uint64_t v34 = v25 + v30[6];
  uint64_t v35 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v48 = v36 + 32;
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
  v49(v34, v21, v35);
  sub_253A3F038();
  v37();
  sub_2535268E0();
  return v41(v38, v39, v40, v41, v42, v43, v44, v45, a9, v47, v48, v49, a13, a14, a15, a16);
}

void static StatementResultPayload.== infix(_:_:)()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  sub_253B06820();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_25348366C();
  sub_253462A5C(&qword_269CDCB48);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CDBB28);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_2534D8CC8();
  MEMORY[0x270FA5388](v9);
  sub_25351C770();
  MEMORY[0x270FA5388](v10);
  sub_253A3BB6C();
  if (sub_253B06840())
  {
    uint64_t v11 = sub_253A3DBFC();
    uint64_t v12 = type metadata accessor for StatementResultPayload(v11);
    uint64_t v13 = sub_253A3CB08(v12);
    sub_253A3DE00(v13);
    sub_253A3C488(*(int *)(v4 + 20));
    sub_253A3BACC();
    sub_253A3C4A4();
    uint64_t v14 = sub_2534F88B8(v0);
    if (!v16)
    {
      sub_253A3DF48(v14, v15, &qword_269CDBB28);
      sub_2534F88B8(v2);
      if (!v16)
      {
        sub_25347FA84();
        v19();
        sub_2539E6F90((uint64_t)&unk_269CDCB50);
        sub_2536D53CC();
        uint64_t v20 = *(void (**)(void))(v21 + 8);
        sub_2534D97B4();
        v20();
        sub_253A3BC88();
        sub_253A3BCE4();
        sub_2534D97B4();
        v20();
        sub_253A3CE14();
        goto LABEL_11;
      }
      sub_253A3BC88();
      sub_253A3BCE4();
      uint64_t v17 = sub_253A3BAB4();
      v18(v17);
LABEL_10:
      sub_253472458(v0, &qword_269CDCB48);
      goto LABEL_11;
    }
    sub_253A3BC88();
    sub_253A3BCE4();
    sub_2534F88B8(v2);
    if (!v16) {
      goto LABEL_10;
    }
    sub_253472458(v0, &qword_269CDBB28);
  }
LABEL_11:
  sub_253465A14();
}

uint64_t sub_2539C5F8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x76456E6F69746361 && a2 == 0xED00006449746E65;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x64616F6C796170 && a2 == 0xE700000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000253B111C0 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B11130 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x8000000253B111F0 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 1819242356 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
}

unint64_t sub_2539C6204(char a1)
{
  unint64_t result = 0x76456E6F69746361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64616F6C796170;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 1819242356;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539C62E0()
{
  return sub_2539C6204(*v0);
}

uint64_t sub_2539C62E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C5F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C6310(uint64_t a1)
{
  unint64_t v2 = sub_2539EF430();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C634C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF430();
  return MEMORY[0x270FA00B8](a1, v2);
}

void StatementResult.encode(to:)()
{
  sub_2534847F8();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE69D0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF430();
  sub_2534DA3BC();
  sub_253B055C0();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_253A3EE10();
  sub_253A3C9CC();
  if (!v0)
  {
    type metadata accessor for StatementResult(0);
    type metadata accessor for StatementResultPayload(0);
    sub_2539E6F90((uint64_t)&unk_269CE69E0);
    sub_253A3EE10();
    sub_25397F654();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_25397F654();
    sub_25397F654();
    sub_25397F654();
    sub_2534D2524();
    sub_253A3C9CC();
  }
  sub_2534D9A08();
  v2();
  sub_253578DEC();
  sub_2534847C8();
}

void StatementResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = v4;
  v42[0] = v6;
  uint64_t v46 = sub_253B059D0();
  sub_253465998();
  uint64_t v48 = v7;
  MEMORY[0x270FA5388](v8);
  sub_2534659D8();
  v42[1] = v9;
  sub_2534B324C();
  MEMORY[0x270FA5388](v10);
  v42[2] = (uint64_t)v42 - v11;
  sub_2534B324C();
  MEMORY[0x270FA5388](v12);
  sub_2534B35DC();
  v42[4] = v13;
  uint64_t v14 = sub_253483660();
  type metadata accessor for StatementResultPayload(v14);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_2534966B0();
  uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v17 = sub_25346CB4C(v16);
  MEMORY[0x270FA5388](v17);
  sub_2534B34A4();
  v42[5] = sub_253462A5C(&qword_269CE69E8);
  sub_253465998();
  v42[3] = v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v20 = sub_2534D8CAC();
  uint64_t v21 = type metadata accessor for StatementResult(v20);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v22);
  sub_253A3C504();
  sub_253A3F46C();
  *(void *)&long long v49 = v21;
  uint64_t v23 = (uint64_t *)(v1 + *(int *)(v21 + 36));
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  uint64_t v44 = v23;
  uint64_t v45 = v5;
  uint64_t v24 = *(void *)(v5 + 24);
  sub_253A3BED4();
  sub_2539EF430();
  uint64_t v43 = v2;
  sub_253A3E178();
  sub_253B0A660();
  if (v0)
  {
    sub_253A3DEA4();
    uint64_t v28 = v46;
    uint64_t v29 = v48;
    uint64_t v30 = v1;
    uint64_t v31 = v44;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v45);
    sub_253472458(v1, (uint64_t *)&unk_26B248CB0);
    uint64_t v32 = v49;
    if (v5)
    {
      sub_253477128();
      v35(v33, v34);
      if (!v24) {
        goto LABEL_6;
      }
    }
    else if (!v24)
    {
LABEL_6:
      sub_253961BAC(*v31, v31[1]);
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30 + *(int *)(v32 + 32), v28);
    goto LABEL_6;
  }
  LOBYTE(v50) = 0;
  sub_2539E6F90((uint64_t)&qword_269CDBCC8);
  sub_253A3EE10();
  sub_253B0A310();
  uint64_t v25 = sub_2536D5500();
  sub_2539F0BE0(v25, v26, v27);
  LOBYTE(v50) = 1;
  sub_2539E6F90((uint64_t)&unk_269CE69F0);
  sub_253B0A370();
  sub_2539DF5B8(v3, v1 + *(int *)(v49 + 20));
  LOBYTE(v50) = 2;
  sub_2539E6F90((uint64_t)&qword_269CDC068);
  sub_253B0A370();
  uint64_t v47 = *(void (**)(void))(v48 + 32);
  sub_253A3E6A4();
  v36();
  LOBYTE(v50) = 3;
  sub_253A3DB10();
  uint64_t v37 = v47;
  sub_253A3E6A4();
  v37();
  LOBYTE(v50) = 4;
  sub_253A3DB10();
  sub_253A3E6A4();
  v37();
  sub_2534D25BC();
  sub_253A3F3D4();
  sub_253B0A310();
  uint64_t v38 = v44;
  sub_2534B3470();
  v39();
  long long v49 = v50;
  uint64_t v41 = v51;
  uint64_t v40 = v52;
  sub_253961BAC(*v38, v38[1]);
  *(_OWORD *)uint64_t v38 = v49;
  v38[2] = v41;
  v38[3] = v40;
  sub_2539DF660(v1, v42[0]);
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v45);
  sub_2539DF610();
LABEL_7:
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C6C88()
{
}

void sub_2539C6CA0()
{
}

uint64_t StatementResultPayload.outcome.getter()
{
  return sub_2539DE358();
}

uint64_t StatementResultPayload.outcome.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*StatementResultPayload.outcome.modify())()
{
  return nullsub_1;
}

uint64_t StatementResultPayload.response.getter()
{
  return sub_2539A9600();
}

uint64_t StatementResultPayload.response.setter()
{
  return sub_2539A9658();
}

uint64_t (*StatementResultPayload.response.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for StatementResultPayload(v0);
  sub_2534F87A4();
  return nullsub_1;
}

uint64_t sub_2539C6D8C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF47C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C6DC8(uint64_t a1)
{
  unint64_t v2 = sub_2539EF47C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void StatementResultPayload.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE69F8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF47C();
  sub_2534DA3BC();
  sub_253A3DA44();
  sub_253B06850();
  sub_2539E6F90((uint64_t)&unk_269CE6A08);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for StatementResultPayload(0);
    sub_253A3E314();
    sub_2539E6F90((uint64_t)&unk_269CE6A10);
    sub_253A3BBB0();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void StatementResultPayload.init(from:)()
{
  sub_2534847F8();
  sub_253A3E1D4(v4);
  uint64_t v5 = sub_253462A5C(&qword_269CDBB28);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534D8CAC();
  sub_253B06850();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253465A3C();
  sub_253462A5C(&qword_269CE6A18);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534AF2D8();
  uint64_t v10 = type metadata accessor for StatementResultPayload(v9);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_253A3D090();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, v12);
  sub_2534F8630(v0);
  sub_2539EF47C();
  sub_253A3CC00();
  if (v2)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_253472458(v1, &qword_269CDBB28);
  }
  else
  {
    sub_2539E6F90((uint64_t)&unk_269CE6A20);
    sub_253A3C0E4();
    sub_25347FA84();
    v13();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE6A28);
    sub_253A3BF24();
    sub_2534659CC();
    v14();
    sub_2539F0BE0(v3, v1, &qword_269CDBB28);
    sub_253A3F11C();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539C7214()
{
}

void sub_2539C722C()
{
}

uint64_t (*ResponseGenerationRequest.statementResults.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539C7268(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000253B121D0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_2539C72F0()
{
  return 0xD000000000000010;
}

uint64_t sub_2539C7310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C7268(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539C733C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF4C8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C7378(uint64_t a1)
{
  unint64_t v2 = sub_2539EF4C8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ResponseGenerationRequest.encode(to:)()
{
  sub_2534847F8();
  sub_253A3D9E4();
  sub_253462A5C(&qword_269CE6A30);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534F8328(v0);
  sub_2539EF4C8();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CE6A40);
  sub_2539EF514();
  sub_253A3BA74();
  sub_2534F8390();
  v2();
  sub_2534F8A10();
  sub_2534847C8();
}

void ResponseGenerationRequest.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE6A50);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539EF4C8();
  sub_2534994B4();
  if (!v1)
  {
    sub_253462A5C(&qword_269CE6A40);
    sub_2539EF5B8();
    sub_2534F8410();
    sub_2534D9A08();
    v3();
    sub_253A3D888();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C757C()
{
}

void sub_2539C7594()
{
}

uint64_t (*QueryStepResults.queryResults.modify())()
{
  return nullsub_1;
}

uint64_t QueryStepResults.originStatementId.getter()
{
  return sub_2539A3E30();
}

uint64_t QueryStepResults.originStatementId.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for QueryStepResults, MEMORY[0x263F4BF98]);
}

uint64_t (*QueryStepResults.originStatementId.modify())()
{
  return nullsub_1;
}

uint64_t QueryStepResults.queryEventId.getter()
{
  return sub_2539C2A40();
}

uint64_t QueryStepResults.queryEventId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for QueryStepResults, MEMORY[0x263F07508]);
}

uint64_t (*QueryStepResults.queryEventId.modify())()
{
  return nullsub_1;
}

uint64_t QueryStepResults.init(queryResults:originStatementId:queryEventId:)()
{
  sub_253A3F71C();
  void *v1 = v0;
  type metadata accessor for QueryStepResults(0);
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v2();
  sub_253B055C0();
  sub_25346CAF4();
  uint64_t v3 = sub_25349C5EC();
  return v4(v3);
}

uint64_t sub_2539C77C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7365527972657571 && a2 == 0xEC00000073746C75;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000253B110C0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6576457972657571 && a2 == 0xEC0000006449746ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539C7940(char a1)
{
  if (!a1) {
    return 0x7365527972657571;
  }
  if (a1 == 1) {
    return 0xD000000000000011;
  }
  return 0x6576457972657571;
}

uint64_t sub_2539C79AC()
{
  return sub_2539C7940(*v0);
}

uint64_t sub_2539C79B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C77C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C79DC(uint64_t a1)
{
  unint64_t v2 = sub_2539EF65C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C7A18(uint64_t a1)
{
  unint64_t v2 = sub_2539EF65C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryStepResults.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6A60);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EF65C();
  sub_2534DA3BC();
  sub_253462A5C(&qword_269CE6A70);
  sub_2539F0094((uint64_t)&unk_269CE6A78);
  sub_2534F84DC();
  if (!v0)
  {
    type metadata accessor for QueryStepResults(0);
    sub_253A3E2FC();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_253A3EDFC();
    sub_2534F84DC();
    sub_253A3E0A4();
    sub_253B055C0();
    sub_2539E6F90((uint64_t)&qword_26B248CA0);
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void QueryStepResults.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v13 = v4;
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253A3C4DC();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6A88);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_25348360C();
  type metadata accessor for QueryStepResults(v8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  sub_2534835B0();
  sub_253A3B978(v3);
  sub_2539EF65C();
  sub_253A3D530();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
  }
  else
  {
    sub_253462A5C(&qword_269CE6A70);
    sub_2539F0094((uint64_t)&unk_269CE6A90);
    sub_253B0A370();
    sub_253A3D888();
    sub_253A3EEBC();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253B0A370();
    sub_25347FA84();
    v10();
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253B0A370();
    sub_2534659CC();
    v11();
    sub_2534D8E14();
    v12();
    sub_2539DF660(v0, v13);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    sub_2539DF610();
  }
  sub_253A3C6AC();
  sub_2534847C8();
}

void sub_2539C805C()
{
}

void sub_2539C8074()
{
}

uint64_t QueryResults.candidates.setter()
{
  uint64_t result = sub_253A3F774();
  void *v1 = v0;
  return result;
}

uint64_t (*QueryResults.candidates.modify())()
{
  return nullsub_1;
}

IntelligenceFlowPlannerSupport::QueryResults __swiftcall QueryResults.init(candidates:)(IntelligenceFlowPlannerSupport::QueryResults candidates)
{
  v1->candidates._rawValue = candidates.candidates._rawValue;
  return candidates;
}

void static QueryResults.== infix(_:_:)()
{
}

uint64_t sub_2539C80EC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_25351C8D0();
    sub_2534F8940();
    char v4 = v2 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539C8170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C80EC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539C819C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF740();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C81D8(uint64_t a1)
{
  unint64_t v2 = sub_2539EF740();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryResults.encode(to:)()
{
  sub_2534847F8();
  sub_253A3D9E4();
  sub_253462A5C(&qword_269CE6AA0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534F8328(v0);
  sub_2539EF740();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CE6AB0);
  sub_2539EF78C();
  sub_253A3BA74();
  sub_2534F8390();
  v2();
  sub_2534F8A10();
  sub_2534847C8();
}

void QueryResults.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE6AC8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539EF740();
  sub_2534994B4();
  if (!v1)
  {
    sub_253462A5C(&qword_269CE6AB0);
    sub_2539EF830();
    sub_2534F8410();
    sub_2534D9A08();
    v3();
    sub_253A3D888();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539C83DC()
{
}

void sub_2539C83F4()
{
}

uint64_t Candidate.value.getter()
{
  return sub_2539DE358();
}

uint64_t Candidate.value.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*Candidate.value.modify())()
{
  return nullsub_1;
}

uint64_t Candidate.source.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for Candidate(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t Candidate.source.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for Candidate(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*Candidate.source.modify())()
{
  return nullsub_1;
}

void Candidate.promptStatus.getter(uint64_t a1@<X8>)
{
  type metadata accessor for Candidate(0);
  sub_253A3DB04();
  sub_253A3F6E4();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
}

void Candidate.promptStatus.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 8);
  type metadata accessor for Candidate(0);
  sub_253A3DB04();
  *(void *)uint64_t v3 = v1;
  *(unsigned char *)(v3 + 8) = v2;
}

uint64_t (*Candidate.promptStatus.modify())()
{
  return nullsub_1;
}

uint64_t Candidate.statementId.getter()
{
  return sub_2539C5638();
}

uint64_t Candidate.statementId.setter()
{
  return sub_2539C56B8();
}

uint64_t (*Candidate.statementId.modify())()
{
  return nullsub_1;
}

void Candidate.init(value:source:)()
{
  sub_2534B3258();
  char v2 = v1;
  sub_253A3E9A0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253465A3C();
  char v4 = *v2;
  sub_253A3D9A8();
  sub_253A3ECB8(v0 + v5);
  sub_253486600();
  sub_2534D970C();
  sub_2534AF234();
  v6();
  *(unsigned char *)(v0 + *((int *)v2 + 5)) = v4;
  sub_253A3D844();
  sub_2534D97B4();
  v7();
  sub_253A3F02C();
  v8();
  sub_253465A14();
}

uint64_t Candidate.init(value:source:statementId:)@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  sub_253A3D9A8();
  sub_253A3ECB8(a2 + v5);
  sub_25346CAF4();
  sub_2534D8E14();
  v6();
  *(unsigned char *)(a2 + *(int *)(v2 + 20)) = v4;
  sub_253A3E380();
  sub_25346CAF4();
  uint64_t v7 = sub_25349C5EC();
  return v8(v7);
}

void Candidate.init(value:source:promptStatus:)()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_253A3E9A0();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  char v13 = *v5;
  uint64_t v7 = *v3;
  char v8 = *((unsigned char *)v3 + 8);
  sub_253A3D9A8();
  sub_253A3ECEC();
  sub_253B09120();
  sub_253486600();
  sub_253579270();
  sub_2534AF234();
  v9();
  *(unsigned char *)(v0 + *((int *)v3 + 5)) = v13;
  *(void *)uint64_t v1 = v7;
  *(unsigned char *)(v1 + 8) = v8;
  sub_253A3D844();
  uint64_t v10 = sub_2535791D8();
  v11(v10);
  sub_253A3F02C();
  v12();
  sub_253465A14();
}

uint64_t Candidate.init(value:source:promptStatus:statementId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2535B3C98();
  uint64_t v12 = v11;
  char v14 = *v13;
  uint64_t v16 = *v15;
  char v17 = *((unsigned char *)v15 + 8);
  sub_253A3D9A8();
  uint64_t v19 = v12 + v18;
  sub_253B09120();
  sub_25346CAF4();
  sub_2534D8E14();
  v20();
  *(unsigned char *)(v12 + *(int *)(v10 + 20)) = v14;
  *(void *)uint64_t v19 = v16;
  *(unsigned char *)(v19 + 8) = v17;
  sub_253A3E380();
  sub_25346CAF4();
  sub_25349C5EC();
  sub_25346CD04();
  return v24(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t Candidate.description.getter()
{
  sub_253B0A000();
  sub_253A3DE30();
  sub_253B09860();
  sub_253B09120();
  sub_253B0A170();
  sub_253A3CE2C();
  type metadata accessor for Candidate(0);
  sub_253A3EA24();
  sub_25398231C();
  sub_253B09860();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24) + 8) != 1)
  {
    sub_253A3D258();
    sub_253B0A480();
    sub_253A3F0F8();
    swift_bridgeObjectRelease();
    sub_25351C9C4();
  }
  sub_253B09860();
  swift_bridgeObjectRelease();
  sub_253A3B848();
  sub_253A3DA18();
  sub_2539E6F90((uint64_t)&unk_269CDC560);
  sub_253A3F4D0();
  sub_253B09860();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Candidate.Source.description.getter()
{
  uint64_t result = 0x7551797469746E65;
  switch(*v0)
  {
    case 1:
      uint64_t result = sub_253A3C63C();
      break;
    case 2:
      uint64_t result = sub_253A3DF00();
      break;
    case 3:
      uint64_t result = sub_253A3C8F8();
      break;
    case 4:
      uint64_t result = sub_253A3C618();
      break;
    case 5:
      uint64_t result = sub_253A3CC24();
      break;
    case 6:
      uint64_t result = sub_253A3CDC0();
      break;
    case 7:
      uint64_t result = 0x72616573696E6D6FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Candidate.Source.rawValue.getter()
{
  uint64_t result = 0x7551797469746E65;
  switch(*v0)
  {
    case 1:
      uint64_t result = sub_253A3C63C();
      break;
    case 2:
      uint64_t result = sub_253A3DF00();
      break;
    case 3:
      uint64_t result = sub_253A3C8F8();
      break;
    case 4:
      uint64_t result = sub_253A3C618();
      break;
    case 5:
      uint64_t result = sub_253A3CC24();
      break;
    case 6:
      uint64_t result = sub_253A3CDC0();
      break;
    case 7:
      uint64_t result = 0x72616573696E6D6FLL;
      break;
    default:
      return result;
  }
  return result;
}

IntelligenceFlowPlannerSupport::Candidate::Source_optional __swiftcall Candidate.Source.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v3 = v1;
  sub_253B0A2A0();
  result.value = sub_253466CA0();
  char v5 = 8;
  if (v2 < 8) {
    char v5 = v2;
  }
  *uint64_t v3 = v5;
  return result;
}

IntelligenceFlowPlannerSupport::Candidate::Source_optional sub_2539C8CFC(Swift::String *a1)
{
  return Candidate.Source.init(rawValue:)(*a1);
}

uint64_t sub_2539C8D08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Candidate.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2539C8D30()
{
  return sub_253B09A10();
}

uint64_t sub_2539C8D90()
{
  return sub_253B099E0();
}

uint64_t sub_2539C8DE0(unsigned __int8 *a1, char *a2)
{
  return sub_25357B414(*a1, *a2);
}

uint64_t sub_2539C8DF0()
{
  return sub_25397FE6C(*v0, (void (*)(unsigned char *, uint64_t))sub_25397FEB4);
}

uint64_t sub_2539C8E20(uint64_t a1)
{
  return sub_25397FEB4(a1, *v1);
}

uint64_t sub_2539C8E28(uint64_t a1)
{
  return sub_2539811D4(a1, *v1, (void (*)(unsigned char *, uint64_t))sub_25397FEB4);
}

uint64_t Candidate.PromptStatus.description.getter()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    if (*(void *)v0) {
      return 0x656D7269666E6F63;
    }
    else {
      return 1701736302;
    }
  }
  else
  {
    sub_253A3D258();
    sub_253B0A480();
    sub_253B09860();
    swift_bridgeObjectRelease();
    sub_25351C9C4();
    return v2;
  }
}

uint64_t static Candidate.PromptStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t Candidate.PromptStatus.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8) != 1) {
    sub_253B0A600();
  }
  return sub_253B0A600();
}

uint64_t sub_2539C8F88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656D7269666E6F63 && a2 == 0xE900000000000064;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x64656B636970 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539C90CC(char a1)
{
  if (!a1) {
    return 1701736302;
  }
  if (a1 == 1) {
    return 0x656D7269666E6F63;
  }
  return 0x64656B636970;
}

uint64_t sub_2539C911C()
{
  return sub_2539C90CC(*v0);
}

uint64_t sub_2539C9124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C8F88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C914C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF8D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C9188(uint64_t a1)
{
  unint64_t v2 = sub_2539EF8D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C91C4(uint64_t a1)
{
  unint64_t v2 = sub_2539EF96C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C9200(uint64_t a1)
{
  unint64_t v2 = sub_2539EF96C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C923C(uint64_t a1)
{
  unint64_t v2 = sub_2539EF9B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C9278(uint64_t a1)
{
  unint64_t v2 = sub_2539EF9B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539C92B4(uint64_t a1)
{
  unint64_t v2 = sub_2539EF920();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539C92F0(uint64_t a1)
{
  unint64_t v2 = sub_2539EF920();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Candidate.PromptStatus.encode(to:)()
{
  sub_2534847F8();
  sub_253A3E9C8();
  sub_253462A5C(&qword_269CE6AE0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6AE8);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534B33C8(v3, v13);
  sub_253462A5C(&qword_269CE6AF0);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253483644(v5, v14);
  sub_253462A5C(&qword_269CE6AF8);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534847E0();
  uint64_t v7 = *v0;
  int v8 = *((unsigned __int8 *)v0 + 8);
  sub_253A3BED4();
  sub_2539EF8D4();
  sub_253B0A680();
  if (v8 == 1)
  {
    if (v7) {
      sub_2539EF96C();
    }
    else {
      sub_2539EF9B8();
    }
    sub_253A3BD18();
    sub_2534659CC();
    v11();
    sub_2535925F4();
    sub_2534B3470();
    v12();
  }
  else
  {
    sub_2539EF920();
    sub_253A3BD18();
    sub_253B0A430();
    sub_2534659CC();
    v9();
    sub_2535925F4();
    sub_2534D97B4();
    v10();
  }
  sub_2536D3D5C();
  sub_2534847C8();
}

uint64_t Candidate.PromptStatus.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_2534D938C();
  if (v1 != 1) {
    sub_253B0A600();
  }
  sub_2534D9D20();
  return sub_253B0A630();
}

void Candidate.PromptStatus.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v39 = v3;
  sub_253462A5C(&qword_269CE6B20);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D92D4(v5, v38);
  sub_253462A5C(&qword_269CE6B28);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534966B0();
  sub_253462A5C(&qword_269CE6B30);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE6B38);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534B3294();
  sub_2534F8630(v2);
  sub_2539EF8D4();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v40 = v2;
    uint64_t v9 = sub_253B0A390();
    if (*(void *)(v9 + 16))
    {
      sub_2534D96C0();
      int v10 = *(unsigned __int8 *)(v9 + 32);
      sub_25347B78C(1, v11, v9, v9 + 32, 0, v12);
      uint64_t v14 = v13;
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      if (v14 == v16 >> 1)
      {
        if (v10)
        {
          if (v10 != 1)
          {
            sub_2539EF920();
            sub_253A3D330();
            uint64_t v21 = sub_253B0A360();
            sub_2534659CC();
            v34(v33);
            swift_unknownObjectRelease();
            sub_2534B3470();
            v36(v35);
            char v37 = 0;
LABEL_13:
            *(void *)uint64_t v39 = v21;
            *(unsigned char *)(v39 + 8) = v37;
            uint64_t v28 = (uint64_t)v40;
            goto LABEL_9;
          }
          sub_2539EF96C();
          sub_253A3D330();
          sub_253A3D55C();
          sub_2534659CC();
          v18(v17);
          swift_unknownObjectRelease();
          sub_2534659CC();
          v20(v19);
          uint64_t v21 = 1;
        }
        else
        {
          sub_2539EF9B8();
          sub_253A3D330();
          sub_2534D8E50();
          sub_2534659CC();
          v30(v29);
          swift_unknownObjectRelease();
          sub_2534659CC();
          v32(v31);
          uint64_t v21 = 0;
        }
        char v37 = 1;
        goto LABEL_13;
      }
    }
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v23 = v22;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v23 = &type metadata for Candidate.PromptStatus;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    uint64_t v24 = sub_2534F859C();
    v25(v24);
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v26 = sub_253578EE0();
    v27(v26);
    uint64_t v2 = v40;
  }
  uint64_t v28 = (uint64_t)v2;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v28);
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539C9ACC()
{
}

void sub_2539C9AE4()
{
}

uint64_t sub_2539C9B0C()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_253B0A5F0();
  if (v1 != 1) {
    sub_253B0A600();
  }
  sub_253B0A600();
  return sub_253B0A630();
}

uint64_t static Candidate.== infix(_:_:)()
{
  sub_2534DA0C4();
  if ((sub_253B090F0() & 1) == 0) {
    return 0;
  }
  type metadata accessor for Candidate(0);
  sub_253A3EA24();
  if ((sub_25357B414(*(unsigned char *)(v1 + v3), *(unsigned char *)(v0 + v3)) & 1) == 0) {
    return 0;
  }
  sub_253A3F6E4();
  if (v7 == 1)
  {
    if (v6)
    {
      if (!v5) {
        char v4 = 0;
      }
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v5) {
        char v4 = 0;
      }
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
  }
  else
  {
    if (v6 != v5) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  sub_2534F8774(*(int *)(v2 + 28));
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t Candidate.hash(into:)(uint64_t a1)
{
  sub_253B09120();
  sub_2539E6F90((uint64_t)&unk_269CDCA98);
  sub_2534D9AA0();
  sub_253B095D0();
  uint64_t v3 = type metadata accessor for Candidate(0);
  sub_25397FEB4(a1, *(unsigned char *)(v1 + *(int *)(v3 + 20)));
  if (*(unsigned char *)(v1 + *(int *)(v3 + 24) + 8) != 1) {
    sub_253B0A600();
  }
  sub_253B0A600();
  sub_253A3E380();
  sub_2539E6F90((uint64_t)&qword_269CDBEB0);
  sub_2534D970C();
  return sub_253B095D0();
}

uint64_t sub_2539C9D54(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x745374706D6F7270 && a2 == 0xEC00000073757461;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_2539C9F24(char a1)
{
  uint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656372756F73;
      break;
    case 2:
      uint64_t result = 0x745374706D6F7270;
      break;
    case 3:
      uint64_t result = 0x6E656D6574617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539C9FC0()
{
  return sub_2539C9F24(*v0);
}

uint64_t sub_2539C9FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539C9D54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539C9FF0(uint64_t a1)
{
  unint64_t v2 = sub_2539EFA04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CA02C(uint64_t a1)
{
  unint64_t v2 = sub_2539EFA04();
  return MEMORY[0x270FA00B8](a1, v2);
}

void Candidate.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6B40);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EFA04();
  sub_2534DA3BC();
  sub_253A3EE60();
  sub_2539E6F90((uint64_t)&qword_269CDBAB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for Candidate(0);
    sub_253A3CF40();
    sub_2539EFA50();
    sub_2534F84DC();
    sub_253A3CE44();
    sub_2539EFA9C();
    sub_2534F84DC();
    sub_253A3E070();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

uint64_t Candidate.hashValue.getter()
{
  sub_2534D938C();
  Candidate.hash(into:)((uint64_t)v1);
  return sub_253B0A630();
}

void Candidate.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_2534847F8();
  unint64_t v15 = v14;
  uint64_t v32 = v16;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  sub_253A3D798(v18, v30);
  sub_253B09120();
  sub_253465998();
  MEMORY[0x270FA5388](v19);
  sub_2534D8F84(v20, v31);
  sub_253462A5C(&qword_269CE6B60);
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = sub_25397F55C();
  uint64_t v23 = type metadata accessor for Candidate(v22);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v24);
  sub_253A3C52C();
  uint64_t v26 = v13 + v25;
  *(void *)uint64_t v26 = 0;
  *(unsigned char *)(v26 + 8) = 1;
  sub_253A3B978(v15);
  sub_2539EFA04();
  sub_253B0A660();
  if (v12)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v15);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_253A3C6B8();
    sub_253B0A370();
    sub_253A3DB5C();
    sub_25347FA84();
    v27();
    sub_253A3CF40();
    sub_2539EFAE8();
    sub_253A3ED04();
    *(unsigned char *)(v13 + *(int *)(v23 + 20)) = a12;
    sub_253A3D2B8();
    sub_2539EFB34();
    sub_253A3ED04();
    *(void *)uint64_t v26 = v33;
    *(unsigned char *)(v26 + 8) = v34;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE34();
    sub_253B0A370();
    sub_2534659CC();
    v28();
    sub_2534D8E14();
    v29();
    sub_2539DF660(v13, v32);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v15);
    sub_2539DF610();
  }
  sub_2534847C8();
}

void sub_2539CA62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Candidate.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4], vars8[6]);
}

void sub_2539CA644()
{
}

uint64_t sub_2539CA66C()
{
  sub_253B0A5F0();
  Candidate.hash(into:)((uint64_t)v1);
  return sub_253B0A630();
}

void Session.Event.createNewEvent(from:)()
{
  uint64_t v0 = type metadata accessor for PreassignedEventID();
  uint64_t v1 = sub_25346CB4C(v0);
  MEMORY[0x270FA5388](v1);
  sub_253A3DCFC();
  Session.Event.formingResponse(id:_:)();
}

void Session.Event.formingResponse(_:)()
{
  uint64_t v0 = type metadata accessor for PreassignedEventID();
  uint64_t v1 = sub_25346CB4C(v0);
  MEMORY[0x270FA5388](v1);
  sub_253A3DCFC();
  Session.Event.formingResponse(id:_:)();
}

void Session.Event.formingResponse(id:_:)()
{
  sub_2534B3258();
  uint64_t v53 = v4;
  uint64_t v55 = v5;
  sub_253B05550();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_25349888C();
  uint64_t v52 = type metadata accessor for Timepoint();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = sub_2534AF2D8();
  uint64_t v9 = type metadata accessor for Session.Event.Payload(v8);
  uint64_t v10 = sub_25346CB4C(v9);
  MEMORY[0x270FA5388](v10);
  sub_2534966B0();
  uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v12 = sub_25346CB4C(v11);
  MEMORY[0x270FA5388](v12);
  sub_2534D8CAC();
  uint64_t v13 = sub_253B055C0();
  sub_253465998();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  sub_253A3B8EC();
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  sub_253A3D8EC(v18, v19, v20, v21, v22, v23, v24, v25, v45);
  uint64_t v26 = *(void (**)(void))(v15 + 16);
  sub_253535668();
  v26();
  uint64_t v27 = (int *)type metadata accessor for Session.Event(0);
  sub_2534F87A4();
  sub_253535668();
  v26();
  uint64_t v51 = v2;
  sub_253961F60(v0 + v27[6], v2, (uint64_t *)&unk_26B248CB0);
  uint64_t v28 = v53;
  uint64_t v54 = v3;
  sub_2539DF660(v28, v3);
  uint64_t v29 = (uint64_t *)(v0 + v27[8]);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  uint64_t v32 = (uint64_t *)(v0 + v27[9]);
  uint64_t v33 = v32[1];
  uint64_t v49 = v30;
  uint64_t v50 = *v32;
  uint64_t v34 = v27[11];
  uint64_t v35 = (uint64_t *)(v0 + v27[10]);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  uint64_t v38 = v0 + v34;
  uint64_t v39 = *(void *)(v0 + v34);
  uint64_t v40 = *(void *)(v38 + 8);
  uint64_t v46 = v39;
  uint64_t v47 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v48 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_253B05520();
  __uint64_t v41 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  __uint64_t v42 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_26B241258 != -1) {
    swift_once();
  }
  sub_253462BD4(v13, (uint64_t)qword_26B24A6A8);
  sub_253535668();
  v26();
  sub_2534D8E14();
  v43();
  *(void *)(v1 + *(int *)(v52 + 20)) = v41;
  *(void *)(v1 + *(int *)(v52 + 24)) = v42;
  sub_2539E6E54();
  uint64_t v44 = sub_253B095A0();
  Session.Event.init(id:sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)(v51, v54, v49, v31, v50, v48, v55, v47, v37, v46, v40, v1, 0, 0, 0, 1, v44);
  sub_2539DF610();
  sub_253465A14();
}

void Session.Event.Payload.statementIds.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_2534B3258();
  a19 = v24;
  a20 = v25;
  uint64_t v268 = v20;
  uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
  uint64_t v27 = sub_25346CB4C(DecorationPrePlannerResult);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = sub_253A3D0E4(v28, v239);
  uint64_t v259 = type metadata accessor for ClientUndoRedoRequest(v29);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = sub_253A3D150(v31, v239);
  uint64_t v257 = type metadata accessor for UndoRedoRequest(v32);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = sub_253A3D108(v34, v239);
  uint64_t v255 = type metadata accessor for ToolResolution(v35);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = sub_253A3BFDC(v37, v239);
  uint64_t DecorationResult = type metadata accessor for QueryDecorationResult(v38);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = sub_253A3BA50(v40, v239);
  uint64_t v252 = type metadata accessor for TypeConversionResult(v41);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v42);
  v253 = (char *)&v239 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = type metadata accessor for TypeConversionRequest(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v44);
  uint64_t v46 = sub_253A3E670((uint64_t)&v239 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = sub_25346CB4C(v46);
  MEMORY[0x270FA5388](v47);
  uint64_t v49 = sub_253A3D12C(v48, v239);
  uint64_t v50 = type metadata accessor for Action(v49);
  uint64_t v51 = sub_25346CB4C(v50);
  MEMORY[0x270FA5388](v51);
  v249 = (char *)&v239 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v247 = type metadata accessor for ActionResolverRequest(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v53);
  v248 = (char *)&v239 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t StepResults = type metadata accessor for QueryStepResults(0);
  uint64_t v56 = sub_25346CB4C(StepResults);
  MEMORY[0x270FA5388](v56);
  uint64_t v245 = sub_253A3E654((uint64_t)&v239 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_25346CAF4();
  MEMORY[0x270FA5388](v58);
  sub_2534D8F5C((uint64_t)&v239 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = sub_253462A5C(&qword_269CDB460);
  uint64_t v61 = sub_25346CB34(v60);
  uint64_t v243 = v62;
  MEMORY[0x270FA5388](v61);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v63);
  sub_2534B35DC();
  uint64_t v244 = v64;
  uint64_t v65 = type metadata accessor for ActionCancellation(0);
  uint64_t v66 = sub_25346CB4C(v65);
  MEMORY[0x270FA5388](v66);
  sub_2534F8208((uint64_t)&v239 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_253B06F40();
  sub_253465998();
  uint64_t v264 = v68;
  uint64_t v265 = v69;
  MEMORY[0x270FA5388](v68);
  sub_2534D9C00();
  sub_253B059D0();
  sub_253465998();
  uint64_t v266 = v70;
  uint64_t v267 = v71;
  MEMORY[0x270FA5388](v70);
  sub_2534659D8();
  sub_2534F823C();
  MEMORY[0x270FA5388](v72);
  sub_2534F823C();
  MEMORY[0x270FA5388](v73);
  sub_2534B35DC();
  uint64_t v242 = v74;
  sub_253B06720();
  sub_253465998();
  uint64_t v262 = v76;
  uint64_t v263 = v75;
  MEMORY[0x270FA5388](v75);
  uint64_t v78 = sub_253A3C264(v77, v239);
  uint64_t v260 = type metadata accessor for RequestContent.SystemPromptResolution(v78);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v79);
  uint64_t v81 = sub_253A3D778(v80, v239);
  uint64_t v82 = type metadata accessor for RequestContent.TextContent(v81);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v83);
  sub_253A3DD90();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v84);
  uint64_t v85 = sub_25349888C();
  uint64_t v86 = type metadata accessor for Request(v85);
  uint64_t v87 = sub_25346CB4C(v86);
  MEMORY[0x270FA5388](v87);
  sub_25346CB04();
  uint64_t v89 = v88;
  uint64_t v90 = type metadata accessor for TextQuery(0);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v91);
  sub_253A3C548();
  sub_25346CAF4();
  MEMORY[0x270FA5388](v92);
  sub_2534847E0();
  sub_2539DF660(v268, (uint64_t)v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v94 = MEMORY[0x263F8EE78];
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v182 = sub_2535925F4();
      sub_2539DF5B8(v182, v183);
      sub_253462A5C(&qword_269CDE508);
      uint64_t v184 = v267;
      unint64_t v185 = (*(unsigned __int8 *)(v267 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v267 + 80);
      uint64_t v186 = swift_allocObject();
      *(_OWORD *)(v186 + 16) = xmmword_253B22680;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v184 + 16))(v186 + v185, v22 + *(int *)(v90 + 24), v266);
      goto LABEL_59;
    case 2:
      uint64_t v194 = swift_bridgeObjectRetain();
      sub_253981928(v194, (uint64_t)v270, v195, v196, v197, v198, v199, v200, v239, v240);
      sub_253A3DF60();
      goto LABEL_54;
    case 3:
      sub_2539DF5B8((uint64_t)v21, v89);
      uint64_t v121 = sub_2534D96CC();
      sub_2539DF660(v121, v122);
      sub_253A3D524();
      int v123 = swift_getEnumCaseMultiPayload();
      uint64_t v130 = v266;
      switch(v123)
      {
        case 1:
          uint64_t v131 = sub_2534DA604();
          sub_2539DF5B8(v131, v132);
          sub_253462A5C(&qword_269CDE508);
          uint64_t v133 = v267;
          v134 = (__n128 *)sub_253A3B89C();
          v135 = sub_253A3D24C(v134, (__n128)xmmword_253B22680);
          (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v135, v20 + *(int *)(v82 + 20), v130);
          goto LABEL_72;
        case 2:
          sub_253981928(*v23, (uint64_t)&v269, v124, v125, v126, v127, v128, v129, v239, v240);
          sub_253466CA0();
          break;
        case 3:
          uint64_t v234 = v261;
          sub_2539DF5B8((uint64_t)v23, v261);
          sub_253462A5C(&qword_269CDE508);
          uint64_t v235 = sub_253A3B7A8();
          *(_OWORD *)(v235 + 16) = xmmword_253B22680;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v235 + v90, v234 + *(int *)(v260 + 28), v130);
LABEL_72:
          sub_2539DF610();
          break;
        default:
          goto LABEL_59;
      }
      goto LABEL_59;
    case 4:
      uint64_t v187 = swift_bridgeObjectRetain();
      sub_253981FDC(v187, (uint64_t)&v271, (uint64_t)type metadata accessor for ProgramStatement, v188, v189, v190, v191, v192, v239, v240);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_54;
    case 5:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&v272);
      sub_253462A5C(&qword_269CDE508);
      *(_OWORD *)(sub_253A3B7A8() + 16) = xmmword_253B22680;
      sub_253A3BBA0();
      v193();
      goto LABEL_59;
    case 6:
      uint64_t v205 = v250;
      sub_2539DF5B8((uint64_t)v21, v250);
      sub_253462A5C(&qword_269CE6B78);
      uint64_t v206 = sub_253A3B89C();
      *(_OWORD *)(v206 + 16) = xmmword_253B22680;
      uint64_t v207 = v206 + v90;
      sub_253961F60(v205, v207, &qword_269CDB460);
      uint64_t v208 = v207;
      uint64_t v209 = v244;
      sub_253961F60(v208, v244, &qword_269CDB460);
      uint64_t v210 = v209;
      uint64_t v211 = v246;
      sub_253961F14(v210, v246, &qword_269CDB460);
      uint64_t v143 = v266;
      sub_2534D8B48(v211, 1, v266);
      if (v212)
      {
        sub_253472458(v211, &qword_269CDB460);
        goto LABEL_65;
      }
      v138 = *(void (**)(uint64_t))(v267 + 32);
      uint64_t v226 = v240;
      uint64_t v227 = sub_25351C5CC();
      v138(v227);
      uint64_t v136 = v241;
      ((void (*)(uint64_t, uint64_t, uint64_t))v138)(v241, v226, v143);
      uint64_t v141 = MEMORY[0x263F8EE78];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_62;
      }
      goto LABEL_78;
    case 8:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&v274);
      sub_253462A5C(&qword_269CDE508);
      *(_OWORD *)(sub_253A3B7A8() + 16) = xmmword_253B22680;
      sub_253A3BBA0();
      v215();
      goto LABEL_59;
    case 10:
    case 11:
    case 21:
    case 23:
    case 24:
    case 26:
    case 29:
      goto LABEL_54;
    case 12:
      swift_bridgeObjectRelease();
      goto LABEL_41;
    case 14:
      uint64_t v201 = v21[2];
      unint64_t v202 = v21[3];
      sub_253487D84(*v21, v21[1]);
      sub_253487D84(v201, v202);
      goto LABEL_54;
    case 16:
      sub_2539DF5B8((uint64_t)v21, v261);
      sub_253462A5C(&qword_269CDE508);
      *(_OWORD *)(sub_253A3B7A8() + 16) = xmmword_253B22680;
      sub_253A3B9C0();
      v162();
      goto LABEL_59;
    case 18:
      uint64_t v136 = v254;
      sub_2539DF5B8((uint64_t)v21, v254);
      uint64_t v137 = *(void *)v136;
      v138 = *(void (**)(uint64_t))(*(void *)v136 + 16);
      if (!v138)
      {
        uint64_t v140 = MEMORY[0x263F8EE78];
        goto LABEL_68;
      }
      swift_bridgeObjectRetain();
      uint64_t v139 = 0;
      uint64_t v140 = MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t v141 = *(void *)(v137 + 8 * v139 + 32);
        uint64_t v142 = *(void *)(v141 + 16);
        uint64_t v143 = *(void *)(v140 + 16);
        uint64_t v144 = v143 + v142;
        if (__OFADD__(v143, v142)) {
          break;
        }
        swift_bridgeObjectRetain();
        int v145 = swift_isUniquelyReferenced_nonNull_native();
        if (!v145 || v144 > *(void *)(v140 + 24) >> 1)
        {
          if (v143 <= v144) {
            uint64_t v146 = v143 + v142;
          }
          else {
            uint64_t v146 = v143;
          }
          sub_253523B00(v145, v146, 1, v140);
          uint64_t v140 = v147;
        }
        if (*(void *)(v141 + 16))
        {
          uint64_t v143 = *(void *)(v140 + 16);
          uint64_t v148 = (*(void *)(v140 + 24) >> 1) - v143;
          type metadata accessor for Candidate(0);
          sub_253526778();
          uint64_t v151 = *(void *)(v150 + 72);
          if (v148 < v142) {
            goto LABEL_76;
          }
          unint64_t v152 = (*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
          unint64_t v153 = v140 + v152 + v151 * v143;
          unint64_t v154 = v141 + v152;
          uint64_t v155 = v151 * v142;
          unint64_t v156 = v153 + v155;
          unint64_t v157 = v154 + v155;
          if (v154 < v156 && v153 < v157)
          {
            sub_2535266C8();
            sub_253526844();
            sub_25352671C();
            __break(1u);
            JUMPOUT(0x2539CBF9CLL);
          }
          swift_arrayInitWithCopy();
          if (v142)
          {
            uint64_t v159 = *(void *)(v140 + 16);
            BOOL v160 = __OFADD__(v159, v142);
            uint64_t v161 = v159 + v142;
            if (v160) {
              goto LABEL_77;
            }
            *(void *)(v140 + 16) = v161;
          }
        }
        else if (v142)
        {
          goto LABEL_75;
        }
        swift_bridgeObjectRelease();
        if (v138 == (void (*)(uint64_t))++v139)
        {
          swift_bridgeObjectRelease();
LABEL_68:
          sub_253981A98(v140);
          sub_253466CA0();
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      sub_253522EC4(0, *(void *)(v141 + 16) + 1, 1, v141);
      uint64_t v141 = v236;
LABEL_62:
      unint64_t v230 = *(void *)(v141 + 16);
      unint64_t v229 = *(void *)(v141 + 24);
      if (v230 >= v229 >> 1)
      {
        char v237 = sub_253526BBC(v229);
        sub_253522EC4(v237, v230 + 1, 1, v141);
        uint64_t v141 = v238;
      }
      *(void *)(v141 + 16) = v230 + 1;
      sub_253A3E74C();
      ((void (*)(unint64_t, uint64_t, uint64_t))v138)(v231 + v232 * v230, v136, v143);
LABEL_65:
      swift_setDeallocating();
      sub_2539DF9E4();
LABEL_59:
      sub_2539DF610();
LABEL_60:
      sub_253465A14();
      return;
    case 20:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&v271);
      uint64_t v97 = swift_bridgeObjectRetain();
      sub_253981600(v97);
      sub_2534F8940();
      swift_bridgeObjectRetain();
      sub_253981CB0();
      sub_253466CA0();
      uint64_t v274 = v20;
      sub_253478AA8(0);
      goto LABEL_59;
    case 22:
    case 36:
LABEL_41:
      swift_bridgeObjectRelease();
      goto LABEL_54;
    case 25:
    case 43:
    case 45:
    case 46:
    case 47:
    case 48:
      goto LABEL_60;
    case 27:
      uint64_t v274 = *v21;
      swift_bridgeObjectRetain();
      uint64_t v218 = swift_bridgeObjectRetain();
      sub_253478A68(v218);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253981FDC(v274, (uint64_t)&v272, (uint64_t)type metadata accessor for RetrievedContextStatement, v219, v220, v221, v222, v223, v239, v240);
      goto LABEL_54;
    case 28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_54:
      swift_bridgeObjectRelease();
      goto LABEL_60;
    case 30:
      sub_25347FA84();
      v166();
      uint64_t v167 = sub_253B066E0();
      uint64_t v168 = *(void *)(v167 + 16);
      if (v168)
      {
        uint64_t v274 = v94;
        sub_2539E7ADC();
        uint64_t v268 = *(void *)(v265 + 16);
        sub_2535786F4();
        uint64_t v170 = v167 + v169;
        uint64_t v172 = *(void *)(v171 + 56);
        uint64_t v260 = v167;
        uint64_t v261 = v172;
        uint64_t v265 = v171;
        uint64_t v173 = v242;
        do
        {
          sub_2534D9B1C();
          sub_2534AF234();
          v174();
          sub_253B06EE0();
          sub_2534DA178();
          sub_2534B3470();
          v175();
          uint64_t v176 = v274;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2539E7ADC();
            uint64_t v176 = v274;
          }
          unint64_t v178 = *(void *)(v176 + 16);
          unint64_t v177 = *(void *)(v176 + 24);
          if (v178 >= v177 >> 1)
          {
            sub_253526BBC(v177);
            sub_2539E7ADC();
            uint64_t v176 = v274;
          }
          *(void *)(v176 + 16) = v178 + 1;
          sub_253A3E74C();
          (*(void (**)(unint64_t, uint64_t))(v181 + 32))(v179 + v180 * v178, v173);
          uint64_t v274 = v176;
          v170 += v261;
          --v168;
        }
        while (v168);
      }
      swift_bridgeObjectRelease();
      sub_2534659CC();
      v233();
      goto LABEL_60;
    case 31:
      sub_253A3BE74((uint64_t)v21, (uint64_t)v270);
      sub_253462A5C(&qword_269CDE508);
      v203 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v203, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v204();
      goto LABEL_59;
    case 37:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&a11);
      sub_253462A5C(&qword_269CDE508);
      v216 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v216, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v217();
      goto LABEL_59;
    case 38:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&a14);
      sub_253462A5C(&qword_269CDE508);
      uint64_t v95 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v95, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v96();
      goto LABEL_59;
    case 39:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&a17);
      sub_253462A5C(&qword_269CDE508);
      v163 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v163, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v164();
      goto LABEL_59;
    case 40:
      sub_253A3BE74((uint64_t)v21, (uint64_t)v276);
      sub_253462A5C(&qword_269CDE508);
      v213 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v213, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v214();
      goto LABEL_59;
    case 41:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&v277);
      sub_253462A5C(&qword_269CDE508);
      v224 = (__n128 *)sub_253A3B7A8();
      sub_253A3D24C(v224, (__n128)xmmword_253B22680);
      sub_253A3B9C0();
      v225();
      goto LABEL_59;
    case 42:
      sub_2539DF5B8((uint64_t)v21, v258);
      uint64_t v98 = swift_bridgeObjectRetain();
      sub_253981FDC(v98, (uint64_t)v276, (uint64_t)type metadata accessor for RetrievedContextStatement, v99, v100, v101, v102, v103, v239, v240);
      uint64_t v105 = v104;
      swift_bridgeObjectRelease();
      uint64_t v106 = swift_bridgeObjectRetain();
      sub_253981FDC(v106, (uint64_t)&v275, (uint64_t)type metadata accessor for RetrievedContextStatement, v107, v108, v109, v110, v111, v239, v240);
      uint64_t v113 = v112;
      swift_bridgeObjectRelease();
      uint64_t v274 = v105;
      sub_253478AA8(v113);
      uint64_t v114 = v274;
      uint64_t v115 = swift_bridgeObjectRetain();
      sub_253981FDC(v115, (uint64_t)&v273, (uint64_t)type metadata accessor for DynamicEnumerationEntityStatement, v116, v117, v118, v119, v120, v239, v240);
      sub_253466CA0();
      uint64_t v274 = v114;
      sub_253478AA8(0);
      goto LABEL_59;
    case 44:
      sub_253A3BE74((uint64_t)v21, (uint64_t)&a18);
      sub_253462A5C(&qword_269CDE508);
      *(_OWORD *)(sub_253A3B7A8() + 16) = xmmword_253B22680;
      sub_253A3BBA0();
      v165();
      goto LABEL_59;
    default:
      goto LABEL_59;
  }
}

void Session.Transcript.init(mockTranscript:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v53 = sub_253B05120();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534D8CAC();
  uint64_t v8 = sub_253B055C0();
  sub_253465998();
  uint64_t v10 = v9;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v12);
  sub_2534B35DC();
  uint64_t v51 = v13;
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  uint64_t v46 = sub_253B05570();
  uint64_t v47 = v10;
  uint64_t v48 = v14;
  uint64_t v15 = *(void *)(v10 + 8);
  uint64_t v52 = v8;
  uint64_t v49 = v15;
  uint64_t v50 = v10 + 8;
  sub_253477128();
  v16();
  type metadata accessor for Session.StatementIdCounter();
  swift_allocObject();
  uint64_t v17 = Session.StatementIdCounter.init(baseStatementIdIndex:)(1);
  *(void *)&long long v54 = v4;
  *((void *)&v54 + 1) = v2;
  sub_25346C800();
  uint64_t v18 = sub_253B09EF0();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    v44[2] = v17;
    uint64_t v45 = v6;
    uint64_t v57 = MEMORY[0x263F8EE78];
    sub_253A3F4A0();
    sub_2539E6C84();
    v44[1] = v18;
    uint64_t v20 = (uint64_t *)(v18 + 56);
    do
    {
      uint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      long long v54 = *(_OWORD *)(v20 - 3);
      uint64_t v55 = v21;
      uint64_t v56 = v22;
      swift_bridgeObjectRetain();
      sub_253B05100();
      sub_2539EFB80();
      uint64_t v23 = sub_253B09EB0();
      uint64_t v25 = v24;
      sub_2534F85D4();
      v26();
      swift_bridgeObjectRelease();
      uint64_t v27 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_253A3E764();
        sub_2539E6C84();
        uint64_t v27 = v57;
      }
      unint64_t v29 = *(void *)(v27 + 16);
      unint64_t v28 = *(void *)(v27 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_253526BBC(v28);
        sub_2539E6C84();
        uint64_t v27 = v57;
      }
      *(void *)(v27 + 16) = v29 + 1;
      uint64_t v30 = v27 + 16 * v29;
      *(void *)(v30 + 32) = v23;
      *(void *)(v30 + 40) = v25;
      v20 += 4;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v6 = v45;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_retain();
  uint64_t v31 = sub_253578EEC();
  sub_253982140(v31, v32);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v33);
    uint64_t v34 = v46;
    v44[-8] = v51;
    v44[-7] = v34;
    uint64_t v35 = v48;
    v44[-6] = v48;
    v44[-5] = 0;
    v44[-3] = 0;
    v44[-2] = 0;
    v44[-4] = 0xE000000000000000;
    sub_25396478C();
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    swift_release();
    sub_253A3D524();
    sub_2534B3428();
    v38();
    uint64_t v39 = type metadata accessor for Session.Transcript(0);
    uint64_t v40 = (uint64_t *)(v6 + *(int *)(v39 + 20));
    uint64_t *v40 = v34;
    v40[1] = v35;
    sub_253A3E208((void *)(v6 + *(int *)(v39 + 24)));
    sub_253A3EF60((void *)(v6 + v41));
    *(void *)(v6 + v42) = v37;
    sub_2536D3880();
  }
  sub_253477128();
  v43();
  sub_2536D3D5C();
  sub_2534847C8();
}

uint64_t sub_2539CC42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  sub_25346C800();
  uint64_t v7 = (void *)sub_253B09EF0();
  uint64_t v8 = v7;
  unint64_t v9 = v7[2];
  if (v9)
  {
    uint64_t v48 = a4;
    unint64_t v11 = v7[4];
    unint64_t v10 = v7[5];
    uint64_t v13 = v7[6];
    uint64_t v12 = v7[7];
    if (sub_2539DF8D8(0x7265755174786574, 0xE900000000000079, v11, v10, v13, v12))
    {
      if (v9 >= 2)
      {
        uint64_t v14 = v8[8];
        uint64_t v15 = v8[9];
        uint64_t v16 = v8[10];
        uint64_t v17 = v8[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v18 = MEMORY[0x25A268760](v14, v15, v16, v17);
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 16), 1u, memory_order_relaxed);
        uint64_t v21 = type metadata accessor for TextQuery(0);
        sub_253B059B0();
        uint64_t v22 = (void *)(v48 + *(int *)(v21 + 28));
        *(void *)uint64_t v48 = v18;
        *(void *)(v48 + 8) = v20;
        *(unsigned char *)(v48 + 16) = 0;
        type metadata accessor for Session.Event.Payload(0);
        *uint64_t v22 = 0;
        v22[1] = 0;
        return swift_storeEnumTagMultiPayload();
      }
      goto LABEL_11;
    }
    if (sub_2539DF8D8(0x616572436E616C70, 0xEB00000000646574, v11, v10, v13, v12))
    {
      if (v9 >= 2)
      {
        uint64_t v25 = v8[8];
        uint64_t v26 = v8[9];
        uint64_t v28 = v8[10];
        uint64_t v27 = v8[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v29 = MEMORY[0x25A268760](v25, v26, v28, v27);
        static Parser.parse(string:)(v29, v30, &v49);
        if (v4)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v39 = v49;
        uint64_t v49 = MEMORY[0x263F8EE78];
        uint64_t v50 = MEMORY[0x263F8EE80];
        uint64_t v51 = a3;
        char v52 = 0;
        uint64_t v53 = v39;
        swift_retain();
        unint64_t v40 = ExpressionFlattener.flatten(program:)(&v53);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = MEMORY[0x25A268760](v25, v26, v28, v27);
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v48 = 0;
        *(void *)(v48 + 8) = 0xE000000000000000;
        *(void *)(v48 + 16) = v42;
        *(void *)(v48 + 24) = v44;
        *(void *)(v48 + 40) = 0;
        *(void *)(v48 + 48) = 0;
        *(void *)(v48 + 32) = v40;
        *(unsigned char *)(v48 + 56) = 2;
        type metadata accessor for Session.Event.Payload(0);
        return swift_storeEnumTagMultiPayload();
      }
LABEL_11:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v31 = MEMORY[0x25A268760](v11, v10, v13, v12);
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      sub_253A3B328();
      swift_allocError();
      *(void *)uint64_t v34 = v31;
      *(void *)(v34 + 8) = v33;
      *(void *)(v34 + 16) = 1;
      *(unsigned char *)(v34 + 24) = 1;
      return swift_willThrow();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (sub_2539DF8D8(0x74616E696D726574, 0xE900000000000065, v11, v10, v13, v12))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for Session.Event.Payload(0);
      return swift_storeEnumTagMultiPayload();
    }
    if ((sub_2539DF8D8(0xD000000000000015, 0x8000000253B13B60, v11, v10, v13, v12) & 1) != 0
      || (sub_2539DF8D8(0x6365784570657473, 0xEC00000064657475, v11, v10, v13, v12) & 1) != 0
      || (sub_2539DF8D8(0xD000000000000010, 0x8000000253B12550, v11, v10, v13, v12) & 1) != 0
      || (sub_2539DF8D8(0x6C61636974697263, 0xED0000726F727245, v11, v10, v13, v12) & 1) != 0)
    {
      uint64_t v35 = MEMORY[0x25A268760](v11, v10, v13, v12);
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
      sub_253A3B328();
      swift_allocError();
      *(void *)uint64_t v38 = v35;
      *(void *)(v38 + 8) = v37;
      *(void *)(v38 + 16) = 0;
      *(unsigned char *)(v38 + 24) = 0;
      return swift_willThrow();
    }
    uint64_t v45 = MEMORY[0x25A268760](v11, v10, v13, v12);
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    sub_253A3B328();
    swift_allocError();
    *(void *)uint64_t v23 = v45;
    *(void *)(v23 + 8) = v47;
    *(void *)(v23 + 16) = 0;
    char v24 = 2;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_253A3B328();
    swift_allocError();
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0;
    *(void *)uint64_t v23 = 0;
    char v24 = 3;
  }
  *(unsigned char *)(v23 + 24) = v24;
  return swift_willThrow();
}

void sub_2539CC9B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v51 = a4;
  uint64_t v52 = a8;
  uint64_t v48 = a7;
  uint64_t v49 = a3;
  uint64_t v53 = a6;
  uint64_t v42 = (char *)a2;
  uint64_t v44 = (char *)a1;
  uint64_t v47 = a9;
  uint64_t v9 = sub_253B05550();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v41 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Timepoint();
  MEMORY[0x270FA5388](v43);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Session.Event.Payload(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_253B055C0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v26((char *)&v38 - v24, v42, v19);
  uint64_t v42 = v18;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 1, 1, v19);
  uint64_t v27 = (uint64_t)v44;
  uint64_t v44 = v15;
  sub_2539DF660(v27, (uint64_t)v15);
  _s30IntelligenceFlowPlannerSupport20PlatformPnRTelemetryC7startedy10Foundation4UUIDVAA12StartedStateO_0aE7Library0aB11IdentifiersVSgAGtFZfA1__0();
  uint64_t v28 = sub_253B05570();
  uint64_t v39 = v29;
  uint64_t v40 = v28;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = v41;
  sub_253B05520();
  __uint64_t v31 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  __uint64_t v32 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_26B241258 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_253462BD4(v19, (uint64_t)qword_26B24A6A8);
  uint64_t v34 = v43;
  v26(&v12[*(int *)(v43 + 28)], (char *)v33, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v12, v30, v46);
  *(void *)&v12[*(int *)(v34 + 20)] = v31;
  *(void *)&v12[*(int *)(v34 + 24)] = v32;
  sub_2539E6E54();
  uint64_t v35 = sub_253B095A0();
  LOBYTE(v36) = 1;
  Session.Event.init(sessionId:queryEventId:payload:clientRequestId:clientSessionId:clientApplicationId:clientGroupId:timepoint:sender:postingSpan:initiatedSpans:)((uint64_t)v25, (uint64_t)v42, (uint64_t)v44, v40, v39, v49, v51, v50, v53, v48, v52, (uint64_t)v12, 0, 0, 0, v36, v35, v37, v38,
    v39,
    v40,
    v41,
    (uint64_t)v42,
    v43,
    (uint64_t)v44,
    v45,
    v46,
    v47,
    v48);
}

uint64_t SpeechRequestCandidate.statementId.getter()
{
  return sub_2539A3E30();
}

uint64_t SpeechRequestCandidate.init(_:nextStatementIdIndex:)()
{
  uint64_t v2 = sub_253A3E9A0();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  uint64_t *v0 = sub_253B05D80();
  v0[1] = v6;
  sub_253B059B0();
  sub_253B05D90();
  sub_25346CAF4();
  sub_2534659CC();
  v7();
  uint64_t v8 = type metadata accessor for SpeechRequestCandidate(0);
  uint64_t v9 = sub_253A3E348(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, v1, v2);
}

uint64_t SpeechRequestCandidate.init(_:)()
{
  uint64_t v2 = sub_253A3E9A0();
  sub_253465998();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  sub_2534B3294();
  uint64_t *v0 = sub_253B05A20();
  v0[1] = v6;
  sub_253B06180();
  sub_253B06190();
  sub_25346CAF4();
  sub_2534659CC();
  v7();
  uint64_t v8 = type metadata accessor for SpeechRequestCandidate(0);
  uint64_t v9 = sub_253A3E348(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9, v1, v2);
}

uint64_t static SpeechRequestCandidate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_2539CCFC0(a1, a2, type metadata accessor for SpeechRequestCandidate);
}

uint64_t sub_2539CCFC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  sub_253A3C5FC(a1);
  BOOL v6 = v6 && v4 == v5;
  if (!v6 && (sub_253B0A4C0() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = a3(0);
  sub_253A3BFB0(v7);
  return _s30IntelligenceFlowPlannerSupport14OpenExpressionV2eeoiySbAC_ACtFZ_0();
}

uint64_t sub_2539CD034(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74696E676F636572 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539CD154(char a1)
{
  if (a1) {
    return 0x6E656D6574617473;
  }
  else {
    return 0x74696E676F636572;
  }
}

uint64_t sub_2539CD19C()
{
  return sub_2539CD154(*v0);
}

uint64_t sub_2539CD1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539CD034(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539CD1CC(uint64_t a1)
{
  unint64_t v2 = sub_2539EFC04();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CD208(uint64_t a1)
{
  unint64_t v2 = sub_2539EFC04();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SpeechRequestCandidate.encode(to:)()
{
}

void sub_2539CD294()
{
  sub_2534847F8();
  uint64_t v10 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_253462A5C(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  uint64_t v8 = sub_2534F8630(v5);
  v3(v8);
  sub_253B0A680();
  sub_253A3EDD0();
  sub_253B0A3F0();
  if (!v0)
  {
    v10(0);
    sub_253A3E2C0();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_253A3EF18();
    sub_253B0A440();
  }
  sub_2534659CC();
  v9();
  sub_2534F8590();
  sub_2534847C8();
}

void SpeechRequestCandidate.init(from:)()
{
  sub_2534847F8();
  v14[4] = sub_253A3ED70(v2);
  sub_253465998();
  v14[1] = v3;
  MEMORY[0x270FA5388](v4);
  sub_2534966B0();
  v14[5] = sub_253462A5C(&qword_269CE6B98);
  sub_253465998();
  v14[3] = v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534D9B74();
  type metadata accessor for SpeechRequestCandidate(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_253A3B978(v0);
  sub_2539EFC04();
  sub_253A3CAE4();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    *uint64_t v10 = sub_253A3D1A4();
    v10[1] = v11;
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_2534F8908();
    sub_2534D91A0();
    v12();
    sub_253A3CDA8();
    v13();
    sub_2539DF660((uint64_t)v10, v14[2]);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539CD618()
{
}

void sub_2539CD630()
{
}

uint64_t ClientEffectInvocation.stepId.getter()
{
  return sub_2539DE358();
}

uint64_t ClientEffectInvocation.sessionId.getter()
{
  return sub_2539A3E30();
}

uint64_t ClientEffectInvocation.clientRequestId.getter()
{
  return sub_2539856E0();
}

uint64_t ClientEffectInvocation.clientSessionId.getter()
{
  return sub_2539CD6C0();
}

uint64_t sub_2539CD6C0()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  sub_2535E2488();
  return sub_2534ACF74();
}

uint64_t ClientEffectInvocation.toolName.getter()
{
  return sub_2539CD70C();
}

uint64_t sub_2539CD70C()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  sub_2535E2488();
  return sub_2534ACF74();
}

uint64_t ClientEffectInvocation.parameters.getter()
{
  return sub_2539CD758();
}

uint64_t sub_2539CD758()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  return swift_bridgeObjectRetain();
}

void ClientEffectInvocation.init(stepId:sessionId:clientRequestId:clientSessionId:toolName:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_25394599C();
  uint64_t v39 = v27;
  uint64_t v40 = v28;
  uint64_t v38 = v29;
  uint64_t v31 = v30;
  sub_253A3B8FC();
  uint64_t v32 = sub_253B055C0();
  sub_25346CAF4();
  uint64_t v34 = *(void (**)(void))(v33 + 32);
  sub_253A3E6B0();
  v34();
  uint64_t v35 = (int *)type metadata accessor for ClientEffectInvocation(0);
  ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v26 + v35[5], v25, v32);
  sub_253A3EF78(v35[6]);
  uint64_t v36 = (void *)(v26 + v35[7]);
  *uint64_t v36 = v31;
  v36[1] = v38;
  uint64_t v37 = (void *)(v26 + v35[8]);
  *uint64_t v37 = v39;
  v37[1] = v40;
  *(void *)(v26 + v35[9]) = a25;
  sub_2535268E0();
}

void static ClientEffectInvocation.== infix(_:_:)()
{
  sub_2534DA0C4();
  if (sub_253B055A0())
  {
    uint64_t v0 = type metadata accessor for ClientEffectInvocation(0);
    sub_253A3BFB0(v0);
    if (sub_253B055A0())
    {
      sub_25397F578();
      BOOL v3 = v3 && v1 == v2;
      if (v3 || (sub_253B0A4C0() & 1) != 0)
      {
        sub_25397F578();
        BOOL v6 = v3 && v4 == v5;
        if (v6 || (sub_253B0A4C0() & 1) != 0)
        {
          sub_25397F578();
          BOOL v9 = v3 && v7 == v8;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            sub_253A3C3B8(*(int *)(v0 + 36));
            sub_2534BF50C();
          }
        }
      }
    }
  }
}

uint64_t sub_2539CD934(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644970657473 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6552746E65696C63 && a2 == 0xEF64497473657571;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6553746E65696C63 && a2 == 0xEF64496E6F697373;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x656D614E6C6F6F74 && a2 == 0xE800000000000000;
          if (v9 || (sub_253B0A4C0() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            char v11 = sub_253B0A4C0();
            swift_bridgeObjectRelease();
            if (v11) {
              return 5;
            }
            else {
              return 6;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2539CDBFC(char a1)
{
  uint64_t result = 0x644970657473;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x496E6F6973736573;
      break;
    case 2:
      uint64_t result = 0x6552746E65696C63;
      break;
    case 3:
      uint64_t result = 0x6553746E65696C63;
      break;
    case 4:
      uint64_t result = 0x656D614E6C6F6F74;
      break;
    case 5:
      uint64_t result = 0x6574656D61726170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539CDCE4()
{
  return sub_2539CDBFC(*v0);
}

uint64_t sub_2539CDCEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539CD934(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539CDD14(uint64_t a1)
{
  unint64_t v2 = sub_2539EFC70();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CDD50(uint64_t a1)
{
  unint64_t v2 = sub_2539EFC70();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientEffectInvocation.encode(to:)()
{
  sub_2534847F8();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE6BA0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EFC70();
  sub_2534DA3BC();
  sub_253A3DA50();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_25397F654();
  if (!v0)
  {
    uint64_t v2 = type metadata accessor for ClientEffectInvocation(0);
    sub_25397F654();
    sub_25397F7C0(*(int *)(v2 + 24));
    sub_25397F5D0();
    sub_253A3ED9C();
    sub_25397F5D0();
    sub_253A3C68C();
    sub_25397F5D0();
    sub_253462A5C(&qword_269CDBAA8);
    sub_253486B10();
    sub_25397F654();
  }
  sub_2534D9A08();
  v3();
  sub_253578DEC();
  sub_2534847C8();
}

void ClientEffectInvocation.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v24 = v3;
  sub_253B055C0();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v5);
  sub_2534D90F4();
  sub_253462A5C(&qword_269CE6BB0);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25348360C();
  uint64_t v25 = (int *)type metadata accessor for ClientEffectInvocation(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_25346CB04();
  uint64_t v10 = v9;
  sub_253A3BCFC(v2);
  sub_2539EFC70();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3F044();
    sub_2535791D8();
    uint64_t v12 = v11;
    sub_253A3E6A4();
    v13();
    sub_253A3E1AC();
    sub_253A3F044();
    sub_253A3E6A4();
    v12();
    sub_253A3D2C4();
    uint64_t v14 = sub_253B0A320();
    uint64_t v15 = (uint64_t *)(v10 + v25[6]);
    *uint64_t v15 = v14;
    v15[1] = v16;
    sub_253A3C954();
    uint64_t v17 = sub_253B0A320();
    uint64_t v18 = (uint64_t *)(v10 + v25[7]);
    *uint64_t v18 = v17;
    v18[1] = v19;
    sub_253A3E054();
    uint64_t v20 = sub_253B0A320();
    uint64_t v21 = (uint64_t *)(v10 + v25[8]);
    *uint64_t v21 = v20;
    v21[1] = v22;
    sub_253462A5C(&qword_269CDBAA8);
    sub_253486CE4();
    sub_253B0A370();
    sub_2534659CC();
    v23();
    *(void *)(v10 + v25[9]) = v26;
    sub_2539DF660(v10, v24);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539CE420()
{
}

void sub_2539CE438()
{
}

uint64_t sub_2539CE450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574656C706D6F63 && a2 == 0xE800000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539CE538(char a1)
{
  if (a1) {
    return 0x726F727265;
  }
  else {
    return 0x6574656C706D6F63;
  }
}

uint64_t sub_2539CE56C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539CE5EC()
{
  return 0x74757074756FLL;
}

uint64_t sub_2539CE600()
{
  return sub_2539CE538(*v0);
}

uint64_t sub_2539CE608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539CE450(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539CE630(uint64_t a1)
{
  unint64_t v2 = sub_2539EFCDC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CE66C(uint64_t a1)
{
  unint64_t v2 = sub_2539EFCDC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539CE6AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539CE56C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539CE6D8(uint64_t a1)
{
  unint64_t v2 = sub_2539EFD74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CE714(uint64_t a1)
{
  unint64_t v2 = sub_2539EFD74();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539CE750(uint64_t a1)
{
  unint64_t v2 = sub_2539EFD28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CE78C(uint64_t a1)
{
  unint64_t v2 = sub_2539EFD28();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientEffectResult.encode(to:)()
{
  sub_2534847F8();
  uint64_t v26 = v0;
  char v3 = v2;
  sub_253462A5C(&qword_269CE6BB8);
  sub_253465998();
  v25[9] = v5;
  v25[10] = v4;
  MEMORY[0x270FA5388](v4);
  v25[6] = (uint64_t)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253483660();
  sub_253B05940();
  sub_253465998();
  v25[7] = v8;
  v25[8] = v7;
  MEMORY[0x270FA5388](v7);
  sub_253483644(v9, v25[0]);
  sub_253462A5C(&qword_269CE6BC0);
  sub_253465998();
  v25[3] = v11;
  v25[4] = v10;
  MEMORY[0x270FA5388](v10);
  sub_253A3DC9C();
  sub_253465998();
  v25[1] = v13;
  v25[2] = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = sub_2534D9B74();
  type metadata accessor for ClientEffectResult(v14);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6BC8);
  sub_253465998();
  v25[11] = v16;
  MEMORY[0x270FA5388](v17);
  sub_253465A3C();
  sub_253472068(v3, v3[3]);
  sub_2539EFCDC();
  sub_253A3D7E4();
  sub_2539DF660(v26, v1);
  sub_2536D3880();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_253A3F110();
    sub_253A3D524();
    sub_25347FA84();
    v18();
    sub_2539EFD28();
    sub_2534D9208();
    sub_2539E6F90((uint64_t)&qword_269CDB668);
    sub_253A3E0D8();
    sub_253B0A440();
    sub_2534659CC();
    v19();
    uint64_t v20 = sub_253A3D518();
  }
  else
  {
    sub_253A3F110();
    sub_253A3D03C();
    sub_25347FA84();
    v22();
    sub_2539EFD74();
    sub_2534D9208();
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    sub_253B0A440();
    sub_2534659CC();
    v23();
    uint64_t v20 = sub_253A3D03C();
  }
  v21(v20);
  sub_2534659CC();
  v24();
  sub_2534F8A10();
  sub_2534847C8();
}

void ClientEffectResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v38 = v0;
  unint64_t v2 = v1;
  v37[4] = v3;
  sub_253462A5C(&qword_269CE6BE8);
  sub_253465998();
  uint64_t v37[7] = v4;
  v37[8] = v5;
  MEMORY[0x270FA5388](v4);
  sub_2534AF2A0(v6, v37[0]);
  sub_253462A5C(&qword_269CE6BF0);
  sub_253465998();
  v37[5] = v8;
  v37[6] = v7;
  MEMORY[0x270FA5388](v7);
  sub_2534D8F84(v9, v37[0]);
  sub_253462A5C(&qword_269CE6BF8);
  sub_253465998();
  v37[11] = v11;
  v37[12] = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = sub_2534D9C00();
  type metadata accessor for ClientEffectResult(v12);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  sub_2534B340C();
  MEMORY[0x270FA5388](v14);
  sub_253A3B8EC();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v37 - v16;
  unint64_t v18 = v2[4];
  sub_253472068(v2, v2[3]);
  sub_2539EFCDC();
  uint64_t v19 = v38;
  sub_253A3BAF0();
  if (v19) {
    goto LABEL_8;
  }
  sub_253A3D4A8();
  sub_253A3EB04();
  if (!v20
    || (char v21 = v17[32], v22 = sub_253A3CD80(), sub_25347B78C(v22, v23, v24, v25, v26, v27), sub_253A3E190(), v18 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    sub_253462A5C(&qword_269CDB688);
    sub_253A3C930();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v29();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v30();
    unint64_t v2 = v38;
LABEL_8:
    uint64_t v31 = (uint64_t)v2;
    goto LABEL_9;
  }
  if (v21)
  {
    sub_2539EFD28();
    sub_253A3C72C();
    sub_253B05940();
    sub_2539E6F90((uint64_t)&qword_269CDB690);
    uint64_t v28 = v37[1];
    sub_253A3C5A8();
    sub_253A3ED64();
    sub_2534659CC();
    v32();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v33();
    swift_storeEnumTagMultiPayload();
    uint64_t v34 = v28;
  }
  else
  {
    sub_2539EFD74();
    sub_253A3C72C();
    sub_253B09120();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    uint64_t v34 = v37[2];
    sub_253A3B884();
    sub_253A3ED64();
    sub_2534659CC();
    v35();
    swift_unknownObjectRelease();
    sub_2534B3470();
    v36();
    swift_storeEnumTagMultiPayload();
  }
  sub_2539DF5B8(v34, v37[0]);
  sub_253A3EB5C();
  uint64_t v31 = (uint64_t)v38;
LABEL_9:
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v31);
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539CF038()
{
}

void sub_2539CF050()
{
}

uint64_t ClientEffectResult.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_253A3C038();
  uint64_t v11 = v10;
  sub_2534F8A1C();
  uint64_t v12 = sub_253B05EF0();
  sub_253465998();
  uint64_t v35 = v13;
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v11, v12);
  if (v15 == *MEMORY[0x263F4C3A8])
  {
    uint64_t v16 = sub_253A3DBB8();
    v17(v16);
    sub_253B09120();
    sub_25346CAF4();
    sub_2534D8E14();
    v18();
    type metadata accessor for ClientEffectResult(0);
LABEL_5:
    sub_253A3BEC0();
    return swift_storeEnumTagMultiPayload();
  }
  if (v15 == *MEMORY[0x263F4C3A0])
  {
    uint64_t v19 = sub_253A3DBB8();
    v20(v19);
    sub_253B05940();
    sub_25346CAF4();
    sub_2534D8E14();
    v21();
    type metadata accessor for ClientEffectResult(0);
    sub_2539446BC();
    goto LABEL_5;
  }
  sub_253B090B0();
  uint64_t v24 = swift_allocBox();
  sub_25347B88C();
  sub_25346CCF8();
  v25();
  *uint64_t v9 = v24;
  sub_253B09120();
  sub_25346CAF4();
  sub_25346CCF8();
  v26();
  type metadata accessor for ClientEffectResult(0);
  swift_storeEnumTagMultiPayload();
  sub_2534DA2E4();
  sub_253A3BEC0();
  return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, v35);
}

void MessagePayload.ClientEffectInvocation.init(_:)()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  uint64_t v3 = sub_253B055C0();
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_253A3D64C();
  MEMORY[0x270FA5388](v7);
  sub_2534D90F4();
  uint64_t v8 = *(void (**)(uint64_t))(v5 + 16);
  uint64_t v9 = sub_2535787F4();
  v8(v9);
  uint64_t v10 = type metadata accessor for ClientEffectInvocation(0);
  ((void (*)(uint64_t, uint64_t, uint64_t))v8)(v0, v2 + *(int *)(v10 + 20), v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2534DA178();
  sub_253B06140();
  sub_2539DF610();
  sub_253465A14();
}

uint64_t ActionResult.outcome.getter()
{
  return sub_2539DE358();
}

uint64_t ActionResult.outcome.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ActionResult.outcome.modify())()
{
  return nullsub_1;
}

uint64_t ActionResult.response.getter()
{
  return sub_2539A9600();
}

uint64_t ActionResult.response.setter()
{
  return sub_2539A9658();
}

uint64_t (*ActionResult.response.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for ActionResult(v0);
  sub_2534F87A4();
  return nullsub_1;
}

void ActionResult.init(outcome:response:)()
{
}

void ActionResult.init(returnValue:appLaunched:response:)()
{
  sub_2534B3258();
  uint64_t v3 = v2;
  uint64_t v23 = v4;
  uint64_t v5 = v4;
  uint64_t v6 = sub_253462A5C(&qword_269CE50C0);
  uint64_t v7 = sub_25346CB4C(v6);
  MEMORY[0x270FA5388](v7);
  sub_2534D8CAC();
  sub_253B09120();
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_25349888C();
  uint64_t v9 = sub_253B05AB0();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534B33AC();
  uint64_t v14 = v5 + *(int *)(type metadata accessor for ActionResult(v13) + 20);
  uint64_t v15 = sub_253B06820();
  sub_25346CC08(v14, v16, v17, v15);
  sub_2539EFDC0(v3, v14, &qword_269CDBB28);
  sub_253A3F588();
  sub_2534AF234();
  v18();
  uint64_t v19 = sub_253B05BB0();
  sub_25346CC08(v0, v20, v21, v19);
  sub_253B05BD0();
  sub_253472458(v3, &qword_269CDBB28);
  sub_2534B3470();
  v22();
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v1, *MEMORY[0x263F4C100], v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v23, v1, v9);
  sub_253465A14();
}

uint64_t sub_2539CF6D0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 0x656D6F6374756FLL && a2 == 0xE700000000000000;
  if (v4 || (sub_2534DA0C4(), (sub_25351C8D0() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 0x65736E6F70736572 && v2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    sub_25351C8D0();
    sub_2534F8940();
    if (v3) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539CF7A4(char a1)
{
  if (a1) {
    return 0x65736E6F70736572;
  }
  else {
    return 0x656D6F6374756FLL;
  }
}

uint64_t sub_2539CF7DC()
{
  return sub_2539CF7A4(*v0);
}

uint64_t sub_2539CF7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539CF6D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539CF80C(uint64_t a1)
{
  unint64_t v2 = sub_2539EFE0C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539CF848(uint64_t a1)
{
  unint64_t v2 = sub_2539EFE0C();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ActionResult.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6C00);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539EFE0C();
  sub_2534DA3BC();
  sub_253A3DA44();
  sub_253B05AB0();
  sub_2539E6F90((uint64_t)&unk_269CE6C10);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ActionResult(0);
    sub_253A3E314();
    sub_2539E6F90((uint64_t)&unk_269CE6A10);
    sub_253A3BBB0();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ActionResult.init(from:)()
{
  sub_2534847F8();
  sub_253A3E1D4(v4);
  uint64_t v5 = sub_253462A5C(&qword_269CDBB28);
  uint64_t v6 = sub_25346CB4C(v5);
  MEMORY[0x270FA5388](v6);
  sub_2534D8CAC();
  sub_253B05AB0();
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_253465A3C();
  sub_253462A5C(&qword_269CE6C18);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534AF2D8();
  uint64_t v10 = type metadata accessor for ActionResult(v9);
  uint64_t v11 = sub_25346CB4C(v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = sub_253A3D090();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, 1, 1, v12);
  sub_2534F8630(v0);
  sub_2539EFE0C();
  sub_253A3CC00();
  if (v2)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_253472458(v1, &qword_269CDBB28);
  }
  else
  {
    sub_2539E6F90((uint64_t)&unk_269CE6C20);
    sub_253A3C0E4();
    sub_25347FA84();
    v13();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE6A28);
    sub_253A3BF24();
    sub_2534659CC();
    v14();
    sub_2539F0BE0(v3, v1, &qword_269CDBB28);
    sub_253A3F11C();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539CFC94()
{
}

void sub_2539CFCAC()
{
}

uint64_t ActionResolverRequest.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t ActionResolverRequest.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ActionResolverRequest.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.toolId.getter()
{
  return sub_2534ACF74();
}

uint64_t sub_2539CFD48(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ActionResolverRequest.toolId.setter(v1, v2);
}

uint64_t ActionResolverRequest.toolId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_2534D976C();
  type metadata accessor for ActionResolverRequest(v5);
  uint64_t result = sub_2535E2648();
  *uint64_t v2 = v3;
  v2[1] = a2;
  return result;
}

uint64_t ActionResolverRequest.toolId.modify(uint64_t a1)
{
  uint64_t v1 = sub_253A3EB10(a1);
  uint64_t v2 = type metadata accessor for ActionResolverRequest(v1);
  sub_253A3D594(*(int *)(v2 + 44));
  swift_bridgeObjectRetain();
  return sub_2534D9778();
}

uint64_t sub_2539CFE10()
{
  sub_253A3F004();
  if (v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void *v1 = v2;
    v1[1] = v0;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    void *v1 = v2;
    v1[1] = v0;
  }
  return result;
}

uint64_t ActionResolverRequest.resolvedParameters.getter()
{
  return sub_2539BD0A8();
}

uint64_t ActionResolverRequest.resolvedParameters.setter()
{
  return sub_2539BD0F8();
}

uint64_t (*ActionResolverRequest.resolvedParameters.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.unresolvedParameterSets.getter()
{
  return sub_2539BD8E4();
}

uint64_t ActionResolverRequest.unresolvedParameterSets.setter()
{
  return sub_2539BD934();
}

uint64_t (*ActionResolverRequest.unresolvedParameterSets.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.userSpecifiedParameters.getter()
{
  return sub_2539CFF74();
}

uint64_t sub_2539CFF74()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t ActionResolverRequest.userSpecifiedParameters.setter()
{
  return sub_2539CFFC4();
}

uint64_t sub_2539CFFC4()
{
  uint64_t v2 = sub_2534D9690();
  uint64_t v4 = *(int *)(v3(v2) + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v4) = v0;
  return result;
}

uint64_t (*ActionResolverRequest.userSpecifiedParameters.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.isClientAction.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ActionResolverRequest(0) + 32));
}

uint64_t ActionResolverRequest.isClientAction.setter(char a1)
{
  uint64_t result = type metadata accessor for ActionResolverRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*ActionResolverRequest.isClientAction.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.isConfirmed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ActionResolverRequest(0) + 36));
}

uint64_t ActionResolverRequest.isConfirmed.setter(char a1)
{
  uint64_t result = type metadata accessor for ActionResolverRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*ActionResolverRequest.isConfirmed.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.isAuthenticated.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ActionResolverRequest(0) + 40));
}

uint64_t ActionResolverRequest.isAuthenticated.setter(char a1)
{
  uint64_t result = type metadata accessor for ActionResolverRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*ActionResolverRequest.isAuthenticated.modify())()
{
  return nullsub_1;
}

uint64_t ActionResolverRequest.tool.getter()
{
  uint64_t v0 = sub_2534F8A1C();
  uint64_t v1 = type metadata accessor for ActionResolverRequest(v0);
  sub_253A3CD18(*(int *)(v1 + 44));
  return swift_bridgeObjectRetain();
}

double ActionResolverRequest.tool.setter()
{
  uint64_t v0 = sub_253A3D8C8();
  type metadata accessor for ActionResolverRequest(v0);
  sub_253A3E2A4();
  uint64_t v1 = swift_bridgeObjectRelease();
  *(void *)&double result = sub_253A3E354(v1, v2, v3, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t (*ActionResolverRequest.tool.modify())()
{
  return nullsub_1;
}

__n128 ActionResolverRequest.init(statementId:tool:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:isAuthenticated:)@<Q0>(__n128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, char a6@<W6>, char a7@<W7>, uint64_t a8@<X8>)
{
  __n128 v22 = *a1;
  uint64_t v9 = sub_253A3ECF8();
  uint64_t v10 = (int *)type metadata accessor for ActionResolverRequest(v9);
  uint64_t v19 = v10[5];
  type metadata accessor for Candidate(0);
  sub_253462C88();
  sub_253B095A0();
  uint64_t v11 = v10[6];
  uint64_t v12 = v10[7];
  type metadata accessor for AST.FlatValue(0);
  sub_253B095A0();
  uint64_t v13 = v10[8];
  uint64_t v14 = v10[9];
  uint64_t v15 = v10[10];
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v16();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = (__n128 *)(a8 + v10[11]);
  __n128 result = v22;
  *uint64_t v17 = v22;
  v17[1].n128_u64[0] = v21;
  v17[1].n128_u64[1] = v20;
  *(void *)(a8 + v19) = a2;
  *(void *)(a8 + v11) = a3;
  *(void *)(a8 + v12) = a4;
  *(unsigned char *)(a8 + v13) = a5;
  *(unsigned char *)(a8 + v14) = a6;
  *(unsigned char *)(a8 + v15) = a7;
  return result;
}

uint64_t ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:isAuthenticated:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, char a7@<W7>, uint64_t a8@<X8>, char a9)
{
  uint64_t v10 = (int *)type metadata accessor for ActionResolverRequest(0);
  uint64_t v19 = v10[5];
  type metadata accessor for Candidate(0);
  sub_253462C88();
  sub_253B095A0();
  uint64_t v11 = v10[6];
  uint64_t v12 = v10[7];
  type metadata accessor for AST.FlatValue(0);
  sub_253B095A0();
  uint64_t v13 = v10[8];
  uint64_t v14 = v10[9];
  uint64_t v15 = v10[10];
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v16();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v18 = (void *)(a8 + v10[11]);
  *unint64_t v18 = a1;
  v18[1] = a2;
  v18[2] = 0;
  v18[3] = 0;
  *(void *)(a8 + v19) = a3;
  *(void *)(a8 + v11) = a4;
  *(void *)(a8 + v12) = a5;
  *(unsigned char *)(a8 + v13) = a6;
  *(unsigned char *)(a8 + v14) = a7;
  *(unsigned char *)(a8 + v15) = a9;
  return result;
}

void ActionResolverRequest.init(statementId:toolId:resolvedParameters:unresolvedParameterSets:userSpecifiedParameters:isClientAction:isConfirmed:clientQueryId:isAuthenticated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23)
{
  sub_2534B3258();
  a19 = v23;
  a20 = v24;
  int v190 = v25;
  int v189 = v26;
  uint64_t v188 = v27;
  uint64_t v194 = v28;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  int v187 = a23;
  type metadata accessor for Candidate(0);
  sub_253465998();
  uint64_t v207 = v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v211 = (uint64_t)v180 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v42);
  sub_2534B35DC();
  sub_2534D8F5C(v43);
  uint64_t v206 = sub_253462A5C(&qword_269CE6C28);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v44);
  sub_2534659D8();
  v203 = v45;
  sub_2534B324C();
  MEMORY[0x270FA5388](v46);
  sub_2534B3318();
  uint64_t v210 = (uint64_t *)v47;
  sub_2534B324C();
  MEMORY[0x270FA5388](v48);
  sub_2534F823C();
  MEMORY[0x270FA5388](v49);
  sub_2534F823C();
  MEMORY[0x270FA5388](v50);
  sub_2534B3318();
  uint64_t v205 = v51;
  sub_2534B324C();
  MEMORY[0x270FA5388](v52);
  uint64_t v209 = (void *)((char *)v180 - v53);
  sub_2534B324C();
  MEMORY[0x270FA5388](v54);
  sub_2534B35DC();
  sub_2534D8F5C(v55);
  swift_bridgeObjectRelease();
  uint64_t v56 = (int *)type metadata accessor for ActionResolverRequest(0);
  uint64_t v57 = v56[5];
  sub_253462C88();
  uint64_t v58 = sub_253B095A0();
  uint64_t v191 = v57;
  *(void *)(v38 + v57) = v58;
  uint64_t v184 = v56[6];
  *(void *)(v38 + v184) = MEMORY[0x263F8EE88];
  uint64_t v59 = v56[7];
  type metadata accessor for AST.FlatValue(0);
  uint64_t v60 = sub_253B095A0();
  uint64_t v185 = v59;
  *(void *)(v38 + v59) = v60;
  uint64_t v183 = v56[8];
  *(unsigned char *)(v38 + v183) = 0;
  uint64_t v182 = v56[9];
  *(unsigned char *)(v38 + v182) = 0;
  uint64_t v181 = v56[10];
  *(unsigned char *)(v38 + v181) = 0;
  sub_253B059D0();
  sub_253486600();
  v180[1] = v61;
  uint64_t v186 = v36;
  v180[2] = v62;
  sub_2534AF234();
  v63();
  uint64_t v64 = v56[11];
  uint64_t v193 = v38;
  uint64_t v65 = (void *)(v38 + v64);
  *uint64_t v65 = v34;
  v65[1] = v32;
  v65[2] = 0;
  v65[3] = 0;
  sub_25397174C(v30, v214);
  uint64_t v200 = v214[0];
  uint64_t v195 = v214[1];
  int64_t v201 = v214[3];
  uint64_t v66 = v214[4];
  int64_t v196 = (unint64_t)(v214[2] + 64) >> 6;
  uint64_t v192 = v30;
  swift_bridgeObjectRetain();
  uint64_t v67 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    uint64_t v208 = v67;
    if (v66)
    {
      sub_253A3F574();
      uint64_t v204 = v66;
      int64_t v69 = v68 | (v201 << 6);
      goto LABEL_27;
    }
    sub_253A3F0E0();
    int64_t v71 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      goto LABEL_103;
    }
    if (v71 >= v196) {
      goto LABEL_36;
    }
    if (!*(void *)(v195 + 8 * v71))
    {
      sub_253A3D198();
      if (v72 == v73) {
        goto LABEL_36;
      }
      sub_253A3D18C();
      if (!v74)
      {
        sub_253A3D198();
        if (v72 == v73) {
          goto LABEL_36;
        }
        sub_253A3D18C();
        if (!v75)
        {
          sub_253A3D198();
          if (v72 == v73) {
            goto LABEL_36;
          }
          sub_253A3D18C();
          if (!v76)
          {
            sub_253A3D198();
            if (v72 == v73) {
              goto LABEL_36;
            }
            sub_253A3D18C();
            if (!v77)
            {
              sub_253A3D65C();
              if (v72 == v73) {
                goto LABEL_36;
              }
              if (!*(void *)(v195 + 8 * v78)) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_26:
    sub_253A3F534();
    uint64_t v204 = v80;
    int64_t v69 = v82 + (v81 << 6);
    int64_t v201 = v81;
LABEL_27:
    uint64_t v83 = (uint64_t *)(*(void *)(v200 + 48) + 16 * v69);
    uint64_t v84 = *v83;
    uint64_t v85 = v83[1];
    uint64_t v86 = v206;
    uint64_t v87 = *(void *)(v207 + 72);
    uint64_t v88 = v197;
    sub_2539DF660(*(void *)(v200 + 56) + v87 * v69, (uint64_t)v197 + *(int *)(v206 + 48));
    *uint64_t v88 = v84;
    v88[1] = v85;
    uint64_t v89 = v209;
    sub_253961F14((uint64_t)v88, (uint64_t)v209, &qword_269CE6C28);
    uint64_t v90 = v205;
    uint64_t v92 = *v89;
    uint64_t v91 = v89[1];
    *uint64_t v205 = *v89;
    v90[1] = v91;
    uint64_t v93 = sub_2534D96CC();
    sub_2539DF660(v93, v94);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_2539DF610();
    uint64_t v95 = v198;
    uint64_t v96 = (uint64_t)v198 + *(int *)(v86 + 48);
    uint64_t v97 = v89[1];
    *uint64_t v198 = *v89;
    v95[1] = v97;
    uint64_t v98 = sub_253971C3C();
    sub_2539DF660(v98, v99);
    sub_253A3BE74(v96, (uint64_t)&a15);
    uint64_t v100 = v208;
    swift_isUniquelyReferenced_nonNull_native();
    v215[0] = v100;
    unint64_t v101 = sub_253A3E8B0(v92);
    if (__OFADD__(v100[2], (v102 & 1) == 0)) {
      goto LABEL_101;
    }
    unint64_t v103 = v101;
    char v104 = v102;
    sub_253462A5C(&qword_269CE6C30);
    if (sub_253B0A190())
    {
      unint64_t v105 = sub_253A3E8B0(v92);
      if ((v104 & 1) != (v106 & 1)) {
        goto LABEL_106;
      }
      unint64_t v103 = v105;
    }
    uint64_t v67 = (void *)v215[0];
    if (v104)
    {
      sub_2539E7074(v86, *(void *)(v215[0] + 56) + v103 * v87);
    }
    else
    {
      *(void *)(v215[0] + 8 * (v103 >> 6) + 64) |= 1 << v103;
      uint64_t v107 = v67[6] + 32 * v103;
      *(void *)uint64_t v107 = v92;
      *(void *)(v107 + 8) = v91;
      *(void *)(v107 + 16) = 0;
      *(unsigned char *)(v107 + 24) = 1;
      sub_2539DF5B8(v86, v67[7] + v103 * v87);
      uint64_t v108 = v67[2];
      BOOL v73 = __OFADD__(v108, 1);
      uint64_t v109 = v108 + 1;
      if (v73) {
        goto LABEL_102;
      }
      v67[2] = v109;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_253472458((uint64_t)v209, &qword_269CE6C28);
    uint64_t v66 = v204;
  }
  sub_253A3F0E0();
  while (1)
  {
    sub_253A3D65C();
    if (v72 == v73) {
      break;
    }
    if (*(void *)(v195 + 8 * v79)) {
      goto LABEL_26;
    }
  }
LABEL_36:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v110 = v193;
  uint64_t v111 = v191;
  swift_bridgeObjectRelease();
  *(void *)(v110 + v111) = v67;
  uint64_t v213 = MEMORY[0x263F8EE88];
  uint64_t v112 = v194;
  uint64_t v195 = v194 + 56;
  sub_2534D8E34();
  uint64_t v115 = (uint64_t *)(v114 & v113);
  int64_t v196 = (unint64_t)(v116 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v117 = 0;
  if (!v115) {
    goto LABEL_38;
  }
LABEL_37:
  sub_253A3F574();
  uint64_t v198 = v115;
  uint64_t v199 = v118;
  uint64_t v120 = v119 | (v118 << 6);
  while (2)
  {
    uint64_t v132 = *(void *)(*(void *)(v112 + 48) + 8 * v120);
    sub_25397174C(v132, v215);
    uint64_t v204 = v215[0];
    uint64_t v200 = v215[1];
    uint64_t v208 = (void *)v215[3];
    unint64_t v133 = v215[4];
    int64_t v201 = (unint64_t)(v215[2] + 64) >> 6;
    uint64_t v197 = (void *)v132;
    swift_bridgeObjectRetain_n();
    v134 = (void *)MEMORY[0x263F8EE80];
    if (v133)
    {
LABEL_63:
      uint64_t v209 = (uint64_t *)((v133 - 1) & v133);
      unint64_t v135 = __clz(__rbit64(v133)) | ((void)v208 << 6);
      goto LABEL_85;
    }
LABEL_64:
    if (__OFADD__(v208, 1)) {
      goto LABEL_100;
    }
    sub_253A3F0E0();
    if (v136 >= v137) {
      goto LABEL_95;
    }
    if (!*(void *)(v200 + 8 * v136))
    {
      sub_253A3D198();
      if (v72 == v73) {
        goto LABEL_95;
      }
      sub_253A3D18C();
      if (!v138)
      {
        sub_253A3D198();
        if (v72 == v73) {
          goto LABEL_95;
        }
        sub_253A3D18C();
        if (!v139)
        {
          sub_253A3D198();
          if (v72 == v73) {
            goto LABEL_95;
          }
          sub_253A3D18C();
          if (!v140)
          {
            sub_253A3D198();
            if (v72 == v73) {
              goto LABEL_95;
            }
            sub_253A3D18C();
            if (!v142)
            {
              if (v141 + 5 >= v201) {
                goto LABEL_95;
              }
              if (!*(void *)(v200 + 8 * (v141 + 5)))
              {
                int64_t v143 = (int64_t)v208 + 7;
                while (v143 < v201)
                {
                  if (*(void *)(v200 + 8 * v143++)) {
                    goto LABEL_84;
                  }
                }
LABEL_95:
                swift_release();
                sub_2539E14A0(&v212, (uint64_t)v134);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v112 = v194;
                uint64_t v117 = v199;
                uint64_t v115 = v198;
                if (!v198)
                {
LABEL_38:
                  if (__OFADD__(v117, 1)) {
                    goto LABEL_104;
                  }
                  sub_253A3D65C();
                  if (v72 == v73) {
                    goto LABEL_98;
                  }
                  if (!*(void *)(v195 + 8 * v121))
                  {
                    sub_253A3CCC4();
                    if (v72 == v73)
                    {
LABEL_98:
                      swift_release();
                      uint64_t v175 = v213;
                      sub_2534659CC();
                      v176();
                      swift_bridgeObjectRelease();
                      uint64_t v177 = v193;
                      uint64_t v178 = v184;
                      swift_bridgeObjectRelease();
                      *(void *)(v177 + v178) = v175;
                      uint64_t v179 = v185;
                      swift_bridgeObjectRelease();
                      *(void *)(v177 + v179) = v188;
                      *(unsigned char *)(v177 + v183) = v189 & 1;
                      *(unsigned char *)(v177 + v182) = v190 & 1;
                      *(unsigned char *)(v177 + v181) = v187 & 1;
                      sub_253465A14();
                      return;
                    }
                    sub_253A3CCD4();
                    if (!v122)
                    {
                      sub_253A3CCC4();
                      if (v72 == v73) {
                        goto LABEL_98;
                      }
                      sub_253A3CCD4();
                      if (!v123)
                      {
                        sub_253A3CCC4();
                        if (v72 == v73) {
                          goto LABEL_98;
                        }
                        sub_253A3CCD4();
                        if (!v124)
                        {
                          sub_253A3CCC4();
                          if (v72 == v73) {
                            goto LABEL_98;
                          }
                          sub_253A3CCD4();
                          if (!v125)
                          {
                            sub_253A3D65C();
                            if (v72 == v73) {
                              goto LABEL_98;
                            }
                            if (!*(void *)(v195 + 8 * v126))
                            {
                              while (!__OFADD__(v126, 1))
                              {
                                sub_253A3CCC4();
                                if (v72 == v73) {
                                  goto LABEL_98;
                                }
                                sub_253A3CCD4();
                                uint64_t v126 = v127 + 1;
                                if (v128) {
                                  goto LABEL_61;
                                }
                              }
                              goto LABEL_105;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_61:
                  sub_253A3F48C();
                  uint64_t v198 = v129;
                  uint64_t v199 = v130;
                  uint64_t v120 = v131 + (v130 << 6);
                  continue;
                }
                goto LABEL_37;
              }
            }
          }
        }
      }
    }
    break;
  }
LABEL_84:
  sub_253A3F534();
  uint64_t v208 = v145;
  uint64_t v209 = (uint64_t *)v146;
  unint64_t v135 = v147 + ((void)v145 << 6);
LABEL_85:
  uint64_t v148 = (uint64_t *)(*(void *)(v204 + 48) + 16 * v135);
  uint64_t v150 = *v148;
  uint64_t v149 = v148[1];
  uint64_t v151 = v206;
  uint64_t v152 = *(void *)(v207 + 72);
  unint64_t v153 = v202;
  sub_2539DF660(*(void *)(v204 + 56) + v152 * v135, (uint64_t)v202 + *(int *)(v206 + 48));
  *unint64_t v153 = v150;
  v153[1] = v149;
  uint64_t v154 = (uint64_t)v153;
  uint64_t v155 = v210;
  sub_253961F14(v154, (uint64_t)v210, &qword_269CE6C28);
  unint64_t v156 = v205;
  uint64_t v158 = *v155;
  uint64_t v157 = v155[1];
  *uint64_t v205 = *v155;
  v156[1] = v157;
  uint64_t v159 = sub_2534D96CC();
  sub_2539DF660(v159, v160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2539DF610();
  uint64_t v161 = v203;
  uint64_t v162 = (uint64_t)v203 + *(int *)(v151 + 48);
  uint64_t v163 = v155[1];
  uint64_t *v203 = *v155;
  v161[1] = v163;
  uint64_t v164 = sub_253A3E5C8();
  sub_2539DF660(v164, v165);
  sub_2539DF5B8(v162, v211);
  swift_isUniquelyReferenced_nonNull_native();
  char v212 = v134;
  unint64_t v166 = sub_25396E204(v158, v157, 0, 1);
  if (__OFADD__(v134[2], (v167 & 1) == 0))
  {
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v168 = v166;
  char v169 = v167;
  sub_253462A5C(&qword_269CE6C30);
  if (sub_253B0A190())
  {
    unint64_t v170 = sub_253A3E8B0(v158);
    if ((v169 & 1) != (v171 & 1)) {
      goto LABEL_106;
    }
    unint64_t v168 = v170;
  }
  v134 = v212;
  if (v169)
  {
    sub_2539E7074(v211, v212[7] + v168 * v152);
    goto LABEL_93;
  }
  v212[(v168 >> 6) + 8] |= 1 << v168;
  uint64_t v172 = v134[6] + 32 * v168;
  *(void *)uint64_t v172 = v158;
  *(void *)(v172 + 8) = v157;
  *(void *)(v172 + 16) = 0;
  *(unsigned char *)(v172 + 24) = 1;
  sub_2539DF5B8(v211, v134[7] + v168 * v152);
  uint64_t v173 = v134[2];
  BOOL v73 = __OFADD__(v173, 1);
  uint64_t v174 = v173 + 1;
  if (!v73)
  {
    v134[2] = v174;
    swift_bridgeObjectRetain();
LABEL_93:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_253472458((uint64_t)v210, &qword_269CE6C28);
    unint64_t v133 = (unint64_t)v209;
    if (v209) {
      goto LABEL_63;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  sub_253B0A550();
  __break(1u);
}

IntelligenceFlowPlannerSupport::ParameterPath __swiftcall ParameterPath.init(key:arrayIndex:)(Swift::String key, Swift::Int_optional arrayIndex)
{
  *(Swift::String *)uint64_t v2 = key;
  *(void *)(v2 + 16) = arrayIndex.value;
  *(unsigned char *)(v2 + 24) = arrayIndex.is_nil;
  result.key = key;
  result.collectionIndex = arrayIndex;
  return result;
}

uint64_t sub_2539D12D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000253B11530 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000253B11550 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000253B13AE0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    BOOL v6 = a1 == 0x746E65696C437369 && a2 == 0xEE006E6F69746341;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      BOOL v7 = a1 == 0x7269666E6F437369 && a2 == 0xEB0000000064656DLL;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else
      {
        BOOL v8 = a1 == 0x6E65687475417369 && a2 == 0xEF64657461636974;
        if (v8 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else if (a1 == 1819242356 && a2 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
          return 7;
        }
        else
        {
          char v10 = sub_253B0A4C0();
          swift_bridgeObjectRelease();
          if (v10) {
            return 7;
          }
          else {
            return 8;
          }
        }
      }
    }
  }
}

unint64_t sub_2539D1658(char a1)
{
  unint64_t result = 0x6E656D6574617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x746E65696C437369;
      break;
    case 5:
      unint64_t result = 0x7269666E6F437369;
      break;
    case 6:
      unint64_t result = 0x6E65687475417369;
      break;
    case 7:
      unint64_t result = 1819242356;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539D177C()
{
  return sub_2539D1658(*v0);
}

uint64_t sub_2539D1784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D12D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D17AC(uint64_t a1)
{
  unint64_t v2 = sub_2539EFE58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D17E8(uint64_t a1)
{
  unint64_t v2 = sub_2539EFE58();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ActionResolverRequest.encode(to:)()
{
  sub_2535B45A0();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE6C38);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25397F66C();
  sub_2539EFE58();
  sub_2534DA3BC();
  sub_253B059D0();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_25397F654();
  if (!v0)
  {
    type metadata accessor for ActionResolverRequest(0);
    sub_253A3D3D4();
    sub_2534D9E60();
    sub_253462A5C(&qword_269CDE8F0);
    sub_2539EFEA4();
    sub_25397F654();
    sub_253A3E098();
    sub_253462A5C(&qword_269CE6C58);
    sub_2539F0094((uint64_t)&unk_269CE6C60);
    sub_25397F654();
    sub_253A3E080();
    sub_253462A5C(&qword_269CDDDB8);
    sub_25350C930();
    sub_25397F654();
    sub_253A3C0C0(4);
    sub_253A3C0C0(5);
    sub_253A3C0C0(6);
    sub_253A3E03C(*(int *)(v1 + 44));
    sub_2534D2524();
    sub_25397F654();
  }
  uint64_t v3 = sub_2534F82A4();
  v4(v3);
  sub_253A3EEB0();
  sub_2535B4660();
}

void ActionResolverRequest.init(from:)()
{
  sub_2534847F8();
  uint64_t v23 = v2;
  uint64_t v20 = v3;
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534D9BAC(v5, v19);
  sub_253462A5C(&qword_269CE6C68);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_25348360C();
  BOOL v8 = (int *)type metadata accessor for ActionResolverRequest(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v9);
  sub_25346CC6C();
  uint64_t v11 = *(int *)(v10 + 20);
  type metadata accessor for Candidate(0);
  sub_253462C88();
  uint64_t v21 = v11;
  *(void *)(v1 + v11) = sub_253B095A0();
  __n128 v22 = (void *)v8[6];
  *(void *)((char *)v22 + v1) = MEMORY[0x263F8EE88];
  uint64_t v12 = v8[7];
  type metadata accessor for AST.FlatValue(0);
  *(void *)(v1 + v12) = sub_253B095A0();
  uint64_t v13 = (unsigned char *)v8[8];
  v13[v1] = 0;
  uint64_t v14 = (unsigned char *)v8[9];
  v14[v1] = 0;
  uint64_t v15 = v8[10];
  *(unsigned char *)(v1 + v15) = 0;
  sub_253472068(v23, v23[3]);
  sub_2539EFE58();
  sub_253A3D530();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v24) = 0;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253B0A370();
    sub_253A3F354();
    sub_25347FA84();
    v16();
    sub_253462A5C(&qword_269CDE8F0);
    sub_2534D9E60();
    sub_2539EFF9C();
    sub_253A3CEF8();
    swift_bridgeObjectRelease();
    *(void *)(v1 + v21) = v24;
    sub_253462A5C(&qword_269CE6C58);
    sub_253A3E098();
    sub_2539F0094((uint64_t)&unk_269CE6C80);
    sub_253B0A370();
    *__n128 v22 = v24;
    sub_253462A5C(&qword_269CDDDB8);
    sub_25350CC48();
    sub_253A3CEF8();
    swift_bridgeObjectRelease();
    *(void *)(v1 + v12) = v24;
    LOBYTE(v24) = 4;
    *uint64_t v13 = sub_253B0A330() & 1;
    *uint64_t v14 = sub_253A3E1E4(5) & 1;
    *(unsigned char *)(v1 + v15) = sub_253A3E1E4(6) & 1;
    sub_2534D25BC();
    sub_253B0A370();
    sub_2534B3470();
    v17();
    uint64_t v18 = v1 + v8[11];
    *(void *)uint64_t v18 = v24;
    *(void *)(v18 + 8) = v25;
    *(_OWORD *)(v18 + 16) = v26;
    sub_2539DF660(v1, v20);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v23);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D2020()
{
}

void sub_2539D2038()
{
}

uint64_t ParameterPath.key.getter()
{
  return sub_2534ACF74();
}

uint64_t ParameterPath.key.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ParameterPath.key.modify())()
{
  return nullsub_1;
}

uint64_t ParameterPath.collectionIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ParameterPath.collectionIndex.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ParameterPath.collectionIndex.modify())()
{
  return nullsub_1;
}

uint64_t static ParameterPath.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2 = sub_253A3F0B8(a1);
  char v6 = *(unsigned char *)(v5 + 24);
  uint64_t v7 = *(void *)(v4 + 16);
  char v8 = *(unsigned char *)(v4 + 24);
  BOOL v9 = v2 == *(void *)v4 && v3 == *(void *)(v4 + 8);
  if (v9 || (sub_253B0A4C0(), uint64_t result = sub_25397F648(), (v11 & 1) != 0))
  {
    if (v6)
    {
      if ((v8 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v1 == v7) {
        char v12 = v8;
      }
      else {
        char v12 = 1;
      }
      if (v12) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t ParameterPath.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  if (v1 == 1) {
    return sub_253B0A610();
  }
  sub_253B0A610();
  return sub_253B0A600();
}

uint64_t sub_2539D21FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697463656C6C6F63 && a2 == 0xEF7865646E496E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539D2300(char a1)
{
  if (a1) {
    return 0x697463656C6C6F63;
  }
  else {
    return 7955819;
  }
}

uint64_t sub_2539D233C()
{
  return sub_2539D2300(*v0);
}

uint64_t sub_2539D2344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D21FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D236C(uint64_t a1)
{
  unint64_t v2 = sub_2539F00F8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D23A8(uint64_t a1)
{
  unint64_t v2 = sub_2539F00F8();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ParameterPath.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE6C88);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3DCC4();
  sub_25397F800(v2);
  sub_2539F00F8();
  sub_253A3F238();
  sub_253A3D2E8();
  if (!v0) {
    sub_253B0A3D0();
  }
  uint64_t v4 = sub_2534F82A4();
  v5(v4);
  sub_253578DEC();
  sub_2534847C8();
}

uint64_t ParameterPath.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_2534D938C();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1 != 1) {
    sub_2534D9D20();
  }
  return sub_253B0A630();
}

void ParameterPath.init(from:)()
{
  sub_2534847F8();
  sub_253A3C3A8();
  sub_253462A5C(&qword_269CE6C98);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534F83CC();
  sub_2539F00F8();
  sub_2534F8738();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_253A3E0E4();
    sub_253A3C284();
    uint64_t v6 = sub_253B0A300();
    char v8 = v7;
    sub_2534D9A08();
    v9();
    *(void *)uint64_t v2 = v4;
    *(void *)(v2 + 8) = v3;
    *(void *)(v2 + 16) = v6;
    *(unsigned char *)(v2 + 24) = v8 & 1;
    sub_253A3D940();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539D269C()
{
}

void sub_2539D26B4()
{
}

uint64_t sub_2539D26D4()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  sub_253B09630();
  swift_bridgeObjectRelease();
  sub_253B0A610();
  if (v1 != 1) {
    sub_2534D9D20();
  }
  return sub_253B0A630();
}

uint64_t ClientInitiatedClientAction.toolId.getter()
{
  return sub_2534ACF74();
}

uint64_t ClientInitiatedClientAction.toolId.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ClientInitiatedClientAction.toolId.modify())()
{
  return nullsub_1;
}

uint64_t ClientInitiatedClientAction.parameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ClientInitiatedClientAction.parameters.modify())()
{
  return nullsub_1;
}

uint64_t ClientInitiatedClientAction.description.getter()
{
  sub_253A3BDD0();
  sub_253B0A000();
  sub_253A3C8C4();
  sub_253A3C5D0();
  sub_253B09860();
  swift_bridgeObjectRetain();
  sub_253A3E9E4();
  swift_bridgeObjectRelease();
  sub_253A3CDE0();
  sub_253B09120();
  swift_bridgeObjectRetain();
  sub_253B09590();
  sub_253A3DE18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25351C9C4();
  return v1;
}

uint64_t sub_2539D28EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496C6F6F74 && a2 == 0xE600000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539D29E0(char a1)
{
  if (a1) {
    return 0x6574656D61726170;
  }
  else {
    return 0x64496C6F6F74;
  }
}

uint64_t sub_2539D2A18()
{
  return sub_2539D29E0(*v0);
}

uint64_t sub_2539D2A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D28EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D2A48(uint64_t a1)
{
  unint64_t v2 = sub_2539F0144();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D2A84(uint64_t a1)
{
  unint64_t v2 = sub_2539F0144();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientInitiatedClientAction.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE6CA0);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_253A3BEA4(v2);
  sub_2539F0144();
  sub_253A3D7C8();
  sub_253A3EE78();
  sub_253578D2C();
  sub_25397F5D0();
  if (!v0)
  {
    sub_25351C8C4();
    sub_253462A5C(&qword_269CDBAA8);
    sub_253486B10();
    sub_25397F654();
  }
  sub_2534659CC();
  v4();
  sub_253578DEC();
  sub_2534847C8();
}

void ClientInitiatedClientAction.init(from:)()
{
  sub_2534847F8();
  sub_253A3DFDC();
  sub_253462A5C(&qword_269CE6CB0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539F0144();
  sub_2534F8738();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_253A3C110();
    sub_253462A5C(&qword_269CDBAA8);
    sub_25351C8C4();
    sub_253486CE4();
    sub_253A3F624();
    sub_253A3D060();
    sub_2534D9A08();
    v3();
    sub_253A3EC78();
    sub_253A3C00C();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539D2D28()
{
}

void sub_2539D2D40()
{
}

uint64_t ContextPrewarmRequest.prewarmRequestId.getter()
{
  return sub_2534ACF74();
}

uint64_t ContextPrewarmRequest.prewarmRequestId.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ContextPrewarmRequest.prewarmRequestId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539D2DCC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000253B13B00)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_2539D2E54()
{
  return 0xD000000000000010;
}

uint64_t sub_2539D2E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D2DCC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539D2EA0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0190();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D2EDC(uint64_t a1)
{
  unint64_t v2 = sub_2539F0190();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContextPrewarmRequest.encode(to:)()
{
}

void ContextPrewarmRequest.init(from:)()
{
}

void sub_2539D2FA4()
{
}

void sub_2539D2FBC()
{
}

uint64_t (*ContextPrewarmCompleted.originatingPrewarmRequestId.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539D2FF4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000253B13B20)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_2539D307C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_2539D309C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D2FF4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539D30C8(uint64_t a1)
{
  unint64_t v2 = sub_2539F01DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D3104(uint64_t a1)
{
  unint64_t v2 = sub_2539F01DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContextPrewarmCompleted.encode(to:)()
{
}

void ContextPrewarmCompleted.init(from:)()
{
}

void sub_2539D31CC()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v13 = v5;
  sub_253462A5C(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534847E0();
  char v8 = sub_253A3BEA4(v4);
  v2(v8);
  sub_253B0A660();
  if (!v0)
  {
    sub_253A3E8CC();
    uint64_t v9 = sub_253B0A320();
    uint64_t v11 = v10;
    sub_2534D97B4();
    v12();
    *uint64_t v13 = v9;
    v13[1] = v11;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D32E8()
{
}

void sub_2539D3300()
{
}

unint64_t SafetyModeRelease.description.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_2539D333C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0228();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D3378(uint64_t a1)
{
  unint64_t v2 = sub_2539F0228();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SafetyModeRelease.encode(to:)()
{
}

uint64_t SafetyModeRelease.init(from:)(uint64_t a1)
{
  return sub_253A3F4B4(a1);
}

void sub_2539D3410()
{
}

uint64_t SafetyModeException.clientQueryId.getter()
{
  return sub_2534ACF74();
}

uint64_t SafetyModeException.clientQueryId.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*SafetyModeException.clientQueryId.modify())()
{
  return nullsub_1;
}

unint64_t SafetyModeException.description.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_2539D3530(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7551746E65696C63 && a2 == 0xED00006449797265)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539D35DC()
{
  return 0x7551746E65696C63;
}

uint64_t sub_2539D3604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D3530(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539D3630(uint64_t a1)
{
  unint64_t v2 = sub_2539F0274();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D366C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0274();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SafetyModeException.encode(to:)()
{
}

void sub_2539D36F8()
{
  sub_2534847F8();
  char v12 = v1;
  uint64_t v11 = v2;
  char v4 = v3;
  sub_253462A5C(v5);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534B34A4();
  uint64_t v7 = v0[1];
  uint64_t v10 = *v0;
  char v8 = sub_25397F800(v4);
  v11(v8);
  sub_253B0A680();
  v12(v10, v7);
  sub_2534D9A08();
  v9();
  sub_2536D3D5C();
  sub_2534847C8();
}

void SafetyModeException.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE6D08);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534F83CC();
  sub_2539F0274();
  sub_2534994B4();
  if (!v1)
  {
    sub_253A3E8CC();
    uint64_t v4 = sub_253B0A2E0();
    uint64_t v6 = v5;
    sub_2534D9A08();
    v7();
    *unint64_t v2 = v4;
    v2[1] = v6;
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D38EC()
{
}

void sub_2539D3904()
{
}

uint64_t ContextRetrieved.requiredContext.setter()
{
  uint64_t result = sub_253A3F774();
  void *v1 = v0;
  return result;
}

uint64_t (*ContextRetrieved.requiredContext.modify())()
{
  return nullsub_1;
}

uint64_t ContextRetrieved.utteranceContext.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ContextRetrieved.utteranceContext.modify())()
{
  return nullsub_1;
}

void ContextRetrieved.description.getter()
{
  sub_253A3C038();
  sub_253A3BDD0();
  sub_253B0A000();
  sub_253A3C8C4();
  sub_253A3C2E4();
  uint64_t v0 = type metadata accessor for RetrievedContextStatement(0);
  uint64_t v1 = swift_bridgeObjectRetain();
  MEMORY[0x25A268A80](v1, v0);
  sub_253A3EE98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_253A3C5D0();
  sub_253B09860();
  uint64_t v2 = swift_bridgeObjectRetain();
  MEMORY[0x25A268A80](v2, v0);
  sub_253A3DE18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25351C9C4();
  sub_253A3BEC0();
}

uint64_t sub_2539D3A88(uint64_t a1)
{
  unint64_t v2 = sub_2539F02C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D3AC4(uint64_t a1)
{
  unint64_t v2 = sub_2539F02C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContextRetrieved.encode(to:)()
{
  sub_2534847F8();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE6D10);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_2534B3294();
  sub_2534F8328(v2);
  sub_2539F02C0();
  sub_2534DA3BC();
  sub_253462A5C(&qword_269CE6D20);
  sub_2539F030C();
  sub_25397F654();
  if (!v0)
  {
    sub_253A3D3B4();
    sub_25397F654();
  }
  uint64_t v4 = sub_2534F82A4();
  v5(v4);
  sub_253578DEC();
  sub_2534847C8();
}

void ContextRetrieved.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_253462A5C(&qword_269CE6D38);
  sub_253465998();
  MEMORY[0x270FA5388](v15);
  sub_2534F83CC();
  sub_2539F02C0();
  sub_2534F8738();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v12);
  }
  else
  {
    sub_253462A5C(&qword_269CE6D20);
    sub_2539F03B0();
    sub_253484754();
    sub_253A3D3B4();
    swift_bridgeObjectRetain();
    sub_253484754();
    sub_25351C3E8();
    v16();
    *uint64_t v14 = a10;
    v14[1] = a10;
    swift_bridgeObjectRetain();
    sub_253A3C00C();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539D3D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ContextRetrieved.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539D3D9C()
{
}

uint64_t RetrievedContextStatement.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t RetrievedContextStatement.retrievedContext.getter()
{
  return sub_2539A3E30();
}

uint64_t RetrievedContextStatement.init(statementId:retrievedContext:)(uint64_t a1, uint64_t a2)
{
  return sub_2539D4534(a1, a2, (void (*)(void))type metadata accessor for RetrievedContextStatement, MEMORY[0x263F4E500]);
}

uint64_t static RetrievedContextStatement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_2539D462C(a1, a2, MEMORY[0x263F4BF90], type metadata accessor for RetrievedContextStatement, MEMORY[0x263F4E4F8]);
}

uint64_t sub_2539D3E64(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B11510)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539D3F6C(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2539D3FB0()
{
  return sub_2539D3F6C(*v0);
}

uint64_t sub_2539D3FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D3E64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D3FE0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0454();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D401C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0454();
  return MEMORY[0x270FA00B8](a1, v2);
}

void RetrievedContextStatement.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6D50);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0454();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for RetrievedContextStatement(0);
    sub_253A3B8BC();
    sub_253B07AB0();
    sub_2539E6F90((uint64_t)&qword_269CDBA00);
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void RetrievedContextStatement.init(from:)()
{
  sub_2534847F8();
  sub_253A3D298(v2);
  sub_253B07AB0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3C4DC();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534AF2A0(v5, v12);
  sub_253462A5C(&qword_269CE6D60);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534AF2D8();
  type metadata accessor for RetrievedContextStatement(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534F8630(v0);
  sub_2539F0454();
  sub_253A3CBDC();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_253A3F418();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3CE98();
    sub_25347FA84();
    v9();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&qword_269CDBA18);
    sub_253A3CA18();
    sub_2534659CC();
    v10();
    sub_253A3C378();
    v11();
    sub_253A3F698();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539D4490()
{
}

void sub_2539D44A8()
{
}

uint64_t DynamicEnumerationEntityStatement.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t DynamicEnumerationEntityStatement.dynamicEnumerationEntity.getter()
{
  return sub_2539A3E30();
}

uint64_t DynamicEnumerationEntityStatement.init(statementId:dynamicEnumerationEntity:)(uint64_t a1, uint64_t a2)
{
  return sub_2539D4534(a1, a2, (void (*)(void))type metadata accessor for DynamicEnumerationEntityStatement, MEMORY[0x263F4E710]);
}

uint64_t sub_2539D4534(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  sub_2539444B8();
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v6();
  a3(0);
  a4(0);
  sub_25346CAF4();
  uint64_t v7 = sub_2534DA2E4();
  return v8(v7);
}

uint64_t static DynamicEnumerationEntityStatement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_2539D462C(a1, a2, MEMORY[0x263F4BF90], type metadata accessor for DynamicEnumerationEntityStatement, MEMORY[0x263F4E708]);
}

uint64_t sub_2539D462C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t))
{
  sub_2534DA0C4();
  if ((v6() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = a4(0);
  uint64_t v8 = sub_253A3BFB0(v7);
  return a5(v8);
}

uint64_t sub_2539D46B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B114F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539D47B8(char a1)
{
  if (a1) {
    return 0xD000000000000018;
  }
  else {
    return 0x6E656D6574617473;
  }
}

uint64_t sub_2539D47FC()
{
  return sub_2539D47B8(*v0);
}

uint64_t sub_2539D4804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D46B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D482C(uint64_t a1)
{
  unint64_t v2 = sub_2539F04A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D4868(uint64_t a1)
{
  unint64_t v2 = sub_2539F04A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void DynamicEnumerationEntityStatement.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6D68);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F04A0();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for DynamicEnumerationEntityStatement(0);
    sub_253A3B8BC();
    sub_253B081D0();
    sub_2539E6F90((uint64_t)&unk_269CE6D78);
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void DynamicEnumerationEntityStatement.init(from:)()
{
  sub_2534847F8();
  sub_253A3D298(v2);
  sub_253B081D0();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3C4DC();
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534AF2A0(v5, v12);
  sub_253462A5C(&qword_269CE6D80);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = sub_2534AF2D8();
  type metadata accessor for DynamicEnumerationEntityStatement(v7);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v8);
  sub_2534F8630(v0);
  sub_2539F04A0();
  sub_253A3CBDC();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
  }
  else
  {
    sub_253A3F418();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3CE98();
    sub_25347FA84();
    v9();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE6D88);
    sub_253A3CA18();
    sub_2534659CC();
    v10();
    sub_253A3C378();
    v11();
    sub_253A3F698();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v0);
    sub_2539DF610();
  }
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539D4CDC()
{
}

void sub_2539D4CF4()
{
}

uint64_t sub_2539D4D10(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7365697469746E65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_2539D4D98()
{
  return 0x7365697469746E65;
}

uint64_t sub_2539D4DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D4D10(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539D4DE0(uint64_t a1)
{
  unint64_t v2 = sub_2539F04EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D4E1C(uint64_t a1)
{
  unint64_t v2 = sub_2539F04EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void EntitySpanMatchResult.encode(to:)()
{
  sub_2534847F8();
  sub_253A3D9E4();
  sub_253462A5C(&qword_269CE6D90);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_2534F8328(v0);
  sub_2539F04EC();
  sub_2534F82BC();
  sub_253462A5C(&qword_269CDB548);
  sub_2539F0538();
  sub_253A3BA74();
  sub_2534F8390();
  v2();
  sub_2534F8A10();
  sub_2534847C8();
}

void EntitySpanMatchResult.init(from:)()
{
  sub_2534847F8();
  sub_2534F881C();
  sub_253462A5C(&qword_269CE6DA0);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539F04EC();
  sub_2534994B4();
  if (!v1)
  {
    sub_253462A5C(&qword_269CDB548);
    sub_2539F05DC();
    sub_2534F8410();
    sub_2534D9A08();
    v3();
    sub_253A3D888();
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D5024()
{
}

void sub_2539D503C()
{
}

uint64_t ToolRetrievalResponse.originalSubQuery.getter()
{
  return sub_2534ACF74();
}

uint64_t ToolRetrievalResponse.originalSubQuery.setter()
{
  uint64_t result = sub_253A3BB84();
  void *v1 = v2;
  v1[1] = v0;
  return result;
}

uint64_t (*ToolRetrievalResponse.originalSubQuery.modify())()
{
  return nullsub_1;
}

uint64_t ToolRetrievalResponse.rewrittenQuery.getter()
{
  return sub_2534ACF74();
}

uint64_t ToolRetrievalResponse.rewrittenQuery.setter()
{
  uint64_t result = sub_253A3EBA4();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v0;
  return result;
}

uint64_t (*ToolRetrievalResponse.rewrittenQuery.modify())()
{
  return nullsub_1;
}

float ToolRetrievalResponse.confidence.getter()
{
  return *(float *)(v0 + 32);
}

void ToolRetrievalResponse.confidence.setter(float a1)
{
  *(float *)(v1 + 32) = a1;
}

uint64_t (*ToolRetrievalResponse.confidence.modify())()
{
  return nullsub_1;
}

uint64_t ToolRetrievalResponse.retrievedTools.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolRetrievalResponse.retrievedTools.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ToolRetrievalResponse.retrievedTools.modify())()
{
  return nullsub_1;
}

uint64_t ToolRetrievalResponse.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToolRetrievalResponse.types.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*ToolRetrievalResponse.types.modify())()
{
  return nullsub_1;
}

uint64_t ToolRetrievalResponse.init(originalSubQuery:rewrittenQuery:confidence:retrievedTools:types:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, float a8@<S0>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(float *)(a7 + 32) = a8;
  *(void *)(a7 + 40) = a5;
  *(void *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_2539D5220(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0DCD0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6574746972776572 && a2 == 0xEE0079726575516ELL;
    if (v5 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x6E656469666E6F63 && a2 == 0xEA00000000006563;
      if (v6 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v7 = a1 == 0x6576656972746572 && a2 == 0xEE00736C6F6F5464;
        if (v7 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x7365707974 && a2 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v9 = sub_253B0A4C0();
          swift_bridgeObjectRelease();
          if (v9) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

unint64_t sub_2539D5478(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574746972776572;
      break;
    case 2:
      unint64_t result = 0x6E656469666E6F63;
      break;
    case 3:
      unint64_t result = 0x6576656972746572;
      break;
    case 4:
      unint64_t result = 0x7365707974;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539D5544()
{
  return sub_2539D5478(*v0);
}

uint64_t sub_2539D554C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D5220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D5574(uint64_t a1)
{
  unint64_t v2 = sub_2539F0680();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D55B0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0680();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolRetrievalResponse.encode(to:)()
{
  sub_253547278();
  unint64_t v2 = v1;
  sub_253462A5C(&qword_269CE6DA8);
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_253A3DCE0();
  sub_25397F800(v2);
  sub_2539F0680();
  sub_253B0A680();
  sub_253A3EF18();
  sub_253B0A3F0();
  if (!v0)
  {
    sub_253B0A3F0();
    sub_253B0A420();
    sub_253462A5C(&qword_269CE6DB8);
    sub_2539F06CC();
    sub_25397F654();
    sub_253462A5C(&qword_269CE6DD0);
    sub_2539F0770();
    sub_25397F654();
  }
  sub_2534B3470();
  v4();
  sub_253578DEC();
  sub_25354725C();
}

void ToolRetrievalResponse.init(from:)()
{
  sub_253547278();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_253462A5C(&qword_269CE6DF0);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253A3B978(v2);
  sub_2539F0680();
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = sub_253A3EC40();
    uint64_t v8 = v7;
    uint64_t v15 = v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_253A3EC40();
    uint64_t v16 = v10;
    uint64_t v14 = v9;
    LOBYTE(v17) = 2;
    swift_bridgeObjectRetain();
    sub_253B0A350();
    int v12 = v11;
    sub_253462A5C(&qword_269CE6DB8);
    sub_2539F084C();
    sub_253A3D8B8();
    sub_253B0A370();
    sub_253462A5C(&qword_269CE6DD0);
    sub_2539F08F0();
    swift_bridgeObjectRetain();
    sub_253A3D8B8();
    sub_253B0A370();
    sub_2534D9A08();
    v13();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = v14;
    *(void *)(v4 + 24) = v16;
    *(_DWORD *)(v4 + 32) = v12;
    *(void *)(v4 + 40) = v17;
    *(void *)(v4 + 48) = v17;
    sub_253A3C00C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_25354725C();
}

void sub_2539D5B14()
{
}

void sub_2539D5B2C()
{
}

uint64_t (*ExternalAgentTextQuery.query.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentTextQuery.queryRewriteMetadataEventId.getter()
{
  return sub_2539A9600();
}

uint64_t ExternalAgentTextQuery.queryRewriteMetadataEventId.setter()
{
  return sub_2539A9658();
}

uint64_t (*ExternalAgentTextQuery.queryRewriteMetadataEventId.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentTextQuery.queryRewriteMetadataInlined.getter()
{
  return sub_2539D5C04();
}

uint64_t sub_2539D5C04()
{
  uint64_t v0 = sub_2534F8A1C();
  v1(v0);
  sub_253A3DB04();
  uint64_t v3 = sub_253A3EDBC(v2);
  return sub_25396DF48(v3, v4);
}

double ExternalAgentTextQuery.queryRewriteMetadataInlined.setter()
{
  *(void *)&double result = sub_2539D5C60().n128_u64[0];
  return result;
}

__n128 sub_2539D5C60()
{
  uint64_t v2 = sub_253A3F6D0();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(v3(v2) + 24));
  sub_253961E88(*v4, v4[1]);
  __n128 result = v6;
  *(__n128 *)uint64_t v4 = v6;
  v4[2] = v0;
  return result;
}

uint64_t (*ExternalAgentTextQuery.queryRewriteMetadataInlined.modify())()
{
  return nullsub_1;
}

__n128 ExternalAgentTextQuery.init(query:queryRewriteMetadataEventId:queryRewriteMetadataInlined:)()
{
  sub_253A3F73C();
  __n128 v13 = *v4;
  uint64_t v5 = v4[1].n128_i64[0];
  uint64_t v6 = type metadata accessor for ExternalAgentTextQuery(0);
  uint64_t v7 = (uint64_t)v3 + *(int *)(v6 + 20);
  uint64_t v8 = sub_253B055C0();
  sub_25346CC08(v7, v9, v10, v8);
  int v11 = (void *)((char *)v3 + *(int *)(v6 + 24));
  *int v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v3 = v2;
  v3[1] = v1;
  sub_2539F0BE0(v0, v7, (uint64_t *)&unk_26B248CB0);
  sub_253961E88(*v11, v11[1]);
  __n128 result = v13;
  *(__n128 *)int v11 = v13;
  v11[2] = v5;
  return result;
}

uint64_t sub_2539D5DA8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000253B10FD0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000253B10FF0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539D5EEC(char a1)
{
  if (a1) {
    return 0xD00000000000001BLL;
  }
  else {
    return 0x7972657571;
  }
}

uint64_t sub_2539D5F48()
{
  return sub_2539D5EEC(*v0);
}

uint64_t sub_2539D5F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D5DA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D5F78(uint64_t a1)
{
  unint64_t v2 = sub_2539F09CC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D5FB4(uint64_t a1)
{
  unint64_t v2 = sub_2539F09CC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExternalAgentTextQuery.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6E20);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F09CC();
  sub_2534DA3BC();
  sub_253A3BF94();
  if (!v0)
  {
    type metadata accessor for ExternalAgentTextQuery(0);
    sub_253A3C418();
    sub_2539E6F90((uint64_t)&qword_26B248CA0);
    sub_253A3B994();
    sub_253A3CE68();
    sub_253A3BCCC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ExternalAgentTextQuery.init(from:)()
{
  sub_2534847F8();
  uint64_t v5 = v4;
  uint64_t v23 = v6;
  uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v8 = sub_25346CB4C(v7);
  MEMORY[0x270FA5388](v8);
  sub_253483628(v9, v22);
  sub_253462A5C(&qword_269CE6E30);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = sub_2534D8CAC();
  type metadata accessor for ExternalAgentTextQuery(v11);
  sub_253A3EB94();
  MEMORY[0x270FA5388](v12);
  sub_253A3DC30();
  uint64_t v14 = (char *)v3 + v13;
  uint64_t v15 = sub_253B055C0();
  *(void *)&long long v25 = v14;
  uint64_t v16 = sub_253A3D714();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, v17, v18, v15);
  uint64_t v19 = (uint64_t *)((char *)v3 + *(int *)(v0 + 32));
  *uint64_t v19 = 0;
  v19[1] = 0;
  v19[2] = 0;
  sub_2534F8630(v5);
  sub_2539F09CC();
  sub_253A3E178();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
    sub_253472458(v25, (uint64_t *)&unk_26B248CB0);
    sub_253961E88(*v19, v19[1]);
  }
  else
  {
    *uint64_t v3 = sub_253B0A320();
    v3[1] = v20;
    sub_253A3DA68();
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3CA4C();
    sub_253B0A310();
    sub_2539F0BE0(v24, v25, (uint64_t *)&unk_26B248CB0);
    sub_2539EB5BC();
    sub_253A3F134();
    sub_253B0A310();
    sub_2534D97B4();
    v21();
    sub_253A3EA64();
    sub_253961E88(*v19, v19[1]);
    *(_OWORD *)uint64_t v19 = v25;
    v19[2] = v2;
    sub_2539DF660((uint64_t)v3, v23);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v5);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D643C()
{
}

void sub_2539D6454()
{
}

uint64_t (*ExternalAgentSpeechQuery.candidates.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentSpeechQuery.queryRewriteMetadataEventId.getter()
{
  return sub_2539A9600();
}

uint64_t ExternalAgentSpeechQuery.queryRewriteMetadataEventId.setter()
{
  return sub_2539A9658();
}

uint64_t (*ExternalAgentSpeechQuery.queryRewriteMetadataEventId.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentSpeechQuery.queryRewriteMetadataInlined.getter()
{
  return sub_2539D5C04();
}

double ExternalAgentSpeechQuery.queryRewriteMetadataInlined.setter()
{
  *(void *)&double result = sub_2539D5C60().n128_u64[0];
  return result;
}

uint64_t (*ExternalAgentSpeechQuery.queryRewriteMetadataInlined.modify())()
{
  return nullsub_1;
}

__n128 ExternalAgentSpeechQuery.init(candidates:queryRewriteMetadataEventId:queryRewriteMetadataInlined:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  sub_253A3C038();
  uint64_t v15 = sub_253A3D988();
  type metadata accessor for ExternalAgentSpeechQuery(v15);
  uint64_t v16 = sub_253A3F554();
  sub_253A3DE70(v16);
  *uint64_t v11 = v10;
  sub_2539F0BE0(v9, v13, (uint64_t *)&unk_26B248CB0);
  sub_253961E88(*v12, v12[1]);
  *(_OWORD *)uint64_t v12 = a9;
  v12[2] = v14;
  sub_253A3BEC0();
  return result;
}

uint64_t sub_2539D65F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000253B10FD0 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000253B10FF0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539D674C(char a1)
{
  if (a1) {
    return 0xD00000000000001BLL;
  }
  else {
    return 0x74616469646E6163;
  }
}

uint64_t sub_2539D67B0()
{
  return sub_2539D674C(*v0);
}

uint64_t sub_2539D67B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D65F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D67E0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0A18();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D681C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0A18();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExternalAgentSpeechQuery.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6E38);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0A18();
  sub_2534DA3BC();
  sub_253462A5C(&qword_269CE5F30);
  sub_2539EC5B4();
  sub_2534DA628();
  if (!v0)
  {
    type metadata accessor for ExternalAgentSpeechQuery(0);
    sub_253A3C418();
    sub_2539E6F90((uint64_t)&qword_26B248CA0);
    sub_253A3B994();
    sub_253A3E098();
    sub_2539EA568();
    sub_253A3BCCC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ExternalAgentSpeechQuery.init(from:)()
{
  sub_2534847F8();
  *(void *)&long long v17 = v2;
  char v6 = v5;
  uint64_t v16 = v7;
  uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v9 = sub_25346CB4C(v8);
  MEMORY[0x270FA5388](v9);
  sub_2534835B0();
  sub_253462A5C(&qword_269CE6E48);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  uint64_t v11 = sub_25349888C();
  type metadata accessor for ExternalAgentSpeechQuery(v11);
  sub_253A3EB94();
  MEMORY[0x270FA5388](v12);
  sub_253465A3C();
  uint64_t v13 = (uint64_t)v3 + *(int *)(v1 + 28);
  sub_253B055C0();
  sub_253A3F46C();
  uint64_t v14 = (void *)((char *)v3 + *(int *)(v1 + 32));
  *uint64_t v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  sub_2534F8630(v6);
  sub_2539F0A18();
  sub_253B0A660();
  if (v2)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v6);
    sub_253472458(v13, (uint64_t *)&unk_26B248CB0);
    sub_253961E88(*v14, v14[1]);
  }
  else
  {
    sub_253462A5C(&qword_269CE5F30);
    sub_2539EC658();
    sub_253A3EDDC();
    sub_253B0A370();
    *uint64_t v3 = v18;
    sub_253A3DA68();
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3CA4C();
    sub_253B0A310();
    sub_2539F0BE0(v0, v13, (uint64_t *)&unk_26B248CB0);
    sub_2539EB5BC();
    sub_253A3F134();
    sub_253B0A310();
    sub_2534D91A0();
    v15();
    sub_253A3EA64();
    sub_253961E88(*v14, v14[1]);
    *(_OWORD *)uint64_t v14 = v17;
    v14[2] = v4;
    sub_2539DF660((uint64_t)v3, v16);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v6);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D6CF4()
{
}

void sub_2539D6D0C()
{
}

uint64_t ExternalAgentOutcome.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t ExternalAgentOutcome.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ExternalAgentOutcome.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentOutcome.statementOutcome.getter()
{
  return sub_2539A3E30();
}

uint64_t ExternalAgentOutcome.statementOutcome.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for ExternalAgentOutcome, MEMORY[0x263F4C7E0]);
}

uint64_t (*ExternalAgentOutcome.statementOutcome.modify())()
{
  return nullsub_1;
}

uint64_t ExternalAgentOutcome.responseText.getter()
{
  return sub_2539BD8E4();
}

uint64_t ExternalAgentOutcome.responseText.setter()
{
  return sub_2539BD934();
}

uint64_t (*ExternalAgentOutcome.responseText.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539D6E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *))
{
  uint64_t v7 = sub_2534D976C();
  v8(v7);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = sub_2534D973C();
  v13(v12);
  return a6(v11);
}

uint64_t ExternalAgentOutcome.outcome.setter()
{
  sub_253578A1C();
  uint64_t v0 = sub_253B06850();
  sub_253465998();
  uint64_t v2 = v1;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253B05A90();
  sub_253B05AB0();
  sub_25346CAF4();
  sub_2534659CC();
  v6();
  uint64_t v7 = type metadata accessor for ExternalAgentOutcome(0);
  uint64_t v8 = sub_253A3E348(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 40))(v8, v5, v0);
}

void (*ExternalAgentOutcome.outcome.modify(void *a1))()
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_253B06850();
  v3[1] = v4;
  sub_25346CB34(v4);
  v3[2] = v5;
  v3[3] = malloc(*(void *)(v6 + 64));
  uint64_t v7 = sub_253B05AB0();
  v3[4] = v7;
  sub_25346CB34(v7);
  v3[5] = v8;
  size_t v10 = *(void *)(v9 + 64);
  v3[6] = malloc(v10);
  v3[7] = malloc(v10);
  *((_DWORD *)v3 + 16) = *(_DWORD *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
  sub_253B06830();
  return sub_2539D70EC;
}

void sub_2539D70EC()
{
  sub_2534B3258();
  uint64_t v1 = *(void **)(*(void *)v0 + 48);
  uint64_t v2 = *(void **)(*(void *)v0 + 56);
  uint64_t v3 = *(void *)(*(void *)v0 + 40);
  uint64_t v4 = *(void **)(*(void *)v0 + 24);
  if (v5)
  {
    sub_2534D9718();
    sub_2534AF234();
    v6();
    sub_253B05A90();
    uint64_t v7 = *(void (**)(void))(v3 + 8);
    sub_2534D97B4();
    v7();
    uint64_t v8 = sub_253A3E630();
    v9(v8);
    sub_2534D97B4();
    v7();
  }
  else
  {
    sub_253B05A90();
    sub_2534D97B4();
    v10();
    uint64_t v11 = sub_253A3E630();
    v12(v11);
  }
  free(v2);
  free(v1);
  free(v4);
  sub_253465A14();
  free(v13);
}

uint64_t ExternalAgentOutcome.init(statementId:statementOutcome:responseText:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2539447CC();
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v5();
  uint64_t v6 = type metadata accessor for ExternalAgentOutcome(0);
  sub_253A3E338();
  sub_253B06850();
  sub_25346CAF4();
  sub_2534D8E14();
  uint64_t result = v7();
  *(void *)(v3 + *(int *)(v6 + 24)) = a3;
  return result;
}

uint64_t ExternalAgentOutcome.init(outcome:responseText:)()
{
  sub_2535E24D4();
  uint64_t v3 = sub_253B06850();
  sub_253465998();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  sub_253465A3C();
  sub_253A3D844();
  sub_253B05A90();
  sub_253B05AB0();
  sub_25346CAF4();
  sub_2534659CC();
  v7();
  uint64_t v8 = type metadata accessor for ExternalAgentOutcome(0);
  uint64_t v9 = sub_253A3E2D8(v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9, v2, v3);
  *(void *)(v1 + *(int *)(v8 + 24)) = v0;
  return result;
}

void ExternalAgentOutcome.init(statementId:outcome:responseText:)()
{
  sub_2534B3258();
  sub_253A3F71C();
  uint64_t v2 = v1;
  sub_253B06850();
  sub_253465998();
  MEMORY[0x270FA5388](v3);
  sub_25348360C();
  sub_253B059D0();
  sub_253486600();
  sub_253A3E9FC();
  sub_2534AF234();
  v4();
  sub_253B05A90();
  sub_253B05AB0();
  sub_25346CAF4();
  sub_2534659CC();
  v5();
  sub_2534DA154();
  sub_2534D97B4();
  v6();
  uint64_t v7 = type metadata accessor for ExternalAgentOutcome(0);
  sub_253A3E2D8(v7);
  sub_253A3E794();
  v8();
  *(void *)(v2 + *(int *)(v7 + 24)) = v0;
  sub_253465A14();
}

uint64_t sub_2539D747C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B12200 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2539D75F8(char a1)
{
  if (!a1) {
    return 0x6E656D6574617473;
  }
  if (a1 == 1) {
    return 0xD000000000000010;
  }
  return 0x65736E6F70736572;
}

uint64_t sub_2539D7664()
{
  return sub_2539D75F8(*v0);
}

uint64_t sub_2539D766C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D747C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D7694(uint64_t a1)
{
  unint64_t v2 = sub_2539F0A64();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D76D0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0A64();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExternalAgentOutcome.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6E50);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0A64();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ExternalAgentOutcome(0);
    sub_253A3B8BC();
    sub_253B06850();
    sub_2539E6F90((uint64_t)&unk_269CE6A08);
    sub_2534F84DC();
    sub_253A3D2AC();
    sub_253462A5C(&qword_269CDC550);
    sub_2535443D4((uint64_t)&qword_269CDDF80);
    sub_2534DA628();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void ExternalAgentOutcome.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v17 = v4;
  sub_253B06850();
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_25348360C();
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534D8F84(v7, v17);
  sub_253462A5C(&qword_269CE6E60);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_2534AF2D8();
  uint64_t v10 = type metadata accessor for ExternalAgentOutcome(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  sub_2534835B0();
  uint64_t v12 = (void *)sub_253578D20();
  sub_253472068(v12, v13);
  sub_2539F0A64();
  sub_253B0A660();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3C6B8();
    sub_253B0A370();
    sub_253A3E994();
    sub_25347FA84();
    v14();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE6A20);
    sub_253A3E0CC();
    sub_253B0A370();
    sub_253A3F548();
    sub_25347FA84();
    v15();
    sub_253462A5C(&qword_269CDC550);
    sub_253A3C6A0();
    sub_2535443D4((uint64_t)&qword_269CDE0C0);
    sub_253B0A370();
    sub_2534DA4BC();
    v16();
    *(void *)(v0 + *(int *)(v10 + 24)) = v19;
    sub_2539DF660(v0, v18);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v3);
    sub_2539DF610();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539D7CB8()
{
}

void sub_2539D7CD0()
{
}

uint64_t (*ExternalAgentRequestRewriteMetadata.originalRequest.modify())()
{
  return nullsub_1;
}

uint64_t (*ExternalAgentRequestRewriteMetadata.rewrites.modify())()
{
  return nullsub_1;
}

uint64_t sub_2539D7D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616E696769726FLL && a2 == 0xEF74736575716552;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365746972776572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539D7E40(char a1)
{
  if (a1) {
    return 0x7365746972776572;
  }
  else {
    return 0x6C616E696769726FLL;
  }
}

uint64_t sub_2539D7E84()
{
  return sub_2539D7E40(*v0);
}

uint64_t sub_2539D7E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D7D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D7EB4(uint64_t a1)
{
  unint64_t v2 = sub_2539F0AB0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D7EF0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0AB0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ExternalAgentRequestRewriteMetadata.encode(to:)()
{
}

void sub_2539D7F7C()
{
  sub_2534847F8();
  uint64_t v13 = v2;
  uint64_t v12 = v3;
  uint64_t v5 = v4;
  sub_253462A5C(v6);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B3294();
  uint64_t v9 = *v0;
  uint64_t v8 = v0[1];
  uint64_t v10 = sub_25397F800(v5);
  v12(v10);
  sub_253A3F708();
  sub_253B0A680();
  sub_253A3EE78();
  v13(v9, v8);
  if (!v1)
  {
    sub_25351C8C4();
    sub_253462A5C(&qword_269CDC550);
    sub_2535443D4((uint64_t)&qword_269CDDF80);
    sub_25397F654();
  }
  sub_2534659CC();
  v11();
  sub_253578DEC();
  sub_2534847C8();
}

void ExternalAgentRequestRewriteMetadata.init(from:)()
{
  sub_2534847F8();
  sub_253A3DFDC();
  sub_253462A5C(&qword_269CE6E78);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534F83CC();
  sub_2539F0AB0();
  sub_2534F8738();
  if (v1)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v0);
  }
  else
  {
    sub_253A3C110();
    sub_253462A5C(&qword_269CDC550);
    sub_25351C8C4();
    sub_2535443D4((uint64_t)&qword_269CDE0C0);
    sub_253A3F624();
    sub_253A3D060();
    sub_2534D9A08();
    v3();
    sub_253A3EC78();
    sub_253A3C00C();
    swift_bridgeObjectRelease();
  }
  sub_253579494();
  sub_2534847C8();
}

void sub_2539D8244()
{
}

void sub_2539D825C()
{
}

uint64_t ToolResolution.tool.getter()
{
  return sub_2539DE358();
}

uint64_t ToolResolution.tool.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*ToolResolution.tool.modify())()
{
  return nullsub_1;
}

uint64_t ToolResolution.statementId.getter()
{
  return sub_2539A3E30();
}

uint64_t ToolResolution.statementId.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for ToolResolution, MEMORY[0x263F4BF98]);
}

uint64_t (*ToolResolution.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ToolResolution.originProgramStatementId.getter()
{
  return sub_2539C2A40();
}

uint64_t ToolResolution.originProgramStatementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for ToolResolution, MEMORY[0x263F4BF98]);
}

uint64_t (*ToolResolution.originProgramStatementId.modify())()
{
  return nullsub_1;
}

uint64_t ToolResolution.init(tool:statementId:originProgramStatementId:)()
{
  return sub_2539D9848();
}

uint64_t sub_2539D842C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1819242356 && a2 == 0xE400000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000018 && a2 == 0x8000000253B11130)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539D8584(char a1)
{
  if (!a1) {
    return 1819242356;
  }
  if (a1 == 1) {
    return 0x6E656D6574617473;
  }
  return 0xD000000000000018;
}

uint64_t sub_2539D85E0()
{
  return sub_2539D8584(*v0);
}

uint64_t sub_2539D85E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D842C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D8610(uint64_t a1)
{
  unint64_t v2 = sub_2539F0AFC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D864C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0AFC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ToolResolution.encode(to:)()
{
  sub_2534847F8();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6E80);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0AFC();
  sub_2534DA3BC();
  sub_253A3DA44();
  sub_253B08B30();
  sub_2539E6F90((uint64_t)&qword_269CDE978);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ToolResolution(0);
    sub_253A3DA90();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
    sub_2534F84DC();
  }
  sub_2534D9A08();
  v2();
  sub_253A3C6AC();
  sub_2534847C8();
}

void ToolResolution.init(from:)()
{
  sub_2534847F8();
  uint64_t v27 = sub_253A3F5D4(v2);
  sub_253465998();
  uint64_t v24 = v3;
  MEMORY[0x270FA5388](v4);
  v23[5] = (uint64_t)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v6);
  sub_2536D415C();
  uint64_t v7 = sub_253B08B30();
  sub_253465998();
  uint64_t v25 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534AF2A0(v10, v23[0]);
  uint64_t v28 = sub_253462A5C(&qword_269CE6E90);
  sub_253465998();
  uint64_t v26 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534D9C00();
  uint64_t v14 = type metadata accessor for ToolResolution(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = v1[3];
  sub_2534D9A50(v1);
  sub_2539F0AFC();
  sub_253A3DB90();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v1);
  }
  else
  {
    sub_253A3F258();
    sub_2539E6F90((uint64_t)&qword_269CDE988);
    sub_253A3CEC8();
    sub_25347FA84();
    v17();
    sub_25351C8C4();
    unint64_t v18 = sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3C9E4(v18);
    v23[2] = v7;
    v23[3] = v14;
    uint64_t v19 = v29;
    v23[1] = *(void *)(v24 + 32);
    sub_253A3C378();
    v20();
    sub_253A3C998();
    sub_2534D91AC();
    v21();
    sub_253A3C378();
    v22();
    sub_2539DF660(v19, v23[4]);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v16);
    sub_2539DF610();
  }
  sub_253578DEC();
  sub_2534847C8();
}

void sub_2539D8B84()
{
}

void sub_2539D8B9C()
{
}

uint64_t TypeConversionRequest.value.getter()
{
  return sub_2539DE358();
}

uint64_t TypeConversionRequest.value.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*TypeConversionRequest.value.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionRequest.target.getter()
{
  return sub_2539A3E30();
}

uint64_t TypeConversionRequest.target.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for TypeConversionRequest, MEMORY[0x263F80578]);
}

uint64_t (*TypeConversionRequest.target.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionRequest.statementId.getter()
{
  return sub_2539C2A40();
}

uint64_t TypeConversionRequest.statementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for TypeConversionRequest, MEMORY[0x263F4BF98]);
}

uint64_t (*TypeConversionRequest.statementId.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionRequest.init(value:target:statementId:)()
{
  sub_2539447CC();
  sub_253B09120();
  sub_25346CAF4();
  sub_2534D8E14();
  v0();
  type metadata accessor for TypeConversionRequest(0);
  sub_253A3E338();
  sub_253B09150();
  sub_25346CAF4();
  sub_2534D8E14();
  v1();
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

uint64_t sub_2539D8E20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539D8F78(char a1)
{
  if (!a1) {
    return 0x65756C6176;
  }
  if (a1 == 1) {
    return 0x746567726174;
  }
  return 0x6E656D6574617473;
}

uint64_t sub_2539D8FD0()
{
  return sub_2539D8F78(*v0);
}

uint64_t sub_2539D8FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D8E20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D9000(uint64_t a1)
{
  unint64_t v2 = sub_2539F0B48();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D903C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0B48();
  return MEMORY[0x270FA00B8](a1, v2);
}

void TypeConversionRequest.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6E98);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0B48();
  sub_2534DA3BC();
  sub_253A3EE60();
  sub_2539E6F90((uint64_t)&qword_269CDBAB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for TypeConversionRequest(0);
    sub_253A3B8BC();
    sub_253B09150();
    sub_2539E6F90((uint64_t)&unk_269CE63D8);
    sub_2534F84DC();
    sub_253A3E0B4();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void TypeConversionRequest.init(from:)()
{
  sub_2534847F8();
  uint64_t v4 = v3;
  uint64_t v25 = v5;
  uint64_t v26 = sub_253B059D0();
  sub_253465998();
  uint64_t v24 = v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v27 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253483660();
  uint64_t v31 = sub_253B09150();
  sub_253465998();
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v10);
  sub_2534B33AC();
  uint64_t v11 = sub_253B09120();
  sub_253465998();
  uint64_t v29 = v12;
  MEMORY[0x270FA5388](v13);
  sub_2534AF2A0(v14, v24);
  uint64_t v33 = sub_253462A5C(&qword_269CE6EA8);
  sub_253465998();
  uint64_t v30 = v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v17 = sub_2534D8CAC();
  type metadata accessor for TypeConversionRequest(v17);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v18);
  sub_25347FAAC();
  sub_253A3BEA4(v4);
  sub_2539F0B48();
  uint64_t v34 = v1;
  sub_253B0A660();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
  }
  else
  {
    uint64_t v35 = v2;
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_253A3C6B8();
    sub_253B0A370();
    uint64_t v32 = v11;
    sub_25347FA84();
    v19();
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&unk_269CE63F0);
    sub_253A3E0CC();
    sub_253A3E478();
    sub_253A3E994();
    sub_25347FA84();
    v20();
    sub_253A3C6A0();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE28();
    sub_253B0A370();
    sub_25351C3E8();
    v21();
    uint64_t v22 = v35;
    sub_2534D8E14();
    v23();
    sub_2539DF660(v22, v25);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v4);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539D965C()
{
}

void sub_2539D9674()
{
}

uint64_t TypeConversionResult.value.getter()
{
  return sub_2539DE358();
}

uint64_t TypeConversionResult.value.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*TypeConversionResult.value.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionResult.statementId.getter()
{
  return sub_2539A3E30();
}

uint64_t TypeConversionResult.statementId.setter(uint64_t a1)
{
  return sub_2539A4674(a1, (uint64_t)type metadata accessor for TypeConversionResult, MEMORY[0x263F4BF98]);
}

uint64_t (*TypeConversionResult.statementId.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionResult.originStatementId.getter()
{
  return sub_2539C2A40();
}

uint64_t TypeConversionResult.originStatementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for TypeConversionResult, MEMORY[0x263F4BF98]);
}

uint64_t (*TypeConversionResult.originStatementId.modify())()
{
  return nullsub_1;
}

uint64_t TypeConversionResult.init(value:statementId:originStatementId:)()
{
  return sub_2539D9848();
}

uint64_t sub_2539D9848()
{
  sub_253A3C038();
  uint64_t v3 = v2;
  uint64_t v4 = sub_2539444B8();
  v5(v4);
  sub_25346CAF4();
  sub_2534D8E14();
  v6();
  uint64_t v7 = v1 + *(int *)(v3(0) + 20);
  uint64_t v8 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v19 = v9 + 32;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v20(v7, v0, v8);
  sub_253A3BEC0();
  return v13(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
}

uint64_t sub_2539D9934(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000253B110C0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539D9A94(char a1)
{
  if (!a1) {
    return 0x65756C6176;
  }
  if (a1 == 1) {
    return 0x6E656D6574617473;
  }
  return 0xD000000000000011;
}

uint64_t sub_2539D9AF4()
{
  return sub_2539D9A94(*v0);
}

uint64_t sub_2539D9AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539D9934(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539D9B24(uint64_t a1)
{
  unint64_t v2 = sub_2539F0B94();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539D9B60(uint64_t a1)
{
  unint64_t v2 = sub_2539F0B94();
  return MEMORY[0x270FA00B8](a1, v2);
}

void TypeConversionResult.encode(to:)()
{
  sub_2534847F8();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6EB0);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0B94();
  sub_2534DA3BC();
  sub_253A3EE60();
  sub_2539E6F90((uint64_t)&qword_269CDBAB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for TypeConversionResult(0);
    sub_253A3DA90();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
    sub_2534F84DC();
  }
  sub_2534D9A08();
  v2();
  sub_253A3C6AC();
  sub_2534847C8();
}

void TypeConversionResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v27 = sub_253A3F5D4(v2);
  sub_253465998();
  uint64_t v24 = v3;
  MEMORY[0x270FA5388](v4);
  v23[5] = (uint64_t)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v6);
  sub_2536D415C();
  uint64_t v7 = sub_253B09120();
  sub_253465998();
  uint64_t v25 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534AF2A0(v10, v23[0]);
  uint64_t v28 = sub_253462A5C(&qword_269CE6EC0);
  sub_253465998();
  uint64_t v26 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2534D9C00();
  uint64_t v14 = type metadata accessor for TypeConversionResult(v13);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = v1[3];
  sub_2534D9A50(v1);
  sub_2539F0B94();
  sub_253A3DB90();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v1);
  }
  else
  {
    sub_253A3F258();
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    sub_253A3CEC8();
    sub_25347FA84();
    v17();
    sub_25351C8C4();
    unint64_t v18 = sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3C9E4(v18);
    v23[2] = v7;
    v23[3] = v14;
    uint64_t v19 = v29;
    v23[1] = *(void *)(v24 + 32);
    sub_253A3C378();
    v20();
    sub_253A3C998();
    sub_2534D91AC();
    v21();
    sub_253A3C378();
    v22();
    sub_2539DF660(v19, v23[4]);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v16);
    sub_2539DF610();
  }
  sub_253578DEC();
  sub_2534847C8();
}

void sub_2539DA094()
{
}

void sub_2539DA0AC()
{
}

uint64_t (*QueryDecorationResult.spans.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationResult.requiredContext.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*QueryDecorationResult.requiredContext.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationResult.utteranceContext.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*QueryDecorationResult.utteranceContext.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationResult.toolRetrievalResponse.getter()
{
  return sub_2539A15D0();
}

uint64_t QueryDecorationResult.toolRetrievalResponse.setter(uint64_t a1)
{
  return sub_2539A1628(a1, (uint64_t)type metadata accessor for QueryDecorationResult, &qword_269CDBB30);
}

uint64_t (*QueryDecorationResult.toolRetrievalResponse.modify())()
{
  uint64_t v0 = sub_2534D9690();
  type metadata accessor for QueryDecorationResult(v0);
  sub_2535E2454();
  return nullsub_1;
}

uint64_t QueryDecorationResult.dynamicEnumerationEntities.getter()
{
  return sub_2539DA224();
}

uint64_t sub_2539DA224()
{
  uint64_t v0 = sub_253A3C384();
  v1(v0);
  return swift_bridgeObjectRetain();
}

uint64_t QueryDecorationResult.context.getter()
{
  return sub_2539CD758();
}

void QueryDecorationResult.init(spans:requiredContext:utteranceContext:toolRetrievalResponse:dynamicEnumerationEntities:context:)()
{
  sub_2534B3258();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_2535E2510();
  uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(v9);
  uint64_t v11 = (uint64_t)v4 + DecorationResult[7];
  uint64_t v12 = sub_253B08270();
  sub_25346CC08(v11, v13, v14, v12);
  *uint64_t v4 = v3;
  v4[1] = v2;
  v4[2] = v1;
  sub_2539F0BE0(v0, v11, &qword_269CDBB30);
  *(void *)((char *)v4 + DecorationResult[8]) = v8;
  *(void *)((char *)v4 + DecorationResult[9]) = v6;
  sub_253465A14();
}

uint64_t sub_2539DA2FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E617073 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6465726975716572 && a2 == 0xEF747865746E6F43;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B0BD90 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x8000000253B0E060 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000253B0E080 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 5;
      }
      else {
        return 6;
      }
    }
  }
}

unint64_t sub_2539DA57C(char a1)
{
  unint64_t result = 0x736E617073;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6465726975716572;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unint64_t result = 0x747865746E6F63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539DA664()
{
  return sub_2539DA57C(*v0);
}

uint64_t sub_2539DA66C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DA2FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DA694(uint64_t a1)
{
  unint64_t v2 = sub_2539F0C28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DA6D0(uint64_t a1)
{
  unint64_t v2 = sub_2539F0C28();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryDecorationResult.encode(to:)()
{
  sub_2534847F8();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6EC8);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0C28();
  sub_2534DA3BC();
  sub_253462A5C(&qword_269CDB548);
  sub_2539F0538();
  sub_2534DA628();
  if (!v0)
  {
    sub_253A3D3B4();
    sub_253462A5C(&qword_269CE6D20);
    sub_2539F030C();
    sub_2534F84DC();
    sub_253A3D2AC();
    sub_2534F84DC();
    type metadata accessor for QueryDecorationResult(0);
    sub_253B08270();
    sub_2539E6F90((uint64_t)&unk_269CE6ED8);
    sub_253A3EE1C();
    sub_253A3BCCC();
    sub_253462A5C(&qword_269CE6EE0);
    sub_2539F0C74();
    sub_2534DA628();
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_253A3C6AC();
  sub_2534847C8();
}

void QueryDecorationResult.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2534847F8();
  uint64_t v13 = v12;
  uint64_t v25 = v14;
  uint64_t v15 = sub_253462A5C(&qword_269CDBB30);
  uint64_t v16 = sub_25346CB4C(v15);
  MEMORY[0x270FA5388](v16);
  sub_2534847E0();
  sub_253462A5C(&qword_269CE6EF8);
  sub_253465998();
  MEMORY[0x270FA5388](v17);
  uint64_t v18 = sub_2534B33AC();
  type metadata accessor for QueryDecorationResult(v18);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v19);
  sub_253A3E814();
  uint64_t v26 = v20;
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t)v21 + *(int *)(v20 + 28);
  sub_253B08270();
  sub_253A3CC78(v23);
  sub_253A3BCFC(v13);
  sub_2539F0C28();
  sub_253A3F4F4();
  if (v10)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v13);
    sub_253472458(v23, &qword_269CDBB30);
  }
  else
  {
    sub_253462A5C(&qword_269CDB548);
    sub_2539F05DC();
    sub_253A3C6C4();
    sub_2534F8908();
    *uint64_t v22 = a10;
    sub_253462A5C(&qword_269CE6D20);
    sub_253A3D3B4();
    sub_2539F03B0();
    sub_2534F8908();
    v22[1] = a10;
    sub_253A3D2AC();
    sub_2534F8908();
    void v22[2] = a10;
    LOBYTE(a10) = 3;
    sub_2539E6F90((uint64_t)&unk_269CE6F00);
    sub_253A3EE1C();
    sub_253B0A310();
    sub_2539F0BE0(v11, v23, &qword_269CDBB30);
    sub_253462A5C(&qword_269CE6EE0);
    sub_2539F0D18();
    sub_253A3C6C4();
    sub_2534F8908();
    *(void *)((char *)v22 + *(int *)(v26 + 32)) = a10;
    sub_253A3E020();
    sub_2534F8908();
    sub_2534659CC();
    v24();
    *(void *)((char *)v22 + *(int *)(v26 + 36)) = a10;
    sub_2539DF660((uint64_t)v22, v25);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v13);
    sub_2539DF610();
  }
  sub_2534F8590();
  sub_2534847C8();
}

void sub_2539DAD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  QueryDecorationResult.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8);
}

void sub_2539DADA8()
{
}

uint64_t QueryDecorationPrePlannerResult.statementId.getter()
{
  return sub_2539DE358();
}

uint64_t QueryDecorationPrePlannerResult.statementId.setter()
{
  return sub_2539DE3D0();
}

uint64_t (*QueryDecorationPrePlannerResult.statementId.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationPrePlannerResult.dataSource.getter()
{
  return sub_2539B52EC();
}

uint64_t QueryDecorationPrePlannerResult.dataSource.setter(uint64_t a1, uint64_t a2)
{
  return sub_2539C37EC(a1, a2);
}

uint64_t (*QueryDecorationPrePlannerResult.dataSource.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationPrePlannerResult.payload.getter()
{
  uint64_t v1 = sub_2534F8A1C();
  type metadata accessor for QueryDecorationPrePlannerResult(v1);
  sub_253A3DB04();
  uint64_t v3 = *v2;
  LOBYTE(v2) = *((unsigned char *)v2 + 8);
  *(void *)uint64_t v0 = v3;
  *(unsigned char *)(v0 + 8) = (_BYTE)v2;
  return swift_bridgeObjectRetain();
}

uint64_t QueryDecorationPrePlannerResult.payload.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = v1 + *(int *)(type metadata accessor for QueryDecorationPrePlannerResult(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 8) = v3;
  return result;
}

uint64_t (*QueryDecorationPrePlannerResult.payload.modify())()
{
  return nullsub_1;
}

uint64_t QueryDecorationPrePlannerResult.init(statementId:dataSource:payload:)()
{
  sub_253A3F73C();
  uint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 8);
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v3();
  uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
  uint64_t result = sub_253A3E2E4(DecorationPrePlannerResult);
  *(void *)uint64_t v6 = v1;
  *(unsigned char *)(v6 + 8) = v2;
  return result;
}

uint64_t static QueryDecorationPrePlannerResultPayload.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      if (v2 != 1) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2534B5D10();
      goto LABEL_16;
    case 2:
      if (v2 != 2) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2534BAB48();
      goto LABEL_16;
    case 3:
      if (v2 != 3) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2534B57F8();
      goto LABEL_16;
    case 4:
      if (v2 != 4) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2534B9708();
      goto LABEL_16;
    case 5:
      if (v2 != 5) {
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2534BAB90();
LABEL_16:
      char v7 = v6;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = v7 & 1;
      break;
    default:
      if (*(unsigned char *)(a2 + 8))
      {
LABEL_17:
        uint64_t result = 0;
      }
      else
      {
        char v3 = (void *)sub_2534ACF74();
        uint64_t result = sub_2534B5C40(v3, v4);
      }
      break;
  }
  return result;
}

uint64_t sub_2539DB144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x72756F5361746164 && a2 == 0xEA00000000006563;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_253B0A4C0();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_2539DB2B8(char a1)
{
  if (!a1) {
    return 0x6E656D6574617473;
  }
  if (a1 == 1) {
    return 0x72756F5361746164;
  }
  return 0x64616F6C796170;
}

uint64_t sub_2539DB31C()
{
  return sub_2539DB2B8(*v0);
}

uint64_t sub_2539DB324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DB144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DB34C(uint64_t a1)
{
  unint64_t v2 = sub_2539F0DBC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DB388(uint64_t a1)
{
  unint64_t v2 = sub_2539F0DBC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryDecorationPrePlannerResult.encode(to:)()
{
  sub_2535B45A0();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE6F18);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F0DBC();
  sub_2534DA3BC();
  sub_253A3CA58();
  sub_2539E6F90((uint64_t)&qword_269CDBFB8);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for QueryDecorationPrePlannerResult(0);
    sub_253A3BC14();
    sub_253A3CE44();
    sub_2539F0E08();
    sub_2534F84DC();
  }
  uint64_t v2 = sub_2534F82A4();
  v3(v2);
  sub_2534F8864();
  sub_2535B4660();
}

void QueryDecorationPrePlannerResult.init(from:)()
{
  sub_2534847F8();
  uint64_t v2 = v1;
  uint64_t v24 = v3;
  sub_253B059D0();
  sub_253465998();
  uint64_t v26 = v4;
  MEMORY[0x270FA5388](v5);
  sub_2534AF2A0(v6, v21);
  uint64_t v27 = sub_253462A5C(&qword_269CE6F30);
  sub_253465998();
  uint64_t v25 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v9 = sub_25349888C();
  uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(v9);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253472068(v2, v2[3]);
  sub_2539F0DBC();
  sub_253A3E4D8();
  if (v0)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
  }
  else
  {
    uint64_t v23 = DecorationPrePlannerResult;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3C6B8();
    sub_253A3E5E0();
    sub_253A3DB68();
    uint64_t v22 = v13;
    sub_25347FA84();
    v14();
    sub_253A3CA94();
    uint64_t v15 = sub_253B0A320();
    uint64_t v16 = (uint64_t *)&v22[*(int *)(v23 + 20)];
    *uint64_t v16 = v15;
    v16[1] = v17;
    sub_253A3C6A0();
    sub_2539F0E54();
    sub_253B0A370();
    sub_2534DA4BC();
    v18();
    char v19 = v29;
    uint64_t v20 = &v22[*(int *)(v23 + 24)];
    *(void *)uint64_t v20 = v28;
    v20[8] = v19;
    sub_253A3F698();
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v2);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

uint64_t sub_2539DB7EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73676E69727473 && a2 == 0xE700000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C61566465707974 && a2 == 0xEB00000000736575;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x8000000253B11050 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000016 && a2 == 0x8000000253B11070 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 0x6576656972746572 && a2 == 0xEE00736C6F6F5464;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x8000000253B11090)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else
      {
        char v8 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v8) {
          return 5;
        }
        else {
          return 6;
        }
      }
    }
  }
}

uint64_t sub_2539DBA8C()
{
  return 6;
}

unint64_t sub_2539DBA94(char a1)
{
  unint64_t result = 0x73676E69727473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C61566465707974;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0x6576656972746572;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2539DBB80(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    sub_25351C8D0();
    sub_2534F8940();
    char v4 = v2 ^ 1;
  }
  return v4 & 1;
}

void sub_2539DBBE0()
{
}

void sub_2539DBBF8()
{
}

unint64_t sub_2539DBC18()
{
  return sub_2539DBA94(*v0);
}

uint64_t sub_2539DBC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DB7EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DBC48@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2539DBA8C();
  *a1 = result;
  return result;
}

uint64_t sub_2539DBC70(uint64_t a1)
{
  unint64_t v2 = sub_2539F0EA0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBCAC(uint64_t a1)
{
  unint64_t v2 = sub_2539F0EA0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBCE8(uint64_t a1)
{
  unint64_t v2 = sub_2539F1028();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBD24(uint64_t a1)
{
  unint64_t v2 = sub_2539F1028();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBD60(uint64_t a1)
{
  unint64_t v2 = sub_2539F1074();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBD9C(uint64_t a1)
{
  unint64_t v2 = sub_2539F1074();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBDD8(uint64_t a1)
{
  unint64_t v2 = sub_2539F0FDC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBE14(uint64_t a1)
{
  unint64_t v2 = sub_2539F0FDC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBE50(uint64_t a1)
{
  unint64_t v2 = sub_2539F11B0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBE8C(uint64_t a1)
{
  unint64_t v2 = sub_2539F11B0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DBB80(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2539DBEF4(uint64_t a1)
{
  unint64_t v2 = sub_2539F0EEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBF30(uint64_t a1)
{
  unint64_t v2 = sub_2539F0EEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DBF6C(uint64_t a1)
{
  unint64_t v2 = sub_2539F1164();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DBFA8(uint64_t a1)
{
  unint64_t v2 = sub_2539F1164();
  return MEMORY[0x270FA00B8](a1, v2);
}

void QueryDecorationPrePlannerResultPayload.encode(to:)()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_253462A5C(&qword_269CE6F40);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_25347FA68(v5, v20);
  sub_253462A5C(&qword_269CE6F48);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534D8F68(v7, v21);
  sub_253462A5C(&qword_269CE6F50);
  sub_253465998();
  MEMORY[0x270FA5388](v8);
  sub_2534D929C(v9, v22);
  sub_253462A5C(&qword_269CE6F58);
  sub_253465998();
  MEMORY[0x270FA5388](v10);
  sub_2534D9BAC(v11, v23);
  sub_253462A5C(&qword_269CE6F60);
  sub_253465998();
  MEMORY[0x270FA5388](v12);
  sub_25347FAAC();
  sub_253462A5C(&qword_269CE6F68);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_2534B3294();
  sub_253462A5C(&qword_269CE6F70);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_25346CC6C();
  uint64_t v15 = *(unsigned __int8 *)(v1 + 8);
  sub_253A3B978(v3);
  sub_2539F0EA0();
  sub_253A3E178();
  sub_253B0A680();
  switch(v15)
  {
    case 1:
      sub_2539F1164();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CDF1B8);
      sub_2539EE438();
      sub_253A3EDF0();
      sub_253B0A440();
      goto LABEL_9;
    case 2:
      sub_2539F1074();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CDB9F0);
      sub_2539F10C0();
      sub_253A3EDF0();
      sub_253A3C76C();
      goto LABEL_8;
    case 3:
      sub_2539F1028();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CDB548);
      sub_2539F0538();
      sub_253A3EDF0();
      sub_253A3C76C();
      goto LABEL_8;
    case 4:
      sub_2539F0FDC();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CE6DB8);
      sub_2539F06CC();
      sub_253A3C76C();
      goto LABEL_8;
    case 5:
      sub_2539F0EEC();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CE6F88);
      sub_2539F0F38();
      sub_253A3C76C();
LABEL_8:
      sub_253A3D000();
LABEL_9:
      sub_2534659CC();
      v19();
      uint64_t v17 = sub_2535B4148();
      break;
    default:
      sub_2539F11B0();
      sub_253A3C04C();
      sub_253A3DC08();
      sub_253462A5C(&qword_269CDC550);
      sub_2535443D4((uint64_t)&qword_269CDDF80);
      sub_253A3EDF0();
      sub_253B0A440();
      sub_2534F83C0();
      sub_2534659CC();
      v16();
      uint64_t v17 = sub_2535791D8();
      break;
  }
  v18(v17);
  sub_2534F8A10();
  sub_2534847C8();
}

void QueryDecorationPrePlannerResultPayload.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v38 = v4;
  sub_253462A5C(&qword_269CE6FC8);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534D8F84(v6, v33);
  sub_253462A5C(&qword_269CE6FD0);
  sub_253465998();
  MEMORY[0x270FA5388](v7);
  sub_2534B33C8(v8, v34);
  sub_253462A5C(&qword_269CE6FD8);
  sub_253465998();
  MEMORY[0x270FA5388](v9);
  sub_25347FA68(v10, v35);
  sub_253462A5C(&qword_269CE6FE0);
  sub_253465998();
  MEMORY[0x270FA5388](v11);
  sub_253483628(v12, v36);
  sub_253462A5C(&qword_269CE6FE8);
  sub_253465998();
  MEMORY[0x270FA5388](v13);
  sub_25346CC6C();
  sub_253462A5C(&qword_269CE6FF0);
  sub_253465998();
  MEMORY[0x270FA5388](v14);
  sub_2534966B0();
  uint64_t v15 = sub_253462A5C(&qword_269CE6FF8);
  sub_253465998();
  MEMORY[0x270FA5388](v16);
  sub_25347FAAC();
  unint64_t v17 = *(void *)(v3 + 32);
  uint64_t v39 = v3;
  sub_253A3BED4();
  sub_2539F0EA0();
  sub_253B0A660();
  if (!v0)
  {
    uint64_t v18 = sub_253B0A390();
    if (*(void *)(v18 + 16)
      && (sub_2534D96C0(),
          uint64_t v37 = *(unsigned __int8 *)(v18 + 32),
          sub_25347B78C(1, v19, v18, v18 + 32, 0, v20),
          uint64_t v22 = v21,
          unint64_t v17 = (unint64_t)v23,
          swift_bridgeObjectRelease(),
          v22 == v17 >> 1))
    {
      switch(v37)
      {
        case 1:
          sub_2539F1164();
          sub_253A3BD40();
          uint64_t v24 = sub_253462A5C(&qword_269CDF1B8);
          sub_2539EE4DC();
          sub_253A3BF54();
          sub_253A3C198();
          sub_253A3E184();
          goto LABEL_13;
        case 2:
          sub_2539F1074();
          sub_253A3BD40();
          sub_253462A5C(&qword_269CDB9F0);
          sub_2539F12A0();
          sub_253A3BF54();
          sub_253A3C198();
          sub_2534659CC();
          v29();
          swift_unknownObjectRelease();
          sub_253971C3C();
          sub_2534659CC();
          v30();
          goto LABEL_15;
        case 3:
          sub_2539F1028();
          sub_253A3BD40();
          uint64_t v24 = sub_253462A5C(&qword_269CDB548);
          sub_2539F05DC();
          sub_253A3BF54();
          sub_253A3C198();
          sub_253A3E184();
          goto LABEL_13;
        case 4:
          sub_2539F0FDC();
          sub_253A3BD40();
          uint64_t v24 = sub_253462A5C(&qword_269CE6DB8);
          sub_2539F084C();
          sub_253A3BF54();
          sub_253A3C198();
          sub_253A3E184();
          goto LABEL_13;
        case 5:
          sub_2539F0EEC();
          sub_253B0A2C0();
          uint64_t v24 = sub_253462A5C(&qword_269CE6F88);
          sub_2539F11FC();
          sub_253A3BF54();
          sub_253B0A370();
          sub_253A3E184();
          sub_253A3D55C();
          goto LABEL_14;
        default:
          sub_2539F11B0();
          sub_253A3BD40();
          uint64_t v24 = sub_253462A5C(&qword_269CDC550);
          sub_2535443D4((uint64_t)&qword_269CDE0C0);
          sub_253A3BF54();
          sub_253A3C198();
          sub_253A3E184();
LABEL_13:
          sub_253A3D000();
LABEL_14:
          sub_2534659CC();
          v31();
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v1, v15);
LABEL_15:
          sub_253A3D888();
          sub_253A3F0E0();
          *(unsigned char *)(v38 + 8) = v32;
          break;
      }
    }
    else
    {
      sub_253B0A090();
      sub_2534D969C();
      sub_253A3F098();
      sub_253462A5C(&qword_269CDB688);
      sub_253A3ED24();
      *(void *)unint64_t v17 = &type metadata for QueryDecorationPrePlannerResultPayload;
      sub_253B0A2D0();
      sub_2534F8464();
      sub_25347B88C();
      uint64_t v25 = sub_2534F859C();
      v26(v25);
      swift_willThrow();
      swift_unknownObjectRelease();
      uint64_t v27 = sub_253A3D03C();
      v28(v27);
    }
  }
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v39);
  sub_2534847C8();
}

void sub_2539DCC40()
{
}

void sub_2539DCC58()
{
}

uint64_t UndoOperation.hash(into:)()
{
  return sub_253B0A600();
}

uint64_t sub_2539DCCA4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1868852853 && a2 == 0xE400000000000000;
  if (v3 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1868850546 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = sub_253B0A4C0();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2539DCD70(char a1)
{
  if (a1) {
    return 1868850546;
  }
  else {
    return 1868852853;
  }
}

uint64_t sub_2539DCD8C()
{
  return sub_2539DCD70(*v0);
}

uint64_t sub_2539DCD94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DCCA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DCDBC(uint64_t a1)
{
  unint64_t v2 = sub_2539F1344();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DCDF8(uint64_t a1)
{
  unint64_t v2 = sub_2539F1344();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DCE34(uint64_t a1)
{
  unint64_t v2 = sub_2539F1390();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DCE70(uint64_t a1)
{
  unint64_t v2 = sub_2539F1390();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2539DCEAC(uint64_t a1)
{
  unint64_t v2 = sub_2539F13DC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DCEE8(uint64_t a1)
{
  unint64_t v2 = sub_2539F13DC();
  return MEMORY[0x270FA00B8](a1, v2);
}

void UndoOperation.encode(to:)()
{
  sub_2534847F8();
  sub_253A3E9D8();
  sub_253462A5C(&qword_269CE7010);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_2534AF2A0(v3, v9);
  sub_253462A5C(&qword_269CE7018);
  sub_253465998();
  MEMORY[0x270FA5388](v4);
  sub_2534B34A4();
  sub_253462A5C(&qword_269CE7020);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_2534966B0();
  char v6 = *v0;
  sub_253A3BCFC(v1);
  sub_2539F1344();
  sub_253B0A680();
  if (v6)
  {
    sub_2539F1390();
    sub_253A3C04C();
    sub_2534F83C0();
  }
  else
  {
    sub_2539F13DC();
    sub_253A3C04C();
    sub_2534D9AD0();
  }
  sub_2534659CC();
  v7();
  sub_2535791D8();
  sub_2534B3470();
  v8();
  sub_253A3F5C8();
  sub_2534847C8();
}

uint64_t UndoOperation.hashValue.getter()
{
  return sub_253B0A630();
}

void UndoOperation.init(from:)()
{
  sub_2534847F8();
  uint64_t v3 = v2;
  uint64_t v26 = v4;
  sub_253462A5C(&qword_269CE7040);
  sub_253465998();
  MEMORY[0x270FA5388](v5);
  sub_253465A3C();
  sub_253462A5C(&qword_269CE7048);
  sub_253465998();
  MEMORY[0x270FA5388](v6);
  sub_2534835B0();
  uint64_t v7 = sub_253462A5C(&qword_269CE7050);
  sub_253465998();
  uint64_t v27 = v8;
  MEMORY[0x270FA5388](v9);
  sub_2534B3294();
  sub_2534D9A50(v3);
  sub_2539F1344();
  sub_253A3BAF0();
  if (v0) {
    goto LABEL_8;
  }
  uint64_t v28 = (uint64_t)v3;
  uint64_t v10 = sub_253B0A390();
  if (!*(void *)(v10 + 16)
    || (sub_2534D96C0(),
        char v11 = *(unsigned char *)(v10 + 32),
        sub_25347B78C(1, v12, v10, v10 + 32, 0, v13),
        uint64_t v15 = v14,
        unint64_t v17 = v16,
        swift_bridgeObjectRelease(),
        v15 != v17 >> 1))
  {
    sub_253B0A090();
    sub_2534D969C();
    uint64_t v20 = v19;
    sub_253462A5C(&qword_269CDB688);
    *uint64_t v20 = &type metadata for UndoOperation;
    sub_253B0A2D0();
    sub_2534D8FF4();
    sub_25347B88C();
    sub_25346CCF8();
    v21();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_2534659CC();
    v22();
    uint64_t v3 = (void *)v28;
LABEL_8:
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v3);
    goto LABEL_9;
  }
  if (v11)
  {
    sub_2539F1390();
    sub_253B0A2C0();
    uint64_t v18 = v26;
    sub_2534659CC();
    v23();
    swift_unknownObjectRelease();
    sub_2536D5500();
    sub_2534D9220();
    v24();
  }
  else
  {
    sub_2539F13DC();
    sub_253B0A2C0();
    uint64_t v18 = v26;
    sub_2534D8E50();
    sub_2534659CC();
    v25();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v1, v7);
  }
  *uint64_t v18 = v11;
  _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v28);
LABEL_9:
  sub_2536D4C48();
  sub_2534847C8();
}

void sub_2539DD4E0()
{
}

void sub_2539DD4F8()
{
}

uint64_t (*UndoRedoRequest.bundleIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t UndoRedoRequest.token.getter()
{
  return sub_2539A9600();
}

uint64_t UndoRedoRequest.token.setter()
{
  return sub_2539A9658();
}

uint64_t (*UndoRedoRequest.token.modify())()
{
  return nullsub_1;
}

uint64_t UndoRedoRequest.operation.getter()
{
  uint64_t v2 = sub_2534F8A1C();
  uint64_t result = type metadata accessor for UndoRedoRequest(v2);
  unsigned char *v0 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t UndoRedoRequest.operation.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for UndoRedoRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*UndoRedoRequest.operation.modify())()
{
  return nullsub_1;
}

uint64_t UndoRedoRequest.statementId.getter()
{
  return sub_2539C5638();
}

uint64_t UndoRedoRequest.statementId.setter()
{
  return sub_2539C56B8();
}

uint64_t (*UndoRedoRequest.statementId.modify())()
{
  return nullsub_1;
}

uint64_t UndoRedoRequest.statementIdForUndo.getter()
{
  return sub_2539A48E4((void (*)(void))type metadata accessor for UndoRedoRequest, (uint64_t)&qword_269CDB460, (uint64_t (*)(void))sub_253961F60);
}

uint64_t UndoRedoRequest.statementIdForUndo.setter(uint64_t a1)
{
  return sub_2539A4978(a1, (void (*)(void))type metadata accessor for UndoRedoRequest, (uint64_t)&qword_269CDB460, (uint64_t (*)(uint64_t))sub_2539F0BE0);
}

uint64_t (*UndoRedoRequest.statementIdForUndo.modify())()
{
  return nullsub_1;
}

void UndoRedoRequest.init(bundleIdentifier:token:operation:statementId:statementIdForUndo:)()
{
  sub_2535E2390();
  uint64_t v20 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = *v10;
  type metadata accessor for UndoRedoRequest(0);
  sub_253A3D3D4();
  uint64_t v13 = (uint64_t)v9 + v12;
  uint64_t v14 = sub_253B055C0();
  sub_25346CC08(v13, v15, v16, v14);
  uint64_t v17 = (uint64_t)v9 + *(int *)(v0 + 32);
  uint64_t v18 = sub_253B059D0();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v17, 1, 1, v18);
  *uint64_t v9 = v7;
  v9[1] = v5;
  sub_2539F0BE0(v3, v13, (uint64_t *)&unk_26B248CB0);
  *((unsigned char *)v9 + *(int *)(v0 + 24)) = v11;
  sub_25347B88C();
  sub_2534D8E14();
  v19();
  sub_2539F0BE0(v20, v17, &qword_269CDB460);
  sub_2535E2374();
}

uint64_t sub_2539DD854(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000253B11110 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6E656B6F74 && a2 == 0xE500000000000000;
    if (v5 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL;
      if (v6 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v7 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
        if (v7 || (sub_253B0A4C0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x8000000253B13B40)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v8 = sub_253B0A4C0();
          swift_bridgeObjectRelease();
          if (v8) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

unint64_t sub_2539DDA7C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E656B6F74;
      break;
    case 2:
      unint64_t result = 0x6F6974617265706FLL;
      break;
    case 3:
      unint64_t result = 0x6E656D6574617473;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539DDB38()
{
  return sub_2539DDA7C(*v0);
}

uint64_t sub_2539DDB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DD854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DDB68(uint64_t a1)
{
  unint64_t v2 = sub_2539F1428();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DDBA4(uint64_t a1)
{
  unint64_t v2 = sub_2539F1428();
  return MEMORY[0x270FA00B8](a1, v2);
}

void UndoRedoRequest.encode(to:)()
{
  sub_2534847F8();
  sub_253A3BD30();
  sub_253462A5C(&qword_269CE7058);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F1428();
  sub_2534DA3BC();
  sub_25397F5D0();
  if (!v0)
  {
    type metadata accessor for UndoRedoRequest(0);
    sub_253A3E2C0();
    sub_253B055C0();
    sub_2539E6F90((uint64_t)&qword_26B248CA0);
    sub_253A3C9CC();
    sub_253A3D2B8();
    sub_25394871C();
    sub_25397F654();
    sub_253A3E060();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_25397F654();
    sub_253A3C9CC();
  }
  sub_2534D9A08();
  v2();
  sub_253578DEC();
  sub_2534847C8();
}

void UndoRedoRequest.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  sub_2534847F8();
  uint64_t v17 = v16;
  uint64_t v52 = v18;
  uint64_t v19 = sub_253462A5C(&qword_269CDB460);
  uint64_t v20 = sub_25346CB4C(v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v53 = (char *)v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_253B059D0();
  sub_253465998();
  uint64_t v55 = v23;
  MEMORY[0x270FA5388](v24);
  sub_2534847E0();
  uint64_t v25 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v26 = sub_25346CB4C(v25);
  MEMORY[0x270FA5388](v26);
  sub_2534966B0();
  uint64_t v57 = sub_253462A5C(&qword_269CE7068);
  sub_253465998();
  uint64_t v54 = v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v29 = sub_2534D9C00();
  uint64_t v30 = type metadata accessor for UndoRedoRequest(v29);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v31);
  sub_2534B3294();
  uint64_t v33 = (uint64_t)v13 + *(int *)(v32 + 20);
  uint64_t v34 = sub_253B055C0();
  uint64_t v60 = v33;
  uint64_t v35 = sub_253A3E620();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v35, v36, v37, v34);
  uint64_t v61 = v30;
  uint64_t v38 = *(int *)(v30 + 32);
  uint64_t v63 = v13;
  uint64_t v58 = (uint64_t)v13 + v38;
  uint64_t v56 = v22;
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13 + v38, 1, 1, v22);
  uint64_t v39 = v17[3];
  uint64_t v59 = v17;
  sub_253472068(v17, v39);
  sub_2539F1428();
  sub_253A3E544();
  sub_253B0A660();
  if (v12)
  {
    uint64_t v41 = v58;
    uint64_t v42 = v60;
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v59);
    sub_253472458(v42, (uint64_t *)&unk_26B248CB0);
    sub_253472458(v41, &qword_269CDB460);
  }
  else
  {
    uint64_t v62 = v14;
    sub_253A3EE54();
    uint64_t v40 = sub_253B0A320();
    uint64_t v43 = v63;
    *uint64_t v63 = v40;
    v43[1] = v44;
    sub_25351C8C4();
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253B0A310();
    uint64_t v45 = v61;
    sub_2539F0BE0(v15, v60, (uint64_t *)&unk_26B248CB0);
    sub_253A3D2B8();
    sub_253948D0C();
    sub_253B0A370();
    uint64_t v46 = (uint64_t)v63;
    *((unsigned char *)v63 + *(int *)(v45 + 24)) = a12;
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EE34();
    sub_253A3E020();
    v51[1] = v47;
    sub_253B0A370();
    sub_25347FA84();
    v48();
    uint64_t v49 = (uint64_t)v53;
    sub_253A3D8B8();
    sub_253B0A310();
    sub_2534B3470();
    v50();
    sub_2539F0BE0(v49, v58, &qword_269CDB460);
    sub_2539DF660(v46, v52);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0((uint64_t)v59);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539DE308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  UndoRedoRequest.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, vars8[4], vars8[5]);
}

void sub_2539DE320()
{
}

uint64_t ClientUndoRedoRequest.token.getter()
{
  return sub_2539DE358();
}

uint64_t sub_2539DE358()
{
  uint64_t v0 = sub_2534F8A1C();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_2534ACF74();
  return v3(v2);
}

uint64_t ClientUndoRedoRequest.token.setter()
{
  return sub_2539DE3D0();
}

uint64_t sub_2539DE3D0()
{
  uint64_t v0 = sub_2534D9690();
  v1(v0);
  sub_25346CAF4();
  uint64_t v2 = sub_25349C5EC();
  return v3(v2);
}

uint64_t (*ClientUndoRedoRequest.token.modify())()
{
  return nullsub_1;
}

uint64_t ClientUndoRedoRequest.operation.getter()
{
  uint64_t v2 = sub_2534F8A1C();
  uint64_t result = type metadata accessor for ClientUndoRedoRequest(v2);
  unsigned char *v0 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t ClientUndoRedoRequest.operation.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ClientUndoRedoRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*ClientUndoRedoRequest.operation.modify())()
{
  return nullsub_1;
}

uint64_t ClientUndoRedoRequest.statementId.getter()
{
  return sub_2539C2A40();
}

uint64_t ClientUndoRedoRequest.statementId.setter(uint64_t a1)
{
  return sub_2539C2AD8(a1, (uint64_t)type metadata accessor for ClientUndoRedoRequest, MEMORY[0x263F4BF98]);
}

uint64_t (*ClientUndoRedoRequest.statementId.modify())()
{
  return nullsub_1;
}

uint64_t ClientUndoRedoRequest.statementIdForUndo.getter()
{
  return sub_2539A15D0();
}

uint64_t ClientUndoRedoRequest.statementIdForUndo.setter(uint64_t a1)
{
  return sub_2539A1628(a1, (uint64_t)type metadata accessor for ClientUndoRedoRequest, &qword_269CDB460);
}

uint64_t (*ClientUndoRedoRequest.statementIdForUndo.modify())()
{
  return nullsub_1;
}

void ClientUndoRedoRequest.init(token:operation:statementId:statementIdForUndo:)()
{
  sub_2535B3C98();
  sub_253A3F5A0();
  char v3 = *v2;
  uint64_t v4 = type metadata accessor for ClientUndoRedoRequest(0);
  uint64_t v5 = v1 + *(int *)(v4 + 28);
  sub_253B059D0();
  sub_253A3D5E8(v5);
  sub_253B055C0();
  sub_25346CAF4();
  sub_2534D8E14();
  v6();
  *(unsigned char *)(v1 + *(int *)(v4 + 20)) = v3;
  sub_25347B88C();
  sub_2534D8E14();
  v7();
  sub_2539F0BE0(v0, v5, &qword_269CDB460);
  sub_25346CD04();
}

uint64_t sub_2539DE6E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656B6F74 && a2 == 0xE500000000000000;
  if (v2 || (sub_253B0A4C0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL;
    if (v6 || (sub_253B0A4C0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6E656D6574617473 && a2 == 0xEB00000000644974;
      if (v7 || (sub_253B0A4C0() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000012 && a2 == 0x8000000253B13B40)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = sub_253B0A4C0();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

unint64_t sub_2539DE8B0(char a1)
{
  unint64_t result = 0x6E656B6F74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F6974617265706FLL;
      break;
    case 2:
      unint64_t result = 0x6E656D6574617473;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_2539DE950()
{
  return sub_2539DE8B0(*v0);
}

uint64_t sub_2539DE958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2539DE6E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2539DE980(uint64_t a1)
{
  unint64_t v2 = sub_2539F1474();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DE9BC(uint64_t a1)
{
  unint64_t v2 = sub_2539F1474();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ClientUndoRedoRequest.encode(to:)()
{
  sub_2534847F8();
  sub_2534F8530();
  sub_253462A5C(&qword_269CE7070);
  sub_253465998();
  MEMORY[0x270FA5388](v1);
  sub_25397F66C();
  sub_2539F1474();
  sub_2534DA3BC();
  sub_253A3DA50();
  sub_2539E6F90((uint64_t)&qword_26B248CA0);
  sub_253A3B6D0();
  if (!v0)
  {
    type metadata accessor for ClientUndoRedoRequest(0);
    sub_253A3CF40();
    sub_25394871C();
    sub_2534F84DC();
    sub_253A3E0A4();
    sub_253B059D0();
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2534F84DC();
    sub_253A3BCCC();
  }
  sub_2534D9A08();
  v2();
  sub_253A3C6AC();
  sub_2534847C8();
}

void ClientUndoRedoRequest.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_2534847F8();
  uint64_t v15 = v14;
  uint64_t v35 = v16;
  uint64_t v17 = sub_253462A5C(&qword_269CDB460);
  uint64_t v18 = sub_25346CB4C(v17);
  MEMORY[0x270FA5388](v18);
  sub_253A3D798(v19, v33);
  sub_253B059D0();
  sub_253465998();
  MEMORY[0x270FA5388](v20);
  sub_253A3C504();
  sub_253465998();
  MEMORY[0x270FA5388](v21);
  sub_2534B33C8(v22, v34);
  sub_253462A5C(&qword_269CE7080);
  sub_253465998();
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = sub_2534D9B74();
  uint64_t v25 = type metadata accessor for ClientUndoRedoRequest(v24);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v26);
  sub_2534B3294();
  uint64_t v37 = v13 + *(int *)(v27 + 28);
  sub_253A3CC78(v37);
  uint64_t v28 = (void *)sub_253A3D524();
  sub_253472068(v28, v29);
  sub_2539F1474();
  sub_253B0A660();
  if (v12)
  {
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v15);
    sub_253472458(v37, &qword_269CDB460);
  }
  else
  {
    sub_2539E6F90((uint64_t)&qword_269CDBCC8);
    sub_253A3C6B8();
    sub_253B0A370();
    sub_253A3DB68();
    sub_25347FA84();
    v30();
    sub_253A3CF40();
    sub_253948D0C();
    sub_253B0A370();
    *(unsigned char *)(v13 + *(int *)(v25 + 20)) = a12;
    sub_253A3D2B8();
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_253A3EF04();
    sub_253B0A370();
    sub_253A3CF28();
    sub_25347FA84();
    v31();
    sub_253A3EF04();
    sub_253B0A310();
    sub_2534F85D4();
    v32();
    sub_2539F0BE0(v36, v37, &qword_269CDB460);
    sub_2539DF660(v13, v35);
    _s30IntelligenceFlowPlannerSupport26AnySessionInjectionContextVwxx_0(v15);
    sub_2539DF610();
  }
  sub_2534F856C();
  sub_2534847C8();
}

void sub_2539DF030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ClientUndoRedoRequest.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4], vars8[6]);
}

void sub_2539DF048()
{
}

uint64_t sub_2539DF06C(uint64_t a1)
{
  unint64_t v2 = sub_2539F14C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2539DF0A8(uint64_t a1)
{
  unint64_t v2 = sub_2539F14C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void ContinuePlanning.encode(to:)()
{
}

void sub_2539DF120()
{
  sub_2534847F8();
  sub_253A3F594();
  sub_253A3D9E4();
  sub_253462A5C(v1);
  sub_253465998();
  MEMORY[0x270FA5388](v2);
  sub_25346CC6C();
  char v3 = (void *)sub_253578E40();
  sub_253472068(v3, v4);
  v0();
  sub_253B0A680();
  sub_2534D9A08();
  v5();
  sub_253579494();
  sub_2534847C8();
}

uint64_t ContinuePlanning.init(from:)(uint64_t a1)
{
  return sub_253A3F4B4(a1);
}

void sub_2539DF204()
{
}

uint64_t sub_2539DF21C(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_253A3C09C();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = sub_253B09B10();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t type metadata accessor for QueryDecorationPrePlannerResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248D98);
}

uint64_t type metadata accessor for QueryDecorationResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249218);
}

uint64_t type metadata accessor for TypeConversionResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2491E8);
}

uint64_t type metadata accessor for TypeConversionRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249308);
}

uint64_t type metadata accessor for ClientUndoRedoRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249208);
}

uint64_t type metadata accessor for UndoRedoRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2490D8);
}

uint64_t type metadata accessor for ToolResolution(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249058);
}

uint64_t type metadata accessor for ExternalAgentOutcome(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249190);
}

uint64_t type metadata accessor for ExternalAgentRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2491A0);
}

uint64_t type metadata accessor for ExternalAgentSpeechQuery(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2493F0);
}

uint64_t type metadata accessor for ExternalAgentTextQuery(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249328);
}

uint64_t type metadata accessor for StatementResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249098);
}

uint64_t type metadata accessor for ActionCancellation(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249148);
}

uint64_t type metadata accessor for QueryStepResults(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249128);
}

uint64_t type metadata accessor for ActionStepResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2490E8);
}

uint64_t type metadata accessor for VariableStep(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248F98);
}

uint64_t type metadata accessor for QueryStep(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B24A2F8);
}

uint64_t type metadata accessor for ClientAction(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248F68);
}

uint64_t type metadata accessor for Action(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249E98);
}

uint64_t type metadata accessor for RequestContent.SystemPromptResolution(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249038);
}

uint64_t type metadata accessor for RequestContent.TextContent(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249008);
}

uint64_t type metadata accessor for RequestContent(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249048);
}

uint64_t type metadata accessor for Request(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249EB8);
}

uint64_t type metadata accessor for TextQuery(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B24A308);
}

uint64_t type metadata accessor for Session.Event.Payload(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B24A2B0);
}

uint64_t sub_2539DF5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_253578A1C();
  v4(v3);
  sub_25346CAF4();
  sub_2534D8E14();
  v5();
  return a2;
}

uint64_t sub_2539DF610()
{
  uint64_t v1 = sub_2534D9690();
  v2(v1);
  sub_25346CAF4();
  sub_2534659CC();
  v3();
  return v0;
}

uint64_t sub_2539DF660(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_253578A1C();
  v4(v3);
  sub_25346CAF4();
  sub_2534B3428();
  v5();
  return a2;
}

uint64_t type metadata accessor for SpeechRequestCandidate(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249338);
}

uint64_t sub_2539DF6D8(uint64_t a1)
{
  return sub_2539DF6FC(a1, &qword_269CDE650);
}

uint64_t sub_2539DF6E4(uint64_t a1)
{
  return sub_2539DF834(a1);
}

uint64_t sub_2539DF6F0(uint64_t a1)
{
  return sub_2539DF6FC(a1, &qword_269CDE610);
}

uint64_t sub_2539DF6FC(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_253A3C09C();
    __break(1u);
  }
  else if (a1)
  {
    sub_253462A5C(a2);
    sub_2539446BC();
    uint64_t result = sub_253B09B10();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_2539DF778(uint64_t a1)
{
  return sub_2539DF834(a1);
}

uint64_t sub_2539DF784(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_253A3C09C();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for ToolBoxToolSearchResult(0);
      sub_253A3F4E8();
      uint64_t v2 = sub_253B09B10();
      *(void *)(v2 + 16) = a1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    uint64_t v3 = type metadata accessor for ToolBoxToolSearchResult(0);
    sub_253A3B808(v3);
    sub_2535786F4();
    return v2;
  }
  return result;
}

uint64_t sub_2539DF81C(uint64_t a1)
{
  return sub_2539DF834(a1);
}

uint64_t sub_2539DF828(uint64_t a1)
{
  return sub_2539DF834(a1);
}

uint64_t sub_2539DF834(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_2535266C8();
    uint64_t result = sub_253A3C09C();
    __break(1u);
  }
  else
  {
    sub_2535E24E8();
    if (v3)
    {
      sub_253462A5C(v1);
      uint64_t v4 = sub_253B09B10();
      *(void *)(v4 + 16) = v2;
    }
    else
    {
      uint64_t v4 = MEMORY[0x263F8EE78];
    }
    uint64_t v5 = sub_253462A5C(v1);
    sub_253A3B808(v5);
    sub_2535786F4();
    return v4;
  }
  return result;
}

uint64_t sub_2539DF8D8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v8 = a1 == a5 && a2 == a6;
  if (v8 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1;
  }
  else {
    return sub_253B0A470() & 1;
  }
}

uint64_t sub_2539DF940()
{
  sub_253462A5C(&qword_269CE8418);
  sub_2534D970C();
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_2539DF9A0()
{
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_2539DF9E4()
{
  sub_253462A5C(&qword_269CDB460);
  swift_arrayDestroy();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t sub_2539DFA64()
{
  return sub_2539DFADC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_253522E34);
}

uint64_t sub_2539DFA7C()
{
  return sub_2539DFADC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_253523380);
}

uint64_t sub_2539DFA94()
{
  return sub_2539DFADC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25352349C);
}

uint64_t sub_2539DFAAC()
{
  return sub_2539DFADC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25352381C);
}

uint64_t sub_2539DFAC4()
{
  return sub_2539DFADC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_253523BA4);
}

uint64_t sub_2539DFADC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_2539DFB38(uint64_t a1)
{
  return sub_2539DFBB0(a1, (uint64_t (*)(BOOL))sub_253522E34);
}

uint64_t sub_2539DFB50(uint64_t a1)
{
  return sub_2539DFBB0(a1, (uint64_t (*)(BOOL))sub_253523380);
}

uint64_t sub_2539DFB68(uint64_t a1)
{
  return sub_2539DFBB0(a1, (uint64_t (*)(BOOL))sub_25352349C);
}

uint64_t sub_2539DFB80(uint64_t a1)
{
  return sub_2539DFBB0(a1, (uint64_t (*)(BOOL))sub_25352381C);
}

uint64_t sub_2539DFB98(uint64_t a1)
{
  return sub_2539DFBB0(a1, (uint64_t (*)(BOOL))sub_253523BA4);
}

uint64_t sub_2539DFBB0(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_2539DFBF8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539DFCA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539DFCC0(a1, a2, a3);
}

uint64_t sub_2539DFCC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  uint64_t v4 = sub_2534D976C();
  v5(v4);
  sub_25346CAF4();
  sub_253A3F1E8();
  if (!v8 & v7) {
    BOOL v9 = v6 > a3;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  sub_253946310();
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539DFD88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539E08DC(a1, a2, a3);
}

uint64_t sub_2539DFD94(uint64_t a1, uint64_t a2)
{
  return sub_2539DFEC0(a1, a2);
}

uint64_t sub_2539DFDA8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (BOOL v3 = a1 + 40 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    sub_253462A5C(&qword_269CE8430);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_2539DFEAC(uint64_t a1, uint64_t a2)
{
  return sub_2539DFEC0(a1, a2);
}

uint64_t sub_2539DFEC0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  sub_2535E24E8();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  sub_25346C8E0(0, v5);
  sub_253946310();
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539DFF84(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    sub_253462A5C(&qword_26B24A390);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_2539E0088(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539E0138(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  sub_253A3DEB0();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  sub_253462A5C(&qword_269CDE610);
  sub_253946310();
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539E01E8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_2539E02C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539DFCC0(a1, a2, a3);
}

uint64_t sub_2539E02E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539DFCC0(a1, a2, a3);
}

uint64_t sub_2539E02F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539DFCC0(a1, a2, a3);
}

uint64_t sub_2539E0310(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539E08DC(a1, a2, a3);
}

uint64_t sub_2539E031C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  sub_253A3DEB0();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  sub_253462A5C(&qword_269CDE578);
  sub_253946310();
  return swift_arrayInitWithCopy();
}

void *sub_2539E03CC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = (void *)sub_25352671C();
    __break(1u);
    return result;
  }
  if (&__dst[2 * a2] > __src && &__src[2 * a2] > __dst)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  return memcpy(__dst, __src, 2 * a2);
}

uint64_t sub_2539E047C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  if (a3 + 56 * a2 > a1 && a1 + 56 * a2 > a3)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539E0534(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2539DFCC0(a1, a2, a3);
}

uint64_t sub_2539E054C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_2539E062C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    sub_253462A5C(&qword_269CDE8F0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_2539E072C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = sub_253B0A260();
    __break(1u);
  }
  else
  {
    sub_253462A5C(&qword_269CE82D0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

void *sub_2539E0830(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = (void *)sub_25352671C();
    __break(1u);
    return result;
  }
  if (&__dst[4 * a2] > __src && &__src[4 * a2] > __dst)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  return memcpy(__dst, __src, 4 * a2);
}

uint64_t sub_2539E08DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_2535266C8();
    sub_253526854();
LABEL_11:
    uint64_t result = sub_25352671C();
    __break(1u);
    return result;
  }
  sub_2535E24E8();
  sub_253462A5C(v4);
  sub_25346CAF4();
  sub_253A3F1E8();
  if (!v7 & v6) {
    BOOL v8 = v5 > a3;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    sub_2535266C8();
    sub_253526844();
    goto LABEL_11;
  }
  sub_253946310();
  return swift_arrayInitWithCopy();
}

uint64_t sub_2539E09A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253A3E118();
  swift_bridgeObjectRetain();
  sub_253B09630();
  uint64_t v8 = sub_253B0A630();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_253A3C804();
  if (v11)
  {
    uint64_t v12 = *(void *)(v6 + 48);
    sub_253A3EDB0(v12 + 16 * v10);
    BOOL v14 = v14 && v13 == a3;
    if (v14 || (sub_253A3E160() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_253A3F188(*v4);
      return 0;
    }
    uint64_t v16 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v16;
      sub_253A3C804();
      if ((v17 & 1) == 0) {
        break;
      }
      sub_253A3EDB0(v12 + 16 * v10);
      BOOL v19 = v14 && v18 == a3;
      if (v19 || (sub_253A3E160() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_253A3E8E8();
  uint64_t v21 = sub_2534D9B10();
  sub_2539E3090(v21, v22, v10, isUniquelyReferenced_nonNull_native);
  *char v4 = v23;
  swift_bridgeObjectRelease();
  *BOOL v3 = v5;
  v3[1] = a3;
  return 1;
}

void sub_2539E0AE4()
{
  sub_2534B3258();
  unint64_t v2 = (void *)v1;
  char v4 = v3;
  sub_2534D9690();
  sub_253B09440();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_253A3D738();
  sub_2539E6F90((uint64_t)&qword_269CDE700);
  swift_bridgeObjectRetain();
  sub_253A3EA40();
  sub_253A3C7B8();
  if (v9)
  {
    sub_253A3C440(v8);
    while (1)
    {
      uint64_t v10 = sub_253A3C660();
      ((void (*)(uint64_t))v1)(v10);
      sub_2539E6F90((uint64_t)&unk_269CDE8C0);
      uint64_t v1 = sub_253A3E93C();
      char v11 = *v4;
      sub_2534D91AC();
      v11();
      if (v1) {
        break;
      }
      sub_253A3C78C();
      if ((v12 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v18;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_2534D91AC();
    v11();
    uint64_t v17 = sub_253A3D4F8();
    v0(v17);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v6 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_253A3D860();
    ((void (*)(void))v1)();
    uint64_t v13 = sub_253A3CFDC();
    sub_2539E322C(v13, v14, v15);
    *unint64_t v2 = v19;
    swift_bridgeObjectRelease();
    sub_253A3C378();
    v16();
  }
  sub_253465A14();
}

void sub_2539E0CB4()
{
  sub_2534B3258();
  unint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_2534D976C();
  uint64_t v61 = sub_253B09440();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_2534F8208((uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = sub_253B08B30();
  sub_253465998();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  sub_2534D8F5C((uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = sub_253462A5C(&qword_269CDE9D8);
  sub_25346CAF4();
  MEMORY[0x270FA5388](v13);
  uint64_t v14 = sub_2534D9B74();
  uint64_t v66 = type metadata accessor for ToolboxCustomKeyResult(v14);
  sub_253465998();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v63 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2534B324C();
  MEMORY[0x270FA5388](v19);
  uint64_t v59 = (uint64_t)&v48 - v20;
  sub_2534B324C();
  MEMORY[0x270FA5388](v21);
  sub_2534F823C();
  MEMORY[0x270FA5388](v22);
  sub_2534B35DC();
  sub_2534D8F5C(v23);
  uint64_t v24 = *v2;
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  uint64_t v65 = v4;
  ToolboxCustomKeyResult.hash(into:)();
  uint64_t v25 = sub_253B0A630();
  uint64_t v26 = -1 << *(unsigned char *)(v24 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v28 = v24 + 56;
  if ((*(void *)(v24 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27))
  {
    uint64_t v49 = v2;
    uint64_t v29 = v16;
    uint64_t v30 = ~v26;
    uint64_t v62 = *(void *)(v29 + 72);
    uint64_t v52 = v10 + 32;
    uint64_t v56 = (void (**)(void))(v6 + 8);
    uint64_t v57 = (void (**)(void))(v10 + 8);
    uint64_t v51 = v6 + 32;
    uint64_t v31 = v53;
    uint64_t v58 = v24;
    uint64_t v55 = v24 + 56;
    uint64_t v54 = ~v26;
    while (1)
    {
      unint64_t v32 = v62 * v27;
      sub_2539DF660(*(void *)(v24 + 48) + v62 * v27, v31);
      uint64_t v33 = v1 + *(int *)(v64 + 48);
      sub_2539DF660(v31, v1);
      sub_2539DF660(v65, v33);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_2539DF660(v1, v63);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_2534DA604();
          sub_2534D8E14();
          v34();
          char v35 = sub_253B093E0();
          uint64_t v36 = *v56;
          uint64_t v31 = v53;
          sub_2534D91AC();
          v36();
          sub_2535925F4();
          sub_2534D91AC();
          v36();
          if (v35) {
            goto LABEL_15;
          }
LABEL_10:
          sub_2539DF610();
          uint64_t v24 = v58;
          uint64_t v28 = v55;
          uint64_t v30 = v54;
          goto LABEL_11;
        }
      }
      else
      {
        sub_2539DF660(v1, v59);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          sub_2536D44B0();
          sub_2534D8E14();
          v38();
          sub_2536D3880();
          char v39 = sub_253B08AE0();
          uint64_t v40 = *v57;
          sub_2534D91A0();
          v40();
          sub_2534D9840();
          sub_2534D91A0();
          v40();
          if (v39)
          {
LABEL_15:
            sub_2539DF610();
            sub_2534DA5AC();
            sub_2539DF610();
            swift_bridgeObjectRelease();
            sub_2539DF610();
            sub_2539DF660(*(void *)(*v49 + 48) + v32, v50);
            goto LABEL_16;
          }
          goto LABEL_10;
        }
      }
      sub_2534659CC();
      v37();
      sub_253472458(v1, &qword_269CDE9D8);
LABEL_11:
      sub_2539DF610();
      unint64_t v27 = (v27 + 1) & v30;
      if (((*(void *)(v28 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v49;
        goto LABEL_14;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_14:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = sub_253579334();
  sub_2539DF660(v42, v43);
  uint64_t v67 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  uint64_t v44 = sub_2534D9A44();
  sub_2539E34E8(v44, v45, isUniquelyReferenced_nonNull_native);
  *unint64_t v2 = v67;
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_2534D973C();
  sub_2539DF5B8(v46, v47);
LABEL_16:
  sub_253465A14();
}

uint64_t sub_2539E1298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253A3E118();
  sub_253B09630();
  uint64_t v8 = sub_253B0A630();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = v8 & ~v9;
  sub_253A3C804();
  if (v11)
  {
    uint64_t v12 = *(void *)(v6 + 48);
    sub_253A3EDB0(v12 + 16 * v10);
    BOOL v14 = v14 && v13 == a3;
    if (v14 || (sub_253A3CB64() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_253A3F188(*v4);
      return 0;
    }
    uint64_t v16 = ~v9;
    while (1)
    {
      uint64_t v10 = (v10 + 1) & v16;
      sub_253A3C804();
      if ((v17 & 1) == 0) {
        break;
      }
      sub_253A3EDB0(v12 + 16 * v10);
      BOOL v19 = v14 && v18 == a3;
      if (v19 || (sub_253A3CB64() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_253A3F0CC();
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_253A3E6BC();
  sub_2539E3B30(v21, v22, v23, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v24;
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  v3[1] = a3;
  return 1;
}

void sub_2539E13C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_253A3C038();
  uint64_t v13 = v11;
  sub_2535E24E8();
  uint64_t v14 = *v11;
  uint64_t v15 = sub_253B0A5E0();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  unint64_t v17 = v15 & ~v16;
  if ((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17))
  {
    uint64_t v18 = *(void *)(v14 + 48);
    if (*(void *)(v18 + 8 * v17) == v10) {
      goto LABEL_8;
    }
    uint64_t v19 = ~v16;
    while (1)
    {
      unint64_t v17 = (v17 + 1) & v19;
      if (((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        break;
      }
      if (*(void *)(v18 + 8 * v17) == v10) {
        goto LABEL_8;
      }
    }
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_253A3F0CC();
  uint64_t v20 = sub_253945CF8();
  sub_2539E3CCC(v20, v21, v22);
  *uint64_t v13 = a10;
  swift_bridgeObjectRelease();
LABEL_8:
  *uint64_t v12 = v10;
  sub_253A3BEC0();
}

uint64_t sub_2539E14A0(void *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_253B0A5F0();
  swift_bridgeObjectRetain();
  sub_2534D16B8();
  uint64_t v6 = sub_253B0A630();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_253A3F1A8();
  if (v9)
  {
    swift_bridgeObjectRetain();
    sub_2534BFE70();
    char v11 = v10;
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v12 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v12;
      sub_253A3F1A8();
      if ((v13 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRetain();
      sub_2534BFE70();
      char v15 = v14;
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = sub_253A3E8E8();
  sub_2539E3DF0(v18, v8, isUniquelyReferenced_nonNull_native);
  *unint64_t v2 = v19;
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

void sub_2539E1608()
{
  sub_2534B3258();
  unint64_t v2 = (void *)v1;
  uint64_t v4 = v3;
  sub_2534D9690();
  sub_253B080C0();
  sub_253465998();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  sub_253A3D738();
  sub_2539E6F90((uint64_t)&unk_269CE8358);
  swift_bridgeObjectRetain();
  sub_253A3EA40();
  sub_253A3C7B8();
  if (v9)
  {
    sub_253A3C440(v8);
    while (1)
    {
      uint64_t v10 = sub_253A3C660();
      ((void (*)(uint64_t))v1)(v10);
      sub_2539E6F90((uint64_t)&unk_269CE8360);
      uint64_t v1 = sub_253A3E93C();
      char v11 = *v4;
      sub_2534D91AC();
      v11();
      if (v1) {
        break;
      }
      sub_253A3C78C();
      if ((v12 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v18;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_2534D91AC();
    v11();
    uint64_t v17 = sub_253A3D4F8();
    v0(v17);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v6 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    sub_253A3D860();
    ((void (*)(void))v1)();
    uint64_t v13 = sub_253A3CFDC();
    sub_2539E3F80(v13, v14, v15);
    *unint64_t v2 = v19;
    swift_bridgeObjectRelease();
    sub_253A3C378();
    v16();
  }
  sub_253465A14();
}

uint64_t sub_2539E17D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CDB3E0);
  uint64_t v3 = sub_253B09FB0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      sub_253B0A5F0();
      sub_253B09630();
      uint64_t result = sub_253B0A630();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_2539E1AB4()
{
  uint64_t v1 = v0;
  uint64_t v42 = sub_253B09440();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_253462A5C(&qword_269CE8408);
  uint64_t v5 = sub_253B09FB0();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    char v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_2539E6F90((uint64_t)&qword_269CDE700);
      uint64_t result = sub_253B095C0();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_2539E1EAC()
{
  uint64_t v1 = v0;
  uint64_t v51 = sub_253B09440();
  uint64_t v2 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v50 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_253B08B30();
  uint64_t v4 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolboxCustomKeyResult(0);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = *v0;
  sub_253462A5C(&qword_269CE8410);
  uint64_t v12 = sub_253B09FB0();
  uint64_t v13 = v12;
  if (*(void *)(v11 + 16))
  {
    uint64_t v43 = v0;
    uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v15 = *(void *)(v11 + 56);
    uint64_t v53 = (void *)(v11 + 56);
    if (v14 < 64) {
      uint64_t v16 = ~(-1 << v14);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v15;
    int64_t v52 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v46 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    unint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v2 + 32);
    uint64_t v44 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v18 = v12 + 56;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    uint64_t v21 = (uint64_t)v56;
    if (!v17) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v22 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    for (unint64_t i = v22 | (v20 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v20 << 6))
    {
      uint64_t v27 = *(void *)(v54 + 72);
      sub_2539DF5B8(*(void *)(v11 + 48) + v27 * i, (uint64_t)v10);
      sub_253B0A5F0();
      sub_2539DF660((uint64_t)v10, v21);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        unint64_t v28 = v50;
        uint64_t v29 = v11;
        uint64_t v30 = v51;
        (*v45)(v50, v21, v51);
        sub_253B0A600();
        sub_2539E6F90((uint64_t)&qword_269CDE700);
        sub_253B095D0();
        uint64_t v31 = v30;
        uint64_t v11 = v29;
        (*v44)(v28, v31);
      }
      else
      {
        BOOL v32 = v48;
        uint64_t v33 = v49;
        (*v47)(v48, v21, v49);
        sub_253B0A600();
        sub_2539E6F90((uint64_t)&unk_269CDE9D0);
        sub_253B095D0();
        (*v46)(v32, v33);
      }
      uint64_t result = sub_253B0A630();
      uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v35 = result & ~v34;
      unint64_t v36 = v35 >> 6;
      if (((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6))) == 0)
      {
        char v38 = 0;
        unint64_t v39 = (unint64_t)(63 - v34) >> 6;
        uint64_t v21 = (uint64_t)v56;
        while (++v36 != v39 || (v38 & 1) == 0)
        {
          BOOL v40 = v36 == v39;
          if (v36 == v39) {
            unint64_t v36 = 0;
          }
          v38 |= v40;
          uint64_t v41 = *(void *)(v18 + 8 * v36);
          if (v41 != -1)
          {
            unint64_t v37 = __clz(__rbit64(~v41)) + (v36 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      unint64_t v37 = __clz(__rbit64((-1 << v35) & ~*(void *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v21 = (uint64_t)v56;
LABEL_33:
      *(void *)(v18 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
      uint64_t result = sub_2539DF5B8((uint64_t)v10, *(void *)(v13 + 48) + v37 * v27);
      ++*(void *)(v13 + 16);
      if (v17) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v24 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_41;
      }
      if (v24 >= v52) {
        goto LABEL_35;
      }
      unint64_t v25 = v53[v24];
      ++v20;
      if (!v25)
      {
        int64_t v20 = v24 + 1;
        if (v24 + 1 >= v52) {
          goto LABEL_35;
        }
        unint64_t v25 = v53[v20];
        if (!v25)
        {
          int64_t v20 = v24 + 2;
          if (v24 + 2 >= v52) {
            goto LABEL_35;
          }
          unint64_t v25 = v53[v20];
          if (!v25)
          {
            int64_t v26 = v24 + 3;
            if (v26 >= v52)
            {
LABEL_35:
              swift_release();
              uint64_t v1 = v43;
              uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
              if (v42 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v42 + 63) >> 6, v53);
              }
              else {
                *uint64_t v53 = -1 << v42;
              }
              *(void *)(v11 + 16) = 0;
              break;
            }
            unint64_t v25 = v53[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v20 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v20 >= v52) {
                  goto LABEL_35;
                }
                unint64_t v25 = v53[v20];
                ++v26;
                if (v25) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v26;
          }
        }
      }
LABEL_20:
      unint64_t v17 = (v25 - 1) & v25;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v13;
  return result;
}

uint64_t sub_2539E24FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CE81A8);
  uint64_t result = sub_253B09FB0();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v30 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v6;
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    if ((v8 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
    {
      unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      sub_253B0A5F0();
      sub_253B09630();
      uint64_t result = sub_253B0A630();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *unint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v5;
      if (!v15)
      {
        int64_t v5 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v5];
        if (!v15)
        {
          int64_t v5 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v5];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_32:
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              uint64_t v1 = v0;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v5 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v10) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v5];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v9 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_2539E27C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CDB440);
  uint64_t result = sub_253B09FB0();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v7 = (uint64_t *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v8 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = -1 << v8;
    unint64_t v28 = v1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v6;
    uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = result + 56;
    if ((v9 & v6) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      uint64_t result = sub_253B0A5E0();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v18;
      ++*(void *)(v4 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v11) {
        goto LABEL_32;
      }
      unint64_t v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        int64_t v5 = v15 + 1;
        if (v15 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v16 = v7[v5];
        if (!v16)
        {
          int64_t v5 = v15 + 2;
          if (v15 + 2 >= v11) {
            goto LABEL_32;
          }
          unint64_t v16 = v7[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63) {
                sub_253AE5AC4(0, v11, (void *)(v2 + 56));
              }
              else {
                *uint64_t v7 = v27;
              }
              uint64_t v1 = v28;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v5 >= v11) {
                  goto LABEL_32;
                }
                unint64_t v16 = v7[v5];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_2539E2A4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CE83A8);
  uint64_t v3 = sub_253B09FB0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      sub_253B0A5F0();
      sub_2534D16B8();
      sub_253B0A630();
      unint64_t result = sub_253B09F80();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(void *)(*(void *)(v4 + 48) + 8 * result) = v18;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      if (v15 >= v9) {
        goto LABEL_23;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_23;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_23;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_23:
              swift_release();
              uint64_t v19 = 1 << *(unsigned char *)(v2 + 32);
              if (v19 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v19 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *uint64_t v6 = -1 << v19;
              }
              uint64_t v1 = v0;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v9) {
                  goto LABEL_23;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  unint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_2539E2C98()
{
  uint64_t v1 = v0;
  uint64_t v42 = sub_253B080C0();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_253462A5C(&qword_269CE8368);
  uint64_t v5 = sub_253B09FB0();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    unint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      BOOL v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_2539E6F90((uint64_t)&unk_269CE8358);
      uint64_t result = sub_253B095C0();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_253AE5AC4(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *unint64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_2539E3090(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_2539E17D8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_2539E423C();
      goto LABEL_22;
    }
    sub_2539E4DA4();
  }
  uint64_t v11 = *v4;
  sub_253B0A5F0();
  sub_253B09630();
  uint64_t result = sub_253B0A630();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_253B0A4C0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_253B0A540();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_253B0A4C0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_2539E322C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_253B09440();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_2539E1AB4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_2539E4B3C();
      goto LABEL_12;
    }
    sub_2539E5050();
  }
  uint64_t v12 = *v3;
  sub_2539E6F90((uint64_t)&qword_269CDE700);
  uint64_t v13 = sub_253B095C0();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_2539E6F90((uint64_t)&unk_269CDE8C0);
      char v21 = sub_253B096B0();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_253B0A540();
  __break(1u);
  return result;
}

uint64_t sub_2539E34E8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v58 = a1;
  uint64_t v51 = sub_253B09440();
  uint64_t v6 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_253B08B30();
  uint64_t v8 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  unint64_t v45 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_253462A5C(&qword_269CDE9D8);
  MEMORY[0x270FA5388](v57);
  unint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ToolboxCustomKeyResult(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  unint64_t v19 = (char *)&v41 - v18;
  MEMORY[0x270FA5388](v17);
  int64_t v52 = (char *)&v41 - v20;
  unint64_t v21 = *(void *)(*v3 + 16);
  unint64_t v22 = *(void *)(*v3 + 24);
  uint64_t v42 = v3;
  uint64_t v41 = v13;
  if (v22 <= v21 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_2539E1EAC();
    }
    else
    {
      if (v22 > v21)
      {
        sub_2539E43F0();
        goto LABEL_20;
      }
      sub_2539E53FC();
    }
    uint64_t v23 = *v3;
    sub_253B0A5F0();
    ToolboxCustomKeyResult.hash(into:)();
    uint64_t v24 = sub_253B0A630();
    uint64_t v25 = -1 << *(unsigned char *)(v23 + 32);
    a2 = v24 & ~v25;
    uint64_t v55 = v23 + 56;
    uint64_t v56 = v23;
    if ((*(void *)(v23 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v54 = ~v25;
      uint64_t v53 = *(void *)(v13 + 72);
      uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v49 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
      uint64_t v26 = (uint64_t)v52;
      do
      {
        sub_2539DF660(*(void *)(v56 + 48) + v53 * a2, v26);
        uint64_t v27 = (uint64_t)&v11[*(int *)(v57 + 48)];
        sub_2539DF660(v26, (uint64_t)v11);
        sub_2539DF660(v58, v27);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_2539DF660((uint64_t)v11, (uint64_t)v16);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            unint64_t v28 = v46;
            uint64_t v29 = v51;
            (*v43)(v46, v27, v51);
            int v47 = sub_253B093E0();
            uint64_t v30 = *v48;
            uint64_t v26 = (uint64_t)v52;
            (*v48)(v28, v29);
            v30(v16, v29);
            sub_2539DF610();
            if (v47) {
              goto LABEL_23;
            }
            goto LABEL_19;
          }
          (*v48)(v16, v51);
        }
        else
        {
          sub_2539DF660((uint64_t)v11, (uint64_t)v19);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            uint64_t v31 = v45;
            uint64_t v32 = v50;
            (*v44)(v45, v27, v50);
            char v33 = sub_253B08AE0();
            uint64_t v34 = *v49;
            unint64_t v35 = v31;
            uint64_t v26 = (uint64_t)v52;
            (*v49)(v35, v32);
            v34(v19, v32);
            sub_2539DF610();
            if (v33) {
              goto LABEL_23;
            }
            goto LABEL_19;
          }
          (*v49)(v19, v50);
        }
        sub_253472458((uint64_t)v11, &qword_269CDE9D8);
LABEL_19:
        sub_2539DF610();
        a2 = (a2 + 1) & v54;
      }
      while (((*(void *)(v55 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_20:
  uint64_t v36 = *v42;
  *(void *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_2539DF5B8(v58, *(void *)(v36 + 48) + *(void *)(v41 + 72) * a2);
  uint64_t v38 = *(void *)(v36 + 16);
  BOOL v39 = __OFADD__(v38, 1);
  uint64_t v40 = v38 + 1;
  if (v39)
  {
    __break(1u);
LABEL_23:
    sub_2539DF610();
    uint64_t result = sub_253B0A540();
    __break(1u);
  }
  else
  {
    *(void *)(v36 + 16) = v40;
  }
  return result;
}

uint64_t sub_2539E3B30(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_2539E24FC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_2539E4654();
      goto LABEL_22;
    }
    sub_2539E59F4();
  }
  uint64_t v11 = *v4;
  sub_253B0A5F0();
  sub_253B09630();
  uint64_t result = sub_253B0A630();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_253B0A4C0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_253B0A540();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_253B0A4C0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void sub_2539E3CCC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_2539E27C8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_2539E4808();
      goto LABEL_14;
    }
    sub_2539E5C90();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = sub_253B0A5E0();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      sub_253B0A540();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = a1;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
}

uint64_t sub_2539E3DF0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_2539E2A4C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_2539E4990();
      goto LABEL_14;
    }
    sub_2539E5EF0();
  }
  uint64_t v8 = *v3;
  sub_253B0A5F0();
  sub_2534D16B8();
  uint64_t result = sub_253B0A630();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    swift_bridgeObjectRetain();
    sub_2534BFE70();
    char v11 = v10;
    uint64_t result = swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_13:
      sub_253462A5C(&qword_269CDE8F0);
      uint64_t result = sub_253B0A540();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        swift_bridgeObjectRetain();
        sub_2534BFE70();
        char v14 = v13;
        uint64_t result = swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v15 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v5;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

uint64_t sub_2539E3F80(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_253B080C0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_2539E2C98();
  }
  else
  {
    if (v11 > v10)
    {
      sub_2539E4B3C();
      goto LABEL_12;
    }
    sub_2539E6108();
  }
  uint64_t v12 = *v3;
  sub_2539E6F90((uint64_t)&unk_269CE8358);
  uint64_t v13 = sub_253B095C0();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    BOOL v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_2539E6F90((uint64_t)&unk_269CE8360);
      char v21 = sub_253B096B0();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_253B0A540();
  __break(1u);
  return result;
}

void *sub_2539E423C()
{
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CDB3E0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_253B09FA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2539E43F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolboxCustomKeyResult(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CE8410);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_253B09FA0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v15 = *(void *)(v6 + 56);
  uint64_t v16 = -1;
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  unint64_t v17 = v16 & v15;
  int64_t v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    unint64_t v24 = *(void *)(v3 + 72) * i;
    sub_2539DF660(*(void *)(v6 + 48) + v24, (uint64_t)v5);
    uint64_t result = (void *)sub_2539DF5B8((uint64_t)v5, *(void *)(v8 + 48) + v24);
    if (v17) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v18) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v17 = (v22 - 1) & v22;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v18) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v18) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2539E4654()
{
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CE81A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_253B09FA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *unint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_2539E4808()
{
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CDB440);
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = sub_253B09FA0();
  if (!v2[2])
  {
LABEL_26:
    swift_release();
    uint64_t *v1 = v3;
    return;
  }
  sub_253A3E984();
  uint64_t v4 = v2 + 7;
  sub_253A3F070();
  if ((void *)v3 != v2 || v5 >= &v2[v6 + 7]) {
    memmove(v5, v2 + 7, 8 * v6);
  }
  *(void *)(v3 + 16) = v2[2];
  sub_253A3F070();
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v9 << 6))
  {
    *(void *)(*(void *)(v3 + 48) + 8 * i) = *(void *)(v2[6] + 8 * i);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = v4[v13];
    ++v9;
    if (!v14)
    {
      uint64_t v9 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_26;
      }
      unint64_t v14 = v4[v9];
      if (!v14)
      {
        uint64_t v9 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_26;
        }
        unint64_t v14 = v4[v9];
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v14 - 1) & v14;
  }
  uint64_t v15 = v13 + 3;
  if (v15 >= v8) {
    goto LABEL_26;
  }
  unint64_t v14 = v4[v15];
  if (v14)
  {
    uint64_t v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = v4[v9];
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_2539E4990()
{
  uint64_t v1 = v0;
  sub_253462A5C(&qword_269CE83A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_253B09FA0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_2539E4B3C()
{
  sub_2534B3258();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4(0);
  sub_253465998();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v29 - v9;
  sub_253462A5C(v2);
  uint64_t v11 = *v0;
  uint64_t v12 = sub_253B09FA0();
  if (!*(void *)(v11 + 16))
  {
    swift_release();
LABEL_30:
    *uint64_t v3 = v12;
    sub_253465A14();
    return;
  }
  sub_253A3E984();
  sub_253A3F070();
  uint64_t v30 = v3;
  uint64_t v31 = v15;
  uint64_t v16 = &v15[8 * v14];
  if (v12 != v11 || v13 >= v16) {
    memmove(v13, v31, 8 * v14);
  }
  uint64_t v18 = 0;
  *(void *)(v12 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 56);
  sub_253A3F070();
  uint64_t v32 = v22;
  if (!v21) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v23 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v23 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(void *)(v11 + 48) + *(void *)(v7 + 72) * i, v5);
    sub_253A3C378();
    v28();
    if (v21) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v32) {
      goto LABEL_28;
    }
    unint64_t v26 = *((void *)v31 + v25);
    ++v18;
    if (!v26)
    {
      uint64_t v18 = v25 + 1;
      if (v25 + 1 >= v32) {
        goto LABEL_28;
      }
      unint64_t v26 = *((void *)v31 + v18);
      if (!v26)
      {
        uint64_t v18 = v25 + 2;
        if (v25 + 2 >= v32) {
          goto LABEL_28;
        }
        unint64_t v26 = *((void *)v31 + v18);
        if (!v26) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v21 = (v26 - 1) & v26;
  }
  uint64_t v27 = v25 + 3;
  if (v27 >= v32)
  {
LABEL_28:
    swift_release();
    uint64_t v3 = v30;
    goto LABEL_30;
  }
  unint64_t v26 = *((void *)v31 + v27);
  if (v26)
  {
    uint64_t v18 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v18 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v18 >= v32) {
      goto LABEL_28;
    }
    unint64_t v26 = *((void *)v31 + v18);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_2539E4DA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CDB3E0);
  uint64_t v3 = sub_253B09FB0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_253B09630();
    uint64_t result = sub_253B0A630();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2539E5050()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_253B09440();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_253462A5C(&qword_269CE8408);
  uint64_t v7 = sub_253B09FB0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_2539E6F90((uint64_t)&qword_269CDE700);
    uint64_t result = sub_253B095C0();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2539E53FC()
{
  uint64_t v1 = v0;
  uint64_t v52 = sub_253B09440();
  uint64_t v2 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v51 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_253B08B30();
  uint64_t v4 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolboxCustomKeyResult(0);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = *v0;
  sub_253462A5C(&qword_269CE8410);
  uint64_t v13 = sub_253B09FB0();
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    uint64_t *v1 = v14;
    return result;
  }
  uint64_t v44 = v0;
  uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v53 = v12 + 56;
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  int64_t v54 = (unint64_t)(v15 + 63) >> 6;
  int v47 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v46 = (void (**)(char *, char *, uint64_t))(v2 + 32);
  unint64_t v45 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v19 = v13 + 56;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v55 = v9;
  if (!v18) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    uint64_t v27 = v12;
    uint64_t v28 = *(void *)(v12 + 48);
    uint64_t v29 = *(void *)(v56 + 72);
    sub_2539DF660(v28 + v29 * i, (uint64_t)v11);
    sub_253B0A5F0();
    sub_2539DF660((uint64_t)v11, (uint64_t)v9);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v30 = v51;
      BOOL v31 = v9;
      uint64_t v32 = v52;
      (*v46)(v51, v31, v52);
      sub_253B0A600();
      sub_2539E6F90((uint64_t)&qword_269CDE700);
      sub_253B095D0();
      uint64_t v33 = v45;
    }
    else
    {
      unint64_t v30 = v49;
      uint64_t v34 = v9;
      uint64_t v32 = v50;
      (*v48)(v49, v34, v50);
      sub_253B0A600();
      sub_2539E6F90((uint64_t)&unk_269CDE9D0);
      sub_253B095D0();
      uint64_t v33 = v47;
    }
    uint64_t v35 = v32;
    uint64_t v9 = v55;
    (*v33)(v30, v35);
    uint64_t result = sub_253B0A630();
    uint64_t v36 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6))) == 0)
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v36) >> 6;
      while (++v38 != v41 || (v40 & 1) == 0)
      {
        BOOL v42 = v38 == v41;
        if (v38 == v41) {
          unint64_t v38 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v38);
        if (v43 != -1)
        {
          unint64_t v39 = __clz(__rbit64(~v43)) + (v38 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v39 = __clz(__rbit64((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v19 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    uint64_t result = sub_2539DF5B8((uint64_t)v11, *(void *)(v14 + 48) + v39 * v29);
    ++*(void *)(v14 + 16);
    uint64_t v12 = v27;
    if (v18) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      goto LABEL_39;
    }
    if (v24 >= v54) {
      goto LABEL_35;
    }
    unint64_t v25 = *(void *)(v53 + 8 * v24);
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v54) {
        goto LABEL_35;
      }
      unint64_t v25 = *(void *)(v53 + 8 * v21);
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v54) {
          goto LABEL_35;
        }
        unint64_t v25 = *(void *)(v53 + 8 * v21);
        if (!v25) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v18 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v54)
  {
LABEL_35:
    uint64_t result = swift_release_n();
    uint64_t v1 = v44;
    goto LABEL_37;
  }
  unint64_t v25 = *(void *)(v53 + 8 * v26);
  if (v25)
  {
    int64_t v21 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v21 >= v54) {
      goto LABEL_35;
    }
    unint64_t v25 = *(void *)(v53 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_20;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_2539E59F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CE81A8);
  uint64_t result = sub_253B09FB0();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = v2 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = result + 56;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      sub_253B0A5F0();
      sub_253B09630();
      uint64_t result = sub_253B0A630();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_29:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t v27 = (void *)(*(void *)(v4 + 48) + 16 * v22);
      *uint64_t v27 = v18;
      v27[1] = v17;
      ++*(void *)(v4 + 16);
      uint64_t result = swift_bridgeObjectRetain();
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_35;
      }
      if (v13 >= v28) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v13);
      ++v5;
      if (!v14)
      {
        int64_t v5 = v13 + 1;
        if (v13 + 1 >= v28) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 2;
          if (v13 + 2 >= v28) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v28)
            {
LABEL_31:
              uint64_t result = swift_release();
              uint64_t v1 = v0;
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            int64_t v5 = v15;
            if (!v14) {
              break;
            }
          }
        }
      }
LABEL_19:
      unint64_t v9 = (v14 - 1) & v14;
    }
    while (1)
    {
      int64_t v5 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      if (v5 >= v28) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      ++v15;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_36:
    __break(1u);
  }
  else
  {
    uint64_t result = swift_release();
LABEL_33:
    uint64_t *v1 = v4;
  }
  return result;
}

uint64_t sub_2539E5C90()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CDB440);
  uint64_t result = sub_253B09FB0();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = sub_253B0A5E0();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_2539E5EF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_253462A5C(&qword_269CE83A8);
  uint64_t v3 = sub_253B09FB0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain();
  int64_t v12 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    sub_253B0A5F0();
    swift_bridgeObjectRetain();
    sub_2534D16B8();
    sub_253B0A630();
    unint64_t result = sub_253B09F80();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(*(void *)(v4 + 48) + 8 * result) = v18;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_23:
    swift_release();
    uint64_t v1 = v0;
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_2539E6108()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_253B080C0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_253462A5C(&qword_269CE8368);
  uint64_t v7 = sub_253B09FB0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_2539E6F90((uint64_t)&unk_269CE8358);
    uint64_t result = sub_253B095C0();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_2539E64B4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6518()
{
  sub_2539E8D84();
  void *v0 = v1;
}

void sub_2539E655C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void *sub_2539E65C0(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_2539E8B30(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_2539E65E0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6644()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E66A8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E670C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6770()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E67D4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6838()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E689C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6900()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6964()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E69C8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6A2C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6A90()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6AF4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6B58()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6BBC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6C20()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E6C84()
{
  sub_2539E8FB4();
  void *v0 = v1;
}

uint64_t type metadata accessor for Candidate(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71B8);
}

uint64_t type metadata accessor for VariableSetter(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2411F8);
}

uint64_t type metadata accessor for ParameterQuery(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7168);
}

uint64_t type metadata accessor for ProgramStatement(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249118);
}

uint64_t type metadata accessor for StatementResultPayload(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249350);
}

uint64_t type metadata accessor for RequestPrescribedPlan(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249238);
}

uint64_t type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249018);
}

uint64_t type metadata accessor for RequestContent.SystemPromptResolution.UserAction(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249028);
}

uint64_t type metadata accessor for RequestPrescribedPlan.OpenTool(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249228);
}

uint64_t type metadata accessor for Session.Transcript(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249F00);
}

uint64_t type metadata accessor for Session.Event(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B241238);
}

uint64_t type metadata accessor for ActionParameterContext(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B249318);
}

unint64_t sub_2539E6E54()
{
  unint64_t result = qword_26B248FE0;
  if (!qword_26B248FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248FE0);
  }
  return result;
}

unint64_t sub_2539E6EA0()
{
  unint64_t result = qword_269CE5638;
  if (!qword_269CE5638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5638);
  }
  return result;
}

unint64_t sub_2539E6EEC()
{
  unint64_t result = qword_269CE5648;
  if (!qword_269CE5648)
  {
    sub_25347907C(&qword_269CE5640);
    sub_2539E6F90((uint64_t)&qword_26B24A2C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5648);
  }
  return result;
}

unint64_t sub_2539E6F90(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    v3(255);
    sub_253A3F4E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2539E6FD0()
{
  unint64_t result = qword_269CE5658;
  if (!qword_269CE5658)
  {
    sub_25347907C(&qword_269CE5640);
    sub_2539E6F90((uint64_t)&qword_269CDBB18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5658);
  }
  return result;
}

uint64_t sub_2539E7074(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_253578A1C();
  v4(v3);
  sub_25346CAF4();
  sub_253944438();
  v5();
  return a2;
}

uint64_t type metadata accessor for Action.ParameterValue(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7120);
}

uint64_t type metadata accessor for ClientAction.ShimParameter(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7148);
}

uint64_t type metadata accessor for RetrievedContextStatement(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71E8);
}

uint64_t type metadata accessor for DynamicEnumerationEntityStatement(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71F8);
}

unint64_t sub_2539E7148()
{
  unint64_t result = qword_269CE5688;
  if (!qword_269CE5688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5688);
  }
  return result;
}

unint64_t sub_2539E7194()
{
  unint64_t result = qword_269CE5690;
  if (!qword_269CE5690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5690);
  }
  return result;
}

unint64_t sub_2539E71E0()
{
  unint64_t result = qword_269CE5698;
  if (!qword_269CE5698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5698);
  }
  return result;
}

unint64_t sub_2539E722C()
{
  unint64_t result = qword_269CE56A0;
  if (!qword_269CE56A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE56A0);
  }
  return result;
}

unint64_t sub_2539E7278()
{
  unint64_t result = qword_269CE56A8;
  if (!qword_269CE56A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE56A8);
  }
  return result;
}

void sub_2539E72C4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7328()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E738C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E73F0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7454()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E74B8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E751C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

int64_t *sub_2539E7580(void *a1, int64_t a2, char a3)
{
  unint64_t result = sub_2539E8C50(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_2539E75A0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7604()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7668()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E76CC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7730()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7794()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E77F8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E785C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E78C0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7924()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7988()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E79EC()
{
  sub_2539E930C();
  void *v0 = v1;
}

void sub_2539E7A3C()
{
  sub_2539E925C();
  void *v0 = v1;
}

void sub_2539E7A8C()
{
  sub_2539E8EBC();
  void *v0 = v1;
}

void sub_2539E7ADC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7B40()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7BA4()
{
  sub_2539E8D84();
  void *v0 = v1;
}

void sub_2539E7BE8()
{
  sub_2539E8FB4();
  void *v0 = v1;
}

char *sub_2539E7C38(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_2539E9064(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_2539E7C58(char a1, uint64_t a2, char a3)
{
  sub_2539E93F4(a1, a2, a3, *v3, &qword_269CDE5B0, (void (*)(char *, uint64_t, char *))sub_2535257F8);
  *uint64_t v3 = v4;
}

char *sub_2539E7C94(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_2539E9148(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_2539E7CB4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7D18()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7D7C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7DE0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7E44()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7EA8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7F0C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7F70()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E7FD4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8038()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E809C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8100()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8164()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E81C8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E822C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8290()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E82F4()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8358()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E83BC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8420()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8484()
{
  sub_2539E925C();
  void *v0 = v1;
}

void sub_2539E84D4()
{
  sub_2539E925C();
  void *v0 = v1;
}

void sub_2539E8524()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8588()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E85EC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8650()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E86B4()
{
  sub_2539E930C();
  void *v0 = v1;
}

void sub_2539E8704()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8768()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E87CC()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8830()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8894()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E88F8()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E895C()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E89C0()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8A24(char a1, uint64_t a2, char a3)
{
  sub_2539E93F4(a1, a2, a3, *v3, &qword_269CE83E0, (void (*)(char *, uint64_t, char *))sub_2535257F8);
  *uint64_t v3 = v4;
}

void sub_2539E8A60()
{
  sub_2539E94C8();
  void *v0 = v1;
}

void sub_2539E8AC4()
{
  sub_2539E8D84();
  void *v0 = v1;
}

void sub_2539E8B08()
{
}

void *sub_2539E8B30(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_253462A5C(&qword_26B24A570);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    sub_253525190(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2539DFDA8(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void sub_2539E8C1C()
{
}

void *sub_2539E8C50(void *result, int64_t a2, char a3, int64_t *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = a4[2];
  if (v7 <= v8) {
    int64_t v9 = a4[2];
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_253462A5C(&qword_269CE8300);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  if (v5)
  {
    sub_2535253D4(v13, v8, v12);
    a4[2] = 0;
  }
  else
  {
    sub_253465498((char *)v13, v8, (char *)v12);
  }
  swift_release();
  return v10;
}

void sub_2539E8D28()
{
}

void sub_2539E8D5C()
{
}

void sub_2539E8D84()
{
  sub_2534B3258();
  sub_253A3C14C();
  if (v6)
  {
    sub_253526744();
    if (v8 != v9)
    {
      sub_25352676C();
      if (v8)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (!v11)
  {
    unint64_t v17 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  sub_253462A5C(v5);
  uint64_t v12 = sub_253462A5C(v2);
  sub_25346CB34(v12);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (void *)swift_allocObject();
  size_t v18 = j__malloc_size(v17);
  if (!v14)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 - v16 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_23;
  }
  v17[2] = v10;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
LABEL_18:
  uint64_t v20 = sub_253462A5C(v2);
  sub_253A3B808(v20);
  sub_2535786F4();
  unint64_t v22 = (unint64_t)v17 + v21;
  uint64_t v23 = v0 + v21;
  if (v3)
  {
    v1(v23, v10, v22);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    sub_2539E08DC(v23, v10, v22);
  }
  swift_release();
  sub_253465A14();
}

void sub_2539E8EBC()
{
  sub_253A3C14C();
  if (v5)
  {
    sub_253526744();
    if (v6 != v7)
    {
      sub_25352676C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v4)
  {
    sub_253462A5C(v8);
    char v9 = (const void *)sub_25351C914();
    sub_253A3F07C(v9);
    sub_2535269FC(v10);
  }
  uint64_t v11 = sub_253A3D41C();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_2539E8F6C()
{
}

void sub_2539E8FB4()
{
  sub_253A3C14C();
  if (v5)
  {
    sub_253526744();
    if (v6 != v7)
    {
      sub_25352676C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v4)
  {
    sub_253462A5C(v8);
    char v9 = (const void *)sub_25351C914();
    sub_253A3F07C(v9);
    sub_2535269FC(v10);
  }
  uint64_t v11 = sub_253A3D41C();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

char *sub_2539E9064(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_253462A5C(&qword_269CDE498);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_25352579C(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2539E03CC(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_2539E9148(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_253462A5C(&qword_269CDE5F0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_2535257FC(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2539E047C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void sub_2539E9234()
{
}

void sub_2539E925C()
{
  sub_253A3C14C();
  if (v5)
  {
    sub_253526744();
    if (v6 != v7)
    {
      sub_25352676C();
      if (v6)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v4)
  {
    sub_253462A5C(v8);
    uint64_t v9 = (const void *)sub_25351C914();
    sub_253A3F07C(v9);
    sub_2535269FC(v10);
  }
  uint64_t v11 = sub_253A3D41C();
  if (v3)
  {
    v2(v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v11);
  }
  swift_release();
}

void sub_2539E930C()
{
  sub_2535B3C98();
  sub_253A3C14C();
  if (v6)
  {
    sub_253526744();
    if (v7 != v8)
    {
      sub_25352676C();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  sub_253526948();
  if (v5)
  {
    sub_253462A5C(v9);
    uint64_t v10 = (const void *)swift_allocObject();
    sub_253A3F07C(v10);
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = 2 * (v11 / 24);
  }
  uint64_t v12 = sub_253A3D41C();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
  sub_25346CD04();
}

void sub_2539E93CC()
{
}

void sub_2539E93F4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(char *, uint64_t, char *))
{
  if (a3)
  {
    sub_253526744();
    if (v10 != v11)
    {
      sub_25352676C();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_253462A5C(a5);
    uint64_t v14 = (char *)sub_25351C914();
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 4);
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = v14 + 32;
  unint64_t v17 = (char *)(a4 + 32);
  if (a1)
  {
    a6(v17, v12, v16);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2539E0830(v17, v12, v16);
  }
  swift_release();
}

void sub_2539E94C8()
{
  sub_2534B3258();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  char v9 = v8;
  if (v10)
  {
    sub_253526744();
    if (v12 != v13)
    {
      sub_25352676C();
      if (v12)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_253526734();
    }
  }
  else
  {
    uint64_t v11 = v0;
  }
  uint64_t v14 = *(void *)(v7 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(v7 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    unint64_t v22 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  sub_253462A5C(v1);
  uint64_t v16 = sub_253A3EF6C();
  uint64_t v17 = v5(v16);
  sub_25346CB34(v17);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (void *)swift_allocObject();
  size_t v23 = j__malloc_size(v22);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v23 - v21 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_23;
  }
  void v22[2] = v14;
  v22[3] = 2 * ((uint64_t)(v23 - v21) / v19);
LABEL_18:
  v5(0);
  sub_2535786F4();
  unint64_t v26 = (unint64_t)v22 + v25;
  uint64_t v27 = v7 + v25;
  if (v9)
  {
    v3(v27, v14, v26);
    *(void *)(v7 + 16) = 0;
  }
  else
  {
    sub_2539DFCC0(v27, v14, v26);
  }
  swift_release();
  sub_253465A14();
}

uint64_t sub_2539E9634(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolParameterValue(0);
  uint64_t v34 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Action.ParameterValue(0);
  uint64_t v33 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_253462A5C(&qword_269CE83D8);
  uint64_t result = sub_253B0A230();
  char v9 = (void *)result;
  int64_t v10 = 0;
  uint64_t v35 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v12 - 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v31 = v12;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = result + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v10 << 6))
  {
    size_t v23 = (uint64_t *)(*(void *)(v35 + 48) + 16 * i);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    sub_2539DF660(*(void *)(v35 + 56) + *(void *)(v33 + 72) * i, (uint64_t)v7);
    sub_2539DF660((uint64_t)v7, (uint64_t)v4);
    swift_bridgeObjectRetain();
    sub_2539DF610();
    *(void *)(v17 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v26 = (void *)(v9[6] + 16 * i);
    *unint64_t v26 = v24;
    v26[1] = v25;
    uint64_t result = sub_2539DF5B8((uint64_t)v4, v9[7] + *(void *)(v34 + 72) * i);
    uint64_t v27 = v9[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v9[2] = v29;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_24;
    }
    if (v20 >= v32) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v31 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v32) {
        return (uint64_t)v9;
      }
      unint64_t v21 = *(void *)(v31 + 8 * v10);
      if (!v21)
      {
        int64_t v10 = v20 + 2;
        if (v20 + 2 >= v32) {
          return (uint64_t)v9;
        }
        unint64_t v21 = *(void *)(v31 + 8 * v10);
        if (!v21) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v16 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v32) {
    return (uint64_t)v9;
  }
  unint64_t v21 = *(void *)(v31 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v32) {
      return (uint64_t)v9;
    }
    unint64_t v21 = *(void *)(v31 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_2539E9988()
{
  sub_2534847F8();
  uint64_t v1 = v0;
  uint64_t v2 = sub_253462A5C(&qword_269CDCB00);
  uint64_t v3 = sub_25346CB4C(v2);
  MEMORY[0x270FA5388](v3);
  uint64_t v58 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_253483660();
  type metadata accessor for Action.ParameterValue(v5);
  sub_253465998();
  uint64_t v56 = v7;
  uint64_t v57 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v55 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_253483660();
  uint64_t v10 = type metadata accessor for ToolParameterValue(v9);
  uint64_t v11 = sub_25346CB34(v10);
  uint64_t v54 = v12;
  MEMORY[0x270FA5388](v11);
  sub_25347FA68(v13, v48);
  sub_253462A5C(&qword_269CE83D0);
  sub_253B0A230();
  uint64_t v59 = v1;
  sub_2534D8E34();
  unint64_t v17 = v16 & v15;
  uint64_t v49 = v1 + 64;
  int64_t v50 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v51 = v19 + 8;
  uint64_t v52 = v19;
  uint64_t v20 = v53;
  uint64_t v21 = (uint64_t)v55;
  if ((v16 & v15) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v22 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  int64_t v60 = v14;
  for (unint64_t i = v22 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v26 << 6))
  {
    BOOL v28 = (uint64_t *)(*(void *)(v59 + 48) + 16 * i);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    sub_2539DF660(*(void *)(v59 + 56) + *(void *)(v54 + 72) * i, v20);
    uint64_t v31 = sub_2534D99FC();
    sub_2539DF660(v31, v32);
    uint64_t v33 = sub_253B06770();
    uint64_t v34 = sub_253A3F84C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, v35, v36, v37);
    uint64_t v38 = sub_253A3E620();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v38, v39, v40, v33);
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_253579258();
    sub_2539F0BE0(v41, v42, &qword_269CDCB00);
    sub_2539DF610();
    uint64_t v43 = v52;
    *(void *)((char *)v51 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v44 = (void *)(v43[6] + 16 * i);
    *uint64_t v44 = v30;
    v44[1] = v29;
    sub_2539DF5B8(v21, v43[7] + *(void *)(v56 + 72) * i);
    uint64_t v45 = v43[2];
    BOOL v46 = __OFADD__(v45, 1);
    uint64_t v47 = v45 + 1;
    if (v46)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v43[2] = v47;
    int64_t v14 = v60;
    if (v17) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_22;
    }
    if (v24 >= v50) {
      goto LABEL_20;
    }
    unint64_t v25 = *(void *)(v49 + 8 * v24);
    int64_t v26 = v14 + 1;
    if (!v25)
    {
      int64_t v26 = v14 + 2;
      if (v14 + 2 >= v50) {
        goto LABEL_20;
      }
      unint64_t v25 = *(void *)(v49 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v14 + 3;
        if (v14 + 3 >= v50) {
          goto LABEL_20;
        }
        unint64_t v25 = *(void *)(v49 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_16:
    unint64_t v17 = (v25 - 1) & v25;
    int64_t v60 = v26;
  }
  uint64_t v27 = v14 + 4;
  if (v14 + 4 >= v50)
  {
LABEL_20:
    sub_2534847C8();
    return;
  }
  unint64_t v25 = *(void *)(v49 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v14 + 4;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v50) {
      goto LABEL_20;
    }
    unint64_t v25 = *(void *)(v49 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_16;
    }
  }
LABEL_23:
  __break(1u);
}

void sub_2539E9CF0()
{
  sub_2534847F8();
  uint64_t v51 = v2;
  uint64_t v4 = v3;
  uint64_t v38 = v1;
  uint64_t v5 = sub_2534D9690();
  v6(v5);
  sub_253465998();
  uint64_t v48 = v8;
  uint64_t v49 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (char *)&v38 - v9;
  uint64_t v46 = sub_253B09120();
  sub_253465998();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  sub_253483644(v13, v38);
  sub_253462A5C(v4);
  sub_253B0A230();
  uint64_t v50 = v0;
  sub_2534D8E34();
  unint64_t v17 = v16 & v15;
  uint64_t v39 = v0 + 64;
  int64_t v40 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v45 = v11;
  uint64_t v42 = v11 + 8;
  uint64_t v43 = v11 + 16;
  uint64_t v41 = v19 + 64;
  uint64_t v44 = v19;
  uint64_t v20 = (uint64_t)v47;
  if (!v17) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v52 = (v17 - 1) & v17;
  uint64_t v53 = v14;
  for (unint64_t i = __clz(__rbit64(v17)) | (v14 << 6); ; unint64_t i = v27 + (v26 << 6))
  {
    BOOL v28 = (uint64_t *)(*(void *)(v50 + 48) + 16 * i);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v31 = *(void (**)(void))(v11 + 16);
    sub_253944AE4();
    v31();
    sub_253A3E5C8();
    sub_253944AE4();
    v31();
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = *(void (**)(void))(v11 + 8);
    swift_bridgeObjectRetain();
    sub_2534D99FC();
    sub_253477128();
    v32();
    *(void *)(v41 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v33 = v44;
    uint64_t v34 = (void *)(*(void *)(v44 + 48) + 16 * i);
    *uint64_t v34 = v30;
    v34[1] = v29;
    sub_2539DF5B8(v20, *(void *)(v33 + 56) + *(void *)(v48 + 72) * i);
    uint64_t v35 = *(void *)(v33 + 16);
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v33 + 16) = v37;
    uint64_t v14 = v53;
    unint64_t v17 = v52;
    if (v52) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_21;
    }
    if (v22 >= v40) {
      goto LABEL_19;
    }
    if (!*(void *)(v39 + 8 * v22))
    {
      if (v14 + 2 >= v40) {
        goto LABEL_19;
      }
      if (!*(void *)(v39 + 8 * (v14 + 2)))
      {
        if (v14 + 3 >= v40) {
          goto LABEL_19;
        }
        if (!*(void *)(v39 + 8 * (v14 + 3)))
        {
          uint64_t v23 = v14 + 4;
          if (v14 + 4 >= v40)
          {
LABEL_19:
            sub_2534847C8();
            return;
          }
          if (!*(void *)(v39 + 8 * v23)) {
            break;
          }
        }
      }
    }
LABEL_15:
    sub_253A3F48C();
    uint64_t v52 = v25;
    uint64_t v53 = v26;
  }
  while (1)
  {
    int64_t v24 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v24 >= v40) {
      goto LABEL_19;
    }
    ++v23;
    if (*(void *)(v39 + 8 * v24)) {
      goto LABEL_15;
    }
  }
LABEL_22:
  __break(1u);
}

void sub_2539E9FE8()
{
  sub_253A3F728();
  if (v0)
  {
    sub_253A3EF4C();
    if (!v1)
    {
      sub_253A3EF38();
      if (v3 > v2 >> 16) {
        return;
      }
      __break(1u);
    }
  }
  sub_253A3EB38();
  sub_2539EA05C();
  if ((v4 & 1) == 0)
  {
    sub_253A3EB38();
    sub_2539EA0A4(v5, v6, v7);
  }
}

void sub_2539EA05C()
{
  sub_253A3F728();
  sub_253A3EF4C();
  if (v0)
  {
    sub_253A3EB38();
    sub_253A439BC(v3, v4, v5);
  }
  sub_253A3EF38();
  if (v2 <= v1 >> 16) {
    __break(1u);
  }
}

unint64_t sub_2539EA0A4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v12[2] = v3;
      v12[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v12[0] = a2;
        v12[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v12 + v5) & 0xC0) == 0x80)
        {
          do
            sub_253A3E1BC();
          while (v9);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v11 = result >> 16;
          uint64_t v6 = sub_253B0A0A0();
          unint64_t v5 = v11;
        }
        if (v5 != v7 && (*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
            sub_253A3E1BC();
          while (v9);
          return v8 << 16;
        }
      }
      unint64_t v8 = v5;
      return v8 << 16;
    }
    uint64_t v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v10)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

uint64_t type metadata accessor for ActionResolverRequest(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2491F8);
}

uint64_t type metadata accessor for SessionStart(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B2411E8);
}

uint64_t sub_2539EA1E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_2539EA224()
{
  unint64_t result = qword_26B249FC0;
  if (!qword_26B249FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FC0);
  }
  return result;
}

unint64_t sub_2539EA270()
{
  unint64_t result = qword_269CE5708;
  if (!qword_269CE5708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5708);
  }
  return result;
}

unint64_t sub_2539EA2BC()
{
  unint64_t result = qword_269CE5718;
  if (!qword_269CE5718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5718);
  }
  return result;
}

unint64_t sub_2539EA308()
{
  unint64_t result = qword_269CE5720;
  if (!qword_269CE5720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5720);
  }
  return result;
}

unint64_t sub_2539EA354()
{
  unint64_t result = qword_269CE5728;
  if (!qword_269CE5728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5728);
  }
  return result;
}

unint64_t sub_2539EA3A0()
{
  unint64_t result = qword_269CE5738;
  if (!qword_269CE5738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5738);
  }
  return result;
}

unint64_t sub_2539EA3EC()
{
  unint64_t result = qword_269CE5748;
  if (!qword_269CE5748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5748);
  }
  return result;
}

unint64_t sub_2539EA438()
{
  unint64_t result = qword_269CE5758;
  if (!qword_269CE5758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5758);
  }
  return result;
}

unint64_t sub_2539EA484()
{
  unint64_t result = qword_269CE5768;
  if (!qword_269CE5768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5768);
  }
  return result;
}

unint64_t sub_2539EA4D0()
{
  unint64_t result = qword_269CE5778;
  if (!qword_269CE5778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5778);
  }
  return result;
}

unint64_t sub_2539EA51C()
{
  unint64_t result = qword_269CE5788;
  if (!qword_269CE5788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5788);
  }
  return result;
}

unint64_t sub_2539EA568()
{
  unint64_t result = qword_269CE5790;
  if (!qword_269CE5790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5790);
  }
  return result;
}

unint64_t sub_2539EA5B4()
{
  unint64_t result = qword_269CE5798;
  if (!qword_269CE5798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5798);
  }
  return result;
}

unint64_t sub_2539EA600()
{
  unint64_t result = qword_269CE57A8;
  if (!qword_269CE57A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57A8);
  }
  return result;
}

unint64_t sub_2539EA64C()
{
  unint64_t result = qword_269CE57B8;
  if (!qword_269CE57B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57B8);
  }
  return result;
}

unint64_t sub_2539EA698()
{
  unint64_t result = qword_269CE57C8;
  if (!qword_269CE57C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57C8);
  }
  return result;
}

unint64_t sub_2539EA6E4()
{
  unint64_t result = qword_269CE57D8;
  if (!qword_269CE57D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57D8);
  }
  return result;
}

unint64_t sub_2539EA730()
{
  unint64_t result = qword_269CE57E0;
  if (!qword_269CE57E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57E0);
  }
  return result;
}

unint64_t sub_2539EA77C()
{
  unint64_t result = qword_269CE57E8;
  if (!qword_269CE57E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57E8);
  }
  return result;
}

unint64_t sub_2539EA7C8()
{
  unint64_t result = qword_269CE57F0;
  if (!qword_269CE57F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57F0);
  }
  return result;
}

unint64_t sub_2539EA814()
{
  unint64_t result = qword_269CE57F8;
  if (!qword_269CE57F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE57F8);
  }
  return result;
}

unint64_t sub_2539EA860()
{
  unint64_t result = qword_269CE5800;
  if (!qword_269CE5800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5800);
  }
  return result;
}

unint64_t sub_2539EA8AC()
{
  unint64_t result = qword_269CE5808;
  if (!qword_269CE5808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5808);
  }
  return result;
}

unint64_t sub_2539EA8F8()
{
  unint64_t result = qword_269CE5810;
  if (!qword_269CE5810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5810);
  }
  return result;
}

unint64_t sub_2539EA944()
{
  unint64_t result = qword_269CE5818;
  if (!qword_269CE5818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5818);
  }
  return result;
}

unint64_t sub_2539EA990()
{
  unint64_t result = qword_269CE5820;
  if (!qword_269CE5820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5820);
  }
  return result;
}

unint64_t sub_2539EA9DC()
{
  unint64_t result = qword_269CE5828;
  if (!qword_269CE5828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5828);
  }
  return result;
}

unint64_t sub_2539EAA28()
{
  unint64_t result = qword_269CE5830;
  if (!qword_269CE5830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5830);
  }
  return result;
}

unint64_t sub_2539EAA74()
{
  unint64_t result = qword_269CE5838;
  if (!qword_269CE5838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5838);
  }
  return result;
}

unint64_t sub_2539EAAC0()
{
  unint64_t result = qword_269CE5840;
  if (!qword_269CE5840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5840);
  }
  return result;
}

unint64_t sub_2539EAB0C()
{
  unint64_t result = qword_269CE5848;
  if (!qword_269CE5848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5848);
  }
  return result;
}

unint64_t sub_2539EAB58()
{
  unint64_t result = qword_269CE5850;
  if (!qword_269CE5850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5850);
  }
  return result;
}

unint64_t sub_2539EABA4()
{
  unint64_t result = qword_269CE5858;
  if (!qword_269CE5858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5858);
  }
  return result;
}

unint64_t sub_2539EABF0()
{
  unint64_t result = qword_269CE5860;
  if (!qword_269CE5860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5860);
  }
  return result;
}

unint64_t sub_2539EAC3C()
{
  unint64_t result = qword_269CE5868;
  if (!qword_269CE5868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5868);
  }
  return result;
}

unint64_t sub_2539EAC88()
{
  unint64_t result = qword_269CE5870;
  if (!qword_269CE5870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5870);
  }
  return result;
}

unint64_t sub_2539EACD4()
{
  unint64_t result = qword_269CE5878;
  if (!qword_269CE5878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5878);
  }
  return result;
}

unint64_t sub_2539EAD20()
{
  unint64_t result = qword_269CE5888;
  if (!qword_269CE5888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5888);
  }
  return result;
}

unint64_t sub_2539EAD6C()
{
  unint64_t result = qword_269CE5898;
  if (!qword_269CE5898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5898);
  }
  return result;
}

unint64_t sub_2539EADB8()
{
  unint64_t result = qword_269CE58A8;
  if (!qword_269CE58A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58A8);
  }
  return result;
}

unint64_t sub_2539EAE04()
{
  unint64_t result = qword_269CE58B8;
  if (!qword_269CE58B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58B8);
  }
  return result;
}

unint64_t sub_2539EAE50()
{
  unint64_t result = qword_269CE58C8;
  if (!qword_269CE58C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58C8);
  }
  return result;
}

unint64_t sub_2539EAE9C()
{
  unint64_t result = qword_26B249FF8;
  if (!qword_26B249FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FF8);
  }
  return result;
}

unint64_t sub_2539EAEE8()
{
  unint64_t result = qword_269CE58D8;
  if (!qword_269CE58D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58D8);
  }
  return result;
}

unint64_t sub_2539EAF34()
{
  unint64_t result = qword_269CE58E0;
  if (!qword_269CE58E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58E0);
  }
  return result;
}

unint64_t sub_2539EAF80()
{
  unint64_t result = qword_269CE58E8;
  if (!qword_269CE58E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58E8);
  }
  return result;
}

unint64_t sub_2539EAFCC()
{
  unint64_t result = qword_269CE58F0;
  if (!qword_269CE58F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58F0);
  }
  return result;
}

unint64_t sub_2539EB018()
{
  unint64_t result = qword_269CE58F8;
  if (!qword_269CE58F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE58F8);
  }
  return result;
}

unint64_t sub_2539EB064()
{
  unint64_t result = qword_269CE5900;
  if (!qword_269CE5900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5900);
  }
  return result;
}

unint64_t sub_2539EB0B0()
{
  unint64_t result = qword_269CE5908;
  if (!qword_269CE5908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5908);
  }
  return result;
}

unint64_t sub_2539EB0FC()
{
  unint64_t result = qword_269CE5910;
  if (!qword_269CE5910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5910);
  }
  return result;
}

unint64_t sub_2539EB148()
{
  unint64_t result = qword_269CE5918;
  if (!qword_269CE5918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5918);
  }
  return result;
}

unint64_t sub_2539EB194()
{
  unint64_t result = qword_269CE5920;
  if (!qword_269CE5920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5920);
  }
  return result;
}

unint64_t sub_2539EB1E0()
{
  unint64_t result = qword_269CE5928;
  if (!qword_269CE5928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5928);
  }
  return result;
}

unint64_t sub_2539EB22C()
{
  unint64_t result = qword_269CE5938;
  if (!qword_269CE5938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5938);
  }
  return result;
}

unint64_t sub_2539EB278()
{
  unint64_t result = qword_269CE5948;
  if (!qword_269CE5948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5948);
  }
  return result;
}

unint64_t sub_2539EB2C4()
{
  unint64_t result = qword_269CE5958;
  if (!qword_269CE5958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5958);
  }
  return result;
}

unint64_t sub_2539EB310()
{
  unint64_t result = qword_269CE5968;
  if (!qword_269CE5968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5968);
  }
  return result;
}

unint64_t sub_2539EB35C()
{
  unint64_t result = qword_269CE5970;
  if (!qword_269CE5970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5970);
  }
  return result;
}

unint64_t sub_2539EB3A8()
{
  unint64_t result = qword_269CE5978;
  if (!qword_269CE5978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5978);
  }
  return result;
}

unint64_t sub_2539EB3F4()
{
  unint64_t result = qword_269CE5980;
  if (!qword_269CE5980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5980);
  }
  return result;
}

unint64_t sub_2539EB440()
{
  unint64_t result = qword_269CE5990;
  if (!qword_269CE5990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5990);
  }
  return result;
}

unint64_t sub_2539EB48C()
{
  unint64_t result = qword_269CE5998;
  if (!qword_269CE5998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5998);
  }
  return result;
}

unint64_t sub_2539EB4D8()
{
  unint64_t result = qword_269CE59A0;
  if (!qword_269CE59A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE59A0);
  }
  return result;
}

unint64_t sub_2539EB524()
{
  unint64_t result = qword_26B249F98;
  if (!qword_26B249F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F98);
  }
  return result;
}

unint64_t sub_2539EB570()
{
  unint64_t result = qword_269CE5B48;
  if (!qword_269CE5B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5B48);
  }
  return result;
}

unint64_t sub_2539EB5BC()
{
  unint64_t result = qword_269CE5B80;
  if (!qword_269CE5B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5B80);
  }
  return result;
}

unint64_t sub_2539EB608()
{
  unint64_t result = qword_269CE5BA8;
  if (!qword_269CE5BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BA8);
  }
  return result;
}

unint64_t sub_2539EB654()
{
  unint64_t result = qword_269CE5BB0;
  if (!qword_269CE5BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BB0);
  }
  return result;
}

unint64_t sub_2539EB6A0()
{
  unint64_t result = qword_269CE5BB8;
  if (!qword_269CE5BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BB8);
  }
  return result;
}

unint64_t sub_2539EB6EC()
{
  unint64_t result = qword_269CE5BC0;
  if (!qword_269CE5BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BC0);
  }
  return result;
}

unint64_t sub_2539EB738()
{
  unint64_t result = qword_269CE5BC8;
  if (!qword_269CE5BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BC8);
  }
  return result;
}

unint64_t sub_2539EB784()
{
  unint64_t result = qword_269CE5BD0;
  if (!qword_269CE5BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BD0);
  }
  return result;
}

unint64_t sub_2539EB7D0()
{
  unint64_t result = qword_269CE5BD8;
  if (!qword_269CE5BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BD8);
  }
  return result;
}

unint64_t sub_2539EB81C()
{
  unint64_t result = qword_269CE5BE0;
  if (!qword_269CE5BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BE0);
  }
  return result;
}

unint64_t sub_2539EB868()
{
  unint64_t result = qword_269CE5BE8;
  if (!qword_269CE5BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5BE8);
  }
  return result;
}

unint64_t sub_2539EB8B4()
{
  unint64_t result = qword_269CE5C20;
  if (!qword_269CE5C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5C20);
  }
  return result;
}

unint64_t sub_2539EB900()
{
  unint64_t result = qword_269CE5C28;
  if (!qword_269CE5C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5C28);
  }
  return result;
}

unint64_t sub_2539EB94C()
{
  unint64_t result = qword_269CE5C30;
  if (!qword_269CE5C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5C30);
  }
  return result;
}

unint64_t sub_2539EB998()
{
  unint64_t result = qword_269CE5C58;
  if (!qword_269CE5C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5C58);
  }
  return result;
}

unint64_t sub_2539EB9E4()
{
  unint64_t result = qword_269CE5C68;
  if (!qword_269CE5C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5C68);
  }
  return result;
}

unint64_t sub_2539EBA30()
{
  unint64_t result = qword_26B249F70;
  if (!qword_26B249F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F70);
  }
  return result;
}

void sub_2539EBA7C()
{
  sub_253A3C038();
  if (!sub_2534DA1D4(v1))
  {
    uint64_t v4 = v3;
    unint64_t v5 = v2;
    sub_25347907C(&qword_26B24A380);
    v5();
    v4();
    sub_253578EEC();
    atomic_store(swift_getWitnessTable(), v0);
  }
  sub_253A3BEC0();
}

uint64_t sub_2539EBAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_2539EBB38()
{
  unint64_t result = qword_269CE5CB8;
  if (!qword_269CE5CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5CB8);
  }
  return result;
}

unint64_t sub_2539EBB84()
{
  unint64_t result = qword_269CE5CC0;
  if (!qword_269CE5CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5CC0);
  }
  return result;
}

unint64_t sub_2539EBBD0()
{
  unint64_t result = qword_269CE5CC8;
  if (!qword_269CE5CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5CC8);
  }
  return result;
}

unint64_t sub_2539EBC1C()
{
  unint64_t result = qword_269CE5CD0;
  if (!qword_269CE5CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5CD0);
  }
  return result;
}

unint64_t sub_2539EBC68()
{
  unint64_t result = qword_269CE5D00;
  if (!qword_269CE5D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D00);
  }
  return result;
}

unint64_t sub_2539EBCB4()
{
  unint64_t result = qword_269CE5D18;
  if (!qword_269CE5D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D18);
  }
  return result;
}

unint64_t sub_2539EBD00()
{
  unint64_t result = qword_269CE5D28;
  if (!qword_269CE5D28)
  {
    sub_25347907C(&qword_269CE5D20);
    sub_2539E6F90((uint64_t)&unk_269CE5D30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D28);
  }
  return result;
}

unint64_t sub_2539EBDA4()
{
  unint64_t result = qword_269CE5D38;
  if (!qword_269CE5D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D38);
  }
  return result;
}

unint64_t sub_2539EBDF0()
{
  unint64_t result = qword_269CE5D48;
  if (!qword_269CE5D48)
  {
    sub_25347907C(&qword_269CE5D20);
    sub_2539E6F90((uint64_t)&unk_269CE5D50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D48);
  }
  return result;
}

unint64_t sub_2539EBE94()
{
  unint64_t result = qword_269CE5D58;
  if (!qword_269CE5D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D58);
  }
  return result;
}

unint64_t sub_2539EBEE0()
{
  unint64_t result = qword_269CE5D70;
  if (!qword_269CE5D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D70);
  }
  return result;
}

unint64_t sub_2539EBF2C()
{
  unint64_t result = qword_269CE5D78;
  if (!qword_269CE5D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D78);
  }
  return result;
}

unint64_t sub_2539EBF78()
{
  unint64_t result = qword_269CE5D80;
  if (!qword_269CE5D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D80);
  }
  return result;
}

unint64_t sub_2539EBFC4()
{
  unint64_t result = qword_269CE5D98;
  if (!qword_269CE5D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5D98);
  }
  return result;
}

unint64_t sub_2539EC010()
{
  unint64_t result = qword_269CE5DB0;
  if (!qword_269CE5DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5DB0);
  }
  return result;
}

unint64_t sub_2539EC05C()
{
  unint64_t result = qword_269CE5DB8;
  if (!qword_269CE5DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5DB8);
  }
  return result;
}

unint64_t sub_2539EC0A8()
{
  unint64_t result = qword_269CE5DC0;
  if (!qword_269CE5DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5DC0);
  }
  return result;
}

unint64_t sub_2539EC0F4()
{
  unint64_t result = qword_269CE5DD8;
  if (!qword_269CE5DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5DD8);
  }
  return result;
}

unint64_t sub_2539EC140()
{
  unint64_t result = qword_269CE5DE8;
  if (!qword_269CE5DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5DE8);
  }
  return result;
}

unint64_t sub_2539EC18C()
{
  unint64_t result = qword_26B248F88;
  if (!qword_26B248F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248F88);
  }
  return result;
}

unint64_t sub_2539EC1D8()
{
  unint64_t result = qword_269CE5E20;
  if (!qword_269CE5E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E20);
  }
  return result;
}

unint64_t sub_2539EC224()
{
  unint64_t result = qword_269CE5E78;
  if (!qword_269CE5E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E78);
  }
  return result;
}

unint64_t sub_2539EC270()
{
  unint64_t result = qword_269CE5E80;
  if (!qword_269CE5E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E80);
  }
  return result;
}

unint64_t sub_2539EC2BC()
{
  unint64_t result = qword_269CE5E88;
  if (!qword_269CE5E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E88);
  }
  return result;
}

unint64_t sub_2539EC308()
{
  unint64_t result = qword_269CE5E90;
  if (!qword_269CE5E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E90);
  }
  return result;
}

unint64_t sub_2539EC354()
{
  unint64_t result = qword_269CE5E98;
  if (!qword_269CE5E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5E98);
  }
  return result;
}

unint64_t sub_2539EC3A0()
{
  unint64_t result = qword_269CE5EA8;
  if (!qword_269CE5EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5EA8);
  }
  return result;
}

unint64_t sub_2539EC3EC()
{
  unint64_t result = qword_269CE5EB0;
  if (!qword_269CE5EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5EB0);
  }
  return result;
}

unint64_t sub_2539EC438()
{
  unint64_t result = qword_269CE5EE0;
  if (!qword_269CE5EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5EE0);
  }
  return result;
}

unint64_t sub_2539EC484()
{
  unint64_t result = qword_269CE5EF0;
  if (!qword_269CE5EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5EF0);
  }
  return result;
}

unint64_t sub_2539EC4D0()
{
  unint64_t result = qword_269CE5F00;
  if (!qword_269CE5F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F00);
  }
  return result;
}

unint64_t sub_2539EC51C()
{
  unint64_t result = qword_269CE5F10;
  if (!qword_269CE5F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F10);
  }
  return result;
}

unint64_t sub_2539EC568()
{
  unint64_t result = qword_269CE5F28;
  if (!qword_269CE5F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F28);
  }
  return result;
}

unint64_t sub_2539EC5B4()
{
  unint64_t result = qword_269CE5F38;
  if (!qword_269CE5F38)
  {
    sub_25347907C(&qword_269CE5F30);
    sub_2539E6F90((uint64_t)&unk_269CE5F40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F38);
  }
  return result;
}

unint64_t sub_2539EC658()
{
  unint64_t result = qword_269CE5F50;
  if (!qword_269CE5F50)
  {
    sub_25347907C(&qword_269CE5F30);
    sub_2539E6F90((uint64_t)&unk_269CE5F58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F50);
  }
  return result;
}

unint64_t sub_2539EC6FC()
{
  unint64_t result = qword_269CE5F90;
  if (!qword_269CE5F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F90);
  }
  return result;
}

unint64_t sub_2539EC748()
{
  unint64_t result = qword_269CE5F98;
  if (!qword_269CE5F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5F98);
  }
  return result;
}

unint64_t sub_2539EC794()
{
  unint64_t result = qword_269CE5FA0;
  if (!qword_269CE5FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5FA0);
  }
  return result;
}

unint64_t sub_2539EC7E0()
{
  unint64_t result = qword_269CE5FA8;
  if (!qword_269CE5FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5FA8);
  }
  return result;
}

unint64_t sub_2539EC82C()
{
  unint64_t result = qword_269CE5FB0;
  if (!qword_269CE5FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5FB0);
  }
  return result;
}

unint64_t sub_2539EC878()
{
  unint64_t result = qword_269CE6030;
  if (!qword_269CE6030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6030);
  }
  return result;
}

unint64_t sub_2539EC8C4()
{
  unint64_t result = qword_269CE6038;
  if (!qword_269CE6038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6038);
  }
  return result;
}

unint64_t sub_2539EC910()
{
  unint64_t result = qword_269CE6040;
  if (!qword_269CE6040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6040);
  }
  return result;
}

unint64_t sub_2539EC95C()
{
  unint64_t result = qword_269CE6048;
  if (!qword_269CE6048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6048);
  }
  return result;
}

unint64_t sub_2539EC9A8()
{
  unint64_t result = qword_269CE6050;
  if (!qword_269CE6050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6050);
  }
  return result;
}

unint64_t sub_2539EC9F4()
{
  unint64_t result = qword_269CE6058;
  if (!qword_269CE6058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6058);
  }
  return result;
}

unint64_t sub_2539ECA40()
{
  unint64_t result = qword_269CE6060;
  if (!qword_269CE6060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6060);
  }
  return result;
}

unint64_t sub_2539ECA8C()
{
  unint64_t result = qword_269CE6068;
  if (!qword_269CE6068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6068);
  }
  return result;
}

unint64_t sub_2539ECAD8()
{
  unint64_t result = qword_269CE6070;
  if (!qword_269CE6070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6070);
  }
  return result;
}

unint64_t sub_2539ECB24()
{
  unint64_t result = qword_269CE6078;
  if (!qword_269CE6078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6078);
  }
  return result;
}

unint64_t sub_2539ECB70()
{
  unint64_t result = qword_269CE6080;
  if (!qword_269CE6080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6080);
  }
  return result;
}

unint64_t sub_2539ECBBC()
{
  unint64_t result = qword_269CE60D0;
  if (!qword_269CE60D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE60D0);
  }
  return result;
}

unint64_t sub_2539ECC08()
{
  unint64_t result = qword_269CE60D8;
  if (!qword_269CE60D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE60D8);
  }
  return result;
}

unint64_t sub_2539ECC54()
{
  unint64_t result = qword_269CE60E8;
  if (!qword_269CE60E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE60E8);
  }
  return result;
}

unint64_t sub_2539ECCA0()
{
  unint64_t result = qword_269CE6100;
  if (!qword_269CE6100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6100);
  }
  return result;
}

unint64_t sub_2539ECCEC()
{
  unint64_t result = qword_269CE6110;
  if (!qword_269CE6110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6110);
  }
  return result;
}

unint64_t sub_2539ECD38()
{
  unint64_t result = qword_269CE6148;
  if (!qword_269CE6148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6148);
  }
  return result;
}

unint64_t sub_2539ECD84()
{
  unint64_t result = qword_269CE61A8;
  if (!qword_269CE61A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61A8);
  }
  return result;
}

unint64_t sub_2539ECDD0()
{
  unint64_t result = qword_269CE61B0;
  if (!qword_269CE61B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61B0);
  }
  return result;
}

unint64_t sub_2539ECE1C()
{
  unint64_t result = qword_269CE61B8;
  if (!qword_269CE61B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61B8);
  }
  return result;
}

unint64_t sub_2539ECE68()
{
  unint64_t result = qword_269CE61C0;
  if (!qword_269CE61C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61C0);
  }
  return result;
}

unint64_t sub_2539ECEB4()
{
  unint64_t result = qword_269CE61D0;
  if (!qword_269CE61D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61D0);
  }
  return result;
}

unint64_t sub_2539ECF00()
{
  unint64_t result = qword_269CE61D8;
  if (!qword_269CE61D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61D8);
  }
  return result;
}

unint64_t sub_2539ECF4C()
{
  unint64_t result = qword_269CE61E0;
  if (!qword_269CE61E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61E0);
  }
  return result;
}

unint64_t sub_2539ECF98()
{
  unint64_t result = qword_269CE61E8;
  if (!qword_269CE61E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61E8);
  }
  return result;
}

unint64_t sub_2539ECFE4()
{
  unint64_t result = qword_269CE61F0;
  if (!qword_269CE61F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61F0);
  }
  return result;
}

unint64_t sub_2539ED030()
{
  unint64_t result = qword_269CE61F8;
  if (!qword_269CE61F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE61F8);
  }
  return result;
}

unint64_t sub_2539ED07C()
{
  unint64_t result = qword_269CE6200;
  if (!qword_269CE6200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6200);
  }
  return result;
}

unint64_t sub_2539ED0C8()
{
  unint64_t result = qword_269CE6208;
  if (!qword_269CE6208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6208);
  }
  return result;
}

unint64_t sub_2539ED114()
{
  unint64_t result = qword_269CE6210;
  if (!qword_269CE6210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6210);
  }
  return result;
}

unint64_t sub_2539ED160()
{
  unint64_t result = qword_269CE6218;
  if (!qword_269CE6218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6218);
  }
  return result;
}

unint64_t sub_2539ED1AC()
{
  unint64_t result = qword_269CE6220;
  if (!qword_269CE6220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6220);
  }
  return result;
}

unint64_t sub_2539ED1F8()
{
  unint64_t result = qword_269CE6228;
  if (!qword_269CE6228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6228);
  }
  return result;
}

unint64_t sub_2539ED244()
{
  unint64_t result = qword_269CE6278;
  if (!qword_269CE6278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6278);
  }
  return result;
}

unint64_t sub_2539ED290()
{
  unint64_t result = qword_269CE6288;
  if (!qword_269CE6288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6288);
  }
  return result;
}

unint64_t sub_2539ED2DC()
{
  unint64_t result = qword_269CE6290;
  if (!qword_269CE6290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6290);
  }
  return result;
}

unint64_t sub_2539ED328()
{
  unint64_t result = qword_269CE6298;
  if (!qword_269CE6298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6298);
  }
  return result;
}

unint64_t sub_2539ED374()
{
  unint64_t result = qword_269CE62A0;
  if (!qword_269CE62A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62A0);
  }
  return result;
}

unint64_t sub_2539ED3C0()
{
  unint64_t result = qword_269CE62A8;
  if (!qword_269CE62A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62A8);
  }
  return result;
}

unint64_t sub_2539ED40C()
{
  unint64_t result = qword_269CE62B0;
  if (!qword_269CE62B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62B0);
  }
  return result;
}

unint64_t sub_2539ED458()
{
  unint64_t result = qword_269CE62C0;
  if (!qword_269CE62C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62C0);
  }
  return result;
}

unint64_t sub_2539ED4A4()
{
  unint64_t result = qword_269CE62D8;
  if (!qword_269CE62D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62D8);
  }
  return result;
}

unint64_t sub_2539ED4F0()
{
  unint64_t result = qword_269CE62F0;
  if (!qword_269CE62F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE62F0);
  }
  return result;
}

unint64_t sub_2539ED53C()
{
  unint64_t result = qword_269CE6308;
  if (!qword_269CE6308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6308);
  }
  return result;
}

unint64_t sub_2539ED588()
{
  unint64_t result = qword_269CE6320;
  if (!qword_269CE6320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6320);
  }
  return result;
}

unint64_t sub_2539ED5D4()
{
  unint64_t result = qword_269CE6338;
  if (!qword_269CE6338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6338);
  }
  return result;
}

unint64_t sub_2539ED620()
{
  unint64_t result = qword_269CE6350;
  if (!qword_269CE6350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6350);
  }
  return result;
}

unint64_t sub_2539ED66C()
{
  unint64_t result = qword_269CE6368;
  if (!qword_269CE6368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6368);
  }
  return result;
}

unint64_t sub_2539ED6B8()
{
  unint64_t result = qword_269CE6380;
  if (!qword_269CE6380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6380);
  }
  return result;
}

unint64_t sub_2539ED704()
{
  unint64_t result = qword_269CE6398;
  if (!qword_269CE6398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6398);
  }
  return result;
}

unint64_t sub_2539ED750()
{
  unint64_t result = qword_269CE63B0;
  if (!qword_269CE63B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE63B0);
  }
  return result;
}

unint64_t sub_2539ED79C()
{
  unint64_t result = qword_269CE63C8;
  if (!qword_269CE63C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE63C8);
  }
  return result;
}

unint64_t sub_2539ED7E8()
{
  unint64_t result = qword_269CE6400;
  if (!qword_269CE6400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6400);
  }
  return result;
}

unint64_t sub_2539ED834()
{
  unint64_t result = qword_269CE6418;
  if (!qword_269CE6418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6418);
  }
  return result;
}

unint64_t sub_2539ED880()
{
  unint64_t result = qword_269CE6430;
  if (!qword_269CE6430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6430);
  }
  return result;
}

unint64_t sub_2539ED8CC()
{
  unint64_t result = qword_269CE6440;
  if (!qword_269CE6440)
  {
    sub_25347907C(&qword_269CE6438);
    sub_2539E6F90((uint64_t)&unk_269CE6448);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6440);
  }
  return result;
}

uint64_t type metadata accessor for ExecutionStepResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7178);
}

unint64_t sub_2539ED990()
{
  unint64_t result = qword_269CE6458;
  if (!qword_269CE6458)
  {
    sub_25347907C(&qword_269CE6438);
    sub_2539E6F90((uint64_t)&unk_269CE6460);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6458);
  }
  return result;
}

uint64_t type metadata accessor for ToolParameterValue(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7110);
}

unint64_t sub_2539EDA54()
{
  unint64_t result = qword_269CE6480;
  if (!qword_269CE6480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6480);
  }
  return result;
}

unint64_t sub_2539EDAA0()
{
  unint64_t result = qword_269CE6488;
  if (!qword_269CE6488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6488);
  }
  return result;
}

unint64_t sub_2539EDAEC()
{
  unint64_t result = qword_269CE6490;
  if (!qword_269CE6490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6490);
  }
  return result;
}

unint64_t sub_2539EDB38()
{
  unint64_t result = qword_269CE64B8;
  if (!qword_269CE64B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE64B8);
  }
  return result;
}

unint64_t sub_2539EDB84()
{
  unint64_t result = qword_269CE64D0;
  if (!qword_269CE64D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE64D0);
  }
  return result;
}

unint64_t sub_2539EDBD0()
{
  unint64_t result = qword_269CE6508;
  if (!qword_269CE6508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6508);
  }
  return result;
}

unint64_t sub_2539EDC1C()
{
  unint64_t result = qword_269CE6518;
  if (!qword_269CE6518)
  {
    sub_25347907C(&qword_269CE6510);
    sub_2539E6F90((uint64_t)&unk_269CE6520);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6518);
  }
  return result;
}

unint64_t sub_2539EDCC8()
{
  unint64_t result = qword_269CE6530;
  if (!qword_269CE6530)
  {
    sub_25347907C(&qword_269CE6510);
    sub_2539E6F90((uint64_t)&unk_269CE6538);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6530);
  }
  return result;
}

unint64_t sub_2539EDD74()
{
  unint64_t result = qword_269CE6548;
  if (!qword_269CE6548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6548);
  }
  return result;
}

uint64_t type metadata accessor for ClientAction.UnresolvedParameterValue(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7158);
}

uint64_t type metadata accessor for ClientAction.ShimParameterResolution(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7138);
}

unint64_t sub_2539EDE00()
{
  unint64_t result = qword_269CE6570;
  if (!qword_269CE6570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6570);
  }
  return result;
}

unint64_t sub_2539EDE4C()
{
  unint64_t result = qword_269CE6578;
  if (!qword_269CE6578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6578);
  }
  return result;
}

unint64_t sub_2539EDE98()
{
  unint64_t result = qword_269CE6588;
  if (!qword_269CE6588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6588);
  }
  return result;
}

uint64_t sub_2539EDEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_2539EDF2C()
{
  unint64_t result = qword_269CE65D8;
  if (!qword_269CE65D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE65D8);
  }
  return result;
}

unint64_t sub_2539EDF78()
{
  unint64_t result = qword_269CE65E0;
  if (!qword_269CE65E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE65E0);
  }
  return result;
}

unint64_t sub_2539EDFC4()
{
  unint64_t result = qword_269CE65E8;
  if (!qword_269CE65E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE65E8);
  }
  return result;
}

unint64_t sub_2539EE010()
{
  unint64_t result = qword_269CE65F0;
  if (!qword_269CE65F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE65F0);
  }
  return result;
}

unint64_t sub_2539EE05C()
{
  unint64_t result = qword_269CE65F8;
  if (!qword_269CE65F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE65F8);
  }
  return result;
}

unint64_t sub_2539EE0A8()
{
  unint64_t result = qword_269CE6620;
  if (!qword_269CE6620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6620);
  }
  return result;
}

unint64_t sub_2539EE0F4()
{
  unint64_t result = qword_269CE6648;
  if (!qword_269CE6648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6648);
  }
  return result;
}

unint64_t sub_2539EE140()
{
  unint64_t result = qword_269CE6650;
  if (!qword_269CE6650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6650);
  }
  return result;
}

unint64_t sub_2539EE18C()
{
  unint64_t result = qword_269CE6658;
  if (!qword_269CE6658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6658);
  }
  return result;
}

unint64_t sub_2539EE1D8()
{
  unint64_t result = qword_269CE6660;
  if (!qword_269CE6660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6660);
  }
  return result;
}

unint64_t sub_2539EE224()
{
  unint64_t result = qword_269CE6690;
  if (!qword_269CE6690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6690);
  }
  return result;
}

unint64_t sub_2539EE270()
{
  unint64_t result = qword_269CE6698;
  if (!qword_269CE6698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6698);
  }
  return result;
}

unint64_t sub_2539EE2BC()
{
  unint64_t result = qword_269CE66A8;
  if (!qword_269CE66A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66A8);
  }
  return result;
}

unint64_t sub_2539EE308()
{
  unint64_t result = qword_269CE66B8;
  if (!qword_269CE66B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66B8);
  }
  return result;
}

unint64_t sub_2539EE354()
{
  unint64_t result = qword_269CE66C0;
  if (!qword_269CE66C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66C0);
  }
  return result;
}

unint64_t sub_2539EE3A0()
{
  unint64_t result = qword_269CE66D0;
  if (!qword_269CE66D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66D0);
  }
  return result;
}

unint64_t sub_2539EE3EC()
{
  unint64_t result = qword_269CE66E0;
  if (!qword_269CE66E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66E0);
  }
  return result;
}

unint64_t sub_2539EE438()
{
  unint64_t result = qword_269CE54E8;
  if (!qword_269CE54E8)
  {
    sub_25347907C(&qword_269CDF1B8);
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE54E8);
  }
  return result;
}

unint64_t sub_2539EE4DC()
{
  unint64_t result = qword_269CE5500;
  if (!qword_269CE5500)
  {
    sub_25347907C(&qword_269CDF1B8);
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE5500);
  }
  return result;
}

unint64_t sub_2539EE580()
{
  unint64_t result = qword_269CE66F8;
  if (!qword_269CE66F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE66F8);
  }
  return result;
}

unint64_t sub_2539EE5CC()
{
  unint64_t result = qword_269CE6708;
  if (!qword_269CE6708)
  {
    sub_25347907C(&qword_269CE6700);
    sub_2539E6F90((uint64_t)&unk_269CE6710);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6708);
  }
  return result;
}

unint64_t sub_2539EE678()
{
  unint64_t result = qword_269CE6720;
  if (!qword_269CE6720)
  {
    sub_25347907C(&qword_269CE6718);
    sub_2539E6F90((uint64_t)&unk_269CE6728);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6720);
  }
  return result;
}

unint64_t sub_2539EE724()
{
  unint64_t result = qword_269CE6738;
  if (!qword_269CE6738)
  {
    sub_25347907C(&qword_269CE6700);
    sub_2539E6F90((uint64_t)&unk_269CE6740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6738);
  }
  return result;
}

unint64_t sub_2539EE7D0()
{
  unint64_t result = qword_269CE6748;
  if (!qword_269CE6748)
  {
    sub_25347907C(&qword_269CE6718);
    sub_2539E6F90((uint64_t)&unk_269CE6750);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6748);
  }
  return result;
}

unint64_t sub_2539EE87C()
{
  unint64_t result = qword_269CE6760;
  if (!qword_269CE6760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6760);
  }
  return result;
}

unint64_t sub_2539EE8C8()
{
  unint64_t result = qword_269CE6770;
  if (!qword_269CE6770)
  {
    sub_25347907C(&qword_269CE6768);
    sub_2539E6F90((uint64_t)&unk_269CE6778);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6770);
  }
  return result;
}

unint64_t sub_2539EE96C()
{
  unint64_t result = qword_269CE6788;
  if (!qword_269CE6788)
  {
    sub_25347907C(&qword_269CE6768);
    sub_2539E6F90((uint64_t)&unk_269CE6790);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6788);
  }
  return result;
}

uint64_t type metadata accessor for QueryData(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7188);
}

uint64_t type metadata accessor for PropertyQuery(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE7198);
}

unint64_t sub_2539EEA50()
{
  unint64_t result = qword_269CE67A8;
  if (!qword_269CE67A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE67A8);
  }
  return result;
}

unint64_t sub_2539EEA9C()
{
  unint64_t result = qword_269CE67C0;
  if (!qword_269CE67C0)
  {
    sub_25347907C(&qword_269CE67B8);
    sub_2539E6F90((uint64_t)&qword_269CDBFB8);
    sub_2539E6F90((uint64_t)&qword_269CDBAB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE67C0);
  }
  return result;
}

unint64_t sub_2539EEB78()
{
  unint64_t result = qword_269CE67D8;
  if (!qword_269CE67D8)
  {
    sub_25347907C(&qword_269CE67B8);
    sub_2539E6F90((uint64_t)&qword_269CDC068);
    sub_2539E6F90((uint64_t)&qword_269CDBAD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE67D8);
  }
  return result;
}

unint64_t sub_2539EEC54()
{
  unint64_t result = qword_269CE67E8;
  if (!qword_269CE67E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE67E8);
  }
  return result;
}

unint64_t sub_2539EECA0()
{
  unint64_t result = qword_269CE67F8;
  if (!qword_269CE67F8)
  {
    sub_25347907C(&qword_269CE67F0);
    sub_2539E6F90((uint64_t)&unk_269CE6800);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE67F8);
  }
  return result;
}

unint64_t sub_2539EED44()
{
  unint64_t result = qword_269CE6810;
  if (!qword_269CE6810)
  {
    sub_25347907C(&qword_269CE67F0);
    sub_2539E6F90((uint64_t)&unk_269CE6818);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6810);
  }
  return result;
}

uint64_t type metadata accessor for ActionResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_26B248F58);
}

unint64_t sub_2539EEE08()
{
  unint64_t result = qword_269CE6828;
  if (!qword_269CE6828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6828);
  }
  return result;
}

uint64_t type metadata accessor for QueryPredicate(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71A8);
}

unint64_t sub_2539EEE74()
{
  unint64_t result = qword_269CE6878;
  if (!qword_269CE6878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6878);
  }
  return result;
}

unint64_t sub_2539EEEC0()
{
  unint64_t result = qword_269CE6880;
  if (!qword_269CE6880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6880);
  }
  return result;
}

unint64_t sub_2539EEF0C()
{
  unint64_t result = qword_269CE6888;
  if (!qword_269CE6888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6888);
  }
  return result;
}

unint64_t sub_2539EEF58()
{
  unint64_t result = qword_269CE6898;
  if (!qword_269CE6898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6898);
  }
  return result;
}

unint64_t sub_2539EEFA4()
{
  unint64_t result = qword_269CE68A0;
  if (!qword_269CE68A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE68A0);
  }
  return result;
}

unint64_t sub_2539EEFF0()
{
  unint64_t result = qword_269CE68F8;
  if (!qword_269CE68F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE68F8);
  }
  return result;
}

unint64_t sub_2539EF03C()
{
  unint64_t result = qword_269CE6900;
  if (!qword_269CE6900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6900);
  }
  return result;
}

unint64_t sub_2539EF088()
{
  unint64_t result = qword_269CE6910;
  if (!qword_269CE6910)
  {
    sub_25347907C(&qword_269CE6908);
    sub_2539E6F90((uint64_t)&unk_269CE6918);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6910);
  }
  return result;
}

unint64_t sub_2539EF12C()
{
  unint64_t result = qword_269CE6920;
  if (!qword_269CE6920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6920);
  }
  return result;
}

unint64_t sub_2539EF178()
{
  unint64_t result = qword_269CE6928;
  if (!qword_269CE6928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6928);
  }
  return result;
}

unint64_t sub_2539EF1C4()
{
  unint64_t result = qword_269CE6950;
  if (!qword_269CE6950)
  {
    sub_25347907C(&qword_269CE6908);
    sub_2539E6F90((uint64_t)&unk_269CE6958);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6950);
  }
  return result;
}

unint64_t sub_2539EF268()
{
  unint64_t result = qword_269CE6968;
  if (!qword_269CE6968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6968);
  }
  return result;
}

unint64_t sub_2539EF2B4()
{
  unint64_t result = qword_269CE6980;
  if (!qword_269CE6980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6980);
  }
  return result;
}

unint64_t sub_2539EF300()
{
  unint64_t result = qword_269CE6988;
  if (!qword_269CE6988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6988);
  }
  return result;
}

unint64_t sub_2539EF34C()
{
  unint64_t result = qword_269CE6998;
  if (!qword_269CE6998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6998);
  }
  return result;
}

unint64_t sub_2539EF398()
{
  unint64_t result = qword_269CE69A8;
  if (!qword_269CE69A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE69A8);
  }
  return result;
}

unint64_t sub_2539EF3E4()
{
  unint64_t result = qword_269CE69C0;
  if (!qword_269CE69C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE69C0);
  }
  return result;
}

unint64_t sub_2539EF430()
{
  unint64_t result = qword_269CE69D8;
  if (!qword_269CE69D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE69D8);
  }
  return result;
}

unint64_t sub_2539EF47C()
{
  unint64_t result = qword_269CE6A00;
  if (!qword_269CE6A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A00);
  }
  return result;
}

unint64_t sub_2539EF4C8()
{
  unint64_t result = qword_269CE6A38;
  if (!qword_269CE6A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A38);
  }
  return result;
}

unint64_t sub_2539EF514()
{
  unint64_t result = qword_269CE6A48;
  if (!qword_269CE6A48)
  {
    sub_25347907C(&qword_269CE6A40);
    sub_2539E6F90((uint64_t)&qword_269CE4F20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A48);
  }
  return result;
}

unint64_t sub_2539EF5B8()
{
  unint64_t result = qword_269CE6A58;
  if (!qword_269CE6A58)
  {
    sub_25347907C(&qword_269CE6A40);
    sub_2539E6F90((uint64_t)&qword_269CE4F48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A58);
  }
  return result;
}

unint64_t sub_2539EF65C()
{
  unint64_t result = qword_269CE6A68;
  if (!qword_269CE6A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A68);
  }
  return result;
}

unint64_t sub_2539EF6A8()
{
  unint64_t result = qword_269CE6A80;
  if (!qword_269CE6A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A80);
  }
  return result;
}

unint64_t sub_2539EF6F4()
{
  unint64_t result = qword_269CE6A98;
  if (!qword_269CE6A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6A98);
  }
  return result;
}

unint64_t sub_2539EF740()
{
  unint64_t result = qword_269CE6AA8;
  if (!qword_269CE6AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6AA8);
  }
  return result;
}

unint64_t sub_2539EF78C()
{
  unint64_t result = qword_269CE6AB8;
  if (!qword_269CE6AB8)
  {
    sub_25347907C(&qword_269CE6AB0);
    sub_2539E6F90((uint64_t)&unk_269CE6AC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6AB8);
  }
  return result;
}

unint64_t sub_2539EF830()
{
  unint64_t result = qword_269CE6AD0;
  if (!qword_269CE6AD0)
  {
    sub_25347907C(&qword_269CE6AB0);
    sub_2539E6F90((uint64_t)&unk_269CE6AD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6AD0);
  }
  return result;
}

unint64_t sub_2539EF8D4()
{
  unint64_t result = qword_269CE6B00;
  if (!qword_269CE6B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B00);
  }
  return result;
}

unint64_t sub_2539EF920()
{
  unint64_t result = qword_269CE6B08;
  if (!qword_269CE6B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B08);
  }
  return result;
}

unint64_t sub_2539EF96C()
{
  unint64_t result = qword_269CE6B10;
  if (!qword_269CE6B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B10);
  }
  return result;
}

unint64_t sub_2539EF9B8()
{
  unint64_t result = qword_269CE6B18;
  if (!qword_269CE6B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B18);
  }
  return result;
}

unint64_t sub_2539EFA04()
{
  unint64_t result = qword_269CE6B48;
  if (!qword_269CE6B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B48);
  }
  return result;
}

unint64_t sub_2539EFA50()
{
  unint64_t result = qword_269CE6B50;
  if (!qword_269CE6B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B50);
  }
  return result;
}

unint64_t sub_2539EFA9C()
{
  unint64_t result = qword_269CE6B58;
  if (!qword_269CE6B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B58);
  }
  return result;
}

unint64_t sub_2539EFAE8()
{
  unint64_t result = qword_269CE6B68;
  if (!qword_269CE6B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B68);
  }
  return result;
}

unint64_t sub_2539EFB34()
{
  unint64_t result = qword_269CE6B70;
  if (!qword_269CE6B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B70);
  }
  return result;
}

unint64_t sub_2539EFB80()
{
  unint64_t result = qword_269CE6B80;
  if (!qword_269CE6B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B80);
  }
  return result;
}

void sub_2539EFBCC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2539CC9B8(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

unint64_t sub_2539EFC04()
{
  unint64_t result = qword_269CE6B90;
  if (!qword_269CE6B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6B90);
  }
  return result;
}

uint64_t type metadata accessor for ClientEffectInvocation(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71C8);
}

unint64_t sub_2539EFC70()
{
  unint64_t result = qword_269CE6BA8;
  if (!qword_269CE6BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6BA8);
  }
  return result;
}

uint64_t type metadata accessor for ClientEffectResult(uint64_t a1)
{
  return sub_2534978CC(a1, (uint64_t *)&unk_269CE71D8);
}

unint64_t sub_2539EFCDC()
{
  unint64_t result = qword_269CE6BD0;
  if (!qword_269CE6BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6BD0);
  }
  return result;
}

unint64_t sub_2539EFD28()
{
  unint64_t result = qword_269CE6BD8;
  if (!qword_269CE6BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6BD8);
  }
  return result;
}

unint64_t sub_2539EFD74()
{
  unint64_t result = qword_269CE6BE0;
  if (!qword_269CE6BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6BE0);
  }
  return result;
}

uint64_t sub_2539EFDC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253962E00(a1, a2, a3);
  sub_25346CAF4();
  sub_253944540();
  v4();
  return v3;
}

unint64_t sub_2539EFE0C()
{
  unint64_t result = qword_269CE6C08;
  if (!qword_269CE6C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C08);
  }
  return result;
}

unint64_t sub_2539EFE58()
{
  unint64_t result = qword_269CE6C40;
  if (!qword_269CE6C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C40);
  }
  return result;
}

unint64_t sub_2539EFEA4()
{
  unint64_t result = qword_269CE6C48;
  if (!qword_269CE6C48)
  {
    sub_25347907C(&qword_269CDE8F0);
    sub_2539EFF50();
    sub_2539E6F90((uint64_t)&unk_269CE6AC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C48);
  }
  return result;
}

unint64_t sub_2539EFF50()
{
  unint64_t result = qword_269CE6C50;
  if (!qword_269CE6C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C50);
  }
  return result;
}

unint64_t sub_2539EFF9C()
{
  unint64_t result = qword_269CE6C70;
  if (!qword_269CE6C70)
  {
    sub_25347907C(&qword_269CDE8F0);
    sub_2539F0048();
    sub_2539E6F90((uint64_t)&unk_269CE6AD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C70);
  }
  return result;
}

unint64_t sub_2539F0048()
{
  unint64_t result = qword_269CE6C78;
  if (!qword_269CE6C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C78);
  }
  return result;
}

unint64_t sub_2539F0094(uint64_t a1)
{
  unint64_t result = sub_2534DA1D4(a1);
  if (!result)
  {
    unint64_t v5 = v4;
    sub_25347907C(v3);
    v5();
    sub_2534D99FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_2539F00F8()
{
  unint64_t result = qword_269CE6C90;
  if (!qword_269CE6C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6C90);
  }
  return result;
}

unint64_t sub_2539F0144()
{
  unint64_t result = qword_269CE6CA8;
  if (!qword_269CE6CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6CA8);
  }
  return result;
}

unint64_t sub_2539F0190()
{
  unint64_t result = qword_269CE6CC0;
  if (!qword_269CE6CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6CC0);
  }
  return result;
}

unint64_t sub_2539F01DC()
{
  unint64_t result = qword_269CE6CD8;
  if (!qword_269CE6CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6CD8);
  }
  return result;
}

unint64_t sub_2539F0228()
{
  unint64_t result = qword_269CE6CF0;
  if (!qword_269CE6CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6CF0);
  }
  return result;
}

unint64_t sub_2539F0274()
{
  unint64_t result = qword_269CE6D00;
  if (!qword_269CE6D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D00);
  }
  return result;
}

unint64_t sub_2539F02C0()
{
  unint64_t result = qword_269CE6D18;
  if (!qword_269CE6D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D18);
  }
  return result;
}

unint64_t sub_2539F030C()
{
  unint64_t result = qword_269CE6D28;
  if (!qword_269CE6D28)
  {
    sub_25347907C(&qword_269CE6D20);
    sub_2539E6F90((uint64_t)&unk_269CE6D30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D28);
  }
  return result;
}

unint64_t sub_2539F03B0()
{
  unint64_t result = qword_269CE6D40;
  if (!qword_269CE6D40)
  {
    sub_25347907C(&qword_269CE6D20);
    sub_2539E6F90((uint64_t)&unk_269CE6D48);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D40);
  }
  return result;
}

unint64_t sub_2539F0454()
{
  unint64_t result = qword_269CE6D58;
  if (!qword_269CE6D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D58);
  }
  return result;
}

unint64_t sub_2539F04A0()
{
  unint64_t result = qword_269CE6D70;
  if (!qword_269CE6D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D70);
  }
  return result;
}

unint64_t sub_2539F04EC()
{
  unint64_t result = qword_269CE6D98;
  if (!qword_269CE6D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6D98);
  }
  return result;
}

unint64_t sub_2539F0538()
{
  unint64_t result = qword_269CDBC68;
  if (!qword_269CDBC68)
  {
    sub_25347907C(&qword_269CDB548);
    sub_2539E6F90((uint64_t)&qword_269CDBC70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC68);
  }
  return result;
}

unint64_t sub_2539F05DC()
{
  unint64_t result = qword_269CDBC80;
  if (!qword_269CDBC80)
  {
    sub_25347907C(&qword_269CDB548);
    sub_2539E6F90((uint64_t)&qword_269CDBC88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBC80);
  }
  return result;
}

unint64_t sub_2539F0680()
{
  unint64_t result = qword_269CE6DB0;
  if (!qword_269CE6DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6DB0);
  }
  return result;
}

unint64_t sub_2539F06CC()
{
  unint64_t result = qword_269CE6DC0;
  if (!qword_269CE6DC0)
  {
    sub_25347907C(&qword_269CE6DB8);
    sub_2539E6F90((uint64_t)&unk_269CE6DC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6DC0);
  }
  return result;
}

unint64_t sub_2539F0770()
{
  unint64_t result = qword_269CE6DD8;
  if (!qword_269CE6DD8)
  {
    sub_25347907C(&qword_269CE6DD0);
    sub_2539E6F90((uint64_t)&unk_269CE6DE0);
    sub_2539E6F90((uint64_t)&unk_269CE6DE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6DD8);
  }
  return result;
}

unint64_t sub_2539F084C()
{
  unint64_t result = qword_269CE6DF8;
  if (!qword_269CE6DF8)
  {
    sub_25347907C(&qword_269CE6DB8);
    sub_2539E6F90((uint64_t)&unk_269CE6E00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6DF8);
  }
  return result;
}

unint64_t sub_2539F08F0()
{
  unint64_t result = qword_269CE6E08;
  if (!qword_269CE6E08)
  {
    sub_25347907C(&qword_269CE6DD0);
    sub_2539E6F90((uint64_t)&unk_269CE6E10);
    sub_2539E6F90((uint64_t)&unk_269CE6E18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E08);
  }
  return result;
}

unint64_t sub_2539F09CC()
{
  unint64_t result = qword_269CE6E28;
  if (!qword_269CE6E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E28);
  }
  return result;
}

unint64_t sub_2539F0A18()
{
  unint64_t result = qword_269CE6E40;
  if (!qword_269CE6E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E40);
  }
  return result;
}

unint64_t sub_2539F0A64()
{
  unint64_t result = qword_269CE6E58;
  if (!qword_269CE6E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E58);
  }
  return result;
}

unint64_t sub_2539F0AB0()
{
  unint64_t result = qword_269CE6E70;
  if (!qword_269CE6E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E70);
  }
  return result;
}

unint64_t sub_2539F0AFC()
{
  unint64_t result = qword_269CE6E88;
  if (!qword_269CE6E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6E88);
  }
  return result;
}

unint64_t sub_2539F0B48()
{
  unint64_t result = qword_269CE6EA0;
  if (!qword_269CE6EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6EA0);
  }
  return result;
}

unint64_t sub_2539F0B94()
{
  unint64_t result = qword_269CE6EB8;
  if (!qword_269CE6EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6EB8);
  }
  return result;
}

uint64_t sub_2539F0BE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_253962E00(a1, a2, a3);
  sub_25346CAF4();
  sub_253944438();
  v4();
  return v3;
}

unint64_t sub_2539F0C28()
{
  unint64_t result = qword_269CE6ED0;
  if (!qword_269CE6ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6ED0);
  }
  return result;
}

unint64_t sub_2539F0C74()
{
  unint64_t result = qword_269CE6EE8;
  if (!qword_269CE6EE8)
  {
    sub_25347907C(&qword_269CE6EE0);
    sub_2539E6F90((uint64_t)&unk_269CE6EF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6EE8);
  }
  return result;
}

unint64_t sub_2539F0D18()
{
  unint64_t result = qword_269CE6F08;
  if (!qword_269CE6F08)
  {
    sub_25347907C(&qword_269CE6EE0);
    sub_2539E6F90((uint64_t)&unk_269CE6F10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F08);
  }
  return result;
}

unint64_t sub_2539F0DBC()
{
  unint64_t result = qword_269CE6F20;
  if (!qword_269CE6F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F20);
  }
  return result;
}

unint64_t sub_2539F0E08()
{
  unint64_t result = qword_269CE6F28;
  if (!qword_269CE6F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F28);
  }
  return result;
}

unint64_t sub_2539F0E54()
{
  unint64_t result = qword_269CE6F38;
  if (!qword_269CE6F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F38);
  }
  return result;
}

unint64_t sub_2539F0EA0()
{
  unint64_t result = qword_269CE6F78;
  if (!qword_269CE6F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F78);
  }
  return result;
}

unint64_t sub_2539F0EEC()
{
  unint64_t result = qword_269CE6F80;
  if (!qword_269CE6F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F80);
  }
  return result;
}

unint64_t sub_2539F0F38()
{
  unint64_t result = qword_269CE6F90;
  if (!qword_269CE6F90)
  {
    sub_25347907C(&qword_269CE6F88);
    sub_2539E6F90((uint64_t)&unk_269CE6F98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6F90);
  }
  return result;
}

unint64_t sub_2539F0FDC()
{
  unint64_t result = qword_269CE6FA0;
  if (!qword_269CE6FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6FA0);
  }
  return result;
}

unint64_t sub_2539F1028()
{
  unint64_t result = qword_269CE6FA8;
  if (!qword_269CE6FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6FA8);
  }
  return result;
}

unint64_t sub_2539F1074()
{
  unint64_t result = qword_269CE6FB0;
  if (!qword_269CE6FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6FB0);
  }
  return result;
}

unint64_t sub_2539F10C0()
{
  unint64_t result = qword_269CDB9F8;
  if (!qword_269CDB9F8)
  {
    sub_25347907C(&qword_269CDB9F0);
    sub_2539E6F90((uint64_t)&qword_269CDBA00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDB9F8);
  }
  return result;
}

unint64_t sub_2539F1164()
{
  unint64_t result = qword_269CE6FB8;
  if (!qword_269CE6FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6FB8);
  }
  return result;
}

unint64_t sub_2539F11B0()
{
  unint64_t result = qword_269CE6FC0;
  if (!qword_269CE6FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE6FC0);
  }
  return result;
}

unint64_t sub_2539F11FC()
{
  unint64_t result = qword_269CE7000;
  if (!qword_269CE7000)
  {
    sub_25347907C(&qword_269CE6F88);
    sub_2539E6F90((uint64_t)&unk_269CE7008);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7000);
  }
  return result;
}

unint64_t sub_2539F12A0()
{
  unint64_t result = qword_269CDBA10;
  if (!qword_269CDBA10)
  {
    sub_25347907C(&qword_269CDB9F0);
    sub_2539E6F90((uint64_t)&qword_269CDBA18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CDBA10);
  }
  return result;
}

unint64_t sub_2539F1344()
{
  unint64_t result = qword_269CE7028;
  if (!qword_269CE7028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7028);
  }
  return result;
}

unint64_t sub_2539F1390()
{
  unint64_t result = qword_269CE7030;
  if (!qword_269CE7030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7030);
  }
  return result;
}

unint64_t sub_2539F13DC()
{
  unint64_t result = qword_269CE7038;
  if (!qword_269CE7038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7038);
  }
  return result;
}

unint64_t sub_2539F1428()
{
  unint64_t result = qword_269CE7060;
  if (!qword_269CE7060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7060);
  }
  return result;
}

unint64_t sub_2539F1474()
{
  unint64_t result = qword_269CE7078;
  if (!qword_269CE7078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7078);
  }
  return result;
}

unint64_t sub_2539F14C0()
{
  unint64_t result = qword_269CE7090;
  if (!qword_269CE7090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7090);
  }
  return result;
}

unint64_t sub_2539F1510()
{
  unint64_t result = qword_269CE7098;
  if (!qword_269CE7098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7098);
  }
  return result;
}

unint64_t sub_2539F155C()
{
  return sub_2539E6F90((uint64_t)&qword_269CDCCD0);
}

unint64_t sub_2539F15A8()
{
  unint64_t result = qword_269CE70A0;
  if (!qword_269CE70A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70A0);
  }
  return result;
}

unint64_t sub_2539F15F4()
{
  return sub_2539E6F90((uint64_t)&unk_269CE70A8);
}

unint64_t sub_2539F1640()
{
  unint64_t result = qword_269CE70B0;
  if (!qword_269CE70B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70B0);
  }
  return result;
}

unint64_t sub_2539F168C(void *a1)
{
  a1[1] = sub_2539E6F90((uint64_t)&unk_269CE70B8);
  a1[2] = sub_2539E6F90((uint64_t)&qword_269CE4F40);
  a1[3] = sub_2539E6F90((uint64_t)&qword_269CE4F18);
  unint64_t result = sub_2539E6F90((uint64_t)&unk_269CE70C0);
  a1[4] = result;
  return result;
}

unint64_t sub_2539F1764()
{
  unint64_t result = qword_269CE70C8;
  if (!qword_269CE70C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70C8);
  }
  return result;
}

unint64_t sub_2539F17B0(void *a1)
{
  a1[1] = sub_2539E6F90((uint64_t)&unk_269CE70D0);
  a1[2] = sub_2539E6F90((uint64_t)&unk_269CE5C48);
  a1[3] = sub_2539E6F90((uint64_t)&unk_269CE5950);
  unint64_t result = sub_2539E6F90((uint64_t)&unk_269CE70D8);
  a1[4] = result;
  return result;
}

unint64_t sub_2539F1888()
{
  unint64_t result = qword_269CE70E0;
  if (!qword_269CE70E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70E0);
  }
  return result;
}

unint64_t sub_2539F18D8()
{
  unint64_t result = qword_269CE70E8;
  if (!qword_269CE70E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70E8);
  }
  return result;
}

unint64_t sub_2539F1928()
{
  unint64_t result = qword_269CE70F0;
  if (!qword_269CE70F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE70F0);
  }
  return result;
}

unint64_t sub_2539F1974()
{
  return sub_2539E6F90((uint64_t)&unk_269CE70F8);
}

unint64_t sub_2539F19C0()
{
  unint64_t result = qword_269CE7100;
  if (!qword_269CE7100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7100);
  }
  return result;
}

unint64_t sub_2539F1A10()
{
  unint64_t result = qword_269CE7108;
  if (!qword_269CE7108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7108);
  }
  return result;
}

void sub_2539F1A5C()
{
}

uint64_t sub_2539F1A70()
{
  sub_25353E65C();
  uint64_t result = Action.toolId.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1A9C()
{
  sub_25353E65C();
  uint64_t result = Action.deviceId.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539C5358(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Action.deviceId.setter);
}

uint64_t sub_2539F1AF0()
{
  sub_25353E65C();
  uint64_t result = Action.parameters.getter();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_2539F1B1C()
{
  return ClientAction.id.getter();
}

uint64_t sub_2539F1B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539B7BB8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Action.id.setter);
}

uint64_t sub_2539F1B60()
{
  sub_25353E65C();
  uint64_t result = ClientAction.variableName.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1B8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ClientAction.variableDependencies.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2539F1BB8()
{
  return ClientAction.id.getter();
}

uint64_t sub_2539F1BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539B7BB8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ClientAction.id.setter);
}

uint64_t sub_2539F1C04()
{
  sub_25353E65C();
  uint64_t result = ActionParameterContext.toolId.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1C30()
{
  return ActionStepResult.stepId.getter();
}

uint64_t sub_2539F1C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539D6E88(a1, a2, a3, a4, MEMORY[0x263F07508], (uint64_t (*)(char *))ActionStepResult.stepId.setter);
}

uint64_t sub_2539F1C94()
{
  return ActionStepResult.stepId.getter();
}

uint64_t sub_2539F1CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539D6E88(a1, a2, a3, a4, MEMORY[0x263F07508], (uint64_t (*)(char *))ActionStepResult.eventId.setter);
}

uint64_t sub_2539F1CF8()
{
  sub_25353E65C();
  uint64_t result = StatementResult.toolId.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539C5358(a1, a2, a3, a4, (uint64_t (*)(uint64_t))StatementResult.toolId.setter);
}

uint64_t sub_2539F1D4C()
{
  sub_25353E65C();
  uint64_t result = ActionResolverRequest.toolId.getter();
  uint64_t *v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2539F1D78()
{
  return ExternalAgentOutcome.outcome.getter();
}

uint64_t sub_2539F1D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2539D6E88(a1, a2, a3, a4, MEMORY[0x263F4C108], (uint64_t (*)(char *))ExternalAgentOutcome.outcome.setter);
}

ValueMetadata *type metadata accessor for Session()
{
  return &type metadata for Session;
}

uint64_t *initializeBufferWithCopyOfBuffer for Session.Transcript(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Session.Transcript(uint64_t a1)
{
  uint64_t v2 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Session.Transcript(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Session.Transcript(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Session.Transcript(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for Session.Transcript(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Session.Transcript(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2539F230C);
}

uint64_t sub_2539F230C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A2C0F4(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for Session.Transcript(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2539F2338);
}

void sub_2539F2338(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_2539F2350()
{
  uint64_t result = sub_253B055C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Session.Event(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = sub_253B055C0();
  uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
  v8(a1, a2, v7);
  v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2 + v9, 1, v7))
  {
    uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t *)v10, (uint64_t *)v11, v7);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v7);
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (uint64_t)a2 + v14;
  uint64_t v17 = type metadata accessor for Session.Event.Payload(0);
  v392 = (void (*)(void *, const void *, uint64_t))v8;
  uint64_t v393 = v7;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v18 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v15, v16, v18);
      uint64_t v19 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v20 = (void *)(v15 + v19);
      uint64_t v21 = (const void *)(v16 + v19);
      uint64_t v22 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v21, 1, v22))
      {
        uint64_t v23 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v20, 0, 1, v22);
      }
      goto LABEL_163;
    case 1u:
      uint64_t v24 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v24;
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      uint64_t v25 = type metadata accessor for TextQuery(0);
      uint64_t v26 = *(int *)(v25 + 24);
      __dstc = (void *)(v16 + v26);
      uint64_t v383 = v15 + v26;
      uint64_t v27 = sub_253B059D0();
      BOOL v28 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      v28(v383, __dstc, v27);
      uint64_t v29 = *(int *)(v25 + 28);
      uint64_t v30 = (void *)(v15 + v29);
      uint64_t v31 = (void *)(v16 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 2u:
      *(void *)uint64_t v15 = *(void *)v16;
      *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
      uint64_t v33 = *(void *)(v16 + 24);
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(void *)(v15 + 24) = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 3u:
      uint64_t v34 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      switch(EnumCaseMultiPayload)
      {
        case 3:
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v7))
          {
            uint64_t v271 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v271 - 8) + 64));
          }
          else
          {
            v8((uint64_t *)v15, (uint64_t *)v16, v7);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v7);
          }
          v276 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
          uint64_t v277 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          v276(v15 + v277[5], v16 + v277[5], v7);
          uint64_t v278 = v277[6];
          v279 = (void *)(v15 + v278);
          v280 = (const void *)(v16 + v278);
          uint64_t v281 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v282 = sub_253B09120();
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v282 - 8) + 16))(v279, v280, v282);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v279, v280, *(void *)(*(void *)(v281 - 8) + 64));
          }
          uint64_t v283 = v277[7];
          uint64_t v284 = v15 + v283;
          uint64_t v285 = v16 + v283;
          uint64_t v286 = sub_253B059D0();
          v287 = (void (**)(uint64_t, uint64_t))(*(void *)(v286 - 8) + 16);
          v372 = *v287;
          __dsta = (void *)v286;
          (*v287)(v284, v285);
          uint64_t v288 = v277[8];
          v289 = (void *)(v15 + v288);
          v290 = (void *)(v16 + v288);
          uint64_t v291 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          int v292 = swift_getEnumCaseMultiPayload();
          if (v292 == 1)
          {
            void *v289 = *v290;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v292)
            {
              memcpy(v289, v290, *(void *)(*(void *)(v291 - 8) + 64));
              goto LABEL_135;
            }
            uint64_t v293 = v290[1];
            void *v289 = *v290;
            v289[1] = v293;
            uint64_t v294 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            v369 = (char *)v289 + v294;
            v295 = (char *)v290 + v294;
            swift_bridgeObjectRetain();
            ((void (*)(char *, char *, void *))v372)(v369, v295, __dsta);
          }
          swift_storeEnumTagMultiPayload();
LABEL_135:
          uint64_t v7 = v393;
          break;
        case 2:
          *(void *)uint64_t v15 = *(void *)v16;
          swift_bridgeObjectRetain();
          break;
        case 1:
          uint64_t v36 = *(void *)(v16 + 8);
          *(void *)uint64_t v15 = *(void *)v16;
          *(void *)(v15 + 8) = v36;
          uint64_t v37 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dstd = (void *)(v15 + v37);
          uint64_t v38 = v16 + v37;
          uint64_t v39 = sub_253B059D0();
          int64_t v40 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16);
          swift_bridgeObjectRetain();
          v40(__dstd, v38, v39);
          uint64_t v7 = v393;
          break;
        default:
          memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v34 - 8) + 64));
          goto LABEL_137;
      }
      swift_storeEnumTagMultiPayload();
LABEL_137:
      v316 = (int *)type metadata accessor for Request(0);
      *(unsigned char *)(v15 + v316[5]) = *(unsigned char *)(v16 + v316[5]);
      uint64_t v317 = v316[6];
      v318 = (void *)(v15 + v317);
      v319 = (void *)(v16 + v317);
      uint64_t v320 = type metadata accessor for RequestPrescribedPlan(0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v319, 1, v320))
      {
        uint64_t v321 = sub_253462A5C(&qword_269CDBB20);
        memcpy(v318, v319, *(void *)(*(void *)(v321 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v322 = v319[1];
            void *v318 = *v319;
            v318[1] = v322;
            *((_WORD *)v318 + 8) = *((_WORD *)v319 + 8);
            swift_bridgeObjectRetain();
            goto LABEL_156;
          case 1u:
            uint64_t v329 = v319[1];
            void *v318 = *v319;
            v318[1] = v329;
            swift_bridgeObjectRetain();
            goto LABEL_156;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            uint64_t v330 = v319[1];
            void *v318 = *v319;
            v318[1] = v330;
            *((unsigned char *)v318 + 16) = *((unsigned char *)v319 + 16);
            swift_bridgeObjectRetain();
            goto LABEL_156;
          case 6u:
            uint64_t v331 = sub_253B059D0();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v331 - 8) + 16))(v318, v319, v331);
            uint64_t v332 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            v333 = (char *)v318 + v332;
            v334 = (char *)v319 + v332;
            *(void *)v333 = *(void *)v334;
            v333[8] = v334[8];
LABEL_156:
            swift_storeEnumTagMultiPayload();
            break;
          default:
            memcpy(v318, v319, *(void *)(*(void *)(v320 - 8) + 64));
            break;
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v318, 0, 1, v320);
      }
      uint64_t v335 = v316[7];
      v336 = (void *)(v15 + v335);
      v337 = (const void *)(v16 + v335);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16 + v335, 1, v7))
      {
        uint64_t v338 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v336, v337, *(void *)(*(void *)(v338 - 8) + 64));
      }
      else
      {
        v392(v336, v337, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v336, 0, 1, v7);
      }
      uint64_t v339 = v316[8];
      uint64_t v222 = v15 + v339;
      uint64_t v223 = v16 + v339;
      uint64_t v224 = *(void *)(v223 + 8);
      if (v224) {
        goto LABEL_150;
      }
      *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
      *(void *)(v222 + 16) = *(void *)(v223 + 16);
LABEL_163:
      swift_storeEnumTagMultiPayload();
LABEL_164:
      uint64_t v340 = a3[8];
      uint64_t v341 = a3[9];
      v342 = (uint64_t *)((char *)a1 + v340);
      v343 = (uint64_t *)((char *)a2 + v340);
      uint64_t v344 = v343[1];
      void *v342 = *v343;
      v342[1] = v344;
      v345 = (uint64_t *)((char *)a1 + v341);
      v346 = (uint64_t *)((char *)a2 + v341);
      uint64_t v347 = v346[1];
      void *v345 = *v346;
      v345[1] = v347;
      uint64_t v348 = a3[10];
      uint64_t v349 = a3[11];
      v350 = (uint64_t *)((char *)a1 + v348);
      v351 = (uint64_t *)((char *)a2 + v348);
      uint64_t v352 = v351[1];
      void *v350 = *v351;
      v350[1] = v352;
      v353 = (uint64_t *)((char *)a1 + v349);
      v354 = (uint64_t *)((char *)a2 + v349);
      uint64_t v355 = v354[1];
      void *v353 = *v354;
      v353[1] = v355;
      uint64_t v356 = a3[12];
      v357 = (char *)a1 + v356;
      v358 = (char *)a2 + v356;
      uint64_t v359 = sub_253B05550();
      v391 = *(void (**)(char *, char *, uint64_t))(*(void *)(v359 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v391(v357, v358, v359);
      v360 = (int *)type metadata accessor for Timepoint();
      *(void *)&v357[v360[5]] = *(void *)&v358[v360[5]];
      *(void *)&v357[v360[6]] = *(void *)&v358[v360[6]];
      v392(&v357[v360[7]], &v358[v360[7]], v393);
      uint64_t v361 = a3[13];
      uint64_t v362 = a3[14];
      v363 = (uint64_t *)((char *)a1 + v361);
      v364 = (uint64_t *)((char *)a2 + v361);
      uint64_t v365 = v364[1];
      void *v363 = *v364;
      v363[1] = v365;
      v366 = (char *)a1 + v362;
      v367 = (char *)a2 + v362;
      v366[8] = v367[8];
      *(void *)v366 = *(void *)v367;
      *(uint64_t *)((char *)a1 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 4u:
      uint64_t v41 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v41;
      uint64_t v42 = *(void *)(v16 + 24);
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(void *)(v15 + 24) = v42;
      uint64_t v43 = *(void *)(v16 + 40);
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
      *(void *)(v15 + 40) = v43;
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      *(unsigned char *)(v15 + 56) = *(unsigned char *)(v16 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 5u:
      uint64_t v44 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v15, v16, v44);
      uint64_t v45 = (int *)type metadata accessor for Action(0);
      uint64_t v46 = v45[5];
      uint64_t v47 = (void *)(v15 + v46);
      uint64_t v48 = (uint64_t *)(v16 + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *uint64_t v47 = v50;
      v47[1] = v49;
      *(unsigned char *)(v15 + v45[6]) = *(unsigned char *)(v16 + v45[6]);
      *(void *)(v15 + v45[7]) = *(void *)(v16 + v45[7]);
      uint64_t v51 = v45[8];
      uint64_t v52 = (void *)(v15 + v51);
      uint64_t v53 = (void *)(v16 + v51);
      uint64_t v54 = v53[1];
      *uint64_t v52 = *v53;
      v52[1] = v54;
      uint64_t v55 = v45[9];
      uint64_t v56 = (void *)(v15 + v55);
      uint64_t v57 = (void *)(v16 + v55);
      uint64_t v58 = v57[1];
      *uint64_t v56 = *v57;
      v56[1] = v58;
      uint64_t v59 = v57[3];
      v56[2] = v57[2];
      v56[3] = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 6u:
      uint64_t v60 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v60))
      {
        uint64_t v61 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v15, v16, v60);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v60);
      }
      uint64_t v196 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v15 + *(int *)(v196 + 20), v16 + *(int *)(v196 + 20), v60);
      goto LABEL_163;
    case 7u:
      uint64_t v62 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v15, v16, v62);
      uint64_t v63 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v64 = v63[5];
      uint64_t v65 = (void *)(v15 + v64);
      uint64_t v66 = (uint64_t *)(v16 + v64);
      uint64_t v68 = *v66;
      uint64_t v67 = v66[1];
      *uint64_t v65 = v68;
      v65[1] = v67;
      *(void *)(v15 + v63[6]) = *(void *)(v16 + v63[6]);
      uint64_t v69 = v63[7];
      uint64_t v70 = (void *)(v15 + v69);
      int64_t v71 = (void *)(v16 + v69);
      uint64_t v72 = v71[1];
      *uint64_t v70 = *v71;
      v70[1] = v72;
      uint64_t v73 = v63[8];
      uint64_t v74 = (void *)(v15 + v73);
      uint64_t v75 = (void *)(v16 + v73);
      uint64_t v76 = v75[1];
      *uint64_t v74 = *v75;
      v74[1] = v76;
      *(void *)(v15 + v63[9]) = *(void *)(v16 + v63[9]);
      *(void *)(v15 + v63[10]) = *(void *)(v16 + v63[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 8u:
      uint64_t v77 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v15, v16, v77);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v15 + *(int *)(Step + 20)) = *(void *)(v16 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 9u:
      uint64_t v79 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v15, v16, v79);
      uint64_t v80 = type metadata accessor for VariableStep(0);
      *(void *)(v15 + *(int *)(v80 + 20)) = *(void *)(v16 + *(int *)(v80 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v15 = *(void *)v16;
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v107 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v107;
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0xCu:
      uint64_t v81 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v81;
      uint64_t v82 = *(void *)(v16 + 24);
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(void *)(v15 + 24) = v82;
      uint64_t v83 = *(void *)(v16 + 32);
      uint64_t v84 = *(void *)(v16 + 40);
      *(void *)(v15 + 32) = v83;
      *(void *)(v15 + 40) = v84;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v272 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 16))(v15, v16, v272);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v273 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v273)) {
            goto LABEL_116;
          }
          uint64_t v274 = type metadata accessor for PlannerError();
          goto LABEL_111;
        case 3u:
          uint64_t v273 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v273))
          {
            uint64_t v274 = type metadata accessor for ExecutorError();
LABEL_111:
            memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v274 - 8) + 64));
          }
          else
          {
LABEL_116:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v273 - 8) + 16))(v15, v16, v273);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v273);
          }
          break;
        default:
          uint64_t v85 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v15, v16, v85);
          break;
      }
      goto LABEL_100;
    case 0xEu:
      uint64_t v86 = *(void *)v16;
      unint64_t v87 = *(void *)(v16 + 8);
      sub_25348A9C8(*(void *)v16, v87);
      *(void *)uint64_t v15 = v86;
      *(void *)(v15 + 8) = v87;
      uint64_t v88 = *(void *)(v16 + 16);
      unint64_t v89 = *(void *)(v16 + 24);
      sub_25348A9C8(v88, v89);
      *(void *)(v15 + 16) = v88;
      *(void *)(v15 + 24) = v89;
      uint64_t v90 = *(void *)(v16 + 40);
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
      *(void *)(v15 + 40) = v90;
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0xFu:
      uint64_t v91 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 16))(v15, v16, v91);
      goto LABEL_163;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v7))
      {
        uint64_t v92 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v92 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v15, (uint64_t *)v16, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v7);
      }
      uint64_t v251 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v8((uint64_t *)(v15 + v251[5]), (uint64_t *)(v16 + v251[5]), v7);
      uint64_t v252 = v251[6];
      v253 = (void *)(v15 + v252);
      uint64_t v254 = (const void *)(v16 + v252);
      uint64_t v255 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v256 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v256 - 8) + 16))(v253, v254, v256);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v253, v254, *(void *)(*(void *)(v255 - 8) + 64));
      }
      uint64_t v257 = v251[7];
      uint64_t v258 = v15 + v257;
      uint64_t v259 = v16 + v257;
      uint64_t v260 = sub_253B059D0();
      uint64_t v261 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v260 - 8) + 16);
      v390 = *v261;
      (*v261)(v258, v259, v260);
      uint64_t v262 = v251[8];
      uint64_t v263 = (void *)(v15 + v262);
      uint64_t v264 = (void *)(v16 + v262);
      uint64_t v265 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v266 = swift_getEnumCaseMultiPayload();
      if (v266 == 1)
      {
        *uint64_t v263 = *v264;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v266)
        {
          memcpy(v263, v264, *(void *)(*(void *)(v265 - 8) + 64));
          goto LABEL_163;
        }
        uint64_t v267 = v264[1];
        *uint64_t v263 = *v264;
        v263[1] = v267;
        uint64_t v268 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __dsth = (char *)v263 + v268;
        uint64_t v269 = (char *)v264 + v268;
        swift_bridgeObjectRetain();
        v390((uint64_t)__dsth, (uint64_t)v269, v260);
      }
LABEL_100:
      swift_storeEnumTagMultiPayload();
      goto LABEL_163;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v7))
      {
        uint64_t v93 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v93 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v15, (uint64_t *)v16, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v7);
      }
      uint64_t v197 = type metadata accessor for ActionStepResult(0);
      uint64_t v198 = *(int *)(v197 + 20);
      uint64_t v199 = (void *)(v15 + v198);
      uint64_t v200 = (void *)(v16 + v198);
      uint64_t v201 = v200[1];
      *uint64_t v199 = *v200;
      v199[1] = v201;
      uint64_t v202 = *(int *)(v197 + 24);
      uint64_t v203 = v15 + v202;
      __dstg = (char *)(v16 + v202);
      uint64_t v388 = v197;
      uint64_t v204 = sub_253B05AB0();
      uint64_t v205 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v204 - 8) + 16);
      swift_bridgeObjectRetain();
      v205(v203, __dstg, v204);
      uint64_t v206 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v207 = (void *)(v203 + v206);
      uint64_t v208 = &__dstg[v206];
      uint64_t v209 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v208, 1, v209))
      {
        uint64_t v210 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v207, v208, *(void *)(*(void *)(v210 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v209 - 8) + 16))(v207, v208, v209);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v207, 0, 1, v209);
      }
      uint64_t v236 = *(int *)(v388 + 28);
      char v237 = (void *)(v15 + v236);
      uint64_t v238 = (void *)(v16 + v236);
      uint64_t v239 = v238[1];
      *char v237 = *v238;
      v237[1] = v239;
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x12u:
      *(void *)uint64_t v15 = *(void *)v16;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v95 = *(int *)(StepResults + 20);
      __dste = (void *)(v16 + v95);
      uint64_t v384 = v15 + v95;
      uint64_t v96 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      uint64_t v97 = sub_253B059D0();
      v371 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v97 - 8) + 16);
      swift_bridgeObjectRetain();
      v371(v384, __dste, v97);
      v96(v15 + *(int *)(StepResults + 24), v16 + *(int *)(StepResults + 24), v7);
      goto LABEL_163;
    case 0x13u:
      uint64_t v98 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16))(v15, v16, v98);
      goto LABEL_163;
    case 0x14u:
      uint64_t v99 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v15, v16, v99);
      uint64_t v100 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v15 + v100[5]) = *(void *)(v16 + v100[5]);
      *(void *)(v15 + v100[6]) = *(void *)(v16 + v100[6]);
      *(void *)(v15 + v100[7]) = *(void *)(v16 + v100[7]);
      *(unsigned char *)(v15 + v100[8]) = *(unsigned char *)(v16 + v100[8]);
      *(unsigned char *)(v15 + v100[9]) = *(unsigned char *)(v16 + v100[9]);
      *(unsigned char *)(v15 + v100[10]) = *(unsigned char *)(v16 + v100[10]);
      uint64_t v101 = v100[11];
      char v102 = (void *)(v15 + v101);
      unint64_t v103 = (void *)(v16 + v101);
      uint64_t v104 = v103[1];
      *char v102 = *v103;
      v102[1] = v104;
      uint64_t v105 = v103[3];
      v102[2] = v103[2];
      v102[3] = v105;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x16u:
    case 0x24u:
      uint64_t v106 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v106;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x1Bu:
      uint64_t v108 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v108;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x1Cu:
      uint64_t v109 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v109;
      uint64_t v110 = *(void *)(v16 + 24);
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(void *)(v15 + 24) = v110;
      *(_DWORD *)(v15 + 32) = *(_DWORD *)(v16 + 32);
      uint64_t v112 = *(void *)(v16 + 40);
      uint64_t v111 = *(void *)(v16 + 48);
      *(void *)(v15 + 40) = v112;
      *(void *)(v15 + 48) = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x1Eu:
      uint64_t v113 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 16))(v15, v16, v113);
      goto LABEL_163;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v7))
      {
        uint64_t v114 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v15, (uint64_t *)v16, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v7);
      }
      uint64_t v211 = type metadata accessor for StatementResult(0);
      uint64_t v212 = *(int *)(v211 + 20);
      uint64_t v213 = v15 + v212;
      uint64_t v214 = v16 + v212;
      uint64_t v215 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 16))(v213, v214, v215);
      uint64_t v216 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      v217 = (void *)(v213 + v216);
      uint64_t v218 = (const void *)(v214 + v216);
      uint64_t v219 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v218, 1, v219))
      {
        uint64_t v220 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v217, v218, *(void *)(*(void *)(v220 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v219 - 8) + 16))(v217, v218, v219);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v217, 0, 1, v219);
      }
      uint64_t v240 = *(int *)(v211 + 24);
      uint64_t v389 = v15 + v240;
      uint64_t v241 = v16 + v240;
      uint64_t v242 = sub_253B059D0();
      uint64_t v243 = (int *)v211;
      uint64_t v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 16);
      v244(v389, v241, v242);
      v244(v15 + v243[7], v16 + v243[7], v242);
      v244(v15 + v243[8], v16 + v243[8], v242);
      uint64_t v245 = v243[9];
      uint64_t v246 = (void *)(v15 + v245);
      uint64_t v247 = (void *)(v16 + v245);
      uint64_t v248 = v247[1];
      if (v248)
      {
        *uint64_t v246 = *v247;
        v246[1] = v248;
        uint64_t v249 = v247[3];
        v246[2] = v247[2];
        v246[3] = v249;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v250 = *((_OWORD *)v247 + 1);
        *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
        *((_OWORD *)v246 + 1) = v250;
      }
      goto LABEL_163;
    case 0x20u:
      uint64_t v115 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v115;
      uint64_t v116 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v117 = *(int *)(v116 + 20);
      uint64_t v118 = (void *)(v15 + v117);
      uint64_t v119 = (const void *)(v16 + v117);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v119, 1, v7))
      {
        uint64_t v120 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v118, v119, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        v392(v118, v119, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v118, 0, 1, v7);
      }
      uint64_t v221 = *(int *)(v116 + 24);
      uint64_t v222 = v15 + v221;
      uint64_t v223 = v16 + v221;
      uint64_t v224 = *(void *)(v223 + 8);
      if (v224) {
        goto LABEL_150;
      }
      *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
      *(void *)(v222 + 16) = *(void *)(v223 + 16);
      goto LABEL_163;
    case 0x21u:
      *(void *)uint64_t v15 = *(void *)v16;
      uint64_t v121 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v122 = *(int *)(v121 + 20);
      uint64_t v123 = (void *)(v15 + v122);
      uint64_t v124 = (const void *)(v16 + v122);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v124, 1, v7))
      {
        uint64_t v125 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v123, v124, *(void *)(*(void *)(v125 - 8) + 64));
      }
      else
      {
        v392(v123, v124, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v123, 0, 1, v7);
      }
      uint64_t v270 = *(int *)(v121 + 24);
      uint64_t v222 = v15 + v270;
      uint64_t v223 = v16 + v270;
      uint64_t v224 = *(void *)(v223 + 8);
      if (v224) {
        goto LABEL_150;
      }
      *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
      *(void *)(v222 + 16) = *(void *)(v223 + 16);
      goto LABEL_163;
    case 0x22u:
      uint64_t v126 = type metadata accessor for RequestContent(0);
      int v127 = swift_getEnumCaseMultiPayload();
      if (v127 != 3)
      {
        if (v127 == 2)
        {
          *(void *)uint64_t v15 = *(void *)v16;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v127 != 1)
          {
            memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v126 - 8) + 64));
            goto LABEL_146;
          }
          uint64_t v128 = *(void *)(v16 + 8);
          *(void *)uint64_t v15 = *(void *)v16;
          *(void *)(v15 + 8) = v128;
          uint64_t v129 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dstf = (void *)(v15 + v129);
          uint64_t v130 = v16 + v129;
          uint64_t v131 = sub_253B059D0();
          uint64_t v132 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v131 - 8) + 16);
          swift_bridgeObjectRetain();
          v132(__dstf, v130, v131);
          uint64_t v7 = v393;
        }
LABEL_145:
        swift_storeEnumTagMultiPayload();
LABEL_146:
        uint64_t v323 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v324 = *(int *)(v323 + 20);
        v325 = (void *)(v15 + v324);
        v326 = (const void *)(v16 + v324);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16 + v324, 1, v7))
        {
          uint64_t v327 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v325, v326, *(void *)(*(void *)(v327 - 8) + 64));
        }
        else
        {
          v392(v325, v326, v7);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v325, 0, 1, v7);
        }
        uint64_t v328 = *(int *)(v323 + 24);
        uint64_t v222 = v15 + v328;
        uint64_t v223 = v16 + v328;
        uint64_t v224 = *(void *)(v223 + 8);
        if (!v224)
        {
          *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
          *(void *)(v222 + 16) = *(void *)(v223 + 16);
          goto LABEL_163;
        }
LABEL_150:
        *(void *)uint64_t v222 = *(void *)v223;
        *(void *)(v222 + 8) = v224;
        *(void *)(v222 + 16) = *(void *)(v223 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_163;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, 1, v7))
      {
        uint64_t v275 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v275 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v15, (uint64_t *)v16, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, 0, 1, v7);
      }
      v296 = (void (*)(uint64_t, uint64_t, uint64_t))v8;
      v297 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v296(v15 + v297[5], v16 + v297[5], v7);
      uint64_t v298 = v297[6];
      v299 = (void *)(v15 + v298);
      v300 = (const void *)(v16 + v298);
      uint64_t v301 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v302 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v302 - 8) + 16))(v299, v300, v302);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v299, v300, *(void *)(*(void *)(v301 - 8) + 64));
      }
      uint64_t v303 = v297[7];
      uint64_t v304 = v15 + v303;
      uint64_t v305 = v16 + v303;
      uint64_t v306 = sub_253B059D0();
      v307 = (void (**)(uint64_t, uint64_t))(*(void *)(v306 - 8) + 16);
      v373 = *v307;
      __dstb = (void *)v306;
      (*v307)(v304, v305);
      uint64_t v308 = v297[8];
      v309 = (void *)(v15 + v308);
      v310 = (void *)(v16 + v308);
      uint64_t v311 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v312 = swift_getEnumCaseMultiPayload();
      if (v312 == 1)
      {
        void *v309 = *v310;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v312)
        {
          memcpy(v309, v310, *(void *)(*(void *)(v311 - 8) + 64));
          goto LABEL_144;
        }
        uint64_t v313 = v310[1];
        void *v309 = *v310;
        v309[1] = v313;
        uint64_t v314 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v370 = (char *)v309 + v314;
        v315 = (char *)v310 + v314;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v373)(v370, v315, __dstb);
      }
      swift_storeEnumTagMultiPayload();
LABEL_144:
      uint64_t v7 = v393;
      goto LABEL_145;
    case 0x23u:
      uint64_t v133 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 16))(v15, v16, v133);
      uint64_t v134 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v135 = *(int *)(v134 + 20);
      uint64_t v136 = v15 + v135;
      uint64_t v137 = v16 + v135;
      uint64_t v138 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 16))(v136, v137, v138);
      *(void *)(v15 + *(int *)(v134 + 24)) = *(void *)(v16 + *(int *)(v134 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x25u:
      uint64_t v139 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 16))(v15, v16, v139);
      uint64_t v140 = type metadata accessor for ToolResolution(0);
      uint64_t v141 = *(int *)(v140 + 20);
      uint64_t v385 = v15 + v141;
      uint64_t v142 = v16 + v141;
      uint64_t v143 = sub_253B059D0();
      uint64_t v144 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 16);
      v144(v385, v142, v143);
      v144(v15 + *(int *)(v140 + 24), v16 + *(int *)(v140 + 24), v143);
      goto LABEL_163;
    case 0x26u:
      uint64_t v145 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v145;
      uint64_t v146 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v147 = v146[5];
      uint64_t v148 = (void *)(v15 + v147);
      uint64_t v149 = (const void *)(v16 + v147);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v149, 1, v7))
      {
        uint64_t v150 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v148, v149, *(void *)(*(void *)(v150 - 8) + 64));
      }
      else
      {
        v392(v148, v149, v7);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v148, 0, 1, v7);
      }
      *(unsigned char *)(v15 + v146[6]) = *(unsigned char *)(v16 + v146[6]);
      uint64_t v225 = v146[7];
      uint64_t v226 = v15 + v225;
      uint64_t v227 = v16 + v225;
      uint64_t v228 = sub_253B059D0();
      unint64_t v229 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v228 - 8) + 16);
      uint64_t v230 = v226;
      uint64_t v231 = *v229;
      (*v229)(v230, v227, v228);
      uint64_t v232 = v146[8];
      v233 = (void *)(v15 + v232);
      uint64_t v234 = (const void *)(v16 + v232);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v234, 1, v228))
      {
        uint64_t v235 = sub_253462A5C(&qword_269CDB460);
        memcpy(v233, v234, *(void *)(*(void *)(v235 - 8) + 64));
      }
      else
      {
        v231((uint64_t)v233, (uint64_t)v234, v228);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v233, 0, 1, v228);
      }
      goto LABEL_163;
    case 0x27u:
      v8((uint64_t *)v15, (uint64_t *)v16, v7);
      uint64_t v151 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v15 + v151[5]) = *(unsigned char *)(v16 + v151[5]);
      uint64_t v152 = v151[6];
      uint64_t v153 = v15 + v152;
      uint64_t v154 = v16 + v152;
      uint64_t v155 = sub_253B059D0();
      unint64_t v156 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v155 - 8) + 16);
      uint64_t v157 = v154;
      uint64_t v158 = *v156;
      (*v156)(v153, v157, v155);
      uint64_t v159 = v151[7];
      uint64_t v160 = (void *)(v15 + v159);
      uint64_t v161 = (const void *)(v16 + v159);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v161, 1, v155))
      {
        uint64_t v162 = sub_253462A5C(&qword_269CDB460);
        memcpy(v160, v161, *(void *)(*(void *)(v162 - 8) + 64));
      }
      else
      {
        v158((uint64_t)v160, (uint64_t)v161, v155);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v160, 0, 1, v155);
      }
      goto LABEL_163;
    case 0x28u:
      uint64_t v163 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 16))(v15, v16, v163);
      uint64_t v164 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v165 = *(int *)(v164 + 20);
      uint64_t v166 = v15 + v165;
      uint64_t v167 = v16 + v165;
      uint64_t v168 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 16))(v166, v167, v168);
      uint64_t v169 = *(int *)(v164 + 24);
      uint64_t v170 = v15 + v169;
      uint64_t v171 = v16 + v169;
      uint64_t v172 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 16))(v170, v171, v172);
      goto LABEL_163;
    case 0x29u:
      uint64_t v173 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 16))(v15, v16, v173);
      uint64_t v174 = type metadata accessor for TypeConversionResult(0);
      uint64_t v175 = *(int *)(v174 + 20);
      uint64_t v386 = v15 + v175;
      uint64_t v176 = v16 + v175;
      uint64_t v177 = sub_253B059D0();
      uint64_t v178 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 16);
      v178(v386, v176, v177);
      v178(v15 + *(int *)(v174 + 24), v16 + *(int *)(v174 + 24), v177);
      goto LABEL_163;
    case 0x2Au:
      uint64_t v179 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v179;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      uint64_t DecorationResult = type metadata accessor for QueryDecorationResult(0);
      uint64_t v181 = *(int *)(DecorationResult + 28);
      __dst = (void *)(v15 + v181);
      uint64_t v387 = DecorationResult;
      uint64_t v182 = (const void *)(v16 + v181);
      uint64_t v183 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v182, 1, v183))
      {
        uint64_t v184 = sub_253462A5C(&qword_269CDBB30);
        memcpy(__dst, v182, *(void *)(*(void *)(v184 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v183 - 8) + 16))(__dst, v182, v183);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dst, 0, 1, v183);
      }
      *(void *)(v15 + *(int *)(v387 + 32)) = *(void *)(v16 + *(int *)(v387 + 32));
      *(void *)(v15 + *(int *)(v387 + 36)) = *(void *)(v16 + *(int *)(v387 + 36));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    case 0x2Cu:
      uint64_t v185 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 16))(v15, v16, v185);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v187 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v188 = (void *)(v15 + v187);
      int v189 = (uint64_t *)(v16 + v187);
      uint64_t v191 = *v189;
      uint64_t v190 = v189[1];
      *uint64_t v188 = v191;
      v188[1] = v190;
      uint64_t v192 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v193 = v15 + v192;
      uint64_t v194 = (uint64_t *)(v16 + v192);
      uint64_t v195 = *v194;
      LOBYTE(v194) = *((unsigned char *)v194 + 8);
      *(void *)uint64_t v193 = v195;
      *(unsigned char *)(v193 + 8) = (_BYTE)v194;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_163;
    default:
      memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v17 - 8) + 64));
      goto LABEL_164;
  }
}

uint64_t destroy for Session.Event(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_253B055C0();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v4)) {
    v5(v6, v4);
  }
  uint64_t v7 = a1 + a2[7];
  type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v8 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      v7 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v9 = sub_253B05CB0();
LABEL_21:
      uint64_t v16 = v9;
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v9))
      {
        uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
        uint64_t v17 = v7;
        goto LABEL_23;
      }
      goto LABEL_111;
    case 1u:
      swift_bridgeObjectRelease();
      uint64_t v10 = v7 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      uint64_t v11 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
      goto LABEL_110;
    case 2u:
    case 0x16u:
    case 0x1Bu:
    case 0x24u:
      goto LABEL_109;
    case 3u:
      type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
          v5(v7, v4);
        }
        uint64_t v84 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v5(v7 + v84[5], v4);
        uint64_t v85 = v7 + v84[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v86 = sub_253B09120();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(v85, v86);
        }
        uint64_t v87 = v7 + v84[7];
        uint64_t v88 = sub_253B059D0();
        unint64_t v89 = (void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8);
        uint64_t v90 = v87;
        uint64_t v91 = *v89;
        (*v89)(v90, v88);
        uint64_t v92 = v7 + v84[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v93 = swift_getEnumCaseMultiPayload();
        if (v93 != 1)
        {
          if (!v93)
          {
            swift_bridgeObjectRelease();
            uint64_t v94 = type metadata accessor for RequestContent.TextContent(0);
            v91(v92 + *(int *)(v94 + 20), v88);
          }
          goto LABEL_97;
        }
      }
      else if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v13 = v7 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v14 = sub_253B059D0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
        }
LABEL_97:
        uint64_t v106 = (int *)type metadata accessor for Request(0);
        uint64_t v107 = v7 + v106[6];
        uint64_t v108 = type metadata accessor for RequestPrescribedPlan(0);
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v107, 1, v108))
        {
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              swift_bridgeObjectRelease();
              break;
            case 6u:
              uint64_t v117 = sub_253B059D0();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 - 8) + 8))(v107, v117);
              break;
            default:
              break;
          }
        }
        uint64_t v109 = v7 + v106[7];
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v109, 1, v4)) {
          v5(v109, v4);
        }
        uint64_t v110 = v106[8];
        goto LABEL_108;
      }
      swift_bridgeObjectRelease();
      goto LABEL_97;
    case 4u:
    case 0x1Cu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 5u:
      uint64_t v15 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v7, v15);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 6u:
      uint64_t v16 = sub_253B059D0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v7, v16);
      }
      uint64_t v17 = v7 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
LABEL_23:
      uint64_t v22 = v16;
      goto LABEL_95;
    case 7u:
      uint64_t v19 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v7, v19);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_110;
    case 8u:
      uint64_t v20 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v7, v20);
      type metadata accessor for QueryStep(0);
      goto LABEL_110;
    case 9u:
      uint64_t v21 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v7, v21);
      type metadata accessor for VariableStep(0);
      goto LABEL_110;
    case 0xAu:
    case 0xBu:
    case 0x15u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x1Du:
      goto LABEL_110;
    case 0xCu:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_110;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_93;
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          if (swift_getEnumCaseMultiPayload() > 2) {
            goto LABEL_111;
          }
LABEL_93:
          uint64_t v23 = sub_253B05940();
          break;
        case 2u:
        case 3u:
          uint64_t v9 = sub_253B05940();
          goto LABEL_21;
        default:
          goto LABEL_111;
      }
      goto LABEL_94;
    case 0xEu:
      sub_253487D84(*(void *)v7, *(void *)(v7 + 8));
      sub_253487D84(*(void *)(v7 + 16), *(void *)(v7 + 24));
      goto LABEL_110;
    case 0xFu:
      uint64_t v23 = sub_253B059F0();
      goto LABEL_94;
    case 0x10u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
        v5(v7, v4);
      }
      uint64_t v24 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v7 + v24[5], v4);
      uint64_t v25 = v7 + v24[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v26 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
      }
      uint64_t v27 = v7 + v24[7];
      uint64_t v28 = sub_253B059D0();
      uint64_t v29 = (void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
      uint64_t v30 = v27;
      uint64_t v31 = *v29;
      (*v29)(v30, v28);
      uint64_t v32 = v7 + v24[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v33 = swift_getEnumCaseMultiPayload();
      if (v33 == 1) {
        goto LABEL_110;
      }
      if (v33) {
        goto LABEL_111;
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v32 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_64:
      uint64_t v66 = v28;
LABEL_67:
      v31(v34, v66);
      goto LABEL_111;
    case 0x11u:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
        v5(v7, v4);
      }
      uint64_t v35 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      uint64_t v36 = v7 + *(int *)(v35 + 24);
      uint64_t v37 = sub_253B05AB0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v36, v37);
      uint64_t v38 = v36 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v39 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v38, 1, v39)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
      }
      goto LABEL_110;
    case 0x12u:
      swift_bridgeObjectRelease();
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v41 = v7 + *(int *)(StepResults + 20);
      uint64_t v42 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
      v5(v7 + *(int *)(StepResults + 24), v4);
      goto LABEL_111;
    case 0x13u:
      uint64_t v23 = sub_253B05CF0();
      goto LABEL_94;
    case 0x14u:
      uint64_t v43 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v7, v43);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 0x1Eu:
      uint64_t v23 = sub_253B06720();
      goto LABEL_94;
    case 0x1Fu:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
        v5(v7, v4);
      }
      uint64_t v44 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v45 = v7 + v44[5];
      uint64_t v46 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
      uint64_t v47 = v45 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v48 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v47, 1, v48)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
      }
      uint64_t v118 = v7 + v44[6];
      uint64_t v49 = sub_253B059D0();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8);
      v50(v118, v49);
      v50(v7 + v44[7], v49);
      v50(v7 + v44[8], v49);
      if (*(void *)(v7 + v44[9] + 8)) {
        goto LABEL_109;
      }
      goto LABEL_111;
    case 0x20u:
      swift_bridgeObjectRelease();
      uint64_t v51 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_105;
    case 0x21u:
      swift_bridgeObjectRelease();
      uint64_t v51 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_105;
    case 0x22u:
      type metadata accessor for RequestContent(0);
      int v52 = swift_getEnumCaseMultiPayload();
      if (v52 != 3)
      {
        if (v52 != 2)
        {
          if (v52 == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v53 = v7 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v54 = sub_253B059D0();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v53, v54);
          }
          goto LABEL_104;
        }
LABEL_103:
        swift_bridgeObjectRelease();
        goto LABEL_104;
      }
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v4)) {
        v5(v7, v4);
      }
      uint64_t v95 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v5(v7 + v95[5], v4);
      uint64_t v96 = v7 + v95[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v97 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8))(v96, v97);
      }
      uint64_t v98 = v7 + v95[7];
      uint64_t v99 = sub_253B059D0();
      uint64_t v100 = (void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8);
      uint64_t v101 = v98;
      char v102 = *v100;
      (*v100)(v101, v99);
      uint64_t v103 = v7 + v95[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v104 = swift_getEnumCaseMultiPayload();
      if (v104 == 1) {
        goto LABEL_103;
      }
      if (!v104)
      {
        swift_bridgeObjectRelease();
        uint64_t v105 = type metadata accessor for RequestContent.TextContent(0);
        v102(v103 + *(int *)(v105 + 20), v99);
      }
LABEL_104:
      uint64_t v51 = type metadata accessor for ExternalAgentRequest(0);
LABEL_105:
      uint64_t v111 = v51;
      uint64_t v112 = v7 + *(int *)(v51 + 20);
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v112, 1, v4)) {
        v5(v112, v4);
      }
      uint64_t v110 = *(int *)(v111 + 24);
LABEL_108:
      if (*(void *)(v7 + v110 + 8))
      {
LABEL_109:
        swift_bridgeObjectRelease();
LABEL_110:
        swift_bridgeObjectRelease();
      }
LABEL_111:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v113 = a1 + a2[12];
      uint64_t v114 = sub_253B05550();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v114 - 8) + 8))(v113, v114);
      uint64_t v115 = type metadata accessor for Timepoint();
      v5(v113 + *(int *)(v115 + 28), v4);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0x23u:
      uint64_t v55 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v7, v55);
      uint64_t v56 = v7 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      uint64_t v57 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v56, v57);
      goto LABEL_110;
    case 0x25u:
      uint64_t v58 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(v7, v58);
      uint64_t v59 = type metadata accessor for ToolResolution(0);
      goto LABEL_70;
    case 0x26u:
      swift_bridgeObjectRelease();
      uint64_t v60 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v61 = v7 + v60[5];
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v61, 1, v4)) {
        v5(v61, v4);
      }
      uint64_t v62 = v7 + v60[7];
      uint64_t v28 = sub_253B059D0();
      uint64_t v63 = (void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8);
      uint64_t v64 = v62;
      uint64_t v31 = *v63;
      (*v63)(v64, v28);
      uint64_t v65 = v7 + v60[8];
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v65, 1, v28)) {
        goto LABEL_111;
      }
      uint64_t v34 = v65;
      goto LABEL_64;
    case 0x27u:
      v5(v7, v4);
      uint64_t v67 = type metadata accessor for ClientUndoRedoRequest(0);
      uint64_t v68 = v7 + *(int *)(v67 + 24);
      uint64_t v69 = sub_253B059D0();
      uint64_t v70 = (void (**)(uint64_t, uint64_t))(*(void *)(v69 - 8) + 8);
      uint64_t v71 = v68;
      uint64_t v31 = *v70;
      (*v70)(v71, v69);
      uint64_t v72 = v7 + *(int *)(v67 + 28);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v72, 1, v69)) {
        goto LABEL_111;
      }
      uint64_t v34 = v72;
      uint64_t v66 = v69;
      goto LABEL_67;
    case 0x28u:
      uint64_t v73 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v7, v73);
      uint64_t v74 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v75 = v7 + *(int *)(v74 + 20);
      uint64_t v76 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(v75, v76);
      v7 += *(int *)(v74 + 24);
      uint64_t v23 = sub_253B059D0();
LABEL_94:
      uint64_t v22 = v23;
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
      uint64_t v17 = v7;
LABEL_95:
      v18(v17, v22);
      goto LABEL_111;
    case 0x29u:
      uint64_t v77 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8))(v7, v77);
      uint64_t v59 = type metadata accessor for TypeConversionResult(0);
LABEL_70:
      uint64_t v78 = v59;
      uint64_t v119 = v7 + *(int *)(v59 + 20);
      uint64_t v79 = sub_253B059D0();
      uint64_t v80 = *(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8);
      v80(v119, v79);
      v80(v7 + *(int *)(v78 + 24), v79);
      goto LABEL_111;
    case 0x2Au:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = v7 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      uint64_t v82 = sub_253B08270();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v81, 1, v82)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(v81, v82);
      }
      goto LABEL_109;
    case 0x2Cu:
      uint64_t v83 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v7, v83);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_110;
    default:
      goto LABEL_111;
  }
}

uint64_t initializeWithCopy for Session.Event(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2 + v8, 1, v6))
  {
    uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Session.Event.Payload(0);
  v390 = (void (*)(void *, const void *, uint64_t))v7;
  uint64_t v391 = v6;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v16 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
      uint64_t v17 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v18 = (void *)(v13 + v17);
      uint64_t v19 = (const void *)(v14 + v17);
      uint64_t v20 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v19, 1, v20))
      {
        uint64_t v21 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 0, 1, v20);
      }
      goto LABEL_161;
    case 1u:
      uint64_t v22 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v22;
      *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
      uint64_t v23 = type metadata accessor for TextQuery(0);
      uint64_t v24 = *(int *)(v23 + 24);
      __dstc = (void *)(v14 + v24);
      uint64_t v381 = v13 + v24;
      uint64_t v25 = sub_253B059D0();
      uint64_t v26 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      v26(v381, __dstc, v25);
      uint64_t v27 = *(int *)(v23 + 28);
      uint64_t v28 = (void *)(v13 + v27);
      uint64_t v29 = (void *)(v14 + v27);
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 2u:
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      uint64_t v31 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 3u:
      uint64_t v32 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)uint64_t v13 = *(void *)v14;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v32 - 8) + 64));
            goto LABEL_135;
          }
          uint64_t v34 = *(void *)(v14 + 8);
          *(void *)uint64_t v13 = *(void *)v14;
          *(void *)(v13 + 8) = v34;
          uint64_t v35 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dstd = (void *)(v13 + v35);
          uint64_t v36 = v14 + v35;
          uint64_t v37 = sub_253B059D0();
          uint64_t v38 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
          swift_bridgeObjectRetain();
          v38(__dstd, v36, v37);
          uint64_t v6 = v391;
        }
LABEL_134:
        swift_storeEnumTagMultiPayload();
LABEL_135:
        uint64_t v314 = (int *)type metadata accessor for Request(0);
        *(unsigned char *)(v13 + v314[5]) = *(unsigned char *)(v14 + v314[5]);
        uint64_t v315 = v314[6];
        v316 = (void *)(v13 + v315);
        uint64_t v317 = (void *)(v14 + v315);
        uint64_t v318 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v317, 1, v318))
        {
          uint64_t v319 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v316, v317, *(void *)(*(void *)(v319 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v320 = v317[1];
              void *v316 = *v317;
              v316[1] = v320;
              *((_WORD *)v316 + 8) = *((_WORD *)v317 + 8);
              swift_bridgeObjectRetain();
              goto LABEL_154;
            case 1u:
              uint64_t v327 = v317[1];
              void *v316 = *v317;
              v316[1] = v327;
              swift_bridgeObjectRetain();
              goto LABEL_154;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v328 = v317[1];
              void *v316 = *v317;
              v316[1] = v328;
              *((unsigned char *)v316 + 16) = *((unsigned char *)v317 + 16);
              swift_bridgeObjectRetain();
              goto LABEL_154;
            case 6u:
              uint64_t v329 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v329 - 8) + 16))(v316, v317, v329);
              uint64_t v330 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v331 = (char *)v316 + v330;
              uint64_t v332 = (char *)v317 + v330;
              *(void *)uint64_t v331 = *(void *)v332;
              v331[8] = v332[8];
LABEL_154:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              memcpy(v316, v317, *(void *)(*(void *)(v318 - 8) + 64));
              break;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v316, 0, 1, v318);
        }
        uint64_t v333 = v314[7];
        v334 = (void *)(v13 + v333);
        uint64_t v335 = (const void *)(v14 + v333);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14 + v333, 1, v6))
        {
          uint64_t v336 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v334, v335, *(void *)(*(void *)(v336 - 8) + 64));
        }
        else
        {
          v390(v334, v335, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v334, 0, 1, v6);
        }
        uint64_t v337 = v314[8];
        uint64_t v220 = v13 + v337;
        uint64_t v221 = v14 + v337;
        uint64_t v222 = *(void *)(v221 + 8);
        if (!v222)
        {
          *(_OWORD *)uint64_t v220 = *(_OWORD *)v221;
          *(void *)(v220 + 16) = *(void *)(v221 + 16);
          goto LABEL_161;
        }
LABEL_148:
        *(void *)uint64_t v220 = *(void *)v221;
        *(void *)(v220 + 8) = v222;
        *(void *)(v220 + 16) = *(void *)(v221 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_161;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v6))
      {
        uint64_t v269 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v269 - 8) + 64));
      }
      else
      {
        v7(v13, v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v6);
      }
      uint64_t v274 = v7;
      uint64_t v275 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v274(v13 + v275[5], v14 + v275[5], v6);
      uint64_t v276 = v275[6];
      uint64_t v277 = (void *)(v13 + v276);
      uint64_t v278 = (const void *)(v14 + v276);
      uint64_t v279 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v280 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v280 - 8) + 16))(v277, v278, v280);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
      }
      uint64_t v281 = v275[7];
      uint64_t v282 = v13 + v281;
      uint64_t v283 = v14 + v281;
      uint64_t v284 = sub_253B059D0();
      uint64_t v285 = (void (**)(uint64_t, uint64_t))(*(void *)(v284 - 8) + 16);
      v370 = *v285;
      __dsta = (void *)v284;
      (*v285)(v282, v283);
      uint64_t v286 = v275[8];
      v287 = (void *)(v13 + v286);
      uint64_t v288 = (void *)(v14 + v286);
      uint64_t v289 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v290 = swift_getEnumCaseMultiPayload();
      if (v290 == 1)
      {
        void *v287 = *v288;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v290)
        {
          memcpy(v287, v288, *(void *)(*(void *)(v289 - 8) + 64));
          goto LABEL_133;
        }
        uint64_t v291 = v288[1];
        void *v287 = *v288;
        v287[1] = v291;
        uint64_t v292 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v367 = (char *)v287 + v292;
        uint64_t v293 = (char *)v288 + v292;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v370)(v367, v293, __dsta);
      }
      swift_storeEnumTagMultiPayload();
LABEL_133:
      uint64_t v6 = v391;
      goto LABEL_134;
    case 4u:
      uint64_t v39 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v39;
      uint64_t v40 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v40;
      uint64_t v41 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = v41;
      *(void *)(v13 + 48) = *(void *)(v14 + 48);
      *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 5u:
      uint64_t v42 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v13, v14, v42);
      uint64_t v43 = (int *)type metadata accessor for Action(0);
      uint64_t v44 = v43[5];
      uint64_t v45 = (void *)(v13 + v44);
      uint64_t v46 = (uint64_t *)(v14 + v44);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      *uint64_t v45 = v48;
      v45[1] = v47;
      *(unsigned char *)(v13 + v43[6]) = *(unsigned char *)(v14 + v43[6]);
      *(void *)(v13 + v43[7]) = *(void *)(v14 + v43[7]);
      uint64_t v49 = v43[8];
      uint64_t v50 = (void *)(v13 + v49);
      uint64_t v51 = (void *)(v14 + v49);
      uint64_t v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      uint64_t v53 = v43[9];
      uint64_t v54 = (void *)(v13 + v53);
      uint64_t v55 = (void *)(v14 + v53);
      uint64_t v56 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v55[3];
      void v54[2] = v55[2];
      v54[3] = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 6u:
      uint64_t v58 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v58))
      {
        uint64_t v59 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v13, v14, v58);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v58);
      }
      uint64_t v194 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v13 + *(int *)(v194 + 20), v14 + *(int *)(v194 + 20), v58);
      goto LABEL_161;
    case 7u:
      uint64_t v60 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v13, v14, v60);
      uint64_t v61 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v62 = v61[5];
      uint64_t v63 = (void *)(v13 + v62);
      uint64_t v64 = (uint64_t *)(v14 + v62);
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      *uint64_t v63 = v66;
      v63[1] = v65;
      *(void *)(v13 + v61[6]) = *(void *)(v14 + v61[6]);
      uint64_t v67 = v61[7];
      uint64_t v68 = (void *)(v13 + v67);
      uint64_t v69 = (void *)(v14 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v61[8];
      uint64_t v72 = (void *)(v13 + v71);
      uint64_t v73 = (void *)(v14 + v71);
      uint64_t v74 = v73[1];
      *uint64_t v72 = *v73;
      v72[1] = v74;
      *(void *)(v13 + v61[9]) = *(void *)(v14 + v61[9]);
      *(void *)(v13 + v61[10]) = *(void *)(v14 + v61[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 8u:
      uint64_t v75 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16))(v13, v14, v75);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(v13 + *(int *)(Step + 20)) = *(void *)(v14 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 9u:
      uint64_t v77 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v13, v14, v77);
      uint64_t v78 = type metadata accessor for VariableStep(0);
      *(void *)(v13 + *(int *)(v78 + 20)) = *(void *)(v14 + *(int *)(v78 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)uint64_t v13 = *(void *)v14;
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v105 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v105;
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0xCu:
      uint64_t v79 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v79;
      uint64_t v80 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v80;
      uint64_t v81 = *(void *)(v14 + 32);
      uint64_t v82 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = v81;
      *(void *)(v13 + 40) = v82;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v270 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v270 - 8) + 16))(v13, v14, v270);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v271 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v271)) {
            goto LABEL_114;
          }
          uint64_t v272 = type metadata accessor for PlannerError();
          goto LABEL_109;
        case 3u:
          uint64_t v271 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v271))
          {
            uint64_t v272 = type metadata accessor for ExecutorError();
LABEL_109:
            memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v272 - 8) + 64));
          }
          else
          {
LABEL_114:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v271 - 8) + 16))(v13, v14, v271);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v271);
          }
          break;
        default:
          uint64_t v83 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(v13, v14, v83);
          break;
      }
      goto LABEL_98;
    case 0xEu:
      uint64_t v84 = *(void *)v14;
      unint64_t v85 = *(void *)(v14 + 8);
      sub_25348A9C8(*(void *)v14, v85);
      *(void *)uint64_t v13 = v84;
      *(void *)(v13 + 8) = v85;
      uint64_t v86 = *(void *)(v14 + 16);
      unint64_t v87 = *(void *)(v14 + 24);
      sub_25348A9C8(v86, v87);
      *(void *)(v13 + 16) = v86;
      *(void *)(v13 + 24) = v87;
      uint64_t v88 = *(void *)(v14 + 40);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(void *)(v13 + 40) = v88;
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0xFu:
      uint64_t v89 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 16))(v13, v14, v89);
      goto LABEL_161;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v6))
      {
        uint64_t v90 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v90 - 8) + 64));
      }
      else
      {
        v7(v13, v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v6);
      }
      uint64_t v249 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v7(v13 + v249[5], v14 + v249[5], v6);
      uint64_t v250 = v249[6];
      uint64_t v251 = (void *)(v13 + v250);
      uint64_t v252 = (const void *)(v14 + v250);
      uint64_t v253 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v254 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v254 - 8) + 16))(v251, v252, v254);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
      }
      uint64_t v255 = v249[7];
      uint64_t v256 = v13 + v255;
      uint64_t v257 = v14 + v255;
      uint64_t v258 = sub_253B059D0();
      uint64_t v259 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v258 - 8) + 16);
      uint64_t v388 = *v259;
      (*v259)(v256, v257, v258);
      uint64_t v260 = v249[8];
      uint64_t v261 = (void *)(v13 + v260);
      uint64_t v262 = (void *)(v14 + v260);
      uint64_t v263 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v264 = swift_getEnumCaseMultiPayload();
      if (v264 == 1)
      {
        *uint64_t v261 = *v262;
        swift_bridgeObjectRetain();
        goto LABEL_98;
      }
      if (!v264)
      {
        uint64_t v265 = v262[1];
        *uint64_t v261 = *v262;
        v261[1] = v265;
        uint64_t v266 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        __dsth = (char *)v261 + v266;
        uint64_t v267 = (char *)v262 + v266;
        swift_bridgeObjectRetain();
        v388((uint64_t)__dsth, (uint64_t)v267, v258);
LABEL_98:
        swift_storeEnumTagMultiPayload();
        goto LABEL_161;
      }
      memcpy(v261, v262, *(void *)(*(void *)(v263 - 8) + 64));
LABEL_161:
      swift_storeEnumTagMultiPayload();
LABEL_162:
      uint64_t v338 = a3[8];
      uint64_t v339 = a3[9];
      uint64_t v340 = (void *)(a1 + v338);
      uint64_t v341 = (void *)(a2 + v338);
      uint64_t v342 = v341[1];
      *uint64_t v340 = *v341;
      v340[1] = v342;
      v343 = (void *)(a1 + v339);
      uint64_t v344 = (void *)(a2 + v339);
      uint64_t v345 = v344[1];
      void *v343 = *v344;
      v343[1] = v345;
      uint64_t v346 = a3[10];
      uint64_t v347 = a3[11];
      uint64_t v348 = (void *)(a1 + v346);
      uint64_t v349 = (void *)(a2 + v346);
      uint64_t v350 = v349[1];
      *uint64_t v348 = *v349;
      v348[1] = v350;
      v351 = (void *)(a1 + v347);
      uint64_t v352 = (void *)(a2 + v347);
      uint64_t v353 = v352[1];
      void *v351 = *v352;
      v351[1] = v353;
      uint64_t v354 = a3[12];
      uint64_t v355 = a1 + v354;
      uint64_t v356 = a2 + v354;
      uint64_t v357 = sub_253B05550();
      uint64_t v389 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v357 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v389(v355, v356, v357);
      v358 = (int *)type metadata accessor for Timepoint();
      *(void *)(v355 + v358[5]) = *(void *)(v356 + v358[5]);
      *(void *)(v355 + v358[6]) = *(void *)(v356 + v358[6]);
      v390((void *)(v355 + v358[7]), (const void *)(v356 + v358[7]), v391);
      uint64_t v359 = a3[13];
      uint64_t v360 = a3[14];
      uint64_t v361 = (void *)(a1 + v359);
      uint64_t v362 = (void *)(a2 + v359);
      uint64_t v363 = v362[1];
      *uint64_t v361 = *v362;
      v361[1] = v363;
      uint64_t v364 = a1 + v360;
      uint64_t v365 = a2 + v360;
      *(unsigned char *)(v364 + 8) = *(unsigned char *)(v365 + 8);
      *(void *)uint64_t v364 = *(void *)v365;
      *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 0x11u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v6))
      {
        uint64_t v91 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        v7(v13, v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v6);
      }
      uint64_t v195 = type metadata accessor for ActionStepResult(0);
      uint64_t v196 = *(int *)(v195 + 20);
      uint64_t v197 = (void *)(v13 + v196);
      uint64_t v198 = (void *)(v14 + v196);
      uint64_t v199 = v198[1];
      *uint64_t v197 = *v198;
      v197[1] = v199;
      uint64_t v200 = *(int *)(v195 + 24);
      uint64_t v201 = v13 + v200;
      __dstg = (char *)(v14 + v200);
      uint64_t v386 = v195;
      uint64_t v202 = sub_253B05AB0();
      uint64_t v203 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v202 - 8) + 16);
      swift_bridgeObjectRetain();
      v203(v201, __dstg, v202);
      uint64_t v204 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v205 = (void *)(v201 + v204);
      uint64_t v206 = &__dstg[v204];
      uint64_t v207 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v206, 1, v207))
      {
        uint64_t v208 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v205, v206, *(void *)(*(void *)(v208 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v207 - 8) + 16))(v205, v206, v207);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v205, 0, 1, v207);
      }
      uint64_t v234 = *(int *)(v386 + 28);
      uint64_t v235 = (void *)(v13 + v234);
      uint64_t v236 = (void *)(v14 + v234);
      uint64_t v237 = v236[1];
      *uint64_t v235 = *v236;
      v235[1] = v237;
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x12u:
      *(void *)uint64_t v13 = *(void *)v14;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v93 = *(int *)(StepResults + 20);
      __dste = (void *)(v14 + v93);
      uint64_t v382 = v13 + v93;
      uint64_t v94 = v7;
      uint64_t v95 = sub_253B059D0();
      v369 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v95 - 8) + 16);
      swift_bridgeObjectRetain();
      v369(v382, __dste, v95);
      v94(v13 + *(int *)(StepResults + 24), v14 + *(int *)(StepResults + 24), v6);
      goto LABEL_161;
    case 0x13u:
      uint64_t v96 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v13, v14, v96);
      goto LABEL_161;
    case 0x14u:
      uint64_t v97 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v13, v14, v97);
      uint64_t v98 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(v13 + v98[5]) = *(void *)(v14 + v98[5]);
      *(void *)(v13 + v98[6]) = *(void *)(v14 + v98[6]);
      *(void *)(v13 + v98[7]) = *(void *)(v14 + v98[7]);
      *(unsigned char *)(v13 + v98[8]) = *(unsigned char *)(v14 + v98[8]);
      *(unsigned char *)(v13 + v98[9]) = *(unsigned char *)(v14 + v98[9]);
      *(unsigned char *)(v13 + v98[10]) = *(unsigned char *)(v14 + v98[10]);
      uint64_t v99 = v98[11];
      uint64_t v100 = (void *)(v13 + v99);
      uint64_t v101 = (void *)(v14 + v99);
      uint64_t v102 = v101[1];
      *uint64_t v100 = *v101;
      v100[1] = v102;
      uint64_t v103 = v101[3];
      v100[2] = v101[2];
      v100[3] = v103;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x16u:
    case 0x24u:
      uint64_t v104 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v104;
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x1Bu:
      uint64_t v106 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v106;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x1Cu:
      uint64_t v107 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v107;
      uint64_t v108 = *(void *)(v14 + 24);
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      *(void *)(v13 + 24) = v108;
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v14 + 32);
      uint64_t v110 = *(void *)(v14 + 40);
      uint64_t v109 = *(void *)(v14 + 48);
      *(void *)(v13 + 40) = v110;
      *(void *)(v13 + 48) = v109;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x1Eu:
      uint64_t v111 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 16))(v13, v14, v111);
      goto LABEL_161;
    case 0x1Fu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v6))
      {
        uint64_t v112 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v112 - 8) + 64));
      }
      else
      {
        v7(v13, v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v6);
      }
      uint64_t v209 = type metadata accessor for StatementResult(0);
      uint64_t v210 = *(int *)(v209 + 20);
      uint64_t v211 = v13 + v210;
      uint64_t v212 = v14 + v210;
      uint64_t v213 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 16))(v211, v212, v213);
      uint64_t v214 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v215 = (void *)(v211 + v214);
      uint64_t v216 = (const void *)(v212 + v214);
      uint64_t v217 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v216, 1, v217))
      {
        uint64_t v218 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v215, v216, *(void *)(*(void *)(v218 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v217 - 8) + 16))(v215, v216, v217);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v215, 0, 1, v217);
      }
      uint64_t v238 = *(int *)(v209 + 24);
      uint64_t v387 = v13 + v238;
      uint64_t v239 = v14 + v238;
      uint64_t v240 = sub_253B059D0();
      uint64_t v241 = (int *)v209;
      uint64_t v242 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v240 - 8) + 16);
      v242(v387, v239, v240);
      v242(v13 + v241[7], v14 + v241[7], v240);
      v242(v13 + v241[8], v14 + v241[8], v240);
      uint64_t v243 = v241[9];
      uint64_t v244 = (void *)(v13 + v243);
      uint64_t v245 = (void *)(v14 + v243);
      uint64_t v246 = v245[1];
      if (v246)
      {
        *uint64_t v244 = *v245;
        v244[1] = v246;
        uint64_t v247 = v245[3];
        v244[2] = v245[2];
        v244[3] = v247;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v248 = *((_OWORD *)v245 + 1);
        *(_OWORD *)uint64_t v244 = *(_OWORD *)v245;
        *((_OWORD *)v244 + 1) = v248;
      }
      goto LABEL_161;
    case 0x20u:
      uint64_t v113 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v113;
      uint64_t v114 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v115 = *(int *)(v114 + 20);
      uint64_t v116 = (void *)(v13 + v115);
      uint64_t v117 = (const void *)(v14 + v115);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v117, 1, v6))
      {
        uint64_t v118 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
      }
      else
      {
        v390(v116, v117, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v116, 0, 1, v6);
      }
      uint64_t v219 = *(int *)(v114 + 24);
      uint64_t v220 = v13 + v219;
      uint64_t v221 = v14 + v219;
      uint64_t v222 = *(void *)(v221 + 8);
      if (v222) {
        goto LABEL_148;
      }
      *(_OWORD *)uint64_t v220 = *(_OWORD *)v221;
      *(void *)(v220 + 16) = *(void *)(v221 + 16);
      goto LABEL_161;
    case 0x21u:
      *(void *)uint64_t v13 = *(void *)v14;
      uint64_t v119 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v120 = *(int *)(v119 + 20);
      uint64_t v121 = (void *)(v13 + v120);
      uint64_t v122 = (const void *)(v14 + v120);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v122, 1, v6))
      {
        uint64_t v123 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v121, v122, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        v390(v121, v122, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v121, 0, 1, v6);
      }
      uint64_t v268 = *(int *)(v119 + 24);
      uint64_t v220 = v13 + v268;
      uint64_t v221 = v14 + v268;
      uint64_t v222 = *(void *)(v221 + 8);
      if (v222) {
        goto LABEL_148;
      }
      *(_OWORD *)uint64_t v220 = *(_OWORD *)v221;
      *(void *)(v220 + 16) = *(void *)(v221 + 16);
      goto LABEL_161;
    case 0x22u:
      uint64_t v124 = type metadata accessor for RequestContent(0);
      int v125 = swift_getEnumCaseMultiPayload();
      if (v125 != 3)
      {
        if (v125 == 2)
        {
          *(void *)uint64_t v13 = *(void *)v14;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v125 != 1)
          {
            memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v124 - 8) + 64));
            goto LABEL_144;
          }
          uint64_t v126 = *(void *)(v14 + 8);
          *(void *)uint64_t v13 = *(void *)v14;
          *(void *)(v13 + 8) = v126;
          uint64_t v127 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          __dstf = (void *)(v13 + v127);
          uint64_t v128 = v14 + v127;
          uint64_t v129 = sub_253B059D0();
          uint64_t v130 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v129 - 8) + 16);
          swift_bridgeObjectRetain();
          v130(__dstf, v128, v129);
          uint64_t v6 = v391;
        }
LABEL_143:
        swift_storeEnumTagMultiPayload();
LABEL_144:
        uint64_t v321 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v322 = *(int *)(v321 + 20);
        uint64_t v323 = (void *)(v13 + v322);
        uint64_t v324 = (const void *)(v14 + v322);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14 + v322, 1, v6))
        {
          uint64_t v325 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v323, v324, *(void *)(*(void *)(v325 - 8) + 64));
        }
        else
        {
          v390(v323, v324, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v323, 0, 1, v6);
        }
        uint64_t v326 = *(int *)(v321 + 24);
        uint64_t v220 = v13 + v326;
        uint64_t v221 = v14 + v326;
        uint64_t v222 = *(void *)(v221 + 8);
        if (!v222)
        {
          *(_OWORD *)uint64_t v220 = *(_OWORD *)v221;
          *(void *)(v220 + 16) = *(void *)(v221 + 16);
          goto LABEL_161;
        }
        goto LABEL_148;
      }
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v14, 1, v6))
      {
        uint64_t v273 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v273 - 8) + 64));
      }
      else
      {
        v7(v13, v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v6);
      }
      uint64_t v294 = v7;
      v295 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      v294(v13 + v295[5], v14 + v295[5], v6);
      uint64_t v296 = v295[6];
      v297 = (void *)(v13 + v296);
      uint64_t v298 = (const void *)(v14 + v296);
      uint64_t v299 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v300 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v300 - 8) + 16))(v297, v298, v300);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v297, v298, *(void *)(*(void *)(v299 - 8) + 64));
      }
      uint64_t v301 = v295[7];
      uint64_t v302 = v13 + v301;
      uint64_t v303 = v14 + v301;
      uint64_t v304 = sub_253B059D0();
      uint64_t v305 = (void (**)(uint64_t, uint64_t))(*(void *)(v304 - 8) + 16);
      v371 = *v305;
      __dstb = (void *)v304;
      (*v305)(v302, v303);
      uint64_t v306 = v295[8];
      v307 = (void *)(v13 + v306);
      uint64_t v308 = (void *)(v14 + v306);
      uint64_t v309 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v310 = swift_getEnumCaseMultiPayload();
      if (v310 == 1)
      {
        void *v307 = *v308;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v310)
        {
          memcpy(v307, v308, *(void *)(*(void *)(v309 - 8) + 64));
          goto LABEL_142;
        }
        uint64_t v311 = v308[1];
        void *v307 = *v308;
        v307[1] = v311;
        uint64_t v312 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        v368 = (char *)v307 + v312;
        uint64_t v313 = (char *)v308 + v312;
        swift_bridgeObjectRetain();
        ((void (*)(char *, char *, void *))v371)(v368, v313, __dstb);
      }
      swift_storeEnumTagMultiPayload();
LABEL_142:
      uint64_t v6 = v391;
      goto LABEL_143;
    case 0x23u:
      uint64_t v131 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 16))(v13, v14, v131);
      uint64_t v132 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v133 = *(int *)(v132 + 20);
      uint64_t v134 = v13 + v133;
      uint64_t v135 = v14 + v133;
      uint64_t v136 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(v134, v135, v136);
      *(void *)(v13 + *(int *)(v132 + 24)) = *(void *)(v14 + *(int *)(v132 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x25u:
      uint64_t v137 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16))(v13, v14, v137);
      uint64_t v138 = type metadata accessor for ToolResolution(0);
      uint64_t v139 = *(int *)(v138 + 20);
      uint64_t v383 = v13 + v139;
      uint64_t v140 = v14 + v139;
      uint64_t v141 = sub_253B059D0();
      uint64_t v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 16);
      v142(v383, v140, v141);
      v142(v13 + *(int *)(v138 + 24), v14 + *(int *)(v138 + 24), v141);
      goto LABEL_161;
    case 0x26u:
      uint64_t v143 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v143;
      uint64_t v144 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v145 = v144[5];
      uint64_t v146 = (void *)(v13 + v145);
      uint64_t v147 = (const void *)(v14 + v145);
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v147, 1, v6))
      {
        uint64_t v148 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v146, v147, *(void *)(*(void *)(v148 - 8) + 64));
      }
      else
      {
        v390(v146, v147, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v146, 0, 1, v6);
      }
      *(unsigned char *)(v13 + v144[6]) = *(unsigned char *)(v14 + v144[6]);
      uint64_t v223 = v144[7];
      uint64_t v224 = v13 + v223;
      uint64_t v225 = v14 + v223;
      uint64_t v226 = sub_253B059D0();
      uint64_t v227 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 16);
      uint64_t v228 = v224;
      unint64_t v229 = *v227;
      (*v227)(v228, v225, v226);
      uint64_t v230 = v144[8];
      uint64_t v231 = (void *)(v13 + v230);
      uint64_t v232 = (const void *)(v14 + v230);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v232, 1, v226))
      {
        uint64_t v233 = sub_253462A5C(&qword_269CDB460);
        memcpy(v231, v232, *(void *)(*(void *)(v233 - 8) + 64));
      }
      else
      {
        v229((uint64_t)v231, (uint64_t)v232, v226);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v231, 0, 1, v226);
      }
      goto LABEL_161;
    case 0x27u:
      v7(v13, v14, v6);
      uint64_t v149 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(v13 + v149[5]) = *(unsigned char *)(v14 + v149[5]);
      uint64_t v150 = v149[6];
      uint64_t v151 = v13 + v150;
      uint64_t v152 = v14 + v150;
      uint64_t v153 = sub_253B059D0();
      uint64_t v154 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 16);
      uint64_t v155 = v152;
      unint64_t v156 = *v154;
      (*v154)(v151, v155, v153);
      uint64_t v157 = v149[7];
      uint64_t v158 = (void *)(v13 + v157);
      uint64_t v159 = (const void *)(v14 + v157);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v159, 1, v153))
      {
        uint64_t v160 = sub_253462A5C(&qword_269CDB460);
        memcpy(v158, v159, *(void *)(*(void *)(v160 - 8) + 64));
      }
      else
      {
        v156((uint64_t)v158, (uint64_t)v159, v153);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v158, 0, 1, v153);
      }
      goto LABEL_161;
    case 0x28u:
      uint64_t v161 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v161 - 8) + 16))(v13, v14, v161);
      uint64_t v162 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v163 = *(int *)(v162 + 20);
      uint64_t v164 = v13 + v163;
      uint64_t v165 = v14 + v163;
      uint64_t v166 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 16))(v164, v165, v166);
      uint64_t v167 = *(int *)(v162 + 24);
      uint64_t v168 = v13 + v167;
      uint64_t v169 = v14 + v167;
      uint64_t v170 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 16))(v168, v169, v170);
      goto LABEL_161;
    case 0x29u:
      uint64_t v171 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 16))(v13, v14, v171);
      uint64_t v172 = type metadata accessor for TypeConversionResult(0);
      uint64_t v173 = *(int *)(v172 + 20);
      uint64_t v384 = v13 + v173;
      uint64_t v174 = v14 + v173;
      uint64_t v175 = sub_253B059D0();
      uint64_t v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 16);
      v176(v384, v174, v175);
      v176(v13 + *(int *)(v172 + 24), v14 + *(int *)(v172 + 24), v175);
      goto LABEL_161;
    case 0x2Au:
      uint64_t v177 = *(void *)(v14 + 8);
      *(void *)uint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v177;
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      uint64_t DecorationResult = type metadata accessor for QueryDecorationResult(0);
      uint64_t v179 = *(int *)(DecorationResult + 28);
      __dst = (void *)(v13 + v179);
      uint64_t v385 = DecorationResult;
      uint64_t v180 = (const void *)(v14 + v179);
      uint64_t v181 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v180, 1, v181))
      {
        uint64_t v182 = sub_253462A5C(&qword_269CDBB30);
        memcpy(__dst, v180, *(void *)(*(void *)(v182 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v181 - 8) + 16))(__dst, v180, v181);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dst, 0, 1, v181);
      }
      *(void *)(v13 + *(int *)(v385 + 32)) = *(void *)(v14 + *(int *)(v385 + 32));
      *(void *)(v13 + *(int *)(v385 + 36)) = *(void *)(v14 + *(int *)(v385 + 36));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    case 0x2Cu:
      uint64_t v183 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v183 - 8) + 16))(v13, v14, v183);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v185 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v186 = (void *)(v13 + v185);
      uint64_t v187 = (uint64_t *)(v14 + v185);
      uint64_t v189 = *v187;
      uint64_t v188 = v187[1];
      *uint64_t v186 = v189;
      v186[1] = v188;
      uint64_t v190 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v191 = v13 + v190;
      uint64_t v192 = (uint64_t *)(v14 + v190);
      uint64_t v193 = *v192;
      LOBYTE(v192) = *((unsigned char *)v192 + 8);
      *(void *)uint64_t v191 = v193;
      *(unsigned char *)(v191 + 8) = (_BYTE)v192;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_161;
    default:
      memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_162;
  }
}

uint64_t assignWithCopy for Session.Event(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v9, 1, v6);
  int v13 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  if (a1 != a2)
  {
    __dst = (void (**)(void *, const void *, uint64_t))v7;
    uint64_t v15 = a3[7];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    sub_2539DF610();
    uint64_t v18 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = sub_253B05D70();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17, v19);
        uint64_t v20 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v21 = (void *)(v16 + v20);
        uint64_t v22 = (const void *)(v17 + v20);
        uint64_t v23 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23))
        {
          uint64_t v24 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
        }
        goto LABEL_168;
      case 1u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
        uint64_t v25 = type metadata accessor for TextQuery(0);
        uint64_t v26 = *(int *)(v25 + 24);
        __dste = (void *)(v16 + v26);
        uint64_t v330 = v17 + v26;
        uint64_t v27 = sub_253B059D0();
        uint64_t v320 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
        swift_bridgeObjectRetain();
        v320(__dste, v330, v27);
        uint64_t v28 = *(int *)(v25 + 28);
        uint64_t v29 = (void *)(v16 + v28);
        uint64_t v30 = (void *)(v17 + v28);
        *uint64_t v29 = *v30;
        v29[1] = v30[1];
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 2u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 3u:
        uint64_t v31 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v337 = v8;
        if (EnumCaseMultiPayload != 3)
        {
          if (EnumCaseMultiPayload == 2)
          {
            *(void *)uint64_t v16 = *(void *)v17;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v31 - 8) + 64));
              goto LABEL_143;
            }
            *(void *)uint64_t v16 = *(void *)v17;
            *(void *)(v16 + 8) = *(void *)(v17 + 8);
            uint64_t v33 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v315 = v17 + v33;
            uint64_t v321 = v16 + v33;
            uint64_t v34 = sub_253B059D0();
            uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
            swift_bridgeObjectRetain();
            v35(v321, v315, v34);
          }
LABEL_142:
          swift_storeEnumTagMultiPayload();
LABEL_143:
          int v264 = (int *)type metadata accessor for Request(0);
          *(unsigned char *)(v16 + v264[5]) = *(unsigned char *)(v17 + v264[5]);
          uint64_t v265 = v264[6];
          uint64_t v266 = (void *)(v16 + v265);
          uint64_t v267 = (void *)(v17 + v265);
          uint64_t v268 = type metadata accessor for RequestPrescribedPlan(0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v267, 1, v268))
          {
            uint64_t v269 = sub_253462A5C(&qword_269CDBB20);
            memcpy(v266, v267, *(void *)(*(void *)(v269 - 8) + 64));
          }
          else
          {
            switch(swift_getEnumCaseMultiPayload())
            {
              case 0u:
                *uint64_t v266 = *v267;
                v266[1] = v267[1];
                *((unsigned char *)v266 + 16) = *((unsigned char *)v267 + 16);
                *((unsigned char *)v266 + 17) = *((unsigned char *)v267 + 17);
                swift_bridgeObjectRetain();
                goto LABEL_160;
              case 1u:
                *uint64_t v266 = *v267;
                v266[1] = v267[1];
                swift_bridgeObjectRetain();
                goto LABEL_160;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
                *uint64_t v266 = *v267;
                v266[1] = v267[1];
                *((unsigned char *)v266 + 16) = *((unsigned char *)v267 + 16);
                swift_bridgeObjectRetain();
                goto LABEL_160;
              case 6u:
                uint64_t v277 = sub_253B059D0();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v277 - 8) + 16))(v266, v267, v277);
                uint64_t v278 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
                uint64_t v279 = (char *)v266 + v278;
                uint64_t v280 = (char *)v267 + v278;
                char v281 = v280[8];
                *(void *)uint64_t v279 = *(void *)v280;
                v279[8] = v281;
LABEL_160:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v266, v267, *(void *)(*(void *)(v268 - 8) + 64));
                break;
            }
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v266, 0, 1, v268);
          }
          uint64_t v282 = v264[7];
          uint64_t v283 = (void *)(v16 + v282);
          uint64_t v284 = (const void *)(v17 + v282);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v282, 1, v6))
          {
            uint64_t v285 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v283, v284, *(void *)(*(void *)(v285 - 8) + 64));
          }
          else
          {
            __dst[2](v283, v284, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v283, 0, 1, v6);
          }
          uint64_t v286 = v264[8];
          uint64_t v179 = v16 + v286;
          uint64_t v180 = (long long *)(v17 + v286);
          uint64_t v8 = v337;
          if (!*((void *)v180 + 1))
          {
            long long v287 = *v180;
            *(void *)(v179 + 16) = *((void *)v180 + 2);
            *(_OWORD *)uint64_t v179 = v287;
            goto LABEL_168;
          }
          goto LABEL_166;
        }
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v222 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v222 - 8) + 64));
          uint64_t v223 = __dst;
        }
        else
        {
          uint64_t v223 = __dst;
          __dst[2]((void *)v16, (const void *)v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v230 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v223[2]((void *)(v16 + v230[5]), (const void *)(v17 + v230[5]), v6);
        uint64_t v231 = v230[6];
        uint64_t v232 = (void *)(v16 + v231);
        uint64_t v233 = (const void *)(v17 + v231);
        uint64_t v234 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v235 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v235 - 8) + 16))(v232, v233, v235);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v232, v233, *(void *)(*(void *)(v234 - 8) + 64));
        }
        uint64_t v236 = v230[7];
        uint64_t v237 = v16 + v236;
        uint64_t v238 = v17 + v236;
        uint64_t v239 = sub_253B059D0();
        uint64_t v318 = *(void (**)(uint64_t, uint64_t))(*(void *)(v239 - 8) + 16);
        uint64_t v328 = v239;
        v318(v237, v238);
        uint64_t v240 = v230[8];
        uint64_t v241 = (void *)(v16 + v240);
        uint64_t v242 = (void *)(v17 + v240);
        uint64_t v243 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v244 = swift_getEnumCaseMultiPayload();
        if (v244 == 1)
        {
          *uint64_t v241 = *v242;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v244)
          {
            memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
            goto LABEL_142;
          }
          *uint64_t v241 = *v242;
          v241[1] = v242[1];
          uint64_t v245 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v313 = (char *)v241 + v245;
          uint64_t v246 = (char *)v242 + v245;
          swift_bridgeObjectRetain();
          ((void (*)(char *, char *, uint64_t))v318)(v313, v246, v328);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_142;
      case 4u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        *(void *)(v16 + 48) = *(void *)(v17 + 48);
        *(unsigned char *)(v16 + 56) = *(unsigned char *)(v17 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 5u:
        uint64_t v36 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v16, v17, v36);
        uint64_t v37 = (int *)type metadata accessor for Action(0);
        uint64_t v38 = v37[5];
        uint64_t v39 = (void *)(v16 + v38);
        uint64_t v40 = (void *)(v17 + v38);
        *uint64_t v39 = *v40;
        v39[1] = v40[1];
        *(unsigned char *)(v16 + v37[6]) = *(unsigned char *)(v17 + v37[6]);
        *(void *)(v16 + v37[7]) = *(void *)(v17 + v37[7]);
        uint64_t v41 = v37[8];
        uint64_t v42 = (void *)(v16 + v41);
        uint64_t v43 = (void *)(v17 + v41);
        *uint64_t v42 = *v43;
        v42[1] = v43[1];
        uint64_t v44 = v37[9];
        uint64_t v45 = (void *)(v16 + v44);
        uint64_t v46 = (void *)(v17 + v44);
        *uint64_t v45 = *v46;
        v45[1] = v46[1];
        v45[2] = v46[2];
        v45[3] = v46[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 6u:
        uint64_t v47 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v47))
        {
          uint64_t v48 = sub_253462A5C(&qword_269CDB460);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v16, v17, v47);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v47);
        }
        uint64_t v156 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v16 + *(int *)(v156 + 20), v17 + *(int *)(v156 + 20), v47);
        goto LABEL_168;
      case 7u:
        uint64_t v49 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v16, v17, v49);
        uint64_t v50 = (int *)type metadata accessor for ClientAction(0);
        uint64_t v51 = v50[5];
        uint64_t v52 = (void *)(v16 + v51);
        uint64_t v53 = (void *)(v17 + v51);
        *uint64_t v52 = *v53;
        v52[1] = v53[1];
        *(void *)(v16 + v50[6]) = *(void *)(v17 + v50[6]);
        uint64_t v54 = v50[7];
        uint64_t v55 = (void *)(v16 + v54);
        uint64_t v56 = (void *)(v17 + v54);
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        uint64_t v57 = v50[8];
        uint64_t v58 = (void *)(v16 + v57);
        uint64_t v59 = (void *)(v17 + v57);
        *uint64_t v58 = *v59;
        v58[1] = v59[1];
        *(void *)(v16 + v50[9]) = *(void *)(v17 + v50[9]);
        *(void *)(v16 + v50[10]) = *(void *)(v17 + v50[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 8u:
        uint64_t v60 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v16, v17, v60);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)(v16 + *(int *)(Step + 20)) = *(void *)(v17 + *(int *)(Step + 20));
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 9u:
        uint64_t v62 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v16, v17, v62);
        uint64_t v63 = type metadata accessor for VariableStep(0);
        *(void *)(v16 + *(int *)(v63 + 20)) = *(void *)(v17 + *(int *)(v63 + 20));
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0xAu:
      case 0x15u:
      case 0x1Du:
        *(void *)uint64_t v16 = *(void *)v17;
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0xBu:
      case 0x17u:
      case 0x18u:
      case 0x1Au:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0xCu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v224 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 16))(v16, v17, v224);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v225 = v8;
            uint64_t v226 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v226)) {
              goto LABEL_122;
            }
            uint64_t v227 = type metadata accessor for PlannerError();
            goto LABEL_117;
          case 3u:
            uint64_t v225 = v8;
            uint64_t v226 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v226))
            {
              uint64_t v227 = type metadata accessor for ExecutorError();
LABEL_117:
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v227 - 8) + 64));
            }
            else
            {
LABEL_122:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 16))(v16, v17, v226);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v226);
            }
            uint64_t v8 = v225;
            break;
          default:
            uint64_t v64 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v16, v17, v64);
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_168;
      case 0xEu:
        uint64_t v65 = *(void *)v17;
        unint64_t v66 = *(void *)(v17 + 8);
        sub_25348A9C8(*(void *)v17, v66);
        *(void *)uint64_t v16 = v65;
        *(void *)(v16 + 8) = v66;
        uint64_t v67 = *(void *)(v17 + 16);
        unint64_t v68 = *(void *)(v17 + 24);
        sub_25348A9C8(v67, v68);
        *(void *)(v16 + 16) = v67;
        *(void *)(v16 + 24) = v68;
        *(void *)(v16 + 32) = *(void *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0xFu:
        uint64_t v69 = sub_253B059F0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v16, v17, v69);
        goto LABEL_168;
      case 0x10u:
        uint64_t v338 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v70 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v70 - 8) + 64));
          uint64_t v71 = __dst;
        }
        else
        {
          uint64_t v71 = __dst;
          __dst[2]((void *)v16, (const void *)v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v203 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v71[2]((void *)(v16 + v203[5]), (const void *)(v17 + v203[5]), v6);
        uint64_t v204 = v203[6];
        uint64_t v205 = (void *)(v16 + v204);
        uint64_t v206 = (const void *)(v17 + v204);
        uint64_t v207 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v208 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v208 - 8) + 16))(v205, v206, v208);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v205, v206, *(void *)(*(void *)(v207 - 8) + 64));
        }
        uint64_t v209 = v203[7];
        uint64_t v210 = v16 + v209;
        uint64_t v211 = v17 + v209;
        uint64_t v212 = sub_253B059D0();
        __dstd = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 16);
        __dstd(v210, v211, v212);
        uint64_t v213 = v203[8];
        uint64_t v214 = (void *)(v16 + v213);
        uint64_t v215 = (void *)(v17 + v213);
        uint64_t v216 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v217 = swift_getEnumCaseMultiPayload();
        if (v217 == 1)
        {
          *uint64_t v214 = *v215;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v217)
          {
            memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
LABEL_107:
            uint64_t v8 = v338;
            goto LABEL_168;
          }
          *uint64_t v214 = *v215;
          v214[1] = v215[1];
          uint64_t v218 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v327 = (char *)v214 + v218;
          uint64_t v219 = (char *)v215 + v218;
          swift_bridgeObjectRetain();
          __dstd((uint64_t)v327, (uint64_t)v219, v212);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_107;
      case 0x11u:
        uint64_t v339 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v72 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          __dst[2]((void *)v16, (const void *)v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v157 = type metadata accessor for ActionStepResult(0);
        uint64_t v158 = *(int *)(v157 + 20);
        uint64_t v159 = (void *)(v16 + v158);
        uint64_t v160 = (void *)(v17 + v158);
        *uint64_t v159 = *v160;
        v159[1] = v160[1];
        __dstb = (int *)v157;
        uint64_t v161 = *(int *)(v157 + 24);
        uint64_t v162 = v16 + v161;
        uint64_t v335 = v17 + v161;
        uint64_t v163 = sub_253B05AB0();
        uint64_t v325 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 16);
        swift_bridgeObjectRetain();
        v325(v162, v335, v163);
        uint64_t v164 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v165 = (void *)(v162 + v164);
        uint64_t v166 = (const void *)(v335 + v164);
        uint64_t v167 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v166, 1, v167))
        {
          uint64_t v168 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v165, v166, *(void *)(*(void *)(v168 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v167 - 8) + 16))(v165, v166, v167);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v165, 0, 1, v167);
        }
        uint64_t v191 = __dstb[7];
        uint64_t v192 = (void *)(v16 + v191);
        uint64_t v193 = (void *)(v17 + v191);
        *uint64_t v192 = *v193;
        v192[1] = v193[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        uint64_t v8 = v339;
        break;
      case 0x12u:
        *(void *)uint64_t v16 = *(void *)v17;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v74 = *(int *)(StepResults + 20);
        uint64_t v322 = v17 + v74;
        uint64_t v331 = v16 + v74;
        uint64_t v75 = sub_253B059D0();
        v316 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16);
        swift_bridgeObjectRetain();
        v316(v331, v322, v75);
        __dst[2]((void *)(v16 + *(int *)(StepResults + 24)), (const void *)(v17 + *(int *)(StepResults + 24)), v6);
        goto LABEL_168;
      case 0x13u:
        uint64_t v76 = sub_253B05CF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16))(v16, v17, v76);
        goto LABEL_168;
      case 0x14u:
        uint64_t v77 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v16, v17, v77);
        uint64_t v78 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)(v16 + v78[5]) = *(void *)(v17 + v78[5]);
        *(void *)(v16 + v78[6]) = *(void *)(v17 + v78[6]);
        *(void *)(v16 + v78[7]) = *(void *)(v17 + v78[7]);
        *(unsigned char *)(v16 + v78[8]) = *(unsigned char *)(v17 + v78[8]);
        *(unsigned char *)(v16 + v78[9]) = *(unsigned char *)(v17 + v78[9]);
        *(unsigned char *)(v16 + v78[10]) = *(unsigned char *)(v17 + v78[10]);
        uint64_t v79 = v78[11];
        uint64_t v80 = (void *)(v16 + v79);
        uint64_t v81 = (void *)(v17 + v79);
        *uint64_t v80 = *v81;
        v80[1] = v81[1];
        v80[2] = v81[2];
        v80[3] = v81[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x16u:
      case 0x24u:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x1Bu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x1Cu:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        *(void *)(v16 + 24) = *(void *)(v17 + 24);
        *(_DWORD *)(v16 + 32) = *(_DWORD *)(v17 + 32);
        *(void *)(v16 + 40) = *(void *)(v17 + 40);
        *(void *)(v16 + 48) = *(void *)(v17 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x1Eu:
        uint64_t v82 = sub_253B06720();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(v16, v17, v82);
        goto LABEL_168;
      case 0x1Fu:
        uint64_t v340 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v83 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v83 - 8) + 64));
        }
        else
        {
          __dst[2]((void *)v16, (const void *)v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        __dstc = (int *)type metadata accessor for StatementResult(0);
        uint64_t v169 = __dstc[5];
        uint64_t v170 = v16 + v169;
        uint64_t v171 = v17 + v169;
        uint64_t v172 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 16))(v170, v171, v172);
        uint64_t v173 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v174 = (void *)(v170 + v173);
        uint64_t v175 = (const void *)(v171 + v173);
        uint64_t v176 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v175, 1, v176))
        {
          uint64_t v177 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v174, v175, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v176 - 8) + 16))(v174, v175, v176);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v174, 0, 1, v176);
        }
        uint64_t v194 = __dstc;
        uint64_t v195 = __dstc[6];
        uint64_t v326 = v17 + v195;
        uint64_t v336 = v16 + v195;
        uint64_t v196 = sub_253B059D0();
        uint64_t v197 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v196 - 8) + 16);
        v197(v336, v326, v196);
        v197(v16 + v194[7], v17 + v194[7], v196);
        v197(v16 + v194[8], v17 + v194[8], v196);
        uint64_t v198 = __dstc[9];
        uint64_t v199 = (void *)(v16 + v198);
        uint64_t v200 = (void *)(v17 + v198);
        if (v200[1])
        {
          *uint64_t v199 = *v200;
          v199[1] = v200[1];
          v199[2] = v200[2];
          v199[3] = v200[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v202 = *((_OWORD *)v200 + 1);
          *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
          *((_OWORD *)v199 + 1) = v202;
        }
        uint64_t v8 = v340;
        goto LABEL_168;
      case 0x20u:
        uint64_t v341 = v8;
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        uint64_t v84 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v85 = *(int *)(v84 + 20);
        uint64_t v86 = (void *)(v16 + v85);
        unint64_t v87 = (const void *)(v17 + v85);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v87, 1, v6))
        {
          uint64_t v88 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          __dst[2](v86, v87, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v86, 0, 1, v6);
        }
        uint64_t v178 = *(int *)(v84 + 24);
        uint64_t v179 = v16 + v178;
        uint64_t v180 = (long long *)(v17 + v178);
        uint64_t v8 = v341;
        if (*((void *)v180 + 1)) {
          goto LABEL_166;
        }
        long long v201 = *v180;
        *(void *)(v179 + 16) = *((void *)v180 + 2);
        *(_OWORD *)uint64_t v179 = v201;
        goto LABEL_168;
      case 0x21u:
        uint64_t v342 = v8;
        *(void *)uint64_t v16 = *(void *)v17;
        uint64_t v89 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v90 = *(int *)(v89 + 20);
        uint64_t v91 = (void *)(v16 + v90);
        uint64_t v92 = (const void *)(v17 + v90);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v92, 1, v6))
        {
          uint64_t v93 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          __dst[2](v91, v92, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v91, 0, 1, v6);
        }
        uint64_t v8 = v342;
        uint64_t v220 = *(int *)(v89 + 24);
        uint64_t v179 = v16 + v220;
        uint64_t v180 = (long long *)(v17 + v220);
        if (*((void *)v180 + 1)) {
          goto LABEL_166;
        }
        long long v221 = *v180;
        *(void *)(v179 + 16) = *((void *)v180 + 2);
        *(_OWORD *)uint64_t v179 = v221;
        goto LABEL_168;
      case 0x22u:
        uint64_t v94 = type metadata accessor for RequestContent(0);
        int v95 = swift_getEnumCaseMultiPayload();
        v343 = v8;
        if (v95 != 3)
        {
          if (v95 == 2)
          {
            *(void *)uint64_t v16 = *(void *)v17;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v95 != 1)
            {
              memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v94 - 8) + 64));
              goto LABEL_151;
            }
            *(void *)uint64_t v16 = *(void *)v17;
            *(void *)(v16 + 8) = *(void *)(v17 + 8);
            uint64_t v96 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v317 = v17 + v96;
            uint64_t v323 = v16 + v96;
            uint64_t v97 = sub_253B059D0();
            uint64_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16);
            swift_bridgeObjectRetain();
            v98(v323, v317, v97);
          }
LABEL_150:
          swift_storeEnumTagMultiPayload();
LABEL_151:
          uint64_t v270 = type metadata accessor for ExternalAgentRequest(0);
          uint64_t v271 = *(int *)(v270 + 20);
          uint64_t v272 = (void *)(v16 + v271);
          uint64_t v273 = (const void *)(v17 + v271);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17 + v271, 1, v6))
          {
            uint64_t v274 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v272, v273, *(void *)(*(void *)(v274 - 8) + 64));
          }
          else
          {
            __dst[2](v272, v273, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v272, 0, 1, v6);
          }
          uint64_t v275 = *(int *)(v270 + 24);
          uint64_t v179 = v16 + v275;
          uint64_t v180 = (long long *)(v17 + v275);
          uint64_t v8 = v343;
          if (!*((void *)v180 + 1))
          {
            long long v276 = *v180;
            *(void *)(v179 + 16) = *((void *)v180 + 2);
            *(_OWORD *)uint64_t v179 = v276;
LABEL_168:
            swift_storeEnumTagMultiPayload();
            break;
          }
LABEL_166:
          *(void *)uint64_t v179 = *(void *)v180;
          *(void *)(v179 + 8) = *((void *)v180 + 1);
          *(void *)(v179 + 16) = *((void *)v180 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_168;
        }
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v6))
        {
          uint64_t v228 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v228 - 8) + 64));
          unint64_t v229 = __dst;
        }
        else
        {
          unint64_t v229 = __dst;
          __dst[2]((void *)v16, (const void *)v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v16, 0, 1, v6);
        }
        uint64_t v247 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v229[2]((void *)(v16 + v247[5]), (const void *)(v17 + v247[5]), v6);
        uint64_t v248 = v247[6];
        uint64_t v249 = (void *)(v16 + v248);
        uint64_t v250 = (const void *)(v17 + v248);
        uint64_t v251 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v252 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v252 - 8) + 16))(v249, v250, v252);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v249, v250, *(void *)(*(void *)(v251 - 8) + 64));
        }
        uint64_t v253 = v247[7];
        uint64_t v254 = v16 + v253;
        uint64_t v255 = v17 + v253;
        uint64_t v256 = sub_253B059D0();
        uint64_t v319 = *(void (**)(uint64_t, uint64_t))(*(void *)(v256 - 8) + 16);
        uint64_t v329 = v256;
        v319(v254, v255);
        uint64_t v257 = v247[8];
        uint64_t v258 = (void *)(v16 + v257);
        uint64_t v259 = (void *)(v17 + v257);
        uint64_t v260 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v261 = swift_getEnumCaseMultiPayload();
        if (v261 == 1)
        {
          *uint64_t v258 = *v259;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v261)
          {
            memcpy(v258, v259, *(void *)(*(void *)(v260 - 8) + 64));
            goto LABEL_150;
          }
          *uint64_t v258 = *v259;
          v258[1] = v259[1];
          uint64_t v262 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v314 = (char *)v258 + v262;
          uint64_t v263 = (char *)v259 + v262;
          swift_bridgeObjectRetain();
          ((void (*)(char *, char *, uint64_t))v319)(v314, v263, v329);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_150;
      case 0x23u:
        uint64_t v99 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v16, v17, v99);
        uint64_t v100 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v101 = *(int *)(v100 + 20);
        uint64_t v102 = v16 + v101;
        uint64_t v103 = v17 + v101;
        uint64_t v104 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
        *(void *)(v16 + *(int *)(v100 + 24)) = *(void *)(v17 + *(int *)(v100 + 24));
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x25u:
        uint64_t v105 = sub_253B08B30();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v16, v17, v105);
        uint64_t v106 = type metadata accessor for ToolResolution(0);
        uint64_t v107 = *(int *)(v106 + 20);
        __dstf = (void *)(v16 + v107);
        uint64_t v332 = v17 + v107;
        uint64_t v344 = v8;
        uint64_t v108 = sub_253B059D0();
        uint64_t v109 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16);
        v109(__dstf, v332, v108);
        uint64_t v110 = v108;
        uint64_t v8 = v344;
        v109((void *)(v16 + *(int *)(v106 + 24)), v17 + *(int *)(v106 + 24), v110);
        goto LABEL_168;
      case 0x26u:
        uint64_t v345 = v8;
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        uint64_t v111 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v112 = v111[5];
        uint64_t v113 = (void *)(v16 + v112);
        uint64_t v114 = (const void *)(v17 + v112);
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v114, 1, v6))
        {
          uint64_t v115 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64));
        }
        else
        {
          __dst[2](v113, v114, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v113, 0, 1, v6);
        }
        *(unsigned char *)(v16 + v111[6]) = *(unsigned char *)(v17 + v111[6]);
        uint64_t v181 = v111[7];
        uint64_t v182 = v16 + v181;
        uint64_t v183 = v17 + v181;
        uint64_t v184 = sub_253B059D0();
        uint64_t v185 = v182;
        uint64_t v186 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v184 - 8) + 16);
        v186(v185, v183, v184);
        uint64_t v187 = v111[8];
        uint64_t v188 = (void *)(v16 + v187);
        uint64_t v189 = (const void *)(v17 + v187);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v189, 1, v184))
        {
          uint64_t v190 = sub_253462A5C(&qword_269CDB460);
          memcpy(v188, v189, *(void *)(*(void *)(v190 - 8) + 64));
        }
        else
        {
          v186((uint64_t)v188, (uint64_t)v189, v184);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v188, 0, 1, v184);
        }
        uint64_t v8 = v345;
        goto LABEL_168;
      case 0x27u:
        uint64_t v346 = v8;
        __dst[2]((void *)v16, (const void *)v17, v6);
        uint64_t v116 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *(unsigned char *)(v16 + v116[5]) = *(unsigned char *)(v17 + v116[5]);
        uint64_t v117 = v116[6];
        uint64_t v118 = v16 + v117;
        uint64_t v119 = v17 + v117;
        uint64_t v120 = sub_253B059D0();
        uint64_t v121 = v119;
        uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 16);
        v122(v118, v121, v120);
        uint64_t v123 = v116[7];
        uint64_t v124 = (void *)(v16 + v123);
        int v125 = (const void *)(v17 + v123);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v125, 1, v120))
        {
          uint64_t v126 = sub_253462A5C(&qword_269CDB460);
          memcpy(v124, v125, *(void *)(*(void *)(v126 - 8) + 64));
        }
        else
        {
          v122((uint64_t)v124, (uint64_t)v125, v120);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v124, 0, 1, v120);
        }
        uint64_t v8 = v346;
        goto LABEL_168;
      case 0x28u:
        uint64_t v127 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v127 - 8) + 16))(v16, v17, v127);
        uint64_t v128 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v129 = *(int *)(v128 + 20);
        uint64_t v130 = v16 + v129;
        uint64_t v131 = v17 + v129;
        uint64_t v132 = sub_253B09150();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 16))(v130, v131, v132);
        uint64_t v133 = *(int *)(v128 + 24);
        uint64_t v134 = v16 + v133;
        uint64_t v135 = v17 + v133;
        uint64_t v136 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16))(v134, v135, v136);
        goto LABEL_168;
      case 0x29u:
        uint64_t v137 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16))(v16, v17, v137);
        uint64_t v138 = type metadata accessor for TypeConversionResult(0);
        uint64_t v139 = *(int *)(v138 + 20);
        __dstg = (void *)(v16 + v139);
        uint64_t v333 = v17 + v139;
        uint64_t v347 = v8;
        uint64_t v140 = sub_253B059D0();
        uint64_t v141 = *(void (**)(void *, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16);
        v141(__dstg, v333, v140);
        uint64_t v142 = v140;
        uint64_t v8 = v347;
        v141((void *)(v16 + *(int *)(v138 + 24)), v17 + *(int *)(v138 + 24), v142);
        goto LABEL_168;
      case 0x2Au:
        *(void *)uint64_t v16 = *(void *)v17;
        *(void *)(v16 + 8) = *(void *)(v17 + 8);
        *(void *)(v16 + 16) = *(void *)(v17 + 16);
        uint64_t DecorationResult = type metadata accessor for QueryDecorationResult(0);
        uint64_t v144 = *(int *)(DecorationResult + 28);
        __dsta = (void *)(v16 + v144);
        uint64_t v324 = (const void *)(v17 + v144);
        uint64_t v334 = DecorationResult;
        uint64_t v145 = sub_253B08270();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v324, 1, v145))
        {
          uint64_t v146 = sub_253462A5C(&qword_269CDBB30);
          memcpy(__dsta, v324, *(void *)(*(void *)(v146 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v145 - 8) + 16))(__dsta, v324, v145);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)__dsta, 0, 1, v145);
        }
        *(void *)(v16 + *(int *)(v334 + 32)) = *(void *)(v17 + *(int *)(v334 + 32));
        *(void *)(v16 + *(int *)(v334 + 36)) = *(void *)(v17 + *(int *)(v334 + 36));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      case 0x2Cu:
        uint64_t v147 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 16))(v16, v17, v147);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        uint64_t v149 = *(int *)(DecorationPrePlannerResult + 20);
        uint64_t v150 = (void *)(v16 + v149);
        uint64_t v151 = (void *)(v17 + v149);
        *uint64_t v150 = *v151;
        v150[1] = v151[1];
        uint64_t v152 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v153 = v16 + v152;
        uint64_t v154 = (uint64_t *)(v17 + v152);
        uint64_t v155 = *v154;
        LOBYTE(v154) = *((unsigned char *)v154 + 8);
        *(void *)uint64_t v153 = v155;
        *(unsigned char *)(v153 + 8) = (_BYTE)v154;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_168;
      default:
        memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v288 = a3[8];
  uint64_t v289 = (void *)(a1 + v288);
  int v290 = (void *)(a2 + v288);
  void *v289 = *v290;
  v289[1] = v290[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v291 = a3[9];
  uint64_t v292 = (void *)(a1 + v291);
  uint64_t v293 = (void *)(a2 + v291);
  *uint64_t v292 = *v293;
  v292[1] = v293[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v294 = a3[10];
  v295 = (void *)(a1 + v294);
  uint64_t v296 = (void *)(a2 + v294);
  void *v295 = *v296;
  v295[1] = v296[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v297 = a3[11];
  uint64_t v298 = (void *)(a1 + v297);
  uint64_t v299 = (void *)(a2 + v297);
  *uint64_t v298 = *v299;
  v298[1] = v299[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v300 = a3[12];
  uint64_t v301 = a1 + v300;
  uint64_t v302 = a2 + v300;
  uint64_t v303 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v303 - 8) + 24))(v301, v302, v303);
  uint64_t v304 = (int *)type metadata accessor for Timepoint();
  *(void *)(v301 + v304[5]) = *(void *)(v302 + v304[5]);
  *(void *)(v301 + v304[6]) = *(void *)(v302 + v304[6]);
  v8(v301 + v304[7], v302 + v304[7], v6);
  uint64_t v305 = a3[13];
  uint64_t v306 = (void *)(a1 + v305);
  v307 = (void *)(a2 + v305);
  *uint64_t v306 = *v307;
  v306[1] = v307[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v308 = a3[14];
  uint64_t v309 = a1 + v308;
  int v310 = (uint64_t *)(a2 + v308);
  uint64_t v311 = *v310;
  *(unsigned char *)(v309 + 8) = *((unsigned char *)v310 + 8);
  *(void *)uint64_t v309 = v311;
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Session.Event(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2 + v8, 1, v6))
  {
    uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[7];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Session.Event.Payload(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v16 = sub_253B05D70();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      uint64_t v17 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v18 = (char *)v13 + v17;
      uint64_t v19 = (char *)v14 + v17;
      uint64_t v20 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v19, 1, v20))
      {
        uint64_t v21 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 0, 1, v20);
      }
      goto LABEL_126;
    case 1u:
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      *((unsigned char *)v13 + 16) = *((unsigned char *)v14 + 16);
      uint64_t v22 = type metadata accessor for TextQuery(0);
      uint64_t v23 = *(int *)(v22 + 24);
      uint64_t v24 = (char *)v13 + v23;
      uint64_t v25 = (char *)v14 + v23;
      uint64_t v26 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      *(_OWORD *)((char *)v13 + *(int *)(v22 + 28)) = *(_OWORD *)((char *)v14 + *(int *)(v22 + 28));
      goto LABEL_126;
    case 3u:
      uint64_t v93 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v273 = v7;
      if (EnumCaseMultiPayload == 3)
      {
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v6))
        {
          uint64_t v195 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v13, v14, *(void *)(*(void *)(v195 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v13, (uint64_t)v14, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v6);
        }
        uint64_t v213 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        v7((uint64_t)v13 + v213[5], (uint64_t)v14 + v213[5], v6);
        uint64_t v214 = v213[6];
        __dst = (char *)v13 + v214;
        uint64_t v215 = (char *)v14 + v214;
        uint64_t v216 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v217 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v217 - 8) + 32))(__dst, v215, v217);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v215, *(void *)(*(void *)(v216 - 8) + 64));
        }
        uint64_t v218 = v213[7];
        uint64_t v219 = (char *)v13 + v218;
        uint64_t v220 = (char *)v14 + v218;
        uint64_t v221 = sub_253B059D0();
        __dsta = *(void (**)(char *, char *, uint64_t))(*(void *)(v221 - 8) + 32);
        __dsta(v219, v220, v221);
        uint64_t v222 = v213[8];
        uint64_t v223 = (_OWORD *)((char *)v13 + v222);
        uint64_t v224 = (_OWORD *)((char *)v14 + v222);
        uint64_t v225 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v223, v224, *(void *)(*(void *)(v225 - 8) + 64));
        }
        else
        {
          *uint64_t v223 = *v224;
          uint64_t v232 = type metadata accessor for RequestContent.TextContent(0);
          __dsta((char *)v223 + *(int *)(v232 + 20), (char *)v224 + *(int *)(v232 + 20), v221);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v13, v14, *(void *)(*(void *)(v93 - 8) + 64));
          goto LABEL_116;
        }
        *(_OWORD *)int v13 = *(_OWORD *)v14;
        uint64_t v95 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v96 = (char *)v13 + v95;
        uint64_t v97 = (char *)v14 + v95;
        uint64_t v98 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v96, v97, v98);
      }
      swift_storeEnumTagMultiPayload();
LABEL_116:
      uint64_t v233 = (int *)type metadata accessor for Request(0);
      *((unsigned char *)v13 + v233[5]) = *((unsigned char *)v14 + v233[5]);
      uint64_t v234 = v233[6];
      uint64_t v235 = (char *)v13 + v234;
      uint64_t v236 = (char *)v14 + v234;
      uint64_t v237 = type metadata accessor for RequestPrescribedPlan(0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v236, 1, v237))
      {
        uint64_t v238 = sub_253462A5C(&qword_269CDBB20);
        memcpy(v235, v236, *(void *)(*(void *)(v238 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 6)
        {
          uint64_t v239 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v239 - 8) + 32))(v235, v236, v239);
          uint64_t v240 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
          uint64_t v241 = &v235[v240];
          uint64_t v242 = &v236[v240];
          *(void *)uint64_t v241 = *(void *)v242;
          v241[8] = v242[8];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v235, v236, *(void *)(*(void *)(v237 - 8) + 64));
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v235, 0, 1, v237);
      }
      uint64_t v7 = v273;
      uint64_t v243 = v233[7];
      int v244 = (char *)v13 + v243;
      uint64_t v245 = (char *)v14 + v243;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v243, 1, v6))
      {
        uint64_t v246 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v244, v245, *(void *)(*(void *)(v246 - 8) + 64));
      }
      else
      {
        v273((uint64_t)v244, (uint64_t)v245, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v244, 0, 1, v6);
      }
      uint64_t v247 = v233[8];
      uint64_t v248 = (char *)v13 + v247;
      uint64_t v249 = (char *)v14 + v247;
      *(_OWORD *)uint64_t v248 = *(_OWORD *)v249;
      *((void *)v248 + 2) = *((void *)v249 + 2);
      goto LABEL_126;
    case 5u:
      uint64_t v27 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 32))(v13, v14, v27);
      uint64_t v28 = (int *)type metadata accessor for Action(0);
      *(_OWORD *)((char *)v13 + v28[5]) = *(_OWORD *)((char *)v14 + v28[5]);
      *((unsigned char *)v13 + v28[6]) = *((unsigned char *)v14 + v28[6]);
      *(void *)((char *)v13 + v28[7]) = *(void *)((char *)v14 + v28[7]);
      *(_OWORD *)((char *)v13 + v28[8]) = *(_OWORD *)((char *)v14 + v28[8]);
      uint64_t v29 = v28[9];
      uint64_t v30 = (_OWORD *)((char *)v13 + v29);
      uint64_t v31 = (_OWORD *)((char *)v14 + v29);
      long long v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      goto LABEL_126;
    case 6u:
      uint64_t v33 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v33))
      {
        uint64_t v34 = sub_253462A5C(&qword_269CDB460);
        memcpy(v13, v14, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v33 - 8) + 32))(v13, v14, v33);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v33);
      }
      uint64_t v135 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))((char *)v13 + *(int *)(v135 + 20), (char *)v14 + *(int *)(v135 + 20), v33);
      goto LABEL_126;
    case 7u:
      uint64_t v99 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v99 - 8) + 32))(v13, v14, v99);
      uint64_t v100 = (int *)type metadata accessor for ClientAction(0);
      *(_OWORD *)((char *)v13 + v100[5]) = *(_OWORD *)((char *)v14 + v100[5]);
      *(void *)((char *)v13 + v100[6]) = *(void *)((char *)v14 + v100[6]);
      *(_OWORD *)((char *)v13 + v100[7]) = *(_OWORD *)((char *)v14 + v100[7]);
      *(_OWORD *)((char *)v13 + v100[8]) = *(_OWORD *)((char *)v14 + v100[8]);
      *(void *)((char *)v13 + v100[9]) = *(void *)((char *)v14 + v100[9]);
      *(void *)((char *)v13 + v100[10]) = *(void *)((char *)v14 + v100[10]);
      goto LABEL_126;
    case 8u:
      uint64_t v35 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 32))(v13, v14, v35);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)((char *)v13 + *(int *)(Step + 20)) = *(void *)((char *)v14 + *(int *)(Step + 20));
      goto LABEL_126;
    case 9u:
      uint64_t v37 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 32))(v13, v14, v37);
      uint64_t v38 = type metadata accessor for VariableStep(0);
      *(void *)((char *)v13 + *(int *)(v38 + 20)) = *(void *)((char *)v14 + *(int *)(v38 + 20));
      goto LABEL_126;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v198 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v198 - 8) + 32))(v13, v14, v198);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v196 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v196)) {
            goto LABEL_93;
          }
          uint64_t v197 = type metadata accessor for PlannerError();
          goto LABEL_92;
        case 3u:
          uint64_t v196 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v196))
          {
            uint64_t v197 = type metadata accessor for ExecutorError();
LABEL_92:
            memcpy(v13, v14, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
LABEL_93:
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v196 - 8) + 32))(v13, v14, v196);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v196);
          }
          break;
        default:
          uint64_t v101 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v101 - 8) + 32))(v13, v14, v101);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_126;
    case 0xFu:
      uint64_t v102 = sub_253B059F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v102 - 8) + 32))(v13, v14, v102);
      goto LABEL_126;
    case 0x10u:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v6))
      {
        uint64_t v103 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v13, v14, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v13, (uint64_t)v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v6);
      }
      uint64_t v156 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      uint64_t v275 = v7;
      v7((uint64_t)v13 + v156[5], (uint64_t)v14 + v156[5], v6);
      uint64_t v157 = v156[6];
      uint64_t v158 = (char *)v13 + v157;
      uint64_t v159 = (char *)v14 + v157;
      uint64_t v160 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v161 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v161 - 8) + 32))(v158, v159, v161);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v158, v159, *(void *)(*(void *)(v160 - 8) + 64));
      }
      uint64_t v162 = v156[7];
      uint64_t v163 = (char *)v13 + v162;
      uint64_t v164 = (char *)v14 + v162;
      uint64_t v165 = sub_253B059D0();
      uint64_t v166 = v163;
      uint64_t v167 = *(void (**)(char *, char *, uint64_t))(*(void *)(v165 - 8) + 32);
      v167(v166, v164, v165);
      uint64_t v168 = v156[8];
      uint64_t v169 = (_OWORD *)((char *)v13 + v168);
      uint64_t v170 = (_OWORD *)((char *)v14 + v168);
      uint64_t v171 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v169, v170, *(void *)(*(void *)(v171 - 8) + 64));
      }
      else
      {
        *uint64_t v169 = *v170;
        uint64_t v185 = type metadata accessor for RequestContent.TextContent(0);
        v167((char *)v169 + *(int *)(v185 + 20), (char *)v170 + *(int *)(v185 + 20), v165);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v7 = v275;
      goto LABEL_126;
    case 0x11u:
      uint64_t v270 = v7;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v6))
      {
        uint64_t v39 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v13, v14, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v13, (uint64_t)v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v6);
      }
      uint64_t v136 = (int *)type metadata accessor for ActionStepResult(0);
      *(_OWORD *)((char *)v13 + v136[5]) = *(_OWORD *)((char *)v14 + v136[5]);
      uint64_t v137 = v136[6];
      uint64_t v138 = (char *)v13 + v137;
      uint64_t v139 = (char *)v14 + v137;
      uint64_t v140 = sub_253B05AB0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v140 - 8) + 32))(v138, v139, v140);
      uint64_t v141 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v142 = &v138[v141];
      uint64_t v143 = &v139[v141];
      uint64_t v144 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v143, 1, v144))
      {
        uint64_t v145 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v142, v143, *(void *)(*(void *)(v145 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v144 - 8) + 32))(v142, v143, v144);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v142, 0, 1, v144);
      }
      *(_OWORD *)((char *)v13 + v136[7]) = *(_OWORD *)((char *)v14 + v136[7]);
      goto LABEL_63;
    case 0x12u:
      *int v13 = *v14;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v41 = *(int *)(StepResults + 20);
      uint64_t v42 = (char *)v13 + v41;
      uint64_t v43 = (char *)v14 + v41;
      uint64_t v44 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
      v7((uint64_t)v13 + *(int *)(StepResults + 24), (uint64_t)v14 + *(int *)(StepResults + 24), v6);
      goto LABEL_126;
    case 0x13u:
      uint64_t v104 = sub_253B05CF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v104 - 8) + 32))(v13, v14, v104);
      goto LABEL_126;
    case 0x14u:
      uint64_t v105 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v105 - 8) + 32))(v13, v14, v105);
      uint64_t v106 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)((char *)v13 + v106[5]) = *(void *)((char *)v14 + v106[5]);
      *(void *)((char *)v13 + v106[6]) = *(void *)((char *)v14 + v106[6]);
      *(void *)((char *)v13 + v106[7]) = *(void *)((char *)v14 + v106[7]);
      *((unsigned char *)v13 + v106[8]) = *((unsigned char *)v14 + v106[8]);
      *((unsigned char *)v13 + v106[9]) = *((unsigned char *)v14 + v106[9]);
      *((unsigned char *)v13 + v106[10]) = *((unsigned char *)v14 + v106[10]);
      uint64_t v107 = v106[11];
      uint64_t v108 = (_OWORD *)((char *)v13 + v107);
      uint64_t v109 = (_OWORD *)((char *)v14 + v107);
      long long v110 = v109[1];
      *uint64_t v108 = *v109;
      v108[1] = v110;
      goto LABEL_126;
    case 0x1Eu:
      uint64_t v111 = sub_253B06720();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v111 - 8) + 32))(v13, v14, v111);
      goto LABEL_126;
    case 0x1Fu:
      uint64_t v270 = v7;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v6))
      {
        uint64_t v112 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v13, v14, *(void *)(*(void *)(v112 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v13, (uint64_t)v14, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v6);
      }
      uint64_t v172 = type metadata accessor for StatementResult(0);
      uint64_t v173 = *(int *)(v172 + 20);
      uint64_t v174 = (char *)v13 + v173;
      uint64_t v175 = (char *)v14 + v173;
      uint64_t v176 = sub_253B06850();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v176 - 8) + 32))(v174, v175, v176);
      uint64_t v177 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v178 = &v174[v177];
      uint64_t v179 = &v175[v177];
      uint64_t v180 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v179, 1, v180))
      {
        uint64_t v181 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v178, v179, *(void *)(*(void *)(v181 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v178, 0, 1, v180);
      }
      uint64_t v186 = *(int *)(v172 + 24);
      uint64_t v263 = (char *)v14 + v186;
      __dstd = (char *)v13 + v186;
      uint64_t v187 = sub_253B059D0();
      uint64_t v188 = (int *)v172;
      uint64_t v189 = *(void (**)(char *, char *, uint64_t))(*(void *)(v187 - 8) + 32);
      v189(__dstd, v263, v187);
      v189((char *)v13 + v188[7], (char *)v14 + v188[7], v187);
      v189((char *)v13 + v188[8], (char *)v14 + v188[8], v187);
      uint64_t v190 = v188[9];
      uint64_t v191 = (_OWORD *)((char *)v13 + v190);
      uint64_t v192 = (_OWORD *)((char *)v14 + v190);
      long long v193 = v192[1];
      *uint64_t v191 = *v192;
      v191[1] = v193;
      goto LABEL_63;
    case 0x20u:
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      uint64_t v113 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v114 = *(int *)(v113 + 20);
      uint64_t v115 = (char *)v13 + v114;
      uint64_t v116 = (char *)v14 + v114;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v114, 1, v6))
      {
        uint64_t v117 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v115, v116, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v115, (uint64_t)v116, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v115, 0, 1, v6);
      }
      uint64_t v182 = *(int *)(v113 + 24);
      uint64_t v183 = (char *)v13 + v182;
      uint64_t v184 = (char *)v14 + v182;
      *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
      *((void *)v183 + 2) = *((void *)v184 + 2);
      goto LABEL_126;
    case 0x21u:
      *int v13 = *v14;
      uint64_t v45 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v46 = *(int *)(v45 + 20);
      uint64_t v47 = (char *)v13 + v46;
      uint64_t v48 = (char *)v14 + v46;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v46, 1, v6)) {
        goto LABEL_111;
      }
      goto LABEL_112;
    case 0x22u:
      uint64_t v49 = type metadata accessor for RequestContent(0);
      int v50 = swift_getEnumCaseMultiPayload();
      if (v50 == 3)
      {
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v6))
        {
          uint64_t v194 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v13, v14, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          v7((uint64_t)v13, (uint64_t)v14, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v6);
        }
        uint64_t v199 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        long long v276 = v7;
        v7((uint64_t)v13 + v199[5], (uint64_t)v14 + v199[5], v6);
        uint64_t v200 = v199[6];
        long long v201 = (char *)v13 + v200;
        long long v202 = (char *)v14 + v200;
        uint64_t v203 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v204 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v204 - 8) + 32))(v201, v202, v204);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v201, v202, *(void *)(*(void *)(v203 - 8) + 64));
        }
        uint64_t v205 = v199[7];
        uint64_t v206 = (char *)v13 + v205;
        uint64_t v207 = (char *)v14 + v205;
        uint64_t v208 = sub_253B059D0();
        int v264 = *(void (**)(char *, char *, uint64_t))(*(void *)(v208 - 8) + 32);
        v264(v206, v207, v208);
        uint64_t v209 = v199[8];
        uint64_t v210 = (_OWORD *)((char *)v13 + v209);
        uint64_t v211 = (_OWORD *)((char *)v14 + v209);
        uint64_t v212 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v210, v211, *(void *)(*(void *)(v212 - 8) + 64));
        }
        else
        {
          *uint64_t v210 = *v211;
          uint64_t v226 = type metadata accessor for RequestContent.TextContent(0);
          v264((char *)v210 + *(int *)(v226 + 20), (char *)v211 + *(int *)(v226 + 20), v208);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v7 = v276;
      }
      else
      {
        if (v50 != 1)
        {
          memcpy(v13, v14, *(void *)(*(void *)(v49 - 8) + 64));
          goto LABEL_110;
        }
        *(_OWORD *)int v13 = *(_OWORD *)v14;
        uint64_t v51 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v52 = (char *)v13 + v51;
        uint64_t v53 = (char *)v14 + v51;
        uint64_t v54 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 32))(v52, v53, v54);
      }
      swift_storeEnumTagMultiPayload();
LABEL_110:
      uint64_t v45 = type metadata accessor for ExternalAgentRequest(0);
      uint64_t v227 = *(int *)(v45 + 20);
      uint64_t v47 = (char *)v13 + v227;
      uint64_t v48 = (char *)v14 + v227;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v227, 1, v6))
      {
LABEL_111:
        uint64_t v228 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v47, v48, *(void *)(*(void *)(v228 - 8) + 64));
      }
      else
      {
LABEL_112:
        v7((uint64_t)v47, (uint64_t)v48, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v47, 0, 1, v6);
      }
      uint64_t v229 = *(int *)(v45 + 24);
      uint64_t v230 = (char *)v13 + v229;
      uint64_t v231 = (char *)v14 + v229;
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
      *((void *)v230 + 2) = *((void *)v231 + 2);
LABEL_126:
      swift_storeEnumTagMultiPayload();
LABEL_127:
      uint64_t v250 = a3[9];
      *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
      *(_OWORD *)(a1 + v250) = *(_OWORD *)(a2 + v250);
      uint64_t v251 = a3[11];
      *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
      *(_OWORD *)(a1 + v251) = *(_OWORD *)(a2 + v251);
      uint64_t v252 = a3[12];
      uint64_t v253 = a1 + v252;
      uint64_t v254 = a2 + v252;
      uint64_t v255 = sub_253B05550();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v255 - 8) + 32))(v253, v254, v255);
      uint64_t v256 = (int *)type metadata accessor for Timepoint();
      *(void *)(v253 + v256[5]) = *(void *)(v254 + v256[5]);
      *(void *)(v253 + v256[6]) = *(void *)(v254 + v256[6]);
      v7(v253 + v256[7], v254 + v256[7], v6);
      uint64_t v257 = a3[14];
      *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
      uint64_t v258 = a1 + v257;
      uint64_t v259 = a2 + v257;
      *(unsigned char *)(v258 + 8) = *(unsigned char *)(v259 + 8);
      *(void *)uint64_t v258 = *(void *)v259;
      *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
      return a1;
    case 0x23u:
      uint64_t v118 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v118 - 8) + 32))(v13, v14, v118);
      uint64_t v119 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v120 = *(int *)(v119 + 20);
      uint64_t v121 = (char *)v13 + v120;
      uint64_t v122 = (char *)v14 + v120;
      uint64_t v123 = sub_253B06850();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 32))(v121, v122, v123);
      *(void *)((char *)v13 + *(int *)(v119 + 24)) = *(void *)((char *)v14 + *(int *)(v119 + 24));
      goto LABEL_126;
    case 0x25u:
      uint64_t v55 = sub_253B08B30();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v55 - 8) + 32))(v13, v14, v55);
      uint64_t v56 = type metadata accessor for ToolResolution(0);
      uint64_t v57 = *(int *)(v56 + 20);
      int v261 = (char *)v14 + v57;
      __dstb = (char *)v13 + v57;
      uint64_t v271 = v7;
      uint64_t v58 = sub_253B059D0();
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32);
      v59(__dstb, v261, v58);
      uint64_t v60 = v58;
      uint64_t v7 = v271;
      v59((char *)v13 + *(int *)(v56 + 24), (char *)v14 + *(int *)(v56 + 24), v60);
      goto LABEL_126;
    case 0x26u:
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      uint64_t v61 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v62 = v61[5];
      uint64_t v63 = (char *)v13 + v62;
      uint64_t v64 = (char *)v14 + v62;
      uint64_t v270 = v7;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v62, 1, v6))
      {
        uint64_t v65 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v63, (uint64_t)v64, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v63, 0, 1, v6);
      }
      *((unsigned char *)v13 + v61[6]) = *((unsigned char *)v14 + v61[6]);
      uint64_t v146 = v61[7];
      uint64_t v147 = (char *)v13 + v146;
      uint64_t v148 = (char *)v14 + v146;
      uint64_t v149 = sub_253B059D0();
      uint64_t v150 = v148;
      uint64_t v151 = *(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 32);
      v151(v147, v150, v149);
      uint64_t v152 = v61[8];
      uint64_t v153 = (char *)v13 + v152;
      uint64_t v154 = (char *)v14 + v152;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v152, 1, v149))
      {
        uint64_t v155 = sub_253462A5C(&qword_269CDB460);
        memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64));
      }
      else
      {
        v151(v153, v154, v149);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v153, 0, 1, v149);
      }
      goto LABEL_63;
    case 0x27u:
      uint64_t v270 = v7;
      v7((uint64_t)v13, (uint64_t)v14, v6);
      unint64_t v66 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *((unsigned char *)v13 + v66[5]) = *((unsigned char *)v14 + v66[5]);
      uint64_t v67 = v66[6];
      unint64_t v68 = (char *)v13 + v67;
      uint64_t v69 = (char *)v14 + v67;
      uint64_t v70 = sub_253B059D0();
      uint64_t v71 = v69;
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32);
      v72(v68, v71, v70);
      uint64_t v73 = v66[7];
      uint64_t v74 = (char *)v13 + v73;
      uint64_t v75 = (char *)v14 + v73;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14 + v73, 1, v70))
      {
        uint64_t v76 = sub_253462A5C(&qword_269CDB460);
        memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
      }
      else
      {
        v72(v74, v75, v70);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v74, 0, 1, v70);
      }
LABEL_63:
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v270;
      goto LABEL_127;
    case 0x28u:
      uint64_t v77 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v77 - 8) + 32))(v13, v14, v77);
      uint64_t v78 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v79 = *(int *)(v78 + 20);
      uint64_t v80 = (char *)v13 + v79;
      uint64_t v81 = (char *)v14 + v79;
      uint64_t v82 = sub_253B09150();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v80, v81, v82);
      uint64_t v83 = *(int *)(v78 + 24);
      uint64_t v84 = (char *)v13 + v83;
      uint64_t v85 = (char *)v14 + v83;
      uint64_t v86 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v84, v85, v86);
      goto LABEL_126;
    case 0x29u:
      uint64_t v87 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v87 - 8) + 32))(v13, v14, v87);
      uint64_t v88 = type metadata accessor for TypeConversionResult(0);
      uint64_t v89 = *(int *)(v88 + 20);
      uint64_t v262 = (char *)v14 + v89;
      __dstc = (char *)v13 + v89;
      uint64_t v272 = v7;
      uint64_t v90 = sub_253B059D0();
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 32);
      v91(__dstc, v262, v90);
      uint64_t v92 = v90;
      uint64_t v7 = v272;
      v91((char *)v13 + *(int *)(v88 + 24), (char *)v14 + *(int *)(v88 + 24), v92);
      goto LABEL_126;
    case 0x2Au:
      uint64_t v274 = v7;
      *(_OWORD *)int v13 = *(_OWORD *)v14;
      v13[2] = v14[2];
      uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v125 = DecorationResult[7];
      uint64_t v126 = (char *)v13 + v125;
      uint64_t v127 = (char *)v14 + v125;
      uint64_t v128 = sub_253B08270();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v127, 1, v128))
      {
        uint64_t v129 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 32))(v126, v127, v128);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v126, 0, 1, v128);
      }
      uint64_t v7 = v274;
      *(void *)((char *)v13 + DecorationResult[8]) = *(void *)((char *)v14 + DecorationResult[8]);
      *(void *)((char *)v13 + DecorationResult[9]) = *(void *)((char *)v14 + DecorationResult[9]);
      goto LABEL_126;
    case 0x2Cu:
      uint64_t v130 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v130 - 8) + 32))(v13, v14, v130);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      *(_OWORD *)((char *)v13 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v14
                                                                                       + *(int *)(DecorationPrePlannerResult
                                                                                                + 20));
      uint64_t v132 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v133 = (char *)v13 + v132;
      uint64_t v134 = (char *)v14 + v132;
      v133[8] = v134[8];
      *(void *)uint64_t v133 = *(void *)v134;
      goto LABEL_126;
    default:
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_127;
  }
}

uint64_t assignWithTake for Session.Event(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v9, 1, v6);
  int v13 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v11, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  if (a1 != a2)
  {
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    sub_2539DF610();
    uint64_t v18 = type metadata accessor for Session.Event.Payload(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v19 = sub_253B05D70();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
        uint64_t v20 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v21 = (char *)v16 + v20;
        uint64_t v22 = (char *)v17 + v20;
        uint64_t v23 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23))
        {
          uint64_t v24 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
        }
        goto LABEL_132;
      case 1u:
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        *((unsigned char *)v16 + 16) = *((unsigned char *)v17 + 16);
        uint64_t v25 = type metadata accessor for TextQuery(0);
        uint64_t v26 = *(int *)(v25 + 24);
        uint64_t v27 = (char *)v16 + v26;
        uint64_t v28 = v8;
        uint64_t v29 = (char *)v17 + v26;
        uint64_t v30 = sub_253B059D0();
        uint64_t v31 = v29;
        uint64_t v8 = v28;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v27, v31, v30);
        *(_OWORD *)((char *)v16 + *(int *)(v25 + 28)) = *(_OWORD *)((char *)v17 + *(int *)(v25 + 28));
        goto LABEL_132;
      case 3u:
        uint64_t v302 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v308 = v8;
        if (EnumCaseMultiPayload == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v6))
          {
            uint64_t v200 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v16, v17, *(void *)(*(void *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v6);
          }
          uint64_t v217 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v16 + v217[5], (char *)v17 + v217[5], v6);
          uint64_t v218 = v217[6];
          __dstb = (char *)v16 + v218;
          uint64_t v219 = (char *)v17 + v218;
          uint64_t v220 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v221 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v221 - 8) + 32))(__dstb, v219, v221);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dstb, v219, *(void *)(*(void *)(v220 - 8) + 64));
          }
          uint64_t v222 = v217[7];
          uint64_t v223 = (char *)v16 + v222;
          uint64_t v224 = (char *)v17 + v222;
          uint64_t v225 = sub_253B059D0();
          uint64_t v291 = *(void (**)(char *, char *, uint64_t))(*(void *)(v225 - 8) + 32);
          __dstc = (void *)v225;
          v291(v223, v224, v225);
          uint64_t v226 = v217[8];
          uint64_t v227 = (_OWORD *)((char *)v16 + v226);
          uint64_t v228 = (_OWORD *)((char *)v17 + v226);
          uint64_t v229 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v227, v228, *(void *)(*(void *)(v229 - 8) + 64));
          }
          else
          {
            *uint64_t v227 = *v228;
            uint64_t v236 = type metadata accessor for RequestContent.TextContent(0);
            v291((char *)v227 + *(int *)(v236 + 20), (char *)v228 + *(int *)(v236 + 20), (uint64_t)__dstc);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(v16, v17, *(void *)(*(void *)(v302 - 8) + 64));
            goto LABEL_122;
          }
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
          uint64_t v99 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v100 = (char *)v16 + v99;
          uint64_t v101 = (char *)v17 + v99;
          uint64_t v102 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 32))(v100, v101, v102);
        }
        swift_storeEnumTagMultiPayload();
LABEL_122:
        uint64_t v237 = type metadata accessor for Request(0);
        *((unsigned char *)v16 + *(int *)(v237 + 20)) = *((unsigned char *)v17 + *(int *)(v237 + 20));
        uint64_t v304 = v237;
        uint64_t v238 = *(int *)(v237 + 24);
        uint64_t v239 = (char *)v16 + v238;
        uint64_t v240 = (char *)v17 + v238;
        uint64_t v241 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v240, 1, v241))
        {
          uint64_t v242 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v239, v240, *(void *)(*(void *)(v242 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v243 = sub_253B059D0();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v243 - 8) + 32))(v239, v240, v243);
            uint64_t v244 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            uint64_t v245 = &v239[v244];
            uint64_t v246 = &v240[v244];
            *(void *)uint64_t v245 = *(void *)v246;
            v245[8] = v246[8];
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v239, v240, *(void *)(*(void *)(v241 - 8) + 64));
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v239, 0, 1, v241);
        }
        uint64_t v247 = *(int *)(v304 + 28);
        uint64_t v248 = (char *)v16 + v247;
        uint64_t v249 = (char *)v17 + v247;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v247, 1, v6))
        {
          uint64_t v250 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v248, v249, *(void *)(*(void *)(v250 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v248, v249, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v248, 0, 1, v6);
        }
        uint64_t v8 = v308;
        uint64_t v251 = *(int *)(v304 + 32);
        uint64_t v252 = (char *)v16 + v251;
        uint64_t v253 = (char *)v17 + v251;
        *(_OWORD *)uint64_t v252 = *(_OWORD *)v253;
        *((void *)v252 + 2) = *((void *)v253 + 2);
LABEL_132:
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v32 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 32))(v16, v17, v32);
        uint64_t v33 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)((char *)v16 + v33[5]) = *(_OWORD *)((char *)v17 + v33[5]);
        *((unsigned char *)v16 + v33[6]) = *((unsigned char *)v17 + v33[6]);
        *(void *)((char *)v16 + v33[7]) = *(void *)((char *)v17 + v33[7]);
        *(_OWORD *)((char *)v16 + v33[8]) = *(_OWORD *)((char *)v17 + v33[8]);
        uint64_t v34 = v33[9];
        uint64_t v35 = (_OWORD *)((char *)v16 + v34);
        uint64_t v36 = (_OWORD *)((char *)v17 + v34);
        long long v37 = v36[1];
        *uint64_t v35 = *v36;
        v35[1] = v37;
        goto LABEL_132;
      case 6u:
        uint64_t v38 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v38))
        {
          uint64_t v39 = sub_253462A5C(&qword_269CDB460);
          memcpy(v16, v17, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v38 - 8) + 32))(v16, v17, v38);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v38);
        }
        uint64_t v141 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))((char *)v16 + *(int *)(v141 + 20), (char *)v17 + *(int *)(v141 + 20), v38);
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        uint64_t v103 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v103 - 8) + 32))(v16, v17, v103);
        uint64_t v104 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)((char *)v16 + v104[5]) = *(_OWORD *)((char *)v17 + v104[5]);
        *(void *)((char *)v16 + v104[6]) = *(void *)((char *)v17 + v104[6]);
        *(_OWORD *)((char *)v16 + v104[7]) = *(_OWORD *)((char *)v17 + v104[7]);
        *(_OWORD *)((char *)v16 + v104[8]) = *(_OWORD *)((char *)v17 + v104[8]);
        *(void *)((char *)v16 + v104[9]) = *(void *)((char *)v17 + v104[9]);
        *(void *)((char *)v16 + v104[10]) = *(void *)((char *)v17 + v104[10]);
        goto LABEL_132;
      case 8u:
        uint64_t v40 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v40 - 8) + 32))(v16, v17, v40);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)((char *)v16 + *(int *)(Step + 20)) = *(void *)((char *)v17 + *(int *)(Step + 20));
        goto LABEL_132;
      case 9u:
        uint64_t v42 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 32))(v16, v17, v42);
        uint64_t v43 = type metadata accessor for VariableStep(0);
        *(void *)((char *)v16 + *(int *)(v43 + 20)) = *(void *)((char *)v17 + *(int *)(v43 + 20));
        goto LABEL_132;
      case 0xDu:
        uint64_t v305 = v8;
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v203 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v203 - 8) + 32))(v16, v17, v203);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v201 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v201))goto LABEL_100; {
            uint64_t v202 = type metadata accessor for PlannerError();
            }
            goto LABEL_99;
          case 3u:
            uint64_t v201 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v201))
            {
              uint64_t v202 = type metadata accessor for ExecutorError();
LABEL_99:
              memcpy(v16, v17, *(void *)(*(void *)(v202 - 8) + 64));
            }
            else
            {
LABEL_100:
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v201 - 8) + 32))(v16, v17, v201);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v201);
            }
            break;
          default:
            uint64_t v105 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v105 - 8) + 32))(v16, v17, v105);
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_65;
      case 0xFu:
        uint64_t v106 = sub_253B059F0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v106 - 8) + 32))(v16, v17, v106);
        goto LABEL_132;
      case 0x10u:
        uint64_t v309 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v6))
        {
          uint64_t v107 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v16, v17, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v6);
        }
        uint64_t v162 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v16 + v162[5], (char *)v17 + v162[5], v6);
        uint64_t v163 = v162[6];
        uint64_t v164 = (char *)v16 + v163;
        uint64_t v165 = (char *)v17 + v163;
        uint64_t v166 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v167 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v167 - 8) + 32))(v164, v165, v167);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v164, v165, *(void *)(*(void *)(v166 - 8) + 64));
        }
        uint64_t v168 = v162[7];
        uint64_t v169 = (char *)v16 + v168;
        uint64_t v170 = (char *)v17 + v168;
        uint64_t v171 = sub_253B059D0();
        uint64_t v172 = v169;
        uint64_t v173 = *(void (**)(char *, char *, uint64_t))(*(void *)(v171 - 8) + 32);
        v173(v172, v170, v171);
        uint64_t v174 = v162[8];
        uint64_t v175 = (_OWORD *)((char *)v16 + v174);
        uint64_t v176 = (_OWORD *)((char *)v17 + v174);
        uint64_t v177 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v175, v176, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          *uint64_t v175 = *v176;
          uint64_t v190 = type metadata accessor for RequestContent.TextContent(0);
          v173((char *)v175 + *(int *)(v190 + 20), (char *)v176 + *(int *)(v190 + 20), v171);
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v8 = v309;
        goto LABEL_132;
      case 0x11u:
        uint64_t v305 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v6))
        {
          uint64_t v44 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v16, v17, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v6);
        }
        uint64_t v142 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)((char *)v16 + v142[5]) = *(_OWORD *)((char *)v17 + v142[5]);
        uint64_t v143 = v142[6];
        uint64_t v144 = (char *)v16 + v143;
        uint64_t v145 = (char *)v17 + v143;
        uint64_t v146 = sub_253B05AB0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v146 - 8) + 32))(v144, v145, v146);
        uint64_t v147 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v148 = &v144[v147];
        uint64_t v149 = &v145[v147];
        uint64_t v150 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v149, 1, v150))
        {
          uint64_t v151 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v148, v149, *(void *)(*(void *)(v151 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v150 - 8) + 32))(v148, v149, v150);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v148, 0, 1, v150);
        }
        *(_OWORD *)((char *)v16 + v142[7]) = *(_OWORD *)((char *)v17 + v142[7]);
        goto LABEL_65;
      case 0x12u:
        *uint64_t v16 = *v17;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v46 = *(int *)(StepResults + 20);
        uint64_t v47 = (char *)v16 + v46;
        uint64_t v306 = v8;
        uint64_t v48 = (char *)v17 + v46;
        uint64_t v49 = sub_253B059D0();
        int v50 = v48;
        uint64_t v8 = v306;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v50, v49);
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v16 + *(int *)(StepResults + 24), (char *)v17 + *(int *)(StepResults + 24), v6);
        goto LABEL_132;
      case 0x13u:
        uint64_t v108 = sub_253B05CF0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v108 - 8) + 32))(v16, v17, v108);
        goto LABEL_132;
      case 0x14u:
        uint64_t v109 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v109 - 8) + 32))(v16, v17, v109);
        long long v110 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)((char *)v16 + v110[5]) = *(void *)((char *)v17 + v110[5]);
        *(void *)((char *)v16 + v110[6]) = *(void *)((char *)v17 + v110[6]);
        *(void *)((char *)v16 + v110[7]) = *(void *)((char *)v17 + v110[7]);
        *((unsigned char *)v16 + v110[8]) = *((unsigned char *)v17 + v110[8]);
        *((unsigned char *)v16 + v110[9]) = *((unsigned char *)v17 + v110[9]);
        *((unsigned char *)v16 + v110[10]) = *((unsigned char *)v17 + v110[10]);
        uint64_t v111 = v110[11];
        uint64_t v112 = (_OWORD *)((char *)v16 + v111);
        uint64_t v113 = (_OWORD *)((char *)v17 + v111);
        long long v114 = v113[1];
        *uint64_t v112 = *v113;
        v112[1] = v114;
        goto LABEL_132;
      case 0x1Eu:
        uint64_t v115 = sub_253B06720();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v115 - 8) + 32))(v16, v17, v115);
        goto LABEL_132;
      case 0x1Fu:
        uint64_t v305 = v8;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v6))
        {
          uint64_t v116 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v16, v17, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v6);
        }
        uint64_t v303 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v178 = v303[5];
        uint64_t v179 = (char *)v16 + v178;
        uint64_t v180 = (char *)v17 + v178;
        uint64_t v181 = sub_253B06850();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v181 - 8) + 32))(v179, v180, v181);
        uint64_t v182 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v183 = &v179[v182];
        uint64_t v184 = &v180[v182];
        uint64_t v185 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v184, 1, v185))
        {
          uint64_t v186 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v183, v184, *(void *)(*(void *)(v186 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v185 - 8) + 32))(v183, v184, v185);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v183, 0, 1, v185);
        }
        uint64_t v191 = v303;
        uint64_t v192 = v303[6];
        uint64_t v289 = (char *)v17 + v192;
        __dstf = (char *)v16 + v192;
        uint64_t v193 = sub_253B059D0();
        uint64_t v194 = *(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32);
        v194(__dstf, v289, v193);
        v194((char *)v16 + v191[7], (char *)v17 + v191[7], v193);
        v194((char *)v16 + v191[8], (char *)v17 + v191[8], v193);
        uint64_t v195 = v303[9];
        uint64_t v196 = (_OWORD *)((char *)v16 + v195);
        uint64_t v197 = (_OWORD *)((char *)v17 + v195);
        long long v198 = v197[1];
        *uint64_t v196 = *v197;
        v196[1] = v198;
        goto LABEL_65;
      case 0x20u:
        int v310 = v8;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        uint64_t v117 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v118 = *(int *)(v117 + 20);
        uint64_t v119 = (char *)v16 + v118;
        uint64_t v120 = (char *)v17 + v118;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v118, 1, v6))
        {
          uint64_t v121 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v119, v120, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v119, v120, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v119, 0, 1, v6);
        }
        uint64_t v8 = v310;
        uint64_t v187 = *(int *)(v117 + 24);
        uint64_t v188 = (char *)v16 + v187;
        uint64_t v189 = (char *)v17 + v187;
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
        *((void *)v188 + 2) = *((void *)v189 + 2);
        goto LABEL_132;
      case 0x21u:
        uint64_t v305 = v8;
        *uint64_t v16 = *v17;
        uint64_t v51 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v52 = *(int *)(v51 + 20);
        uint64_t v53 = (char *)v16 + v52;
        uint64_t v54 = (char *)v17 + v52;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v52, 1, v6))goto LABEL_117; {
        goto LABEL_118;
        }
      case 0x22u:
        uint64_t v299 = type metadata accessor for RequestContent(0);
        int v55 = swift_getEnumCaseMultiPayload();
        uint64_t v305 = v8;
        if (v55 == 3)
        {
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v6))
          {
            uint64_t v199 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v16, v17, *(void *)(*(void *)(v199 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v6);
          }
          uint64_t v204 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v16 + v204[5], (char *)v17 + v204[5], v6);
          uint64_t v205 = v204[6];
          __dst = (char *)v16 + v205;
          uint64_t v206 = (char *)v17 + v205;
          uint64_t v207 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v208 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v208 - 8) + 32))(__dst, v206, v208);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(__dst, v206, *(void *)(*(void *)(v207 - 8) + 64));
          }
          uint64_t v209 = v204[7];
          uint64_t v210 = (char *)v16 + v209;
          uint64_t v211 = (char *)v17 + v209;
          uint64_t v212 = sub_253B059D0();
          int v290 = *(void (**)(char *, char *, uint64_t))(*(void *)(v212 - 8) + 32);
          __dsta = (void *)v212;
          v290(v210, v211, v212);
          uint64_t v213 = v204[8];
          uint64_t v214 = (_OWORD *)((char *)v16 + v213);
          uint64_t v215 = (_OWORD *)((char *)v17 + v213);
          uint64_t v216 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
          }
          else
          {
            *uint64_t v214 = *v215;
            uint64_t v230 = type metadata accessor for RequestContent.TextContent(0);
            v290((char *)v214 + *(int *)(v230 + 20), (char *)v215 + *(int *)(v230 + 20), (uint64_t)__dsta);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (v55 != 1)
          {
            memcpy(v16, v17, *(void *)(*(void *)(v299 - 8) + 64));
            goto LABEL_116;
          }
          *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
          uint64_t v56 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v57 = (char *)v16 + v56;
          uint64_t v58 = (char *)v17 + v56;
          uint64_t v59 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v57, v58, v59);
        }
        swift_storeEnumTagMultiPayload();
LABEL_116:
        uint64_t v51 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v231 = *(int *)(v51 + 20);
        uint64_t v53 = (char *)v16 + v231;
        uint64_t v54 = (char *)v17 + v231;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v231, 1, v6))
        {
LABEL_117:
          uint64_t v232 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v53, v54, *(void *)(*(void *)(v232 - 8) + 64));
        }
        else
        {
LABEL_118:
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v53, v54, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v53, 0, 1, v6);
        }
        uint64_t v233 = *(int *)(v51 + 24);
        uint64_t v234 = (char *)v16 + v233;
        uint64_t v235 = (char *)v17 + v233;
        *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
        *((void *)v234 + 2) = *((void *)v235 + 2);
LABEL_65:
        swift_storeEnumTagMultiPayload();
        uint64_t v8 = v305;
        break;
      case 0x23u:
        uint64_t v122 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v122 - 8) + 32))(v16, v17, v122);
        uint64_t v123 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v124 = *(int *)(v123 + 20);
        uint64_t v125 = (char *)v16 + v124;
        uint64_t v126 = v8;
        uint64_t v127 = (char *)v17 + v124;
        uint64_t v128 = sub_253B06850();
        uint64_t v129 = v127;
        uint64_t v8 = v126;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v128 - 8) + 32))(v125, v129, v128);
        *(void *)((char *)v16 + *(int *)(v123 + 24)) = *(void *)((char *)v17 + *(int *)(v123 + 24));
        goto LABEL_132;
      case 0x25u:
        uint64_t v60 = sub_253B08B30();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 32))(v16, v17, v60);
        uint64_t v61 = type metadata accessor for ToolResolution(0);
        uint64_t v62 = *(int *)(v61 + 20);
        __dstd = (char *)v17 + v62;
        uint64_t v300 = (char *)v16 + v62;
        uint64_t v63 = sub_253B059D0();
        uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32);
        v64(v300, __dstd, v63);
        v64((char *)v16 + *(int *)(v61 + 24), (char *)v17 + *(int *)(v61 + 24), v63);
        goto LABEL_132;
      case 0x26u:
        v307 = v8;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        uint64_t v65 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v66 = v65[5];
        uint64_t v67 = (char *)v16 + v66;
        unint64_t v68 = (char *)v17 + v66;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v66, 1, v6))
        {
          uint64_t v69 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v67, v68, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v67, 0, 1, v6);
        }
        *((unsigned char *)v16 + v65[6]) = *((unsigned char *)v17 + v65[6]);
        uint64_t v152 = v65[7];
        uint64_t v153 = (char *)v16 + v152;
        uint64_t v154 = (char *)v17 + v152;
        uint64_t v155 = sub_253B059D0();
        uint64_t v156 = v154;
        uint64_t v157 = *(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 32);
        v157(v153, v156, v155);
        uint64_t v158 = v65[8];
        uint64_t v159 = (char *)v16 + v158;
        uint64_t v160 = (char *)v17 + v158;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v158, 1, v155))
        {
          uint64_t v161 = sub_253462A5C(&qword_269CDB460);
          memcpy(v159, v160, *(void *)(*(void *)(v161 - 8) + 64));
        }
        else
        {
          v157(v159, v160, v155);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v159, 0, 1, v155);
        }
        uint64_t v8 = v307;
        goto LABEL_132;
      case 0x27u:
        uint64_t v305 = v8;
        (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
        uint64_t v70 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *((unsigned char *)v16 + v70[5]) = *((unsigned char *)v17 + v70[5]);
        uint64_t v71 = v70[6];
        uint64_t v72 = (char *)v16 + v71;
        uint64_t v73 = (char *)v17 + v71;
        uint64_t v74 = sub_253B059D0();
        uint64_t v75 = v73;
        uint64_t v76 = *(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 32);
        v76(v72, v75, v74);
        uint64_t v77 = v70[7];
        uint64_t v78 = (char *)v16 + v77;
        uint64_t v79 = (char *)v17 + v77;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17 + v77, 1, v74))
        {
          uint64_t v80 = sub_253462A5C(&qword_269CDB460);
          memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
        }
        else
        {
          v76(v78, v79, v74);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v78, 0, 1, v74);
        }
        goto LABEL_65;
      case 0x28u:
        uint64_t v81 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v81 - 8) + 32))(v16, v17, v81);
        uint64_t v82 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v83 = *(int *)(v82 + 20);
        uint64_t v84 = (char *)v16 + v83;
        uint64_t v85 = v8;
        uint64_t v86 = (char *)v17 + v83;
        uint64_t v87 = sub_253B09150();
        uint64_t v88 = v86;
        uint64_t v8 = v85;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v84, v88, v87);
        uint64_t v89 = *(int *)(v82 + 24);
        uint64_t v90 = (char *)v16 + v89;
        uint64_t v91 = (char *)v17 + v89;
        uint64_t v92 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 32))(v90, v91, v92);
        goto LABEL_132;
      case 0x29u:
        uint64_t v93 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v93 - 8) + 32))(v16, v17, v93);
        uint64_t v94 = type metadata accessor for TypeConversionResult(0);
        uint64_t v95 = *(int *)(v94 + 20);
        __dste = (char *)v17 + v95;
        uint64_t v301 = (char *)v16 + v95;
        uint64_t v96 = sub_253B059D0();
        uint64_t v97 = *(void (**)(char *, char *, uint64_t))(*(void *)(v96 - 8) + 32);
        v97(v301, __dste, v96);
        v97((char *)v16 + *(int *)(v94 + 24), (char *)v17 + *(int *)(v94 + 24), v96);
        goto LABEL_132;
      case 0x2Au:
        uint64_t v311 = v8;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
        v16[2] = v17[2];
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v131 = DecorationResult[7];
        uint64_t v132 = (char *)v16 + v131;
        uint64_t v133 = (char *)v17 + v131;
        uint64_t v134 = sub_253B08270();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v133, 1, v134))
        {
          uint64_t v135 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v132, v133, *(void *)(*(void *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 32))(v132, v133, v134);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v132, 0, 1, v134);
        }
        uint64_t v8 = v311;
        *(void *)((char *)v16 + DecorationResult[8]) = *(void *)((char *)v17 + DecorationResult[8]);
        *(void *)((char *)v16 + DecorationResult[9]) = *(void *)((char *)v17 + DecorationResult[9]);
        goto LABEL_132;
      case 0x2Cu:
        uint64_t v136 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v136 - 8) + 32))(v16, v17, v136);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)((char *)v16 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)v17
                                                                                         + *(int *)(DecorationPrePlannerResult
                                                                                                  + 20));
        uint64_t v138 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v139 = (char *)v16 + v138;
        uint64_t v140 = (char *)v17 + v138;
        v139[8] = v140[8];
        *(void *)uint64_t v139 = *(void *)v140;
        goto LABEL_132;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v254 = a3[8];
  uint64_t v255 = (void *)(a1 + v254);
  uint64_t v256 = (uint64_t *)(a2 + v254);
  uint64_t v258 = *v256;
  uint64_t v257 = v256[1];
  *uint64_t v255 = v258;
  v255[1] = v257;
  swift_bridgeObjectRelease();
  uint64_t v259 = a3[9];
  uint64_t v260 = (void *)(a1 + v259);
  int v261 = (uint64_t *)(a2 + v259);
  uint64_t v263 = *v261;
  uint64_t v262 = v261[1];
  *uint64_t v260 = v263;
  v260[1] = v262;
  swift_bridgeObjectRelease();
  uint64_t v264 = a3[10];
  uint64_t v265 = (void *)(a1 + v264);
  uint64_t v266 = (uint64_t *)(a2 + v264);
  uint64_t v268 = *v266;
  uint64_t v267 = v266[1];
  *uint64_t v265 = v268;
  v265[1] = v267;
  swift_bridgeObjectRelease();
  uint64_t v269 = a3[11];
  uint64_t v270 = (void *)(a1 + v269);
  uint64_t v271 = (uint64_t *)(a2 + v269);
  uint64_t v273 = *v271;
  uint64_t v272 = v271[1];
  *uint64_t v270 = v273;
  v270[1] = v272;
  swift_bridgeObjectRelease();
  uint64_t v274 = a3[12];
  uint64_t v275 = a1 + v274;
  uint64_t v276 = a2 + v274;
  uint64_t v277 = sub_253B05550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v277 - 8) + 40))(v275, v276, v277);
  uint64_t v278 = (int *)type metadata accessor for Timepoint();
  *(void *)(v275 + v278[5]) = *(void *)(v276 + v278[5]);
  *(void *)(v275 + v278[6]) = *(void *)(v276 + v278[6]);
  v8(v275 + v278[7], v276 + v278[7], v6);
  uint64_t v279 = a3[13];
  uint64_t v280 = (void *)(a1 + v279);
  char v281 = (uint64_t *)(a2 + v279);
  uint64_t v283 = *v281;
  uint64_t v282 = v281[1];
  void *v280 = v283;
  v280[1] = v282;
  swift_bridgeObjectRelease();
  uint64_t v284 = a3[14];
  uint64_t v285 = a3[15];
  uint64_t v286 = a1 + v284;
  uint64_t v287 = a2 + v284;
  *(void *)uint64_t v286 = *(void *)v287;
  *(unsigned char *)(v286 + 8) = *(unsigned char *)(v287 + 8);
  *(void *)(a1 + v285) = *(void *)(a2 + v285);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Session.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A00334);
}

uint64_t sub_253A00334()
{
  sub_253A3F514();
  sub_253486600();
  if (*(_DWORD *)(v3 + 84) == v0)
  {
    uint64_t v4 = sub_253945320();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_253486600();
    if (*(_DWORD *)(v6 + 84) == v0)
    {
      sub_2535E2560();
    }
    else
    {
      type metadata accessor for Session.Event.Payload(0);
      sub_253486600();
      if (*(_DWORD *)(v8 + 84) == v0)
      {
        sub_2535E256C();
      }
      else
      {
        if (v0 == 0x7FFFFFFF) {
          return sub_2534F89A0(*(void *)(v1 + *(int *)(v2 + 32) + 8));
        }
        uint64_t v5 = type metadata accessor for Timepoint();
        uint64_t v7 = *(int *)(v2 + 48);
      }
    }
    uint64_t v4 = v1 + v7;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v0, v5);
}

uint64_t storeEnumTagSinglePayload for Session.Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A00420);
}

void sub_253A00420()
{
  sub_253A3CA70();
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_253486600();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      sub_2535E26D8();
    }
    else
    {
      type metadata accessor for Session.Event.Payload(0);
      sub_253486600();
      if (*(_DWORD *)(v4 + 84) == v1)
      {
        sub_2535E26E4();
      }
      else
      {
        if (v1 == 0x7FFFFFFF)
        {
          sub_253A3D704(*(int *)(v0 + 32));
          return;
        }
        type metadata accessor for Timepoint();
      }
    }
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, v6, v7, v8);
}

void sub_253A004F0()
{
  sub_253B055C0();
  if (v0 <= 0x3F)
  {
    sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Session.Event.Payload(319);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Timepoint();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Session.Event.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = sub_253B05D70();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v9 = (void *)(a1 + v8);
        uint64_t v10 = (const void *)(a2 + v8);
        uint64_t v11 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
        {
          uint64_t v12 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
        }
        goto LABEL_158;
      case 1u:
        uint64_t v14 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v14;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v15 = type metadata accessor for TextQuery(0);
        uint64_t v16 = *(int *)(v15 + 24);
        uint64_t v17 = a1 + v16;
        uint64_t v18 = a2 + v16;
        uint64_t v19 = sub_253B059D0();
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        v20(v17, v18, v19);
        uint64_t v21 = *(int *)(v15 + 28);
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (void *)(a2 + v21);
        uint64_t v24 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v24;
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 3u:
        uint64_t v27 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 3)
        {
          if (EnumCaseMultiPayload == 2)
          {
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v27 - 8) + 64));
              goto LABEL_133;
            }
            uint64_t v29 = *(void *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = v29;
            uint64_t v30 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v31 = a1 + v30;
            uint64_t v32 = a2 + v30;
            uint64_t v33 = sub_253B059D0();
            uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
            swift_bridgeObjectRetain();
            v34(v31, v32, v33);
          }
LABEL_132:
          swift_storeEnumTagMultiPayload();
LABEL_133:
          uint64_t v326 = (int *)type metadata accessor for Request(0);
          *(unsigned char *)(a1 + v326[5]) = *(unsigned char *)(a2 + v326[5]);
          uint64_t v327 = v326[6];
          uint64_t v328 = (void *)(a1 + v327);
          uint64_t v329 = (void *)(a2 + v327);
          uint64_t v330 = type metadata accessor for RequestPrescribedPlan(0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v329, 1, v330))
          {
            uint64_t v331 = sub_253462A5C(&qword_269CDBB20);
            memcpy(v328, v329, *(void *)(*(void *)(v331 - 8) + 64));
          }
          else
          {
            switch(swift_getEnumCaseMultiPayload())
            {
              case 0u:
                uint64_t v332 = v329[1];
                *uint64_t v328 = *v329;
                v328[1] = v332;
                *((_WORD *)v328 + 8) = *((_WORD *)v329 + 8);
                swift_bridgeObjectRetain();
                goto LABEL_151;
              case 1u:
                uint64_t v340 = v329[1];
                *uint64_t v328 = *v329;
                v328[1] = v340;
                swift_bridgeObjectRetain();
                goto LABEL_151;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
                uint64_t v341 = v329[1];
                *uint64_t v328 = *v329;
                v328[1] = v341;
                *((unsigned char *)v328 + 16) = *((unsigned char *)v329 + 16);
                swift_bridgeObjectRetain();
                goto LABEL_151;
              case 6u:
                uint64_t v342 = sub_253B059D0();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v342 - 8) + 16))(v328, v329, v342);
                uint64_t v343 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
                uint64_t v344 = (char *)v328 + v343;
                uint64_t v345 = (char *)v329 + v343;
                *(void *)uint64_t v344 = *(void *)v345;
                v344[8] = v345[8];
LABEL_151:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v328, v329, *(void *)(*(void *)(v330 - 8) + 64));
                break;
            }
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v328, 0, 1, v330);
          }
          uint64_t v346 = v326[7];
          uint64_t v347 = (void *)(a1 + v346);
          uint64_t v348 = (const void *)(a2 + v346);
          uint64_t v349 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v348, 1, v349))
          {
            uint64_t v350 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v347, v348, *(void *)(*(void *)(v350 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v349 - 8) + 16))(v347, v348, v349);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v347, 0, 1, v349);
          }
          uint64_t v351 = v326[8];
          uint64_t v233 = a1 + v351;
          uint64_t v234 = a2 + v351;
          uint64_t v235 = *(void *)(v234 + 8);
          if (!v235)
          {
            *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
            *(void *)(v233 + 16) = *(void *)(v234 + 16);
            goto LABEL_158;
          }
LABEL_145:
          *(void *)uint64_t v233 = *(void *)v234;
          *(void *)(v233 + 8) = v235;
          *(void *)(v233 + 16) = *(void *)(v234 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_158;
        }
        uint64_t v281 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v281))
        {
          uint64_t v282 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v282 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 16))(a1, a2, v281);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v281);
        }
        uint64_t v288 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 16))(a1 + v288[5], a2 + v288[5], v281);
        uint64_t v289 = v288[6];
        int v290 = (void *)(a1 + v289);
        uint64_t v291 = (const void *)(a2 + v289);
        uint64_t v292 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v293 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v293 - 8) + 16))(v290, v291, v293);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v290, v291, *(void *)(*(void *)(v292 - 8) + 64));
        }
        uint64_t v294 = v288[7];
        uint64_t v295 = a1 + v294;
        uint64_t v296 = a2 + v294;
        uint64_t v297 = sub_253B059D0();
        uint64_t v298 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v297 - 8) + 16);
        v298(v295, v296, v297);
        uint64_t v299 = v288[8];
        uint64_t v300 = (void *)(a1 + v299);
        uint64_t v301 = (void *)(a2 + v299);
        uint64_t v302 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v303 = swift_getEnumCaseMultiPayload();
        if (v303 == 1)
        {
          void *v300 = *v301;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v303)
          {
            memcpy(v300, v301, *(void *)(*(void *)(v302 - 8) + 64));
            goto LABEL_132;
          }
          uint64_t v304 = v301[1];
          void *v300 = *v301;
          v300[1] = v304;
          uint64_t v305 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v353 = (char *)v300 + v305;
          uint64_t v306 = (char *)v301 + v305;
          swift_bridgeObjectRetain();
          v298((uint64_t)v353, (uint64_t)v306, v297);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_132;
      case 4u:
        uint64_t v35 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v35;
        uint64_t v36 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v36;
        uint64_t v37 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v37;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 5u:
        uint64_t v38 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
        uint64_t v39 = (int *)type metadata accessor for Action(0);
        uint64_t v40 = v39[5];
        uint64_t v41 = (void *)(a1 + v40);
        uint64_t v42 = (uint64_t *)(a2 + v40);
        uint64_t v44 = *v42;
        uint64_t v43 = v42[1];
        *uint64_t v41 = v44;
        v41[1] = v43;
        *(unsigned char *)(a1 + v39[6]) = *(unsigned char *)(a2 + v39[6]);
        *(void *)(a1 + v39[7]) = *(void *)(a2 + v39[7]);
        uint64_t v45 = v39[8];
        uint64_t v46 = (void *)(a1 + v45);
        uint64_t v47 = (void *)(a2 + v45);
        uint64_t v48 = v47[1];
        *uint64_t v46 = *v47;
        v46[1] = v48;
        uint64_t v49 = v39[9];
        int v50 = (void *)(a1 + v49);
        uint64_t v51 = (void *)(a2 + v49);
        uint64_t v52 = v51[1];
        *int v50 = *v51;
        v50[1] = v52;
        uint64_t v53 = v51[3];
        v50[2] = v51[2];
        v50[3] = v53;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 6u:
        uint64_t v54 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v54))
        {
          uint64_t v55 = sub_253462A5C(&qword_269CDB460);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v54);
        }
        uint64_t v206 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1 + *(int *)(v206 + 20), a2 + *(int *)(v206 + 20), v54);
        goto LABEL_158;
      case 7u:
        uint64_t v56 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
        uint64_t v57 = (int *)type metadata accessor for ClientAction(0);
        uint64_t v58 = v57[5];
        uint64_t v59 = (void *)(a1 + v58);
        uint64_t v60 = (uint64_t *)(a2 + v58);
        uint64_t v62 = *v60;
        uint64_t v61 = v60[1];
        *uint64_t v59 = v62;
        v59[1] = v61;
        *(void *)(a1 + v57[6]) = *(void *)(a2 + v57[6]);
        uint64_t v63 = v57[7];
        uint64_t v64 = (void *)(a1 + v63);
        uint64_t v65 = (void *)(a2 + v63);
        uint64_t v66 = v65[1];
        *uint64_t v64 = *v65;
        v64[1] = v66;
        uint64_t v67 = v57[8];
        unint64_t v68 = (void *)(a1 + v67);
        uint64_t v69 = (void *)(a2 + v67);
        uint64_t v70 = v69[1];
        *unint64_t v68 = *v69;
        v68[1] = v70;
        *(void *)(a1 + v57[9]) = *(void *)(a2 + v57[9]);
        *(void *)(a1 + v57[10]) = *(void *)(a2 + v57[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 8u:
        uint64_t v71 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16))(a1, a2, v71);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)(a1 + *(int *)(Step + 20)) = *(void *)(a2 + *(int *)(Step + 20));
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 9u:
        uint64_t v73 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16))(a1, a2, v73);
        uint64_t v74 = type metadata accessor for VariableStep(0);
        *(void *)(a1 + *(int *)(v74 + 20)) = *(void *)(a2 + *(int *)(v74 + 20));
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0xAu:
      case 0x15u:
      case 0x1Du:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0xBu:
      case 0x17u:
      case 0x18u:
      case 0x1Au:
        uint64_t v109 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v109;
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0xCu:
        uint64_t v75 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v75;
        uint64_t v76 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v76;
        uint64_t v77 = *(void *)(a2 + 32);
        uint64_t v78 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = v77;
        *(void *)(a1 + 40) = v78;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v283 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v283 - 8) + 16))(a1, a2, v283);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v284 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v284)) {
              goto LABEL_113;
            }
            uint64_t v285 = type metadata accessor for PlannerError();
            goto LABEL_108;
          case 3u:
            uint64_t v284 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v284))
            {
              uint64_t v285 = type metadata accessor for ExecutorError();
LABEL_108:
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v285 - 8) + 64));
            }
            else
            {
LABEL_113:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v284 - 8) + 16))(a1, a2, v284);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v284);
            }
            break;
          default:
            uint64_t v79 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(a1, a2, v79);
            break;
        }
        goto LABEL_97;
      case 0xEu:
        uint64_t v80 = *(void *)a2;
        unint64_t v81 = *(void *)(a2 + 8);
        sub_25348A9C8(*(void *)a2, v81);
        *(void *)a1 = v80;
        *(void *)(a1 + 8) = v81;
        uint64_t v82 = *(void *)(a2 + 16);
        unint64_t v83 = *(void *)(a2 + 24);
        sub_25348A9C8(v82, v83);
        *(void *)(a1 + 16) = v82;
        *(void *)(a1 + 24) = v83;
        uint64_t v84 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v84;
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0xFu:
        uint64_t v85 = sub_253B059F0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(a1, a2, v85);
        goto LABEL_158;
      case 0x10u:
        uint64_t v86 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v86))
        {
          uint64_t v87 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(a1, a2, v86);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v86);
        }
        uint64_t v260 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(a1 + v260[5], a2 + v260[5], v86);
        uint64_t v261 = v260[6];
        uint64_t v262 = (void *)(a1 + v261);
        uint64_t v263 = (const void *)(a2 + v261);
        uint64_t v264 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v265 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v265 - 8) + 16))(v262, v263, v265);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v262, v263, *(void *)(*(void *)(v264 - 8) + 64));
        }
        uint64_t v266 = v260[7];
        uint64_t v267 = a1 + v266;
        uint64_t v268 = a2 + v266;
        uint64_t v269 = sub_253B059D0();
        uint64_t v270 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v269 - 8) + 16);
        v270(v267, v268, v269);
        uint64_t v271 = v260[8];
        uint64_t v272 = (void *)(a1 + v271);
        uint64_t v273 = (void *)(a2 + v271);
        uint64_t v274 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v275 = swift_getEnumCaseMultiPayload();
        if (v275 == 1)
        {
          *uint64_t v272 = *v273;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v275)
          {
            memcpy(v272, v273, *(void *)(*(void *)(v274 - 8) + 64));
LABEL_158:
            swift_storeEnumTagMultiPayload();
            return a1;
          }
          uint64_t v276 = v273[1];
          *uint64_t v272 = *v273;
          v272[1] = v276;
          uint64_t v277 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v278 = (char *)v272 + v277;
          uint64_t v279 = (char *)v273 + v277;
          swift_bridgeObjectRetain();
          v270((uint64_t)v278, (uint64_t)v279, v269);
        }
LABEL_97:
        swift_storeEnumTagMultiPayload();
        goto LABEL_158;
      case 0x11u:
        uint64_t v88 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v88))
        {
          uint64_t v89 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16))(a1, a2, v88);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v88);
        }
        uint64_t v207 = (int *)type metadata accessor for ActionStepResult(0);
        uint64_t v208 = v207[5];
        uint64_t v209 = (void *)(a1 + v208);
        uint64_t v210 = (void *)(a2 + v208);
        uint64_t v211 = v210[1];
        *uint64_t v209 = *v210;
        v209[1] = v211;
        uint64_t v212 = v207[6];
        uint64_t v213 = a1 + v212;
        uint64_t v214 = a2 + v212;
        uint64_t v215 = sub_253B05AB0();
        uint64_t v216 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 16);
        swift_bridgeObjectRetain();
        v216(v213, v214, v215);
        uint64_t v217 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v218 = (void *)(v213 + v217);
        uint64_t v219 = (const void *)(v214 + v217);
        uint64_t v220 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v219, 1, v220))
        {
          uint64_t v221 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v218, v219, *(void *)(*(void *)(v221 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v220 - 8) + 16))(v218, v219, v220);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v218, 0, 1, v220);
        }
        uint64_t v245 = v207[7];
        uint64_t v246 = (void *)(a1 + v245);
        uint64_t v247 = (void *)(a2 + v245);
        uint64_t v248 = v247[1];
        *uint64_t v246 = *v247;
        v246[1] = v248;
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x12u:
        *(void *)a1 = *(void *)a2;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v91 = *(int *)(StepResults + 20);
        uint64_t v92 = a1 + v91;
        uint64_t v93 = a2 + v91;
        uint64_t v94 = sub_253B059D0();
        uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16);
        swift_bridgeObjectRetain();
        v95(v92, v93, v94);
        uint64_t v96 = *(int *)(StepResults + 24);
        uint64_t v97 = a1 + v96;
        uint64_t v98 = a2 + v96;
        uint64_t v99 = sub_253B055C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
        goto LABEL_158;
      case 0x13u:
        uint64_t v100 = sub_253B05CF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 16))(a1, a2, v100);
        goto LABEL_158;
      case 0x14u:
        uint64_t v101 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 16))(a1, a2, v101);
        uint64_t v102 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)(a1 + v102[5]) = *(void *)(a2 + v102[5]);
        *(void *)(a1 + v102[6]) = *(void *)(a2 + v102[6]);
        *(void *)(a1 + v102[7]) = *(void *)(a2 + v102[7]);
        *(unsigned char *)(a1 + v102[8]) = *(unsigned char *)(a2 + v102[8]);
        *(unsigned char *)(a1 + v102[9]) = *(unsigned char *)(a2 + v102[9]);
        *(unsigned char *)(a1 + v102[10]) = *(unsigned char *)(a2 + v102[10]);
        uint64_t v103 = v102[11];
        uint64_t v104 = (void *)(a1 + v103);
        uint64_t v105 = (void *)(a2 + v103);
        uint64_t v106 = v105[1];
        *uint64_t v104 = *v105;
        v104[1] = v106;
        uint64_t v107 = v105[3];
        v104[2] = v105[2];
        v104[3] = v107;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x16u:
      case 0x24u:
        uint64_t v108 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v108;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x1Bu:
        uint64_t v110 = *(void *)a2;
        uint64_t v111 = *(void *)(a2 + 8);
        *(void *)a1 = v110;
        *(void *)(a1 + 8) = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x1Cu:
        uint64_t v112 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v112;
        uint64_t v113 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v113;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        uint64_t v115 = *(void *)(a2 + 40);
        uint64_t v114 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = v115;
        *(void *)(a1 + 48) = v114;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x1Eu:
        uint64_t v116 = sub_253B06720();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(a1, a2, v116);
        goto LABEL_158;
      case 0x1Fu:
        uint64_t v117 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v117))
        {
          uint64_t v118 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 16))(a1, a2, v117);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v117);
        }
        uint64_t v222 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v223 = v222[5];
        uint64_t v224 = a1 + v223;
        uint64_t v225 = a2 + v223;
        uint64_t v226 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 16))(v224, v225, v226);
        uint64_t v227 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v228 = (void *)(v224 + v227);
        uint64_t v229 = (const void *)(v225 + v227);
        uint64_t v230 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v229, 1, v230))
        {
          uint64_t v231 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v228, v229, *(void *)(*(void *)(v231 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v230 - 8) + 16))(v228, v229, v230);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v228, 0, 1, v230);
        }
        uint64_t v249 = v222[6];
        uint64_t v250 = a1 + v249;
        uint64_t v251 = a2 + v249;
        uint64_t v252 = sub_253B059D0();
        uint64_t v253 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 16);
        v253(v250, v251, v252);
        v253(a1 + v222[7], a2 + v222[7], v252);
        v253(a1 + v222[8], a2 + v222[8], v252);
        uint64_t v254 = v222[9];
        uint64_t v255 = (void *)(a1 + v254);
        uint64_t v256 = (void *)(a2 + v254);
        uint64_t v257 = v256[1];
        if (v257)
        {
          *uint64_t v255 = *v256;
          v255[1] = v257;
          uint64_t v258 = v256[3];
          v255[2] = v256[2];
          v255[3] = v258;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v259 = *((_OWORD *)v256 + 1);
          *(_OWORD *)uint64_t v255 = *(_OWORD *)v256;
          *((_OWORD *)v255 + 1) = v259;
        }
        goto LABEL_158;
      case 0x20u:
        uint64_t v119 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v119;
        uint64_t v120 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v121 = *(int *)(v120 + 20);
        uint64_t v122 = (void *)(a1 + v121);
        uint64_t v123 = (const void *)(a2 + v121);
        uint64_t v124 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v123, 1, v124))
        {
          uint64_t v125 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v124 - 8) + 16))(v122, v123, v124);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v122, 0, 1, v124);
        }
        uint64_t v232 = *(int *)(v120 + 24);
        uint64_t v233 = a1 + v232;
        uint64_t v234 = a2 + v232;
        uint64_t v235 = *(void *)(v234 + 8);
        if (v235) {
          goto LABEL_145;
        }
        *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
        *(void *)(v233 + 16) = *(void *)(v234 + 16);
        goto LABEL_158;
      case 0x21u:
        *(void *)a1 = *(void *)a2;
        uint64_t v126 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v127 = *(int *)(v126 + 20);
        uint64_t v128 = (void *)(a1 + v127);
        uint64_t v129 = (const void *)(a2 + v127);
        uint64_t v130 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v129, 1, v130))
        {
          uint64_t v131 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v128, v129, *(void *)(*(void *)(v131 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v130 - 8) + 16))(v128, v129, v130);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v128, 0, 1, v130);
        }
        uint64_t v280 = *(int *)(v126 + 24);
        uint64_t v233 = a1 + v280;
        uint64_t v234 = a2 + v280;
        uint64_t v235 = *(void *)(v234 + 8);
        if (v235) {
          goto LABEL_145;
        }
        *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
        *(void *)(v233 + 16) = *(void *)(v234 + 16);
        goto LABEL_158;
      case 0x22u:
        uint64_t v132 = type metadata accessor for RequestContent(0);
        int v133 = swift_getEnumCaseMultiPayload();
        if (v133 != 3)
        {
          if (v133 == 2)
          {
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v133 != 1)
            {
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v132 - 8) + 64));
              goto LABEL_141;
            }
            uint64_t v134 = *(void *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = v134;
            uint64_t v135 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v136 = a1 + v135;
            uint64_t v137 = a2 + v135;
            uint64_t v138 = sub_253B059D0();
            uint64_t v139 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 16);
            swift_bridgeObjectRetain();
            v139(v136, v137, v138);
          }
LABEL_140:
          swift_storeEnumTagMultiPayload();
LABEL_141:
          uint64_t v333 = type metadata accessor for ExternalAgentRequest(0);
          uint64_t v334 = *(int *)(v333 + 20);
          uint64_t v335 = (void *)(a1 + v334);
          uint64_t v336 = (const void *)(a2 + v334);
          uint64_t v337 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v336, 1, v337))
          {
            uint64_t v338 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v335, v336, *(void *)(*(void *)(v338 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v337 - 8) + 16))(v335, v336, v337);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v335, 0, 1, v337);
          }
          uint64_t v339 = *(int *)(v333 + 24);
          uint64_t v233 = a1 + v339;
          uint64_t v234 = a2 + v339;
          uint64_t v235 = *(void *)(v234 + 8);
          if (!v235)
          {
            *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
            *(void *)(v233 + 16) = *(void *)(v234 + 16);
            goto LABEL_158;
          }
          goto LABEL_145;
        }
        uint64_t v286 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v286))
        {
          uint64_t v287 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v287 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v286 - 8) + 16))(a1, a2, v286);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v286);
        }
        v307 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v286 - 8) + 16))(a1 + v307[5], a2 + v307[5], v286);
        uint64_t v308 = v307[6];
        uint64_t v309 = (void *)(a1 + v308);
        int v310 = (const void *)(a2 + v308);
        uint64_t v311 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v312 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v312 - 8) + 16))(v309, v310, v312);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v309, v310, *(void *)(*(void *)(v311 - 8) + 64));
        }
        uint64_t v313 = v307[7];
        uint64_t v314 = a1 + v313;
        uint64_t v315 = a2 + v313;
        uint64_t v316 = sub_253B059D0();
        uint64_t v317 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v316 - 8) + 16);
        v317(v314, v315, v316);
        uint64_t v318 = v307[8];
        uint64_t v319 = (void *)(a1 + v318);
        uint64_t v320 = (void *)(a2 + v318);
        uint64_t v321 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v322 = swift_getEnumCaseMultiPayload();
        if (v322 == 1)
        {
          void *v319 = *v320;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v322)
          {
            memcpy(v319, v320, *(void *)(*(void *)(v321 - 8) + 64));
            goto LABEL_140;
          }
          uint64_t v323 = v320[1];
          void *v319 = *v320;
          v319[1] = v323;
          uint64_t v324 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v354 = (char *)v319 + v324;
          uint64_t v325 = (char *)v320 + v324;
          swift_bridgeObjectRetain();
          v317((uint64_t)v354, (uint64_t)v325, v316);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_140;
      case 0x23u:
        uint64_t v140 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16))(a1, a2, v140);
        uint64_t v141 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v142 = *(int *)(v141 + 20);
        uint64_t v143 = a1 + v142;
        uint64_t v144 = a2 + v142;
        uint64_t v145 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 16))(v143, v144, v145);
        *(void *)(a1 + *(int *)(v141 + 24)) = *(void *)(a2 + *(int *)(v141 + 24));
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x25u:
        uint64_t v146 = sub_253B08B30();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 16))(a1, a2, v146);
        uint64_t v147 = type metadata accessor for ToolResolution(0);
        uint64_t v148 = *(int *)(v147 + 20);
        uint64_t v149 = a1 + v148;
        uint64_t v150 = a2 + v148;
        uint64_t v151 = sub_253B059D0();
        uint64_t v152 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v151 - 8) + 16);
        v152(v149, v150, v151);
        v152(a1 + *(int *)(v147 + 24), a2 + *(int *)(v147 + 24), v151);
        goto LABEL_158;
      case 0x26u:
        uint64_t v153 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v153;
        uint64_t v154 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v155 = v154[5];
        uint64_t v156 = (void *)(a1 + v155);
        uint64_t v157 = (const void *)(a2 + v155);
        uint64_t v158 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v157, 1, v158))
        {
          uint64_t v159 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v156, v157, *(void *)(*(void *)(v159 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v158 - 8) + 16))(v156, v157, v158);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v156, 0, 1, v158);
        }
        *(unsigned char *)(a1 + v154[6]) = *(unsigned char *)(a2 + v154[6]);
        uint64_t v236 = v154[7];
        uint64_t v237 = a1 + v236;
        uint64_t v238 = a2 + v236;
        uint64_t v239 = sub_253B059D0();
        uint64_t v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 16);
        v240(v237, v238, v239);
        uint64_t v241 = v154[8];
        uint64_t v242 = (void *)(a1 + v241);
        uint64_t v243 = (const void *)(a2 + v241);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v243, 1, v239))
        {
          uint64_t v244 = sub_253462A5C(&qword_269CDB460);
          memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
        }
        else
        {
          v240((uint64_t)v242, (uint64_t)v243, v239);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v242, 0, 1, v239);
        }
        goto LABEL_158;
      case 0x27u:
        uint64_t v160 = sub_253B055C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 16))(a1, a2, v160);
        uint64_t v161 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *(unsigned char *)(a1 + v161[5]) = *(unsigned char *)(a2 + v161[5]);
        uint64_t v162 = v161[6];
        uint64_t v163 = a1 + v162;
        uint64_t v164 = a2 + v162;
        uint64_t v165 = sub_253B059D0();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        v166(v163, v164, v165);
        uint64_t v167 = v161[7];
        uint64_t v168 = (void *)(a1 + v167);
        uint64_t v169 = (const void *)(a2 + v167);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v169, 1, v165))
        {
          uint64_t v170 = sub_253462A5C(&qword_269CDB460);
          memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
        }
        else
        {
          v166((uint64_t)v168, (uint64_t)v169, v165);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v168, 0, 1, v165);
        }
        goto LABEL_158;
      case 0x28u:
        uint64_t v171 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 16))(a1, a2, v171);
        uint64_t v172 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v173 = *(int *)(v172 + 20);
        uint64_t v174 = a1 + v173;
        uint64_t v175 = a2 + v173;
        uint64_t v176 = sub_253B09150();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 16))(v174, v175, v176);
        uint64_t v177 = *(int *)(v172 + 24);
        uint64_t v178 = a1 + v177;
        uint64_t v179 = a2 + v177;
        uint64_t v180 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 16))(v178, v179, v180);
        goto LABEL_158;
      case 0x29u:
        uint64_t v181 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v181 - 8) + 16))(a1, a2, v181);
        uint64_t v182 = type metadata accessor for TypeConversionResult(0);
        uint64_t v183 = *(int *)(v182 + 20);
        uint64_t v184 = a1 + v183;
        uint64_t v185 = a2 + v183;
        uint64_t v186 = sub_253B059D0();
        uint64_t v187 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 16);
        v187(v184, v185, v186);
        v187(a1 + *(int *)(v182 + 24), a2 + *(int *)(v182 + 24), v186);
        goto LABEL_158;
      case 0x2Au:
        uint64_t v188 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v188;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v190 = DecorationResult[7];
        uint64_t v191 = (void *)(a1 + v190);
        uint64_t v192 = (const void *)(a2 + v190);
        uint64_t v193 = sub_253B08270();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v192, 1, v193))
        {
          uint64_t v194 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v191, v192, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v193 - 8) + 16))(v191, v192, v193);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v191, 0, 1, v193);
        }
        *(void *)(a1 + DecorationResult[8]) = *(void *)(a2 + DecorationResult[8]);
        *(void *)(a1 + DecorationResult[9]) = *(void *)(a2 + DecorationResult[9]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      case 0x2Cu:
        uint64_t v195 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v195 - 8) + 16))(a1, a2, v195);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        uint64_t v197 = *(int *)(DecorationPrePlannerResult + 20);
        long long v198 = (void *)(a1 + v197);
        uint64_t v199 = (uint64_t *)(a2 + v197);
        uint64_t v201 = *v199;
        uint64_t v200 = v199[1];
        *long long v198 = v201;
        v198[1] = v200;
        uint64_t v202 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v203 = a1 + v202;
        uint64_t v204 = (uint64_t *)(a2 + v202);
        uint64_t v205 = *v204;
        LOBYTE(v204) = *((unsigned char *)v204 + 8);
        *(void *)uint64_t v203 = v205;
        *(unsigned char *)(v203 + 8) = (_BYTE)v204;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_158;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v13 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for Session.Event.Payload(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      a1 += *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v4 = sub_253B05CB0();
LABEL_19:
      uint64_t v11 = v4;
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v4);
      if (!result)
      {
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
        uint64_t v12 = a1;
        goto LABEL_21;
      }
      return result;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + *(int *)(type metadata accessor for TextQuery(0) + 24);
      uint64_t v6 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      goto LABEL_110;
    case 2:
    case 22:
    case 27:
    case 36:
      goto LABEL_109;
    case 3:
      type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v75 = sub_253B055C0();
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v75)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(a1, v75);
        }
        uint64_t v76 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(a1 + v76[5], v75);
        uint64_t v77 = a1 + v76[6];
        type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v78 = sub_253B09120();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(v77, v78);
        }
        uint64_t v79 = a1 + v76[7];
        uint64_t v80 = sub_253B059D0();
        unint64_t v81 = *(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8);
        v81(v79, v80);
        uint64_t v82 = a1 + v76[8];
        type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v83 = swift_getEnumCaseMultiPayload();
        if (v83 != 1)
        {
          if (!v83)
          {
            swift_bridgeObjectRelease();
            uint64_t v84 = type metadata accessor for RequestContent.TextContent(0);
            v81(v82 + *(int *)(v84 + 20), v80);
          }
          goto LABEL_97;
        }
      }
      else if (EnumCaseMultiPayload != 2)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v9 = sub_253B059D0();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
        }
LABEL_97:
        uint64_t v95 = (int *)type metadata accessor for Request(0);
        uint64_t v96 = a1 + v95[6];
        uint64_t v97 = type metadata accessor for RequestPrescribedPlan(0);
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v96, 1, v97))
        {
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
            case 1u:
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              swift_bridgeObjectRelease();
              break;
            case 6u:
              uint64_t v104 = sub_253B059D0();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v96, v104);
              break;
            default:
              break;
          }
        }
        uint64_t v98 = a1 + v95[7];
        uint64_t v99 = sub_253B055C0();
        if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v98, 1, v99)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v98, v99);
        }
        uint64_t v100 = v95[8];
        goto LABEL_108;
      }
      swift_bridgeObjectRelease();
      goto LABEL_97;
    case 4:
    case 28:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 5:
      uint64_t v10 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for Action(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 6:
      uint64_t v11 = sub_253B059D0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      }
      uint64_t v12 = a1 + *(int *)(type metadata accessor for ActionCancellation(0) + 20);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
LABEL_21:
      uint64_t v17 = v11;
      goto LABEL_93;
    case 7:
      uint64_t v14 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for ClientAction(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_110;
    case 8:
      uint64_t v15 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
      type metadata accessor for QueryStep(0);
      goto LABEL_110;
    case 9:
      uint64_t v16 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
      type metadata accessor for VariableStep(0);
      goto LABEL_110;
    case 10:
    case 11:
    case 21:
    case 23:
    case 24:
    case 26:
    case 29:
      goto LABEL_110;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_110;
    case 13:
      type metadata accessor for SessionError();
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch((int)result)
      {
        case 0:
          goto LABEL_91;
        case 1:
          type metadata accessor for SessionCoordinatorError();
          uint64_t result = swift_getEnumCaseMultiPayload();
          if (result > 2) {
            return result;
          }
LABEL_91:
          uint64_t v18 = sub_253B05940();
          break;
        case 2:
        case 3:
          uint64_t v4 = sub_253B05940();
          goto LABEL_19;
        default:
          return result;
      }
      goto LABEL_92;
    case 14:
      sub_253487D84(*(void *)a1, *(void *)(a1 + 8));
      sub_253487D84(*(void *)(a1 + 16), *(void *)(a1 + 24));
      goto LABEL_110;
    case 15:
      uint64_t v18 = sub_253B059F0();
      goto LABEL_92;
    case 16:
      uint64_t v19 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
      }
      uint64_t v20 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1 + v20[5], v19);
      uint64_t v21 = a1 + v20[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
      }
      uint64_t v23 = a1 + v20[7];
      uint64_t v24 = sub_253B059D0();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
      v105(v23, v24);
      uint64_t v25 = a1 + v20[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1) {
        goto LABEL_110;
      }
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v25 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
LABEL_62:
      uint64_t v17 = v24;
LABEL_68:
      uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))v105;
LABEL_93:
      return v13(v12, v17);
    case 17:
      uint64_t v26 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v26)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
      }
      uint64_t v27 = type metadata accessor for ActionStepResult(0);
      swift_bridgeObjectRelease();
      uint64_t v28 = a1 + *(int *)(v27 + 24);
      uint64_t v29 = sub_253B05AB0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
      uint64_t v30 = v28 + *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v31 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v30, 1, v31)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
      }
      goto LABEL_110;
    case 18:
      swift_bridgeObjectRelease();
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v33 = a1 + *(int *)(StepResults + 20);
      uint64_t v34 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
      a1 += *(int *)(StepResults + 24);
      uint64_t v18 = sub_253B055C0();
      goto LABEL_92;
    case 19:
      uint64_t v18 = sub_253B05CF0();
      goto LABEL_92;
    case 20:
      uint64_t v35 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
      type metadata accessor for ActionResolverRequest(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_109;
    case 30:
      uint64_t v18 = sub_253B06720();
      goto LABEL_92;
    case 31:
      uint64_t v36 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v36)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(a1, v36);
      }
      uint64_t v37 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v38 = a1 + v37[5];
      uint64_t v39 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v38, v39);
      uint64_t v40 = v38 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v41 = sub_253B06820();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v40, 1, v41)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
      }
      uint64_t v42 = a1 + v37[6];
      uint64_t v43 = sub_253B059D0();
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8);
      v44(v42, v43);
      v44(a1 + v37[7], v43);
      v44(a1 + v37[8], v43);
      uint64_t result = *(void *)(a1 + v37[9] + 8);
      if (result) {
        goto LABEL_109;
      }
      return result;
    case 32:
      swift_bridgeObjectRelease();
      uint64_t v45 = type metadata accessor for ExternalAgentTextQuery(0);
      goto LABEL_105;
    case 33:
      swift_bridgeObjectRelease();
      uint64_t v45 = type metadata accessor for ExternalAgentSpeechQuery(0);
      goto LABEL_105;
    case 34:
      type metadata accessor for RequestContent(0);
      int v46 = swift_getEnumCaseMultiPayload();
      if (v46 != 3)
      {
        if (v46 != 2)
        {
          if (v46 == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v48 = sub_253B059D0();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v47, v48);
          }
          goto LABEL_104;
        }
LABEL_103:
        swift_bridgeObjectRelease();
        goto LABEL_104;
      }
      uint64_t v85 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v85)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(a1, v85);
      }
      uint64_t v86 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(a1 + v86[5], v85);
      uint64_t v87 = a1 + v86[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v88 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(v87, v88);
      }
      uint64_t v89 = a1 + v86[7];
      uint64_t v90 = sub_253B059D0();
      uint64_t v91 = *(void (**)(uint64_t, uint64_t))(*(void *)(v90 - 8) + 8);
      v91(v89, v90);
      uint64_t v92 = a1 + v86[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v93 = swift_getEnumCaseMultiPayload();
      if (v93 == 1) {
        goto LABEL_103;
      }
      if (!v93)
      {
        swift_bridgeObjectRelease();
        uint64_t v94 = type metadata accessor for RequestContent.TextContent(0);
        v91(v92 + *(int *)(v94 + 20), v90);
      }
LABEL_104:
      uint64_t v45 = type metadata accessor for ExternalAgentRequest(0);
LABEL_105:
      uint64_t v101 = v45;
      uint64_t v102 = a1 + *(int *)(v45 + 20);
      uint64_t v103 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v102, 1, v103)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v102, v103);
      }
      uint64_t v100 = *(int *)(v101 + 24);
LABEL_108:
      uint64_t result = *(void *)(a1 + v100 + 8);
      if (result)
      {
LABEL_109:
        swift_bridgeObjectRelease();
LABEL_110:
        return swift_bridgeObjectRelease();
      }
      return result;
    case 35:
      uint64_t v49 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(a1, v49);
      uint64_t v50 = a1 + *(int *)(type metadata accessor for ExternalAgentOutcome(0) + 20);
      uint64_t v51 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(v50, v51);
      goto LABEL_110;
    case 37:
      uint64_t v52 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(a1, v52);
      uint64_t v53 = type metadata accessor for ToolResolution(0);
      goto LABEL_67;
    case 38:
      swift_bridgeObjectRelease();
      uint64_t v54 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v55 = a1 + v54[5];
      uint64_t v56 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v55, 1, v56)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v55, v56);
      }
      uint64_t v57 = a1 + v54[7];
      uint64_t v24 = sub_253B059D0();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
      v105(v57, v24);
      uint64_t v58 = a1 + v54[8];
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v58, 1, v24);
      if (result) {
        return result;
      }
      uint64_t v12 = v58;
      goto LABEL_62;
    case 39:
      uint64_t v59 = sub_253B055C0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(a1, v59);
      uint64_t v60 = type metadata accessor for ClientUndoRedoRequest(0);
      uint64_t v61 = a1 + *(int *)(v60 + 24);
      uint64_t v62 = sub_253B059D0();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8);
      v105(v61, v62);
      uint64_t v63 = a1 + *(int *)(v60 + 28);
      uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v63, 1, v62);
      if (result) {
        return result;
      }
      uint64_t v12 = v63;
      uint64_t v17 = v62;
      goto LABEL_68;
    case 40:
      uint64_t v64 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(a1, v64);
      uint64_t v65 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v66 = a1 + *(int *)(v65 + 20);
      uint64_t v67 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8))(v66, v67);
      a1 += *(int *)(v65 + 24);
      uint64_t v18 = sub_253B059D0();
LABEL_92:
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
      uint64_t v17 = v18;
      uint64_t v12 = a1;
      goto LABEL_93;
    case 41:
      uint64_t v68 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(a1, v68);
      uint64_t v53 = type metadata accessor for TypeConversionResult(0);
LABEL_67:
      uint64_t v69 = v53;
      uint64_t v70 = a1 + *(int *)(v53 + 20);
      uint64_t v71 = sub_253B059D0();
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v71 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v105)((void *)(v71 - 8), v70, v71);
      uint64_t v12 = a1 + *(int *)(v69 + 24);
      uint64_t v17 = v71;
      goto LABEL_68;
    case 42:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v72 = a1 + *(int *)(type metadata accessor for QueryDecorationResult(0) + 28);
      uint64_t v73 = sub_253B08270();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v72, 1, v73)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v72, v73);
      }
      goto LABEL_109;
    case 44:
      uint64_t v74 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(a1, v74);
      type metadata accessor for QueryDecorationPrePlannerResult(0);
      swift_bridgeObjectRelease();
      goto LABEL_110;
    default:
      return result;
  }
}

uint64_t initializeWithCopy for Session.Event.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = sub_253B05D70();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (const void *)(a2 + v7);
      uint64_t v10 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
      }
      goto LABEL_156;
    case 1u:
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v13 = type metadata accessor for TextQuery(0);
      uint64_t v14 = *(int *)(v13 + 24);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = sub_253B059D0();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
      uint64_t v19 = *(int *)(v13 + 28);
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (void *)(a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 2u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 3u:
      uint64_t v25 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 3)
      {
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)a1 = *(void *)a2;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v25 - 8) + 64));
            goto LABEL_131;
          }
          uint64_t v27 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v27;
          uint64_t v28 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v29 = a1 + v28;
          uint64_t v30 = a2 + v28;
          uint64_t v31 = sub_253B059D0();
          uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
          swift_bridgeObjectRetain();
          v32(v29, v30, v31);
        }
LABEL_130:
        swift_storeEnumTagMultiPayload();
LABEL_131:
        uint64_t v324 = (int *)type metadata accessor for Request(0);
        *(unsigned char *)(a1 + v324[5]) = *(unsigned char *)(a2 + v324[5]);
        uint64_t v325 = v324[6];
        uint64_t v326 = (void *)(a1 + v325);
        uint64_t v327 = (void *)(a2 + v325);
        uint64_t v328 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v327, 1, v328))
        {
          uint64_t v329 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v326, v327, *(void *)(*(void *)(v329 - 8) + 64));
        }
        else
        {
          switch(swift_getEnumCaseMultiPayload())
          {
            case 0u:
              uint64_t v330 = v327[1];
              void *v326 = *v327;
              v326[1] = v330;
              *((_WORD *)v326 + 8) = *((_WORD *)v327 + 8);
              swift_bridgeObjectRetain();
              goto LABEL_149;
            case 1u:
              uint64_t v338 = v327[1];
              void *v326 = *v327;
              v326[1] = v338;
              swift_bridgeObjectRetain();
              goto LABEL_149;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
              uint64_t v339 = v327[1];
              void *v326 = *v327;
              v326[1] = v339;
              *((unsigned char *)v326 + 16) = *((unsigned char *)v327 + 16);
              swift_bridgeObjectRetain();
              goto LABEL_149;
            case 6u:
              uint64_t v340 = sub_253B059D0();
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v340 - 8) + 16))(v326, v327, v340);
              uint64_t v341 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
              uint64_t v342 = (char *)v326 + v341;
              uint64_t v343 = (char *)v327 + v341;
              *(void *)uint64_t v342 = *(void *)v343;
              v342[8] = v343[8];
LABEL_149:
              swift_storeEnumTagMultiPayload();
              break;
            default:
              memcpy(v326, v327, *(void *)(*(void *)(v328 - 8) + 64));
              break;
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v326, 0, 1, v328);
        }
        uint64_t v344 = v324[7];
        uint64_t v345 = (void *)(a1 + v344);
        uint64_t v346 = (const void *)(a2 + v344);
        uint64_t v347 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v346, 1, v347))
        {
          uint64_t v348 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v345, v346, *(void *)(*(void *)(v348 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v347 - 8) + 16))(v345, v346, v347);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v345, 0, 1, v347);
        }
        uint64_t v349 = v324[8];
        uint64_t v231 = a1 + v349;
        uint64_t v232 = a2 + v349;
        uint64_t v233 = *(void *)(v232 + 8);
        if (!v233)
        {
          *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
          *(void *)(v231 + 16) = *(void *)(v232 + 16);
          goto LABEL_156;
        }
LABEL_143:
        *(void *)uint64_t v231 = *(void *)v232;
        *(void *)(v231 + 8) = v233;
        *(void *)(v231 + 16) = *(void *)(v232 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_156;
      }
      uint64_t v279 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v279))
      {
        uint64_t v280 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v280 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v279 - 8) + 16))(a1, a2, v279);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v279);
      }
      uint64_t v286 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v279 - 8) + 16))(a1 + v286[5], a2 + v286[5], v279);
      uint64_t v287 = v286[6];
      uint64_t v288 = (void *)(a1 + v287);
      uint64_t v289 = (const void *)(a2 + v287);
      uint64_t v290 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v291 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v291 - 8) + 16))(v288, v289, v291);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v288, v289, *(void *)(*(void *)(v290 - 8) + 64));
      }
      uint64_t v292 = v286[7];
      uint64_t v293 = a1 + v292;
      uint64_t v294 = a2 + v292;
      uint64_t v295 = sub_253B059D0();
      uint64_t v296 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v295 - 8) + 16);
      v296(v293, v294, v295);
      uint64_t v297 = v286[8];
      uint64_t v298 = (void *)(a1 + v297);
      uint64_t v299 = (void *)(a2 + v297);
      uint64_t v300 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v301 = swift_getEnumCaseMultiPayload();
      if (v301 == 1)
      {
        *uint64_t v298 = *v299;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v301)
        {
          memcpy(v298, v299, *(void *)(*(void *)(v300 - 8) + 64));
          goto LABEL_130;
        }
        uint64_t v302 = v299[1];
        *uint64_t v298 = *v299;
        v298[1] = v302;
        uint64_t v303 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v351 = (char *)v298 + v303;
        uint64_t v304 = (char *)v299 + v303;
        swift_bridgeObjectRetain();
        v296((uint64_t)v351, (uint64_t)v304, v295);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_130;
    case 4u:
      uint64_t v33 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v33;
      uint64_t v34 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v34;
      uint64_t v35 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v35;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 5u:
      uint64_t v36 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
      uint64_t v37 = (int *)type metadata accessor for Action(0);
      uint64_t v38 = v37[5];
      uint64_t v39 = (void *)(a1 + v38);
      uint64_t v40 = (uint64_t *)(a2 + v38);
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      *uint64_t v39 = v42;
      v39[1] = v41;
      *(unsigned char *)(a1 + v37[6]) = *(unsigned char *)(a2 + v37[6]);
      *(void *)(a1 + v37[7]) = *(void *)(a2 + v37[7]);
      uint64_t v43 = v37[8];
      uint64_t v44 = (void *)(a1 + v43);
      uint64_t v45 = (void *)(a2 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      uint64_t v47 = v37[9];
      uint64_t v48 = (void *)(a1 + v47);
      uint64_t v49 = (void *)(a2 + v47);
      uint64_t v50 = v49[1];
      void *v48 = *v49;
      v48[1] = v50;
      uint64_t v51 = v49[3];
      v48[2] = v49[2];
      v48[3] = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 6u:
      uint64_t v52 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v52))
      {
        uint64_t v53 = sub_253462A5C(&qword_269CDB460);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v52);
      }
      uint64_t v204 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1 + *(int *)(v204 + 20), a2 + *(int *)(v204 + 20), v52);
      goto LABEL_156;
    case 7u:
      uint64_t v54 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      uint64_t v55 = (int *)type metadata accessor for ClientAction(0);
      uint64_t v56 = v55[5];
      uint64_t v57 = (void *)(a1 + v56);
      uint64_t v58 = (uint64_t *)(a2 + v56);
      uint64_t v60 = *v58;
      uint64_t v59 = v58[1];
      *uint64_t v57 = v60;
      v57[1] = v59;
      *(void *)(a1 + v55[6]) = *(void *)(a2 + v55[6]);
      uint64_t v61 = v55[7];
      uint64_t v62 = (void *)(a1 + v61);
      uint64_t v63 = (void *)(a2 + v61);
      uint64_t v64 = v63[1];
      *uint64_t v62 = *v63;
      v62[1] = v64;
      uint64_t v65 = v55[8];
      uint64_t v66 = (void *)(a1 + v65);
      uint64_t v67 = (void *)(a2 + v65);
      uint64_t v68 = v67[1];
      *uint64_t v66 = *v67;
      v66[1] = v68;
      *(void *)(a1 + v55[9]) = *(void *)(a2 + v55[9]);
      *(void *)(a1 + v55[10]) = *(void *)(a2 + v55[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 8u:
      uint64_t v69 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(a1, a2, v69);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)(a1 + *(int *)(Step + 20)) = *(void *)(a2 + *(int *)(Step + 20));
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 9u:
      uint64_t v71 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16))(a1, a2, v71);
      uint64_t v72 = type metadata accessor for VariableStep(0);
      *(void *)(a1 + *(int *)(v72 + 20)) = *(void *)(a2 + *(int *)(v72 + 20));
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0xAu:
    case 0x15u:
    case 0x1Du:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0xBu:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
      uint64_t v107 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v107;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0xCu:
      uint64_t v73 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v73;
      uint64_t v74 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v74;
      uint64_t v75 = *(void *)(a2 + 32);
      uint64_t v76 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v75;
      *(void *)(a1 + 40) = v76;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v281 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v281 - 8) + 16))(a1, a2, v281);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v282 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v282)) {
            goto LABEL_111;
          }
          uint64_t v283 = type metadata accessor for PlannerError();
          goto LABEL_106;
        case 3u:
          uint64_t v282 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v282))
          {
            uint64_t v283 = type metadata accessor for ExecutorError();
LABEL_106:
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v283 - 8) + 64));
          }
          else
          {
LABEL_111:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 16))(a1, a2, v282);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v282);
          }
          break;
        default:
          uint64_t v77 = sub_253B05940();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
          break;
      }
      goto LABEL_95;
    case 0xEu:
      uint64_t v78 = *(void *)a2;
      unint64_t v79 = *(void *)(a2 + 8);
      sub_25348A9C8(*(void *)a2, v79);
      *(void *)a1 = v78;
      *(void *)(a1 + 8) = v79;
      uint64_t v80 = *(void *)(a2 + 16);
      unint64_t v81 = *(void *)(a2 + 24);
      sub_25348A9C8(v80, v81);
      *(void *)(a1 + 16) = v80;
      *(void *)(a1 + 24) = v81;
      uint64_t v82 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v82;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0xFu:
      uint64_t v83 = sub_253B059F0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
      goto LABEL_156;
    case 0x10u:
      uint64_t v84 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v84))
      {
        uint64_t v85 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(a1, a2, v84);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v84);
      }
      uint64_t v258 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(a1 + v258[5], a2 + v258[5], v84);
      uint64_t v259 = v258[6];
      uint64_t v260 = (void *)(a1 + v259);
      uint64_t v261 = (const void *)(a2 + v259);
      uint64_t v262 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v263 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v263 - 8) + 16))(v260, v261, v263);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v260, v261, *(void *)(*(void *)(v262 - 8) + 64));
      }
      uint64_t v264 = v258[7];
      uint64_t v265 = a1 + v264;
      uint64_t v266 = a2 + v264;
      uint64_t v267 = sub_253B059D0();
      uint64_t v268 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v267 - 8) + 16);
      v268(v265, v266, v267);
      uint64_t v269 = v258[8];
      uint64_t v270 = (void *)(a1 + v269);
      uint64_t v271 = (void *)(a2 + v269);
      uint64_t v272 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v273 = swift_getEnumCaseMultiPayload();
      if (v273 == 1)
      {
        *uint64_t v270 = *v271;
        swift_bridgeObjectRetain();
        goto LABEL_95;
      }
      if (!v273)
      {
        uint64_t v274 = v271[1];
        *uint64_t v270 = *v271;
        v270[1] = v274;
        uint64_t v275 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v276 = (char *)v270 + v275;
        uint64_t v277 = (char *)v271 + v275;
        swift_bridgeObjectRetain();
        v268((uint64_t)v276, (uint64_t)v277, v267);
LABEL_95:
        swift_storeEnumTagMultiPayload();
        goto LABEL_156;
      }
      memcpy(v270, v271, *(void *)(*(void *)(v272 - 8) + 64));
LABEL_156:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x11u:
      uint64_t v86 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v86))
      {
        uint64_t v87 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(a1, a2, v86);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v86);
      }
      uint64_t v205 = (int *)type metadata accessor for ActionStepResult(0);
      uint64_t v206 = v205[5];
      uint64_t v207 = (void *)(a1 + v206);
      uint64_t v208 = (void *)(a2 + v206);
      uint64_t v209 = v208[1];
      *uint64_t v207 = *v208;
      v207[1] = v209;
      uint64_t v210 = v205[6];
      uint64_t v211 = a1 + v210;
      uint64_t v212 = a2 + v210;
      uint64_t v213 = sub_253B05AB0();
      uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 16);
      swift_bridgeObjectRetain();
      v214(v211, v212, v213);
      uint64_t v215 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v216 = (void *)(v211 + v215);
      uint64_t v217 = (const void *)(v212 + v215);
      uint64_t v218 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v217, 1, v218))
      {
        uint64_t v219 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v216, v217, *(void *)(*(void *)(v219 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v218 - 8) + 16))(v216, v217, v218);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v216, 0, 1, v218);
      }
      uint64_t v243 = v205[7];
      uint64_t v244 = (void *)(a1 + v243);
      uint64_t v245 = (void *)(a2 + v243);
      uint64_t v246 = v245[1];
      *uint64_t v244 = *v245;
      v244[1] = v246;
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x12u:
      *(void *)a1 = *(void *)a2;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v89 = *(int *)(StepResults + 20);
      uint64_t v90 = a1 + v89;
      uint64_t v91 = a2 + v89;
      uint64_t v92 = sub_253B059D0();
      int v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16);
      swift_bridgeObjectRetain();
      v93(v90, v91, v92);
      uint64_t v94 = *(int *)(StepResults + 24);
      uint64_t v95 = a1 + v94;
      uint64_t v96 = a2 + v94;
      uint64_t v97 = sub_253B055C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 16))(v95, v96, v97);
      goto LABEL_156;
    case 0x13u:
      uint64_t v98 = sub_253B05CF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16))(a1, a2, v98);
      goto LABEL_156;
    case 0x14u:
      uint64_t v99 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(a1, a2, v99);
      uint64_t v100 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)(a1 + v100[5]) = *(void *)(a2 + v100[5]);
      *(void *)(a1 + v100[6]) = *(void *)(a2 + v100[6]);
      *(void *)(a1 + v100[7]) = *(void *)(a2 + v100[7]);
      *(unsigned char *)(a1 + v100[8]) = *(unsigned char *)(a2 + v100[8]);
      *(unsigned char *)(a1 + v100[9]) = *(unsigned char *)(a2 + v100[9]);
      *(unsigned char *)(a1 + v100[10]) = *(unsigned char *)(a2 + v100[10]);
      uint64_t v101 = v100[11];
      uint64_t v102 = (void *)(a1 + v101);
      uint64_t v103 = (void *)(a2 + v101);
      uint64_t v104 = v103[1];
      *uint64_t v102 = *v103;
      v102[1] = v104;
      uint64_t v105 = v103[3];
      v102[2] = v103[2];
      v102[3] = v105;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x16u:
    case 0x24u:
      uint64_t v106 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v106;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x1Bu:
      uint64_t v108 = *(void *)a2;
      uint64_t v109 = *(void *)(a2 + 8);
      *(void *)a1 = v108;
      *(void *)(a1 + 8) = v109;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x1Cu:
      uint64_t v110 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v110;
      uint64_t v111 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v111;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      uint64_t v113 = *(void *)(a2 + 40);
      uint64_t v112 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v113;
      *(void *)(a1 + 48) = v112;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x1Eu:
      uint64_t v114 = sub_253B06720();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 16))(a1, a2, v114);
      goto LABEL_156;
    case 0x1Fu:
      uint64_t v115 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v115))
      {
        uint64_t v116 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v116 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(a1, a2, v115);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v115);
      }
      uint64_t v220 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v221 = v220[5];
      uint64_t v222 = a1 + v221;
      uint64_t v223 = a2 + v221;
      uint64_t v224 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 16))(v222, v223, v224);
      uint64_t v225 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v226 = (void *)(v222 + v225);
      uint64_t v227 = (const void *)(v223 + v225);
      uint64_t v228 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v227, 1, v228))
      {
        uint64_t v229 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v226, v227, *(void *)(*(void *)(v229 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v228 - 8) + 16))(v226, v227, v228);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v226, 0, 1, v228);
      }
      uint64_t v247 = v220[6];
      uint64_t v248 = a1 + v247;
      uint64_t v249 = a2 + v247;
      uint64_t v250 = sub_253B059D0();
      uint64_t v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v250 - 8) + 16);
      v251(v248, v249, v250);
      v251(a1 + v220[7], a2 + v220[7], v250);
      v251(a1 + v220[8], a2 + v220[8], v250);
      uint64_t v252 = v220[9];
      uint64_t v253 = (void *)(a1 + v252);
      uint64_t v254 = (void *)(a2 + v252);
      uint64_t v255 = v254[1];
      if (v255)
      {
        void *v253 = *v254;
        v253[1] = v255;
        uint64_t v256 = v254[3];
        v253[2] = v254[2];
        v253[3] = v256;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v257 = *((_OWORD *)v254 + 1);
        *(_OWORD *)uint64_t v253 = *(_OWORD *)v254;
        *((_OWORD *)v253 + 1) = v257;
      }
      goto LABEL_156;
    case 0x20u:
      uint64_t v117 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v117;
      uint64_t v118 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v119 = *(int *)(v118 + 20);
      uint64_t v120 = (void *)(a1 + v119);
      uint64_t v121 = (const void *)(a2 + v119);
      uint64_t v122 = sub_253B055C0();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v121, 1, v122))
      {
        uint64_t v123 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v120, v121, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v122 - 8) + 16))(v120, v121, v122);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v120, 0, 1, v122);
      }
      uint64_t v230 = *(int *)(v118 + 24);
      uint64_t v231 = a1 + v230;
      uint64_t v232 = a2 + v230;
      uint64_t v233 = *(void *)(v232 + 8);
      if (v233) {
        goto LABEL_143;
      }
      *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
      *(void *)(v231 + 16) = *(void *)(v232 + 16);
      goto LABEL_156;
    case 0x21u:
      *(void *)a1 = *(void *)a2;
      uint64_t v124 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v125 = *(int *)(v124 + 20);
      uint64_t v126 = (void *)(a1 + v125);
      uint64_t v127 = (const void *)(a2 + v125);
      uint64_t v128 = sub_253B055C0();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v127, 1, v128))
      {
        uint64_t v129 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v128 - 8) + 16))(v126, v127, v128);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v126, 0, 1, v128);
      }
      uint64_t v278 = *(int *)(v124 + 24);
      uint64_t v231 = a1 + v278;
      uint64_t v232 = a2 + v278;
      uint64_t v233 = *(void *)(v232 + 8);
      if (v233) {
        goto LABEL_143;
      }
      *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
      *(void *)(v231 + 16) = *(void *)(v232 + 16);
      goto LABEL_156;
    case 0x22u:
      uint64_t v130 = type metadata accessor for RequestContent(0);
      int v131 = swift_getEnumCaseMultiPayload();
      if (v131 != 3)
      {
        if (v131 == 2)
        {
          *(void *)a1 = *(void *)a2;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v131 != 1)
          {
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v130 - 8) + 64));
            goto LABEL_139;
          }
          uint64_t v132 = *(void *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = v132;
          uint64_t v133 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v134 = a1 + v133;
          uint64_t v135 = a2 + v133;
          uint64_t v136 = sub_253B059D0();
          uint64_t v137 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 16);
          swift_bridgeObjectRetain();
          v137(v134, v135, v136);
        }
LABEL_138:
        swift_storeEnumTagMultiPayload();
LABEL_139:
        uint64_t v331 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v332 = *(int *)(v331 + 20);
        uint64_t v333 = (void *)(a1 + v332);
        uint64_t v334 = (const void *)(a2 + v332);
        uint64_t v335 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v334, 1, v335))
        {
          uint64_t v336 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v333, v334, *(void *)(*(void *)(v336 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v335 - 8) + 16))(v333, v334, v335);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v333, 0, 1, v335);
        }
        uint64_t v337 = *(int *)(v331 + 24);
        uint64_t v231 = a1 + v337;
        uint64_t v232 = a2 + v337;
        uint64_t v233 = *(void *)(v232 + 8);
        if (!v233)
        {
          *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
          *(void *)(v231 + 16) = *(void *)(v232 + 16);
          goto LABEL_156;
        }
        goto LABEL_143;
      }
      uint64_t v284 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v284))
      {
        uint64_t v285 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v285 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v284 - 8) + 16))(a1, a2, v284);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v284);
      }
      uint64_t v305 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v284 - 8) + 16))(a1 + v305[5], a2 + v305[5], v284);
      uint64_t v306 = v305[6];
      v307 = (void *)(a1 + v306);
      uint64_t v308 = (const void *)(a2 + v306);
      uint64_t v309 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v310 = sub_253B09120();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v310 - 8) + 16))(v307, v308, v310);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v307, v308, *(void *)(*(void *)(v309 - 8) + 64));
      }
      uint64_t v311 = v305[7];
      uint64_t v312 = a1 + v311;
      uint64_t v313 = a2 + v311;
      uint64_t v314 = sub_253B059D0();
      uint64_t v315 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v314 - 8) + 16);
      v315(v312, v313, v314);
      uint64_t v316 = v305[8];
      uint64_t v317 = (void *)(a1 + v316);
      uint64_t v318 = (void *)(a2 + v316);
      uint64_t v319 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v320 = swift_getEnumCaseMultiPayload();
      if (v320 == 1)
      {
        *uint64_t v317 = *v318;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v320)
        {
          memcpy(v317, v318, *(void *)(*(void *)(v319 - 8) + 64));
          goto LABEL_138;
        }
        uint64_t v321 = v318[1];
        *uint64_t v317 = *v318;
        v317[1] = v321;
        uint64_t v322 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v352 = (char *)v317 + v322;
        uint64_t v323 = (char *)v318 + v322;
        swift_bridgeObjectRetain();
        v315((uint64_t)v352, (uint64_t)v323, v314);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_138;
    case 0x23u:
      uint64_t v138 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 16))(a1, a2, v138);
      uint64_t v139 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v140 = *(int *)(v139 + 20);
      uint64_t v141 = a1 + v140;
      uint64_t v142 = a2 + v140;
      uint64_t v143 = sub_253B06850();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 16))(v141, v142, v143);
      *(void *)(a1 + *(int *)(v139 + 24)) = *(void *)(a2 + *(int *)(v139 + 24));
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x25u:
      uint64_t v144 = sub_253B08B30();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16))(a1, a2, v144);
      uint64_t v145 = type metadata accessor for ToolResolution(0);
      uint64_t v146 = *(int *)(v145 + 20);
      uint64_t v147 = a1 + v146;
      uint64_t v148 = a2 + v146;
      uint64_t v149 = sub_253B059D0();
      uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 16);
      v150(v147, v148, v149);
      v150(a1 + *(int *)(v145 + 24), a2 + *(int *)(v145 + 24), v149);
      goto LABEL_156;
    case 0x26u:
      uint64_t v151 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v151;
      uint64_t v152 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v153 = v152[5];
      uint64_t v154 = (void *)(a1 + v153);
      uint64_t v155 = (const void *)(a2 + v153);
      uint64_t v156 = sub_253B055C0();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v155, 1, v156))
      {
        uint64_t v157 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v154, v155, *(void *)(*(void *)(v157 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v156 - 8) + 16))(v154, v155, v156);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v154, 0, 1, v156);
      }
      *(unsigned char *)(a1 + v152[6]) = *(unsigned char *)(a2 + v152[6]);
      uint64_t v234 = v152[7];
      uint64_t v235 = a1 + v234;
      uint64_t v236 = a2 + v234;
      uint64_t v237 = sub_253B059D0();
      uint64_t v238 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v237 - 8) + 16);
      v238(v235, v236, v237);
      uint64_t v239 = v152[8];
      uint64_t v240 = (void *)(a1 + v239);
      uint64_t v241 = (const void *)(a2 + v239);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v241, 1, v237))
      {
        uint64_t v242 = sub_253462A5C(&qword_269CDB460);
        memcpy(v240, v241, *(void *)(*(void *)(v242 - 8) + 64));
      }
      else
      {
        v238((uint64_t)v240, (uint64_t)v241, v237);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v240, 0, 1, v237);
      }
      goto LABEL_156;
    case 0x27u:
      uint64_t v158 = sub_253B055C0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 16))(a1, a2, v158);
      uint64_t v159 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *(unsigned char *)(a1 + v159[5]) = *(unsigned char *)(a2 + v159[5]);
      uint64_t v160 = v159[6];
      uint64_t v161 = a1 + v160;
      uint64_t v162 = a2 + v160;
      uint64_t v163 = sub_253B059D0();
      uint64_t v164 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 16);
      v164(v161, v162, v163);
      uint64_t v165 = v159[7];
      uint64_t v166 = (void *)(a1 + v165);
      uint64_t v167 = (const void *)(a2 + v165);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v167, 1, v163))
      {
        uint64_t v168 = sub_253462A5C(&qword_269CDB460);
        memcpy(v166, v167, *(void *)(*(void *)(v168 - 8) + 64));
      }
      else
      {
        v164((uint64_t)v166, (uint64_t)v167, v163);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v166, 0, 1, v163);
      }
      goto LABEL_156;
    case 0x28u:
      uint64_t v169 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 16))(a1, a2, v169);
      uint64_t v170 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v171 = *(int *)(v170 + 20);
      uint64_t v172 = a1 + v171;
      uint64_t v173 = a2 + v171;
      uint64_t v174 = sub_253B09150();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 16))(v172, v173, v174);
      uint64_t v175 = *(int *)(v170 + 24);
      uint64_t v176 = a1 + v175;
      uint64_t v177 = a2 + v175;
      uint64_t v178 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v178 - 8) + 16))(v176, v177, v178);
      goto LABEL_156;
    case 0x29u:
      uint64_t v179 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 16))(a1, a2, v179);
      uint64_t v180 = type metadata accessor for TypeConversionResult(0);
      uint64_t v181 = *(int *)(v180 + 20);
      uint64_t v182 = a1 + v181;
      uint64_t v183 = a2 + v181;
      uint64_t v184 = sub_253B059D0();
      uint64_t v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v184 - 8) + 16);
      v185(v182, v183, v184);
      v185(a1 + *(int *)(v180 + 24), a2 + *(int *)(v180 + 24), v184);
      goto LABEL_156;
    case 0x2Au:
      uint64_t v186 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v186;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v188 = DecorationResult[7];
      uint64_t v189 = (void *)(a1 + v188);
      uint64_t v190 = (const void *)(a2 + v188);
      uint64_t v191 = sub_253B08270();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v190, 1, v191))
      {
        uint64_t v192 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v189, v190, *(void *)(*(void *)(v192 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v191 - 8) + 16))(v189, v190, v191);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v189, 0, 1, v191);
      }
      *(void *)(a1 + DecorationResult[8]) = *(void *)(a2 + DecorationResult[8]);
      *(void *)(a1 + DecorationResult[9]) = *(void *)(a2 + DecorationResult[9]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    case 0x2Cu:
      uint64_t v193 = sub_253B059D0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v193 - 8) + 16))(a1, a2, v193);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      uint64_t v195 = *(int *)(DecorationPrePlannerResult + 20);
      uint64_t v196 = (void *)(a1 + v195);
      uint64_t v197 = (uint64_t *)(a2 + v195);
      uint64_t v199 = *v197;
      uint64_t v198 = v197[1];
      *uint64_t v196 = v199;
      v196[1] = v198;
      uint64_t v200 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v201 = a1 + v200;
      uint64_t v202 = (uint64_t *)(a2 + v200);
      uint64_t v203 = *v202;
      LOBYTE(v202) = *((unsigned char *)v202 + 8);
      *(void *)uint64_t v201 = v203;
      *(unsigned char *)(v201 + 8) = (_BYTE)v202;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_156;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t assignWithCopy for Session.Event.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = sub_253B05D70();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v8 = (void *)(a1 + v7);
        uint64_t v9 = (const void *)(a2 + v7);
        uint64_t v10 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
        {
          uint64_t v11 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
        }
        goto LABEL_157;
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v12 = type metadata accessor for TextQuery(0);
        uint64_t v13 = *(int *)(v12 + 24);
        uint64_t v14 = a1 + v13;
        uint64_t v15 = a2 + v13;
        uint64_t v16 = sub_253B059D0();
        uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v17(v14, v15, v16);
        uint64_t v18 = *(int *)(v12 + 28);
        uint64_t v19 = (void *)(a1 + v18);
        uint64_t v20 = (void *)(a2 + v18);
        *uint64_t v19 = *v20;
        v19[1] = v20[1];
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 3u:
        uint64_t v21 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 3)
        {
          if (EnumCaseMultiPayload == 2)
          {
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (EnumCaseMultiPayload != 1)
            {
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v21 - 8) + 64));
              goto LABEL_132;
            }
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            uint64_t v23 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v24 = a1 + v23;
            uint64_t v25 = a2 + v23;
            uint64_t v26 = sub_253B059D0();
            uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
            swift_bridgeObjectRetain();
            v27(v24, v25, v26);
          }
LABEL_131:
          swift_storeEnumTagMultiPayload();
LABEL_132:
          uint64_t v280 = (int *)type metadata accessor for Request(0);
          *(unsigned char *)(a1 + v280[5]) = *(unsigned char *)(a2 + v280[5]);
          uint64_t v281 = v280[6];
          uint64_t v282 = (void *)(a1 + v281);
          uint64_t v283 = (void *)(a2 + v281);
          uint64_t v284 = type metadata accessor for RequestPrescribedPlan(0);
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v283, 1, v284))
          {
            uint64_t v285 = sub_253462A5C(&qword_269CDBB20);
            memcpy(v282, v283, *(void *)(*(void *)(v285 - 8) + 64));
          }
          else
          {
            switch(swift_getEnumCaseMultiPayload())
            {
              case 0u:
                *uint64_t v282 = *v283;
                v282[1] = v283[1];
                *((unsigned char *)v282 + 16) = *((unsigned char *)v283 + 16);
                *((unsigned char *)v282 + 17) = *((unsigned char *)v283 + 17);
                swift_bridgeObjectRetain();
                goto LABEL_150;
              case 1u:
                *uint64_t v282 = *v283;
                v282[1] = v283[1];
                swift_bridgeObjectRetain();
                goto LABEL_150;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
                *uint64_t v282 = *v283;
                v282[1] = v283[1];
                *((unsigned char *)v282 + 16) = *((unsigned char *)v283 + 16);
                swift_bridgeObjectRetain();
                goto LABEL_150;
              case 6u:
                uint64_t v294 = sub_253B059D0();
                (*(void (**)(void *, void *, uint64_t))(*(void *)(v294 - 8) + 16))(v282, v283, v294);
                uint64_t v295 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
                uint64_t v296 = (char *)v282 + v295;
                uint64_t v297 = (char *)v283 + v295;
                char v298 = v297[8];
                *(void *)uint64_t v296 = *(void *)v297;
                v296[8] = v298;
LABEL_150:
                swift_storeEnumTagMultiPayload();
                break;
              default:
                memcpy(v282, v283, *(void *)(*(void *)(v284 - 8) + 64));
                break;
            }
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v282, 0, 1, v284);
          }
          uint64_t v299 = v280[7];
          uint64_t v300 = (void *)(a1 + v299);
          int v301 = (const void *)(a2 + v299);
          uint64_t v302 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v301, 1, v302))
          {
            uint64_t v303 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v300, v301, *(void *)(*(void *)(v303 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v302 - 8) + 16))(v300, v301, v302);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v300, 0, 1, v302);
          }
          uint64_t v304 = v280[8];
          uint64_t v192 = a1 + v304;
          uint64_t v193 = (long long *)(a2 + v304);
          if (!*((void *)v193 + 1))
          {
            long long v305 = *v193;
            *(void *)(v192 + 16) = *((void *)v193 + 2);
            *(_OWORD *)uint64_t v192 = v305;
            goto LABEL_157;
          }
LABEL_144:
          *(void *)uint64_t v192 = *(void *)v193;
          *(void *)(v192 + 8) = *((void *)v193 + 1);
          *(void *)(v192 + 16) = *((void *)v193 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_157;
        }
        uint64_t v237 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v237))
        {
          uint64_t v238 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v238 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v237 - 8) + 16))(a1, a2, v237);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v237);
        }
        uint64_t v244 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v237 - 8) + 16))(a1 + v244[5], a2 + v244[5], v237);
        uint64_t v245 = v244[6];
        uint64_t v246 = (void *)(a1 + v245);
        uint64_t v247 = (const void *)(a2 + v245);
        uint64_t v248 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v249 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v249 - 8) + 16))(v246, v247, v249);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v246, v247, *(void *)(*(void *)(v248 - 8) + 64));
        }
        uint64_t v250 = v244[7];
        uint64_t v251 = a1 + v250;
        uint64_t v252 = a2 + v250;
        uint64_t v253 = sub_253B059D0();
        uint64_t v254 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v253 - 8) + 16);
        v254(v251, v252, v253);
        uint64_t v255 = v244[8];
        uint64_t v256 = (void *)(a1 + v255);
        long long v257 = (void *)(a2 + v255);
        uint64_t v258 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v259 = swift_getEnumCaseMultiPayload();
        if (v259 == 1)
        {
          *uint64_t v256 = *v257;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v259)
          {
            memcpy(v256, v257, *(void *)(*(void *)(v258 - 8) + 64));
            goto LABEL_131;
          }
          *uint64_t v256 = *v257;
          v256[1] = v257[1];
          uint64_t v260 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          v307 = (char *)v256 + v260;
          uint64_t v261 = (char *)v257 + v260;
          swift_bridgeObjectRetain();
          v254((uint64_t)v307, (uint64_t)v261, v253);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_131;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 5u:
        uint64_t v28 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
        uint64_t v29 = (int *)type metadata accessor for Action(0);
        uint64_t v30 = v29[5];
        uint64_t v31 = (void *)(a1 + v30);
        uint64_t v32 = (void *)(a2 + v30);
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
        *(unsigned char *)(a1 + v29[6]) = *(unsigned char *)(a2 + v29[6]);
        *(void *)(a1 + v29[7]) = *(void *)(a2 + v29[7]);
        uint64_t v33 = v29[8];
        uint64_t v34 = (void *)(a1 + v33);
        uint64_t v35 = (void *)(a2 + v33);
        *uint64_t v34 = *v35;
        v34[1] = v35[1];
        uint64_t v36 = v29[9];
        uint64_t v37 = (void *)(a1 + v36);
        uint64_t v38 = (void *)(a2 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        v37[2] = v38[2];
        v37[3] = v38[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 6u:
        uint64_t v39 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v39))
        {
          uint64_t v40 = sub_253462A5C(&qword_269CDB460);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v39);
        }
        uint64_t v166 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1 + *(int *)(v166 + 20), a2 + *(int *)(v166 + 20), v39);
        goto LABEL_157;
      case 7u:
        uint64_t v41 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = (int *)type metadata accessor for ClientAction(0);
        uint64_t v43 = v42[5];
        uint64_t v44 = (void *)(a1 + v43);
        uint64_t v45 = (void *)(a2 + v43);
        *uint64_t v44 = *v45;
        v44[1] = v45[1];
        *(void *)(a1 + v42[6]) = *(void *)(a2 + v42[6]);
        uint64_t v46 = v42[7];
        uint64_t v47 = (void *)(a1 + v46);
        uint64_t v48 = (void *)(a2 + v46);
        *uint64_t v47 = *v48;
        v47[1] = v48[1];
        uint64_t v49 = v42[8];
        uint64_t v50 = (void *)(a1 + v49);
        uint64_t v51 = (void *)(a2 + v49);
        *uint64_t v50 = *v51;
        v50[1] = v51[1];
        *(void *)(a1 + v42[9]) = *(void *)(a2 + v42[9]);
        *(void *)(a1 + v42[10]) = *(void *)(a2 + v42[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 8u:
        uint64_t v52 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)(a1 + *(int *)(Step + 20)) = *(void *)(a2 + *(int *)(Step + 20));
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 9u:
        uint64_t v54 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
        uint64_t v55 = type metadata accessor for VariableStep(0);
        *(void *)(a1 + *(int *)(v55 + 20)) = *(void *)(a2 + *(int *)(v55 + 20));
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0xAu:
      case 0x15u:
      case 0x1Du:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0xBu:
      case 0x17u:
      case 0x18u:
      case 0x1Au:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v239 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 16))(a1, a2, v239);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v240 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v240)) {
              goto LABEL_112;
            }
            uint64_t v241 = type metadata accessor for PlannerError();
            goto LABEL_107;
          case 3u:
            uint64_t v240 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v240))
            {
              uint64_t v241 = type metadata accessor for ExecutorError();
LABEL_107:
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v241 - 8) + 64));
            }
            else
            {
LABEL_112:
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v240 - 8) + 16))(a1, a2, v240);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v240);
            }
            break;
          default:
            uint64_t v56 = sub_253B05940();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
            break;
        }
        goto LABEL_96;
      case 0xEu:
        uint64_t v57 = *(void *)a2;
        unint64_t v58 = *(void *)(a2 + 8);
        sub_25348A9C8(*(void *)a2, v58);
        *(void *)a1 = v57;
        *(void *)(a1 + 8) = v58;
        uint64_t v59 = *(void *)(a2 + 16);
        unint64_t v60 = *(void *)(a2 + 24);
        sub_25348A9C8(v59, v60);
        *(void *)(a1 + 16) = v59;
        *(void *)(a1 + 24) = v60;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0xFu:
        uint64_t v61 = sub_253B059F0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
        goto LABEL_157;
      case 0x10u:
        uint64_t v62 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v62))
        {
          uint64_t v63 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(a1, a2, v62);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v62);
        }
        uint64_t v216 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(a1 + v216[5], a2 + v216[5], v62);
        uint64_t v217 = v216[6];
        uint64_t v218 = (void *)(a1 + v217);
        uint64_t v219 = (const void *)(a2 + v217);
        uint64_t v220 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v221 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v221 - 8) + 16))(v218, v219, v221);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
        }
        uint64_t v222 = v216[7];
        uint64_t v223 = a1 + v222;
        uint64_t v224 = a2 + v222;
        uint64_t v225 = sub_253B059D0();
        uint64_t v226 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 16);
        v226(v223, v224, v225);
        uint64_t v227 = v216[8];
        uint64_t v228 = (void *)(a1 + v227);
        uint64_t v229 = (void *)(a2 + v227);
        uint64_t v230 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v231 = swift_getEnumCaseMultiPayload();
        if (v231 == 1)
        {
          *uint64_t v228 = *v229;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v231)
          {
            memcpy(v228, v229, *(void *)(*(void *)(v230 - 8) + 64));
LABEL_157:
            swift_storeEnumTagMultiPayload();
            return a1;
          }
          *uint64_t v228 = *v229;
          v228[1] = v229[1];
          uint64_t v232 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v233 = (char *)v228 + v232;
          uint64_t v234 = (char *)v229 + v232;
          swift_bridgeObjectRetain();
          v226((uint64_t)v233, (uint64_t)v234, v225);
        }
LABEL_96:
        swift_storeEnumTagMultiPayload();
        goto LABEL_157;
      case 0x11u:
        uint64_t v64 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v64))
        {
          uint64_t v65 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v64);
        }
        uint64_t v167 = (int *)type metadata accessor for ActionStepResult(0);
        uint64_t v168 = v167[5];
        uint64_t v169 = (void *)(a1 + v168);
        uint64_t v170 = (void *)(a2 + v168);
        *uint64_t v169 = *v170;
        v169[1] = v170[1];
        uint64_t v171 = v167[6];
        uint64_t v172 = a1 + v171;
        uint64_t v173 = a2 + v171;
        uint64_t v174 = sub_253B05AB0();
        uint64_t v175 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 16);
        swift_bridgeObjectRetain();
        v175(v172, v173, v174);
        uint64_t v176 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v177 = (void *)(v172 + v176);
        uint64_t v178 = (const void *)(v173 + v176);
        uint64_t v179 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v178, 1, v179))
        {
          uint64_t v180 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v177, v178, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v179 - 8) + 16))(v177, v178, v179);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v177, 0, 1, v179);
        }
        uint64_t v203 = v167[7];
        uint64_t v204 = (void *)(a1 + v203);
        uint64_t v205 = (void *)(a2 + v203);
        *uint64_t v204 = *v205;
        v204[1] = v205[1];
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x12u:
        *(void *)a1 = *(void *)a2;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v67 = *(int *)(StepResults + 20);
        uint64_t v68 = a1 + v67;
        uint64_t v69 = a2 + v67;
        uint64_t v70 = sub_253B059D0();
        uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16);
        swift_bridgeObjectRetain();
        v71(v68, v69, v70);
        uint64_t v72 = *(int *)(StepResults + 24);
        uint64_t v73 = a1 + v72;
        uint64_t v74 = a2 + v72;
        uint64_t v75 = sub_253B055C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 16))(v73, v74, v75);
        goto LABEL_157;
      case 0x13u:
        uint64_t v76 = sub_253B05CF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16))(a1, a2, v76);
        goto LABEL_157;
      case 0x14u:
        uint64_t v77 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
        uint64_t v78 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)(a1 + v78[5]) = *(void *)(a2 + v78[5]);
        *(void *)(a1 + v78[6]) = *(void *)(a2 + v78[6]);
        *(void *)(a1 + v78[7]) = *(void *)(a2 + v78[7]);
        *(unsigned char *)(a1 + v78[8]) = *(unsigned char *)(a2 + v78[8]);
        *(unsigned char *)(a1 + v78[9]) = *(unsigned char *)(a2 + v78[9]);
        *(unsigned char *)(a1 + v78[10]) = *(unsigned char *)(a2 + v78[10]);
        uint64_t v79 = v78[11];
        uint64_t v80 = (void *)(a1 + v79);
        unint64_t v81 = (void *)(a2 + v79);
        *uint64_t v80 = *v81;
        v80[1] = v81[1];
        v80[2] = v81[2];
        v80[3] = v81[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x16u:
      case 0x24u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x1Bu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x1Cu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x1Eu:
        uint64_t v82 = sub_253B06720();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(a1, a2, v82);
        goto LABEL_157;
      case 0x1Fu:
        uint64_t v83 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v83))
        {
          uint64_t v84 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v83);
        }
        uint64_t v181 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v182 = v181[5];
        uint64_t v183 = a1 + v182;
        uint64_t v184 = a2 + v182;
        uint64_t v185 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 16))(v183, v184, v185);
        uint64_t v186 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v187 = (void *)(v183 + v186);
        uint64_t v188 = (const void *)(v184 + v186);
        uint64_t v189 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v188, 1, v189))
        {
          uint64_t v190 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v187, v188, *(void *)(*(void *)(v190 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v189 - 8) + 16))(v187, v188, v189);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v187, 0, 1, v189);
        }
        uint64_t v206 = v181[6];
        uint64_t v207 = a1 + v206;
        uint64_t v208 = a2 + v206;
        uint64_t v209 = sub_253B059D0();
        uint64_t v210 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v209 - 8) + 16);
        v210(v207, v208, v209);
        v210(a1 + v181[7], a2 + v181[7], v209);
        v210(a1 + v181[8], a2 + v181[8], v209);
        uint64_t v211 = v181[9];
        uint64_t v212 = (void *)(a1 + v211);
        uint64_t v213 = (void *)(a2 + v211);
        if (v213[1])
        {
          *uint64_t v212 = *v213;
          v212[1] = v213[1];
          v212[2] = v213[2];
          v212[3] = v213[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v215 = *((_OWORD *)v213 + 1);
          *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
          *((_OWORD *)v212 + 1) = v215;
        }
        goto LABEL_157;
      case 0x20u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v85 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v86 = *(int *)(v85 + 20);
        uint64_t v87 = (void *)(a1 + v86);
        uint64_t v88 = (const void *)(a2 + v86);
        uint64_t v89 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v88, 1, v89))
        {
          uint64_t v90 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v87, v88, *(void *)(*(void *)(v90 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v87, 0, 1, v89);
        }
        uint64_t v191 = *(int *)(v85 + 24);
        uint64_t v192 = a1 + v191;
        uint64_t v193 = (long long *)(a2 + v191);
        if (*((void *)v193 + 1)) {
          goto LABEL_144;
        }
        long long v214 = *v193;
        *(void *)(v192 + 16) = *((void *)v193 + 2);
        *(_OWORD *)uint64_t v192 = v214;
        goto LABEL_157;
      case 0x21u:
        *(void *)a1 = *(void *)a2;
        uint64_t v91 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v92 = *(int *)(v91 + 20);
        int v93 = (void *)(a1 + v92);
        uint64_t v94 = (const void *)(a2 + v92);
        uint64_t v95 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v94, 1, v95))
        {
          uint64_t v96 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v93, v94, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v95 - 8) + 16))(v93, v94, v95);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v93, 0, 1, v95);
        }
        uint64_t v235 = *(int *)(v91 + 24);
        uint64_t v192 = a1 + v235;
        uint64_t v193 = (long long *)(a2 + v235);
        if (*((void *)v193 + 1)) {
          goto LABEL_144;
        }
        long long v236 = *v193;
        *(void *)(v192 + 16) = *((void *)v193 + 2);
        *(_OWORD *)uint64_t v192 = v236;
        goto LABEL_157;
      case 0x22u:
        uint64_t v97 = type metadata accessor for RequestContent(0);
        int v98 = swift_getEnumCaseMultiPayload();
        if (v98 != 3)
        {
          if (v98 == 2)
          {
            *(void *)a1 = *(void *)a2;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v98 != 1)
            {
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v97 - 8) + 64));
              goto LABEL_140;
            }
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            uint64_t v99 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
            uint64_t v100 = a1 + v99;
            uint64_t v101 = a2 + v99;
            uint64_t v102 = sub_253B059D0();
            uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16);
            swift_bridgeObjectRetain();
            v103(v100, v101, v102);
          }
LABEL_139:
          swift_storeEnumTagMultiPayload();
LABEL_140:
          uint64_t v286 = type metadata accessor for ExternalAgentRequest(0);
          uint64_t v287 = *(int *)(v286 + 20);
          uint64_t v288 = (void *)(a1 + v287);
          uint64_t v289 = (const void *)(a2 + v287);
          uint64_t v290 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v289, 1, v290))
          {
            uint64_t v291 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(v288, v289, *(void *)(*(void *)(v291 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(*(void *)(v290 - 8) + 16))(v288, v289, v290);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v288, 0, 1, v290);
          }
          uint64_t v292 = *(int *)(v286 + 24);
          uint64_t v192 = a1 + v292;
          uint64_t v193 = (long long *)(a2 + v292);
          if (!*((void *)v193 + 1))
          {
            long long v293 = *v193;
            *(void *)(v192 + 16) = *((void *)v193 + 2);
            *(_OWORD *)uint64_t v192 = v293;
            goto LABEL_157;
          }
          goto LABEL_144;
        }
        uint64_t v242 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a2, 1, v242))
        {
          uint64_t v243 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v243 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 16))(a1, a2, v242);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(a1, 0, 1, v242);
        }
        uint64_t v262 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 16))(a1 + v262[5], a2 + v262[5], v242);
        uint64_t v263 = v262[6];
        uint64_t v264 = (void *)(a1 + v263);
        uint64_t v265 = (const void *)(a2 + v263);
        uint64_t v266 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v267 = sub_253B09120();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v267 - 8) + 16))(v264, v265, v267);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v264, v265, *(void *)(*(void *)(v266 - 8) + 64));
        }
        uint64_t v268 = v262[7];
        uint64_t v269 = a1 + v268;
        uint64_t v270 = a2 + v268;
        uint64_t v271 = sub_253B059D0();
        uint64_t v272 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v271 - 8) + 16);
        v272(v269, v270, v271);
        uint64_t v273 = v262[8];
        uint64_t v274 = (void *)(a1 + v273);
        uint64_t v275 = (void *)(a2 + v273);
        uint64_t v276 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v277 = swift_getEnumCaseMultiPayload();
        if (v277 == 1)
        {
          *uint64_t v274 = *v275;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v277)
          {
            memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
            goto LABEL_139;
          }
          *uint64_t v274 = *v275;
          v274[1] = v275[1];
          uint64_t v278 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v308 = (char *)v274 + v278;
          uint64_t v279 = (char *)v275 + v278;
          swift_bridgeObjectRetain();
          v272((uint64_t)v308, (uint64_t)v279, v271);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_139;
      case 0x23u:
        uint64_t v104 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(a1, a2, v104);
        uint64_t v105 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v106 = *(int *)(v105 + 20);
        uint64_t v107 = a1 + v106;
        uint64_t v108 = a2 + v106;
        uint64_t v109 = sub_253B06850();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v107, v108, v109);
        *(void *)(a1 + *(int *)(v105 + 24)) = *(void *)(a2 + *(int *)(v105 + 24));
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x25u:
        uint64_t v110 = sub_253B08B30();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 16))(a1, a2, v110);
        uint64_t v111 = type metadata accessor for ToolResolution(0);
        uint64_t v112 = *(int *)(v111 + 20);
        uint64_t v113 = a1 + v112;
        uint64_t v114 = a2 + v112;
        uint64_t v115 = sub_253B059D0();
        uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16);
        v116(v113, v114, v115);
        v116(a1 + *(int *)(v111 + 24), a2 + *(int *)(v111 + 24), v115);
        goto LABEL_157;
      case 0x26u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v117 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v118 = v117[5];
        uint64_t v119 = (void *)(a1 + v118);
        uint64_t v120 = (const void *)(a2 + v118);
        uint64_t v121 = sub_253B055C0();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v120, 1, v121))
        {
          uint64_t v122 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v119, v120, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v121 - 8) + 16))(v119, v120, v121);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v119, 0, 1, v121);
        }
        *(unsigned char *)(a1 + v117[6]) = *(unsigned char *)(a2 + v117[6]);
        uint64_t v194 = v117[7];
        uint64_t v195 = a1 + v194;
        uint64_t v196 = a2 + v194;
        uint64_t v197 = sub_253B059D0();
        uint64_t v198 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 16);
        v198(v195, v196, v197);
        uint64_t v199 = v117[8];
        uint64_t v200 = (void *)(a1 + v199);
        uint64_t v201 = (const void *)(a2 + v199);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v201, 1, v197))
        {
          uint64_t v202 = sub_253462A5C(&qword_269CDB460);
          memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
        }
        else
        {
          v198((uint64_t)v200, (uint64_t)v201, v197);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v200, 0, 1, v197);
        }
        goto LABEL_157;
      case 0x27u:
        uint64_t v123 = sub_253B055C0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 16))(a1, a2, v123);
        uint64_t v124 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *(unsigned char *)(a1 + v124[5]) = *(unsigned char *)(a2 + v124[5]);
        uint64_t v125 = v124[6];
        uint64_t v126 = a1 + v125;
        uint64_t v127 = a2 + v125;
        uint64_t v128 = sub_253B059D0();
        uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 16);
        v129(v126, v127, v128);
        uint64_t v130 = v124[7];
        int v131 = (void *)(a1 + v130);
        uint64_t v132 = (const void *)(a2 + v130);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v132, 1, v128))
        {
          uint64_t v133 = sub_253462A5C(&qword_269CDB460);
          memcpy(v131, v132, *(void *)(*(void *)(v133 - 8) + 64));
        }
        else
        {
          v129((uint64_t)v131, (uint64_t)v132, v128);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v131, 0, 1, v128);
        }
        goto LABEL_157;
      case 0x28u:
        uint64_t v134 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 16))(a1, a2, v134);
        uint64_t v135 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v136 = *(int *)(v135 + 20);
        uint64_t v137 = a1 + v136;
        uint64_t v138 = a2 + v136;
        uint64_t v139 = sub_253B09150();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 16))(v137, v138, v139);
        uint64_t v140 = *(int *)(v135 + 24);
        uint64_t v141 = a1 + v140;
        uint64_t v142 = a2 + v140;
        uint64_t v143 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 16))(v141, v142, v143);
        goto LABEL_157;
      case 0x29u:
        uint64_t v144 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16))(a1, a2, v144);
        uint64_t v145 = type metadata accessor for TypeConversionResult(0);
        uint64_t v146 = *(int *)(v145 + 20);
        uint64_t v147 = a1 + v146;
        uint64_t v148 = a2 + v146;
        uint64_t v149 = sub_253B059D0();
        uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 16);
        v150(v147, v148, v149);
        v150(a1 + *(int *)(v145 + 24), a2 + *(int *)(v145 + 24), v149);
        goto LABEL_157;
      case 0x2Au:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v152 = DecorationResult[7];
        uint64_t v153 = (void *)(a1 + v152);
        uint64_t v154 = (const void *)(a2 + v152);
        uint64_t v155 = sub_253B08270();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v154, 1, v155))
        {
          uint64_t v156 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v153, v154, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v155 - 8) + 16))(v153, v154, v155);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v153, 0, 1, v155);
        }
        *(void *)(a1 + DecorationResult[8]) = *(void *)(a2 + DecorationResult[8]);
        *(void *)(a1 + DecorationResult[9]) = *(void *)(a2 + DecorationResult[9]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      case 0x2Cu:
        uint64_t v157 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 16))(a1, a2, v157);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        uint64_t v159 = *(int *)(DecorationPrePlannerResult + 20);
        uint64_t v160 = (void *)(a1 + v159);
        uint64_t v161 = (void *)(a2 + v159);
        *uint64_t v160 = *v161;
        v160[1] = v161[1];
        uint64_t v162 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v163 = a1 + v162;
        uint64_t v164 = (uint64_t *)(a2 + v162);
        uint64_t v165 = *v164;
        LOBYTE(v164) = *((unsigned char *)v164 + 8);
        *(void *)uint64_t v163 = v165;
        *(unsigned char *)(v163 + 8) = (_BYTE)v164;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_157;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

void *initializeWithTake for Session.Event.Payload(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = sub_253B05D70();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = *(int *)(type metadata accessor for SessionStart(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_253B05CB0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = sub_253462A5C(&qword_26B248CD0);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
      }
      goto LABEL_125;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v12 = type metadata accessor for TextQuery(0);
      uint64_t v13 = *(int *)(v12 + 24);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      *(_OWORD *)((char *)a1 + *(int *)(v12 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v12 + 28));
      goto LABEL_125;
    case 3u:
      uint64_t v93 = type metadata accessor for RequestContent(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v201 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v201))
        {
          uint64_t v202 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v202 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v201 - 8) + 32))(a1, a2, v201);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v201);
        }
        uint64_t v221 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32))((char *)a1 + v221[5], (char *)a2 + v221[5], v201);
        uint64_t v222 = v221[6];
        uint64_t v223 = (char *)a1 + v222;
        uint64_t v224 = (char *)a2 + v222;
        uint64_t v225 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v226 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 32))(v223, v224, v226);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v223, v224, *(void *)(*(void *)(v225 - 8) + 64));
        }
        uint64_t v227 = v221[7];
        uint64_t v228 = (char *)a1 + v227;
        uint64_t v229 = (char *)a2 + v227;
        uint64_t v230 = sub_253B059D0();
        int v231 = *(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 32);
        v231(v228, v229, v230);
        uint64_t v232 = v221[8];
        uint64_t v233 = (_OWORD *)((char *)a1 + v232);
        uint64_t v234 = (_OWORD *)((char *)a2 + v232);
        uint64_t v235 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v233, v234, *(void *)(*(void *)(v235 - 8) + 64));
        }
        else
        {
          _OWORD *v233 = *v234;
          uint64_t v246 = type metadata accessor for RequestContent.TextContent(0);
          v231((char *)v233 + *(int *)(v246 + 20), (char *)v234 + *(int *)(v246 + 20), v230);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v93 - 8) + 64));
          goto LABEL_115;
        }
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v95 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v96 = (char *)a1 + v95;
        uint64_t v97 = (char *)a2 + v95;
        uint64_t v98 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v96, v97, v98);
      }
      swift_storeEnumTagMultiPayload();
LABEL_115:
      uint64_t v247 = (int *)type metadata accessor for Request(0);
      *((unsigned char *)a1 + v247[5]) = *((unsigned char *)a2 + v247[5]);
      uint64_t v248 = v247[6];
      uint64_t v249 = (char *)a1 + v248;
      uint64_t v250 = (char *)a2 + v248;
      uint64_t v251 = type metadata accessor for RequestPrescribedPlan(0);
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v250, 1, v251))
      {
        uint64_t v252 = sub_253462A5C(&qword_269CDBB20);
        memcpy(v249, v250, *(void *)(*(void *)(v252 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 6)
        {
          uint64_t v253 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 32))(v249, v250, v253);
          uint64_t v254 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
          uint64_t v255 = &v249[v254];
          uint64_t v256 = &v250[v254];
          *(void *)uint64_t v255 = *(void *)v256;
          v255[8] = v256[8];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v249, v250, *(void *)(*(void *)(v251 - 8) + 64));
        }
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v249, 0, 1, v251);
      }
      uint64_t v257 = v247[7];
      uint64_t v258 = (char *)a1 + v257;
      int v259 = (char *)a2 + v257;
      uint64_t v260 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v259, 1, v260))
      {
        uint64_t v261 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v258, v259, *(void *)(*(void *)(v261 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 32))(v258, v259, v260);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v258, 0, 1, v260);
      }
      uint64_t v262 = v247[8];
      uint64_t v263 = (char *)a1 + v262;
      uint64_t v264 = (char *)a2 + v262;
      *(_OWORD *)uint64_t v263 = *(_OWORD *)v264;
      *((void *)v263 + 2) = *((void *)v264 + 2);
      goto LABEL_125;
    case 5u:
      uint64_t v17 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
      uint64_t v18 = (int *)type metadata accessor for Action(0);
      *(_OWORD *)((char *)a1 + v18[5]) = *(_OWORD *)((char *)a2 + v18[5]);
      *((unsigned char *)a1 + v18[6]) = *((unsigned char *)a2 + v18[6]);
      *(void *)((char *)a1 + v18[7]) = *(void *)((char *)a2 + v18[7]);
      *(_OWORD *)((char *)a1 + v18[8]) = *(_OWORD *)((char *)a2 + v18[8]);
      uint64_t v19 = v18[9];
      uint64_t v20 = (_OWORD *)((char *)a1 + v19);
      uint64_t v21 = (_OWORD *)((char *)a2 + v19);
      long long v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      goto LABEL_125;
    case 6u:
      uint64_t v23 = sub_253B059D0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v23))
      {
        uint64_t v24 = sub_253462A5C(&qword_269CDB460);
        memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v23);
      }
      uint64_t v138 = type metadata accessor for ActionCancellation(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))((char *)a1 + *(int *)(v138 + 20), (char *)a2 + *(int *)(v138 + 20), v23);
      goto LABEL_125;
    case 7u:
      uint64_t v99 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
      uint64_t v100 = (int *)type metadata accessor for ClientAction(0);
      *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
      *(void *)((char *)a1 + v100[6]) = *(void *)((char *)a2 + v100[6]);
      *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
      *(_OWORD *)((char *)a1 + v100[8]) = *(_OWORD *)((char *)a2 + v100[8]);
      *(void *)((char *)a1 + v100[9]) = *(void *)((char *)a2 + v100[9]);
      *(void *)((char *)a1 + v100[10]) = *(void *)((char *)a2 + v100[10]);
      goto LABEL_125;
    case 8u:
      uint64_t v25 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 32))(a1, a2, v25);
      uint64_t Step = type metadata accessor for QueryStep(0);
      *(void *)((char *)a1 + *(int *)(Step + 20)) = *(void *)((char *)a2 + *(int *)(Step + 20));
      goto LABEL_125;
    case 9u:
      uint64_t v27 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
      uint64_t v28 = type metadata accessor for VariableStep(0);
      *(void *)((char *)a1 + *(int *)(v28 + 20)) = *(void *)((char *)a2 + *(int *)(v28 + 20));
      goto LABEL_125;
    case 0xDu:
      type metadata accessor for SessionError();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          type metadata accessor for SessionCoordinatorError();
          swift_getEnumCaseMultiPayload();
          uint64_t v205 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v205 - 8) + 32))(a1, a2, v205);
          swift_storeEnumTagMultiPayload();
          break;
        case 2u:
          uint64_t v203 = sub_253B05940();
          if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v203)) {
            goto LABEL_93;
          }
          uint64_t v204 = type metadata accessor for PlannerError();
          goto LABEL_92;
        case 3u:
          uint64_t v203 = sub_253B05940();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v203))
          {
            uint64_t v204 = type metadata accessor for ExecutorError();
LABEL_92:
            memcpy(a1, a2, *(void *)(*(void *)(v204 - 8) + 64));
          }
          else
          {
LABEL_93:
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v203 - 8) + 32))(a1, a2, v203);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v203);
          }
          break;
        default:
          uint64_t v101 = sub_253B05940();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v101 - 8) + 32))(a1, a2, v101);
          break;
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_125;
    case 0xFu:
      uint64_t v102 = sub_253B059F0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v102 - 8) + 32))(a1, a2, v102);
      goto LABEL_125;
    case 0x10u:
      uint64_t v103 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v103))
      {
        uint64_t v104 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v104 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v103 - 8) + 32))(a1, a2, v103);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v103);
      }
      uint64_t v161 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 32))((char *)a1 + v161[5], (char *)a2 + v161[5], v103);
      uint64_t v162 = v161[6];
      uint64_t v163 = (char *)a1 + v162;
      uint64_t v164 = (char *)a2 + v162;
      uint64_t v165 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v166 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 32))(v163, v164, v166);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v163, v164, *(void *)(*(void *)(v165 - 8) + 64));
      }
      uint64_t v167 = v161[7];
      uint64_t v168 = (char *)a1 + v167;
      uint64_t v169 = (char *)a2 + v167;
      uint64_t v170 = sub_253B059D0();
      uint64_t v171 = *(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 32);
      v171(v168, v169, v170);
      uint64_t v172 = v161[8];
      uint64_t v173 = (_OWORD *)((char *)a1 + v172);
      uint64_t v174 = (_OWORD *)((char *)a2 + v172);
      uint64_t v175 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v173, v174, *(void *)(*(void *)(v175 - 8) + 64));
      }
      else
      {
        *uint64_t v173 = *v174;
        uint64_t v189 = type metadata accessor for RequestContent.TextContent(0);
        v171((char *)v173 + *(int *)(v189 + 20), (char *)v174 + *(int *)(v189 + 20), v170);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_125;
    case 0x11u:
      uint64_t v29 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v29))
      {
        uint64_t v30 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v29);
      }
      uint64_t v139 = (int *)type metadata accessor for ActionStepResult(0);
      *(_OWORD *)((char *)a1 + v139[5]) = *(_OWORD *)((char *)a2 + v139[5]);
      uint64_t v140 = v139[6];
      uint64_t v141 = (char *)a1 + v140;
      uint64_t v142 = (char *)a2 + v140;
      uint64_t v143 = sub_253B05AB0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 32))(v141, v142, v143);
      uint64_t v144 = *(int *)(type metadata accessor for ActionResult(0) + 20);
      uint64_t v145 = &v141[v144];
      uint64_t v146 = &v142[v144];
      uint64_t v147 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v146, 1, v147))
      {
        uint64_t v148 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v145, v146, *(void *)(*(void *)(v148 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v147 - 8) + 32))(v145, v146, v147);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v145, 0, 1, v147);
      }
      *(_OWORD *)((char *)a1 + v139[7]) = *(_OWORD *)((char *)a2 + v139[7]);
      goto LABEL_125;
    case 0x12u:
      *a1 = *a2;
      uint64_t StepResults = type metadata accessor for QueryStepResults(0);
      uint64_t v32 = *(int *)(StepResults + 20);
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      uint64_t v36 = *(int *)(StepResults + 24);
      uint64_t v37 = (char *)a1 + v36;
      uint64_t v38 = (char *)a2 + v36;
      uint64_t v39 = sub_253B055C0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
      goto LABEL_125;
    case 0x13u:
      uint64_t v105 = sub_253B05CF0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v105 - 8) + 32))(a1, a2, v105);
      goto LABEL_125;
    case 0x14u:
      uint64_t v106 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v106 - 8) + 32))(a1, a2, v106);
      uint64_t v107 = (int *)type metadata accessor for ActionResolverRequest(0);
      *(void *)((char *)a1 + v107[5]) = *(void *)((char *)a2 + v107[5]);
      *(void *)((char *)a1 + v107[6]) = *(void *)((char *)a2 + v107[6]);
      *(void *)((char *)a1 + v107[7]) = *(void *)((char *)a2 + v107[7]);
      *((unsigned char *)a1 + v107[8]) = *((unsigned char *)a2 + v107[8]);
      *((unsigned char *)a1 + v107[9]) = *((unsigned char *)a2 + v107[9]);
      *((unsigned char *)a1 + v107[10]) = *((unsigned char *)a2 + v107[10]);
      uint64_t v108 = v107[11];
      uint64_t v109 = (_OWORD *)((char *)a1 + v108);
      uint64_t v110 = (_OWORD *)((char *)a2 + v108);
      long long v111 = v110[1];
      *uint64_t v109 = *v110;
      v109[1] = v111;
      goto LABEL_125;
    case 0x1Eu:
      uint64_t v112 = sub_253B06720();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v112 - 8) + 32))(a1, a2, v112);
      goto LABEL_125;
    case 0x1Fu:
      uint64_t v113 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v113))
      {
        uint64_t v114 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v113 - 8) + 32))(a1, a2, v113);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v113);
      }
      uint64_t v176 = (int *)type metadata accessor for StatementResult(0);
      uint64_t v177 = v176[5];
      uint64_t v178 = (char *)a1 + v177;
      uint64_t v179 = (char *)a2 + v177;
      uint64_t v180 = sub_253B06850();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
      uint64_t v181 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
      uint64_t v182 = &v178[v181];
      uint64_t v183 = &v179[v181];
      uint64_t v184 = sub_253B06820();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v183, 1, v184))
      {
        uint64_t v185 = sub_253462A5C(&qword_269CDBB28);
        memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32))(v182, v183, v184);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v182, 0, 1, v184);
      }
      uint64_t v190 = v176[6];
      uint64_t v191 = (char *)a1 + v190;
      uint64_t v192 = (char *)a2 + v190;
      uint64_t v193 = sub_253B059D0();
      uint64_t v194 = *(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32);
      v194(v191, v192, v193);
      v194((char *)a1 + v176[7], (char *)a2 + v176[7], v193);
      v194((char *)a1 + v176[8], (char *)a2 + v176[8], v193);
      uint64_t v195 = v176[9];
      uint64_t v196 = (_OWORD *)((char *)a1 + v195);
      uint64_t v197 = (_OWORD *)((char *)a2 + v195);
      long long v198 = v197[1];
      *uint64_t v196 = *v197;
      v196[1] = v198;
      goto LABEL_125;
    case 0x20u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v115 = type metadata accessor for ExternalAgentTextQuery(0);
      uint64_t v116 = *(int *)(v115 + 20);
      uint64_t v117 = (char *)a1 + v116;
      uint64_t v118 = (char *)a2 + v116;
      uint64_t v119 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v118, 1, v119))
      {
        uint64_t v120 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v117, v118, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32))(v117, v118, v119);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v117, 0, 1, v119);
      }
      uint64_t v186 = *(int *)(v115 + 24);
      uint64_t v187 = (char *)a1 + v186;
      uint64_t v188 = (char *)a2 + v186;
      *(_OWORD *)uint64_t v187 = *(_OWORD *)v188;
      *((void *)v187 + 2) = *((void *)v188 + 2);
      goto LABEL_125;
    case 0x21u:
      *a1 = *a2;
      uint64_t v40 = type metadata accessor for ExternalAgentSpeechQuery(0);
      uint64_t v41 = *(int *)(v40 + 20);
      uint64_t v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      uint64_t v44 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v43, 1, v44))
      {
        uint64_t v45 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v42, 0, 1, v44);
      }
      uint64_t v149 = *(int *)(v40 + 24);
      uint64_t v150 = (char *)a1 + v149;
      uint64_t v151 = (char *)a2 + v149;
      *(_OWORD *)uint64_t v150 = *(_OWORD *)v151;
      *((void *)v150 + 2) = *((void *)v151 + 2);
      goto LABEL_125;
    case 0x22u:
      uint64_t v46 = type metadata accessor for RequestContent(0);
      int v47 = swift_getEnumCaseMultiPayload();
      if (v47 == 3)
      {
        uint64_t v199 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v199))
        {
          uint64_t v200 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v200 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v199 - 8) + 32))(a1, a2, v199);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v199);
        }
        uint64_t v206 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 32))((char *)a1 + v206[5], (char *)a2 + v206[5], v199);
        uint64_t v207 = v206[6];
        uint64_t v208 = (char *)a1 + v207;
        uint64_t v209 = (char *)a2 + v207;
        uint64_t v210 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v211 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 32))(v208, v209, v211);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v208, v209, *(void *)(*(void *)(v210 - 8) + 64));
        }
        uint64_t v212 = v206[7];
        uint64_t v213 = (char *)a1 + v212;
        long long v214 = (char *)a2 + v212;
        uint64_t v215 = sub_253B059D0();
        uint64_t v216 = *(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32);
        v216(v213, v214, v215);
        uint64_t v217 = v206[8];
        uint64_t v218 = (_OWORD *)((char *)a1 + v217);
        uint64_t v219 = (_OWORD *)((char *)a2 + v217);
        uint64_t v220 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
        }
        else
        {
          *uint64_t v218 = *v219;
          uint64_t v236 = type metadata accessor for RequestContent.TextContent(0);
          v216((char *)v218 + *(int *)(v236 + 20), (char *)v219 + *(int *)(v236 + 20), v215);
          swift_storeEnumTagMultiPayload();
        }
      }
      else
      {
        if (v47 != 1)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v46 - 8) + 64));
          goto LABEL_109;
        }
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v48 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v49 = (char *)a1 + v48;
        uint64_t v50 = (char *)a2 + v48;
        uint64_t v51 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
      }
      swift_storeEnumTagMultiPayload();
LABEL_109:
      uint64_t v237 = type metadata accessor for ExternalAgentRequest(0);
      uint64_t v238 = *(int *)(v237 + 20);
      uint64_t v239 = (char *)a1 + v238;
      uint64_t v240 = (char *)a2 + v238;
      uint64_t v241 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v240, 1, v241))
      {
        uint64_t v242 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v239, v240, *(void *)(*(void *)(v242 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 32))(v239, v240, v241);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v239, 0, 1, v241);
      }
      uint64_t v243 = *(int *)(v237 + 24);
      uint64_t v244 = (char *)a1 + v243;
      uint64_t v245 = (char *)a2 + v243;
      *(_OWORD *)uint64_t v244 = *(_OWORD *)v245;
      *((void *)v244 + 2) = *((void *)v245 + 2);
LABEL_125:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x23u:
      uint64_t v121 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
      uint64_t v122 = type metadata accessor for ExternalAgentOutcome(0);
      uint64_t v123 = *(int *)(v122 + 20);
      uint64_t v124 = (char *)a1 + v123;
      uint64_t v125 = (char *)a2 + v123;
      uint64_t v126 = sub_253B06850();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 32))(v124, v125, v126);
      *(void *)((char *)a1 + *(int *)(v122 + 24)) = *(void *)((char *)a2 + *(int *)(v122 + 24));
      goto LABEL_125;
    case 0x25u:
      uint64_t v52 = sub_253B08B30();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 32))(a1, a2, v52);
      uint64_t v53 = type metadata accessor for ToolResolution(0);
      uint64_t v54 = *(int *)(v53 + 20);
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = (char *)a2 + v54;
      uint64_t v57 = sub_253B059D0();
      unint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
      v58(v55, v56, v57);
      v58((char *)a1 + *(int *)(v53 + 24), (char *)a2 + *(int *)(v53 + 24), v57);
      goto LABEL_125;
    case 0x26u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v59 = (int *)type metadata accessor for UndoRedoRequest(0);
      uint64_t v60 = v59[5];
      uint64_t v61 = (char *)a1 + v60;
      uint64_t v62 = (char *)a2 + v60;
      uint64_t v63 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v62, 1, v63))
      {
        uint64_t v64 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v61, v62, v63);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v61, 0, 1, v63);
      }
      *((unsigned char *)a1 + v59[6]) = *((unsigned char *)a2 + v59[6]);
      uint64_t v152 = v59[7];
      uint64_t v153 = (char *)a1 + v152;
      uint64_t v154 = (char *)a2 + v152;
      uint64_t v155 = sub_253B059D0();
      uint64_t v156 = *(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 32);
      v156(v153, v154, v155);
      uint64_t v157 = v59[8];
      uint64_t v158 = (char *)a1 + v157;
      uint64_t v159 = (char *)a2 + v157;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v159, 1, v155))
      {
        uint64_t v160 = sub_253462A5C(&qword_269CDB460);
        memcpy(v158, v159, *(void *)(*(void *)(v160 - 8) + 64));
      }
      else
      {
        v156(v158, v159, v155);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v158, 0, 1, v155);
      }
      goto LABEL_125;
    case 0x27u:
      uint64_t v65 = sub_253B055C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 32))(a1, a2, v65);
      uint64_t v66 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
      *((unsigned char *)a1 + v66[5]) = *((unsigned char *)a2 + v66[5]);
      uint64_t v67 = v66[6];
      uint64_t v68 = (char *)a1 + v67;
      uint64_t v69 = (char *)a2 + v67;
      uint64_t v70 = sub_253B059D0();
      uint64_t v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32);
      v71(v68, v69, v70);
      uint64_t v72 = v66[7];
      uint64_t v73 = (char *)a1 + v72;
      uint64_t v74 = (char *)a2 + v72;
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v74, 1, v70))
      {
        uint64_t v75 = sub_253462A5C(&qword_269CDB460);
        memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
      }
      else
      {
        v71(v73, v74, v70);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v73, 0, 1, v70);
      }
      goto LABEL_125;
    case 0x28u:
      uint64_t v76 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v76 - 8) + 32))(a1, a2, v76);
      uint64_t v77 = type metadata accessor for TypeConversionRequest(0);
      uint64_t v78 = *(int *)(v77 + 20);
      uint64_t v79 = (char *)a1 + v78;
      uint64_t v80 = (char *)a2 + v78;
      uint64_t v81 = sub_253B09150();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v79, v80, v81);
      uint64_t v82 = *(int *)(v77 + 24);
      uint64_t v83 = (char *)a1 + v82;
      uint64_t v84 = (char *)a2 + v82;
      uint64_t v85 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v83, v84, v85);
      goto LABEL_125;
    case 0x29u:
      uint64_t v86 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v86 - 8) + 32))(a1, a2, v86);
      uint64_t v87 = type metadata accessor for TypeConversionResult(0);
      uint64_t v88 = *(int *)(v87 + 20);
      uint64_t v89 = (char *)a1 + v88;
      uint64_t v90 = (char *)a2 + v88;
      uint64_t v91 = sub_253B059D0();
      uint64_t v92 = *(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32);
      v92(v89, v90, v91);
      v92((char *)a1 + *(int *)(v87 + 24), (char *)a2 + *(int *)(v87 + 24), v91);
      goto LABEL_125;
    case 0x2Au:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
      uint64_t v128 = DecorationResult[7];
      uint64_t v129 = (char *)a1 + v128;
      uint64_t v130 = (char *)a2 + v128;
      uint64_t v131 = sub_253B08270();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v130, 1, v131))
      {
        uint64_t v132 = sub_253462A5C(&qword_269CDBB30);
        memcpy(v129, v130, *(void *)(*(void *)(v132 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32))(v129, v130, v131);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v129, 0, 1, v131);
      }
      *(void *)((char *)a1 + DecorationResult[8]) = *(void *)((char *)a2 + DecorationResult[8]);
      *(void *)((char *)a1 + DecorationResult[9]) = *(void *)((char *)a2 + DecorationResult[9]);
      goto LABEL_125;
    case 0x2Cu:
      uint64_t v133 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v133 - 8) + 32))(a1, a2, v133);
      uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
      *(_OWORD *)((char *)a1 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)a2
                                                                                      + *(int *)(DecorationPrePlannerResult
                                                                                               + 20));
      uint64_t v135 = *(int *)(DecorationPrePlannerResult + 24);
      uint64_t v136 = (char *)a1 + v135;
      uint64_t v137 = (char *)a2 + v135;
      v136[8] = v137[8];
      *(void *)uint64_t v136 = *(void *)v137;
      goto LABEL_125;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

void *assignWithTake for Session.Event.Payload(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = sub_253B05D70();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = *(int *)(type metadata accessor for SessionStart(0) + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = sub_253B05CB0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
        {
          uint64_t v11 = sub_253462A5C(&qword_26B248CD0);
          memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
        }
        goto LABEL_126;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v12 = type metadata accessor for TextQuery(0);
        uint64_t v13 = *(int *)(v12 + 24);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        *(_OWORD *)((char *)a1 + *(int *)(v12 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v12 + 28));
        goto LABEL_126;
      case 3u:
        uint64_t v93 = type metadata accessor for RequestContent(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 3)
        {
          uint64_t v201 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v201))
          {
            uint64_t v202 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(a1, a2, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v201 - 8) + 32))(a1, a2, v201);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v201);
          }
          uint64_t v221 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v201 - 8) + 32))((char *)a1 + v221[5], (char *)a2 + v221[5], v201);
          uint64_t v222 = v221[6];
          uint64_t v223 = (char *)a1 + v222;
          uint64_t v224 = (char *)a2 + v222;
          uint64_t v225 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v226 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 32))(v223, v224, v226);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v223, v224, *(void *)(*(void *)(v225 - 8) + 64));
          }
          uint64_t v227 = v221[7];
          uint64_t v228 = (char *)a1 + v227;
          uint64_t v229 = (char *)a2 + v227;
          uint64_t v230 = sub_253B059D0();
          int v231 = *(void (**)(char *, char *, uint64_t))(*(void *)(v230 - 8) + 32);
          v231(v228, v229, v230);
          uint64_t v232 = v221[8];
          uint64_t v233 = (_OWORD *)((char *)a1 + v232);
          uint64_t v234 = (_OWORD *)((char *)a2 + v232);
          uint64_t v235 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v233, v234, *(void *)(*(void *)(v235 - 8) + 64));
          }
          else
          {
            _OWORD *v233 = *v234;
            uint64_t v246 = type metadata accessor for RequestContent.TextContent(0);
            v231((char *)v233 + *(int *)(v246 + 20), (char *)v234 + *(int *)(v246 + 20), v230);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (EnumCaseMultiPayload != 1)
          {
            memcpy(a1, a2, *(void *)(*(void *)(v93 - 8) + 64));
            goto LABEL_116;
          }
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v95 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v96 = (char *)a1 + v95;
          uint64_t v97 = (char *)a2 + v95;
          uint64_t v98 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 32))(v96, v97, v98);
        }
        swift_storeEnumTagMultiPayload();
LABEL_116:
        uint64_t v247 = (int *)type metadata accessor for Request(0);
        *((unsigned char *)a1 + v247[5]) = *((unsigned char *)a2 + v247[5]);
        uint64_t v248 = v247[6];
        uint64_t v249 = (char *)a1 + v248;
        uint64_t v250 = (char *)a2 + v248;
        uint64_t v251 = type metadata accessor for RequestPrescribedPlan(0);
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v250, 1, v251))
        {
          uint64_t v252 = sub_253462A5C(&qword_269CDBB20);
          memcpy(v249, v250, *(void *)(*(void *)(v252 - 8) + 64));
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v253 = sub_253B059D0();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v253 - 8) + 32))(v249, v250, v253);
            uint64_t v254 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
            uint64_t v255 = &v249[v254];
            uint64_t v256 = &v250[v254];
            *(void *)uint64_t v255 = *(void *)v256;
            v255[8] = v256[8];
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v249, v250, *(void *)(*(void *)(v251 - 8) + 64));
          }
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v249, 0, 1, v251);
        }
        uint64_t v257 = v247[7];
        uint64_t v258 = (char *)a1 + v257;
        int v259 = (char *)a2 + v257;
        uint64_t v260 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v259, 1, v260))
        {
          uint64_t v261 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v258, v259, *(void *)(*(void *)(v261 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v260 - 8) + 32))(v258, v259, v260);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v258, 0, 1, v260);
        }
        uint64_t v262 = v247[8];
        uint64_t v263 = (char *)a1 + v262;
        uint64_t v264 = (char *)a2 + v262;
        *(_OWORD *)uint64_t v263 = *(_OWORD *)v264;
        *((void *)v263 + 2) = *((void *)v264 + 2);
        goto LABEL_126;
      case 5u:
        uint64_t v17 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
        uint64_t v18 = (int *)type metadata accessor for Action(0);
        *(_OWORD *)((char *)a1 + v18[5]) = *(_OWORD *)((char *)a2 + v18[5]);
        *((unsigned char *)a1 + v18[6]) = *((unsigned char *)a2 + v18[6]);
        *(void *)((char *)a1 + v18[7]) = *(void *)((char *)a2 + v18[7]);
        *(_OWORD *)((char *)a1 + v18[8]) = *(_OWORD *)((char *)a2 + v18[8]);
        uint64_t v19 = v18[9];
        uint64_t v20 = (_OWORD *)((char *)a1 + v19);
        uint64_t v21 = (_OWORD *)((char *)a2 + v19);
        long long v22 = v21[1];
        *uint64_t v20 = *v21;
        v20[1] = v22;
        goto LABEL_126;
      case 6u:
        uint64_t v23 = sub_253B059D0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v23))
        {
          uint64_t v24 = sub_253462A5C(&qword_269CDB460);
          memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v23);
        }
        uint64_t v138 = type metadata accessor for ActionCancellation(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))((char *)a1 + *(int *)(v138 + 20), (char *)a2 + *(int *)(v138 + 20), v23);
        goto LABEL_126;
      case 7u:
        uint64_t v99 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v99 - 8) + 32))(a1, a2, v99);
        uint64_t v100 = (int *)type metadata accessor for ClientAction(0);
        *(_OWORD *)((char *)a1 + v100[5]) = *(_OWORD *)((char *)a2 + v100[5]);
        *(void *)((char *)a1 + v100[6]) = *(void *)((char *)a2 + v100[6]);
        *(_OWORD *)((char *)a1 + v100[7]) = *(_OWORD *)((char *)a2 + v100[7]);
        *(_OWORD *)((char *)a1 + v100[8]) = *(_OWORD *)((char *)a2 + v100[8]);
        *(void *)((char *)a1 + v100[9]) = *(void *)((char *)a2 + v100[9]);
        *(void *)((char *)a1 + v100[10]) = *(void *)((char *)a2 + v100[10]);
        goto LABEL_126;
      case 8u:
        uint64_t v25 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 32))(a1, a2, v25);
        uint64_t Step = type metadata accessor for QueryStep(0);
        *(void *)((char *)a1 + *(int *)(Step + 20)) = *(void *)((char *)a2 + *(int *)(Step + 20));
        goto LABEL_126;
      case 9u:
        uint64_t v27 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 32))(a1, a2, v27);
        uint64_t v28 = type metadata accessor for VariableStep(0);
        *(void *)((char *)a1 + *(int *)(v28 + 20)) = *(void *)((char *)a2 + *(int *)(v28 + 20));
        goto LABEL_126;
      case 0xDu:
        type metadata accessor for SessionError();
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            type metadata accessor for SessionCoordinatorError();
            swift_getEnumCaseMultiPayload();
            uint64_t v205 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v205 - 8) + 32))(a1, a2, v205);
            swift_storeEnumTagMultiPayload();
            break;
          case 2u:
            uint64_t v203 = sub_253B05940();
            if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v203))goto LABEL_94; {
            uint64_t v204 = type metadata accessor for PlannerError();
            }
            goto LABEL_93;
          case 3u:
            uint64_t v203 = sub_253B05940();
            if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v203))
            {
              uint64_t v204 = type metadata accessor for ExecutorError();
LABEL_93:
              memcpy(a1, a2, *(void *)(*(void *)(v204 - 8) + 64));
            }
            else
            {
LABEL_94:
              (*(void (**)(void *, void *, uint64_t))(*(void *)(v203 - 8) + 32))(a1, a2, v203);
              _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v203);
            }
            break;
          default:
            uint64_t v101 = sub_253B05940();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v101 - 8) + 32))(a1, a2, v101);
            break;
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_126;
      case 0xFu:
        uint64_t v102 = sub_253B059F0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v102 - 8) + 32))(a1, a2, v102);
        goto LABEL_126;
      case 0x10u:
        uint64_t v103 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v103))
        {
          uint64_t v104 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v104 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v103 - 8) + 32))(a1, a2, v103);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v103);
        }
        uint64_t v161 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v103 - 8) + 32))((char *)a1 + v161[5], (char *)a2 + v161[5], v103);
        uint64_t v162 = v161[6];
        uint64_t v163 = (char *)a1 + v162;
        uint64_t v164 = (char *)a2 + v162;
        uint64_t v165 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v166 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v166 - 8) + 32))(v163, v164, v166);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v163, v164, *(void *)(*(void *)(v165 - 8) + 64));
        }
        uint64_t v167 = v161[7];
        uint64_t v168 = (char *)a1 + v167;
        uint64_t v169 = (char *)a2 + v167;
        uint64_t v170 = sub_253B059D0();
        uint64_t v171 = *(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 32);
        v171(v168, v169, v170);
        uint64_t v172 = v161[8];
        uint64_t v173 = (_OWORD *)((char *)a1 + v172);
        uint64_t v174 = (_OWORD *)((char *)a2 + v172);
        uint64_t v175 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v173, v174, *(void *)(*(void *)(v175 - 8) + 64));
        }
        else
        {
          *uint64_t v173 = *v174;
          uint64_t v189 = type metadata accessor for RequestContent.TextContent(0);
          v171((char *)v173 + *(int *)(v189 + 20), (char *)v174 + *(int *)(v189 + 20), v170);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_126;
      case 0x11u:
        uint64_t v29 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v29))
        {
          uint64_t v30 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 32))(a1, a2, v29);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v29);
        }
        uint64_t v139 = (int *)type metadata accessor for ActionStepResult(0);
        *(_OWORD *)((char *)a1 + v139[5]) = *(_OWORD *)((char *)a2 + v139[5]);
        uint64_t v140 = v139[6];
        uint64_t v141 = (char *)a1 + v140;
        uint64_t v142 = (char *)a2 + v140;
        uint64_t v143 = sub_253B05AB0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v143 - 8) + 32))(v141, v142, v143);
        uint64_t v144 = *(int *)(type metadata accessor for ActionResult(0) + 20);
        uint64_t v145 = &v141[v144];
        uint64_t v146 = &v142[v144];
        uint64_t v147 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v146, 1, v147))
        {
          uint64_t v148 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v145, v146, *(void *)(*(void *)(v148 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v147 - 8) + 32))(v145, v146, v147);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v145, 0, 1, v147);
        }
        *(_OWORD *)((char *)a1 + v139[7]) = *(_OWORD *)((char *)a2 + v139[7]);
        goto LABEL_126;
      case 0x12u:
        *a1 = *a2;
        uint64_t StepResults = type metadata accessor for QueryStepResults(0);
        uint64_t v32 = *(int *)(StepResults + 20);
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
        uint64_t v36 = *(int *)(StepResults + 24);
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = sub_253B055C0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
        goto LABEL_126;
      case 0x13u:
        uint64_t v105 = sub_253B05CF0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v105 - 8) + 32))(a1, a2, v105);
        goto LABEL_126;
      case 0x14u:
        uint64_t v106 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v106 - 8) + 32))(a1, a2, v106);
        uint64_t v107 = (int *)type metadata accessor for ActionResolverRequest(0);
        *(void *)((char *)a1 + v107[5]) = *(void *)((char *)a2 + v107[5]);
        *(void *)((char *)a1 + v107[6]) = *(void *)((char *)a2 + v107[6]);
        *(void *)((char *)a1 + v107[7]) = *(void *)((char *)a2 + v107[7]);
        *((unsigned char *)a1 + v107[8]) = *((unsigned char *)a2 + v107[8]);
        *((unsigned char *)a1 + v107[9]) = *((unsigned char *)a2 + v107[9]);
        *((unsigned char *)a1 + v107[10]) = *((unsigned char *)a2 + v107[10]);
        uint64_t v108 = v107[11];
        uint64_t v109 = (_OWORD *)((char *)a1 + v108);
        uint64_t v110 = (_OWORD *)((char *)a2 + v108);
        long long v111 = v110[1];
        *uint64_t v109 = *v110;
        v109[1] = v111;
        goto LABEL_126;
      case 0x1Eu:
        uint64_t v112 = sub_253B06720();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v112 - 8) + 32))(a1, a2, v112);
        goto LABEL_126;
      case 0x1Fu:
        uint64_t v113 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v113))
        {
          uint64_t v114 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v113 - 8) + 32))(a1, a2, v113);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v113);
        }
        uint64_t v176 = (int *)type metadata accessor for StatementResult(0);
        uint64_t v177 = v176[5];
        uint64_t v178 = (char *)a1 + v177;
        uint64_t v179 = (char *)a2 + v177;
        uint64_t v180 = sub_253B06850();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v180 - 8) + 32))(v178, v179, v180);
        uint64_t v181 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
        uint64_t v182 = &v178[v181];
        uint64_t v183 = &v179[v181];
        uint64_t v184 = sub_253B06820();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v183, 1, v184))
        {
          uint64_t v185 = sub_253462A5C(&qword_269CDBB28);
          memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v184 - 8) + 32))(v182, v183, v184);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v182, 0, 1, v184);
        }
        uint64_t v190 = v176[6];
        uint64_t v191 = (char *)a1 + v190;
        uint64_t v192 = (char *)a2 + v190;
        uint64_t v193 = sub_253B059D0();
        uint64_t v194 = *(void (**)(char *, char *, uint64_t))(*(void *)(v193 - 8) + 32);
        v194(v191, v192, v193);
        v194((char *)a1 + v176[7], (char *)a2 + v176[7], v193);
        v194((char *)a1 + v176[8], (char *)a2 + v176[8], v193);
        uint64_t v195 = v176[9];
        uint64_t v196 = (_OWORD *)((char *)a1 + v195);
        uint64_t v197 = (_OWORD *)((char *)a2 + v195);
        long long v198 = v197[1];
        *uint64_t v196 = *v197;
        v196[1] = v198;
        goto LABEL_126;
      case 0x20u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v115 = type metadata accessor for ExternalAgentTextQuery(0);
        uint64_t v116 = *(int *)(v115 + 20);
        uint64_t v117 = (char *)a1 + v116;
        uint64_t v118 = (char *)a2 + v116;
        uint64_t v119 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v118, 1, v119))
        {
          uint64_t v120 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v117, v118, *(void *)(*(void *)(v120 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 32))(v117, v118, v119);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v117, 0, 1, v119);
        }
        uint64_t v186 = *(int *)(v115 + 24);
        uint64_t v187 = (char *)a1 + v186;
        uint64_t v188 = (char *)a2 + v186;
        *(_OWORD *)uint64_t v187 = *(_OWORD *)v188;
        *((void *)v187 + 2) = *((void *)v188 + 2);
        goto LABEL_126;
      case 0x21u:
        *a1 = *a2;
        uint64_t v40 = type metadata accessor for ExternalAgentSpeechQuery(0);
        uint64_t v41 = *(int *)(v40 + 20);
        uint64_t v42 = (char *)a1 + v41;
        uint64_t v43 = (char *)a2 + v41;
        uint64_t v44 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v43, 1, v44))
        {
          uint64_t v45 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v42, 0, 1, v44);
        }
        uint64_t v149 = *(int *)(v40 + 24);
        uint64_t v150 = (char *)a1 + v149;
        uint64_t v151 = (char *)a2 + v149;
        *(_OWORD *)uint64_t v150 = *(_OWORD *)v151;
        *((void *)v150 + 2) = *((void *)v151 + 2);
        goto LABEL_126;
      case 0x22u:
        uint64_t v46 = type metadata accessor for RequestContent(0);
        int v47 = swift_getEnumCaseMultiPayload();
        if (v47 == 3)
        {
          uint64_t v199 = sub_253B055C0();
          if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v199))
          {
            uint64_t v200 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
            memcpy(a1, a2, *(void *)(*(void *)(v200 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v199 - 8) + 32))(a1, a2, v199);
            _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v199);
          }
          uint64_t v206 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v199 - 8) + 32))((char *)a1 + v206[5], (char *)a2 + v206[5], v199);
          uint64_t v207 = v206[6];
          uint64_t v208 = (char *)a1 + v207;
          uint64_t v209 = (char *)a2 + v207;
          uint64_t v210 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v211 = sub_253B09120();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v211 - 8) + 32))(v208, v209, v211);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v208, v209, *(void *)(*(void *)(v210 - 8) + 64));
          }
          uint64_t v212 = v206[7];
          uint64_t v213 = (char *)a1 + v212;
          long long v214 = (char *)a2 + v212;
          uint64_t v215 = sub_253B059D0();
          uint64_t v216 = *(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 32);
          v216(v213, v214, v215);
          uint64_t v217 = v206[8];
          uint64_t v218 = (_OWORD *)((char *)a1 + v217);
          uint64_t v219 = (_OWORD *)((char *)a2 + v217);
          uint64_t v220 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
          }
          else
          {
            *uint64_t v218 = *v219;
            uint64_t v236 = type metadata accessor for RequestContent.TextContent(0);
            v216((char *)v218 + *(int *)(v236 + 20), (char *)v219 + *(int *)(v236 + 20), v215);
            swift_storeEnumTagMultiPayload();
          }
        }
        else
        {
          if (v47 != 1)
          {
            memcpy(a1, a2, *(void *)(*(void *)(v46 - 8) + 64));
            goto LABEL_110;
          }
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v48 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v49 = (char *)a1 + v48;
          uint64_t v50 = (char *)a2 + v48;
          uint64_t v51 = sub_253B059D0();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
        }
        swift_storeEnumTagMultiPayload();
LABEL_110:
        uint64_t v237 = type metadata accessor for ExternalAgentRequest(0);
        uint64_t v238 = *(int *)(v237 + 20);
        uint64_t v239 = (char *)a1 + v238;
        uint64_t v240 = (char *)a2 + v238;
        uint64_t v241 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v240, 1, v241))
        {
          uint64_t v242 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v239, v240, *(void *)(*(void *)(v242 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v241 - 8) + 32))(v239, v240, v241);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v239, 0, 1, v241);
        }
        uint64_t v243 = *(int *)(v237 + 24);
        uint64_t v244 = (char *)a1 + v243;
        uint64_t v245 = (char *)a2 + v243;
        *(_OWORD *)uint64_t v244 = *(_OWORD *)v245;
        *((void *)v244 + 2) = *((void *)v245 + 2);
LABEL_126:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x23u:
        uint64_t v121 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v121 - 8) + 32))(a1, a2, v121);
        uint64_t v122 = type metadata accessor for ExternalAgentOutcome(0);
        uint64_t v123 = *(int *)(v122 + 20);
        uint64_t v124 = (char *)a1 + v123;
        uint64_t v125 = (char *)a2 + v123;
        uint64_t v126 = sub_253B06850();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v126 - 8) + 32))(v124, v125, v126);
        *(void *)((char *)a1 + *(int *)(v122 + 24)) = *(void *)((char *)a2 + *(int *)(v122 + 24));
        goto LABEL_126;
      case 0x25u:
        uint64_t v52 = sub_253B08B30();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v52 - 8) + 32))(a1, a2, v52);
        uint64_t v53 = type metadata accessor for ToolResolution(0);
        uint64_t v54 = *(int *)(v53 + 20);
        uint64_t v55 = (char *)a1 + v54;
        uint64_t v56 = (char *)a2 + v54;
        uint64_t v57 = sub_253B059D0();
        unint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
        v58(v55, v56, v57);
        v58((char *)a1 + *(int *)(v53 + 24), (char *)a2 + *(int *)(v53 + 24), v57);
        goto LABEL_126;
      case 0x26u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v59 = (int *)type metadata accessor for UndoRedoRequest(0);
        uint64_t v60 = v59[5];
        uint64_t v61 = (char *)a1 + v60;
        uint64_t v62 = (char *)a2 + v60;
        uint64_t v63 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v62, 1, v63))
        {
          uint64_t v64 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(v61, v62, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v61, v62, v63);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v61, 0, 1, v63);
        }
        *((unsigned char *)a1 + v59[6]) = *((unsigned char *)a2 + v59[6]);
        uint64_t v152 = v59[7];
        uint64_t v153 = (char *)a1 + v152;
        uint64_t v154 = (char *)a2 + v152;
        uint64_t v155 = sub_253B059D0();
        uint64_t v156 = *(void (**)(char *, char *, uint64_t))(*(void *)(v155 - 8) + 32);
        v156(v153, v154, v155);
        uint64_t v157 = v59[8];
        uint64_t v158 = (char *)a1 + v157;
        uint64_t v159 = (char *)a2 + v157;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v159, 1, v155))
        {
          uint64_t v160 = sub_253462A5C(&qword_269CDB460);
          memcpy(v158, v159, *(void *)(*(void *)(v160 - 8) + 64));
        }
        else
        {
          v156(v158, v159, v155);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v158, 0, 1, v155);
        }
        goto LABEL_126;
      case 0x27u:
        uint64_t v65 = sub_253B055C0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v65 - 8) + 32))(a1, a2, v65);
        uint64_t v66 = (int *)type metadata accessor for ClientUndoRedoRequest(0);
        *((unsigned char *)a1 + v66[5]) = *((unsigned char *)a2 + v66[5]);
        uint64_t v67 = v66[6];
        uint64_t v68 = (char *)a1 + v67;
        uint64_t v69 = (char *)a2 + v67;
        uint64_t v70 = sub_253B059D0();
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 32);
        v71(v68, v69, v70);
        uint64_t v72 = v66[7];
        uint64_t v73 = (char *)a1 + v72;
        uint64_t v74 = (char *)a2 + v72;
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v74, 1, v70))
        {
          uint64_t v75 = sub_253462A5C(&qword_269CDB460);
          memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          v71(v73, v74, v70);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v73, 0, 1, v70);
        }
        goto LABEL_126;
      case 0x28u:
        uint64_t v76 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v76 - 8) + 32))(a1, a2, v76);
        uint64_t v77 = type metadata accessor for TypeConversionRequest(0);
        uint64_t v78 = *(int *)(v77 + 20);
        uint64_t v79 = (char *)a1 + v78;
        uint64_t v80 = (char *)a2 + v78;
        uint64_t v81 = sub_253B09150();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 32))(v79, v80, v81);
        uint64_t v82 = *(int *)(v77 + 24);
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v83, v84, v85);
        goto LABEL_126;
      case 0x29u:
        uint64_t v86 = sub_253B09120();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v86 - 8) + 32))(a1, a2, v86);
        uint64_t v87 = type metadata accessor for TypeConversionResult(0);
        uint64_t v88 = *(int *)(v87 + 20);
        uint64_t v89 = (char *)a1 + v88;
        uint64_t v90 = (char *)a2 + v88;
        uint64_t v91 = sub_253B059D0();
        uint64_t v92 = *(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32);
        v92(v89, v90, v91);
        v92((char *)a1 + *(int *)(v87 + 24), (char *)a2 + *(int *)(v87 + 24), v91);
        goto LABEL_126;
      case 0x2Au:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        uint64_t DecorationResult = (int *)type metadata accessor for QueryDecorationResult(0);
        uint64_t v128 = DecorationResult[7];
        uint64_t v129 = (char *)a1 + v128;
        uint64_t v130 = (char *)a2 + v128;
        uint64_t v131 = sub_253B08270();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v130, 1, v131))
        {
          uint64_t v132 = sub_253462A5C(&qword_269CDBB30);
          memcpy(v129, v130, *(void *)(*(void *)(v132 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32))(v129, v130, v131);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v129, 0, 1, v131);
        }
        *(void *)((char *)a1 + DecorationResult[8]) = *(void *)((char *)a2 + DecorationResult[8]);
        *(void *)((char *)a1 + DecorationResult[9]) = *(void *)((char *)a2 + DecorationResult[9]);
        goto LABEL_126;
      case 0x2Cu:
        uint64_t v133 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v133 - 8) + 32))(a1, a2, v133);
        uint64_t DecorationPrePlannerResult = type metadata accessor for QueryDecorationPrePlannerResult(0);
        *(_OWORD *)((char *)a1 + *(int *)(DecorationPrePlannerResult + 20)) = *(_OWORD *)((char *)a2
                                                                                        + *(int *)(DecorationPrePlannerResult
                                                                                                 + 20));
        uint64_t v135 = *(int *)(DecorationPrePlannerResult + 24);
        uint64_t v136 = (char *)a1 + v135;
        uint64_t v137 = (char *)a2 + v135;
        v136[8] = v137[8];
        *(void *)uint64_t v136 = *(void *)v137;
        goto LABEL_126;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t sub_253A0DDA8()
{
  uint64_t result = type metadata accessor for SessionStart(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TextQuery(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Request(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Action(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for ActionCancellation(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for ClientAction(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for QueryStep(319);
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for VariableStep(319);
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for SessionError();
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = sub_253B059F0();
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for RequestContent.SystemPromptResolution(319);
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for ActionStepResult(319);
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for QueryStepResults(319);
                          if (v13 <= 0x3F)
                          {
                            uint64_t result = sub_253B05CF0();
                            if (v14 <= 0x3F)
                            {
                              uint64_t result = type metadata accessor for ActionResolverRequest(319);
                              if (v15 <= 0x3F)
                              {
                                uint64_t result = sub_253B06720();
                                if (v16 <= 0x3F)
                                {
                                  uint64_t result = type metadata accessor for StatementResult(319);
                                  if (v17 <= 0x3F)
                                  {
                                    uint64_t result = type metadata accessor for ExternalAgentTextQuery(319);
                                    if (v18 <= 0x3F)
                                    {
                                      uint64_t result = type metadata accessor for ExternalAgentSpeechQuery(319);
                                      if (v19 <= 0x3F)
                                      {
                                        uint64_t result = type metadata accessor for ExternalAgentRequest(319);
                                        if (v20 <= 0x3F)
                                        {
                                          uint64_t result = type metadata accessor for ExternalAgentOutcome(319);
                                          if (v21 <= 0x3F)
                                          {
                                            uint64_t result = type metadata accessor for ToolResolution(319);
                                            if (v22 <= 0x3F)
                                            {
                                              uint64_t result = type metadata accessor for UndoRedoRequest(319);
                                              if (v23 <= 0x3F)
                                              {
                                                uint64_t result = type metadata accessor for ClientUndoRedoRequest(319);
                                                if (v24 <= 0x3F)
                                                {
                                                  uint64_t result = type metadata accessor for TypeConversionRequest(319);
                                                  if (v25 <= 0x3F)
                                                  {
                                                    uint64_t result = type metadata accessor for TypeConversionResult(319);
                                                    if (v26 <= 0x3F)
                                                    {
                                                      uint64_t result = type metadata accessor for QueryDecorationResult(319);
                                                      if (v27 <= 0x3F)
                                                      {
                                                        uint64_t result = type metadata accessor for QueryDecorationPrePlannerResult(319);
                                                        if (v28 <= 0x3F)
                                                        {
                                                          swift_initEnumMetadataMultiPayload();
                                                          return 0;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior;
}

uint64_t destroy for Session.Plan()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Session.Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Session.Plan(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for Session.Plan(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Session.Plan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for Session.Plan(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Session.Plan(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Plan()
{
  return &type metadata for Session.Plan;
}

ValueMetadata *type metadata accessor for Session.Plan.Source()
{
  return &type metadata for Session.Plan.Source;
}

ValueMetadata *type metadata accessor for Session.Plan.DecompositionResult()
{
  return &type metadata for Session.Plan.DecompositionResult;
}

ValueMetadata *type metadata accessor for Session.RecoverableError()
{
  return &type metadata for Session.RecoverableError;
}

ValueMetadata *type metadata accessor for Session.PlanGenerationError()
{
  return &type metadata for Session.PlanGenerationError;
}

void *_s30IntelligenceFlowPlannerSupport7SessionO30PlanGenerationModelOutputErrorVwcp_0(void *a1, void *a2)
{
  sub_253A3D8FC(a1, a2);
  uint64_t v4 = v3[3];
  v2[2] = v3[2];
  v2[3] = v4;
  uint64_t v5 = v3[5];
  v2[4] = v3[4];
  v2[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void *_s30IntelligenceFlowPlannerSupport7SessionO30PlanGenerationModelOutputErrorVwca_0(void *a1, void *a2)
{
  sub_253A3C340(a1, a2);
  swift_bridgeObjectRelease();
  v3[2] = v2[2];
  v3[3] = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[4] = v2[4];
  v3[5] = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

void *_s30IntelligenceFlowPlannerSupport7SessionO30PlanGenerationModelOutputErrorVwta_0(void *a1, void *a2)
{
  sub_253A3EBC0(a1, a2);
  uint64_t v4 = v2[3];
  v3[2] = v2[2];
  v3[3] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = v2[5];
  v3[4] = v2[4];
  v3[5] = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _s30IntelligenceFlowPlannerSupport7SessionO30PlanGenerationModelOutputErrorVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_2534DA394(v2);
}

uint64_t sub_253A0E95C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_253A3CF34(result, a2);
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      return sub_253A3CF34(result, a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.PlanGenerationModelOutputError()
{
  return &type metadata for Session.PlanGenerationModelOutputError;
}

uint64_t initializeBufferWithCopyOfBuffer for SessionStart(uint64_t a1, uint64_t *a2)
{
  return sub_253A26A34(a1, a2);
}

uint64_t destroy for SessionStart(uint64_t a1, uint64_t a2)
{
  return sub_253A26B78(a1, a2, MEMORY[0x263F4C228], MEMORY[0x263F4C178]);
}

uint64_t initializeWithCopy for SessionStart()
{
  return sub_253A26C74();
}

uint64_t assignWithCopy for SessionStart()
{
  return sub_253A26D80();
}

uint64_t initializeWithTake for SessionStart()
{
  return sub_253A26EC8();
}

uint64_t assignWithTake for SessionStart()
{
  return sub_253A26FD4();
}

uint64_t getEnumTagSinglePayload for SessionStart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A0EAF4);
}

uint64_t sub_253A0EAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27118(a1, a2, a3, MEMORY[0x263F4C228], &qword_26B248CD0);
}

uint64_t storeEnumTagSinglePayload for SessionStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A0EB28);
}

uint64_t sub_253A0EB28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A1BFF0(a1, a2, a3, a4, MEMORY[0x263F4C228], &qword_26B248CD0);
}

void sub_253A0EB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_253A0EB7C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_253A3F4E8();
    unint64_t v4 = sub_253B09E00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Request(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v16 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v16))
      {
        uint64_t v17 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v16);
      }
      unint64_t v18 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))((char *)a1 + v18[5], (char *)a2 + v18[5], v16);
      uint64_t v19 = v18[6];
      unint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v20, v21, v23);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      uint64_t v24 = v18[7];
      unint64_t v25 = (char *)a1 + v24;
      unint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = sub_253B059D0();
      unint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      uint64_t v29 = v18[8];
      uint64_t v30 = (uint64_t *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v33 = swift_getEnumCaseMultiPayload();
      if (v33 == 1)
      {
        *uint64_t v30 = *v31;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v33)
        {
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
          goto LABEL_21;
        }
        uint64_t v34 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v34;
        uint64_t v35 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v59 = (char *)v30 + v35;
        uint64_t v36 = (char *)v31 + v35;
        swift_bridgeObjectRetain();
        v28(v59, v36, v27);
      }
      swift_storeEnumTagMultiPayload();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      goto LABEL_22;
    case 2:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_21;
    case 1:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      unint64_t v11 = (char *)a1 + v10;
      unint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = sub_253B059D0();
      unint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
      goto LABEL_21;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_22:
  uint64_t v37 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v38 = (uint64_t *)((char *)a1 + v37);
  uint64_t v39 = (uint64_t *)((char *)a2 + v37);
  uint64_t v40 = type metadata accessor for RequestPrescribedPlan(0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v39, 1, v40))
  {
    uint64_t v41 = sub_253462A5C(&qword_269CDBB20);
    memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v42 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v42;
        *((_WORD *)v38 + 8) = *((_WORD *)v39 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_30;
      case 1u:
        uint64_t v43 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v43;
        swift_bridgeObjectRetain();
        goto LABEL_30;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        uint64_t v44 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v44;
        *((unsigned char *)v38 + 16) = *((unsigned char *)v39 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_30;
      case 6u:
        uint64_t v45 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v45 - 8) + 16))(v38, v39, v45);
        uint64_t v46 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        int v47 = (char *)v38 + v46;
        uint64_t v48 = (char *)v39 + v46;
        *(void *)int v47 = *(void *)v48;
        v47[8] = v48[8];
LABEL_30:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
        break;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v38, 0, 1, v40);
  }
  uint64_t v49 = a3[7];
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v51, 1, v52))
  {
    uint64_t v53 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v50, v51, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v50, 0, 1, v52);
  }
  uint64_t v54 = a3[8];
  uint64_t v55 = (uint64_t *)((char *)a1 + v54);
  uint64_t v56 = (uint64_t *)((char *)a2 + v54);
  uint64_t v57 = v56[1];
  if (v57)
  {
    *uint64_t v55 = *v56;
    v55[1] = v57;
    v55[2] = v56[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    v55[2] = v56[2];
  }
  return a1;
}

uint64_t destroy for Request(uint64_t a1, int *a2)
{
  type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v6 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      }
      goto LABEL_13;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v7 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  }
  unint64_t v8 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1 + v8[5], v7);
  uint64_t v9 = a1 + v8[6];
  type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  uint64_t v11 = a1 + v8[7];
  uint64_t v12 = sub_253B059D0();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  uint64_t v14 = a1 + v8[8];
  type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 1) {
    goto LABEL_12;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for RequestContent.TextContent(0);
    v13(v14 + *(int *)(v16 + 20), v12);
  }
LABEL_13:
  uint64_t v17 = a1 + a2[6];
  uint64_t v18 = type metadata accessor for RequestPrescribedPlan(0);
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v18))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        swift_bridgeObjectRelease();
        break;
      case 6u:
        uint64_t v22 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v17, v22);
        break;
      default:
        break;
    }
  }
  uint64_t v19 = a1 + a2[7];
  uint64_t v20 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v19, 1, v20)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  }
  uint64_t result = *(void *)(a1 + a2[8] + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Request(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v14 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v14))
      {
        uint64_t v15 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v14);
      }
      uint64_t v16 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))((char *)a1 + v16[5], (char *)a2 + v16[5], v14);
      uint64_t v17 = v16[6];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v21 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      }
      uint64_t v22 = v16[7];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = sub_253B059D0();
      unint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      v26(v23, v24, v25);
      uint64_t v27 = v16[8];
      unint64_t v28 = (void *)((char *)a1 + v27);
      uint64_t v29 = (void *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v31 = swift_getEnumCaseMultiPayload();
      if (v31 == 1)
      {
        *unint64_t v28 = *v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v31)
        {
          memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
          break;
        }
        uint64_t v32 = v29[1];
        *unint64_t v28 = *v29;
        v28[1] = v32;
        uint64_t v33 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v57 = (char *)v28 + v33;
        uint64_t v34 = (char *)v29 + v33;
        swift_bridgeObjectRetain();
        v26(v57, v34, v25);
      }
      swift_storeEnumTagMultiPayload();
      break;
    case 2:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      break;
    case 1:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_253B059D0();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_20;
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  uint64_t v35 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v38 = type metadata accessor for RequestPrescribedPlan(0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v37, 1, v38))
  {
    uint64_t v39 = sub_253462A5C(&qword_269CDBB20);
    memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v40 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v40;
        *((_WORD *)v36 + 8) = *((_WORD *)v37 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_28;
      case 1u:
        uint64_t v41 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v41;
        swift_bridgeObjectRetain();
        goto LABEL_28;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        uint64_t v42 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v42;
        *((unsigned char *)v36 + 16) = *((unsigned char *)v37 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_28;
      case 6u:
        uint64_t v43 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v43 - 8) + 16))(v36, v37, v43);
        uint64_t v44 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        uint64_t v45 = (char *)v36 + v44;
        uint64_t v46 = (char *)v37 + v44;
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v46[8];
LABEL_28:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
        break;
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v36, 0, 1, v38);
  }
  uint64_t v47 = a3[7];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v49, 1, v50))
  {
    uint64_t v51 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v48, 0, 1, v50);
  }
  uint64_t v52 = a3[8];
  uint64_t v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  uint64_t v55 = v54[1];
  if (v55)
  {
    *uint64_t v53 = *v54;
    v53[1] = v55;
    v53[2] = v54[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    v53[2] = v54[2];
  }
  return a1;
}

void *assignWithCopy for Request(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    uint64_t v6 = type metadata accessor for RequestContent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 3)
    {
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          goto LABEL_21;
        }
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = sub_253B059D0();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
      }
      goto LABEL_20;
    }
    uint64_t v13 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v13))
    {
      uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v13);
    }
    uint64_t v15 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))((char *)a1 + v15[5], (char *)a2 + v15[5], v13);
    uint64_t v16 = v15[6];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    uint64_t v21 = v15[7];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = sub_253B059D0();
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    uint64_t v26 = v15[8];
    uint64_t v27 = (void *)((char *)a1 + v26);
    unint64_t v28 = (void *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    int v30 = swift_getEnumCaseMultiPayload();
    if (v30 == 1)
    {
      *uint64_t v27 = *v28;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v30)
      {
        memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
        goto LABEL_20;
      }
      *uint64_t v27 = *v28;
      v27[1] = v28[1];
      uint64_t v31 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v66 = (char *)v27 + v31;
      uint64_t v32 = (char *)v28 + v31;
      swift_bridgeObjectRetain();
      v25(v66, v32, v24);
    }
    swift_storeEnumTagMultiPayload();
LABEL_20:
    swift_storeEnumTagMultiPayload();
  }
LABEL_21:
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v33 = a3[6];
  uint64_t v34 = (uint64_t)a1 + v33;
  uint64_t v35 = (uint64_t)a2 + v33;
  uint64_t v36 = type metadata accessor for RequestPrescribedPlan(0);
  int v37 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v34, 1, v36);
  int v38 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *(void *)(v35 + 8);
          *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
          *(unsigned char *)(v34 + 17) = *(unsigned char *)(v35 + 17);
          swift_bridgeObjectRetain();
          goto LABEL_36;
        case 1u:
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *(void *)(v35 + 8);
          swift_bridgeObjectRetain();
          goto LABEL_36;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          *(void *)uint64_t v34 = *(void *)v35;
          *(void *)(v34 + 8) = *(void *)(v35 + 8);
          *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
          swift_bridgeObjectRetain();
          goto LABEL_36;
        case 6u:
          uint64_t v40 = sub_253B059D0();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(v34, v35, v40);
          uint64_t v41 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
          uint64_t v42 = v34 + v41;
          uint64_t v43 = v35 + v41;
          char v44 = *(unsigned char *)(v43 + 8);
          *(void *)uint64_t v42 = *(void *)v43;
          *(unsigned char *)(v42 + 8) = v44;
LABEL_36:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)v34, (const void *)v35, *(void *)(*(void *)(v36 - 8) + 64));
          break;
      }
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v34, 0, 1, v36);
      goto LABEL_43;
    }
    goto LABEL_27;
  }
  if (v38)
  {
    sub_2539DF610();
LABEL_27:
    size_t v39 = *(void *)(*(void *)(sub_253462A5C(&qword_269CDBB20) - 8) + 64);
LABEL_28:
    memcpy((void *)v34, (const void *)v35, v39);
    goto LABEL_43;
  }
  if (a1 != a2)
  {
    sub_2539DF610();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)uint64_t v34 = *(void *)v35;
        *(void *)(v34 + 8) = *(void *)(v35 + 8);
        *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
        *(unsigned char *)(v34 + 17) = *(unsigned char *)(v35 + 17);
        swift_bridgeObjectRetain();
        break;
      case 1u:
        *(void *)uint64_t v34 = *(void *)v35;
        *(void *)(v34 + 8) = *(void *)(v35 + 8);
        swift_bridgeObjectRetain();
        break;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        *(void *)uint64_t v34 = *(void *)v35;
        *(void *)(v34 + 8) = *(void *)(v35 + 8);
        *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v45 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v34, v35, v45);
        uint64_t v46 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        uint64_t v47 = v34 + v46;
        uint64_t v48 = v35 + v46;
        char v49 = *(unsigned char *)(v48 + 8);
        *(void *)uint64_t v47 = *(void *)v48;
        *(unsigned char *)(v47 + 8) = v49;
        break;
      default:
        size_t v39 = *(void *)(*(void *)(v36 - 8) + 64);
        goto LABEL_28;
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_43:
  uint64_t v50 = a3[7];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = sub_253B055C0();
  int v54 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v51, 1, v53);
  int v55 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v52, 1, v53);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v51, 0, 1, v53);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  uint64_t v56 = *(void *)(v53 - 8);
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v53);
LABEL_48:
    uint64_t v57 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v51, v52, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 24))(v51, v52, v53);
LABEL_49:
  uint64_t v58 = a3[8];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (void *)((char *)a2 + v58);
  uint64_t v61 = *(void *)((char *)a1 + v58 + 8);
  uint64_t v62 = v60[1];
  if (v61)
  {
    if (v62)
    {
      *uint64_t v59 = *v60;
      v59[1] = v60[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v59[2] = v60[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_253A10824((uint64_t)v59);
      uint64_t v63 = v60[2];
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      v59[2] = v63;
    }
  }
  else if (v62)
  {
    *uint64_t v59 = *v60;
    v59[1] = v60[1];
    v59[2] = v60[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v64 = *(_OWORD *)v60;
    v59[2] = v60[2];
    *(_OWORD *)uint64_t v59 = v64;
  }
  return a1;
}

uint64_t sub_253A10824(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for Request(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v12 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v12))
    {
      uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v12);
    }
    uint64_t v14 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))((char *)a1 + v14[5], (char *)a2 + v14[5], v12);
    uint64_t v15 = v14[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = v14[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_253B059D0();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
    v24(v21, v22, v23);
    uint64_t v25 = v14[8];
    uint64_t v26 = (_OWORD *)((char *)a1 + v25);
    uint64_t v27 = (_OWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *uint64_t v26 = *v27;
      uint64_t v29 = type metadata accessor for RequestContent.TextContent(0);
      v24((char *)v26 + *(int *)(v29 + 20), (char *)v27 + *(int *)(v29 + 20), v23);
      swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_15;
    }
    *a1 = *a2;
    uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
LABEL_15:
  uint64_t v30 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for RequestPrescribedPlan(0);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v32, 1, v33))
  {
    uint64_t v34 = sub_253462A5C(&qword_269CDBB20);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v35 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v31, v32, v35);
      uint64_t v36 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
      int v37 = &v31[v36];
      int v38 = &v32[v36];
      *(void *)int v37 = *(void *)v38;
      v37[8] = v38[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v31, 0, 1, v33);
  }
  uint64_t v39 = a3[7];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v41, 1, v42))
  {
    uint64_t v43 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v40, 0, 1, v42);
  }
  uint64_t v44 = a3[8];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *((void *)v45 + 2) = *((void *)v46 + 2);
  return a1;
}

_OWORD *assignWithTake for Request(_OWORD *a1, _OWORD *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    uint64_t v6 = type metadata accessor for RequestContent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v12 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v12))
      {
        uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v12);
      }
      uint64_t v14 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))((char *)a1 + v14[5], (char *)a2 + v14[5], v12);
      uint64_t v15 = v14[6];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v19 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
      }
      uint64_t v20 = v14[7];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = sub_253B059D0();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
      v24(v21, v22, v23);
      uint64_t v25 = v14[8];
      uint64_t v26 = (_OWORD *)((char *)a1 + v25);
      uint64_t v27 = (_OWORD *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        *uint64_t v26 = *v27;
        uint64_t v29 = type metadata accessor for RequestContent.TextContent(0);
        v24((char *)v26 + *(int *)(v29 + 20), (char *)v27 + *(int *)(v29 + 20), v23);
        swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_16;
      }
      *a1 = *a2;
      uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_16:
  uint64_t v30 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for RequestPrescribedPlan(0);
  int v34 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v31, 1, v33);
  int v35 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v32, 1, v33);
  if (!v34)
  {
    if (!v35)
    {
      if (a1 == a2) {
        goto LABEL_29;
      }
      sub_2539DF610();
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v41 = sub_253B059D0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v31, v32, v41);
        uint64_t v42 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        uint64_t v43 = &v31[v42];
        uint64_t v44 = &v32[v42];
        *(void *)uint64_t v43 = *(void *)v44;
        v43[8] = v44[8];
        swift_storeEnumTagMultiPayload();
        goto LABEL_29;
      }
      size_t v40 = *(void *)(*(void *)(v33 - 8) + 64);
LABEL_23:
      memcpy(v31, v32, v40);
      goto LABEL_29;
    }
    sub_2539DF610();
LABEL_22:
    size_t v40 = *(void *)(*(void *)(sub_253462A5C(&qword_269CDBB20) - 8) + 64);
    goto LABEL_23;
  }
  if (v35) {
    goto LABEL_22;
  }
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v36 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v31, v32, v36);
    uint64_t v37 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
    int v38 = &v31[v37];
    uint64_t v39 = &v32[v37];
    *(void *)int v38 = *(void *)v39;
    v38[8] = v39[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v31, 0, 1, v33);
LABEL_29:
  uint64_t v45 = a3[7];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  uint64_t v48 = sub_253B055C0();
  int v49 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v46, 1, v48);
  int v50 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v47, 1, v48);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v46, v47, v48);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v46, 0, 1, v48);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v51 = *(void *)(v48 - 8);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v48);
LABEL_34:
    uint64_t v52 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v46, v47, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v46, v47, v48);
LABEL_35:
  uint64_t v53 = a3[8];
  uint64_t v54 = (uint64_t)a1 + v53;
  int v55 = (char *)a2 + v53;
  if (!*(void *)((char *)a1 + v53 + 8))
  {
LABEL_39:
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *(void *)(v54 + 16) = *((void *)v55 + 2);
    return a1;
  }
  uint64_t v56 = *((void *)v55 + 1);
  if (!v56)
  {
    sub_253A10824(v54);
    goto LABEL_39;
  }
  *(void *)uint64_t v54 = *(void *)v55;
  *(void *)(v54 + 8) = v56;
  swift_bridgeObjectRelease();
  *(void *)(v54 + 16) = *((void *)v55 + 2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A114C0);
}

uint64_t sub_253A114C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RequestContent(0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    sub_253462A5C(&qword_269CDBB20);
    sub_253486600();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      sub_2535E2560();
    }
    else
    {
      sub_253462A5C((uint64_t *)&unk_26B248CB0);
      sub_253486600();
      if (*(_DWORD *)(v11 + 84) != a2) {
        return sub_253A3BE38(*(int *)(a3 + 32));
      }
      sub_2535E256C();
    }
    uint64_t v7 = a1 + v10;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A11598);
}

void sub_253A11598(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for RequestContent(0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253462A5C(&qword_269CDBB20);
    sub_253486600();
    if (*(_DWORD *)(v7 + 84) == a3)
    {
      sub_2535E26D8();
    }
    else
    {
      sub_253462A5C((uint64_t *)&unk_26B248CB0);
      sub_253486600();
      if (*(_DWORD *)(v8 + 84) != a3)
      {
        sub_253945524(*(int *)(a4 + 32));
        return;
      }
      sub_2535E26E4();
    }
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
}

void sub_253A11660()
{
  type metadata accessor for RequestContent(319);
  if (v0 <= 0x3F)
  {
    sub_253A0EB7C(319, &qword_26B249248, (void (*)(uint64_t))type metadata accessor for RequestPrescribedPlan);
    if (v1 <= 0x3F)
    {
      sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v15 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v15))
        {
          uint64_t v16 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v15);
        }
        uint64_t v17 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))((char *)a1 + v17[5], (char *)a2 + v17[5], v15);
        uint64_t v18 = v17[6];
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v22 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v19, v20, v22);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
        }
        uint64_t v23 = v17[7];
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = sub_253B059D0();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        v27(v24, v25, v26);
        uint64_t v28 = v17[8];
        uint64_t v29 = (uint64_t *)((char *)a1 + v28);
        uint64_t v30 = (uint64_t *)((char *)a2 + v28);
        uint64_t v31 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v32 = swift_getEnumCaseMultiPayload();
        if (v32 == 1)
        {
          *uint64_t v29 = *v30;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v32)
          {
            memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
            goto LABEL_21;
          }
          uint64_t v33 = v30[1];
          *uint64_t v29 = *v30;
          v29[1] = v33;
          uint64_t v34 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          int v35 = (char *)v29 + v34;
          uint64_t v36 = (char *)v30 + v34;
          swift_bridgeObjectRetain();
          v27(v35, v36, v26);
        }
        swift_storeEnumTagMultiPayload();
LABEL_21:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_21;
      case 1:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = sub_253B059D0();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        v13(v10, v11, v12);
        goto LABEL_21;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for RequestContent(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 3:
      uint64_t v8 = sub_253B055C0();
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v8)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      }
      uint64_t v9 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1 + v9[5], v8);
      uint64_t v10 = a1 + v9[6];
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
      }
      uint64_t v12 = a1 + v9[7];
      uint64_t v13 = sub_253B059D0();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      v15(v12, v13);
      uint64_t v14 = a1 + v9[8];
      type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result != 1)
      {
        if (result) {
          return result;
        }
        swift_bridgeObjectRelease();
        uint64_t v7 = v14 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v6 = v13;
        int v5 = (uint64_t (*)(uint64_t, uint64_t))v15;
        goto LABEL_12;
      }
      break;
    case 2:
      break;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v3 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v4 = sub_253B059D0();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t v6 = v4;
      uint64_t v7 = v3;
LABEL_12:
      return v5(v7, v6);
    default:
      return result;
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RequestContent(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v13 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v13))
      {
        uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v13);
      }
      uint64_t v15 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))((char *)a1 + v15[5], (char *)a2 + v15[5], v13);
      uint64_t v16 = v15[6];
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v20 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v17, v18, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
      }
      uint64_t v21 = v15[7];
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      uint64_t v24 = sub_253B059D0();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v22, v23, v24);
      uint64_t v26 = v15[8];
      uint64_t v27 = (void *)((char *)a1 + v26);
      uint64_t v28 = (void *)((char *)a2 + v26);
      uint64_t v29 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v30 = swift_getEnumCaseMultiPayload();
      if (v30 == 1)
      {
        *uint64_t v27 = *v28;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v30)
        {
          memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
          goto LABEL_19;
        }
        uint64_t v31 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v31;
        uint64_t v32 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v33 = (char *)v27 + v32;
        uint64_t v34 = (char *)v28 + v32;
        swift_bridgeObjectRetain();
        v25(v33, v34, v24);
      }
      swift_storeEnumTagMultiPayload();
LABEL_19:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    case 1:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_253B059D0();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      goto LABEL_19;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for RequestContent(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        uint64_t v12 = sub_253B055C0();
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v12))
        {
          uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v12);
        }
        uint64_t v14 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))((char *)a1 + v14[5], (char *)a2 + v14[5], v12);
        uint64_t v15 = v14[6];
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v19 = sub_253B09120();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v16, v17, v19);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
        }
        uint64_t v20 = v14[7];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = sub_253B059D0();
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
        v24(v21, v22, v23);
        uint64_t v25 = v14[8];
        uint64_t v26 = (void *)((char *)a1 + v25);
        uint64_t v27 = (void *)((char *)a2 + v25);
        uint64_t v28 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        int v29 = swift_getEnumCaseMultiPayload();
        if (v29 == 1)
        {
          *uint64_t v26 = *v27;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (v29)
          {
            memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
            goto LABEL_20;
          }
          *uint64_t v26 = *v27;
          v26[1] = v27[1];
          uint64_t v30 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
          uint64_t v31 = (char *)v26 + v30;
          uint64_t v32 = (char *)v27 + v30;
          swift_bridgeObjectRetain();
          v24(v31, v32, v23);
        }
        swift_storeEnumTagMultiPayload();
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 1:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v7 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = sub_253B059D0();
        uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
        swift_bridgeObjectRetain();
        v11(v8, v9, v10);
        goto LABEL_20;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for RequestContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v11 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v11))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v11);
    }
    uint64_t v13 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))((char *)a1 + v13[5], (char *)a2 + v13[5], v11);
    uint64_t v14 = v13[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    uint64_t v19 = v13[7];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_253B059D0();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
    v23(v20, v21, v22);
    uint64_t v24 = v13[8];
    uint64_t v25 = (_OWORD *)((char *)a1 + v24);
    uint64_t v26 = (_OWORD *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      *uint64_t v25 = *v26;
      uint64_t v28 = type metadata accessor for RequestContent.TextContent(0);
      v23((char *)v25 + *(int *)(v28 + 20), (char *)v26 + *(int *)(v28 + 20), v22);
      swift_storeEnumTagMultiPayload();
    }
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
LABEL_14:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for RequestContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v11 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v11))
      {
        uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v11);
      }
      uint64_t v13 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))((char *)a1 + v13[5], (char *)a2 + v13[5], v11);
      uint64_t v14 = v13[6];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v18 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
      }
      uint64_t v19 = v13[7];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = sub_253B059D0();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32);
      v23(v20, v21, v22);
      uint64_t v24 = v13[8];
      uint64_t v25 = (_OWORD *)((char *)a1 + v24);
      uint64_t v26 = (_OWORD *)((char *)a2 + v24);
      uint64_t v27 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        *uint64_t v25 = *v26;
        uint64_t v28 = type metadata accessor for RequestContent.TextContent(0);
        v23((char *)v25 + *(int *)(v28 + 20), (char *)v26 + *(int *)(v28 + 20), v22);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_15;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
LABEL_15:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_253A12C68()
{
  uint64_t result = type metadata accessor for RequestContent.TextContent(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RequestContent.SystemPromptResolution(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestContent.StopContent()
{
  return &type metadata for RequestContent.StopContent;
}

uint64_t getEnumTagSinglePayload for RequestContent.TextContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A12D84);
}

uint64_t storeEnumTagSinglePayload for RequestContent.TextContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A12D9C);
}

uint64_t sub_253A12DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A25C54(a1, a2, a3, (uint64_t)&unk_253B5A5D8, MEMORY[0x263F4BF98]);
}

ValueMetadata *type metadata accessor for RequestContent.SpeechContent()
{
  return &type metadata for RequestContent.SpeechContent;
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContent.SystemPromptResolution(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      uint64_t v9 = *(void *)(v7 - 8);
    }
    else
    {
      uint64_t v9 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)a1 + a3[5], (char *)a2 + a3[5], v7);
    uint64_t v11 = a3[6];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_253B059D0();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    v20(v17, v18, v19);
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *uint64_t v22 = *v23;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
        return a1;
      }
      uint64_t v26 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v26;
      uint64_t v27 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v28 = (char *)v22 + v27;
      int v29 = (char *)v23 + v27;
      swift_bridgeObjectRetain();
      v20(v28, v29, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RequestContent.SystemPromptResolution(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_253B055C0();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  if (!v5) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1 + a2[5], v4);
  uint64_t v7 = a1 + a2[6];
  type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = sub_253B059D0();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v14(v9, v10);
  uint64_t v11 = a1 + a2[8];
  type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v10);
  }
  return result;
}

char *initializeWithCopy for RequestContent.SystemPromptResolution(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    uint64_t v8 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 - 8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_253B09120();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_253B059D0();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
  v18(v15, v16, v17);
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
      return a1;
    }
    uint64_t v24 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v24;
    uint64_t v25 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v26 = &v20[v25];
    uint64_t v27 = &v21[v25];
    swift_bridgeObjectRetain();
    v18(v26, v27, v17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for RequestContent.SystemPromptResolution(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      uint64_t v10 = *(void *)(v6 - 8);
    }
    else
    {
      uint64_t v10 = *(void *)(v6 - 8);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v6 - 8);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v6);
      uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(a1, a2, v6);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(&a1[a3[5]], &a2[a3[5]], v6);
  if (a1 != a2)
  {
    uint64_t v12 = a3[6];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    sub_2539DF610();
    uint64_t v15 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = sub_253B059D0();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
  if (a1 != a2)
  {
    uint64_t v22 = a3[8];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    sub_2539DF610();
    uint64_t v25 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)uint64_t v23 = *(void *)v24;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
        return a1;
      }
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = *((void *)v24 + 1);
      uint64_t v27 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v28 = &v23[v27];
      int v29 = &v24[v27];
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      swift_bridgeObjectRetain();
      v30(v28, v29, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for RequestContent.SystemPromptResolution(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    uint64_t v8 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 - 8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_253B09120();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_253B059D0();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    uint64_t v23 = type metadata accessor for RequestContent.TextContent(0);
    v18(&v20[*(int *)(v23 + 20)], &v21[*(int *)(v23 + 20)], v17);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for RequestContent.SystemPromptResolution(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      uint64_t v10 = *(void *)(v6 - 8);
    }
    else
    {
      uint64_t v10 = *(void *)(v6 - 8);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v6 - 8);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v6);
      uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(a1, a2, v6);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(&a1[a3[5]], &a2[a3[5]], v6);
  if (a1 != a2)
  {
    uint64_t v12 = a3[6];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    sub_2539DF610();
    uint64_t v15 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = sub_253B059D0();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
  if (a1 != a2)
  {
    uint64_t v22 = a3[8];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    sub_2539DF610();
    uint64_t v25 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      uint64_t v26 = type metadata accessor for RequestContent.TextContent(0);
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v23[*(int *)(v26 + 20)], &v24[*(int *)(v26 + 20)], v20);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestContent.SystemPromptResolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A14014);
}

uint64_t sub_253A14014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2534DA0C4();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    sub_253B055C0();
    sub_253486600();
    if (*(_DWORD *)(v9 + 84) == v3)
    {
      sub_2535E263C();
    }
    else
    {
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      sub_253486600();
      if (*(_DWORD *)(v11 + 84) == v3)
      {
        sub_2535E2560();
      }
      else
      {
        sub_253B059D0();
        sub_253486600();
        if (*(_DWORD *)(v12 + 84) == v3)
        {
          sub_2535E256C();
        }
        else
        {
          uint64_t v8 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
          uint64_t v10 = *(int *)(a3 + 32);
        }
      }
    }
    uint64_t v7 = v4 + v10;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for RequestContent.SystemPromptResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A14100);
}

uint64_t sub_253A14100()
{
  sub_253A3C6F8();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253B055C0();
    sub_253486600();
    if (*(_DWORD *)(v2 + 84) == v0)
    {
      sub_2535E272C();
    }
    else
    {
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      sub_253486600();
      if (*(_DWORD *)(v3 + 84) == v0)
      {
        sub_2535E26D8();
      }
      else
      {
        sub_253B059D0();
        sub_253486600();
        if (*(_DWORD *)(v4 + 84) == v0) {
          sub_2535E26E4();
        }
        else {
          type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
        }
      }
    }
  }
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, v6, v7, v8);
}

void sub_253A141D4()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
  if (v0 <= 0x3F)
  {
    sub_253B055C0();
    if (v1 <= 0x3F)
    {
      type metadata accessor for RequestContent.SystemPromptResolution.UserAction(319);
      if (v2 <= 0x3F)
      {
        sub_253B059D0();
        if (v3 <= 0x3F)
        {
          type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(319);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContent.SystemPromptResolution.ResolutionInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_253B059D0();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for RequestContent.SystemPromptResolution.ResolutionInput(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v4 = sub_253B059D0();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  return result;
}

void *initializeWithCopy for RequestContent.SystemPromptResolution.ResolutionInput(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for RequestContent.SystemPromptResolution.ResolutionInput(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v7 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_253B059D0();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for RequestContent.SystemPromptResolution.ResolutionInput(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for RequestContent.SystemPromptResolution.ResolutionInput(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_253A14988()
{
  uint64_t result = type metadata accessor for RequestContent.TextContent(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContent.SystemPromptResolution.UserAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_253B09120();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for RequestContent.SystemPromptResolution.UserAction(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = sub_253B09120();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for RequestContent.SystemPromptResolution.UserAction(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_253B09120();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for RequestContent.SystemPromptResolution.UserAction(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09120();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *assignWithTake for RequestContent.SystemPromptResolution.UserAction(void *a1, const void *a2, uint64_t a3)
{
  return sub_253A1ACD4(a1, a2, a3);
}

uint64_t sub_253A14D44()
{
  uint64_t result = sub_253B09120();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RequestContent.SystemPromptResolution.RequirementResolution(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for RequestContent.SystemPromptResolution.RequirementResolution(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A14F5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.RequirementResolution()
{
  return &type metadata for RequestContent.SystemPromptResolution.RequirementResolution;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ActionCancellation()
{
  return &type metadata for RequestContent.SystemPromptResolution.ActionCancellation;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExternalAgentRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v16 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v16))
      {
        uint64_t v17 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v16);
      }
      uint64_t v18 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))((char *)a1 + v18[5], (char *)a2 + v18[5], v16);
      uint64_t v19 = v18[6];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v20, v21, v23);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      uint64_t v24 = v18[7];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = sub_253B059D0();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      v28(v25, v26, v27);
      uint64_t v29 = v18[8];
      uint64_t v30 = (uint64_t *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v33 = swift_getEnumCaseMultiPayload();
      if (v33 == 1)
      {
        *uint64_t v30 = *v31;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v33)
        {
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
          goto LABEL_21;
        }
        uint64_t v34 = v31[1];
        *uint64_t v30 = *v31;
        v30[1] = v34;
        uint64_t v35 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v47 = (char *)v30 + v35;
        uint64_t v36 = (char *)v31 + v35;
        swift_bridgeObjectRetain();
        v28(v47, v36, v27);
      }
      swift_storeEnumTagMultiPayload();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      goto LABEL_22;
    case 2:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_21;
    case 1:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = sub_253B059D0();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
      goto LABEL_21;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_22:
  uint64_t v37 = *(int *)(a3 + 20);
  int v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v39, 1, v40))
  {
    uint64_t v41 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v38, 0, 1, v40);
  }
  uint64_t v42 = *(int *)(a3 + 24);
  uint64_t v43 = (uint64_t *)((char *)a1 + v42);
  uint64_t v44 = (uint64_t *)((char *)a2 + v42);
  uint64_t v45 = v44[1];
  if (v45)
  {
    *uint64_t v43 = *v44;
    v43[1] = v45;
    v43[2] = v44[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    v43[2] = v44[2];
  }
  return a1;
}

uint64_t destroy for ExternalAgentRequest(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = a1 + *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v6 = sub_253B059D0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      }
      goto LABEL_13;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v7 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  }
  uint64_t v8 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1 + v8[5], v7);
  uint64_t v9 = a1 + v8[6];
  type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  uint64_t v11 = a1 + v8[7];
  uint64_t v12 = sub_253B059D0();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  uint64_t v14 = a1 + v8[8];
  type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 1) {
    goto LABEL_12;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for RequestContent.TextContent(0);
    v13(v14 + *(int *)(v16 + 20), v12);
  }
LABEL_13:
  uint64_t v17 = a1 + *(int *)(a2 + 20);
  uint64_t v18 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 24) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ExternalAgentRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      uint64_t v14 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v14))
      {
        uint64_t v15 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v14);
      }
      uint64_t v16 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))((char *)a1 + v16[5], (char *)a2 + v16[5], v14);
      uint64_t v17 = v16[6];
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v21 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v18, v19, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      }
      uint64_t v22 = v16[7];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = sub_253B059D0();
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      v26(v23, v24, v25);
      uint64_t v27 = v16[8];
      uint64_t v28 = (void *)((char *)a1 + v27);
      uint64_t v29 = (void *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      int v31 = swift_getEnumCaseMultiPayload();
      if (v31 == 1)
      {
        *uint64_t v28 = *v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (v31)
        {
          memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
          break;
        }
        uint64_t v32 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v32;
        uint64_t v33 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v45 = (char *)v28 + v33;
        uint64_t v34 = (char *)v29 + v33;
        swift_bridgeObjectRetain();
        v26(v45, v34, v25);
      }
      swift_storeEnumTagMultiPayload();
      break;
    case 2:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      break;
    case 1:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_253B059D0();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_20;
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  uint64_t v35 = *(int *)(a3 + 20);
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v37, 1, v38))
  {
    uint64_t v39 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v36, 0, 1, v38);
  }
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  if (v43)
  {
    *uint64_t v41 = *v42;
    v41[1] = v43;
    v41[2] = v42[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    v41[2] = v42[2];
  }
  return a1;
}

void *assignWithCopy for ExternalAgentRequest(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    uint64_t v6 = type metadata accessor for RequestContent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 3)
    {
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
          goto LABEL_21;
        }
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = sub_253B059D0();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        v12(v9, v10, v11);
      }
      goto LABEL_20;
    }
    uint64_t v13 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v13))
    {
      uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v13);
    }
    uint64_t v15 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))((char *)a1 + v15[5], (char *)a2 + v15[5], v13);
    uint64_t v16 = v15[6];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    uint64_t v21 = v15[7];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = sub_253B059D0();
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    uint64_t v26 = v15[8];
    uint64_t v27 = (void *)((char *)a1 + v26);
    uint64_t v28 = (void *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    int v30 = swift_getEnumCaseMultiPayload();
    if (v30 == 1)
    {
      *uint64_t v27 = *v28;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v30)
      {
        memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
        goto LABEL_20;
      }
      *uint64_t v27 = *v28;
      v27[1] = v28[1];
      uint64_t v31 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      int v49 = (char *)v27 + v31;
      uint64_t v32 = (char *)v28 + v31;
      swift_bridgeObjectRetain();
      v25(v49, v32, v24);
    }
    swift_storeEnumTagMultiPayload();
LABEL_20:
    swift_storeEnumTagMultiPayload();
  }
LABEL_21:
  uint64_t v33 = *(int *)(a3 + 20);
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_253B055C0();
  int v37 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v34, 1, v36);
  int v38 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v34, 0, 1, v36);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v39 = *(void *)(v36 - 8);
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v36);
LABEL_26:
    uint64_t v40 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v34, v35, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v34, v35, v36);
LABEL_27:
  uint64_t v41 = *(int *)(a3 + 24);
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v44 = *(void *)((char *)a1 + v41 + 8);
  uint64_t v45 = v43[1];
  if (v44)
  {
    if (v45)
    {
      *uint64_t v42 = *v43;
      v42[1] = v43[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v42[2] = v43[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_253A10824((uint64_t)v42);
      uint64_t v46 = v43[2];
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      v42[2] = v46;
    }
  }
  else if (v45)
  {
    *uint64_t v42 = *v43;
    v42[1] = v43[1];
    v42[2] = v43[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v47 = *(_OWORD *)v43;
    v42[2] = v43[2];
    *(_OWORD *)uint64_t v42 = v47;
  }
  return a1;
}

_OWORD *initializeWithTake for ExternalAgentRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RequestContent(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v12 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v12))
    {
      uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v12);
    }
    uint64_t v14 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))((char *)a1 + v14[5], (char *)a2 + v14[5], v12);
    uint64_t v15 = v14[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    uint64_t v20 = v14[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_253B059D0();
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
    v24(v21, v22, v23);
    uint64_t v25 = v14[8];
    uint64_t v26 = (_OWORD *)((char *)a1 + v25);
    uint64_t v27 = (_OWORD *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *uint64_t v26 = *v27;
      uint64_t v29 = type metadata accessor for RequestContent.TextContent(0);
      v24((char *)v26 + *(int *)(v29 + 20), (char *)v27 + *(int *)(v29 + 20), v23);
      swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_15;
    }
    *a1 = *a2;
    uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  swift_storeEnumTagMultiPayload();
LABEL_15:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v32, 1, v33))
  {
    uint64_t v34 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v31, 0, 1, v33);
  }
  uint64_t v35 = *(int *)(a3 + 24);
  uint64_t v36 = (char *)a1 + v35;
  int v37 = (char *)a2 + v35;
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  *((void *)v36 + 2) = *((void *)v37 + 2);
  return a1;
}

_OWORD *assignWithTake for ExternalAgentRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    uint64_t v6 = type metadata accessor for RequestContent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v12 = sub_253B055C0();
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v12))
      {
        uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v12);
      }
      uint64_t v14 = (int *)type metadata accessor for RequestContent.SystemPromptResolution(0);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))((char *)a1 + v14[5], (char *)a2 + v14[5], v12);
      uint64_t v15 = v14[6];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for RequestContent.SystemPromptResolution.UserAction(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v19 = sub_253B09120();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v16, v17, v19);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
      }
      uint64_t v20 = v14[7];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = sub_253B059D0();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
      v24(v21, v22, v23);
      uint64_t v25 = v14[8];
      uint64_t v26 = (_OWORD *)((char *)a1 + v25);
      uint64_t v27 = (_OWORD *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        *uint64_t v26 = *v27;
        uint64_t v29 = type metadata accessor for RequestContent.TextContent(0);
        v24((char *)v26 + *(int *)(v29 + 20), (char *)v27 + *(int *)(v29 + 20), v23);
        swift_storeEnumTagMultiPayload();
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_16;
      }
      *a1 = *a2;
      uint64_t v8 = *(int *)(type metadata accessor for RequestContent.TextContent(0) + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_16:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = sub_253B055C0();
  int v34 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v31, 1, v33);
  int v35 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v32, 1, v33);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v31, 0, 1, v33);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v36 = *(void *)(v33 - 8);
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v33);
LABEL_21:
    uint64_t v37 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v31, v32, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v31, v32, v33);
LABEL_22:
  uint64_t v38 = *(int *)(a3 + 24);
  uint64_t v39 = (uint64_t)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  if (!*(void *)((char *)a1 + v38 + 8))
  {
LABEL_26:
    *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
    *(void *)(v39 + 16) = *((void *)v40 + 2);
    return a1;
  }
  uint64_t v41 = *((void *)v40 + 1);
  if (!v41)
  {
    sub_253A10824(v39);
    goto LABEL_26;
  }
  *(void *)uint64_t v39 = *(void *)v40;
  *(void *)(v39 + 8) = v41;
  swift_bridgeObjectRelease();
  *(void *)(v39 + 16) = *((void *)v40 + 2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalAgentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A16B48);
}

uint64_t sub_253A16B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RequestContent(0);
  sub_253486600();
  if (*(_DWORD *)(v5 + 84) == a2)
  {
    uint64_t v6 = sub_253945320();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_253486600();
    if (*(_DWORD *)(v8 + 84) != a2) {
      return sub_253A3BE38(*(int *)(a3 + 24));
    }
    uint64_t v6 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, a2, v7);
}

uint64_t storeEnumTagSinglePayload for ExternalAgentRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A16BF8);
}

void sub_253A16BF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for RequestContent(0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_253486600();
    if (*(_DWORD *)(v7 + 84) != a3)
    {
      sub_253945524(*(int *)(a4 + 24));
      return;
    }
    sub_253A3C36C();
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v8, v9, v10, v11);
}

void sub_253A16C9C()
{
  type metadata accessor for RequestContent(319);
  if (v0 <= 0x3F)
  {
    sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for RequestPrescribedPlan(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 1u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        uint64_t v11 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        uint64_t v12 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        *(void *)uint64_t v13 = *(void *)v14;
        v13[8] = v14[8];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for RequestPrescribedPlan(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 6:
      uint64_t v3 = sub_253B059D0();
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for RequestPrescribedPlan(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 6u:
      uint64_t v9 = sub_253B059D0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      *(void *)uint64_t v11 = *(void *)v12;
      v11[8] = v12[8];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for RequestPrescribedPlan(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        *((unsigned char *)a1 + 17) = *((unsigned char *)a2 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 6u:
        uint64_t v6 = sub_253B059D0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        char v10 = v9[8];
        *(void *)uint64_t v8 = *(void *)v9;
        v8[8] = v10;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for RequestPrescribedPlan(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v6 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    *(void *)uint64_t v8 = *(void *)v9;
    v8[8] = v9[8];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for RequestPrescribedPlan(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v6 = sub_253B059D0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = *(int *)(type metadata accessor for RequestPrescribedPlan.OpenTool(0) + 20);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      *(void *)uint64_t v8 = *(void *)v9;
      v8[8] = v9[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_253A176A4()
{
  uint64_t result = type metadata accessor for RequestPrescribedPlan.OpenTool(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_253A1775C(void *a1, void *a2)
{
  sub_253A3D8FC(a1, a2);
  *(_WORD *)(v2 + 16) = *(_WORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t assignWithCopy for RequestPrescribedPlan.SearchTool(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for RequestPrescribedPlan.SearchTool(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for RequestPrescribedPlan.SearchTool(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestPrescribedPlan.SearchTool(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 18))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestPrescribedPlan.SearchTool(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.SearchTool()
{
  return &type metadata for RequestPrescribedPlan.SearchTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.LowConfidenceKnowledgeTool()
{
  return &type metadata for RequestPrescribedPlan.LowConfidenceKnowledgeTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateRichContentTool()
{
  return &type metadata for RequestPrescribedPlan.GenerateRichContentTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool()
{
  return &type metadata for RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateImageIntentTool()
{
  return &type metadata for RequestPrescribedPlan.GenerateImageIntentTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.TextTool()
{
  return &type metadata for RequestPrescribedPlan.TextTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.ConvertTool()
{
  return &type metadata for RequestPrescribedPlan.ConvertTool;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.DisplayTool()
{
  return &type metadata for RequestPrescribedPlan.DisplayTool;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO8TextToolVwCP_0(void *a1, void *a2)
{
  sub_253A3D8FC(a1, a2);
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(v3 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO8TextToolVwca_0(void *a1, void *a2)
{
  sub_253A3C340(a1, a2);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(v2 + 16);
  return v3;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO8TextToolVwta_0(void *a1, void *a2)
{
  sub_253A3EBC0(a1, a2);
  *(unsigned char *)(v3 + 16) = *(unsigned char *)(v2 + 16);
  return v3;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO8TextToolVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_2534DA394(v2);
}

uint64_t sub_253A17A38(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_253A3CF34(result, a2);
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      return sub_253A3CF34(result, a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.KnowledgeTool()
{
  return &type metadata for RequestPrescribedPlan.KnowledgeTool;
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestPrescribedPlan.OpenTool(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t destroy for RequestPrescribedPlan.OpenTool(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A17E04);
}

uint64_t sub_253A17E04()
{
  sub_253A3C58C();
  uint64_t v1 = sub_253945320();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for RequestPrescribedPlan.OpenTool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A17E50);
}

uint64_t sub_253A17E50()
{
  sub_253A3C58C();
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v0, v1, v2, v3);
}

uint64_t sub_253A17E8C()
{
  return sub_253A1F620();
}

uint64_t storeEnumTagSinglePayload for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool()
{
  return &type metadata for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool;
}

char *initializeBufferWithCopyOfBuffer for ProgramStatement(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    char v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Expression(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v13 = *(void *)v11;
        uint64_t v14 = *((void *)v11 + 1);
        char v15 = v11[16];
        sub_2534E4408(v13, v14, v15);
        *(void *)char v10 = v13;
        *((void *)v10 + 1) = v14;
        v10[16] = v15;
        goto LABEL_18;
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        v8(v10, v11, v7);
        goto LABEL_18;
      case 2u:
        *char v10 = *v11;
        uint64_t v17 = type metadata accessor for PrefixExpression(0);
        v8(&v10[*(int *)(v17 + 20)], &v11[*(int *)(v17 + 20)], v7);
        goto LABEL_18;
      case 3u:
        *char v10 = *v11;
        uint64_t v18 = type metadata accessor for InfixExpression(0);
        v8(&v10[*(int *)(v18 + 20)], &v11[*(int *)(v18 + 20)], v7);
        v8(&v10[*(int *)(v18 + 24)], &v11[*(int *)(v18 + 24)], v7);
        goto LABEL_18;
      case 4u:
        v8(v10, v11, v7);
        uint64_t v19 = type metadata accessor for IndexExpression(0);
        v8(&v10[*(int *)(v19 + 20)], &v11[*(int *)(v19 + 20)], v7);
        goto LABEL_18;
      case 5u:
        v8(v10, v11, v7);
        uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
        *(void *)&v10[*(int *)(updated + 20)] = *(void *)&v11[*(int *)(updated + 20)];
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 6u:
        uint64_t v21 = *((void *)v11 + 1);
        *(void *)char v10 = *(void *)v11;
        *((void *)v10 + 1) = v21;
        uint64_t v22 = *((void *)v11 + 3);
        *((void *)v10 + 2) = *((void *)v11 + 2);
        *((void *)v10 + 3) = v22;
        *((void *)v10 + 4) = *((void *)v11 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 7u:
      case 0xBu:
      case 0xDu:
        *(void *)char v10 = *(void *)v11;
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 8u:
        v8(v10, v11, v7);
        uint64_t v23 = type metadata accessor for PickExpression(0);
        *(void *)&v10[*(int *)(v23 + 20)] = *(void *)&v11[*(int *)(v23 + 20)];
        goto LABEL_18;
      case 0xAu:
        uint64_t v24 = *((void *)v11 + 1);
        *(void *)char v10 = *(void *)v11;
        *((void *)v10 + 1) = v24;
        v10[16] = v11[16];
        *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
        swift_bridgeObjectRetain();
        goto LABEL_18;
      case 0xEu:
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v11, 1, v7))
        {
          uint64_t v25 = sub_253462A5C(&qword_269CDB460);
          memcpy(v10, v11, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          v8(v10, v11, v7);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v7);
        }
LABEL_18:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
        break;
    }
    uint64_t v26 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    uint64_t v27 = &a1[v26];
    uint64_t v28 = &a2[v26];
    uint64_t v29 = sub_253B09150();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v28, 1, v29))
    {
      uint64_t v30 = sub_253462A5C(&qword_269CDCB30);
      memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v27, 0, 1, v29);
    }
  }
  return a1;
}

uint64_t destroy for ProgramStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B059D0();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Expression(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      sub_2534E43E0(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
      break;
    case 1u:
    case 8u:
    case 9u:
    case 0xCu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      goto LABEL_2;
    case 2u:
      uint64_t v8 = type metadata accessor for PrefixExpression(0);
      goto LABEL_7;
    case 3u:
      uint64_t v9 = type metadata accessor for InfixExpression(0);
      v5(v6 + *(int *)(v9 + 20), v4);
      uint64_t v10 = *(int *)(v9 + 24);
      goto LABEL_8;
    case 4u:
      v5(v6, v4);
      uint64_t v8 = type metadata accessor for IndexExpression(0);
LABEL_7:
      uint64_t v10 = *(int *)(v8 + 20);
LABEL_8:
      uint64_t v7 = v6 + v10;
      goto LABEL_9;
    case 5u:
      v5(v6, v4);
      type metadata accessor for UpdateParametersExpression(0);
      goto LABEL_12;
    case 6u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 7u:
    case 0xAu:
    case 0xBu:
    case 0xDu:
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    case 0xEu:
      if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, 1, v4))
      {
LABEL_2:
        uint64_t v7 = v6;
LABEL_9:
        v5(v7, v4);
      }
      break;
    default:
      break;
  }
  uint64_t v11 = a1 + *(int *)(a2 + 28);
  uint64_t v12 = sub_253B09150();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v11, 1, v12);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
    return v14(v11, v12);
  }
  return result;
}

uint64_t initializeWithCopy for ProgramStatement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Expression(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v12 = *(void *)v10;
      uint64_t v13 = *((void *)v10 + 1);
      char v14 = v10[16];
      sub_2534E4408(v12, v13, v14);
      *(void *)uint64_t v9 = v12;
      *((void *)v9 + 1) = v13;
      v9[16] = v14;
      goto LABEL_16;
    case 1u:
    case 9u:
    case 0xCu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      goto LABEL_16;
    case 2u:
      *uint64_t v9 = *v10;
      uint64_t v15 = type metadata accessor for PrefixExpression(0);
      v7((uint64_t)&v9[*(int *)(v15 + 20)], (uint64_t)&v10[*(int *)(v15 + 20)], v6);
      goto LABEL_16;
    case 3u:
      *uint64_t v9 = *v10;
      uint64_t v16 = type metadata accessor for InfixExpression(0);
      v7((uint64_t)&v9[*(int *)(v16 + 20)], (uint64_t)&v10[*(int *)(v16 + 20)], v6);
      v7((uint64_t)&v9[*(int *)(v16 + 24)], (uint64_t)&v10[*(int *)(v16 + 24)], v6);
      goto LABEL_16;
    case 4u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v17 = type metadata accessor for IndexExpression(0);
      v7((uint64_t)&v9[*(int *)(v17 + 20)], (uint64_t)&v10[*(int *)(v17 + 20)], v6);
      goto LABEL_16;
    case 5u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
      *(void *)&v9[*(int *)(updated + 20)] = *(void *)&v10[*(int *)(updated + 20)];
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 6u:
      uint64_t v19 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v19;
      uint64_t v20 = *((void *)v10 + 3);
      *((void *)v9 + 2) = *((void *)v10 + 2);
      *((void *)v9 + 3) = v20;
      *((void *)v9 + 4) = *((void *)v10 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 7u:
    case 0xBu:
    case 0xDu:
      *(void *)uint64_t v9 = *(void *)v10;
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 8u:
      v7((uint64_t)v9, (uint64_t)v10, v6);
      uint64_t v21 = type metadata accessor for PickExpression(0);
      *(void *)&v9[*(int *)(v21 + 20)] = *(void *)&v10[*(int *)(v21 + 20)];
      goto LABEL_16;
    case 0xAu:
      uint64_t v22 = *((void *)v10 + 1);
      *(void *)uint64_t v9 = *(void *)v10;
      *((void *)v9 + 1) = v22;
      v9[16] = v10[16];
      *(_WORD *)(v9 + 17) = *(_WORD *)(v10 + 17);
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 0xEu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v6))
      {
        uint64_t v23 = sub_253462A5C(&qword_269CDB460);
        memcpy(v9, v10, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v9, (uint64_t)v10, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
      }
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      break;
  }
  uint64_t v24 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v27 = sub_253B09150();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v26, 1, v27))
  {
    uint64_t v28 = sub_253462A5C(&qword_269CDCB30);
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v25, 0, 1, v27);
  }
  return a1;
}

uint64_t assignWithCopy for ProgramStatement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)(a1 + v8);
    uint64_t v10 = (char *)(a2 + v8);
    sub_2539DF610();
    uint64_t v11 = type metadata accessor for Expression(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v12 = *(void *)v10;
        uint64_t v13 = *((void *)v10 + 1);
        char v14 = v10[16];
        sub_2534E4408(v12, v13, v14);
        *uint64_t v9 = v12;
        v9[1] = v13;
        *((unsigned char *)v9 + 16) = v14;
        goto LABEL_17;
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
        goto LABEL_17;
      case 2u:
        *(unsigned char *)uint64_t v9 = *v10;
        uint64_t v15 = type metadata accessor for PrefixExpression(0);
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v9 + *(int *)(v15 + 20), &v10[*(int *)(v15 + 20)], v6);
        goto LABEL_17;
      case 3u:
        *(unsigned char *)uint64_t v9 = *v10;
        uint64_t v16 = type metadata accessor for InfixExpression(0);
        uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
        v17((char *)v9 + *(int *)(v16 + 20), &v10[*(int *)(v16 + 20)], v6);
        v17((char *)v9 + *(int *)(v16 + 24), &v10[*(int *)(v16 + 24)], v6);
        goto LABEL_17;
      case 4u:
        uint64_t v18 = *(void (**)(uint64_t *, char *, uint64_t))(v7 + 16);
        v18(v9, v10, v6);
        uint64_t v19 = type metadata accessor for IndexExpression(0);
        v18((uint64_t *)((char *)v9 + *(int *)(v19 + 20)), &v10[*(int *)(v19 + 20)], v6);
        goto LABEL_17;
      case 5u:
        (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
        uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
        *(uint64_t *)((char *)v9 + *(int *)(updated + 20)) = *(void *)&v10[*(int *)(updated + 20)];
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 6u:
        *uint64_t v9 = *(void *)v10;
        v9[1] = *((void *)v10 + 1);
        v9[2] = *((void *)v10 + 2);
        v9[3] = *((void *)v10 + 3);
        v9[4] = *((void *)v10 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 7u:
      case 0xBu:
      case 0xDu:
        *uint64_t v9 = *(void *)v10;
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 8u:
        (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
        uint64_t v21 = type metadata accessor for PickExpression(0);
        *(uint64_t *)((char *)v9 + *(int *)(v21 + 20)) = *(void *)&v10[*(int *)(v21 + 20)];
        goto LABEL_17;
      case 0xAu:
        *uint64_t v9 = *(void *)v10;
        v9[1] = *((void *)v10 + 1);
        *((unsigned char *)v9 + 16) = v10[16];
        *((unsigned char *)v9 + 17) = v10[17];
        *((unsigned char *)v9 + 18) = v10[18];
        swift_bridgeObjectRetain();
        goto LABEL_17;
      case 0xEu:
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v6))
        {
          uint64_t v22 = sub_253462A5C(&qword_269CDB460);
          memcpy(v9, v10, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
        }
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        break;
    }
  }
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  uint64_t v26 = sub_253B09150();
  int v27 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v24, 1, v26);
  int v28 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v25, 1, v26);
  if (!v27)
  {
    uint64_t v29 = *(void *)(v26 - 8);
    if (!v28)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 24))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v24, v26);
    goto LABEL_23;
  }
  if (v28)
  {
LABEL_23:
    uint64_t v30 = sub_253462A5C(&qword_269CDCB30);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v24, 0, 1, v26);
  return a1;
}

unsigned char *initializeWithTake for ProgramStatement(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Expression(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 9u:
    case 0xCu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      v7(v9, v10, v6);
      goto LABEL_12;
    case 2u:
      *uint64_t v9 = *v10;
      uint64_t v12 = type metadata accessor for PrefixExpression(0);
      v7(&v9[*(int *)(v12 + 20)], &v10[*(int *)(v12 + 20)], v6);
      goto LABEL_12;
    case 3u:
      *uint64_t v9 = *v10;
      uint64_t v13 = type metadata accessor for InfixExpression(0);
      v7(&v9[*(int *)(v13 + 20)], &v10[*(int *)(v13 + 20)], v6);
      v7(&v9[*(int *)(v13 + 24)], &v10[*(int *)(v13 + 24)], v6);
      goto LABEL_12;
    case 4u:
      v7(v9, v10, v6);
      uint64_t v14 = type metadata accessor for IndexExpression(0);
      v7(&v9[*(int *)(v14 + 20)], &v10[*(int *)(v14 + 20)], v6);
      goto LABEL_12;
    case 5u:
      v7(v9, v10, v6);
      uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
      *(void *)&v9[*(int *)(updated + 20)] = *(void *)&v10[*(int *)(updated + 20)];
      goto LABEL_12;
    case 8u:
      v7(v9, v10, v6);
      uint64_t v16 = type metadata accessor for PickExpression(0);
      *(void *)&v9[*(int *)(v16 + 20)] = *(void *)&v10[*(int *)(v16 + 20)];
      goto LABEL_12;
    case 0xEu:
      if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v6))
      {
        uint64_t v17 = sub_253462A5C(&qword_269CDB460);
        memcpy(v9, v10, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        v7(v9, v10, v6);
        _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      break;
  }
  uint64_t v18 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_253B09150();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21))
  {
    uint64_t v22 = sub_253462A5C(&qword_269CDCB30);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for ProgramStatement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (unsigned char *)(a1 + v8);
    uint64_t v10 = (unsigned char *)(a2 + v8);
    sub_2539DF610();
    uint64_t v11 = type metadata accessor for Expression(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 9u:
      case 0xCu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v10, v6);
        goto LABEL_13;
      case 2u:
        *uint64_t v9 = *v10;
        uint64_t v12 = type metadata accessor for PrefixExpression(0);
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(&v9[*(int *)(v12 + 20)], &v10[*(int *)(v12 + 20)], v6);
        goto LABEL_13;
      case 3u:
        *uint64_t v9 = *v10;
        uint64_t v13 = type metadata accessor for InfixExpression(0);
        uint64_t v14 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32);
        v14(&v9[*(int *)(v13 + 20)], &v10[*(int *)(v13 + 20)], v6);
        v14(&v9[*(int *)(v13 + 24)], &v10[*(int *)(v13 + 24)], v6);
        goto LABEL_13;
      case 4u:
        uint64_t v15 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32);
        v15(v9, v10, v6);
        uint64_t v16 = type metadata accessor for IndexExpression(0);
        v15(&v9[*(int *)(v16 + 20)], &v10[*(int *)(v16 + 20)], v6);
        goto LABEL_13;
      case 5u:
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v10, v6);
        uint64_t updated = type metadata accessor for UpdateParametersExpression(0);
        *(void *)&v9[*(int *)(updated + 20)] = *(void *)&v10[*(int *)(updated + 20)];
        goto LABEL_13;
      case 8u:
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v10, v6);
        uint64_t v18 = type metadata accessor for PickExpression(0);
        *(void *)&v9[*(int *)(v18 + 20)] = *(void *)&v10[*(int *)(v18 + 20)];
        goto LABEL_13;
      case 0xEu:
        if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v6))
        {
          uint64_t v19 = sub_253462A5C(&qword_269CDB460);
          memcpy(v9, v10, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v10, v6);
          _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v6);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        break;
    }
  }
  uint64_t v20 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (const void *)(a2 + v20);
  uint64_t v23 = sub_253B09150();
  int v24 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v23 - 8);
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v21, v23);
    goto LABEL_19;
  }
  if (v25)
  {
LABEL_19:
    uint64_t v27 = sub_253462A5C(&qword_269CDCB30);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgramStatement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A19E6C);
}

uint64_t sub_253A19E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253A3C58C();
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
LABEL_10:
    return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
  }
  type metadata accessor for Expression(0);
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == v3)
  {
    sub_2535E263C();
LABEL_9:
    uint64_t v7 = v4 + v10;
    goto LABEL_10;
  }
  if (v3 != 253)
  {
    sub_253462A5C(&qword_269CDCB30);
    sub_2535E256C();
    goto LABEL_9;
  }
  unsigned int v11 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 24));
  if (v11 >= 2) {
    int v12 = ((v11 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v12 = -2;
  }
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for ProgramStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A19F58);
}

void sub_253A19F58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253A3C58C();
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    type metadata accessor for Expression(0);
    sub_253486600();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      sub_2535E272C();
    }
    else
    {
      if (a3 == 253)
      {
        *(unsigned char *)(v5 + *(int *)(a4 + 24)) = v4 + 2;
        return;
      }
      sub_253462A5C(&qword_269CDCB30);
      sub_2535E26E4();
    }
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v10, v11, v12, v13);
}

void sub_253A1A00C()
{
  sub_253B059D0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Expression(319);
    if (v1 <= 0x3F)
    {
      sub_253A0EB7C(319, &qword_26B24A370, MEMORY[0x263F80578]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t destroy for SpeechQuery()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SpeechQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SpeechQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SpeechQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechQuery(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeechQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpeechQuery()
{
  return &type metadata for SpeechQuery;
}

void *initializeBufferWithCopyOfBuffer for TextQuery(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TextQuery(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1A7BC);
}

uint64_t sub_253A1A7BC()
{
  return sub_253A21974();
}

uint64_t storeEnumTagSinglePayload for TextQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1A7E8);
}

void sub_253A1A7E8()
{
}

uint64_t sub_253A1A800()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionStepResults()
{
  return &type metadata for ExecutionStepResults;
}

uint64_t dispatch thunk of Executable.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Executable.variableName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Executable.variableDependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolParameterValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09120();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ToolParameterValue(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_253B09120();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for ToolParameterValue(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_253B09120();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ToolParameterValue(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s30IntelligenceFlowPlannerSupport14RequestContentO22SystemPromptResolutionV10UserActionOwtk_0(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_253B09120();
    sub_25346CAF4();
    sub_2534D8E14();
    v6();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ToolParameterValue(void *a1, const void *a2, uint64_t a3)
{
  return sub_253A1ACD4(a1, a2, a3);
}

void *sub_253A1ACD4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (sub_253A3CD90() == 1)
    {
      sub_253B09120();
      sub_25346CAF4();
      sub_2534D8E14();
      v6();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_253A1AD8C()
{
  uint64_t result = sub_253B09120();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GlobalToolIdentifier()
{
  return &type metadata for GlobalToolIdentifier;
}

void *initializeBufferWithCopyOfBuffer for Action(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v13 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = (void *)((char *)a1 + v17);
    uint64_t v19 = (void *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = v19[3];
    v18[2] = v19[2];
    v18[3] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Action(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = v18[3];
  v17[2] = v18[2];
  v17[3] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  *uint64_t v14 = *(void *)(a2 + v13);
  v14[1] = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[2] = *(void *)(v15 + 16);
  v14[3] = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[9];
  uint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  return a1;
}

uint64_t assignWithTake for Action(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = v20[3];
  v19[2] = v20[2];
  v19[3] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Action(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1B3F8);
}

uint64_t sub_253A1B3F8()
{
  sub_253A3C838();
  sub_253B059D0();
  sub_253486600();
  if (*(_DWORD *)(v3 + 84) != v1) {
    return sub_2534F89A0(*(void *)(v0 + *(int *)(v2 + 28)));
  }
  uint64_t v4 = sub_253A3D8DC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for Action(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1B478);
}

void sub_253A1B478(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253A3C58C();
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
  }
  else
  {
    *(void *)(v5 + *(int *)(a4 + 28)) = (v4 - 1);
  }
}

uint64_t sub_253A1B4F0()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Action.ParameterValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for ToolParameterValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_253B09120();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_253B06770();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v12, 1, v13))
    {
      uint64_t v14 = sub_253462A5C(&qword_269CDCB00);
      memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v11, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for Action.ParameterValue(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolParameterValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B06770();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v8(v5, v6);
  }
  return result;
}

void *initializeWithCopy for Action.ParameterValue(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for ToolParameterValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_253B09120();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_253B06770();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_253462A5C(&qword_269CDCB00);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

void *assignWithCopy for Action.ParameterValue(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    type metadata accessor for ToolParameterValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_253B09120();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B06770();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_11;
  }
  if (v12)
  {
LABEL_11:
    uint64_t v14 = sub_253462A5C(&qword_269CDCB00);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  return a1;
}

char *initializeWithTake for Action.ParameterValue(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ToolParameterValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_253B09120();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_253B06770();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_253462A5C(&qword_269CDCB00);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

char *assignWithTake for Action.ParameterValue(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    uint64_t v6 = type metadata accessor for ToolParameterValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_253B09120();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_253B06770();
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v11);
  int v13 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_10;
  }
  if (v13)
  {
LABEL_10:
    uint64_t v15 = sub_253462A5C(&qword_269CDCB00);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Action.ParameterValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1BF50);
}

uint64_t sub_253A1BF50()
{
  uint64_t v1 = sub_2534D8D00();
  type metadata accessor for ToolParameterValue(v1);
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v0)
  {
    uint64_t v3 = sub_253945320();
  }
  else
  {
    sub_253462A5C(&qword_269CDCB00);
    uint64_t v3 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v0, v4);
}

uint64_t storeEnumTagSinglePayload for Action.ParameterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1BFD0);
}

uint64_t sub_253A1BFD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A1BFF0(a1, a2, a3, a4, (uint64_t)type metadata accessor for ToolParameterValue, &qword_269CDCB00);
}

uint64_t sub_253A1BFF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = sub_2534D8D00();
  v9(v8);
  sub_253486600();
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253462A5C(a6);
    sub_253A3C36C();
  }
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, v12, v13, v14);
}

void sub_253A1C070(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionCancellation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_253462A5C(&qword_269CDB460);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      uint64_t v9 = *(void *)(v7 - 8);
    }
    else
    {
      uint64_t v9 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v7);
  }
  return a1;
}

uint64_t destroy for ActionCancellation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B059D0();
  int v5 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  if (!v5) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  return v8(v7, v4);
}

char *initializeWithCopy for ActionCancellation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    uint64_t v8 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 - 8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

char *assignWithCopy for ActionCancellation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = sub_253462A5C(&qword_269CDB460);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      uint64_t v10 = *(void *)(v6 - 8);
    }
    else
    {
      uint64_t v10 = *(void *)(v6 - 8);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v6 - 8);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v6);
      uint64_t v11 = sub_253462A5C(&qword_269CDB460);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(a1, a2, v6);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

char *initializeWithTake for ActionCancellation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C(&qword_269CDB460);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    uint64_t v8 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 - 8);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

char *assignWithTake for ActionCancellation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = sub_253462A5C(&qword_269CDB460);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      uint64_t v10 = *(void *)(v6 - 8);
    }
    else
    {
      uint64_t v10 = *(void *)(v6 - 8);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v6 - 8);
    if (v8)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v6);
      uint64_t v11 = sub_253462A5C(&qword_269CDB460);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(a1, a2, v6);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionCancellation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1C8A0);
}

uint64_t sub_253A1C8A0()
{
  sub_2534DA0C4();
  sub_253462A5C(&qword_269CDB460);
  sub_253486600();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    uint64_t v2 = sub_253945320();
  }
  else
  {
    sub_253B059D0();
    uint64_t v2 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v2, v0, v3);
}

uint64_t storeEnumTagSinglePayload for ActionCancellation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1C924);
}

uint64_t sub_253A1C924()
{
  sub_253A3C6F8();
  sub_253462A5C(&qword_269CDB460);
  sub_253486600();
  if (*(_DWORD *)(v1 + 84) == v0)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253B059D0();
    sub_253A3C36C();
  }
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, v3, v4, v5);
}

void sub_253A1C994()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411C8, MEMORY[0x263F4BF98]);
  if (v0 <= 0x3F)
  {
    sub_253B059D0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)a1 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ClientAction(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)(a1 + v13);
  uint64_t v18 = (void *)(a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ClientAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for ClientAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1D07C);
}

uint64_t sub_253A1D07C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A2C0F4(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for ClientAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1D0A8);
}

void sub_253A1D0A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A1D0C0()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientAction.ShimParameterResolution(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = sub_253B09120();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ClientAction.ShimParameterResolution(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = sub_253B09120();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for ClientAction.UnresolvedParameterValue(0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ClientAction.ShimParameterResolution(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
    *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ClientAction.ShimParameterResolution(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
      *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ClientAction.ShimParameterResolution(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
    *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ClientAction.ShimParameterResolution(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for ClientAction.UnresolvedParameterValue(0);
      *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_253A1D638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A2693C(a1, a2, a3, type metadata accessor for ClientAction.UnresolvedParameterValue);
}

uint64_t initializeBufferWithCopyOfBuffer for ClientAction.ShimParameter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = a2[4];
      swift_bridgeObjectRetain();
      if (v10 == 1)
      {
        long long v11 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 32) = v11;
        *(void *)(a1 + 48) = a2[6];
      }
      else
      {
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v10;
        uint64_t v13 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v12 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ClientAction.ShimParameter(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(a1 + 32);
      if (result == 1) {
        return result;
      }
      swift_bridgeObjectRelease();
      break;
    case 1:
      break;
    case 0:
      uint64_t v3 = sub_253B09120();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    default:
      return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientAction.ShimParameter(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    uint64_t v7 = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v8;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }
    else
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v7;
      uint64_t v10 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = sub_253B09120();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ClientAction.ShimParameter(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v5 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (v5 == 1)
      {
        long long v6 = *(_OWORD *)(a2 + 16);
        long long v7 = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = v7;
      }
      else
      {
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = sub_253B09120();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ClientAction.ShimParameter(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_253B09120();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ClientAction.ShimParameter(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_253B09120();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_253A1DCC8()
{
  return sub_253A2103C();
}

uint64_t destroy for ClientAction.PersonQuery(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 32);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ClientAction.PersonQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v6;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v5;
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for ClientAction.PersonQuery(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 16);
  uint64_t v5 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      long long v8 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *uint64_t v4 = v7;
      *(_OWORD *)(a1 + 32) = v8;
    }
    else
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_253A1DF10(a1 + 16);
    uint64_t v9 = *(void *)(a2 + 48);
    long long v10 = *(_OWORD *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 32) = v10;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t sub_253A1DF10(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ClientAction.PersonQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    if (v5 != 1)
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v5;
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_253A1DF10(a1 + 16);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientAction.PersonQuery(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientAction.PersonQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery()
{
  return &type metadata for ClientAction.PersonQuery;
}

uint64_t initializeWithCopy for ClientAction.PersonQuery.Handle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientAction.PersonQuery.Handle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClientAction.PersonQuery.Handle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle()
{
  return &type metadata for ClientAction.PersonQuery.Handle;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.Kind()
{
  return &type metadata for ClientAction.PersonQuery.Handle.Kind;
}

uint64_t initializeBufferWithCopyOfBuffer for ClientAction.UnresolvedParameterValue(uint64_t a1, uint64_t *a2)
{
  return sub_253A1F324(a1, a2);
}

uint64_t destroy for ClientAction.UnresolvedParameterValue()
{
  return sub_253A1F3B8();
}

uint64_t initializeWithCopy for ClientAction.UnresolvedParameterValue()
{
  return sub_253A1F420();
}

uint64_t assignWithCopy for ClientAction.UnresolvedParameterValue()
{
  return sub_253A1F488();
}

uint64_t initializeWithTake for ClientAction.UnresolvedParameterValue()
{
  return sub_253A1F4FC();
}

uint64_t assignWithTake for ClientAction.UnresolvedParameterValue()
{
  return sub_253A1F560();
}

uint64_t getEnumTagSinglePayload for ClientAction.UnresolvedParameterValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1E284);
}

uint64_t sub_253A1E284(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A278AC(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for ClientAction.UnresolvedParameterValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1E2B0);
}

void sub_253A1E2B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A1E2C8()
{
  return sub_253A1F620();
}

uint64_t initializeBufferWithCopyOfBuffer for QueryStep(uint64_t a1, uint64_t *a2)
{
  return sub_253A1F324(a1, a2);
}

uint64_t destroy for QueryStep()
{
  return sub_253A1F3B8();
}

uint64_t initializeWithCopy for QueryStep()
{
  return sub_253A1F420();
}

uint64_t assignWithCopy for QueryStep()
{
  return sub_253A1F488();
}

uint64_t initializeWithTake for QueryStep()
{
  return sub_253A1F4FC();
}

uint64_t assignWithTake for QueryStep()
{
  return sub_253A1F560();
}

uint64_t getEnumTagSinglePayload for QueryStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1E390);
}

uint64_t sub_253A1E390(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A278AC(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for QueryStep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1E3BC);
}

void sub_253A1E3BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A1E3D4()
{
  return sub_253A1F620();
}

uint64_t *initializeBufferWithCopyOfBuffer for ParameterQuery(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for ActionParameterContext(0);
    uint64_t v9 = *(int *)(v8 + 20);
    long long v10 = (uint64_t *)((char *)a1 + v9);
    long long v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *long long v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = *(int *)(v8 + 24);
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = v15[3];
    v14[2] = v15[2];
    v14[3] = v17;
    uint64_t v18 = a3[5];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    type metadata accessor for QueryData(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v21 = *((void *)v20 + 1);
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = v21;
        goto LABEL_6;
      case 2u:
        type metadata accessor for PropertyQuery(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *(void *)uint64_t v19 = *(void *)v20;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v24 = *((void *)v20 + 1);
          *(void *)uint64_t v19 = *(void *)v20;
          *((void *)v19 + 1) = v24;
          v19[16] = v20[16];
          uint64_t v25 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
          uint64_t v33 = &v20[v25];
          int v34 = &v19[v25];
          uint64_t v26 = sub_253B09120();
          uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
          swift_bridgeObjectRetain();
          v32(v34, v33, v26);
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)uint64_t v19 = *(void *)v20;
LABEL_6:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v28 = (uint64_t *)((char *)a1 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    *int v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ParameterQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for ActionParameterContext(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for QueryData(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 3u:
      goto LABEL_6;
    case 2u:
      type metadata accessor for PropertyQuery(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
LABEL_6:
        swift_bridgeObjectRelease();
      }
      else if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = v5 + *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v8 = sub_253B09120();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      }
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParameterQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ActionParameterContext(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  long long v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = *(int *)(v7 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  uint64_t v17 = a3[5];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  type metadata accessor for QueryData(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 3u:
      uint64_t v20 = *(void *)(v19 + 8);
      *(void *)uint64_t v18 = *(void *)v19;
      *(void *)(v18 + 8) = v20;
      goto LABEL_4;
    case 2u:
      type metadata accessor for PropertyQuery(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *(void *)uint64_t v18 = *(void *)v19;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v22 = *(void *)(v19 + 8);
        *(void *)uint64_t v18 = *(void *)v19;
        *(void *)(v18 + 8) = v22;
        *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
        uint64_t v23 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v31 = v19 + v23;
        uint64_t v32 = v18 + v23;
        uint64_t v24 = sub_253B09120();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        v30(v32, v31, v24);
      }
      swift_storeEnumTagMultiPayload();
      break;
    default:
      *(void *)uint64_t v18 = *(void *)v19;
LABEL_4:
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParameterQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ActionParameterContext(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  long long v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(v7 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  *uint64_t v12 = *(void *)(a2 + v11);
  v12[1] = *(void *)(a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = *(void *)(v13 + 16);
  v12[3] = *(void *)(v13 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v14 = a3[5];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = a2 + v14;
    sub_2539DF610();
    type metadata accessor for QueryData(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        *(void *)uint64_t v15 = *(void *)v16;
        *(void *)(v15 + 8) = *(void *)(v16 + 8);
        goto LABEL_5;
      case 2u:
        type metadata accessor for PropertyQuery(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *(void *)uint64_t v15 = *(void *)v16;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(void *)uint64_t v15 = *(void *)v16;
          *(void *)(v15 + 8) = *(void *)(v16 + 8);
          *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
          uint64_t v18 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
          uint64_t v25 = v16 + v18;
          uint64_t v26 = v15 + v18;
          uint64_t v19 = sub_253B09120();
          uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
          swift_bridgeObjectRetain();
          v24(v26, v25, v19);
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)uint64_t v15 = *(void *)v16;
LABEL_5:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ParameterQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ActionParameterContext(0);
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (_OWORD *)(a1 + v8);
  long long v10 = (_OWORD *)(a2 + v8);
  long long v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a3[5];
  uint64_t v13 = (unsigned char *)(a1 + v12);
  uint64_t v14 = (unsigned char *)(a2 + v12);
  uint64_t Data = type metadata accessor for QueryData(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v16 = type metadata accessor for PropertyQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      v13[16] = v14[16];
      uint64_t v17 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
      uint64_t v18 = &v13[v17];
      uint64_t v19 = &v14[v17];
      uint64_t v20 = sub_253B09120();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(Data - 8) + 64));
  }
  uint64_t v21 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  return a1;
}

uint64_t assignWithTake for ParameterQuery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for ActionParameterContext(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  long long v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(v7 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 8);
  *uint64_t v14 = *(void *)(a2 + v13);
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v15 + 24);
  v14[2] = *(void *)(v15 + 16);
  v14[3] = v17;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v18 = a3[5];
    uint64_t v19 = (unsigned char *)(a1 + v18);
    uint64_t v20 = (unsigned char *)(a2 + v18);
    sub_2539DF610();
    uint64_t Data = type metadata accessor for QueryData(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v22 = type metadata accessor for PropertyQuery(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
        v19[16] = v20[16];
        uint64_t v23 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v24 = &v19[v23];
        uint64_t v25 = &v20[v23];
        uint64_t v26 = sub_253B09120();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(Data - 8) + 64));
    }
  }
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParameterQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1F170);
}

uint64_t sub_253A1F170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2534D8D00();
  type metadata accessor for ActionParameterContext(v6);
  sub_253486600();
  if (*(_DWORD *)(v7 + 84) == v3)
  {
    uint64_t v8 = sub_253945320();
  }
  else
  {
    type metadata accessor for QueryData(0);
    sub_253486600();
    if (*(_DWORD *)(v10 + 84) != v3) {
      return sub_2534F89A0(*(void *)(v4 + *(int *)(a3 + 24)));
    }
    uint64_t v8 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, v3, v9);
}

uint64_t storeEnumTagSinglePayload for ParameterQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1F218);
}

void sub_253A1F218(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A1F244()
{
  uint64_t result = type metadata accessor for ActionParameterContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for QueryData(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_253A1F324(uint64_t a1, uint64_t *a2)
{
  sub_2535782A8();
  if ((*(_DWORD *)(v6 + 80) & 0x20000) != 0)
  {
    sub_2539442C0(*a2);
  }
  else
  {
    uint64_t v7 = v4;
    v5(0);
    sub_25346CAF4();
    sub_2534B3428();
    v8();
    *(void *)(a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_253A1F3B8()
{
  uint64_t v0 = sub_253578A1C();
  v1(v0);
  sub_25346CAF4();
  sub_2534659CC();
  v2();
  return swift_bridgeObjectRelease();
}

uint64_t sub_253A1F420()
{
  uint64_t v3 = sub_253A3C310();
  v4(v3);
  sub_25346CAF4();
  sub_2534B3428();
  v5();
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_253A1F488()
{
  uint64_t v3 = sub_253A3C310();
  v4(v3);
  sub_25346CAF4();
  sub_253944540();
  v5();
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_253A1F4FC()
{
  uint64_t v3 = sub_253A3C310();
  v4(v3);
  sub_25346CAF4();
  sub_2534D8E14();
  v5();
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  return v2;
}

uint64_t sub_253A1F560()
{
  uint64_t v3 = sub_253A3C310();
  v4(v3);
  sub_25346CAF4();
  sub_253944438();
  v5();
  *(void *)(v2 + *(int *)(v0 + 20)) = *(void *)(v1 + *(int *)(v0 + 20));
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t getEnumTagSinglePayload for VariableStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1F5DC);
}

uint64_t sub_253A1F5DC(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A278AC(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for VariableStep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A1F608);
}

void sub_253A1F608(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A1F620()
{
  uint64_t v0 = sub_2539461BC();
  uint64_t result = v1(v0);
  if (v3 <= 0x3F)
  {
    sub_253A3B808(result);
    sub_253A3C6D8();
    return sub_2535E2578();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExecutionStepResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B05AB0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(type metadata accessor for ActionResult(0) + 20);
    uint64_t v13 = &v9[v12];
    uint64_t v14 = &v10[v12];
    uint64_t v15 = sub_253B06820();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = sub_253462A5C(&qword_269CDBB28);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for ExecutionStepResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v8 = sub_253B06820();
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t initializeWithCopy for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v12 = (void *)(v8 + v11);
  uint64_t v13 = (const void *)(v9 + v11);
  uint64_t v14 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v12 = (void *)(v8 + v11);
  uint64_t v13 = (const void *)(v9 + v11);
  uint64_t v14 = sub_253B06820();
  int v15 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t initializeWithTake for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v12 = (void *)(v8 + v11);
  uint64_t v13 = (const void *)(v9 + v11);
  uint64_t v14 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v12 = (void *)(v8 + v11);
  uint64_t v13 = (const void *)(v9 + v11);
  uint64_t v14 = sub_253B06820();
  int v15 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v12, 1, v14);
  int v16 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v13, 1, v14);
  if (!v15)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A1FFF8);
}

uint64_t sub_253A1FFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27DA8(a1, a2, a3, MEMORY[0x263F07508], (void (*)(void))type metadata accessor for ActionResult);
}

uint64_t storeEnumTagSinglePayload for ExecutionStepResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A20038);
}

uint64_t sub_253A20038(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A27E58(a1, a2, a3, a4, MEMORY[0x263F07508], (void (*)(void))type metadata accessor for ActionResult);
}

uint64_t sub_253A20064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A283AC(a1, a2, a3, MEMORY[0x263F07508], type metadata accessor for ActionResult);
}

uint64_t initializeBufferWithCopyOfBuffer for QueryData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *(void *)a1 = *a2;
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v7;
        swift_bridgeObjectRetain();
        break;
      case 2u:
        type metadata accessor for PropertyQuery(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *(void *)a1 = *a2;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v9 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v9;
          *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
          uint64_t v10 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
          uint64_t v11 = a1 + v10;
          uint64_t v12 = (uint64_t)a2 + v10;
          uint64_t v13 = sub_253B09120();
          uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
          swift_bridgeObjectRetain();
          v14(v11, v12, v13);
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)a1 = *a2;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for QueryData(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 3:
      goto LABEL_8;
    case 2:
      type metadata accessor for PropertyQuery(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 2 || result == 1)
      {
LABEL_8:
        uint64_t result = swift_bridgeObjectRelease();
      }
      else if (!result)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = a1 + *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v4 = sub_253B09120();
        int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
        uint64_t result = v5(v3, v4);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for QueryData(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 3u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      goto LABEL_4;
    case 2u:
      type metadata accessor for PropertyQuery(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v6 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v6;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        uint64_t v7 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v12 = a2 + v7;
        uint64_t v9 = sub_253B09120();
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
        swift_bridgeObjectRetain();
        v10(v8, v12, v9);
      }
      swift_storeEnumTagMultiPayload();
      break;
    default:
      *(void *)a1 = *(void *)a2;
LABEL_4:
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for QueryData(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        goto LABEL_5;
      case 2u:
        type metadata accessor for PropertyQuery(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *(void *)a1 = *(void *)a2;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
          uint64_t v5 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
          uint64_t v6 = a1 + v5;
          uint64_t v10 = a2 + v5;
          uint64_t v7 = sub_253B09120();
          uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
          swift_bridgeObjectRetain();
          v8(v6, v10, v7);
        }
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)a1 = *(void *)a2;
LABEL_5:
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *initializeWithTake for QueryData(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = type metadata accessor for PropertyQuery(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      uint64_t v7 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = sub_253B09120();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *assignWithTake for QueryData(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = type metadata accessor for PropertyQuery(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        uint64_t v7 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
        uint64_t v8 = &a1[v7];
        uint64_t v9 = &a2[v7];
        uint64_t v10 = sub_253B09120();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_253A20960()
{
  uint64_t result = type metadata accessor for PropertyQuery(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PropertyQuery(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = v7 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v9 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      uint64_t v12 = sub_253B09120();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PropertyQuery(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for QueryPredicate(0) + 24);
    uint64_t v4 = sub_253B09120();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PropertyQuery(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    *(void *)a1 = *(void *)a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v6 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_253B09120();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for PropertyQuery(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v5 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = sub_253B09120();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *initializeWithTake for PropertyQuery(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[16] = a2[16];
    uint64_t v6 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    uint64_t v9 = sub_253B09120();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *assignWithTake for PropertyQuery(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      uint64_t v6 = *(int *)(type metadata accessor for QueryPredicate(0) + 24);
      uint64_t v7 = &a1[v6];
      uint64_t v8 = &a2[v6];
      uint64_t v9 = sub_253B09120();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_253A21014()
{
  return sub_253A2103C();
}

uint64_t sub_253A2103C()
{
  uint64_t v0 = sub_2539461BC();
  uint64_t result = v1(v0);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return sub_2535E2578();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for VariableSetter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_253B09120();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for VariableSetter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B09120();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for VariableSetter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B09120();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for VariableSetter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09120();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for VariableSetter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_253B09120();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for VariableSetter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B09120();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for VariableSetter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A21478);
}

uint64_t sub_253A21478()
{
  sub_2535E2298();
  if (v1) {
    return sub_2534F89A0(*v0);
  }
  sub_253B09120();
  uint64_t v3 = sub_2534F8890();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for VariableSetter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A214F4);
}

void sub_253A214F4()
{
  sub_2535E2244();
  if (v0)
  {
    sub_2535E2538();
  }
  else
  {
    sub_253B09120();
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v4);
  }
}

uint64_t sub_253A21560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A25C54(a1, a2, a3, MEMORY[0x263F8CF50] + 64, MEMORY[0x263F80508]);
}

void *initializeBufferWithCopyOfBuffer for QueryPredicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = sub_253B09120();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for QueryPredicate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_253B09120();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_253B09120();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2195C);
}

uint64_t sub_253A2195C()
{
  return sub_253A21974();
}

uint64_t sub_253A21974()
{
  sub_2535E2298();
  if (v3) {
    return sub_2534F89A0(*(void *)(v0 + 8));
  }
  uint64_t v5 = v1;
  v2(0);
  uint64_t v6 = sub_2535E22C8(*(int *)(v5 + 24));
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A219FC);
}

void sub_253A219FC()
{
}

void sub_253A21A14()
{
  sub_2535E2244();
  if (v1)
  {
    sub_2535E24BC();
  }
  else
  {
    v0(0);
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v2, v3, v4, v5);
  }
}

uint64_t sub_253A21A84()
{
  uint64_t result = sub_253B09120();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for QueryOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A21BF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryOperator()
{
  return &type metadata for QueryOperator;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionParameterContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = v14[3];
    v13[2] = v14[2];
    v13[3] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ActionParameterContext(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = v13[3];
  v12[2] = v13[2];
  v12[3] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  v11[3] = v12[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A220A8);
}

uint64_t sub_253A220A8(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A2C0F4(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for ActionParameterContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A220D4);
}

void sub_253A220D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_253A220EC()
{
  return sub_253A2C224();
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionStepResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = a3[6];
    uint64_t v12 = (uint64_t *)((char *)a1 + v10);
    uint64_t v13 = (uint64_t *)((char *)a2 + v10);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = (char *)a1 + v11;
    uint64_t v16 = (char *)a2 + v11;
    uint64_t v17 = sub_253B05AB0();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
    uint64_t v19 = *(int *)(type metadata accessor for ActionResult(0) + 20);
    uint64_t v20 = &v15[v19];
    uint64_t v21 = &v16[v19];
    uint64_t v22 = sub_253B06820();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v21, 1, v22))
    {
      uint64_t v23 = sub_253462A5C(&qword_269CDBB28);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v20, 0, 1, v22);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ActionStepResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_253B05AB0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v8 = sub_253B06820();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ActionStepResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  uint64_t v15 = sub_253B05AB0();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v18 = &v13[v17];
  uint64_t v19 = &v14[v17];
  uint64_t v20 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 0, 1, v20);
  }
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ActionStepResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_253B05AB0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v19 = &v15[v18];
  uint64_t v20 = &v16[v18];
  uint64_t v21 = sub_253B06820();
  int v22 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v19, 1, v21);
  int v23 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v20, 1, v21);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v21 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v19, 0, 1, v21);
LABEL_13:
  uint64_t v26 = a3[7];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)uint64_t v27 = *(void *)v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ActionStepResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_253B05AB0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ActionStepResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = sub_253B05AB0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = *(int *)(type metadata accessor for ActionResult(0) + 20);
  uint64_t v21 = &v17[v20];
  int v22 = &v18[v20];
  uint64_t v23 = sub_253B06820();
  int v24 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v21, 1, v23);
  int v25 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v23);
  if (!v24)
  {
    uint64_t v26 = *(void *)(v23 - 8);
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v27 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v21, v22, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v23);
LABEL_13:
  uint64_t v28 = a3[7];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionStepResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A22EC8);
}

uint64_t sub_253A22EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2534DA0C4();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    if (v3 == 0x7FFFFFFF) {
      return sub_2534F89A0(*(void *)(v4 + *(int *)(a3 + 20) + 8));
    }
    uint64_t v8 = type metadata accessor for ActionResult(0);
    uint64_t v7 = v4 + *(int *)(a3 + 24);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for ActionStepResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A22F80);
}

void sub_253A22F80()
{
  sub_253A3C6F8();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    sub_253944FD8();
  }
  else
  {
    if (v1 == 0x7FFFFFFF)
    {
      sub_253A3D704(*(int *)(v0 + 20));
      return;
    }
    type metadata accessor for ActionResult(0);
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, v4, v5, v6);
}

void sub_253A23018()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActionResult(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StatementResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v7);
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_253B06850();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
    uint64_t v15 = &v11[v14];
    uint64_t v16 = &v12[v14];
    uint64_t v17 = sub_253B06820();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = sub_253462A5C(&qword_269CDBB28);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v19 = a3[6];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_253B059D0();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    v23(v20, v21, v22);
    v23((char *)a1 + a3[7], (char *)a2 + a3[7], v22);
    v23((char *)a1 + a3[8], (char *)a2 + a3[8], v22);
    uint64_t v24 = a3[9];
    int v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    if (v27)
    {
      *int v25 = *v26;
      v25[1] = v27;
      uint64_t v28 = v26[3];
      v25[2] = v26[2];
      v25[3] = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v29 = *((_OWORD *)v26 + 1);
      *(_OWORD *)int v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v29;
    }
  }
  return a1;
}

uint64_t destroy for StatementResult(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  uint64_t v8 = sub_253B06820();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + a2[6];
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(a1 + a2[7], v10);
  v11(a1 + a2[8], v10);
  uint64_t result = *(void *)(a1 + a2[9] + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for StatementResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_253B06850();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = sub_253B059D0();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v21(&a1[a3[7]], &a2[a3[7]], v20);
  v21(&a1[a3[8]], &a2[a3[8]], v20);
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  if (v25)
  {
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    uint64_t v26 = *((void *)v24 + 3);
    *((void *)v23 + 2) = *((void *)v24 + 2);
    *((void *)v23 + 3) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v27;
  }
  return a1;
}

char *assignWithCopy for StatementResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = sub_253B06850();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  uint64_t v18 = sub_253B06820();
  int v19 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v16, 1, v18);
  int v20 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v21 = *(void *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
LABEL_12:
    uint64_t v22 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v16, v17, v18);
LABEL_13:
  uint64_t v23 = a3[6];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = sub_253B059D0();
  long long v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24);
  v27(v24, v25, v26);
  v27(&a1[a3[7]], &a2[a3[7]], v26);
  v27(&a1[a3[8]], &a2[a3[8]], v26);
  uint64_t v28 = a3[9];
  long long v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = *(void *)&a1[v28 + 8];
  uint64_t v32 = *((void *)v30 + 1);
  if (v31)
  {
    if (v32)
    {
      *(void *)long long v29 = *(void *)v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v29 + 2) = *((void *)v30 + 2);
      *((void *)v29 + 3) = *((void *)v30 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_25394B3D4((uint64_t)v29);
      long long v33 = *((_OWORD *)v30 + 1);
      *(_OWORD *)long long v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v33;
    }
  }
  else if (v32)
  {
    *(void *)long long v29 = *(void *)v30;
    *((void *)v29 + 1) = *((void *)v30 + 1);
    *((void *)v29 + 2) = *((void *)v30 + 2);
    *((void *)v29 + 3) = *((void *)v30 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v34 = *((_OWORD *)v30 + 1);
    *(_OWORD *)long long v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v34;
  }
  return a1;
}

char *initializeWithTake for StatementResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6))
  {
    uint64_t v7 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_253B06850();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_253B06820();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  int v19 = &a2[v17];
  uint64_t v20 = sub_253B059D0();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v21(&a1[a3[7]], &a2[a3[7]], v20);
  v21(&a1[a3[8]], &a2[a3[8]], v20);
  uint64_t v22 = a3[9];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  return a1;
}

char *assignWithTake for StatementResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  int v7 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1, 1, v6);
  int v8 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = sub_253B06850();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = *(int *)(type metadata accessor for StatementResultPayload(0) + 20);
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  uint64_t v18 = sub_253B06820();
  int v19 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v16, 1, v18);
  int v20 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v16, 0, 1, v18);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v21 = *(void *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
LABEL_12:
    uint64_t v22 = sub_253462A5C(&qword_269CDBB28);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
LABEL_13:
  uint64_t v23 = a3[6];
  uint64_t v24 = &a1[v23];
  long long v25 = &a2[v23];
  uint64_t v26 = sub_253B059D0();
  long long v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40);
  v27(v24, v25, v26);
  v27(&a1[a3[7]], &a2[a3[7]], v26);
  v27(&a1[a3[8]], &a2[a3[8]], v26);
  uint64_t v28 = a3[9];
  uint64_t v29 = (uint64_t)&a1[v28];
  uint64_t v30 = &a2[v28];
  if (!*(void *)&a1[v28 + 8])
  {
LABEL_17:
    long long v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *(_OWORD *)(v29 + 16) = v33;
    return a1;
  }
  uint64_t v31 = *((void *)v30 + 1);
  if (!v31)
  {
    sub_25394B3D4(v29);
    goto LABEL_17;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  *(void *)(v29 + 8) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *((void *)v30 + 3);
  *(void *)(v29 + 16) = *((void *)v30 + 2);
  *(void *)(v29 + 24) = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StatementResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A24264);
}

uint64_t sub_253A24264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2534DA0C4();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    type metadata accessor for StatementResultPayload(0);
    sub_253486600();
    if (*(_DWORD *)(v9 + 84) == v3)
    {
      sub_2535E263C();
    }
    else
    {
      sub_253B059D0();
      sub_253486600();
      if (*(_DWORD *)(v11 + 84) != v3) {
        return sub_253A3BE38(*(int *)(a3 + 36));
      }
      sub_2535E2560();
    }
    uint64_t v7 = v4 + v10;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for StatementResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A24334);
}

void sub_253A24334()
{
  sub_253A3C6F8();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    sub_253944FD8();
  }
  else
  {
    type metadata accessor for StatementResultPayload(0);
    sub_253486600();
    if (*(_DWORD *)(v3 + 84) == v1)
    {
      sub_2535E272C();
    }
    else
    {
      sub_253B059D0();
      sub_253486600();
      if (*(_DWORD *)(v4 + 84) != v1)
      {
        sub_253945524(*(int *)(v0 + 36));
        return;
      }
      sub_2535E26D8();
    }
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, v6, v7, v8);
}

void sub_253A243EC()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for StatementResultPayload(319);
    if (v1 <= 0x3F)
    {
      sub_253B059D0();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for StatementResultPayload(uint64_t a1, uint64_t *a2)
{
  return sub_253A26A34(a1, a2);
}

uint64_t destroy for StatementResultPayload(uint64_t a1, uint64_t a2)
{
  return sub_253A26B78(a1, a2, MEMORY[0x263F4C7E0], MEMORY[0x263F4C768]);
}

uint64_t initializeWithCopy for StatementResultPayload()
{
  return sub_253A26C74();
}

uint64_t assignWithCopy for StatementResultPayload()
{
  return sub_253A26D80();
}

uint64_t initializeWithTake for StatementResultPayload()
{
  return sub_253A26EC8();
}

uint64_t assignWithTake for StatementResultPayload()
{
  return sub_253A26FD4();
}

uint64_t getEnumTagSinglePayload for StatementResultPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2465C);
}

uint64_t sub_253A2465C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27118(a1, a2, a3, MEMORY[0x263F4C7E0], &qword_269CDBB28);
}

uint64_t storeEnumTagSinglePayload for StatementResultPayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A24690);
}

uint64_t sub_253A24690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A1BFF0(a1, a2, a3, a4, MEMORY[0x263F4C7E0], &qword_269CDBB28);
}

void sub_253A246B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

ValueMetadata *type metadata accessor for ResponseGenerationRequest()
{
  return &type metadata for ResponseGenerationRequest;
}

uint64_t *initializeBufferWithCopyOfBuffer for QueryStepResults(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_253B055C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t destroy for QueryStepResults(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_253B055C0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(v6, v7);
}

void *initializeWithCopy for QueryStepResults(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B059D0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_253B055C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

void *assignWithCopy for QueryStepResults(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B059D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_253B055C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

void *initializeWithTake for QueryStepResults(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B059D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_253B055C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void *assignWithTake for QueryStepResults(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B059D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_253B055C0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryStepResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A24C88);
}

uint64_t sub_253A24C88()
{
  sub_2535E2298();
  if (v2) {
    return sub_2534F89A0(*v0);
  }
  int v4 = v1;
  sub_253B059D0();
  sub_253486600();
  if (*(_DWORD *)(v5 + 84) == v4)
  {
    sub_2535E263C();
  }
  else
  {
    sub_253B055C0();
    sub_2535E2560();
  }
  uint64_t v7 = sub_2535E22C8(v6);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v8, v9);
}

uint64_t storeEnumTagSinglePayload for QueryStepResults(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A24D28);
}

void sub_253A24D28()
{
  sub_2535E2244();
  if (v1)
  {
    sub_2535E2538();
  }
  else
  {
    int v2 = v0;
    sub_253B059D0();
    sub_253486600();
    if (*(_DWORD *)(v3 + 84) == v2)
    {
      sub_2535E272C();
    }
    else
    {
      sub_253B055C0();
      sub_2535E26D8();
    }
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v4, v5, v6, v7);
  }
}

uint64_t sub_253A24DB4()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B055C0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryResults()
{
  return &type metadata for QueryResults;
}

void *initializeBufferWithCopyOfBuffer for Candidate(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B09120();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for Candidate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = sub_253B059D0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(v5, v6);
}

uint64_t initializeWithCopy for Candidate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for Candidate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for Candidate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for Candidate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Candidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A253F8);
}

uint64_t sub_253A253F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253A3D86C();
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    if (v3 == 248)
    {
      unsigned int v9 = *(unsigned __int8 *)(v4 + *(int *)(a3 + 20));
      if (v9 >= 8) {
        return v9 - 7;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = sub_253B059D0();
    uint64_t v7 = v4 + *(int *)(a3 + 28);
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for Candidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A254A4);
}

void sub_253A254A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_253A3D86C();
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    if (a3 == 248)
    {
      *(unsigned char *)(v5 + *(int *)(a4 + 20)) = v4 + 7;
      return;
    }
    sub_253B059D0();
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
}

uint64_t sub_253A25538()
{
  uint64_t result = sub_253B09120();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B059D0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Candidate.Source()
{
  return &type metadata for Candidate.Source;
}

ValueMetadata *type metadata accessor for Candidate.PromptStatus()
{
  return &type metadata for Candidate.PromptStatus;
}

uint64_t sub_253A25638(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Session.Transcript.MockError(uint64_t a1)
{
  return sub_253A25664(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_253A25664(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Session.Transcript.MockError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_253A25638(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for Session.Transcript.MockError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_253A25638(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_253A25664(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for Session.Transcript.MockError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_253A25664(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Session.Transcript.MockError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Session.Transcript.MockError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_253A25824(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_253A2583C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Session.Transcript.MockError()
{
  return &type metadata for Session.Transcript.MockError;
}

void _s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwCP_0()
{
  sub_2535B3C98();
  unint64_t v1 = v0;
  sub_2535782A8();
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    sub_2539442C0(*v2);
  }
  else
  {
    uint64_t v4 = v2[1];
    uint64_t *v1 = *v2;
    v1[1] = v4;
    sub_253B059D0();
    sub_25346CAF4();
    uint64_t v6 = *(void (**)(void))(v5 + 16);
    swift_bridgeObjectRetain();
    sub_253944AE4();
    v6();
  }
  sub_25346CD04();
}

uint64_t _s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwxx_0()
{
  sub_2534DA0C4();
  swift_bridgeObjectRelease();
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v0 = sub_2539446BC();
  return v1(v0);
}

void _s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwcp_0()
{
  sub_2535B3C98();
  uint64_t v1 = v0[1];
  *uint64_t v2 = *v0;
  v2[1] = v1;
  sub_253B059D0();
  sub_25346CAF4();
  uint64_t v4 = *(void (**)(void))(v3 + 16);
  swift_bridgeObjectRetain();
  sub_253944AE4();
  v4();
  sub_25346CD04();
}

uint64_t _s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwca_0()
{
  sub_253A3EAF4();
  *uint64_t v2 = *v1;
  *(void *)(v0 + 8) = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_2534F8578();
  sub_25346CAF4();
  sub_253944540();
  v3();
  return v0;
}

_OWORD *_s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwtk_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534D8E14();
  v3();
  return a1;
}

void *_s30IntelligenceFlowPlannerSupport22SpeechRequestCandidateVwta_0()
{
  sub_253A3EAF4();
  uint64_t v2 = v1[1];
  void *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRelease();
  sub_2534F8578();
  sub_25346CAF4();
  sub_253944438();
  v3();
  return v0;
}

uint64_t getEnumTagSinglePayload for SpeechRequestCandidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A25B64);
}

uint64_t sub_253A25B68()
{
  sub_2535E2298();
  if (v1) {
    return sub_2534F89A0(*(void *)(v0 + 8));
  }
  sub_253B059D0();
  uint64_t v3 = sub_2534F8890();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for SpeechRequestCandidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A25BE4);
}

void sub_253A25BE8()
{
  sub_2535E2244();
  if (v0)
  {
    sub_2535E24BC();
  }
  else
  {
    sub_253B059D0();
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v4);
  }
}

uint64_t sub_253A25C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result = a5(319);
  if (v6 <= 0x3F)
  {
    sub_253A3C6D8();
    return sub_2535E2578();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientEffectInvocation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    unsigned __int8 v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    int v19 = (uint64_t *)((char *)a1 + v17);
    int v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *int v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ClientEffectInvocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientEffectInvocation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v16);
  int v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientEffectInvocation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ClientEffectInvocation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for ClientEffectInvocation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *int v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientEffectInvocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A262E8);
}

uint64_t sub_253A262E8()
{
  sub_253A3C838();
  sub_253B055C0();
  sub_253486600();
  if (*(_DWORD *)(v3 + 84) != v1) {
    return sub_2534F89A0(*(void *)(v0 + *(int *)(v2 + 24) + 8));
  }
  uint64_t v4 = sub_253A3D8DC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for ClientEffectInvocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2636C);
}

void sub_253A2636C()
{
  sub_253A3CA70();
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v1)
  {
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v3, v4, v5, v6);
  }
  else
  {
    sub_253A3D704(*(int *)(v0 + 24));
  }
}

uint64_t sub_253A263D8()
{
  uint64_t result = sub_253B055C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientEffectResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = sub_253B05940();
    }
    else {
      uint64_t v6 = sub_253B09120();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ClientEffectResult(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = sub_253B05940();
  }
  else {
    uint64_t v2 = sub_253B09120();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for ClientEffectResult(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = sub_253B05940();
  }
  else {
    uint64_t v4 = sub_253B09120();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ClientEffectResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = sub_253B05940();
    }
    else {
      uint64_t v4 = sub_253B09120();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for ClientEffectResult(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = sub_253B05940();
  }
  else {
    uint64_t v4 = sub_253B09120();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for ClientEffectResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_2539DF610();
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = sub_253B05940();
    }
    else {
      uint64_t v4 = sub_253B09120();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_253A26924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A2693C(a1, a2, a3, MEMORY[0x263F4BF78]);
}

uint64_t sub_253A2693C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_2539461BC();
  uint64_t result = sub_253B09120();
  if (v6 <= 0x3F)
  {
    uint64_t result = a4(319);
    if (v7 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return sub_2535E2578();
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionResult(uint64_t a1, uint64_t *a2)
{
  return sub_253A26A34(a1, a2);
}

uint64_t sub_253A26A34(uint64_t a1, uint64_t *a2)
{
  sub_2535782A8();
  if ((*(_DWORD *)(v8 + 80) & 0x20000) != 0)
  {
    sub_2539442C0(*a2);
  }
  else
  {
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    uint64_t v11 = v4;
    v5(0);
    sub_25346CAF4();
    sub_253945CF8();
    sub_2534B3428();
    v12();
    uint64_t v13 = a1 + *(int *)(v11 + 20);
    uint64_t v14 = sub_253A3DF78();
    uint64_t v15 = v10(v14);
    uint64_t v16 = sub_2536D54B0();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v16, v17, v15))
    {
      uint64_t v18 = sub_253462A5C(v9);
      sub_25346CB4C(v18);
      int v19 = (void *)sub_253A3E9FC();
      memcpy(v19, v20, v21);
    }
    else
    {
      sub_25347B88C();
      sub_253A3E9FC();
      sub_2534B3428();
      v22();
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for ActionResult(uint64_t a1, uint64_t a2)
{
  return sub_253A26B78(a1, a2, MEMORY[0x263F4C108], MEMORY[0x263F4C768]);
}

uint64_t sub_253A26B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = sub_2534D976C();
  v8(v7);
  sub_25346CAF4();
  sub_2534659CC();
  v9();
  uint64_t v10 = v4 + *(int *)(a2 + 20);
  uint64_t v11 = sub_253A3DF78();
  uint64_t v12 = a4(v11);
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v10, 1, v12);
  if (!result)
  {
    sub_25347B88C();
    uint64_t v14 = sub_2534ACF74();
    return v15(v14);
  }
  return result;
}

uint64_t initializeWithCopy for ActionResult()
{
  return sub_253A26C74();
}

uint64_t sub_253A26C74()
{
  uint64_t v5 = sub_253A3D3E0();
  v6(v5);
  sub_25346CAF4();
  sub_2534B3428();
  v7();
  uint64_t v8 = *(int *)(v1 + 20);
  uint64_t v9 = (void *)(v0 + v8);
  uint64_t v10 = (const void *)(v3 + v8);
  uint64_t v11 = sub_253A3DF78();
  uint64_t v12 = v4(v11);
  if (sub_253A3F42C(v12))
  {
    uint64_t v13 = sub_253462A5C(v2);
    sub_25346CB4C(v13);
    memcpy(v9, v10, *(void *)(v14 + 64));
  }
  else
  {
    sub_25347B88C();
    sub_2534B3428();
    v15();
    sub_2539446A0((uint64_t)v9);
  }
  return v0;
}

uint64_t assignWithCopy for ActionResult()
{
  return sub_253A26D80();
}

uint64_t sub_253A26D80()
{
  uint64_t v6 = sub_253A3D370();
  v7(v6);
  sub_25346CAF4();
  sub_253944540();
  v8();
  uint64_t v9 = *(int *)(v1 + 20);
  uint64_t v10 = (void *)(v0 + v9);
  uint64_t v11 = (const void *)(v2 + v9);
  uint64_t v12 = sub_253A3DF78();
  uint64_t v13 = v4(v12);
  int v14 = sub_253A3D688(v13);
  if (!v5)
  {
    sub_2535782A8();
    if (!v16)
    {
      uint64_t v21 = sub_253A3D8A4();
      v22(v21);
      return v0;
    }
    sub_253A3E8DC();
    v17();
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v18 = sub_253462A5C(v3);
    sub_25346CB4C(v18);
    memcpy(v10, v11, *(void *)(v19 + 64));
    return v0;
  }
  sub_25347B88C();
  sub_2534B3428();
  v15();
  sub_2539446A0((uint64_t)v10);
  return v0;
}

uint64_t initializeWithTake for ActionResult()
{
  return sub_253A26EC8();
}

uint64_t sub_253A26EC8()
{
  uint64_t v5 = sub_253A3D3E0();
  v6(v5);
  sub_25346CAF4();
  sub_2534D8E14();
  v7();
  uint64_t v8 = *(int *)(v1 + 20);
  uint64_t v9 = (void *)(v0 + v8);
  uint64_t v10 = (const void *)(v3 + v8);
  uint64_t v11 = sub_253A3DF78();
  uint64_t v12 = v4(v11);
  if (sub_253A3F42C(v12))
  {
    uint64_t v13 = sub_253462A5C(v2);
    sub_25346CB4C(v13);
    memcpy(v9, v10, *(void *)(v14 + 64));
  }
  else
  {
    sub_25347B88C();
    sub_2534D8E14();
    v15();
    sub_2539446A0((uint64_t)v9);
  }
  return v0;
}

uint64_t assignWithTake for ActionResult()
{
  return sub_253A26FD4();
}

uint64_t sub_253A26FD4()
{
  uint64_t v6 = sub_253A3D370();
  v7(v6);
  sub_25346CAF4();
  sub_253A3E884();
  v8();
  uint64_t v9 = *(int *)(v1 + 20);
  uint64_t v10 = (void *)(v0 + v9);
  uint64_t v11 = (const void *)(v2 + v9);
  uint64_t v12 = sub_253A3DF78();
  uint64_t v13 = v4(v12);
  int v14 = sub_253A3D688(v13);
  if (!v5)
  {
    sub_2535782A8();
    if (!v16)
    {
      uint64_t v21 = sub_253A3D8A4();
      v22(v21);
      return v0;
    }
    sub_253A3E8DC();
    v17();
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v18 = sub_253462A5C(v3);
    sub_25346CB4C(v18);
    memcpy(v10, v11, *(void *)(v19 + 64));
    return v0;
  }
  sub_25347B88C();
  sub_2534D8E14();
  v15();
  sub_2539446A0((uint64_t)v10);
  return v0;
}

uint64_t getEnumTagSinglePayload for ActionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A270F8);
}

uint64_t sub_253A270F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27118(a1, a2, a3, MEMORY[0x263F4C108], &qword_269CDBB28);
}

uint64_t sub_253A27118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = sub_2534D8D00();
  v8(v7);
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == v5)
  {
    uint64_t v10 = sub_253945320();
  }
  else
  {
    sub_253462A5C(a5);
    uint64_t v10 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v10, v5, v11);
}

uint64_t storeEnumTagSinglePayload for ActionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2719C);
}

uint64_t sub_253A2719C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A1BFF0(a1, a2, a3, a4, MEMORY[0x263F4C108], &qword_269CDBB28);
}

void sub_253A271BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_253A271F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v8 = sub_2539461BC();
  v9(v8);
  if (v10 <= 0x3F)
  {
    sub_253A0EB7C(319, a5, a6);
    if (v11 <= 0x3F)
    {
      sub_253A3C6D8();
      sub_2535E2578();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ActionResolverRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    uint64_t v11 = a3[11];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v13[3];
    v12[2] = v13[2];
    v12[3] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ActionResolverRequest(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionResolverRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = v12[3];
  v11[2] = v12[2];
  v11[3] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActionResolverRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v7 = a3[11];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = *(void *)(v9 + 16);
  v8[3] = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ActionResolverRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  uint64_t v10 = a3[11];
  uint64_t v11 = (_OWORD *)(a1 + v10);
  uint64_t v12 = (_OWORD *)(a2 + v10);
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  return a1;
}

uint64_t assignWithTake for ActionResolverRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v10[3];
  v9[2] = v10[2];
  v9[3] = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionResolverRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A27894);
}

uint64_t sub_253A27894(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A278AC(a1, a2, a3);
}

uint64_t sub_253A278AC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_2534D9690();
  v7(v6);
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) != a2) {
    return sub_2534F89A0(*(void *)(v3 + *(int *)(a3 + 20)));
  }
  uint64_t v9 = sub_253A3D8DC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v9, v10, v11);
}

uint64_t storeEnumTagSinglePayload for ActionResolverRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A27938);
}

void sub_253A27938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_253A27950(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_2534D8D00();
  v9(v8);
  sub_253486600();
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, v12, v13, v14);
  }
  else
  {
    *(void *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
  }
}

uint64_t sub_253A279D0()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for ParameterPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParameterPath(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for ParameterPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParameterPath(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParameterPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParameterPath()
{
  return &type metadata for ParameterPath;
}

ValueMetadata *type metadata accessor for ClientInitiatedClientAction()
{
  return &type metadata for ClientInitiatedClientAction;
}

ValueMetadata *type metadata accessor for ContextPrewarmRequest()
{
  return &type metadata for ContextPrewarmRequest;
}

uint64_t _s30IntelligenceFlowPlannerSupport21RequestPrescribedPlanO26LowConfidenceKnowledgeToolVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_2534DA394(v2);
}

uint64_t sub_253A27C64(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_253A3CF34(result, a2);
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      return sub_253A3CF34(result, a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextPrewarmCompleted()
{
  return &type metadata for ContextPrewarmCompleted;
}

ValueMetadata *type metadata accessor for SafetyModeRelease()
{
  return &type metadata for SafetyModeRelease;
}

ValueMetadata *type metadata accessor for SafetyModeException()
{
  return &type metadata for SafetyModeException;
}

ValueMetadata *type metadata accessor for ContextRetrieved()
{
  return &type metadata for ContextRetrieved;
}

uint64_t initializeBufferWithCopyOfBuffer for RetrievedContextStatement(uint64_t a1, uint64_t *a2)
{
  return sub_253A27F1C(a1, a2);
}

uint64_t destroy for RetrievedContextStatement(uint64_t a1, uint64_t a2)
{
  return sub_253A27FF8(a1, a2, MEMORY[0x263F4E500]);
}

uint64_t initializeWithCopy for RetrievedContextStatement()
{
  return sub_253A280B0();
}

uint64_t assignWithCopy for RetrievedContextStatement()
{
  return sub_253A2814C();
}

uint64_t initializeWithTake for RetrievedContextStatement()
{
  return sub_253A281E8();
}

uint64_t assignWithTake for RetrievedContextStatement()
{
  return sub_253A28284();
}

uint64_t getEnumTagSinglePayload for RetrievedContextStatement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A27D7C);
}

uint64_t sub_253A27D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27DA8(a1, a2, a3, MEMORY[0x263F4BF98], MEMORY[0x263F4E500]);
}

uint64_t sub_253A27DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v7 = sub_253A3F5B4();
  v8(v7);
  sub_253486600();
  if (*(_DWORD *)(v9 + 84) == v5)
  {
    uint64_t v10 = sub_253945320();
  }
  else
  {
    a5(0);
    uint64_t v10 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v10, v5, v11);
}

uint64_t storeEnumTagSinglePayload for RetrievedContextStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A27E2C);
}

uint64_t sub_253A27E2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A27E58(a1, a2, a3, a4, MEMORY[0x263F4BF98], MEMORY[0x263F4E500]);
}

uint64_t sub_253A27E58(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v8 = sub_253A3F5B4();
  v9(v8);
  sub_253486600();
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    a6(0);
    sub_253A3C36C();
  }
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v11, v12, v13, v14);
}

uint64_t sub_253A27ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A283AC(a1, a2, a3, MEMORY[0x263F4BF98], MEMORY[0x263F4E500]);
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicEnumerationEntityStatement(uint64_t a1, uint64_t *a2)
{
  return sub_253A27F1C(a1, a2);
}

uint64_t sub_253A27F1C(uint64_t a1, uint64_t *a2)
{
  sub_2535782A8();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    sub_2539442C0(*a2);
  }
  else
  {
    uint64_t v6 = v4;
    sub_253B059D0();
    sub_25346CAF4();
    sub_2534B3428();
    v7();
    v6(0);
    sub_25346CAF4();
    sub_2534B3428();
    v8();
  }
  return a1;
}

uint64_t destroy for DynamicEnumerationEntityStatement(uint64_t a1, uint64_t a2)
{
  return sub_253A27FF8(a1, a2, MEMORY[0x263F4E710]);
}

uint64_t sub_253A27FF8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  sub_253B059D0();
  sub_25346CAF4();
  sub_2534659CC();
  v4();
  a3(0);
  sub_25346CAF4();
  uint64_t v5 = sub_253A3F4E8();
  return v6(v5);
}

uint64_t initializeWithCopy for DynamicEnumerationEntityStatement()
{
  return sub_253A280B0();
}

uint64_t sub_253A280B0()
{
  sub_253A3C2C0();
  sub_25346CAF4();
  sub_2534B3428();
  v2();
  uint64_t v3 = sub_253A3C134();
  v0(v3);
  sub_25346CAF4();
  sub_2534B3428();
  v4();
  return v1;
}

uint64_t assignWithCopy for DynamicEnumerationEntityStatement()
{
  return sub_253A2814C();
}

uint64_t sub_253A2814C()
{
  sub_253A3C2C0();
  sub_25346CAF4();
  sub_253944540();
  v2();
  uint64_t v3 = sub_253A3C134();
  v0(v3);
  sub_25346CAF4();
  sub_253944540();
  v4();
  return v1;
}

uint64_t initializeWithTake for DynamicEnumerationEntityStatement()
{
  return sub_253A281E8();
}

uint64_t sub_253A281E8()
{
  sub_253A3C2C0();
  sub_25346CAF4();
  sub_2534D8E14();
  v2();
  uint64_t v3 = sub_253A3C134();
  v0(v3);
  sub_25346CAF4();
  sub_2534D8E14();
  v4();
  return v1;
}

uint64_t assignWithTake for DynamicEnumerationEntityStatement()
{
  return sub_253A28284();
}

uint64_t sub_253A28284()
{
  sub_253A3C2C0();
  sub_25346CAF4();
  sub_253A3E884();
  v2();
  uint64_t v3 = sub_253A3C134();
  v0(v3);
  sub_25346CAF4();
  sub_253A3E884();
  v4();
  return v1;
}

uint64_t getEnumTagSinglePayload for DynamicEnumerationEntityStatement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A28314);
}

uint64_t sub_253A28314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27DA8(a1, a2, a3, MEMORY[0x263F4BF98], MEMORY[0x263F4E710]);
}

uint64_t storeEnumTagSinglePayload for DynamicEnumerationEntityStatement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A28354);
}

uint64_t sub_253A28354(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A27E58(a1, a2, a3, a4, MEMORY[0x263F4BF98], MEMORY[0x263F4E710]);
}

uint64_t sub_253A28380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A283AC(a1, a2, a3, MEMORY[0x263F4BF98], MEMORY[0x263F4E710]);
}

uint64_t sub_253A283AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = sub_2539461BC();
  uint64_t result = v7(v6);
  if (v9 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v10 <= 0x3F)
    {
      sub_253A3C6D8();
      return sub_2535E2578();
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntitySpanMatchResult()
{
  return &type metadata for EntitySpanMatchResult;
}

uint64_t destroy for ToolRetrievalResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ToolRetrievalResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolRetrievalResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolRetrievalResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolRetrievalResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolRetrievalResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolRetrievalResponse()
{
  return &type metadata for ToolRetrievalResponse;
}

uint64_t *initializeBufferWithCopyOfBuffer for ExternalAgentTextQuery(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B055C0();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    if (v17)
    {
      *uint64_t v15 = *v16;
      v15[1] = v17;
      v15[2] = v16[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      v15[2] = v16[2];
    }
  }
  return v4;
}

uint64_t destroy for ExternalAgentTextQuery(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 24) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ExternalAgentTextQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B055C0();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  if (v15)
  {
    *uint64_t v13 = *v14;
    v13[1] = v15;
    v13[2] = v14[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    v13[2] = v14[2];
  }
  return a1;
}

void *assignWithCopy for ExternalAgentTextQuery(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a1 + v14 + 8);
  uint64_t v18 = v16[1];
  if (v17)
  {
    if (v18)
    {
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15[2] = v16[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_253A10824((uint64_t)v15);
      uint64_t v19 = v16[2];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      v15[2] = v19;
    }
  }
  else if (v18)
  {
    *uint64_t v15 = *v16;
    v15[1] = v16[1];
    v15[2] = v16[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)v16;
    v15[2] = v16[2];
    *(_OWORD *)uint64_t v15 = v20;
  }
  return a1;
}

_OWORD *initializeWithTake for ExternalAgentTextQuery(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  return a1;
}

void *assignWithTake for ExternalAgentTextQuery(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B055C0();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  if (!*(void *)((char *)a1 + v15 + 8))
  {
LABEL_11:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *(void *)(v16 + 16) = *((void *)v17 + 2);
    return a1;
  }
  uint64_t v18 = *((void *)v17 + 1);
  if (!v18)
  {
    sub_253A10824(v16);
    goto LABEL_11;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = v18;
  swift_bridgeObjectRelease();
  *(void *)(v16 + 16) = *((void *)v17 + 2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalAgentTextQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A28F7C);
}

uint64_t sub_253A28F7C()
{
  sub_2535E2298();
  if (v1) {
    return sub_2534F89A0(*(void *)(v0 + 8));
  }
  sub_2535E2460();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v3 = sub_2534F8890();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for ExternalAgentTextQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A28FF8);
}

void sub_253A28FF8()
{
  sub_2535E2244();
  if (v0)
  {
    sub_2535E24BC();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v4);
  }
}

void sub_253A29068()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ExternalAgentSpeechQuery(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B055C0();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    if (v16)
    {
      *uint64_t v14 = *v15;
      v14[1] = v16;
      v14[2] = v15[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      v14[2] = v15[2];
    }
  }
  return v7;
}

uint64_t destroy for ExternalAgentSpeechQuery(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 24) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ExternalAgentSpeechQuery(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  if (v14)
  {
    *uint64_t v12 = *v13;
    v12[1] = v14;
    v12[2] = v13[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
  }
  return a1;
}

void *assignWithCopy for ExternalAgentSpeechQuery(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a1 + v14 + 8);
  uint64_t v18 = v16[1];
  if (v17)
  {
    if (v18)
    {
      *uint64_t v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15[2] = v16[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_253A10824((uint64_t)v15);
      uint64_t v19 = v16[2];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      v15[2] = v19;
    }
  }
  else if (v18)
  {
    *uint64_t v15 = *v16;
    v15[1] = v16[1];
    v15[2] = v16[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)v16;
    v15[2] = v16[2];
    *(_OWORD *)uint64_t v15 = v20;
  }
  return a1;
}

void *initializeWithTake for ExternalAgentSpeechQuery(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  return a1;
}

void *assignWithTake for ExternalAgentSpeechQuery(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  if (!*(void *)((char *)a1 + v14 + 8))
  {
LABEL_11:
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *((void *)v16 + 2);
    return a1;
  }
  uint64_t v17 = *((void *)v16 + 1);
  if (!v17)
  {
    sub_253A10824(v15);
    goto LABEL_11;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = v17;
  swift_bridgeObjectRelease();
  *(void *)(v15 + 16) = *((void *)v16 + 2);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalAgentSpeechQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2990C);
}

uint64_t sub_253A2990C()
{
  sub_2535E2298();
  if (v1) {
    return sub_2534F89A0(*v0);
  }
  sub_2535E2460();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  uint64_t v3 = sub_2534F8890();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for ExternalAgentSpeechQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A29988);
}

void sub_253A29988()
{
  sub_2535E2244();
  if (v0)
  {
    sub_2535E2538();
  }
  else
  {
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v4);
  }
}

void sub_253A299F8()
{
}

void sub_253A29A08()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
  if (v1 <= 0x3F)
  {
    sub_253A3B808(v0);
    sub_253A3D350();
    sub_2535E2578();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ExternalAgentOutcome(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B06850();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ExternalAgentOutcome(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B06850();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A29FC4);
}

uint64_t sub_253A29FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_253A3C58C();
  sub_253486600();
  if (*(_DWORD *)(v6 + 84) == v3)
  {
    uint64_t v7 = sub_253945320();
  }
  else
  {
    sub_253B06850();
    sub_253486600();
    if (*(_DWORD *)(v9 + 84) != v3) {
      return sub_2534F89A0(*(void *)(v4 + *(int *)(a3 + 24)));
    }
    uint64_t v7 = sub_253A3C300();
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, v3, v8);
}

uint64_t storeEnumTagSinglePayload for ExternalAgentOutcome(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2A068);
}

void sub_253A2A068(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_253A2A094(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v11 = sub_2534D8D00();
  v12(v11);
  sub_253486600();
  if (*(_DWORD *)(v13 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    a6(0);
    sub_253486600();
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(v7 + *(int *)(a4 + 24)) = (v6 - 1);
      return;
    }
    sub_253A3C36C();
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v15, v16, v17, v18);
}

uint64_t sub_253A2A148()
{
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B06850();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _s30IntelligenceFlowPlannerSupport35ExternalAgentRequestRewriteMetadataVwCP_0(void *a1, void *a2)
{
  sub_253A3D8FC(a1, a2);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t _s30IntelligenceFlowPlannerSupport35ExternalAgentRequestRewriteMetadataVwca_0(void *a1, void *a2)
{
  sub_253A3C340(a1, a2);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 16) = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _s30IntelligenceFlowPlannerSupport35ExternalAgentRequestRewriteMetadataVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_2534DA394(v2);
}

uint64_t sub_253A2A2DC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_253A3CF34(result, a2);
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      return sub_253A3CF34(result, a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalAgentRequestRewriteMetadata()
{
  return &type metadata for ExternalAgentRequestRewriteMetadata;
}

void initializeBufferWithCopyOfBuffer for ToolResolution()
{
}

uint64_t destroy for ToolResolution(uint64_t a1, uint64_t a2)
{
  return sub_253A2AE00(a1, a2);
}

void initializeWithCopy for ToolResolution()
{
}

void assignWithCopy for ToolResolution()
{
}

void initializeWithTake for ToolResolution()
{
}

void assignWithTake for ToolResolution()
{
}

uint64_t getEnumTagSinglePayload for ToolResolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2A3C8);
}

uint64_t sub_253A2A3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27DA8(a1, a2, a3, MEMORY[0x263F7FED0], MEMORY[0x263F4BF98]);
}

uint64_t storeEnumTagSinglePayload for ToolResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2A408);
}

uint64_t sub_253A2A408(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A27E58(a1, a2, a3, a4, MEMORY[0x263F7FED0], MEMORY[0x263F4BF98]);
}

uint64_t sub_253A2A434()
{
  return sub_253A2B214();
}

uint64_t *initializeBufferWithCopyOfBuffer for TypeConversionRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B09120();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B09150();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_253B059D0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for TypeConversionRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_253B09150();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_253B059D0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t initializeWithCopy for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B09150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B09150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B09150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B09120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_253B09150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2AAC8);
}

uint64_t sub_253A2AAC8()
{
  sub_253A3D86C();
  sub_253486600();
  if (*(_DWORD *)(v2 + 84) == v0)
  {
    uint64_t v3 = sub_253945320();
  }
  else
  {
    sub_253B09150();
    sub_253486600();
    if (*(_DWORD *)(v5 + 84) == v0)
    {
      sub_2535E263C();
    }
    else
    {
      sub_253B059D0();
      sub_2535E2560();
    }
    uint64_t v3 = v1 + v6;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v3, v0, v4);
}

uint64_t storeEnumTagSinglePayload for TypeConversionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2AB64);
}

uint64_t sub_253A2AB64(uint64_t a1, uint64_t a2, int a3)
{
  sub_253A3D86C();
  sub_253486600();
  if (*(_DWORD *)(v4 + 84) == a3)
  {
    sub_253944FD8();
  }
  else
  {
    sub_253B09150();
    sub_253486600();
    if (*(_DWORD *)(v5 + 84) == a3)
    {
      sub_2535E272C();
    }
    else
    {
      sub_253B059D0();
      sub_2535E26D8();
    }
  }
  sub_2535E228C();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v6, v7, v8, v9);
}

uint64_t sub_253A2ABF0()
{
  uint64_t result = sub_253B09120();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_253B09150();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_253B059D0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void initializeBufferWithCopyOfBuffer for TypeConversionResult()
{
}

void sub_253A2AD0C()
{
  sub_2535B3C98();
  unint64_t v1 = v0;
  sub_2535782A8();
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    sub_2539442C0(*v1);
  }
  else
  {
    v2(0);
    sub_25346CAF4();
    sub_2534B3428();
    v4();
    sub_253B059D0();
    sub_25346CAF4();
    uint64_t v6 = *(void (**)(void))(v5 + 16);
    sub_2539448BC();
    v6();
    sub_2539448BC();
    v6();
  }
  sub_25346CD04();
}

uint64_t destroy for TypeConversionResult(uint64_t a1, uint64_t a2)
{
  return sub_253A2AE00(a1, a2);
}

uint64_t sub_253A2AE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253578A1C();
  v5(v4);
  sub_25346CAF4();
  sub_2534659CC();
  v6();
  uint64_t v7 = v2 + *(int *)(a2 + 20);
  uint64_t v8 = sub_253B059D0();
  sub_25346CAF4();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v12(v7, v8);
  uint64_t v10 = v2 + *(int *)(a2 + 24);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v8);
}

void initializeWithCopy for TypeConversionResult()
{
}

void sub_253A2AEE4()
{
  sub_2535B3C98();
  uint64_t v0 = sub_253A3C328();
  v1(v0);
  sub_25346CAF4();
  sub_2534B3428();
  v2();
  sub_253A3C70C();
  sub_25346CAF4();
  uint64_t v4 = *(void (**)(void))(v3 + 16);
  sub_2539448BC();
  v4();
  uint64_t v5 = sub_253A3C180();
  ((void (*)(uint64_t))v4)(v5);
  sub_25346CD04();
}

void assignWithCopy for TypeConversionResult()
{
}

void sub_253A2AF94()
{
  sub_2535B3C98();
  uint64_t v0 = sub_253A3C328();
  v1(v0);
  sub_25346CAF4();
  sub_253944540();
  v2();
  sub_253A3C70C();
  sub_25346CAF4();
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 24);
  uint64_t v5 = sub_253A3D800();
  v4(v5);
  uint64_t v6 = sub_253A3C180();
  v4(v6);
  sub_25346CD04();
}

void initializeWithTake for TypeConversionResult()
{
}

void sub_253A2B040()
{
  sub_2535B3C98();
  uint64_t v0 = sub_253A3C328();
  v1(v0);
  sub_25346CAF4();
  sub_2534D8E14();
  v2();
  sub_253A3C70C();
  sub_25346CAF4();
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 32);
  uint64_t v5 = sub_253A3D800();
  v4(v5);
  uint64_t v6 = sub_253A3C180();
  v4(v6);
  sub_25346CD04();
}

void assignWithTake for TypeConversionResult()
{
}

void sub_253A2B0EC()
{
  sub_2535B3C98();
  uint64_t v0 = sub_253A3C328();
  v1(v0);
  sub_25346CAF4();
  sub_253944438();
  v2();
  sub_253A3C70C();
  sub_25346CAF4();
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 40);
  uint64_t v5 = sub_253A3D800();
  v4(v5);
  uint64_t v6 = sub_253A3C180();
  v4(v6);
  sub_25346CD04();
}

uint64_t getEnumTagSinglePayload for TypeConversionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2B190);
}

uint64_t sub_253A2B190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_253A27DA8(a1, a2, a3, MEMORY[0x263F80508], MEMORY[0x263F4BF98]);
}

uint64_t storeEnumTagSinglePayload for TypeConversionResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2B1D0);
}

uint64_t sub_253A2B1D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_253A27E58(a1, a2, a3, a4, MEMORY[0x263F80508], MEMORY[0x263F4BF98]);
}

uint64_t sub_253A2B1FC()
{
  return sub_253A2B214();
}

uint64_t sub_253A2B214()
{
  uint64_t v0 = sub_2539461BC();
  uint64_t result = v1(v0);
  if (v3 <= 0x3F)
  {
    uint64_t result = sub_253B059D0();
    if (v4 <= 0x3F)
    {
      sub_253A3B808(result);
      sub_253A3D350();
      return sub_2535E2578();
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for QueryDecorationResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_253B08270();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_253462A5C(&qword_269CDBB30);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for QueryDecorationResult(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_253B08270();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for QueryDecorationResult(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B08270();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C(&qword_269CDBB30);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for QueryDecorationResult(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B08270();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_253462A5C(&qword_269CDBB30);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for QueryDecorationResult(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_253B08270();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C(&qword_269CDBB30);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

void *assignWithTake for QueryDecorationResult(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B08270();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_253462A5C(&qword_269CDBB30);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryDecorationResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2BAE4);
}

uint64_t sub_253A2BAE4()
{
  sub_2535E2298();
  if (v2) {
    return sub_2534F89A0(*v0);
  }
  sub_2535E2460();
  sub_253462A5C(&qword_269CDBB30);
  uint64_t v4 = sub_2535E22C8(*(int *)(v1 + 28));
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for QueryDecorationResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2BB68);
}

void sub_253A2BB68()
{
  sub_2535E2244();
  if (v0)
  {
    sub_2535E2538();
  }
  else
  {
    sub_253462A5C(&qword_269CDBB30);
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v1, v2, v3, v4);
  }
}

void sub_253A2BBD8()
{
  sub_253A0EB7C(319, &qword_26B248D10, MEMORY[0x263F4E778]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for QueryDecorationPrePlannerResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B059D0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    int v10 = (uint64_t *)((char *)a1 + v8);
    int v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *int v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    uint64_t v14 = (char *)a2 + v9;
    uint64_t v15 = *(void *)v14;
    LOBYTE(v14) = v14[8];
    *(void *)uint64_t v13 = v15;
    v13[8] = (char)v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for QueryDecorationPrePlannerResult(uint64_t a1)
{
  uint64_t v2 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  int v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = (uint64_t *)(a2 + v8);
  uint64_t v14 = *v13;
  LOBYTE(v13) = *((unsigned char *)v13 + 8);
  *(void *)uint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = (_BYTE)v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  LOBYTE(v12) = *((unsigned char *)v12 + 8);
  *(void *)uint64_t v11 = v13;
  *(unsigned char *)(v11 + 8) = (_BYTE)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  return a1;
}

uint64_t assignWithTake for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_253B059D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  LOBYTE(v14) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = (_BYTE)v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2C0DC);
}

uint64_t sub_253A2C0DC(uint64_t a1, int a2, uint64_t a3)
{
  return sub_253A2C0F4(a1, a2, a3);
}

uint64_t sub_253A2C0F4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_2534D9690();
  v7(v6);
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) != a2) {
    return sub_2534F89A0(*(void *)(v3 + *(int *)(a3 + 20) + 8));
  }
  uint64_t v9 = sub_253A3D8DC();
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v9, v10, v11);
}

uint64_t storeEnumTagSinglePayload for QueryDecorationPrePlannerResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2C184);
}

void sub_253A2C184(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_253A2C19C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = sub_2534D8D00();
  v7(v6);
  sub_253486600();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v9, v10, v11, v12);
  }
  else
  {
    sub_253A3D704(*(int *)(a4 + 20));
  }
}

uint64_t sub_253A2C218()
{
  return sub_253A2C224();
}

uint64_t sub_253A2C224()
{
  sub_2539461BC();
  uint64_t result = sub_253B059D0();
  if (v1 <= 0x3F)
  {
    sub_253A3B808(result);
    sub_253A3D350();
    return sub_2535E2578();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for QueryDecorationPrePlannerResultPayload(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for QueryDecorationPrePlannerResultPayload(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for QueryDecorationPrePlannerResultPayload(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryDecorationPrePlannerResultPayload(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryDecorationPrePlannerResultPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_253A2C3C4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload;
}

ValueMetadata *type metadata accessor for UndoOperation()
{
  return &type metadata for UndoOperation;
}

void *initializeBufferWithCopyOfBuffer for UndoRedoRequest(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B055C0();
    swift_bridgeObjectRetain();
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_253B059D0();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    uint64_t v19 = a3[8];
    long long v20 = (char *)v4 + v19;
    uint64_t v21 = (char *)a2 + v19;
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v21, 1, v17))
    {
      uint64_t v22 = sub_253462A5C(&qword_269CDB460);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v18(v20, v21, v17);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v20, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t destroy for UndoRedoRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_253B055C0();
  if (!_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = sub_253B059D0();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v10(v6, v7);
  uint64_t v8 = a1 + a2[8];
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, 1, v7);
  if (!result)
  {
    return v10(v8, v7);
  }
  return result;
}

void *initializeWithCopy for UndoRedoRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B055C0();
  swift_bridgeObjectRetain();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_253B059D0();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v19, 1, v15))
  {
    uint64_t v20 = sub_253462A5C(&qword_269CDB460);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v16(v18, v19, v15);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v18, 0, 1, v15);
  }
  return a1;
}

void *assignWithCopy for UndoRedoRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  int v10 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v7, 1, v9);
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_253B059D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  LODWORD(v15) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1 + v20, 1, v17);
  int v23 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v22, 1, v17);
  if (!v15)
  {
    if (!v23)
    {
      v19(v21, v22, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_253462A5C(&qword_269CDB460);
    memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v22, v17);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v21, 0, 1, v17);
  return a1;
}

_OWORD *initializeWithTake for UndoRedoRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_253B055C0();
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_253B059D0();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v18, 1, v14))
  {
    uint64_t v19 = sub_253462A5C(&qword_269CDB460);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v15(v17, v18, v14);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v17, 0, 1, v14);
  }
  return a1;
}

void *assignWithTake for UndoRedoRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_253B055C0();
  int v11 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v8, 1, v10);
  int v12 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = sub_253462A5C((uint64_t *)&unk_26B248CB0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = sub_253B059D0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 40);
  v20(v16, v17, v18);
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  int v23 = (char *)a2 + v21;
  LODWORD(v16) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)a1 + v21, 1, v18);
  int v24 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v23, 1, v18);
  if (!v16)
  {
    if (!v24)
    {
      v20(v22, v23, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v25 = sub_253462A5C(&qword_269CDB460);
    memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v23, v18);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v22, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UndoRedoRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2D060);
}

uint64_t sub_253A2D060()
{
  sub_2535E2298();
  if (v3) {
    return sub_2534F89A0(*(void *)(v1 + 8));
  }
  sub_2535E2460();
  sub_253462A5C((uint64_t *)&unk_26B248CB0);
  sub_253486600();
  if (*(_DWORD *)(v5 + 84) == v0)
  {
    sub_2535E263C();
  }
  else
  {
    sub_253B059D0();
    sub_253486600();
    if (*(_DWORD *)(v7 + 84) == v0)
    {
      sub_2535E256C();
    }
    else
    {
      sub_253462A5C(&qword_269CDB460);
      uint64_t v6 = *(int *)(v2 + 32);
    }
  }
  uint64_t v8 = sub_2535E22C8(v6);
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v8, v9, v10);
}

uint64_t storeEnumTagSinglePayload for UndoRedoRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2D128);
}

void sub_253A2D128()
{
  sub_2535E2244();
  if (v1)
  {
    sub_2535E24BC();
  }
  else
  {
    int v2 = v0;
    sub_253462A5C((uint64_t *)&unk_26B248CB0);
    sub_253486600();
    if (*(_DWORD *)(v3 + 84) == v2)
    {
      sub_2535E272C();
    }
    else
    {
      sub_253B059D0();
      sub_253486600();
      if (*(_DWORD *)(v4 + 84) == v2) {
        sub_2535E26E4();
      }
      else {
        sub_253462A5C(&qword_269CDB460);
      }
    }
    sub_2535E228C();
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v5, v6, v7, v8);
  }
}

void sub_253A2D1E0()
{
  sub_253A0EB7C(319, (unint64_t *)&qword_26B2411B8, MEMORY[0x263F07508]);
  if (v0 <= 0x3F)
  {
    sub_253B059D0();
    if (v1 <= 0x3F)
    {
      sub_253A0EB7C(319, (unint64_t *)&qword_26B2411C8, MEMORY[0x263F4BF98]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ClientUndoRedoRequest(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_253B055C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_253B059D0();
    int v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v11))
    {
      uint64_t v16 = sub_253462A5C(&qword_269CDB460);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t destroy for ClientUndoRedoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_253B059D0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v9(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t result = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v7, 1, v6);
  if (!result)
  {
    return v9(v7, v6);
  }
  return result;
}

uint64_t initializeWithCopy for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v10))
  {
    uint64_t v15 = sub_253462A5C(&qword_269CDB460);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  LODWORD(v8) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v13, 1, v10);
  int v16 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v10);
  if (!v8)
  {
    if (!v16)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_253462A5C(&qword_269CDB460);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (_s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v14, 1, v10))
  {
    uint64_t v15 = sub_253462A5C(&qword_269CDB460);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v13, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_253B055C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_253B059D0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  LODWORD(v8) = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(a1 + v13, 1, v10);
  int v16 = _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0((uint64_t)v15, 1, v10);
  if (!v8)
  {
    if (!v16)
    {
      v12(v14, v15, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_253462A5C(&qword_269CDB460);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0((uint64_t)v14, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_253A2DC18);
}

uint64_t sub_253A2DC18()
{
  sub_253A3F514();
  sub_253486600();
  if (*(_DWORD *)(v3 + 84) == v0)
  {
    uint64_t v4 = sub_253945320();
  }
  else
  {
    if (v0 == 254)
    {
      unsigned int v6 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 20));
      if (v6 >= 2) {
        return v6 - 1;
      }
      else {
        return 0;
      }
    }
    sub_253B059D0();
    sub_253486600();
    if (*(_DWORD *)(v8 + 84) == v0)
    {
      sub_2535E2560();
    }
    else
    {
      sub_253462A5C(&qword_269CDB460);
      sub_2535E256C();
    }
    uint64_t v4 = v1 + v9;
  }
  return _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwet_0(v4, v0, v5);
}

uint64_t storeEnumTagSinglePayload for ClientUndoRedoRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_253A2DCE0);
}

void sub_253A2DCE0()
{
  sub_253A3CA70();
  sub_253486600();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    sub_253944FD8();
  }
  else
  {
    if (v3 == 254)
    {
      *(unsigned char *)(v1 + *(int *)(v2 + 20)) = v0 + 1;
      return;
    }
    sub_253B059D0();
    sub_253486600();
    if (*(_DWORD *)(v5 + 84) == v3)
    {
      sub_2535E26D8();
    }
    else
    {
      sub_253462A5C(&qword_269CDB460);
      sub_2535E26E4();
    }
  }
  sub_2535E228C();
  _s30IntelligenceFlowPlannerSupport23SessionCoordinatorErrorOwst_0(v6, v7, v8, v9);
}

void sub_253A2DD8C()
{
  sub_253B055C0();
  if (v0 <= 0x3F)
  {
    sub_253B059D0();
    if (v1 <= 0x3F)
    {
      sub_253A0EB7C(319, (unint64_t *)&qword_26B2411C8, MEMORY[0x263F4BF98]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for ContinuePlanning()
{
  return &type metadata for ContinuePlanning;
}

ValueMetadata *type metadata accessor for ContinuePlanning.CodingKeys()
{
  return &type metadata for ContinuePlanning.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientUndoRedoRequest.CodingKeys()
{
  return &type metadata for ClientUndoRedoRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for UndoRedoRequest.CodingKeys()
{
  return &type metadata for UndoRedoRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for UndoOperation.CodingKeys()
{
  return &type metadata for UndoOperation.CodingKeys;
}

ValueMetadata *type metadata accessor for UndoOperation.UndoCodingKeys()
{
  return &type metadata for UndoOperation.UndoCodingKeys;
}

ValueMetadata *type metadata accessor for UndoOperation.RedoCodingKeys()
{
  return &type metadata for UndoOperation.RedoCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.CodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.StringsCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.StringsCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.TypedValuesCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.TypedValuesCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.RetrievedContextsCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.RetrievedContextsCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.EntitySpanMatchResultsCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.EntitySpanMatchResultsCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.RetrievedToolsCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.RetrievedToolsCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResultPayload.ToolQueryOutputsCodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResultPayload.ToolQueryOutputsCodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationPrePlannerResult.CodingKeys()
{
  return &type metadata for QueryDecorationPrePlannerResult.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryDecorationResult.CodingKeys()
{
  return &type metadata for QueryDecorationResult.CodingKeys;
}

ValueMetadata *type metadata accessor for TypeConversionResult.CodingKeys()
{
  return &type metadata for TypeConversionResult.CodingKeys;
}

ValueMetadata *type metadata accessor for TypeConversionRequest.CodingKeys()
{
  return &type metadata for TypeConversionRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolResolution.CodingKeys()
{
  return &type metadata for ToolResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for ExternalAgentRequestRewriteMetadata.CodingKeys()
{
  return &type metadata for ExternalAgentRequestRewriteMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for ExternalAgentOutcome.CodingKeys()
{
  return &type metadata for ExternalAgentOutcome.CodingKeys;
}

ValueMetadata *type metadata accessor for ExternalAgentSpeechQuery.CodingKeys()
{
  return &type metadata for ExternalAgentSpeechQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for ExternalAgentTextQuery.CodingKeys()
{
  return &type metadata for ExternalAgentTextQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolRetrievalResponse.CodingKeys()
{
  return &type metadata for ToolRetrievalResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for EntitySpanMatchResult.CodingKeys()
{
  return &type metadata for EntitySpanMatchResult.CodingKeys;
}

ValueMetadata *type metadata accessor for DynamicEnumerationEntityStatement.CodingKeys()
{
  return &type metadata for DynamicEnumerationEntityStatement.CodingKeys;
}

ValueMetadata *type metadata accessor for RetrievedContextStatement.CodingKeys()
{
  return &type metadata for RetrievedContextStatement.CodingKeys;
}

ValueMetadata *type metadata accessor for ContextRetrieved.CodingKeys()
{
  return &type metadata for ContextRetrieved.CodingKeys;
}

ValueMetadata *type metadata accessor for SafetyModeException.CodingKeys()
{
  return &type metadata for SafetyModeException.CodingKeys;
}

ValueMetadata *type metadata accessor for SafetyModeRelease.CodingKeys()
{
  return &type metadata for SafetyModeRelease.CodingKeys;
}

ValueMetadata *type metadata accessor for ContextPrewarmCompleted.CodingKeys()
{
  return &type metadata for ContextPrewarmCompleted.CodingKeys;
}

ValueMetadata *type metadata accessor for ContextPrewarmRequest.CodingKeys()
{
  return &type metadata for ContextPrewarmRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientInitiatedClientAction.CodingKeys()
{
  return &type metadata for ClientInitiatedClientAction.CodingKeys;
}

ValueMetadata *type metadata accessor for ParameterPath.CodingKeys()
{
  return &type metadata for ParameterPath.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionResolverRequest.CodingKeys()
{
  return &type metadata for ActionResolverRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionResult.CodingKeys()
{
  return &type metadata for ActionResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientEffectResult.CodingKeys()
{
  return &type metadata for ClientEffectResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientEffectResult.CompleteCodingKeys()
{
  return &type metadata for ClientEffectResult.CompleteCodingKeys;
}

ValueMetadata *type metadata accessor for ClientEffectResult.ErrorCodingKeys()
{
  return &type metadata for ClientEffectResult.ErrorCodingKeys;
}

ValueMetadata *type metadata accessor for ClientEffectInvocation.CodingKeys()
{
  return &type metadata for ClientEffectInvocation.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechRequestCandidate.CodingKeys()
{
  return &type metadata for SpeechRequestCandidate.CodingKeys;
}

ValueMetadata *type metadata accessor for Candidate.CodingKeys()
{
  return &type metadata for Candidate.CodingKeys;
}

ValueMetadata *type metadata accessor for Candidate.PromptStatus.CodingKeys()
{
  return &type metadata for Candidate.PromptStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for Candidate.PromptStatus.NoneCodingKeys()
{
  return &type metadata for Candidate.PromptStatus.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for Candidate.PromptStatus.ConfirmedCodingKeys()
{
  return &type metadata for Candidate.PromptStatus.ConfirmedCodingKeys;
}

ValueMetadata *type metadata accessor for Candidate.PromptStatus.PickedCodingKeys()
{
  return &type metadata for Candidate.PromptStatus.PickedCodingKeys;
}

ValueMetadata *type metadata accessor for QueryResults.CodingKeys()
{
  return &type metadata for QueryResults.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryStepResults.CodingKeys()
{
  return &type metadata for QueryStepResults.CodingKeys;
}

ValueMetadata *type metadata accessor for ResponseGenerationRequest.CodingKeys()
{
  return &type metadata for ResponseGenerationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for StatementResultPayload.CodingKeys()
{
  return &type metadata for StatementResultPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for StatementResult.CodingKeys()
{
  return &type metadata for StatementResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionStepResult.CodingKeys()
{
  return &type metadata for ActionStepResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ActionParameterContext.CodingKeys()
{
  return &type metadata for ActionParameterContext.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryPredicate.CodingKeys()
{
  return &type metadata for QueryPredicate.CodingKeys;
}

ValueMetadata *type metadata accessor for VariableSetter.CodingKeys()
{
  return &type metadata for VariableSetter.CodingKeys;
}

ValueMetadata *type metadata accessor for PropertyQuery.CodingKeys()
{
  return &type metadata for PropertyQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for PropertyQuery.CompareCodingKeys()
{
  return &type metadata for PropertyQuery.CompareCodingKeys;
}

ValueMetadata *type metadata accessor for PropertyQuery.AndCodingKeys()
{
  return &type metadata for PropertyQuery.AndCodingKeys;
}

ValueMetadata *type metadata accessor for PropertyQuery.OrCodingKeys()
{
  return &type metadata for PropertyQuery.OrCodingKeys;
}

ValueMetadata *type metadata accessor for QueryData.CodingKeys()
{
  return &type metadata for QueryData.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryData.IdentifierQueryCodingKeys()
{
  return &type metadata for QueryData.IdentifierQueryCodingKeys;
}

ValueMetadata *type metadata accessor for QueryData.StringQueryCodingKeys()
{
  return &type metadata for QueryData.StringQueryCodingKeys;
}

ValueMetadata *type metadata accessor for QueryData.PropertyQueryCodingKeys()
{
  return &type metadata for QueryData.PropertyQueryCodingKeys;
}

ValueMetadata *type metadata accessor for QueryData.SystemQueryCodingKeys()
{
  return &type metadata for QueryData.SystemQueryCodingKeys;
}

ValueMetadata *type metadata accessor for ExecutionStepResult.CodingKeys()
{
  return &type metadata for ExecutionStepResult.CodingKeys;
}

ValueMetadata *type metadata accessor for VariableStep.CodingKeys()
{
  return &type metadata for VariableStep.CodingKeys;
}

ValueMetadata *type metadata accessor for ParameterQuery.CodingKeys()
{
  return &type metadata for ParameterQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for QueryStep.CodingKeys()
{
  return &type metadata for QueryStep.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ClientAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2E3D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientAction.CodingKeys()
{
  return &type metadata for ClientAction.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.UnresolvedParameterValue.CodingKeys()
{
  return &type metadata for ClientAction.UnresolvedParameterValue.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.CodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.CodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.Handle.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.Kind.CodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.Handle.Kind.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.Kind.PhoneCodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.Handle.Kind.PhoneCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.Kind.EmailCodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.Handle.Kind.EmailCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.PersonQuery.Handle.Kind.FacetimeCodingKeys()
{
  return &type metadata for ClientAction.PersonQuery.Handle.Kind.FacetimeCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameter.CodingKeys()
{
  return &type metadata for ClientAction.ShimParameter.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameter.ResolvedCodingKeys()
{
  return &type metadata for ClientAction.ShimParameter.ResolvedCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameter.StringQueryCodingKeys()
{
  return &type metadata for ClientAction.ShimParameter.StringQueryCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameter.PersonQueryCodingKeys()
{
  return &type metadata for ClientAction.ShimParameter.PersonQueryCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameterResolution.CodingKeys()
{
  return &type metadata for ClientAction.ShimParameterResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameterResolution.ResolvedCodingKeys()
{
  return &type metadata for ClientAction.ShimParameterResolution.ResolvedCodingKeys;
}

ValueMetadata *type metadata accessor for ClientAction.ShimParameterResolution.UnresolvedCodingKeys()
{
  return &type metadata for ClientAction.ShimParameterResolution.UnresolvedCodingKeys;
}

ValueMetadata *type metadata accessor for ActionCancellation.CodingKeys()
{
  return &type metadata for ActionCancellation.CodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport38QueryDecorationPrePlannerResultPayloadO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 6);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 6);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 6);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s30IntelligenceFlowPlannerSupport38QueryDecorationPrePlannerResultPayloadO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2E63CLL);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 5);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Action.CodingKeys()
{
  return &type metadata for Action.CodingKeys;
}

ValueMetadata *type metadata accessor for Action.ParameterValue.CodingKeys()
{
  return &type metadata for Action.ParameterValue.CodingKeys;
}

ValueMetadata *type metadata accessor for GlobalToolIdentifier.CodingKeys()
{
  return &type metadata for GlobalToolIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolParameterValue.CodingKeys()
{
  return &type metadata for ToolParameterValue.CodingKeys;
}

ValueMetadata *type metadata accessor for ToolParameterValue.ReferenceCodingKeys()
{
  return &type metadata for ToolParameterValue.ReferenceCodingKeys;
}

ValueMetadata *type metadata accessor for ToolParameterValue.ValueCodingKeys()
{
  return &type metadata for ToolParameterValue.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for ExecutionStepResults.CodingKeys()
{
  return &type metadata for ExecutionStepResults.CodingKeys;
}

ValueMetadata *type metadata accessor for TextQuery.CodingKeys()
{
  return &type metadata for TextQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for SpeechQuery.CodingKeys()
{
  return &type metadata for SpeechQuery.CodingKeys;
}

ValueMetadata *type metadata accessor for ProgramStatement.CodingKeys()
{
  return &type metadata for ProgramStatement.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.OpenTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.OpenTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.KnowledgeTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.KnowledgeTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.DisplayTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.DisplayTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.ConvertTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.ConvertTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.TextTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.TextTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateImageIntentTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.GenerateImageIntentTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.GenerateRichContentFromMediaIntentTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.GenerateRichContentTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.GenerateRichContentTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.LowConfidenceKnowledgeTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.LowConfidenceKnowledgeTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.SearchTool.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.SearchTool.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.CodingKeys()
{
  return &type metadata for RequestPrescribedPlan.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.SearchToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.SearchToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.LowConfidenceKnowledgeToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.LowConfidenceKnowledgeToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.TextToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.TextToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.ConvertToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.ConvertToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.DisplayToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.DisplayToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.KnowledgeToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.KnowledgeToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.OpenToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.OpenToolCodingKeys;
}

ValueMetadata *type metadata accessor for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestToolCodingKeys()
{
  return &type metadata for RequestPrescribedPlan.OpenSuccessValueFromLatestRequestToolCodingKeys;
}

ValueMetadata *type metadata accessor for ExternalAgentRequest.CodingKeys()
{
  return &type metadata for ExternalAgentRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.CodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ActionCancellation.CodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ActionCancellation.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.RequirementResolution.CodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.RequirementResolution.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport9CandidateV6SourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2E940);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 7);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.CodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.ActionConfirmedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.ActionConfirmedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.DeviceUnlockedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.DeviceUnlockedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.ParameterValueSelectedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.ParameterValueSelectedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.ParameterConfirmedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.ParameterConfirmedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.ParameterItemSelectedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.ParameterItemSelectedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.DisambiguationIndexSelectedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.DisambiguationIndexSelectedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.RequirementAddressedCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.RequirementAddressedCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.UserAction.ActionCanceledCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.UserAction.ActionCanceledCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput.CodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ResolutionInput.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput.TouchCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ResolutionInput.TouchCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput.HeadGestureCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ResolutionInput.HeadGestureCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput.TextCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ResolutionInput.TextCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SystemPromptResolution.ResolutionInput.SpeechCodingKeys()
{
  return &type metadata for RequestContent.SystemPromptResolution.ResolutionInput.SpeechCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SpeechContent.CodingKeys()
{
  return &type metadata for RequestContent.SpeechContent.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.TextContent.CodingKeys()
{
  return &type metadata for RequestContent.TextContent.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.StopContent.CodingKeys()
{
  return &type metadata for RequestContent.StopContent.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.CodingKeys()
{
  return &type metadata for RequestContent.CodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.StopCodingKeys()
{
  return &type metadata for RequestContent.StopCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.TextCodingKeys()
{
  return &type metadata for RequestContent.TextCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.SpeechCodingKeys()
{
  return &type metadata for RequestContent.SpeechCodingKeys;
}

ValueMetadata *type metadata accessor for RequestContent.PromptResolutionCodingKeys()
{
  return &type metadata for RequestContent.PromptResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for Request.CodingKeys()
{
  return &type metadata for Request.CodingKeys;
}

ValueMetadata *type metadata accessor for SessionStart.CodingKeys()
{
  return &type metadata for SessionStart.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.PlanGenerationModelOutputError.CodingKeys()
{
  return &type metadata for Session.PlanGenerationModelOutputError.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.PlanGenerationError.CodingKeys()
{
  return &type metadata for Session.PlanGenerationError.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.PlanGenerationError.ModelOutputErrorCodingKeys()
{
  return &type metadata for Session.PlanGenerationError.ModelOutputErrorCodingKeys;
}

ValueMetadata *type metadata accessor for Session.RecoverableError.CodingKeys()
{
  return &type metadata for Session.RecoverableError.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.RecoverableError.PlanGenerationErrorCodingKeys()
{
  return &type metadata for Session.RecoverableError.PlanGenerationErrorCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Plan.CodingKeys()
{
  return &type metadata for Session.Plan.CodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport13UndoOperationOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2EC04);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 1);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Plan.DecompositionResult.CodingKeys()
{
  return &type metadata for Session.Plan.DecompositionResult.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.Plan.Source.CodingKeys()
{
  return &type metadata for Session.Plan.Source.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.Plan.Source.PrescribedPlanGeneratorCodingKeys()
{
  return &type metadata for Session.Plan.Source.PrescribedPlanGeneratorCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Plan.Source.PlanOverrideCodingKeys()
{
  return &type metadata for Session.Plan.Source.PlanOverrideCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Plan.Source.FullPlannerCodingKeys()
{
  return &type metadata for Session.Plan.Source.FullPlannerCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Session.Event.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2ED48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.CodingKeys()
{
  return &type metadata for Session.Event.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Session.Event.Payload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD0)
  {
    if (a2 + 48 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 48) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 49;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x31;
  int v5 = v6 - 49;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for Session.Event.Payload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 48 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 48) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xCF)
  {
    unsigned int v6 = ((a2 - 208) >> 8) + 1;
    *uint64_t result = a2 + 48;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2EED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 48;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.CodingKeys()
{
  return &type metadata for Session.Event.Payload.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SessionStartCodingKeys()
{
  return &type metadata for Session.Event.Payload.SessionStartCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.TextQueryCodingKeys()
{
  return &type metadata for Session.Event.Payload.TextQueryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SpeechQueryCodingKeys()
{
  return &type metadata for Session.Event.Payload.SpeechQueryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.RequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.RequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.PlanCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.PlanCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ActionCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ActionCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ActionCanceledCodingKeys()
{
  return &type metadata for Session.Event.Payload.ActionCanceledCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ClientActionCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ClientActionCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueriesCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueriesCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.VariablesSetCodingKeys()
{
  return &type metadata for Session.Event.Payload.VariablesSetCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.StepsExecutedCodingKeys()
{
  return &type metadata for Session.Event.Payload.StepsExecutedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExecutorFinishedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExecutorFinishedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ClientIdentifierCodingKeys()
{
  return &type metadata for Session.Event.Payload.ClientIdentifierCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.RecoverableErrorCodingKeys()
{
  return &type metadata for Session.Event.Payload.RecoverableErrorCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.CriticalErrorCodingKeys()
{
  return &type metadata for Session.Event.Payload.CriticalErrorCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport7SessionO4PlanV6SourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2F0B8);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 2);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ClientCustomCodingKeys()
{
  return &type metadata for Session.Event.Payload.ClientCustomCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.EndOfPlanCodingKeys()
{
  return &type metadata for Session.Event.Payload.EndOfPlanCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SessionSuspendedCodingKeys()
{
  return &type metadata for Session.Event.Payload.SessionSuspendedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.TerminateCodingKeys()
{
  return &type metadata for Session.Event.Payload.TerminateCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SystemPromptRequestedCodingKeys()
{
  return &type metadata for Session.Event.Payload.SystemPromptRequestedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SystemPromptResolvedCodingKeys()
{
  return &type metadata for Session.Event.Payload.SystemPromptResolvedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ActionExecutedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ActionExecutedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueriesExecutedCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueriesExecutedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ActionResponseGeneratedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ActionResponseGeneratedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ActionResolverRequestCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ActionResolverRequestCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ResponseGenerationRequestCreatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ResponseGenerationRequestCreatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ClientInitiatedClientActionCodingKeys()
{
  return &type metadata for Session.Event.Payload.ClientInitiatedClientActionCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ContextPrewarmRequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.ContextPrewarmRequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ContextPrewarmCompletedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ContextPrewarmCompletedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SafetyModeReleaseCodingKeys()
{
  return &type metadata for Session.Event.Payload.SafetyModeReleaseCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SafetyModeExceptionCodingKeys()
{
  return &type metadata for Session.Event.Payload.SafetyModeExceptionCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ContextRetrievedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ContextRetrievedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ToolsRetrievedCodingKeys()
{
  return &type metadata for Session.Event.Payload.ToolsRetrievedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.EntitySpanMatchedCodingKeys()
{
  return &type metadata for Session.Event.Payload.EntitySpanMatchedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.SystemResponseGeneratedCodingKeys()
{
  return &type metadata for Session.Event.Payload.SystemResponseGeneratedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.StatementEvaluatedCodingKeys()
{
  return &type metadata for Session.Event.Payload.StatementEvaluatedCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExternalAgentTextQueryCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExternalAgentTextQueryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExternalAgentSpeechQueryCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExternalAgentSpeechQueryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExternalAgentRequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExternalAgentRequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExternalAgentOutcomeCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExternalAgentOutcomeCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ExternalAgentRequestRewriteMetadataCodingKeys()
{
  return &type metadata for Session.Event.Payload.ExternalAgentRequestRewriteMetadataCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ToolResolutionCodingKeys()
{
  return &type metadata for Session.Event.Payload.ToolResolutionCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.UndoRedoRequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.UndoRedoRequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ClientUndoRedoRequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.ClientUndoRedoRequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.TypeConversionRequestCodingKeys()
{
  return &type metadata for Session.Event.Payload.TypeConversionRequestCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.TypeConversionResultCodingKeys()
{
  return &type metadata for Session.Event.Payload.TypeConversionResultCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryDecorationResultCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryDecorationResultCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.ContinuePlanningCodingKeys()
{
  return &type metadata for Session.Event.Payload.ContinuePlanningCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport38QueryDecorationPrePlannerResultPayloadO17StringsCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x253A2F38CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryDecorationPrePlannerResultCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryDecorationPrePlannerResultCodingKeys;
}

unsigned char *_s30IntelligenceFlowPlannerSupport7SessionO5EventV7PayloadO21QueryTrackingBehaviorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2F480);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 3);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior.CodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior.CodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior.StandardCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior.StandardCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior.QueryCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior.QueryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior.AdvisoryCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior.AdvisoryCodingKeys;
}

ValueMetadata *type metadata accessor for Session.Event.Payload.QueryTrackingBehavior.AdvisoryWorkAllowingCodingKeys()
{
  return &type metadata for Session.Event.Payload.QueryTrackingBehavior.AdvisoryWorkAllowingCodingKeys;
}

uint64_t _s30IntelligenceFlowPlannerSupport15UndoRedoRequestV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_2534DA394(-1);
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 5);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_2534DA394((*a1 | (v4 << 8)) - 5);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_2534DA394((*a1 | (v4 << 8)) - 5);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return sub_2534DA394(v8);
}

unsigned char *_s30IntelligenceFlowPlannerSupport15UndoRedoRequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        uint64_t result = (unsigned char *)sub_2534DA378((uint64_t)result, v6);
        break;
      case 2:
        uint64_t result = (unsigned char *)sub_2534DA360((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x253A2F638);
      case 4:
        uint64_t result = (unsigned char *)sub_2534DA368((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          uint64_t result = sub_2534DA370(result, a2 + 4);
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Session.Transcript.CodingKeys()
{
  return &type metadata for Session.Transcript.CodingKeys;
}

unint64_t sub_253A2F674()
{
  unint64_t result = qword_269CE7208;
  if (!qword_269CE7208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7208);
  }
  return result;
}

unint64_t sub_253A2F6C4()
{
  unint64_t result = qword_269CE7210;
  if (!qword_269CE7210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7210);
  }
  return result;
}

unint64_t sub_253A2F714()
{
  unint64_t result = qword_269CE7218;
  if (!qword_269CE7218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7218);
  }
  return result;
}

unint64_t sub_253A2F764()
{
  unint64_t result = qword_269CE7220;
  if (!qword_269CE7220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7220);
  }
  return result;
}

unint64_t sub_253A2F7B4()
{
  unint64_t result = qword_269CE7228;
  if (!qword_269CE7228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7228);
  }
  return result;
}

unint64_t sub_253A2F804()
{
  unint64_t result = qword_269CE7230;
  if (!qword_269CE7230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7230);
  }
  return result;
}

unint64_t sub_253A2F854()
{
  unint64_t result = qword_269CE7238;
  if (!qword_269CE7238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7238);
  }
  return result;
}

unint64_t sub_253A2F8A4()
{
  unint64_t result = qword_269CE7240;
  if (!qword_269CE7240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7240);
  }
  return result;
}

unint64_t sub_253A2F8F4()
{
  unint64_t result = qword_269CE7248;
  if (!qword_269CE7248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7248);
  }
  return result;
}

unint64_t sub_253A2F944()
{
  unint64_t result = qword_269CE7250;
  if (!qword_269CE7250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7250);
  }
  return result;
}

unint64_t sub_253A2F994()
{
  unint64_t result = qword_269CE7258;
  if (!qword_269CE7258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7258);
  }
  return result;
}

unint64_t sub_253A2F9E4()
{
  unint64_t result = qword_269CE7260;
  if (!qword_269CE7260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7260);
  }
  return result;
}

unint64_t sub_253A2FA34()
{
  unint64_t result = qword_269CE7268;
  if (!qword_269CE7268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7268);
  }
  return result;
}

unint64_t sub_253A2FA84()
{
  unint64_t result = qword_269CE7270;
  if (!qword_269CE7270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7270);
  }
  return result;
}

unint64_t sub_253A2FAD4()
{
  unint64_t result = qword_269CE7278;
  if (!qword_269CE7278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7278);
  }
  return result;
}

unint64_t sub_253A2FB24()
{
  unint64_t result = qword_269CE7280;
  if (!qword_269CE7280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7280);
  }
  return result;
}

unint64_t sub_253A2FB74()
{
  unint64_t result = qword_269CE7288;
  if (!qword_269CE7288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7288);
  }
  return result;
}

unint64_t sub_253A2FBC4()
{
  unint64_t result = qword_269CE7290;
  if (!qword_269CE7290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7290);
  }
  return result;
}

unint64_t sub_253A2FC14()
{
  unint64_t result = qword_269CE7298;
  if (!qword_269CE7298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7298);
  }
  return result;
}

unint64_t sub_253A2FC64()
{
  unint64_t result = qword_269CE72A0;
  if (!qword_269CE72A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72A0);
  }
  return result;
}

unint64_t sub_253A2FCB4()
{
  unint64_t result = qword_269CE72A8;
  if (!qword_269CE72A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72A8);
  }
  return result;
}

unint64_t sub_253A2FD04()
{
  unint64_t result = qword_269CE72B0;
  if (!qword_269CE72B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72B0);
  }
  return result;
}

unint64_t sub_253A2FD54()
{
  unint64_t result = qword_269CE72B8;
  if (!qword_269CE72B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72B8);
  }
  return result;
}

unint64_t sub_253A2FDA4()
{
  unint64_t result = qword_269CE72C0;
  if (!qword_269CE72C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72C0);
  }
  return result;
}

unint64_t sub_253A2FDF4()
{
  unint64_t result = qword_269CE72C8;
  if (!qword_269CE72C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72C8);
  }
  return result;
}

unint64_t sub_253A2FE44()
{
  unint64_t result = qword_269CE72D0;
  if (!qword_269CE72D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72D0);
  }
  return result;
}

unint64_t sub_253A2FE94()
{
  unint64_t result = qword_269CE72D8;
  if (!qword_269CE72D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72D8);
  }
  return result;
}

unint64_t sub_253A2FEE4()
{
  unint64_t result = qword_269CE72E0;
  if (!qword_269CE72E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72E0);
  }
  return result;
}

unint64_t sub_253A2FF34()
{
  unint64_t result = qword_269CE72E8;
  if (!qword_269CE72E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72E8);
  }
  return result;
}

unint64_t sub_253A2FF84()
{
  unint64_t result = qword_269CE72F0;
  if (!qword_269CE72F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72F0);
  }
  return result;
}

unint64_t sub_253A2FFD4()
{
  unint64_t result = qword_269CE72F8;
  if (!qword_269CE72F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE72F8);
  }
  return result;
}

unint64_t sub_253A30024()
{
  unint64_t result = qword_269CE7300;
  if (!qword_269CE7300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7300);
  }
  return result;
}

unint64_t sub_253A30074()
{
  unint64_t result = qword_269CE7308;
  if (!qword_269CE7308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7308);
  }
  return result;
}

unint64_t sub_253A300C4()
{
  unint64_t result = qword_269CE7310;
  if (!qword_269CE7310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7310);
  }
  return result;
}

unint64_t sub_253A30114()
{
  unint64_t result = qword_269CE7318;
  if (!qword_269CE7318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7318);
  }
  return result;
}

unint64_t sub_253A30164()
{
  unint64_t result = qword_269CE7320;
  if (!qword_269CE7320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7320);
  }
  return result;
}

unint64_t sub_253A301B4()
{
  unint64_t result = qword_269CE7328;
  if (!qword_269CE7328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7328);
  }
  return result;
}

unint64_t sub_253A30204()
{
  unint64_t result = qword_269CE7330;
  if (!qword_269CE7330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7330);
  }
  return result;
}

unint64_t sub_253A30254()
{
  unint64_t result = qword_269CE7338;
  if (!qword_269CE7338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7338);
  }
  return result;
}

unint64_t sub_253A302A4()
{
  unint64_t result = qword_269CE7340;
  if (!qword_269CE7340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7340);
  }
  return result;
}

unint64_t sub_253A302F4()
{
  unint64_t result = qword_269CE7348;
  if (!qword_269CE7348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7348);
  }
  return result;
}

unint64_t sub_253A30344()
{
  unint64_t result = qword_269CE7350;
  if (!qword_269CE7350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7350);
  }
  return result;
}

unint64_t sub_253A30394()
{
  unint64_t result = qword_269CE7358;
  if (!qword_269CE7358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7358);
  }
  return result;
}

unint64_t sub_253A303E4()
{
  unint64_t result = qword_269CE7360;
  if (!qword_269CE7360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7360);
  }
  return result;
}

unint64_t sub_253A30434()
{
  unint64_t result = qword_269CE7368;
  if (!qword_269CE7368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7368);
  }
  return result;
}

unint64_t sub_253A30484()
{
  unint64_t result = qword_269CE7370;
  if (!qword_269CE7370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7370);
  }
  return result;
}

unint64_t sub_253A304D4()
{
  unint64_t result = qword_269CE7378;
  if (!qword_269CE7378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7378);
  }
  return result;
}

unint64_t sub_253A30524()
{
  unint64_t result = qword_269CE7380;
  if (!qword_269CE7380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7380);
  }
  return result;
}

unint64_t sub_253A30574()
{
  unint64_t result = qword_269CE7388;
  if (!qword_269CE7388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7388);
  }
  return result;
}

unint64_t sub_253A305C4()
{
  unint64_t result = qword_269CE7390;
  if (!qword_269CE7390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7390);
  }
  return result;
}

unint64_t sub_253A30614()
{
  unint64_t result = qword_269CE7398;
  if (!qword_269CE7398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7398);
  }
  return result;
}

unint64_t sub_253A30664()
{
  unint64_t result = qword_269CE73A0;
  if (!qword_269CE73A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73A0);
  }
  return result;
}

unint64_t sub_253A306B4()
{
  unint64_t result = qword_269CE73A8;
  if (!qword_269CE73A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73A8);
  }
  return result;
}

unint64_t sub_253A30704()
{
  unint64_t result = qword_269CE73B0;
  if (!qword_269CE73B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73B0);
  }
  return result;
}

unint64_t sub_253A30754()
{
  unint64_t result = qword_269CE73B8;
  if (!qword_269CE73B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73B8);
  }
  return result;
}

unint64_t sub_253A307A4()
{
  unint64_t result = qword_269CE73C0;
  if (!qword_269CE73C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73C0);
  }
  return result;
}

unint64_t sub_253A307F4()
{
  unint64_t result = qword_269CE73C8;
  if (!qword_269CE73C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73C8);
  }
  return result;
}

unint64_t sub_253A30844()
{
  unint64_t result = qword_269CE73D0;
  if (!qword_269CE73D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73D0);
  }
  return result;
}

unint64_t sub_253A30894()
{
  unint64_t result = qword_269CE73D8;
  if (!qword_269CE73D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73D8);
  }
  return result;
}

unint64_t sub_253A308E4()
{
  unint64_t result = qword_269CE73E0;
  if (!qword_269CE73E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73E0);
  }
  return result;
}

unint64_t sub_253A30934()
{
  unint64_t result = qword_269CE73E8;
  if (!qword_269CE73E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73E8);
  }
  return result;
}

unint64_t sub_253A30984()
{
  unint64_t result = qword_269CE73F0;
  if (!qword_269CE73F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73F0);
  }
  return result;
}

unint64_t sub_253A309D4()
{
  unint64_t result = qword_269CE73F8;
  if (!qword_269CE73F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE73F8);
  }
  return result;
}

unint64_t sub_253A30A24()
{
  unint64_t result = qword_269CE7400;
  if (!qword_269CE7400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7400);
  }
  return result;
}

unint64_t sub_253A30A74()
{
  unint64_t result = qword_269CE7408;
  if (!qword_269CE7408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7408);
  }
  return result;
}

unint64_t sub_253A30AC4()
{
  unint64_t result = qword_269CE7410;
  if (!qword_269CE7410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7410);
  }
  return result;
}

unint64_t sub_253A30B14()
{
  unint64_t result = qword_269CE7418;
  if (!qword_269CE7418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7418);
  }
  return result;
}

unint64_t sub_253A30B64()
{
  unint64_t result = qword_269CE7420;
  if (!qword_269CE7420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7420);
  }
  return result;
}

unint64_t sub_253A30BB4()
{
  unint64_t result = qword_269CE7428;
  if (!qword_269CE7428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7428);
  }
  return result;
}

unint64_t sub_253A30C04()
{
  unint64_t result = qword_269CE7430;
  if (!qword_269CE7430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7430);
  }
  return result;
}

unint64_t sub_253A30C54()
{
  unint64_t result = qword_269CE7438;
  if (!qword_269CE7438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7438);
  }
  return result;
}

unint64_t sub_253A30CA4()
{
  unint64_t result = qword_269CE7440;
  if (!qword_269CE7440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7440);
  }
  return result;
}

unint64_t sub_253A30CF4()
{
  unint64_t result = qword_269CE7448;
  if (!qword_269CE7448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7448);
  }
  return result;
}

unint64_t sub_253A30D44()
{
  unint64_t result = qword_269CE7450;
  if (!qword_269CE7450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7450);
  }
  return result;
}

unint64_t sub_253A30D94()
{
  unint64_t result = qword_269CE7458;
  if (!qword_269CE7458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7458);
  }
  return result;
}

unint64_t sub_253A30DE4()
{
  unint64_t result = qword_269CE7460;
  if (!qword_269CE7460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7460);
  }
  return result;
}

unint64_t sub_253A30E34()
{
  unint64_t result = qword_269CE7468;
  if (!qword_269CE7468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7468);
  }
  return result;
}

unint64_t sub_253A30E84()
{
  unint64_t result = qword_269CE7470;
  if (!qword_269CE7470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7470);
  }
  return result;
}

unint64_t sub_253A30ED4()
{
  unint64_t result = qword_269CE7478;
  if (!qword_269CE7478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7478);
  }
  return result;
}

unint64_t sub_253A30F24()
{
  unint64_t result = qword_269CE7480;
  if (!qword_269CE7480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7480);
  }
  return result;
}

unint64_t sub_253A30F74()
{
  unint64_t result = qword_269CE7488;
  if (!qword_269CE7488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7488);
  }
  return result;
}

unint64_t sub_253A30FC4()
{
  unint64_t result = qword_269CE7490;
  if (!qword_269CE7490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7490);
  }
  return result;
}

unint64_t sub_253A31014()
{
  unint64_t result = qword_269CE7498;
  if (!qword_269CE7498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7498);
  }
  return result;
}

unint64_t sub_253A31064()
{
  unint64_t result = qword_269CE74A0;
  if (!qword_269CE74A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74A0);
  }
  return result;
}

unint64_t sub_253A310B4()
{
  unint64_t result = qword_269CE74A8;
  if (!qword_269CE74A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74A8);
  }
  return result;
}

unint64_t sub_253A31104()
{
  unint64_t result = qword_269CE74B0;
  if (!qword_269CE74B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74B0);
  }
  return result;
}

unint64_t sub_253A31154()
{
  unint64_t result = qword_269CE74B8;
  if (!qword_269CE74B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74B8);
  }
  return result;
}

unint64_t sub_253A311A4()
{
  unint64_t result = qword_269CE74C0;
  if (!qword_269CE74C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74C0);
  }
  return result;
}

unint64_t sub_253A311F4()
{
  unint64_t result = qword_269CE74C8;
  if (!qword_269CE74C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74C8);
  }
  return result;
}

unint64_t sub_253A31244()
{
  unint64_t result = qword_269CE74D0;
  if (!qword_269CE74D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74D0);
  }
  return result;
}

unint64_t sub_253A31294()
{
  unint64_t result = qword_269CE74D8;
  if (!qword_269CE74D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74D8);
  }
  return result;
}

unint64_t sub_253A312E4()
{
  unint64_t result = qword_269CE74E0;
  if (!qword_269CE74E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74E0);
  }
  return result;
}

unint64_t sub_253A31334()
{
  unint64_t result = qword_269CE74E8;
  if (!qword_269CE74E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74E8);
  }
  return result;
}

unint64_t sub_253A31384()
{
  unint64_t result = qword_269CE74F0;
  if (!qword_269CE74F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74F0);
  }
  return result;
}

unint64_t sub_253A313D4()
{
  unint64_t result = qword_269CE74F8;
  if (!qword_269CE74F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE74F8);
  }
  return result;
}

unint64_t sub_253A31424()
{
  unint64_t result = qword_269CE7500;
  if (!qword_269CE7500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7500);
  }
  return result;
}

unint64_t sub_253A31474()
{
  unint64_t result = qword_269CE7508;
  if (!qword_269CE7508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7508);
  }
  return result;
}

unint64_t sub_253A314C4()
{
  unint64_t result = qword_269CE7510;
  if (!qword_269CE7510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7510);
  }
  return result;
}

unint64_t sub_253A31514()
{
  unint64_t result = qword_269CE7518;
  if (!qword_269CE7518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7518);
  }
  return result;
}

unint64_t sub_253A31564()
{
  unint64_t result = qword_269CE7520;
  if (!qword_269CE7520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7520);
  }
  return result;
}

unint64_t sub_253A315B4()
{
  unint64_t result = qword_269CE7528;
  if (!qword_269CE7528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7528);
  }
  return result;
}

unint64_t sub_253A31604()
{
  unint64_t result = qword_269CE7530;
  if (!qword_269CE7530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7530);
  }
  return result;
}

unint64_t sub_253A31654()
{
  unint64_t result = qword_269CE7538;
  if (!qword_269CE7538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7538);
  }
  return result;
}

unint64_t sub_253A316A4()
{
  unint64_t result = qword_269CE7540;
  if (!qword_269CE7540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7540);
  }
  return result;
}

unint64_t sub_253A316F4()
{
  unint64_t result = qword_269CE7548;
  if (!qword_269CE7548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7548);
  }
  return result;
}

unint64_t sub_253A31744()
{
  unint64_t result = qword_269CE7550;
  if (!qword_269CE7550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7550);
  }
  return result;
}

unint64_t sub_253A31794()
{
  unint64_t result = qword_269CE7558;
  if (!qword_269CE7558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7558);
  }
  return result;
}

unint64_t sub_253A317E4()
{
  unint64_t result = qword_269CE7560;
  if (!qword_269CE7560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7560);
  }
  return result;
}

unint64_t sub_253A31834()
{
  unint64_t result = qword_269CE7568;
  if (!qword_269CE7568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7568);
  }
  return result;
}

unint64_t sub_253A31884()
{
  unint64_t result = qword_269CE7570;
  if (!qword_269CE7570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7570);
  }
  return result;
}

unint64_t sub_253A318D4()
{
  unint64_t result = qword_269CE7578;
  if (!qword_269CE7578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7578);
  }
  return result;
}

unint64_t sub_253A31924()
{
  unint64_t result = qword_269CE7580;
  if (!qword_269CE7580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7580);
  }
  return result;
}

unint64_t sub_253A31974()
{
  unint64_t result = qword_269CE7588;
  if (!qword_269CE7588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7588);
  }
  return result;
}

unint64_t sub_253A319C4()
{
  unint64_t result = qword_269CE7590;
  if (!qword_269CE7590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7590);
  }
  return result;
}

unint64_t sub_253A31A14()
{
  unint64_t result = qword_269CE7598;
  if (!qword_269CE7598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7598);
  }
  return result;
}

unint64_t sub_253A31A64()
{
  unint64_t result = qword_269CE75A0;
  if (!qword_269CE75A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75A0);
  }
  return result;
}

unint64_t sub_253A31AB4()
{
  unint64_t result = qword_269CE75A8;
  if (!qword_269CE75A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75A8);
  }
  return result;
}

unint64_t sub_253A31B04()
{
  unint64_t result = qword_269CE75B0;
  if (!qword_269CE75B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75B0);
  }
  return result;
}

unint64_t sub_253A31B54()
{
  unint64_t result = qword_269CE75B8;
  if (!qword_269CE75B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75B8);
  }
  return result;
}

unint64_t sub_253A31BA4()
{
  unint64_t result = qword_269CE75C0;
  if (!qword_269CE75C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75C0);
  }
  return result;
}

unint64_t sub_253A31BF4()
{
  unint64_t result = qword_269CE75C8;
  if (!qword_269CE75C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75C8);
  }
  return result;
}

unint64_t sub_253A31C44()
{
  unint64_t result = qword_269CE75D0;
  if (!qword_269CE75D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75D0);
  }
  return result;
}

unint64_t sub_253A31C94()
{
  unint64_t result = qword_269CE75D8;
  if (!qword_269CE75D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75D8);
  }
  return result;
}

unint64_t sub_253A31CE4()
{
  unint64_t result = qword_269CE75E0;
  if (!qword_269CE75E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75E0);
  }
  return result;
}

unint64_t sub_253A31D34()
{
  unint64_t result = qword_269CE75E8;
  if (!qword_269CE75E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75E8);
  }
  return result;
}

unint64_t sub_253A31D84()
{
  unint64_t result = qword_269CE75F0;
  if (!qword_269CE75F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75F0);
  }
  return result;
}

unint64_t sub_253A31DD4()
{
  unint64_t result = qword_269CE75F8;
  if (!qword_269CE75F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE75F8);
  }
  return result;
}

unint64_t sub_253A31E24()
{
  unint64_t result = qword_269CE7600;
  if (!qword_269CE7600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7600);
  }
  return result;
}

unint64_t sub_253A31E74()
{
  unint64_t result = qword_269CE7608;
  if (!qword_269CE7608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7608);
  }
  return result;
}

unint64_t sub_253A31EC4()
{
  unint64_t result = qword_269CE7610;
  if (!qword_269CE7610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7610);
  }
  return result;
}

unint64_t sub_253A31F14()
{
  unint64_t result = qword_269CE7618;
  if (!qword_269CE7618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7618);
  }
  return result;
}

unint64_t sub_253A31F64()
{
  unint64_t result = qword_269CE7620;
  if (!qword_269CE7620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7620);
  }
  return result;
}

unint64_t sub_253A31FB4()
{
  unint64_t result = qword_269CE7628;
  if (!qword_269CE7628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7628);
  }
  return result;
}

unint64_t sub_253A32004()
{
  unint64_t result = qword_269CE7630;
  if (!qword_269CE7630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7630);
  }
  return result;
}

unint64_t sub_253A32054()
{
  unint64_t result = qword_269CE7638;
  if (!qword_269CE7638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7638);
  }
  return result;
}

unint64_t sub_253A320A4()
{
  unint64_t result = qword_269CE7640;
  if (!qword_269CE7640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7640);
  }
  return result;
}

unint64_t sub_253A320F4()
{
  unint64_t result = qword_269CE7648;
  if (!qword_269CE7648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7648);
  }
  return result;
}

unint64_t sub_253A32144()
{
  unint64_t result = qword_269CE7650;
  if (!qword_269CE7650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7650);
  }
  return result;
}

unint64_t sub_253A32194()
{
  unint64_t result = qword_269CE7658;
  if (!qword_269CE7658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7658);
  }
  return result;
}

unint64_t sub_253A321E4()
{
  unint64_t result = qword_269CE7660;
  if (!qword_269CE7660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7660);
  }
  return result;
}

unint64_t sub_253A32234()
{
  unint64_t result = qword_269CE7668;
  if (!qword_269CE7668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7668);
  }
  return result;
}

unint64_t sub_253A32284()
{
  unint64_t result = qword_269CE7670;
  if (!qword_269CE7670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7670);
  }
  return result;
}

unint64_t sub_253A322D4()
{
  unint64_t result = qword_269CE7678;
  if (!qword_269CE7678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7678);
  }
  return result;
}

unint64_t sub_253A32324()
{
  unint64_t result = qword_269CE7680;
  if (!qword_269CE7680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7680);
  }
  return result;
}

unint64_t sub_253A32374()
{
  unint64_t result = qword_269CE7688;
  if (!qword_269CE7688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7688);
  }
  return result;
}

unint64_t sub_253A323C4()
{
  unint64_t result = qword_269CE7690;
  if (!qword_269CE7690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7690);
  }
  return result;
}

unint64_t sub_253A32414()
{
  unint64_t result = qword_269CE7698;
  if (!qword_269CE7698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7698);
  }
  return result;
}

unint64_t sub_253A32464()
{
  unint64_t result = qword_269CE76A0;
  if (!qword_269CE76A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76A0);
  }
  return result;
}

unint64_t sub_253A324B4()
{
  unint64_t result = qword_269CE76A8;
  if (!qword_269CE76A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76A8);
  }
  return result;
}

unint64_t sub_253A32504()
{
  unint64_t result = qword_269CE76B0;
  if (!qword_269CE76B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76B0);
  }
  return result;
}

unint64_t sub_253A32554()
{
  unint64_t result = qword_269CE76B8;
  if (!qword_269CE76B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76B8);
  }
  return result;
}

unint64_t sub_253A325A4()
{
  unint64_t result = qword_269CE76C0;
  if (!qword_269CE76C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76C0);
  }
  return result;
}

unint64_t sub_253A325F4()
{
  unint64_t result = qword_269CE76C8;
  if (!qword_269CE76C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76C8);
  }
  return result;
}

unint64_t sub_253A32644()
{
  unint64_t result = qword_269CE76D0;
  if (!qword_269CE76D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76D0);
  }
  return result;
}

unint64_t sub_253A32694()
{
  unint64_t result = qword_269CE76D8;
  if (!qword_269CE76D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76D8);
  }
  return result;
}

unint64_t sub_253A326E4()
{
  unint64_t result = qword_269CE76E0;
  if (!qword_269CE76E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76E0);
  }
  return result;
}

unint64_t sub_253A32734()
{
  unint64_t result = qword_269CE76E8;
  if (!qword_269CE76E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76E8);
  }
  return result;
}

unint64_t sub_253A32784()
{
  unint64_t result = qword_269CE76F0;
  if (!qword_269CE76F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76F0);
  }
  return result;
}

unint64_t sub_253A327D4()
{
  unint64_t result = qword_269CE76F8;
  if (!qword_269CE76F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE76F8);
  }
  return result;
}

unint64_t sub_253A32824()
{
  unint64_t result = qword_269CE7700;
  if (!qword_269CE7700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7700);
  }
  return result;
}

unint64_t sub_253A32874()
{
  unint64_t result = qword_269CE7708;
  if (!qword_269CE7708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7708);
  }
  return result;
}

unint64_t sub_253A328C4()
{
  unint64_t result = qword_269CE7710;
  if (!qword_269CE7710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7710);
  }
  return result;
}

unint64_t sub_253A32914()
{
  unint64_t result = qword_269CE7718;
  if (!qword_269CE7718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7718);
  }
  return result;
}

unint64_t sub_253A32964()
{
  unint64_t result = qword_269CE7720;
  if (!qword_269CE7720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7720);
  }
  return result;
}

unint64_t sub_253A329B4()
{
  unint64_t result = qword_269CE7728;
  if (!qword_269CE7728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7728);
  }
  return result;
}

unint64_t sub_253A32A04()
{
  unint64_t result = qword_269CE7730;
  if (!qword_269CE7730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7730);
  }
  return result;
}

unint64_t sub_253A32A54()
{
  unint64_t result = qword_269CE7738;
  if (!qword_269CE7738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7738);
  }
  return result;
}

unint64_t sub_253A32AA4()
{
  unint64_t result = qword_269CE7740;
  if (!qword_269CE7740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7740);
  }
  return result;
}

unint64_t sub_253A32AF4()
{
  unint64_t result = qword_269CE7748;
  if (!qword_269CE7748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7748);
  }
  return result;
}

unint64_t sub_253A32B44()
{
  unint64_t result = qword_269CE7750;
  if (!qword_269CE7750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7750);
  }
  return result;
}

unint64_t sub_253A32B94()
{
  unint64_t result = qword_269CE7758;
  if (!qword_269CE7758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7758);
  }
  return result;
}

unint64_t sub_253A32BE4()
{
  unint64_t result = qword_269CE7760;
  if (!qword_269CE7760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7760);
  }
  return result;
}

unint64_t sub_253A32C34()
{
  unint64_t result = qword_269CE7768;
  if (!qword_269CE7768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7768);
  }
  return result;
}

unint64_t sub_253A32C84()
{
  unint64_t result = qword_269CE7770;
  if (!qword_269CE7770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7770);
  }
  return result;
}

unint64_t sub_253A32CD4()
{
  unint64_t result = qword_269CE7778;
  if (!qword_269CE7778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7778);
  }
  return result;
}

unint64_t sub_253A32D24()
{
  unint64_t result = qword_269CE7780;
  if (!qword_269CE7780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7780);
  }
  return result;
}

unint64_t sub_253A32D74()
{
  unint64_t result = qword_269CE7788;
  if (!qword_269CE7788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7788);
  }
  return result;
}

unint64_t sub_253A32DC4()
{
  unint64_t result = qword_269CE7790;
  if (!qword_269CE7790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7790);
  }
  return result;
}

unint64_t sub_253A32E14()
{
  unint64_t result = qword_269CE7798;
  if (!qword_269CE7798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7798);
  }
  return result;
}

unint64_t sub_253A32E64()
{
  unint64_t result = qword_269CE77A0;
  if (!qword_269CE77A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77A0);
  }
  return result;
}

unint64_t sub_253A32EB4()
{
  unint64_t result = qword_269CE77A8;
  if (!qword_269CE77A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77A8);
  }
  return result;
}

unint64_t sub_253A32F04()
{
  unint64_t result = qword_269CE77B0;
  if (!qword_269CE77B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77B0);
  }
  return result;
}

unint64_t sub_253A32F54()
{
  unint64_t result = qword_269CE77B8;
  if (!qword_269CE77B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77B8);
  }
  return result;
}

unint64_t sub_253A32FA4()
{
  unint64_t result = qword_269CE77C0;
  if (!qword_269CE77C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77C0);
  }
  return result;
}

unint64_t sub_253A32FF4()
{
  unint64_t result = qword_269CE77C8;
  if (!qword_269CE77C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77C8);
  }
  return result;
}

unint64_t sub_253A33044()
{
  unint64_t result = qword_269CE77D0;
  if (!qword_269CE77D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77D0);
  }
  return result;
}

unint64_t sub_253A33094()
{
  unint64_t result = qword_269CE77D8;
  if (!qword_269CE77D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77D8);
  }
  return result;
}

unint64_t sub_253A330E4()
{
  unint64_t result = qword_269CE77E0;
  if (!qword_269CE77E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77E0);
  }
  return result;
}

unint64_t sub_253A33134()
{
  unint64_t result = qword_269CE77E8;
  if (!qword_269CE77E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77E8);
  }
  return result;
}

unint64_t sub_253A33184()
{
  unint64_t result = qword_269CE77F0;
  if (!qword_269CE77F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77F0);
  }
  return result;
}

unint64_t sub_253A331D4()
{
  unint64_t result = qword_269CE77F8;
  if (!qword_269CE77F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE77F8);
  }
  return result;
}

unint64_t sub_253A33224()
{
  unint64_t result = qword_269CE7800;
  if (!qword_269CE7800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7800);
  }
  return result;
}

unint64_t sub_253A33274()
{
  unint64_t result = qword_269CE7808;
  if (!qword_269CE7808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7808);
  }
  return result;
}

unint64_t sub_253A332C4()
{
  unint64_t result = qword_269CE7810;
  if (!qword_269CE7810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7810);
  }
  return result;
}

unint64_t sub_253A33314()
{
  unint64_t result = qword_269CE7818;
  if (!qword_269CE7818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7818);
  }
  return result;
}

unint64_t sub_253A33364()
{
  unint64_t result = qword_269CE7820;
  if (!qword_269CE7820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7820);
  }
  return result;
}

unint64_t sub_253A333B4()
{
  unint64_t result = qword_269CE7828;
  if (!qword_269CE7828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7828);
  }
  return result;
}

unint64_t sub_253A33404()
{
  unint64_t result = qword_269CE7830;
  if (!qword_269CE7830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7830);
  }
  return result;
}

unint64_t sub_253A33454()
{
  unint64_t result = qword_269CE7838;
  if (!qword_269CE7838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7838);
  }
  return result;
}

unint64_t sub_253A334A4()
{
  unint64_t result = qword_269CE7840;
  if (!qword_269CE7840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7840);
  }
  return result;
}

unint64_t sub_253A334F4()
{
  unint64_t result = qword_269CE7848;
  if (!qword_269CE7848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7848);
  }
  return result;
}

unint64_t sub_253A33544()
{
  unint64_t result = qword_269CE7850;
  if (!qword_269CE7850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7850);
  }
  return result;
}

unint64_t sub_253A33594()
{
  unint64_t result = qword_269CE7858;
  if (!qword_269CE7858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7858);
  }
  return result;
}

unint64_t sub_253A335E4()
{
  unint64_t result = qword_269CE7860;
  if (!qword_269CE7860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7860);
  }
  return result;
}

unint64_t sub_253A33634()
{
  unint64_t result = qword_269CE7868;
  if (!qword_269CE7868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7868);
  }
  return result;
}

unint64_t sub_253A33684()
{
  unint64_t result = qword_269CE7870;
  if (!qword_269CE7870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7870);
  }
  return result;
}

unint64_t sub_253A336D4()
{
  unint64_t result = qword_269CE7878;
  if (!qword_269CE7878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7878);
  }
  return result;
}

unint64_t sub_253A33724()
{
  unint64_t result = qword_269CE7880;
  if (!qword_269CE7880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7880);
  }
  return result;
}

unint64_t sub_253A33774()
{
  unint64_t result = qword_269CE7888;
  if (!qword_269CE7888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7888);
  }
  return result;
}

unint64_t sub_253A337C4()
{
  unint64_t result = qword_269CE7890;
  if (!qword_269CE7890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7890);
  }
  return result;
}

unint64_t sub_253A33814()
{
  unint64_t result = qword_269CE7898;
  if (!qword_269CE7898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7898);
  }
  return result;
}

unint64_t sub_253A33864()
{
  unint64_t result = qword_269CE78A0;
  if (!qword_269CE78A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78A0);
  }
  return result;
}

unint64_t sub_253A338B4()
{
  unint64_t result = qword_269CE78A8;
  if (!qword_269CE78A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78A8);
  }
  return result;
}

unint64_t sub_253A33904()
{
  unint64_t result = qword_269CE78B0;
  if (!qword_269CE78B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78B0);
  }
  return result;
}

unint64_t sub_253A33954()
{
  unint64_t result = qword_269CE78B8;
  if (!qword_269CE78B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78B8);
  }
  return result;
}

unint64_t sub_253A339A4()
{
  unint64_t result = qword_269CE78C0;
  if (!qword_269CE78C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78C0);
  }
  return result;
}

unint64_t sub_253A339F4()
{
  unint64_t result = qword_269CE78C8;
  if (!qword_269CE78C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78C8);
  }
  return result;
}

unint64_t sub_253A33A44()
{
  unint64_t result = qword_269CE78D0;
  if (!qword_269CE78D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78D0);
  }
  return result;
}

unint64_t sub_253A33A94()
{
  unint64_t result = qword_269CE78D8;
  if (!qword_269CE78D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78D8);
  }
  return result;
}

unint64_t sub_253A33AE4()
{
  unint64_t result = qword_269CE78E0;
  if (!qword_269CE78E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78E0);
  }
  return result;
}

unint64_t sub_253A33B34()
{
  unint64_t result = qword_269CE78E8;
  if (!qword_269CE78E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78E8);
  }
  return result;
}

unint64_t sub_253A33B84()
{
  unint64_t result = qword_269CE78F0;
  if (!qword_269CE78F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78F0);
  }
  return result;
}

unint64_t sub_253A33BD4()
{
  unint64_t result = qword_269CE78F8;
  if (!qword_269CE78F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE78F8);
  }
  return result;
}

unint64_t sub_253A33C24()
{
  unint64_t result = qword_269CE7900;
  if (!qword_269CE7900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7900);
  }
  return result;
}

unint64_t sub_253A33C74()
{
  unint64_t result = qword_269CE7908;
  if (!qword_269CE7908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7908);
  }
  return result;
}

unint64_t sub_253A33CC4()
{
  unint64_t result = qword_269CE7910;
  if (!qword_269CE7910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7910);
  }
  return result;
}

unint64_t sub_253A33D14()
{
  unint64_t result = qword_269CE7918;
  if (!qword_269CE7918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7918);
  }
  return result;
}

unint64_t sub_253A33D64()
{
  unint64_t result = qword_269CE7920;
  if (!qword_269CE7920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7920);
  }
  return result;
}

unint64_t sub_253A33DB4()
{
  unint64_t result = qword_269CE7928;
  if (!qword_269CE7928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7928);
  }
  return result;
}

unint64_t sub_253A33E04()
{
  unint64_t result = qword_269CE7930;
  if (!qword_269CE7930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7930);
  }
  return result;
}

unint64_t sub_253A33E54()
{
  unint64_t result = qword_269CE7938;
  if (!qword_269CE7938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7938);
  }
  return result;
}

unint64_t sub_253A33EA4()
{
  unint64_t result = qword_269CE7940;
  if (!qword_269CE7940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7940);
  }
  return result;
}

unint64_t sub_253A33EF4()
{
  unint64_t result = qword_269CE7948;
  if (!qword_269CE7948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7948);
  }
  return result;
}

unint64_t sub_253A33F44()
{
  unint64_t result = qword_269CE7950;
  if (!qword_269CE7950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7950);
  }
  return result;
}

unint64_t sub_253A33F94()
{
  unint64_t result = qword_269CE7958;
  if (!qword_269CE7958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7958);
  }
  return result;
}

unint64_t sub_253A33FE4()
{
  unint64_t result = qword_269CE7960;
  if (!qword_269CE7960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7960);
  }
  return result;
}

unint64_t sub_253A34034()
{
  unint64_t result = qword_269CE7968;
  if (!qword_269CE7968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7968);
  }
  return result;
}

unint64_t sub_253A34084()
{
  unint64_t result = qword_269CE7970;
  if (!qword_269CE7970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7970);
  }
  return result;
}

unint64_t sub_253A340D4()
{
  unint64_t result = qword_269CE7978;
  if (!qword_269CE7978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7978);
  }
  return result;
}

unint64_t sub_253A34124()
{
  unint64_t result = qword_269CE7980;
  if (!qword_269CE7980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7980);
  }
  return result;
}

unint64_t sub_253A34174()
{
  unint64_t result = qword_269CE7988;
  if (!qword_269CE7988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7988);
  }
  return result;
}

unint64_t sub_253A341C4()
{
  unint64_t result = qword_269CE7990;
  if (!qword_269CE7990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7990);
  }
  return result;
}

unint64_t sub_253A34214()
{
  unint64_t result = qword_269CE7998;
  if (!qword_269CE7998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7998);
  }
  return result;
}

unint64_t sub_253A34264()
{
  unint64_t result = qword_269CE79A0;
  if (!qword_269CE79A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79A0);
  }
  return result;
}

unint64_t sub_253A342B4()
{
  unint64_t result = qword_269CE79A8;
  if (!qword_269CE79A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79A8);
  }
  return result;
}

unint64_t sub_253A34304()
{
  unint64_t result = qword_269CE79B0;
  if (!qword_269CE79B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79B0);
  }
  return result;
}

unint64_t sub_253A34354()
{
  unint64_t result = qword_269CE79B8;
  if (!qword_269CE79B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79B8);
  }
  return result;
}

unint64_t sub_253A343A4()
{
  unint64_t result = qword_269CE79C0;
  if (!qword_269CE79C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79C0);
  }
  return result;
}

unint64_t sub_253A343F4()
{
  unint64_t result = qword_269CE79C8;
  if (!qword_269CE79C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79C8);
  }
  return result;
}

unint64_t sub_253A34444()
{
  unint64_t result = qword_269CE79D0;
  if (!qword_269CE79D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79D0);
  }
  return result;
}

unint64_t sub_253A34494()
{
  unint64_t result = qword_269CE79D8;
  if (!qword_269CE79D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79D8);
  }
  return result;
}

unint64_t sub_253A344E4()
{
  unint64_t result = qword_269CE79E0;
  if (!qword_269CE79E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79E0);
  }
  return result;
}

unint64_t sub_253A34534()
{
  unint64_t result = qword_269CE79E8;
  if (!qword_269CE79E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79E8);
  }
  return result;
}

unint64_t sub_253A34584()
{
  unint64_t result = qword_269CE79F0;
  if (!qword_269CE79F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79F0);
  }
  return result;
}

unint64_t sub_253A345D4()
{
  unint64_t result = qword_269CE79F8;
  if (!qword_269CE79F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE79F8);
  }
  return result;
}

unint64_t sub_253A34624()
{
  unint64_t result = qword_269CE7A00;
  if (!qword_269CE7A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A00);
  }
  return result;
}

unint64_t sub_253A34674()
{
  unint64_t result = qword_269CE7A08;
  if (!qword_269CE7A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A08);
  }
  return result;
}

unint64_t sub_253A346C4()
{
  unint64_t result = qword_269CE7A10;
  if (!qword_269CE7A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A10);
  }
  return result;
}

unint64_t sub_253A34714()
{
  unint64_t result = qword_269CE7A18;
  if (!qword_269CE7A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A18);
  }
  return result;
}

unint64_t sub_253A34764()
{
  unint64_t result = qword_269CE7A20;
  if (!qword_269CE7A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A20);
  }
  return result;
}

unint64_t sub_253A347B4()
{
  unint64_t result = qword_269CE7A28;
  if (!qword_269CE7A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A28);
  }
  return result;
}

unint64_t sub_253A34804()
{
  unint64_t result = qword_269CE7A30;
  if (!qword_269CE7A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A30);
  }
  return result;
}

unint64_t sub_253A34854()
{
  unint64_t result = qword_269CE7A38;
  if (!qword_269CE7A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A38);
  }
  return result;
}

unint64_t sub_253A348A4()
{
  unint64_t result = qword_269CE7A40;
  if (!qword_269CE7A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A40);
  }
  return result;
}

unint64_t sub_253A348F4()
{
  unint64_t result = qword_269CE7A48;
  if (!qword_269CE7A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A48);
  }
  return result;
}

unint64_t sub_253A34944()
{
  unint64_t result = qword_269CE7A50;
  if (!qword_269CE7A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A50);
  }
  return result;
}

unint64_t sub_253A34994()
{
  unint64_t result = qword_269CE7A58;
  if (!qword_269CE7A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A58);
  }
  return result;
}

unint64_t sub_253A349E4()
{
  unint64_t result = qword_269CE7A60;
  if (!qword_269CE7A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A60);
  }
  return result;
}

unint64_t sub_253A34A34()
{
  unint64_t result = qword_269CE7A68;
  if (!qword_269CE7A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A68);
  }
  return result;
}

unint64_t sub_253A34A84()
{
  unint64_t result = qword_269CE7A70;
  if (!qword_269CE7A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A70);
  }
  return result;
}

unint64_t sub_253A34AD4()
{
  unint64_t result = qword_269CE7A78;
  if (!qword_269CE7A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A78);
  }
  return result;
}

unint64_t sub_253A34B24()
{
  unint64_t result = qword_269CE7A80;
  if (!qword_269CE7A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A80);
  }
  return result;
}

unint64_t sub_253A34B74()
{
  unint64_t result = qword_269CE7A88;
  if (!qword_269CE7A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A88);
  }
  return result;
}

unint64_t sub_253A34BC4()
{
  unint64_t result = qword_269CE7A90;
  if (!qword_269CE7A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A90);
  }
  return result;
}

unint64_t sub_253A34C14()
{
  unint64_t result = qword_269CE7A98;
  if (!qword_269CE7A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7A98);
  }
  return result;
}

unint64_t sub_253A34C64()
{
  unint64_t result = qword_269CE7AA0;
  if (!qword_269CE7AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AA0);
  }
  return result;
}

unint64_t sub_253A34CB4()
{
  unint64_t result = qword_269CE7AA8;
  if (!qword_269CE7AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AA8);
  }
  return result;
}

unint64_t sub_253A34D04()
{
  unint64_t result = qword_269CE7AB0;
  if (!qword_269CE7AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AB0);
  }
  return result;
}

unint64_t sub_253A34D54()
{
  unint64_t result = qword_269CE7AB8;
  if (!qword_269CE7AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AB8);
  }
  return result;
}

unint64_t sub_253A34DA4()
{
  unint64_t result = qword_269CE7AC0;
  if (!qword_269CE7AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AC0);
  }
  return result;
}

unint64_t sub_253A34DF4()
{
  unint64_t result = qword_269CE7AC8;
  if (!qword_269CE7AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AC8);
  }
  return result;
}

unint64_t sub_253A34E44()
{
  unint64_t result = qword_269CE7AD0;
  if (!qword_269CE7AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AD0);
  }
  return result;
}

unint64_t sub_253A34E94()
{
  unint64_t result = qword_269CE7AD8;
  if (!qword_269CE7AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AD8);
  }
  return result;
}

unint64_t sub_253A34EE4()
{
  unint64_t result = qword_269CE7AE0;
  if (!qword_269CE7AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AE0);
  }
  return result;
}

unint64_t sub_253A34F34()
{
  unint64_t result = qword_269CE7AE8;
  if (!qword_269CE7AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AE8);
  }
  return result;
}

unint64_t sub_253A34F84()
{
  unint64_t result = qword_269CE7AF0;
  if (!qword_269CE7AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AF0);
  }
  return result;
}

unint64_t sub_253A34FD4()
{
  unint64_t result = qword_269CE7AF8;
  if (!qword_269CE7AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7AF8);
  }
  return result;
}

unint64_t sub_253A35024()
{
  unint64_t result = qword_269CE7B00;
  if (!qword_269CE7B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B00);
  }
  return result;
}

unint64_t sub_253A35074()
{
  unint64_t result = qword_269CE7B08;
  if (!qword_269CE7B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B08);
  }
  return result;
}

unint64_t sub_253A350C4()
{
  unint64_t result = qword_269CE7B10;
  if (!qword_269CE7B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B10);
  }
  return result;
}

unint64_t sub_253A35114()
{
  unint64_t result = qword_269CE7B18;
  if (!qword_269CE7B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B18);
  }
  return result;
}

unint64_t sub_253A35164()
{
  unint64_t result = qword_269CE7B20;
  if (!qword_269CE7B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B20);
  }
  return result;
}

unint64_t sub_253A351B4()
{
  unint64_t result = qword_269CE7B28;
  if (!qword_269CE7B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B28);
  }
  return result;
}

unint64_t sub_253A35204()
{
  unint64_t result = qword_269CE7B30;
  if (!qword_269CE7B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B30);
  }
  return result;
}

unint64_t sub_253A35254()
{
  unint64_t result = qword_269CE7B38;
  if (!qword_269CE7B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B38);
  }
  return result;
}

unint64_t sub_253A352A4()
{
  unint64_t result = qword_269CE7B40;
  if (!qword_269CE7B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B40);
  }
  return result;
}

unint64_t sub_253A352F4()
{
  unint64_t result = qword_269CE7B48;
  if (!qword_269CE7B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B48);
  }
  return result;
}

unint64_t sub_253A35344()
{
  unint64_t result = qword_269CE7B50;
  if (!qword_269CE7B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B50);
  }
  return result;
}

unint64_t sub_253A35394()
{
  unint64_t result = qword_269CE7B58;
  if (!qword_269CE7B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B58);
  }
  return result;
}

unint64_t sub_253A353E4()
{
  unint64_t result = qword_269CE7B60;
  if (!qword_269CE7B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B60);
  }
  return result;
}

unint64_t sub_253A35434()
{
  unint64_t result = qword_269CE7B68;
  if (!qword_269CE7B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B68);
  }
  return result;
}

unint64_t sub_253A35484()
{
  unint64_t result = qword_269CE7B70;
  if (!qword_269CE7B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B70);
  }
  return result;
}

unint64_t sub_253A354D4()
{
  unint64_t result = qword_269CE7B78;
  if (!qword_269CE7B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B78);
  }
  return result;
}

unint64_t sub_253A35524()
{
  unint64_t result = qword_269CE7B80;
  if (!qword_269CE7B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B80);
  }
  return result;
}

unint64_t sub_253A35574()
{
  unint64_t result = qword_269CE7B88;
  if (!qword_269CE7B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B88);
  }
  return result;
}

unint64_t sub_253A355C4()
{
  unint64_t result = qword_269CE7B90;
  if (!qword_269CE7B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B90);
  }
  return result;
}

unint64_t sub_253A35614()
{
  unint64_t result = qword_269CE7B98;
  if (!qword_269CE7B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7B98);
  }
  return result;
}

unint64_t sub_253A35664()
{
  unint64_t result = qword_269CE7BA0;
  if (!qword_269CE7BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BA0);
  }
  return result;
}

unint64_t sub_253A356B4()
{
  unint64_t result = qword_269CE7BA8;
  if (!qword_269CE7BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BA8);
  }
  return result;
}

unint64_t sub_253A35704()
{
  unint64_t result = qword_269CE7BB0;
  if (!qword_269CE7BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BB0);
  }
  return result;
}

unint64_t sub_253A35754()
{
  unint64_t result = qword_269CE7BB8;
  if (!qword_269CE7BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BB8);
  }
  return result;
}

unint64_t sub_253A357A4()
{
  unint64_t result = qword_269CE7BC0;
  if (!qword_269CE7BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BC0);
  }
  return result;
}

unint64_t sub_253A357F4()
{
  unint64_t result = qword_269CE7BC8;
  if (!qword_269CE7BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BC8);
  }
  return result;
}

unint64_t sub_253A35844()
{
  unint64_t result = qword_269CE7BD0;
  if (!qword_269CE7BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BD0);
  }
  return result;
}

unint64_t sub_253A35894()
{
  unint64_t result = qword_269CE7BD8;
  if (!qword_269CE7BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BD8);
  }
  return result;
}

unint64_t sub_253A358E4()
{
  unint64_t result = qword_269CE7BE0;
  if (!qword_269CE7BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BE0);
  }
  return result;
}

unint64_t sub_253A35934()
{
  unint64_t result = qword_269CE7BE8;
  if (!qword_269CE7BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BE8);
  }
  return result;
}

unint64_t sub_253A35984()
{
  unint64_t result = qword_269CE7BF0;
  if (!qword_269CE7BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BF0);
  }
  return result;
}

unint64_t sub_253A359D4()
{
  unint64_t result = qword_269CE7BF8;
  if (!qword_269CE7BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7BF8);
  }
  return result;
}

unint64_t sub_253A35A24()
{
  unint64_t result = qword_269CE7C00;
  if (!qword_269CE7C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C00);
  }
  return result;
}

unint64_t sub_253A35A74()
{
  unint64_t result = qword_269CE7C08;
  if (!qword_269CE7C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C08);
  }
  return result;
}

unint64_t sub_253A35AC4()
{
  unint64_t result = qword_269CE7C10;
  if (!qword_269CE7C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C10);
  }
  return result;
}

unint64_t sub_253A35B14()
{
  unint64_t result = qword_269CE7C18;
  if (!qword_269CE7C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C18);
  }
  return result;
}

unint64_t sub_253A35B64()
{
  unint64_t result = qword_269CE7C20;
  if (!qword_269CE7C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C20);
  }
  return result;
}

unint64_t sub_253A35BB4()
{
  unint64_t result = qword_269CE7C28;
  if (!qword_269CE7C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C28);
  }
  return result;
}

unint64_t sub_253A35C04()
{
  unint64_t result = qword_269CE7C30;
  if (!qword_269CE7C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C30);
  }
  return result;
}

unint64_t sub_253A35C54()
{
  unint64_t result = qword_269CE7C38;
  if (!qword_269CE7C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C38);
  }
  return result;
}

unint64_t sub_253A35CA4()
{
  unint64_t result = qword_269CE7C40;
  if (!qword_269CE7C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C40);
  }
  return result;
}

unint64_t sub_253A35CF4()
{
  unint64_t result = qword_269CE7C48;
  if (!qword_269CE7C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C48);
  }
  return result;
}

unint64_t sub_253A35D44()
{
  unint64_t result = qword_269CE7C50;
  if (!qword_269CE7C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C50);
  }
  return result;
}

unint64_t sub_253A35D94()
{
  unint64_t result = qword_269CE7C58;
  if (!qword_269CE7C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C58);
  }
  return result;
}

unint64_t sub_253A35DE4()
{
  unint64_t result = qword_269CE7C60;
  if (!qword_269CE7C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C60);
  }
  return result;
}

unint64_t sub_253A35E34()
{
  unint64_t result = qword_269CE7C68;
  if (!qword_269CE7C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C68);
  }
  return result;
}

unint64_t sub_253A35E84()
{
  unint64_t result = qword_269CE7C70;
  if (!qword_269CE7C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C70);
  }
  return result;
}

unint64_t sub_253A35ED4()
{
  unint64_t result = qword_269CE7C78;
  if (!qword_269CE7C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C78);
  }
  return result;
}

unint64_t sub_253A35F24()
{
  unint64_t result = qword_269CE7C80;
  if (!qword_269CE7C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C80);
  }
  return result;
}

unint64_t sub_253A35F74()
{
  unint64_t result = qword_269CE7C88;
  if (!qword_269CE7C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C88);
  }
  return result;
}

unint64_t sub_253A35FC4()
{
  unint64_t result = qword_269CE7C90;
  if (!qword_269CE7C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C90);
  }
  return result;
}

unint64_t sub_253A36014()
{
  unint64_t result = qword_269CE7C98;
  if (!qword_269CE7C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7C98);
  }
  return result;
}

unint64_t sub_253A36064()
{
  unint64_t result = qword_269CE7CA0;
  if (!qword_269CE7CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CA0);
  }
  return result;
}

unint64_t sub_253A360B4()
{
  unint64_t result = qword_269CE7CA8;
  if (!qword_269CE7CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CA8);
  }
  return result;
}

unint64_t sub_253A36104()
{
  unint64_t result = qword_269CE7CB0;
  if (!qword_269CE7CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CB0);
  }
  return result;
}

unint64_t sub_253A36154()
{
  unint64_t result = qword_269CE7CB8;
  if (!qword_269CE7CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CB8);
  }
  return result;
}

unint64_t sub_253A361A4()
{
  unint64_t result = qword_269CE7CC0;
  if (!qword_269CE7CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CC0);
  }
  return result;
}

unint64_t sub_253A361F4()
{
  unint64_t result = qword_269CE7CC8;
  if (!qword_269CE7CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CC8);
  }
  return result;
}

unint64_t sub_253A36244()
{
  unint64_t result = qword_269CE7CD0;
  if (!qword_269CE7CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CD0);
  }
  return result;
}

unint64_t sub_253A36294()
{
  unint64_t result = qword_269CE7CD8;
  if (!qword_269CE7CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CD8);
  }
  return result;
}

unint64_t sub_253A362E4()
{
  unint64_t result = qword_269CE7CE0;
  if (!qword_269CE7CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CE0);
  }
  return result;
}

unint64_t sub_253A36334()
{
  unint64_t result = qword_269CE7CE8;
  if (!qword_269CE7CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CE8);
  }
  return result;
}

unint64_t sub_253A36384()
{
  unint64_t result = qword_269CE7CF0;
  if (!qword_269CE7CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CF0);
  }
  return result;
}

unint64_t sub_253A363D4()
{
  unint64_t result = qword_269CE7CF8;
  if (!qword_269CE7CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7CF8);
  }
  return result;
}

unint64_t sub_253A36424()
{
  unint64_t result = qword_269CE7D00;
  if (!qword_269CE7D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D00);
  }
  return result;
}

unint64_t sub_253A36474()
{
  unint64_t result = qword_269CE7D08;
  if (!qword_269CE7D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D08);
  }
  return result;
}

unint64_t sub_253A364C4()
{
  unint64_t result = qword_269CE7D10;
  if (!qword_269CE7D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D10);
  }
  return result;
}

unint64_t sub_253A36514()
{
  unint64_t result = qword_269CE7D18;
  if (!qword_269CE7D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D18);
  }
  return result;
}

unint64_t sub_253A36564()
{
  unint64_t result = qword_269CE7D20;
  if (!qword_269CE7D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D20);
  }
  return result;
}

unint64_t sub_253A365B4()
{
  unint64_t result = qword_269CE7D28;
  if (!qword_269CE7D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D28);
  }
  return result;
}

unint64_t sub_253A36604()
{
  unint64_t result = qword_269CE7D30;
  if (!qword_269CE7D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D30);
  }
  return result;
}

unint64_t sub_253A36654()
{
  unint64_t result = qword_269CE7D38;
  if (!qword_269CE7D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D38);
  }
  return result;
}

unint64_t sub_253A366A4()
{
  unint64_t result = qword_269CE7D40;
  if (!qword_269CE7D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D40);
  }
  return result;
}

unint64_t sub_253A366F4()
{
  unint64_t result = qword_269CE7D48;
  if (!qword_269CE7D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D48);
  }
  return result;
}

unint64_t sub_253A36744()
{
  unint64_t result = qword_269CE7D50;
  if (!qword_269CE7D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D50);
  }
  return result;
}

unint64_t sub_253A36794()
{
  unint64_t result = qword_269CE7D58;
  if (!qword_269CE7D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D58);
  }
  return result;
}

unint64_t sub_253A367E4()
{
  unint64_t result = qword_269CE7D60;
  if (!qword_269CE7D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D60);
  }
  return result;
}

unint64_t sub_253A36834()
{
  unint64_t result = qword_269CE7D68;
  if (!qword_269CE7D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D68);
  }
  return result;
}

unint64_t sub_253A36884()
{
  unint64_t result = qword_269CE7D70;
  if (!qword_269CE7D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D70);
  }
  return result;
}

unint64_t sub_253A368D4()
{
  unint64_t result = qword_269CE7D78;
  if (!qword_269CE7D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D78);
  }
  return result;
}

unint64_t sub_253A36924()
{
  unint64_t result = qword_269CE7D80;
  if (!qword_269CE7D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D80);
  }
  return result;
}

unint64_t sub_253A36974()
{
  unint64_t result = qword_269CE7D88;
  if (!qword_269CE7D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D88);
  }
  return result;
}

unint64_t sub_253A369C4()
{
  unint64_t result = qword_269CE7D90;
  if (!qword_269CE7D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D90);
  }
  return result;
}

unint64_t sub_253A36A14()
{
  unint64_t result = qword_269CE7D98;
  if (!qword_269CE7D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7D98);
  }
  return result;
}

unint64_t sub_253A36A64()
{
  unint64_t result = qword_269CE7DA0;
  if (!qword_269CE7DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DA0);
  }
  return result;
}

unint64_t sub_253A36AB4()
{
  unint64_t result = qword_269CE7DA8;
  if (!qword_269CE7DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DA8);
  }
  return result;
}

unint64_t sub_253A36B04()
{
  unint64_t result = qword_269CE7DB0;
  if (!qword_269CE7DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DB0);
  }
  return result;
}

unint64_t sub_253A36B54()
{
  unint64_t result = qword_269CE7DB8;
  if (!qword_269CE7DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DB8);
  }
  return result;
}

unint64_t sub_253A36BA4()
{
  unint64_t result = qword_269CE7DC0;
  if (!qword_269CE7DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DC0);
  }
  return result;
}

unint64_t sub_253A36BF4()
{
  unint64_t result = qword_269CE7DC8;
  if (!qword_269CE7DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DC8);
  }
  return result;
}

unint64_t sub_253A36C44()
{
  unint64_t result = qword_269CE7DD0;
  if (!qword_269CE7DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DD0);
  }
  return result;
}

unint64_t sub_253A36C94()
{
  unint64_t result = qword_269CE7DD8;
  if (!qword_269CE7DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DD8);
  }
  return result;
}

unint64_t sub_253A36CE4()
{
  unint64_t result = qword_269CE7DE0;
  if (!qword_269CE7DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DE0);
  }
  return result;
}

unint64_t sub_253A36D34()
{
  unint64_t result = qword_269CE7DE8;
  if (!qword_269CE7DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DE8);
  }
  return result;
}

unint64_t sub_253A36D84()
{
  unint64_t result = qword_269CE7DF0;
  if (!qword_269CE7DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DF0);
  }
  return result;
}

unint64_t sub_253A36DD4()
{
  unint64_t result = qword_269CE7DF8;
  if (!qword_269CE7DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7DF8);
  }
  return result;
}

unint64_t sub_253A36E24()
{
  unint64_t result = qword_269CE7E00;
  if (!qword_269CE7E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E00);
  }
  return result;
}

unint64_t sub_253A36E74()
{
  unint64_t result = qword_269CE7E08;
  if (!qword_269CE7E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E08);
  }
  return result;
}

unint64_t sub_253A36EC4()
{
  unint64_t result = qword_269CE7E10;
  if (!qword_269CE7E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E10);
  }
  return result;
}

unint64_t sub_253A36F14()
{
  unint64_t result = qword_269CE7E18;
  if (!qword_269CE7E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E18);
  }
  return result;
}

unint64_t sub_253A36F64()
{
  unint64_t result = qword_269CE7E20;
  if (!qword_269CE7E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E20);
  }
  return result;
}

unint64_t sub_253A36FB4()
{
  unint64_t result = qword_269CE7E28;
  if (!qword_269CE7E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E28);
  }
  return result;
}

unint64_t sub_253A37004()
{
  unint64_t result = qword_269CE7E30;
  if (!qword_269CE7E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E30);
  }
  return result;
}

unint64_t sub_253A37054()
{
  unint64_t result = qword_269CE7E38;
  if (!qword_269CE7E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E38);
  }
  return result;
}

unint64_t sub_253A370A4()
{
  unint64_t result = qword_269CE7E40;
  if (!qword_269CE7E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E40);
  }
  return result;
}

unint64_t sub_253A370F4()
{
  unint64_t result = qword_269CE7E48;
  if (!qword_269CE7E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E48);
  }
  return result;
}

unint64_t sub_253A37144()
{
  unint64_t result = qword_269CE7E50;
  if (!qword_269CE7E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E50);
  }
  return result;
}

unint64_t sub_253A37194()
{
  unint64_t result = qword_269CE7E58;
  if (!qword_269CE7E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E58);
  }
  return result;
}

unint64_t sub_253A371E4()
{
  unint64_t result = qword_269CE7E60;
  if (!qword_269CE7E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E60);
  }
  return result;
}

unint64_t sub_253A37234()
{
  unint64_t result = qword_269CE7E68;
  if (!qword_269CE7E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E68);
  }
  return result;
}

unint64_t sub_253A37284()
{
  unint64_t result = qword_269CE7E70;
  if (!qword_269CE7E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E70);
  }
  return result;
}

unint64_t sub_253A372D4()
{
  unint64_t result = qword_269CE7E78;
  if (!qword_269CE7E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E78);
  }
  return result;
}

unint64_t sub_253A37324()
{
  unint64_t result = qword_269CE7E80;
  if (!qword_269CE7E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E80);
  }
  return result;
}

unint64_t sub_253A37374()
{
  unint64_t result = qword_269CE7E88;
  if (!qword_269CE7E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E88);
  }
  return result;
}

unint64_t sub_253A373C4()
{
  unint64_t result = qword_269CE7E90;
  if (!qword_269CE7E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E90);
  }
  return result;
}

unint64_t sub_253A37414()
{
  unint64_t result = qword_269CE7E98;
  if (!qword_269CE7E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7E98);
  }
  return result;
}

unint64_t sub_253A37464()
{
  unint64_t result = qword_269CE7EA0;
  if (!qword_269CE7EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EA0);
  }
  return result;
}

unint64_t sub_253A374B4()
{
  unint64_t result = qword_269CE7EA8;
  if (!qword_269CE7EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EA8);
  }
  return result;
}

unint64_t sub_253A37504()
{
  unint64_t result = qword_269CE7EB0;
  if (!qword_269CE7EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EB0);
  }
  return result;
}

unint64_t sub_253A37554()
{
  unint64_t result = qword_269CE7EB8;
  if (!qword_269CE7EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EB8);
  }
  return result;
}

unint64_t sub_253A375A4()
{
  unint64_t result = qword_269CE7EC0;
  if (!qword_269CE7EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EC0);
  }
  return result;
}

unint64_t sub_253A375F4()
{
  unint64_t result = qword_269CE7EC8;
  if (!qword_269CE7EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EC8);
  }
  return result;
}

unint64_t sub_253A37644()
{
  unint64_t result = qword_269CE7ED0;
  if (!qword_269CE7ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7ED0);
  }
  return result;
}

unint64_t sub_253A37694()
{
  unint64_t result = qword_269CE7ED8;
  if (!qword_269CE7ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7ED8);
  }
  return result;
}

unint64_t sub_253A376E4()
{
  unint64_t result = qword_269CE7EE0;
  if (!qword_269CE7EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EE0);
  }
  return result;
}

unint64_t sub_253A37734()
{
  unint64_t result = qword_269CE7EE8;
  if (!qword_269CE7EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EE8);
  }
  return result;
}

unint64_t sub_253A37784()
{
  unint64_t result = qword_269CE7EF0;
  if (!qword_269CE7EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EF0);
  }
  return result;
}

unint64_t sub_253A377D4()
{
  unint64_t result = qword_269CE7EF8;
  if (!qword_269CE7EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7EF8);
  }
  return result;
}

unint64_t sub_253A37824()
{
  unint64_t result = qword_269CE7F00;
  if (!qword_269CE7F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F00);
  }
  return result;
}

unint64_t sub_253A37874()
{
  unint64_t result = qword_269CE7F08;
  if (!qword_269CE7F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F08);
  }
  return result;
}

unint64_t sub_253A378C4()
{
  unint64_t result = qword_269CE7F10;
  if (!qword_269CE7F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F10);
  }
  return result;
}

unint64_t sub_253A37914()
{
  unint64_t result = qword_269CE7F18;
  if (!qword_269CE7F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F18);
  }
  return result;
}

unint64_t sub_253A37964()
{
  unint64_t result = qword_269CE7F20;
  if (!qword_269CE7F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F20);
  }
  return result;
}

unint64_t sub_253A379B4()
{
  unint64_t result = qword_269CE7F28;
  if (!qword_269CE7F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F28);
  }
  return result;
}

unint64_t sub_253A37A04()
{
  unint64_t result = qword_269CE7F30;
  if (!qword_269CE7F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F30);
  }
  return result;
}

unint64_t sub_253A37A54()
{
  unint64_t result = qword_269CE7F38;
  if (!qword_269CE7F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F38);
  }
  return result;
}

unint64_t sub_253A37AA4()
{
  unint64_t result = qword_269CE7F40;
  if (!qword_269CE7F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F40);
  }
  return result;
}

unint64_t sub_253A37AF4()
{
  unint64_t result = qword_269CE7F48;
  if (!qword_269CE7F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F48);
  }
  return result;
}

unint64_t sub_253A37B44()
{
  unint64_t result = qword_269CE7F50;
  if (!qword_269CE7F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F50);
  }
  return result;
}

unint64_t sub_253A37B94()
{
  unint64_t result = qword_269CE7F58;
  if (!qword_269CE7F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F58);
  }
  return result;
}

unint64_t sub_253A37BE4()
{
  unint64_t result = qword_269CE7F60;
  if (!qword_269CE7F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F60);
  }
  return result;
}

unint64_t sub_253A37C34()
{
  unint64_t result = qword_269CE7F68;
  if (!qword_269CE7F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F68);
  }
  return result;
}

unint64_t sub_253A37C84()
{
  unint64_t result = qword_269CE7F70;
  if (!qword_269CE7F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F70);
  }
  return result;
}

unint64_t sub_253A37CD4()
{
  unint64_t result = qword_269CE7F78;
  if (!qword_269CE7F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F78);
  }
  return result;
}

unint64_t sub_253A37D24()
{
  unint64_t result = qword_269CE7F80;
  if (!qword_269CE7F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F80);
  }
  return result;
}

unint64_t sub_253A37D74()
{
  unint64_t result = qword_269CE7F88;
  if (!qword_269CE7F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F88);
  }
  return result;
}

unint64_t sub_253A37DC4()
{
  unint64_t result = qword_269CE7F90;
  if (!qword_269CE7F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F90);
  }
  return result;
}

unint64_t sub_253A37E14()
{
  unint64_t result = qword_269CE7F98;
  if (!qword_269CE7F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7F98);
  }
  return result;
}

unint64_t sub_253A37E64()
{
  unint64_t result = qword_269CE7FA0;
  if (!qword_269CE7FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FA0);
  }
  return result;
}

unint64_t sub_253A37EB4()
{
  unint64_t result = qword_269CE7FA8;
  if (!qword_269CE7FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FA8);
  }
  return result;
}

unint64_t sub_253A37F04()
{
  unint64_t result = qword_269CE7FB0;
  if (!qword_269CE7FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FB0);
  }
  return result;
}

unint64_t sub_253A37F54()
{
  unint64_t result = qword_269CE7FB8;
  if (!qword_269CE7FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FB8);
  }
  return result;
}

unint64_t sub_253A37FA4()
{
  unint64_t result = qword_269CE7FC0;
  if (!qword_269CE7FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FC0);
  }
  return result;
}

unint64_t sub_253A37FF4()
{
  unint64_t result = qword_269CE7FC8;
  if (!qword_269CE7FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FC8);
  }
  return result;
}

unint64_t sub_253A38044()
{
  unint64_t result = qword_269CE7FD0;
  if (!qword_269CE7FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FD0);
  }
  return result;
}

unint64_t sub_253A38094()
{
  unint64_t result = qword_269CE7FD8;
  if (!qword_269CE7FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FD8);
  }
  return result;
}

unint64_t sub_253A380E4()
{
  unint64_t result = qword_269CE7FE0;
  if (!qword_269CE7FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FE0);
  }
  return result;
}

unint64_t sub_253A38134()
{
  unint64_t result = qword_269CE7FE8;
  if (!qword_269CE7FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FE8);
  }
  return result;
}

unint64_t sub_253A38184()
{
  unint64_t result = qword_269CE7FF0;
  if (!qword_269CE7FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FF0);
  }
  return result;
}

unint64_t sub_253A381D4()
{
  unint64_t result = qword_269CE7FF8;
  if (!qword_269CE7FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE7FF8);
  }
  return result;
}

unint64_t sub_253A38224()
{
  unint64_t result = qword_269CE8000;
  if (!qword_269CE8000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8000);
  }
  return result;
}

unint64_t sub_253A38274()
{
  unint64_t result = qword_269CE8008;
  if (!qword_269CE8008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8008);
  }
  return result;
}

unint64_t sub_253A382C4()
{
  unint64_t result = qword_269CE8010;
  if (!qword_269CE8010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8010);
  }
  return result;
}

unint64_t sub_253A38314()
{
  unint64_t result = qword_269CE8018;
  if (!qword_269CE8018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8018);
  }
  return result;
}

unint64_t sub_253A38364()
{
  unint64_t result = qword_269CE8020;
  if (!qword_269CE8020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8020);
  }
  return result;
}

unint64_t sub_253A383B4()
{
  unint64_t result = qword_269CE8028;
  if (!qword_269CE8028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8028);
  }
  return result;
}

unint64_t sub_253A38404()
{
  unint64_t result = qword_269CE8030;
  if (!qword_269CE8030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8030);
  }
  return result;
}

unint64_t sub_253A38454()
{
  unint64_t result = qword_269CE8038;
  if (!qword_269CE8038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8038);
  }
  return result;
}

unint64_t sub_253A384A4()
{
  unint64_t result = qword_269CE8040;
  if (!qword_269CE8040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8040);
  }
  return result;
}

unint64_t sub_253A384F4()
{
  unint64_t result = qword_269CE8048;
  if (!qword_269CE8048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8048);
  }
  return result;
}

unint64_t sub_253A38544()
{
  unint64_t result = qword_269CE8050;
  if (!qword_269CE8050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8050);
  }
  return result;
}

unint64_t sub_253A38594()
{
  unint64_t result = qword_269CE8058;
  if (!qword_269CE8058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8058);
  }
  return result;
}

unint64_t sub_253A385E4()
{
  unint64_t result = qword_269CE8060;
  if (!qword_269CE8060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8060);
  }
  return result;
}

unint64_t sub_253A38634()
{
  unint64_t result = qword_269CE8068;
  if (!qword_269CE8068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8068);
  }
  return result;
}

unint64_t sub_253A38684()
{
  unint64_t result = qword_269CE8070;
  if (!qword_269CE8070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8070);
  }
  return result;
}

unint64_t sub_253A386D4()
{
  unint64_t result = qword_269CE8078;
  if (!qword_269CE8078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8078);
  }
  return result;
}

unint64_t sub_253A38724()
{
  unint64_t result = qword_269CE8080;
  if (!qword_269CE8080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8080);
  }
  return result;
}

unint64_t sub_253A38774()
{
  unint64_t result = qword_26B2411D8;
  if (!qword_26B2411D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2411D8);
  }
  return result;
}

unint64_t sub_253A387C4()
{
  unint64_t result = qword_26B248F90;
  if (!qword_26B248F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B248F90);
  }
  return result;
}

unint64_t sub_253A38814()
{
  unint64_t result = qword_269CE8088;
  if (!qword_269CE8088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8088);
  }
  return result;
}

unint64_t sub_253A38864()
{
  unint64_t result = qword_269CE8090;
  if (!qword_269CE8090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8090);
  }
  return result;
}

unint64_t sub_253A388B4()
{
  unint64_t result = qword_269CE8098;
  if (!qword_269CE8098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8098);
  }
  return result;
}

unint64_t sub_253A38904()
{
  unint64_t result = qword_269CE80A0;
  if (!qword_269CE80A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80A0);
  }
  return result;
}

unint64_t sub_253A38954()
{
  unint64_t result = qword_269CE80A8;
  if (!qword_269CE80A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80A8);
  }
  return result;
}

unint64_t sub_253A389A4()
{
  unint64_t result = qword_269CE80B0;
  if (!qword_269CE80B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80B0);
  }
  return result;
}

unint64_t sub_253A389F4()
{
  unint64_t result = qword_269CE80B8;
  if (!qword_269CE80B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80B8);
  }
  return result;
}

unint64_t sub_253A38A44()
{
  unint64_t result = qword_269CE80C0;
  if (!qword_269CE80C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80C0);
  }
  return result;
}

unint64_t sub_253A38A94()
{
  unint64_t result = qword_269CE80C8;
  if (!qword_269CE80C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80C8);
  }
  return result;
}

unint64_t sub_253A38AE4()
{
  unint64_t result = qword_269CE80D0;
  if (!qword_269CE80D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80D0);
  }
  return result;
}

unint64_t sub_253A38B34()
{
  unint64_t result = qword_269CE80D8;
  if (!qword_269CE80D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80D8);
  }
  return result;
}

unint64_t sub_253A38B84()
{
  unint64_t result = qword_269CE80E0;
  if (!qword_269CE80E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80E0);
  }
  return result;
}

unint64_t sub_253A38BD4()
{
  unint64_t result = qword_269CE80E8;
  if (!qword_269CE80E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80E8);
  }
  return result;
}

unint64_t sub_253A38C24()
{
  unint64_t result = qword_269CE80F0;
  if (!qword_269CE80F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80F0);
  }
  return result;
}

unint64_t sub_253A38C74()
{
  unint64_t result = qword_269CE80F8;
  if (!qword_269CE80F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE80F8);
  }
  return result;
}

unint64_t sub_253A38CC4()
{
  unint64_t result = qword_269CE8100;
  if (!qword_269CE8100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8100);
  }
  return result;
}

unint64_t sub_253A38D14()
{
  unint64_t result = qword_269CE8108;
  if (!qword_269CE8108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8108);
  }
  return result;
}

unint64_t sub_253A38D64()
{
  unint64_t result = qword_269CE8110;
  if (!qword_269CE8110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8110);
  }
  return result;
}

unint64_t sub_253A38DB4()
{
  unint64_t result = qword_269CE8118;
  if (!qword_269CE8118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8118);
  }
  return result;
}

unint64_t sub_253A38E04()
{
  unint64_t result = qword_269CE8120;
  if (!qword_269CE8120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8120);
  }
  return result;
}

unint64_t sub_253A38E54()
{
  unint64_t result = qword_269CE8128;
  if (!qword_269CE8128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8128);
  }
  return result;
}

unint64_t sub_253A38EA4()
{
  unint64_t result = qword_269CE8130;
  if (!qword_269CE8130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8130);
  }
  return result;
}

unint64_t sub_253A38EF4()
{
  unint64_t result = qword_26B241220;
  if (!qword_26B241220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B241220);
  }
  return result;
}

unint64_t sub_253A38F44()
{
  unint64_t result = qword_26B249F78;
  if (!qword_26B249F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F78);
  }
  return result;
}

unint64_t sub_253A38F94()
{
  unint64_t result = qword_26B249FA8;
  if (!qword_26B249FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FA8);
  }
  return result;
}

unint64_t sub_253A38FE4()
{
  unint64_t result = qword_26B249FA0;
  if (!qword_26B249FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FA0);
  }
  return result;
}

unint64_t sub_253A39034()
{
  unint64_t result = qword_26B24A018;
  if (!qword_26B24A018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A018);
  }
  return result;
}

unint64_t sub_253A39084()
{
  unint64_t result = qword_26B24A010;
  if (!qword_26B24A010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A010);
  }
  return result;
}

unint64_t sub_253A390D4()
{
  unint64_t result = qword_26B24A038;
  if (!qword_26B24A038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A038);
  }
  return result;
}

unint64_t sub_253A39124()
{
  unint64_t result = qword_26B24A030;
  if (!qword_26B24A030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A030);
  }
  return result;
}

unint64_t sub_253A39174()
{
  unint64_t result = qword_26B249FE0;
  if (!qword_26B249FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FE0);
  }
  return result;
}

unint64_t sub_253A391C4()
{
  unint64_t result = qword_26B249FD8;
  if (!qword_26B249FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FD8);
  }
  return result;
}

unint64_t sub_253A39214()
{
  unint64_t result = qword_26B24A028;
  if (!qword_26B24A028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A028);
  }
  return result;
}

unint64_t sub_253A39264()
{
  unint64_t result = qword_26B24A020;
  if (!qword_26B24A020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A020);
  }
  return result;
}

unint64_t sub_253A392B4()
{
  unint64_t result = qword_26B24A068;
  if (!qword_26B24A068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A068);
  }
  return result;
}

unint64_t sub_253A39304()
{
  unint64_t result = qword_26B24A060;
  if (!qword_26B24A060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A060);
  }
  return result;
}

unint64_t sub_253A39354()
{
  unint64_t result = qword_26B24A098;
  if (!qword_26B24A098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A098);
  }
  return result;
}

unint64_t sub_253A393A4()
{
  unint64_t result = qword_26B24A090;
  if (!qword_26B24A090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A090);
  }
  return result;
}

unint64_t sub_253A393F4()
{
  unint64_t result = qword_26B24A188;
  if (!qword_26B24A188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A188);
  }
  return result;
}

unint64_t sub_253A39444()
{
  unint64_t result = qword_26B24A180;
  if (!qword_26B24A180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A180);
  }
  return result;
}

unint64_t sub_253A39494()
{
  unint64_t result = qword_26B24A0B8;
  if (!qword_26B24A0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0B8);
  }
  return result;
}

unint64_t sub_253A394E4()
{
  unint64_t result = qword_26B24A0B0;
  if (!qword_26B24A0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0B0);
  }
  return result;
}

unint64_t sub_253A39534()
{
  unint64_t result = qword_26B24A058;
  if (!qword_26B24A058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A058);
  }
  return result;
}

unint64_t sub_253A39584()
{
  unint64_t result = qword_26B24A050;
  if (!qword_26B24A050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A050);
  }
  return result;
}

unint64_t sub_253A395D4()
{
  unint64_t result = qword_26B24A088;
  if (!qword_26B24A088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A088);
  }
  return result;
}

unint64_t sub_253A39624()
{
  unint64_t result = qword_26B24A080;
  if (!qword_26B24A080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A080);
  }
  return result;
}

unint64_t sub_253A39674()
{
  unint64_t result = qword_26B24A138;
  if (!qword_26B24A138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A138);
  }
  return result;
}

unint64_t sub_253A396C4()
{
  unint64_t result = qword_26B24A130;
  if (!qword_26B24A130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A130);
  }
  return result;
}

unint64_t sub_253A39714()
{
  unint64_t result = qword_26B24A108;
  if (!qword_26B24A108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A108);
  }
  return result;
}

unint64_t sub_253A39764()
{
  unint64_t result = qword_26B24A100;
  if (!qword_26B24A100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A100);
  }
  return result;
}

unint64_t sub_253A397B4()
{
  unint64_t result = qword_26B24A148;
  if (!qword_26B24A148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A148);
  }
  return result;
}

unint64_t sub_253A39804()
{
  unint64_t result = qword_26B24A140;
  if (!qword_26B24A140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A140);
  }
  return result;
}

unint64_t sub_253A39854()
{
  unint64_t result = qword_26B24A078;
  if (!qword_26B24A078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A078);
  }
  return result;
}

unint64_t sub_253A398A4()
{
  unint64_t result = qword_26B24A070;
  if (!qword_26B24A070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A070);
  }
  return result;
}

unint64_t sub_253A398F4()
{
  unint64_t result = qword_26B24A048;
  if (!qword_26B24A048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A048);
  }
  return result;
}

unint64_t sub_253A39944()
{
  unint64_t result = qword_26B24A040;
  if (!qword_26B24A040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A040);
  }
  return result;
}

unint64_t sub_253A39994()
{
  unint64_t result = qword_26B249FF0;
  if (!qword_26B249FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FF0);
  }
  return result;
}

unint64_t sub_253A399E4()
{
  unint64_t result = qword_26B249FE8;
  if (!qword_26B249FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FE8);
  }
  return result;
}

unint64_t sub_253A39A34()
{
  unint64_t result = qword_26B249FB8;
  if (!qword_26B249FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FB8);
  }
  return result;
}

unint64_t sub_253A39A84()
{
  unint64_t result = qword_26B249FB0;
  if (!qword_26B249FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FB0);
  }
  return result;
}

unint64_t sub_253A39AD4()
{
  unint64_t result = qword_26B24A008;
  if (!qword_26B24A008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A008);
  }
  return result;
}

unint64_t sub_253A39B24()
{
  unint64_t result = qword_26B24A000;
  if (!qword_26B24A000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A000);
  }
  return result;
}

unint64_t sub_253A39B74()
{
  unint64_t result = qword_26B24A210;
  if (!qword_26B24A210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A210);
  }
  return result;
}

unint64_t sub_253A39BC4()
{
  unint64_t result = qword_26B24A208;
  if (!qword_26B24A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A208);
  }
  return result;
}

unint64_t sub_253A39C14()
{
  unint64_t result = qword_26B24A1C0;
  if (!qword_26B24A1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1C0);
  }
  return result;
}

unint64_t sub_253A39C64()
{
  unint64_t result = qword_26B24A1B8;
  if (!qword_26B24A1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1B8);
  }
  return result;
}

unint64_t sub_253A39CB4()
{
  unint64_t result = qword_26B24A0A8;
  if (!qword_26B24A0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0A8);
  }
  return result;
}

unint64_t sub_253A39D04()
{
  unint64_t result = qword_26B24A0A0;
  if (!qword_26B24A0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0A0);
  }
  return result;
}

unint64_t sub_253A39D54()
{
  unint64_t result = qword_26B24A0E8;
  if (!qword_26B24A0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0E8);
  }
  return result;
}

unint64_t sub_253A39DA4()
{
  unint64_t result = qword_26B24A0E0;
  if (!qword_26B24A0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0E0);
  }
  return result;
}

unint64_t sub_253A39DF4()
{
  unint64_t result = qword_26B24A240;
  if (!qword_26B24A240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A240);
  }
  return result;
}

unint64_t sub_253A39E44()
{
  unint64_t result = qword_26B24A238;
  if (!qword_26B24A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A238);
  }
  return result;
}

unint64_t sub_253A39E94()
{
  unint64_t result = qword_26B24A280;
  if (!qword_26B24A280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A280);
  }
  return result;
}

unint64_t sub_253A39EE4()
{
  unint64_t result = qword_26B24A278;
  if (!qword_26B24A278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A278);
  }
  return result;
}

unint64_t sub_253A39F34()
{
  unint64_t result = qword_26B24A290;
  if (!qword_26B24A290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A290);
  }
  return result;
}

unint64_t sub_253A39F84()
{
  unint64_t result = qword_26B24A288;
  if (!qword_26B24A288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A288);
  }
  return result;
}

unint64_t sub_253A39FD4()
{
  unint64_t result = qword_26B249F88;
  if (!qword_26B249F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F88);
  }
  return result;
}

unint64_t sub_253A3A024()
{
  unint64_t result = qword_26B249F80;
  if (!qword_26B249F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F80);
  }
  return result;
}

unint64_t sub_253A3A074()
{
  unint64_t result = qword_26B24A1F0;
  if (!qword_26B24A1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1F0);
  }
  return result;
}

unint64_t sub_253A3A0C4()
{
  unint64_t result = qword_26B24A1E8;
  if (!qword_26B24A1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1E8);
  }
  return result;
}

unint64_t sub_253A3A114()
{
  unint64_t result = qword_26B24A250;
  if (!qword_26B24A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A250);
  }
  return result;
}

unint64_t sub_253A3A164()
{
  unint64_t result = qword_26B24A248;
  if (!qword_26B24A248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A248);
  }
  return result;
}

unint64_t sub_253A3A1B4()
{
  unint64_t result = qword_26B24A168;
  if (!qword_26B24A168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A168);
  }
  return result;
}

unint64_t sub_253A3A204()
{
  unint64_t result = qword_26B24A160;
  if (!qword_26B24A160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A160);
  }
  return result;
}

unint64_t sub_253A3A254()
{
  unint64_t result = qword_26B24A198;
  if (!qword_26B24A198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A198);
  }
  return result;
}

unint64_t sub_253A3A2A4()
{
  unint64_t result = qword_26B24A190;
  if (!qword_26B24A190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A190);
  }
  return result;
}

unint64_t sub_253A3A2F4()
{
  unint64_t result = qword_26B24A118;
  if (!qword_26B24A118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A118);
  }
  return result;
}

unint64_t sub_253A3A344()
{
  unint64_t result = qword_26B24A110;
  if (!qword_26B24A110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A110);
  }
  return result;
}

unint64_t sub_253A3A394()
{
  unint64_t result = qword_26B24A0D8;
  if (!qword_26B24A0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0D8);
  }
  return result;
}

unint64_t sub_253A3A3E4()
{
  unint64_t result = qword_26B24A0D0;
  if (!qword_26B24A0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0D0);
  }
  return result;
}

unint64_t sub_253A3A434()
{
  unint64_t result = qword_26B24A158;
  if (!qword_26B24A158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A158);
  }
  return result;
}

unint64_t sub_253A3A484()
{
  unint64_t result = qword_26B24A150;
  if (!qword_26B24A150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A150);
  }
  return result;
}

unint64_t sub_253A3A4D4()
{
  unint64_t result = qword_26B24A260;
  if (!qword_26B24A260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A260);
  }
  return result;
}

unint64_t sub_253A3A524()
{
  unint64_t result = qword_26B24A258;
  if (!qword_26B24A258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A258);
  }
  return result;
}

unint64_t sub_253A3A574()
{
  unint64_t result = qword_26B24A178;
  if (!qword_26B24A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A178);
  }
  return result;
}

unint64_t sub_253A3A5C4()
{
  unint64_t result = qword_26B24A170;
  if (!qword_26B24A170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A170);
  }
  return result;
}

unint64_t sub_253A3A614()
{
  unint64_t result = qword_26B24A230;
  if (!qword_26B24A230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A230);
  }
  return result;
}

unint64_t sub_253A3A664()
{
  unint64_t result = qword_26B24A228;
  if (!qword_26B24A228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A228);
  }
  return result;
}

unint64_t sub_253A3A6B4()
{
  unint64_t result = qword_26B24A270;
  if (!qword_26B24A270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A270);
  }
  return result;
}

unint64_t sub_253A3A704()
{
  unint64_t result = qword_26B24A268;
  if (!qword_26B24A268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A268);
  }
  return result;
}

unint64_t sub_253A3A754()
{
  unint64_t result = qword_26B24A1B0;
  if (!qword_26B24A1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1B0);
  }
  return result;
}

unint64_t sub_253A3A7A4()
{
  unint64_t result = qword_26B24A1A8;
  if (!qword_26B24A1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1A8);
  }
  return result;
}

unint64_t sub_253A3A7F4()
{
  unint64_t result = qword_26B241230;
  if (!qword_26B241230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B241230);
  }
  return result;
}

unint64_t sub_253A3A844()
{
  unint64_t result = qword_26B24A1A0;
  if (!qword_26B24A1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1A0);
  }
  return result;
}

unint64_t sub_253A3A894()
{
  unint64_t result = qword_26B24A2A0;
  if (!qword_26B24A2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A2A0);
  }
  return result;
}

unint64_t sub_253A3A8E4()
{
  unint64_t result = qword_26B24A298;
  if (!qword_26B24A298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A298);
  }
  return result;
}

unint64_t sub_253A3A934()
{
  unint64_t result = qword_26B24A0C8;
  if (!qword_26B24A0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0C8);
  }
  return result;
}

unint64_t sub_253A3A984()
{
  unint64_t result = qword_26B24A0C0;
  if (!qword_26B24A0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0C0);
  }
  return result;
}

unint64_t sub_253A3A9D4()
{
  unint64_t result = qword_26B24A0F8;
  if (!qword_26B24A0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0F8);
  }
  return result;
}

unint64_t sub_253A3AA24()
{
  unint64_t result = qword_26B24A0F0;
  if (!qword_26B24A0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A0F0);
  }
  return result;
}

unint64_t sub_253A3AA74()
{
  unint64_t result = qword_26B24A1E0;
  if (!qword_26B24A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1E0);
  }
  return result;
}

unint64_t sub_253A3AAC4()
{
  unint64_t result = qword_26B24A1D8;
  if (!qword_26B24A1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1D8);
  }
  return result;
}

unint64_t sub_253A3AB14()
{
  unint64_t result = qword_26B24A220;
  if (!qword_26B24A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A220);
  }
  return result;
}

unint64_t sub_253A3AB64()
{
  unint64_t result = qword_26B24A218;
  if (!qword_26B24A218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A218);
  }
  return result;
}

unint64_t sub_253A3ABB4()
{
  unint64_t result = qword_26B24A1D0;
  if (!qword_26B24A1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1D0);
  }
  return result;
}

unint64_t sub_253A3AC04()
{
  unint64_t result = qword_26B24A1C8;
  if (!qword_26B24A1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1C8);
  }
  return result;
}

unint64_t sub_253A3AC54()
{
  unint64_t result = qword_26B24A200;
  if (!qword_26B24A200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A200);
  }
  return result;
}

unint64_t sub_253A3ACA4()
{
  unint64_t result = qword_26B24A1F8;
  if (!qword_26B24A1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A1F8);
  }
  return result;
}

unint64_t sub_253A3ACF4()
{
  unint64_t result = qword_26B24A128;
  if (!qword_26B24A128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A128);
  }
  return result;
}

unint64_t sub_253A3AD44()
{
  unint64_t result = qword_26B24A120;
  if (!qword_26B24A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B24A120);
  }
  return result;
}

unint64_t sub_253A3AD94()
{
  unint64_t result = qword_26B241228;
  if (!qword_26B241228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B241228);
  }
  return result;
}

unint64_t sub_253A3ADE4()
{
  unint64_t result = qword_26B249F90;
  if (!qword_26B249F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249F90);
  }
  return result;
}

unint64_t sub_253A3AE34()
{
  unint64_t result = qword_26B249FD0;
  if (!qword_26B249FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FD0);
  }
  return result;
}

unint64_t sub_253A3AE84()
{
  unint64_t result = qword_26B249FC8;
  if (!qword_26B249FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B249FC8);
  }
  return result;
}

unint64_t sub_253A3AED4()
{
  unint64_t result = qword_269CE8138;
  if (!qword_269CE8138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8138);
  }
  return result;
}

unint64_t sub_253A3AF24()
{
  unint64_t result = qword_269CE8140;
  if (!qword_269CE8140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8140);
  }
  return result;
}

unint64_t sub_253A3AF74()
{
  unint64_t result = qword_269CE8148;
  if (!qword_269CE8148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8148);
  }
  return result;
}

unint64_t sub_253A3AFC4()
{
  unint64_t result = qword_269CE8150;
  if (!qword_269CE8150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8150);
  }
  return result;
}

unint64_t sub_253A3B014()
{
  unint64_t result = qword_269CE8158;
  if (!qword_269CE8158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8158);
  }
  return result;
}

unint64_t sub_253A3B064()
{
  unint64_t result = qword_269CE8160;
  if (!qword_269CE8160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8160);
  }
  return result;
}

unint64_t sub_253A3B0B4()
{
  unint64_t result = qword_269CE8168;
  if (!qword_269CE8168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8168);
  }
  return result;
}

unint64_t sub_253A3B104()
{
  unint64_t result = qword_269CE8170;
  if (!qword_269CE8170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8170);
  }
  return result;
}

unint64_t sub_253A3B154()
{
  unint64_t result = qword_269CE8178;
  if (!qword_269CE8178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8178);
  }
  return result;
}

unint64_t sub_253A3B1A4()
{
  unint64_t result = qword_269CE8180;
  if (!qword_269CE8180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8180);
  }
  return result;
}

unint64_t sub_253A3B1F4()
{
  unint64_t result = qword_269CE8188;
  if (!qword_269CE8188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8188);
  }
  return result;
}

unint64_t sub_253A3B244()
{
  unint64_t result = qword_269CE8190;
  if (!qword_269CE8190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8190);
  }
  return result;
}

unint64_t sub_253A3B290()
{
  unint64_t result = qword_269CE8198;
  if (!qword_269CE8198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE8198);
  }
  return result;
}

unint64_t sub_253A3B2DC()
{
  unint64_t result = qword_269CE81A0;
  if (!qword_269CE81A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE81A0);
  }
  return result;
}

unint64_t sub_253A3B328()
{
  unint64_t result = qword_269CE83B0;
  if (!qword_269CE83B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269CE83B0);
  }
  return result;
}

uint64_t sub_253A3B374@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1 << *(unsigned char *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    uint64_t v6 = *(void *)(a3 + 48);
    uint64_t v7 = type metadata accessor for ToolboxCustomKeyResult(0);
    return sub_2539DF660(v6 + *(void *)(*(void *)(v7 - 8) + 72) * v4, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_253A3B424(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}